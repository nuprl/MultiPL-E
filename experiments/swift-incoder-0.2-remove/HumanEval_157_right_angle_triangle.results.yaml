language: swift
name: HumanEval_157_right_angle_triangle
results:
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    return ((b * b) - (4 * a * c)) > 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpq5zlyaw6/tmpq5zlyaw6.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b398741dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3987114b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3987114988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39871137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq5zlyaw6                        0x0000564ba65d81bb <unavailable> + 4539

    5    libc.so.6                          0x00002b3987609460 __libc_start_main +
    245

    6    tmpq5zlyaw6                        0x0000564ba65d7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    return ((a + b > c) && (a + c > b) && (b + c > a))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpwzjn8ju_/tmpwzjn8ju_.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af35566cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af355363b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af355363988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3553627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwzjn8ju_                        0x000055ff54143335 <unavailable> + 4917

    5    libc.so.6                          0x00002af355858460 __libc_start_main +
    245

    6    tmpwzjn8ju_                        0x000055ff54142e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(b - a)\n    let ac = abs(c - a)\n    let bc = abs(b\
    \ - c)\n    \n    if ab > ac && ab > bc {\n        return true\n    } else if\
    \ ac > ab && ac > bc {\n        return false\n    } else {\n        return false\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpu_tjzeps/tmpu_tjzeps.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84ffb9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84ff893b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84ff893988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84ff8927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu_tjzeps                        0x0000563884c822ab <unavailable> + 4779

    5    libc.so.6                          0x00002b84ffd88460 __libc_start_main +
    245

    6    tmpu_tjzeps                        0x0000563884c81f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    \n\
    \    if a > b {\n        if b > c {\n            return true\n        } else {\n\
    \            return false\n        }\n    } else {\n        if c > b {\n     \
    \       return true\n        } else {\n            return false\n        }\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpgt9rot67/tmpgt9rot67.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b731a1aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7319ea1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7319ea1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7319ea07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgt9rot67                        0x000055db261b032b <unavailable> + 4907

    5    libc.so.6                          0x00002b731a396460 __libc_start_main +
    245

    6    tmpgt9rot67                        0x000055db261aff59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if\
    \ a > b {\n        if b > c {\n            return true\n        } else {\n   \
    \         return false\n        }\n    } else {\n        if c > b {\n        \
    \    return true\n        } else {\n            return false\n        }\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpx7lprlxv/tmpx7lprlxv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19b1900c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19b15f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19b15f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19b15f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx7lprlxv                        0x000055c71c8b432b <unavailable> + 4907

    5    libc.so.6                          0x00002b19b1aec460 __libc_start_main +
    245

    6    tmpx7lprlxv                        0x000055c71c8b3f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if\
    \ a > b {\n        if b > c {\n            return true\n        } else {\n   \
    \         return false\n        }\n    } else {\n        if c > b {\n        \
    \    return true\n        } else {\n            return false\n        }\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpx7lprlxv/tmpx7lprlxv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19b1900c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19b15f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19b15f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19b15f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx7lprlxv                        0x000055c71c8b432b <unavailable> + 4907

    5    libc.so.6                          0x00002b19b1aec460 __libc_start_main +
    245

    6    tmpx7lprlxv                        0x000055c71c8b3f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    let\
    \ ab = abs(a + b)\n    let bc = abs(b + c)\n    let ac = abs(a + c)\n    let abc\
    \ = ab + bc\n    let acb = ac + ab\n    let abcb = abc + acb\n    let abac = abc\
    \ + abc\n    let acab = ac + abc \n    let abcac = abc + acab\n    let acabc =\
    \ ac + abca \n    let abcacb = abc + acabc \n    let acabcb = ac + abcac \n  \
    \  let abcacbc = abc + acabcb \n    let acabcba = ac + abcacb \n    let abcacbca\
    \ = abc + acabcb \n    let acabcbac = ac + abcacb \n    let abcacbcab = abc +\
    \ acabcb \n    let acabcbacb = ac + abcacb \n    let abcacbcabc = abc + acabcb\
    \ \n    let acabcbacba = ac + abcacb \n    let abcacbcabca = abc + acabcb \n \
    \   let acabcbacbacbac = ac + abcacb \n    let abcacbcabcab = abc + acabcb \n\
    \    let acabcbacbacbacb = ac + abcacb \n    let abcacbcabcabc = abc + acabcb\
    \ \n    let acabcbacbacbaca = ac + abcacb \n    let abcacbcabcabca = abc + acabcb\
    \ \n    let acabcbacbacbacbacb = ac + abcacb \n    let abcacbcabcabcab = abc +\
    \ acabcb \n    let acabcbacbacbacbacba = ac + abcacb \n    let abcacbcabcabcabc\
    \ = abc + acabcb \n    let acabcbacbacbacbacba = ac + abcacb \n    let abcacbcabcabcabca\
    \ = abc + acabcb \n    let acabcbacbacbacbacb = ac + abcacb \n    let abcacbcabcabcabcab\
    \ = abc + acabcb \n    let acabcbacbacbacbacbacba = ac + abcacb \n    let abcacbcabcabcabcabc\
    \ = abc + acabcb \n    let acabcbacbacbacbacbacba = ac + abcacb \n    let abcacbcabcabcabcabca\
    \ = abc + acabcb \n    let acabcbacbacbacbacbacb = ac + abcacb \n    let abcacbcabcabcabcabcab\
    \ = abc + acabcb \n    let acabc\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmphasrc2sh.swift:20:22: error: cannot find 'abca' in scope\n    let\
    \ acabc = ac + abca \n                     ^~~~\n/tmp/tmphasrc2sh.swift:52:9:\
    \ error: type annotation missing in pattern\n    let acabc\n        ^\n"
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if\
    \ a > b {\n        if b > c {\n            return true\n        } else {\n   \
    \         return false\n        }\n    } else {\n        if c > b {\n        \
    \    return true\n        } else {\n            return false\n        }\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpx7lprlxv/tmpx7lprlxv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19b1900c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19b15f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19b15f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19b15f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx7lprlxv                        0x000055c71c8b432b <unavailable> + 4907

    5    libc.so.6                          0x00002b19b1aec460 __libc_start_main +
    245

    6    tmpx7lprlxv                        0x000055c71c8b3f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(a - b)\n    let bc = abs(b - c)\n    let cb = abs(c\
    \ - b)\n    return (ab + bc == ab + cb) || (ab + cb == bc + ab)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpzam2ka5p/tmpzam2ka5p.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98b9142c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98b8e39b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98b8e39988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98b8e387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzam2ka5p                        0x00005591f6b0a32b <unavailable> + 4907

    5    libc.so.6                          0x00002b98b932e460 __libc_start_main +
    245

    6    tmpzam2ka5p                        0x00005591f6b09f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if\
    \ a > b {\n        if b > c {\n            return true\n        } else {\n   \
    \         return false\n        }\n    } else {\n        if c > b {\n        \
    \    return true\n        } else {\n            return false\n        }\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpx7lprlxv/tmpx7lprlxv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19b1900c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19b15f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19b15f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19b15f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx7lprlxv                        0x000055c71c8b432b <unavailable> + 4907

    5    libc.so.6                          0x00002b19b1aec460 __libc_start_main +
    245

    6    tmpx7lprlxv                        0x000055c71c8b3f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(b - a)\n    let bc = abs(c - b)\n    let ac = abs(c\
    \ - a)\n    return (ab > bc) && (ab > ac)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp1bakeqly/tmp1bakeqly.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b63a1d8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b63a1a86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b63a1a86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b63a1a857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1bakeqly                        0x000055737ad332ab <unavailable> + 4779

    5    libc.so.6                          0x00002b63a1f7b460 __libc_start_main +
    245

    6    tmp1bakeqly                        0x000055737ad32f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    \n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    let delta = b * b - 4 * a * c\n    \n    if delta < 0 {\n  \
    \      return false\n    }\n    \n    let theta = (atan2(b, a) + pi) / 2.0\n \
    \   \n    if theta > pi {\n        theta -= 2.0 * pi\n    }\n    \n    if theta\
    \ < -pi {\n        theta += 2.0 * pi\n    }\n    \n    if delta > 0 {\n      \
    \  return theta < pi / 2.0\n    }\n    \n    return theta > pi / 2.0\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptjokmg2j.swift:19:18: error: cannot find 'atan2' in scope\n   \
    \ let theta = (atan2(b, a) + pi) / 2.0\n                 ^~~~~\n/tmp/tmptjokmg2j.swift:19:32:\
    \ error: cannot find 'pi' in scope\n    let theta = (atan2(b, a) + pi) / 2.0\n\
    \                               ^~\n/tmp/tmptjokmg2j.swift:21:16: error: cannot\
    \ find 'pi' in scope\n    if theta > pi {\n               ^~\n/tmp/tmptjokmg2j.swift:22:24:\
    \ error: cannot find 'pi' in scope\n        theta -= 2.0 * pi\n              \
    \         ^~\n/tmp/tmptjokmg2j.swift:25:17: error: cannot find 'pi' in scope\n\
    \    if theta < -pi {\n                ^~\n/tmp/tmptjokmg2j.swift:26:24: error:\
    \ cannot find 'pi' in scope\n        theta += 2.0 * pi\n                     \
    \  ^~\n/tmp/tmptjokmg2j.swift:30:24: error: cannot find 'pi' in scope\n      \
    \  return theta < pi / 2.0\n                       ^~\n/tmp/tmptjokmg2j.swift:33:20:\
    \ error: cannot find 'pi' in scope\n    return theta > pi / 2.0\n            \
    \       ^~\n"
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(a - b)\n    let bc = abs(b - c)\n    let cb = abs(c\
    \ - b)\n    \n    return ab >= bc && ab >= cb\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp53f_6u_7/tmp53f_6u_7.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d45e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d42dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d42da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d42d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp53f_6u_7                        0x000055bf18c8732b <unavailable> + 4907

    5    libc.so.6                          0x00002b17d47cf460 __libc_start_main +
    245

    6    tmp53f_6u_7                        0x000055bf18c86f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if\
    \ a > b {\n        if b > c {\n            return true\n        } else {\n   \
    \         return false\n        }\n    } else {\n        if c > b {\n        \
    \    return true\n        } else {\n            return false\n        }\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpx7lprlxv/tmpx7lprlxv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19b1900c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19b15f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19b15f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19b15f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx7lprlxv                        0x000055c71c8b432b <unavailable> + 4907

    5    libc.so.6                          0x00002b19b1aec460 __libc_start_main +
    245

    6    tmpx7lprlxv                        0x000055c71c8b3f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(a - b)\n    let bc = abs(b - c)\n    let cb = abs(c\
    \ - b)\n    let abc = ab + bc + cb\n    return abc > a * b * c\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp_lekrfq3/tmp_lekrfq3.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b933c813c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b933c50ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b933c50a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b933c5097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_lekrfq3                        0x000055c2b41402ab <unavailable> + 4779

    5    libc.so.6                          0x00002b933c9ff460 __libc_start_main +
    245

    6    tmp_lekrfq3                        0x000055c2b413ff59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(a - b)\n    let bc = abs(b - c)\n    let cb = abs(c\
    \ - b)\n    return (ab + bc == ab + cb) || (ab + cb == bc + ab)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpzam2ka5p/tmpzam2ka5p.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98b9142c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98b8e39b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98b8e39988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98b8e387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzam2ka5p                        0x00005591f6b0a32b <unavailable> + 4907

    5    libc.so.6                          0x00002b98b932e460 __libc_start_main +
    245

    6    tmpzam2ka5p                        0x00005591f6b09f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    \n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n\
    \    \n    if a > b {\n        if b > c {\n            return true\n        }\
    \ else {\n            return false\n        }\n    } else {\n        if c > b\
    \ {\n            return true\n        } else {\n            return false\n   \
    \     }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpcqcjqn6j/tmpcqcjqn6j.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b65426c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65423bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65423bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65423be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcqcjqn6j                        0x000055648845232b <unavailable> + 4907

    5    libc.so.6                          0x00002b65428b4460 __libc_start_main +
    245

    6    tmpcqcjqn6j                        0x0000556488451f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if\
    \ a > b {\n        if b > c {\n            return true\n        } else {\n   \
    \         return false\n        }\n    } else {\n        if c > b {\n        \
    \    return true\n        } else {\n            return false\n        }\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpx7lprlxv/tmpx7lprlxv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19b1900c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19b15f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19b15f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19b15f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx7lprlxv                        0x000055c71c8b432b <unavailable> + 4907

    5    libc.so.6                          0x00002b19b1aec460 __libc_start_main +
    245

    6    tmpx7lprlxv                        0x000055c71c8b3f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    return ((a + b > c) && (a + c > b) && (b + c > a))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpwzjn8ju_/tmpwzjn8ju_.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af35566cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af355363b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af355363988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3553627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwzjn8ju_                        0x000055ff54143335 <unavailable> + 4917

    5    libc.so.6                          0x00002af355858460 __libc_start_main +
    245

    6    tmpwzjn8ju_                        0x000055ff54142e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    \n    // TODO: implement this\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpcipt5mx9/tmpcipt5mx9.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0c5c35c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0c592cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0c592c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0c592b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcipt5mx9                        0x000055f53be921bb <unavailable> + 4539

    5    libc.so.6                          0x00002ab0c5e21460 __libc_start_main +
    245

    6    tmpcipt5mx9                        0x000055f53be91e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    return ((a + b > c) && (a + c > b) && (b + c > a))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpwzjn8ju_/tmpwzjn8ju_.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af35566cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af355363b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af355363988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3553627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwzjn8ju_                        0x000055ff54143335 <unavailable> + 4917

    5    libc.so.6                          0x00002af355858460 __libc_start_main +
    245

    6    tmpwzjn8ju_                        0x000055ff54142e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n\
    \    let delta = b * b - 4 * a * c\n    if delta < 0 {\n        return false\n\
    \    }\n    let delta2 = delta * delta\n    let delta3 = delta2 * delta\n    let\
    \ delta4 = delta3 * delta\n    let delta5 = delta4 * delta\n    let delta6 = delta5\
    \ * delta\n    let delta7 = delta6 * delta\n    let delta8 = delta7 * delta\n\
    \    let delta9 = delta8 * delta\n    let delta10 = delta9 * delta\n    let delta11\
    \ = delta10 * delta\n    let delta12 = delta11 * delta\n    let delta13 = delta12\
    \ * delta\n    let delta14 = delta13 * delta\n    let delta15 = delta14 * delta\n\
    \    let delta16 = delta15 * delta\n    let delta17 = delta16 * delta\n    let\
    \ delta18 = delta17 * delta\n    let delta19 = delta18 * delta\n    let delta20\
    \ = delta19 * delta\n    let delta21 = delta20 * delta\n    let delta22 = delta21\
    \ * delta\n    let delta23 = delta22 * delta\n    let delta24 = delta23 * delta\n\
    \    let delta25 = delta24 * delta\n    let delta26 = delta25 * delta\n    let\
    \ delta27 = delta26 * delta\n    let delta28 = delta27 * delta\n    let delta29\
    \ = delta28 * delta\n    let delta30 = delta29 * delta\n    let delta31 = delta30\
    \ * delta\n    let delta32 = delta31 * delta\n    let delta33 = delta32 * delta\n\
    \    let delta34 = delta33 * delta\n    let delta35 = delta34 * delta\n    let\
    \ delta36 = delta35 * delta\n    let delta37 = delta36 * delta\n    let delta38\
    \ = delta37 * delta\n    let delta39 = delta38 * delta\n    let delta40 = delta39\
    \ * delta\n    let delta41 = delta40 * delta\n    let delta42 = delta41 * delta\n\
    \    let delta43 = delta42 * delta\n    let delta44 = delta43 * delta\n    let\
    \ delta45 = delta44 * delta\n    let delta46 = delta45 * delta\n    let delta47\
    \ = delta46 * delta\n    let delta48 = delta47 * delta\n    let delta49 = delta48\
    \ * delta\n    let delta50 = delta49 * delta\n    let delta51 = delta50 * delta\n\
    \    let delta52 = delta51 * delta\n    let delta53 = delta52 * delta\n    let\
    \ delta54 = delta53 * delta\n    let delta55 = delta54 * delta\n    let delta56\
    \ = delta55 * delta\n    let \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpdst68jjq.swift:70:8: error: expected pattern\n    let \n      \
    \ ^\n/tmp/tmpdst68jjq.swift:69:9: warning: initialization of immutable value 'delta56'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   let delta56 = delta55 * delta\n    ~~~~^~~~~~~\n    _\n"
  stdout: ''
  timestamp: 1659979093
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(b - a)\n    let ac = abs(c - a)\n    let bc = abs(b\
    \ - c)\n    let ad = abs(a - d)\n    let bd = abs(b - d)\n    let cd = abs(c -\
    \ d)\n    \n    return ab >= bc && ac >= cd && bd >= ad\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzv7w8e99.swift:11:22: error: cannot find 'd' in scope\n    let\
    \ ad = abs(a - d)\n                     ^\n/tmp/tmpzv7w8e99.swift:12:22: error:\
    \ cannot find 'd' in scope\n    let bd = abs(b - d)\n                     ^\n\
    /tmp/tmpzv7w8e99.swift:13:22: error: cannot find 'd' in scope\n    let cd = abs(c\
    \ - d)\n                     ^\n"
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    return ((a + b > c) && (a + c > b) && (b + c > a))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpwzjn8ju_/tmpwzjn8ju_.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af35566cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af355363b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af355363988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3553627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwzjn8ju_                        0x000055ff54143335 <unavailable> + 4917

    5    libc.so.6                          0x00002af355858460 __libc_start_main +
    245

    6    tmpwzjn8ju_                        0x000055ff54142e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    if a > b {\n        return false\n    }\n    if b > c {\n   \
    \     return false\n    }\n    if c > a {\n        return false\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp4lmurxyu/tmp4lmurxyu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ca7c02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ca78f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ca78f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ca78f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4lmurxyu                        0x000056199c0211bb <unavailable> + 4539

    5    libc.so.6                          0x00002b4ca7dee460 __libc_start_main +
    245

    6    tmp4lmurxyu                        0x000056199c020e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(a - b)\n    let bc = abs(b - c)\n    let cb = abs(c\
    \ - b)\n    return ab > bc && ab > cb\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpf0_h91ru/tmpf0_h91ru.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b73925e8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73922dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b73922df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73922de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf0_h91ru                        0x000055b9a67192ab <unavailable> + 4779

    5    libc.so.6                          0x00002b73927d4460 __libc_start_main +
    245

    6    tmpf0_h91ru                        0x000055b9a6718f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(b - a)\n    let ac = abs(c - a)\n    let bc = abs(b\
    \ - c)\n    let abc = ab + ac\n    let bcd = bc + ab\n    let abbc = ab + bc\n\
    \    let abac = ab + ac\n    let acbc = ac + bc\n    let acab = ac + ab\n    let\
    \ bcab = bc + ab\n    let bcaab = bc + ac\n    let abcab = ab + bc\n    let abcabc\
    \ = ab + bc + c\n    let acbcab = ac + bc + ab\n    let acabbc = ac + ab + bc\n\
    \    let acabcab = ac + ab + c\n    let bcabac = bc + ab + ac\n    let bcaabbc\
    \ = bc + ac + ab\n    let bcaabcab = bc + ac + ab + c\n    let abcabbc = ab +\
    \ bc + ac\n    let abcabcab = ab + bc + ac + c\n    let acbcabbc = ac + bc + ab\
    \ + c\n    let acabbcab = ac + ab + bc + c\n    let acabcabb = ac + ab + cab +\
    \ c\n    let bcabacab = bc + ab + ac + ab\n    let bcaabbcab = bc + ac + ab +\
    \ c\n    let bcaabcabc = bc + ac + ab + cab + c\n    let abcabbcab = ab + bc +\
    \ ac + ab + c\n    let abcabcabc = ab + bc + ac + ab + cab + c\n    let acbcabbcab\
    \ = ac + bc + ab + cab + c\n    let acabbcabb = ac + ab + bc + cab + c\n    let\
    \ acabcabcab = ac + ab + cab + bc + c\n    let bcabacabc = bc + ab + ac + ab +\
    \ c\n    let bcaabbcabc = bc + ac + ab + c + c\n    let bcaabcabcb = bc + ac +\
    \ ab + cab + c\n    let abcabbcabc = ab + bc + ac + ab + c + c\n    let abcabcabcb\
    \ = ab + bc + ac + ab + cab + c\n    let acbcabbcabc = ac + bc + ab + cab + c\n\
    \    let acabbcabbc = ac + ab + bc + cab + c\n    let acabcabcabc = ac + ab +\
    \ cab + bc + c\n    let bcabacabbc = bc + ab + ac + ab + c\n    let \n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwf6_bxwv.swift:49:8: error: expected pattern\n    let \n      \
    \ ^\n/tmp/tmpwf6_bxwv.swift:31:30: error: cannot find 'cab' in scope\n    let\
    \ acabcabb = ac + ab + cab + c\n                             ^~~\n/tmp/tmpwf6_bxwv.swift:34:36:\
    \ error: cannot find 'cab' in scope\n    let bcaabcabc = bc + ac + ab + cab +\
    \ c\n                                   ^~~\n/tmp/tmpwf6_bxwv.swift:36:41: error:\
    \ cannot find 'cab' in scope\n    let abcabcabc = ab + bc + ac + ab + cab + c\n\
    \                                        ^~~\n/tmp/tmpwf6_bxwv.swift:37:37: error:\
    \ cannot find 'cab' in scope\n    let acbcabbcab = ac + bc + ab + cab + c\n  \
    \                                  ^~~\n/tmp/tmpwf6_bxwv.swift:38:36: error: cannot\
    \ find 'cab' in scope\n    let acabbcabb = ac + ab + bc + cab + c\n          \
    \                         ^~~\n/tmp/tmpwf6_bxwv.swift:39:32: error: cannot find\
    \ 'cab' in scope\n    let acabcabcab = ac + ab + cab + bc + c\n              \
    \                 ^~~\n/tmp/tmpwf6_bxwv.swift:42:37: error: cannot find 'cab'\
    \ in scope\n    let bcaabcabcb = bc + ac + ab + cab + c\n                    \
    \                ^~~\n/tmp/tmpwf6_bxwv.swift:44:42: error: cannot find 'cab' in\
    \ scope\n    let abcabcabcb = ab + bc + ac + ab + cab + c\n                  \
    \                       ^~~\n/tmp/tmpwf6_bxwv.swift:45:38: error: cannot find\
    \ 'cab' in scope\n    let acbcabbcabc = ac + bc + ab + cab + c\n             \
    \                        ^~~\n/tmp/tmpwf6_bxwv.swift:46:37: error: cannot find\
    \ 'cab' in scope\n    let acabbcabbc = ac + ab + bc + cab + c\n              \
    \                      ^~~\n/tmp/tmpwf6_bxwv.swift:47:33: error: cannot find 'cab'\
    \ in scope\n    let acabcabcabc = ac + ab + cab + bc + c\n                   \
    \             ^~~\n"
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    \n    let a1 = abs(a)\n    let b1 = abs(b)\n    let c1 = abs(c)\n\
    \    \n    if a1 == b1 && b1 == c1 {\n        return true\n    }\n    \n    if\
    \ a1 == c1 {\n        return false\n    }\n    \n    if b1 == c1 {\n        return\
    \ false\n    }\n    \n    if a1 == b1 {\n        return false\n    }\n    \n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmph11l8fqg/tmph11l8fqg.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f335cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f3053b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f3053988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f30527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph11l8fqg                        0x0000557c5b2da2ab <unavailable> + 4779

    5    libc.so.6                          0x00002b00f3548460 __libc_start_main +
    245

    6    tmph11l8fqg                        0x0000557c5b2d9f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if\
    \ a > b {\n        if b > c {\n            return true\n        } else {\n   \
    \         return false\n        }\n    } else {\n        if c > b {\n        \
    \    return true\n        } else {\n            return false\n        }\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpx7lprlxv/tmpx7lprlxv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19b1900c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19b15f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19b15f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19b15f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx7lprlxv                        0x000055c71c8b432b <unavailable> + 4907

    5    libc.so.6                          0x00002b19b1aec460 __libc_start_main +
    245

    6    tmpx7lprlxv                        0x000055c71c8b3f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if\
    \ a > b {\n        if b > c {\n            return true\n        } else {\n   \
    \         return false\n        }\n    } else {\n        if c > b {\n        \
    \    return true\n        } else {\n            return false\n        }\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpx7lprlxv/tmpx7lprlxv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19b1900c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19b15f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19b15f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19b15f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx7lprlxv                        0x000055c71c8b432b <unavailable> + 4907

    5    libc.so.6                          0x00002b19b1aec460 __libc_start_main +
    245

    6    tmpx7lprlxv                        0x000055c71c8b3f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if\
    \ a + b > c {\n        return false\n    }\n    if a + c > b {\n        return\
    \ false\n    }\n    if b + c > a {\n        return false\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp3op6xlp8/tmp3op6xlp8.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7142b83c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b714287ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b714287a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71428797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3op6xlp8                        0x00005576f36f12ab <unavailable> + 4779

    5    libc.so.6                          0x00002b7142d6f460 __libc_start_main +
    245

    6    tmp3op6xlp8                        0x00005576f36f0f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a1 = abs(a)\n    let b1 = abs(b)\n    let c1 = abs(c)\n \
    \   if a1 == b1 && b1 == c1 {\n        return true\n    }\n    if a1 == c1 {\n\
    \        return false\n    }\n    if b1 == c1 {\n        return false\n    }\n\
    \    if a1 == b1 {\n        return false\n    }\n    if a1 == c1 {\n        return\
    \ true\n    }\n    if b1 == c1 {\n        return true\n    }\n    if a1 == b1\
    \ {\n        return true\n    }\n    if a1 == c1 {\n        return false\n   \
    \ }\n    if b1 == c1 {\n        return false\n    }\n    if a1 == b1 {\n     \
    \   return false\n    }\n    if a1 == c1 {\n        return true\n    }\n    if\
    \ b1 == c1 {\n        return true\n    }\n    if a1 == b1 {\n        return true\n\
    \    }\n    if a1 == c1 {\n        return false\n    }\n    if b1 == c1 {\n  \
    \      return false\n    }\n    if a1 == b1 {\n        return false\n    }\n \
    \   if a1 == c1 {\n        return true\n    }\n    if b1 == c1 {\n        return\
    \ true\n    }\n    if a1 == b1 {\n        return true\n    }\n    if a1 == c1\
    \ {\n        return false\n    }\n    if b1 == c1 {\n        return false\n  \
    \  }\n    if a1 == b1 {\n        return false\n    }\n    if a1 == c1 {\n    \
    \    return true\n    }\n    if b1 == c1 {\n        return true\n    }\n    if\
    \ a1 == b1 {\n        return true\n    }\n    if a1 == c1 {\n        return false\n\
    \    }\n    if b1 == c1 {\n        return false\n    }\n    if a1 == b1 {\n  \
    \      return false\n    }\n    if a1 == c1 {\n        return true\n    }\n  \
    \  if b1 == c1 {\n        return true\n    }\n    if a1 == b1 {\n        return\
    \ true\n    }\n    if a1 == c1 {\n        return false\n    }\n    if b1 == c1\
    \ {\n        return false\n    }\n    if a1 == b1 {\n        return false\n  \
    \  }\n    if a1 == c1 {\n        return true\n    }\n    if b1 == c1 {\n     \
    \   return true\n    }\n    if a1 == b1 {\n        return true\n    }\n    if\
    \ a1 == c1 {\n        return false\n    }\n    if b1 == c1 {\n        return false\n\
    \    }\n    if a1 == b1 {\n        return false\n    }\n    if a1 == c1 {\n  \
    \      return true\n    }\n    if b1 == c1 {\n        return true\n    }\n   \
    \ if a1 == b1 {\n        return true\n    }\n    if a1 == c1 {\n        return\
    \ false\n    }\n    if b1 == c1 {\n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqzp63kcg.swift:170:57: error: expected '}' at end of brace statement\n\
    assert(right_angle_triangle(a: 2, b: 2, c: 10) == false)\n                   \
    \                                     ^\n/tmp/tmpqzp63kcg.swift:7:59: note: to\
    \ match this opening '{'\nfunc right_angle_triangle(a: Int, b: Int, c: Int) ->\
    \ Bool {\n                                                          ^\n/tmp/tmpqzp63kcg.swift:148:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    return ((a + b > c) && (a + c > b) && (b + c > a))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpwzjn8ju_/tmpwzjn8ju_.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af35566cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af355363b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af355363988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3553627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwzjn8ju_                        0x000055ff54143335 <unavailable> + 4917

    5    libc.so.6                          0x00002af355858460 __libc_start_main +
    245

    6    tmpwzjn8ju_                        0x000055ff54142e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    return ((a + b > c) && (a + c > b) && (b + c > a))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpwzjn8ju_/tmpwzjn8ju_.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af35566cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af355363b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af355363988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3553627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwzjn8ju_                        0x000055ff54143335 <unavailable> + 4917

    5    libc.so.6                          0x00002af355858460 __libc_start_main +
    245

    6    tmpwzjn8ju_                        0x000055ff54142e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if\
    \ a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if a > b {\n\
    \        if b > c {\n            return true\n        } else {\n            return\
    \ false\n        }\n    } else {\n        if c > b {\n            return true\n\
    \        } else {\n            return false\n        }\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpxpwx_t23/tmpxpwx_t23.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3353ba3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b335389ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b335389a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33538997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxpwx_t23                        0x0000559145ad732b <unavailable> + 4907

    5    libc.so.6                          0x00002b3353d8f460 __libc_start_main +
    245

    6    tmpxpwx_t23                        0x0000559145ad6f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(a - b)\n    let bc = abs(b - c)\n    let cb = abs(c\
    \ - b)\n    return (ab > bc && ab > cb)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpzxay5gdj/tmpzxay5gdj.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dd6953c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5dd664ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5dd664a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5dd66497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzxay5gdj                        0x000056217222b2ab <unavailable> + 4779

    5    libc.so.6                          0x00002b5dd6b3f460 __libc_start_main +
    245

    6    tmpzxay5gdj                        0x000056217222af59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    let\
    \ ab = abs(a + b)\n    let ac = abs(a + c)\n    let bc = abs(b + c)\n    let abc\
    \ = ab + ac\n    let bca = bc * b\n    let cab = ac * c\n    let acb = ac * b\n\
    \    let bcb = bc * c\n    let abcb = abc * b\n    let acbc = acb * c\n    let\
    \ abcca = abc * c\n    let abcbc = abcb * c\n    let acbca = acb * c\n    let\
    \ abccaa = abc * c * a\n    let abcbca = abcb * c * a\n    let acbcab = acb *\
    \ c * a * b\n    let acbcaba = acb * c * a * b * a\n    let acbcabab = acb * c\
    \ * a * b * ab\n    let acbcababc = acb * c * a * b * abc\n    let acbcababcb\
    \ = acb * c * a * b * abcb\n    let acbcababcba = acb * c * a * b * abca\n   \
    \ let acbcababcbc = acb * c * a * b * abcbc\n    let acbcababcbca = acb * c *\
    \ a * b * abcbca\n    let acbcababcbcab = acb * c * a * b * abcbcab\n    let acbcababcbcaba\
    \ = acb * c * a * b * abcbcaba\n    let acbcababcbcabab = acb * c * a * b * abcbcabab\n\
    \    let acbcababcbcababc = acb * c * a * b * abcbcababc\n    let acbcababcbcababcb\
    \ = acb * c * a * b * abcbcababcb\n    let acbcababcbcababcba = acb * c * a *\
    \ b * abcbcababca\n    let acbcababcbcababcbc = acb * c * a * b * abcbcababcbc\n\
    \    let acbcababcbcababcbca = acb * c * a * b * abcbcababcbca\n    let acbcababcbcababcbcab\
    \ = acb * c * a * b * abcbcababcbcab\n    let acbcababcbcababcbcaba = acb * c\
    \ * a * b * abcbcababcbcaba\n    let acbcababcbcababcbcabab = acb * c * a * b\
    \ * abcbcababcbcabab\n    let \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpqd8hoeog.swift:45:8: error: expected pattern\n    let \n      \
    \ ^\n/tmp/tmpqd8hoeog.swift:31:41: error: cannot find 'abca' in scope\n    let\
    \ acbcababcba = acb * c * a * b * abca\n                                     \
    \   ^~~~\n/tmp/tmpqd8hoeog.swift:34:43: error: cannot find 'abcbcab' in scope\n\
    \    let acbcababcbcab = acb * c * a * b * abcbcab\n                         \
    \                 ^~~~~~~\n/tmp/tmpqd8hoeog.swift:35:44: error: cannot find 'abcbcaba'\
    \ in scope\n    let acbcababcbcaba = acb * c * a * b * abcbcaba\n            \
    \                               ^~~~~~~~\n/tmp/tmpqd8hoeog.swift:36:45: error:\
    \ cannot find 'abcbcabab' in scope\n    let acbcababcbcabab = acb * c * a * b\
    \ * abcbcabab\n                                            ^~~~~~~~~\n/tmp/tmpqd8hoeog.swift:37:46:\
    \ error: cannot find 'abcbcababc' in scope\n    let acbcababcbcababc = acb * c\
    \ * a * b * abcbcababc\n                                             ^~~~~~~~~~\n\
    /tmp/tmpqd8hoeog.swift:38:47: error: cannot find 'abcbcababcb' in scope\n    let\
    \ acbcababcbcababcb = acb * c * a * b * abcbcababcb\n                        \
    \                      ^~~~~~~~~~~\n/tmp/tmpqd8hoeog.swift:39:48: error: cannot\
    \ find 'abcbcababca' in scope\n    let acbcababcbcababcba = acb * c * a * b *\
    \ abcbcababca\n                                               ^~~~~~~~~~~\n/tmp/tmpqd8hoeog.swift:40:48:\
    \ error: cannot find 'abcbcababcbc' in scope\n    let acbcababcbcababcbc = acb\
    \ * c * a * b * abcbcababcbc\n                                               ^~~~~~~~~~~~\n\
    /tmp/tmpqd8hoeog.swift:41:49: error: cannot find 'abcbcababcbca' in scope\n  \
    \  let acbcababcbcababcbca = acb * c * a * b * abcbcababcbca\n               \
    \                                 ^~~~~~~~~~~~~\n/tmp/tmpqd8hoeog.swift:42:50:\
    \ error: cannot find 'abcbcababcbcab' in scope\n    let acbcababcbcababcbcab =\
    \ acb * c * a * b * abcbcababcbcab\n                                         \
    \        ^~~~~~~~~~~~~~\n/tmp/tmpqd8hoeog.swift:43:51: error: cannot find 'abcbcababcbcaba'\
    \ in scope\n    let acbcababcbcababcbcaba = acb * c * a * b * abcbcababcbcaba\n\
    \      "
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if\
    \ a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if a > b {\n\
    \        if b > c {\n            return true\n        } else {\n            return\
    \ false\n        }\n    } else {\n        if c > b {\n            return true\n\
    \        } else {\n            return false\n        }\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpxpwx_t23/tmpxpwx_t23.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3353ba3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b335389ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b335389a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33538997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxpwx_t23                        0x0000559145ad732b <unavailable> + 4907

    5    libc.so.6                          0x00002b3353d8f460 __libc_start_main +
    245

    6    tmpxpwx_t23                        0x0000559145ad6f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n\
    \    let ab = abs(b - a)\n    let ac = abs(c - a)\n    let bc = abs(b - c)\n \
    \   let abc = ab + ac\n    let bca = bc + ab\n    let abca = abc + bc\n    return\
    \ abca >= bca\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpo8p7qfjt/tmpo8p7qfjt.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afcb8d4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afcb8a42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afcb8a42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afcb8a417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo8p7qfjt                        0x000055572e12e32b <unavailable> + 4907

    5    libc.so.6                          0x00002afcb8f37460 __libc_start_main +
    245

    6    tmpo8p7qfjt                        0x000055572e12df59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(a - b)\n    let bc = abs(b - c)\n    let cd = abs(c\
    \ - d)\n    return (ab + bc == cd) || (bc + cd == ab)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvpdflab_.swift:10:22: error: cannot find 'd' in scope\n    let\
    \ cd = abs(c - d)\n                     ^\n"
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(b - a)\n    let bc = abs(c - b)\n    let ac = abs(c\
    \ - a)\n    return (ab > bc) && (ab > ac)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp1bakeqly/tmp1bakeqly.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b63a1d8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b63a1a86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b63a1a86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b63a1a857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1bakeqly                        0x000055737ad332ab <unavailable> + 4779

    5    libc.so.6                          0x00002b63a1f7b460 __libc_start_main +
    245

    6    tmp1bakeqly                        0x000055737ad32f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a1 = a / 2.0\n    let b1 = b / 2.0\n    let c1 = c / 2.0\n\
    \    let a2 = a1 + a1\n    let b2 = b1 + b1\n    let c2 = c1 + c1\n    let a3\
    \ = a1 + a2\n    let b3 = b1 + b2\n    let c3 = c1 + c2\n    let a4 = a1 + a3\n\
    \    let b4 = b1 + b3\n    let c4 = c1 + c3\n    let a5 = a2 + a2\n    let b5\
    \ = b2 + b2\n    let c5 = c2 + c2\n    let a6 = a2 + a3\n    let b6 = b2 + b3\n\
    \    let c6 = c2 + c3\n    let a7 = a3 + a3\n    let b7 = b3 + b3\n    let c7\
    \ = c3 + c3\n    let a8 = a4 + a4\n    let b8 = b4 + b4\n    let c8 = c4 + c4\n\
    \    let a9 = a4 + a5\n    let b9 = b4 + b5\n    let c9 = c4 + c6\n    let a10\
    \ = a5 + a5\n    let b10 = b5 + b5\n    let c10 = c5 + c6\n    let a11 = a5 +\
    \ a6\n    let b11 = b5 + b6\n    let c11 = c5 + c7\n    let a12 = a6 + a6\n  \
    \  let b12 = b6 + b6\n    let c12 = c6 + c7\n    let a13 = a6 + a7\n    let b13\
    \ = b6 + b7\n    let c13 = c6 + c8\n    let a14 = a7 + a7\n    let b14 = b7 +\
    \ b7\n    let c14 = c7 + c8\n    let a15 = a7 + a8\n    let b15 = b7 + b8\n  \
    \  let c15 = c7 + c9\n    let a16 = a8 + a8\n    let b16 = b8 + b8\n    let c16\
    \ = c8 + c9\n    let a17 = a8 + a9\n    let b17 = b8 + b9\n    let c17 = c8 +\
    \ c10\n    let a18 = a9 + a9\n    let b18 = b9 + b9\n    let c18 = c9 + c10\n\
    \    let a19 = a9 + a10\n    let b19 = b9 + b10\n    let c19 = c9 + c11\n    let\
    \ a20 = a10 + a10\n    let b20 = b10 + b10\n    let c20 = c10 + c11\n    let a21\
    \ = a10 + a11\n    let b21 = 0 + b1\n    let c21 = a11 + c1\n    let a22 = a10\
    \ + a12\n    let b22 = b10 + b12\n    let c22 = c10 + c12\n    let a23 = a10 +\
    \ a13\n    let b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp6xl2i3dy.swift:8:16: error: binary operator '/' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n    let a1 = a / 2.0\n             ~\
    \ ^ ~~~\n/tmp/tmp6xl2i3dy.swift:8:16: note: overloads for '/' exist with these\
    \ partially matching parameter lists: (Double, Double), (Duration, Double), (Int,\
    \ Int)\n    let a1 = a / 2.0\n               ^\n/tmp/tmp6xl2i3dy.swift:9:16: error:\
    \ binary operator '/' cannot be applied to operands of type 'Int' and 'Double'\n\
    \    let b1 = b / 2.0\n             ~ ^ ~~~\n/tmp/tmp6xl2i3dy.swift:9:16: note:\
    \ overloads for '/' exist with these partially matching parameter lists: (Double,\
    \ Double), (Duration, Double), (Int, Int)\n    let b1 = b / 2.0\n            \
    \   ^\n/tmp/tmp6xl2i3dy.swift:10:16: error: binary operator '/' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n    let c1 = c / 2.0\n             ~\
    \ ^ ~~~\n/tmp/tmp6xl2i3dy.swift:10:16: note: overloads for '/' exist with these\
    \ partially matching parameter lists: (Double, Double), (Duration, Double), (Int,\
    \ Int)\n    let c1 = c / 2.0\n               ^\n/tmp/tmp6xl2i3dy.swift:75:9: error:\
    \ type annotation missing in pattern\n    let b\n        ^\n"
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    \n\
    \    if a > b {\n        if b > c {\n            return true\n        } else {\n\
    \            return false\n        }\n    } else {\n        if c > b {\n     \
    \       return true\n        } else {\n            return false\n        }\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpgt9rot67/tmpgt9rot67.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b731a1aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7319ea1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7319ea1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7319ea07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgt9rot67                        0x000055db261b032b <unavailable> + 4907

    5    libc.so.6                          0x00002b731a396460 __libc_start_main +
    245

    6    tmpgt9rot67                        0x000055db261aff59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n    let side2 = sqrt(pow(c,\
    \ 2) + pow(d, 2))\n    let side3 = sqrt(pow(d, 2) + pow(e, 2))\n    let side4\
    \ = sqrt(pow(e, 2) + pow(f, 2))\n    let side5 = sqrt(pow(f, 2) + pow(a, 2))\n\
    \    let side6 = sqrt(pow(a, 2) + pow(b, 2))\n    let side7 = sqrt(pow(b, 2) +\
    \ pow(c, 2))\n    let side8 = sqrt(pow(c, 2) + pow(d, 2))\n    let side9 = sqrt(pow(d,\
    \ 2) + pow(e, 2))\n    let side10 = sqrt(pow(e, 2) + pow(f, 2))\n    let side11\
    \ = sqrt(pow(f, 2) + pow(a, 2))\n    let side12 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \    let side13 = sqrt(pow(b, 2) + pow(c, 2))\n    let side14 = sqrt(pow(c, 2)\
    \ + pow(d, 2))\n    let side15 = sqrt(pow(d, 2) + pow(e, 2))\n    let side16 =\
    \ sqrt(pow(e, 2) + pow(f, 2))\n    let side17 = sqrt(pow(f, 2) + pow(a, 2))\n\
    \    let side18 = sqrt(pow(a, 2) + pow(b, 2))\n    let side19 = sqrt(pow(b, 2)\
    \ + pow(c, 2))\n    let side20 = sqrt(pow(c, 2) + pow(d, 2))\n    let side21 =\
    \ sqrt(pow(d, 2) + pow(e, 2))\n    let side22 = sqrt(pow(e, 2) + pow(f, 2))\n\
    \    let side23 = sqrt(pow(f, 2) + pow(a, 2))\n    let side24 = sqrt(pow(a, 2)\
    \ + pow(b, 2))\n    let side25 = sqrt(pow(b, 2) + pow(c, 2))\n    let side26 =\
    \ sqrt(pow(c, 2) + pow(d, 2))\n    let side27 = sqrt(pow(d, 2) + pow(e, 2))\n\
    \    let side28 = sqrt(pow(e, 2) + pow(f, 2))\n    let side29 = sqrt(pow(f, 2)\
    \ + pow(a, 2))\n    let side30 = sqrt(pow(a, 2) + pow(b, 2))\n    let side31 =\
    \ sqrt(pow(b, 2) + pow(c, 2))\n    let side32 = sqrt(pow(c, 2) + pow(d, 2))\n\
    \    let side33 = sqrt(pow(d, 2) + pow(e, 2))\n    let side34 = sqrt(pow(e, 2)\
    \ + pow(f, 2))\n    let side35 = sqrt(pow(f, 2) + pow(a, 2))\n    let side36 =\
    \ sqrt(pow(a, 2) + pow(b, 2))\n    let side37 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \    let side38 = sqrt(pow(c, 2) + pow(d, 2))\n    let side39 = sqrt(pow(d, 2)\
    \ + pow(e, 2))\n    let side40 = sqrt(pow(e, 2) + pow(f, 2))\n    let side41 =\
    \ sqrt(pow(f, 2) + pow(a, 2))\n    let side42 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \    let side43 = sqrt(pow\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp4bvqdruc.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp4bvqdruc.swift:50:22: note: to match this opening '('\n    let side43\
    \ = sqrt(pow\n                     ^\n/tmp/tmp4bvqdruc.swift:8:17: error: cannot\
    \ find 'sqrt' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n        \
    \        ^~~~\n/tmp/tmp4bvqdruc.swift:8:22: error: cannot find 'pow' in scope\n\
    \    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                     ^~~\n/tmp/tmp4bvqdruc.swift:8:34:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                                 ^~~\n/tmp/tmp4bvqdruc.swift:9:17: error: cannot\
    \ find 'sqrt' in scope\n    let side2 = sqrt(pow(c, 2) + pow(d, 2))\n        \
    \        ^~~~\n/tmp/tmp4bvqdruc.swift:9:22: error: cannot find 'pow' in scope\n\
    \    let side2 = sqrt(pow(c, 2) + pow(d, 2))\n                     ^~~\n/tmp/tmp4bvqdruc.swift:9:34:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(c, 2) + pow(d, 2))\n\
    \                                 ^~~\n/tmp/tmp4bvqdruc.swift:9:38: error: cannot\
    \ find 'd' in scope\n    let side2 = sqrt(pow(c, 2) + pow(d, 2))\n           \
    \                          ^\n/tmp/tmp4bvqdruc.swift:10:17: error: cannot find\
    \ 'sqrt' in scope\n    let side3 = sqrt(pow(d, 2) + pow(e, 2))\n             \
    \   ^~~~\n/tmp/tmp4bvqdruc.swift:10:22: error: cannot find 'pow' in scope\n  \
    \  let side3 = sqrt(pow(d, 2) + pow(e, 2))\n                     ^~~\n/tmp/tmp4bvqdruc.swift:10:26:\
    \ error: cannot find 'd' in scope\n    let side3 = sqrt(pow(d, 2) + pow(e, 2))\n\
    \                         ^\n/tmp/tmp4bvqdruc.swift:10:34: error: cannot find\
    \ 'pow' in scope\n    let side3 = sqrt(pow(d, 2) + pow(e, 2))\n              \
    \                   ^~~\n/tmp/tmp4bvqdruc.swift:10:38: error: cannot find 'e'\
    \ in scope\n    let side3 = sqrt(pow(d, 2) + pow(e, 2))\n                    \
    \                 ^\n/tmp/tmp4bvqdruc.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side4 = sqrt(pow(e, 2) + pow(f, 2))\n                ^~~~\n/tmp/tmp4bvqdruc.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side4 = sqrt(pow(e, 2) "
  stdout: ''
  timestamp: 1659979094
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n\
    \    let ab = abs(b - a)\n    let ac = abs(c - a)\n    let bc = abs(b - c)\n \
    \   let cb = abs(c - b)\n    let abc = ab + ac + bc\n    let bca = bc * ab / abc\
    \ // bc is right angle if abc is right angle\n    let cba = cb * ab / abc // cb\
    \ is right angle if abc is right angle\n    return abc > bca\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmptfw5218k/tmptfw5218k.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4894089c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4893d80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4893d80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4893d7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptfw5218k                        0x0000564bb8f523bb <unavailable> + 5051

    5    libc.so.6                          0x00002b4894275460 __libc_start_main +
    245

    6    tmptfw5218k                        0x0000564bb8f51fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    return ((a + b > c) && (a + c > b) && (b + c > a))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpwzjn8ju_/tmpwzjn8ju_.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af35566cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af355363b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af355363988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3553627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwzjn8ju_                        0x000055ff54143335 <unavailable> + 4917

    5    libc.so.6                          0x00002af355858460 __libc_start_main +
    245

    6    tmpwzjn8ju_                        0x000055ff54142e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(a - b)\n    let bc = abs(b - c)\n    let cb = abs(c\
    \ - b)\n    return (ab > bc) && (ab > cb)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp7yg252vs/tmp7yg252vs.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b25979ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25976e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b25976e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25976e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7yg252vs                        0x0000556731a582ab <unavailable> + 4779

    5    libc.so.6                          0x00002b2597bd8460 __libc_start_main +
    245

    6    tmp7yg252vs                        0x0000556731a57f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    return ((b * b) - (4 * a * c)) > 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpq5zlyaw6/tmpq5zlyaw6.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b398741dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3987114b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3987114988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39871137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq5zlyaw6                        0x0000564ba65d81bb <unavailable> + 4539

    5    libc.so.6                          0x00002b3987609460 __libc_start_main +
    245

    6    tmpq5zlyaw6                        0x0000564ba65d7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    \n    let ab = abs(b - a)\n    let bc = abs(c - b)\n    let ac\
    \ = abs(c - a)\n    \n    if ab > bc && ab > ac {\n        return true\n    }\n\
    \    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpr27eb_1b/tmpr27eb_1b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b892e06fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b892dd66b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b892dd66988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b892dd657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr27eb_1b                        0x0000560b0032c2ab <unavailable> + 4779

    5    libc.so.6                          0x00002b892e25b460 __libc_start_main +
    245

    6    tmpr27eb_1b                        0x0000560b0032bf59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(a - b)\n    let bc = abs(b - c)\n    let cb = abs(c\
    \ - b)\n    return ab >= bc && ab >= cb\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpngfrvj3a/tmpngfrvj3a.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf8e209c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf8df00b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf8df00988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf8deff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpngfrvj3a                        0x0000555e1232e32b <unavailable> + 4907

    5    libc.so.6                          0x00002acf8e3f5460 __libc_start_main +
    245

    6    tmpngfrvj3a                        0x0000555e1232df59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if\
    \ a > b {\n        if b > c {\n            return true\n        } else {\n   \
    \         return false\n        }\n    } else {\n        if c > b {\n        \
    \    return true\n        } else {\n            return false\n        }\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpx7lprlxv/tmpx7lprlxv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19b1900c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19b15f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19b15f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19b15f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx7lprlxv                        0x000055c71c8b432b <unavailable> + 4907

    5    libc.so.6                          0x00002b19b1aec460 __libc_start_main +
    245

    6    tmpx7lprlxv                        0x000055c71c8b3f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    return ((a + b > c) && (a + c > b) && (b + c > a))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpwzjn8ju_/tmpwzjn8ju_.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af35566cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af355363b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af355363988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3553627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwzjn8ju_                        0x000055ff54143335 <unavailable> + 4917

    5    libc.so.6                          0x00002af355858460 __libc_start_main +
    245

    6    tmpwzjn8ju_                        0x000055ff54142e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(a - b)\n    let bc = abs(b - c)\n    let cb = abs(c\
    \ - b)\n    if ab > bc && ab > cb {\n        return true\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp8aiqrd8r/tmp8aiqrd8r.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21cf584c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21cf27bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21cf27b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21cf27a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8aiqrd8r                        0x000055dfabcf72ab <unavailable> + 4779

    5    libc.so.6                          0x00002b21cf770460 __libc_start_main +
    245

    6    tmp8aiqrd8r                        0x000055dfabcf6f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n\
    \    if a == b {\n        return false\n    }\n    if a == c {\n        return\
    \ true\n    }\n    if b == c {\n        return true\n    }\n    var angle1 = (90\
    \ - b) * Double.pi / 180\n    var angle2 = (90 - a) * Double.pi / 180\n    var\
    \ angle3 = (90 - c) * Double.pi / 180\n    var angle4 = angle1 + angle2 + angle3\n\
    \    if angle4 > Double.pi {\n        angle4 -= Double.pi\n    }\n    if angle4\
    \ < 0 {\n        angle4 += Double.pi\n    }\n    return angle4 < Double.pi / 2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp75eszeb7.swift:20:27: error: binary operator '*' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n    var angle1 = (90 - b) * Double.pi\
    \ / 180\n                 ~~~~~~~~ ^ ~~~~~~~~~\n/tmp/tmp75eszeb7.swift:20:27:\
    \ note: overloads for '*' exist with these partially matching parameter lists:\
    \ (Duration, Double), (Int, Int)\n    var angle1 = (90 - b) * Double.pi / 180\n\
    \                          ^\n/tmp/tmp75eszeb7.swift:21:27: error: binary operator\
    \ '*' cannot be applied to operands of type 'Int' and 'Double'\n    var angle2\
    \ = (90 - a) * Double.pi / 180\n                 ~~~~~~~~ ^ ~~~~~~~~~\n/tmp/tmp75eszeb7.swift:21:27:\
    \ note: overloads for '*' exist with these partially matching parameter lists:\
    \ (Duration, Double), (Int, Int)\n    var angle2 = (90 - a) * Double.pi / 180\n\
    \                          ^\n/tmp/tmp75eszeb7.swift:22:27: error: binary operator\
    \ '*' cannot be applied to operands of type 'Int' and 'Double'\n    var angle3\
    \ = (90 - c) * Double.pi / 180\n                 ~~~~~~~~ ^ ~~~~~~~~~\n/tmp/tmp75eszeb7.swift:22:27:\
    \ note: overloads for '*' exist with these partially matching parameter lists:\
    \ (Duration, Double), (Int, Int)\n    var angle3 = (90 - c) * Double.pi / 180\n\
    \                          ^\n"
  stdout: ''
  timestamp: 1659979095
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if\
    \ a > b {\n        if b > c {\n            return true\n        } else {\n   \
    \         return false\n        }\n    } else {\n        if c > b {\n        \
    \    return true\n        } else {\n            return false\n        }\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpx7lprlxv/tmpx7lprlxv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19b1900c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19b15f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19b15f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19b15f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx7lprlxv                        0x000055c71c8b432b <unavailable> + 4907

    5    libc.so.6                          0x00002b19b1aec460 __libc_start_main +
    245

    6    tmpx7lprlxv                        0x000055c71c8b3f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(b - a)\n    let ac = abs(c - a)\n    let bc = abs(b\
    \ - c)\n    if ab > ac && ab > bc {\n        return true\n    } else if ac > ab\
    \ && ac > bc {\n        return false\n    } else {\n        return false\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b:\
    \ 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpfkzm_ogd/tmpfkzm_ogd.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7fa7c7dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7fa7974b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7fa7974988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7fa79737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfkzm_ogd                        0x000055feb2bd42ab <unavailable> + 4779

    5    libc.so.6                          0x00002b7fa7e69460 __libc_start_main +
    245

    6    tmpfkzm_ogd                        0x000055feb2bd3f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if\
    \ a > b {\n        if b > c {\n            return true\n        } else {\n   \
    \         return false\n        }\n    } else {\n        if c > b {\n        \
    \    return true\n        } else {\n            return false\n        }\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpx7lprlxv/tmpx7lprlxv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19b1900c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19b15f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19b15f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19b15f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx7lprlxv                        0x000055c71c8b432b <unavailable> + 4907

    5    libc.so.6                          0x00002b19b1aec460 __libc_start_main +
    245

    6    tmpx7lprlxv                        0x000055c71c8b3f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(b - a)\n    let ac = abs(c - a)\n    let bc = abs(b\
    \ - c)\n    let abc = ab + ac\n    let bca = bc * b\n    let cba = bc * c\n  \
    \  let abca = ab * ac\n    let bcab = bc * b\n    let cabb = bc * c\n    let abcab\
    \ = ab * ac * bc\n    let bcabc = bc * b * c\n    let cabbc = bc * c * b\n   \
    \ let abcabc = ab * ac * bc * c\n    let bcabcb = bc * b * c * b\n    let cabbcb\
    \ = bc * c * b * c\n    let abcabcb = ab * ac * bc * c * b\n    let bcabcbc =\
    \ bc * b * c * b * c\n    let cabbcbc = bc * c * b * c * b\n    let abcabcbc =\
    \ ab * ac * bc * c * b * c\n    let bcabcbca = bc * b * c * b * c * a\n    let\
    \ cabbcbca = bc * c * b * c * a\n    let abcabcbca = ab * ac * bc * c * b * c\
    \ * a\n    let bcabcbcab = bc * b * c * b * c * a\n    let cabbcbcab = bc * c\
    \ * b * c * a\n    let abcabcbcab = ab * ac * bc * c * b * c * a\n    let bcabcbcabc\
    \ = bc * b * c * b * c * a\n    let cabbcbcabc = bc * c * b * c * a\n    let abcabcbcabc\
    \ = ab * ac * bc * c * b * c * a\n    let bcabcbcabca = bc * b * c * b * c * a\
    \ * a\n    let cabbcbcabca = bc * c * b * c * a * a\n    let abcabcbcabca = ab\
    \ * ac * bc * c * b * c * a * a\n    let bcabcbcabcab = bc * b * c * b * c * a\
    \ * a\n    let cabbcbcabcab = bc * c * b * c * a * a\n    let abcabcbcabcab =\
    \ ab * ac * bc * c * b * c * a * a\n    let bcabcbcabcabc = bc * b * c * b * c\
    \ * a * a * a\n    let cabbcbcabcabc = bc * c * b * c * a * a * a\n    let abcabcbcabcabc\
    \ = ab * ac * bc * c * b * c * a * a * a\n    let bcabcbcabcab\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpioomtwnp.swift:45:9: error: type annotation missing in pattern\n\
    \    let bcabcbcabcab\n        ^\n"
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    \n    guard a > 0 && b > 0 && c > 0 else {\n        return false\n\
    \    }\n    \n    let ab = abs(b - a)\n    let ac = abs(c - a)\n    let bc = abs(b\
    \ - c)\n    \n    if ab > ac && ab > bc {\n        return true\n    }\n    \n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpoh2j8glm/tmpoh2j8glm.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12f9bb2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b12f98a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b12f98a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b12f98a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoh2j8glm                        0x000055a19b9702ab <unavailable> + 4779

    5    libc.so.6                          0x00002b12f9d9e460 __libc_start_main +
    245

    6    tmpoh2j8glm                        0x000055a19b96ff59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(a - b)\n    let bc = abs(b - c)\n    let cb = abs(c\
    \ - b)\n    return (ab > bc && ab > cb)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpzxay5gdj/tmpzxay5gdj.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dd6953c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5dd664ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5dd664a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5dd66497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzxay5gdj                        0x000056217222b2ab <unavailable> + 4779

    5    libc.so.6                          0x00002b5dd6b3f460 __libc_start_main +
    245

    6    tmpzxay5gdj                        0x000056217222af59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n\
    \    var sum = a * b + c * c\n    if sum < 0 {\n        sum *= -1\n    }\n   \
    \ if sum > 0 {\n        return false\n    }\n    var sum2 = a * a + b * b + c\
    \ * c\n    if sum2 < 0 {\n        sum2 *= -1\n    }\n    if sum2 > 0 {\n     \
    \   return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpvh5rp9iu/tmpvh5rp9iu.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47efd5cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b47efa53b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b47efa53988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b47efa527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvh5rp9iu                        0x000055b053bb61bb <unavailable> + 4539

    5    libc.so.6                          0x00002b47eff48460 __libc_start_main +
    245

    6    tmpvh5rp9iu                        0x000055b053bb5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(b - a)\n    let ac = abs(c - a)\n    let bc = abs(b\
    \ - c)\n    if ab > ac {\n        return ab > bc\n    } else {\n        return\
    \ ac > bc\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp2n39xqbe/tmp2n39xqbe.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1487f40c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1487c37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1487c37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1487c367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2n39xqbe                        0x0000556c9863232b <unavailable> + 4907

    5    libc.so.6                          0x00002b148812c460 __libc_start_main +
    245

    6    tmp2n39xqbe                        0x0000556c98631f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if\
    \ a > b {\n        if b > c {\n            return true\n        } else {\n   \
    \         return false\n        }\n    } else {\n        if c > b {\n        \
    \    return true\n        } else {\n            return false\n        }\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpx7lprlxv/tmpx7lprlxv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19b1900c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19b15f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19b15f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19b15f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx7lprlxv                        0x000055c71c8b432b <unavailable> + 4907

    5    libc.so.6                          0x00002b19b1aec460 __libc_start_main +
    245

    6    tmpx7lprlxv                        0x000055c71c8b3f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(b - a)\n    let ac = abs(c - a)\n    let bc = abs(b\
    \ - c)\n    \n    if ab > ac {\n        if bc > ab {\n            return true\n\
    \        } else {\n            return false\n        }\n    } else {\n       \
    \ if bc > ab {\n            return false\n        } else {\n            return\
    \ true\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp7l35lyns/tmp7l35lyns.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff33e94c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff33b8bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff33b8b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff33b8a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7l35lyns                        0x000055644e47f32b <unavailable> + 4907

    5    libc.so.6                          0x00002aff34080460 __libc_start_main +
    245

    6    tmp7l35lyns                        0x000055644e47ef59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(a - b)\n    let bc = abs(b - c)\n    let cb = abs(c\
    \ - b)\n    let abc = ab + bc + cb\n    return abc > 180 ? true : false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmps8q10h5i/tmps8q10h5i.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b759f760c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b759f457b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b759f457988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b759f4567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps8q10h5i                        0x000056330e9372ab <unavailable> + 4779

    5    libc.so.6                          0x00002b759f94c460 __libc_start_main +
    245

    6    tmps8q10h5i                        0x000056330e936f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(b - a)\n    let ac = abs(c - a)\n    let bc = abs(b\
    \ - c)\n    let abc = ab + ac\n    let bcd = bc + ab\n    let abdc = ab + bc\n\
    \    let acdc = ac + bc\n    let abdcd = abc + bcd\n    return abdc == bcdc ||\
    \ abdc == acdc || abdc == abdc || abdc == acdc\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp28vvrbb_.swift:16:20: error: cannot find 'bcdc' in scope\n    return\
    \ abdc == bcdc || abdc == acdc || abdc == abdc || abdc == acdc\n             \
    \      ^~~~\n"
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(a - b)\n    let bc = abs(b - c)\n    let cb = abs(c\
    \ - b)\n    return (ab > bc) && (ab > cb)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp7yg252vs/tmp7yg252vs.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b25979ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25976e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b25976e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25976e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7yg252vs                        0x0000556731a582ab <unavailable> + 4779

    5    libc.so.6                          0x00002b2597bd8460 __libc_start_main +
    245

    6    tmp7yg252vs                        0x0000556731a57f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if\
    \ a > b {\n        if b > c {\n            return true\n        } else {\n   \
    \         return false\n        }\n    } else {\n        if c > b {\n        \
    \    return true\n        } else {\n            return false\n        }\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpx7lprlxv/tmpx7lprlxv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19b1900c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19b15f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19b15f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19b15f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx7lprlxv                        0x000055c71c8b432b <unavailable> + 4907

    5    libc.so.6                          0x00002b19b1aec460 __libc_start_main +
    245

    6    tmpx7lprlxv                        0x000055c71c8b3f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if\
    \ a > b + c {\n        return false\n    }\n    if b > c + a {\n        return\
    \ false\n    }\n    if c > a + b {\n        return false\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp0el310sm/tmp0el310sm.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c78acdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c787c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c787c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c787c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0el310sm                        0x0000561864f1032b <unavailable> + 4907

    5    libc.so.6                          0x00002b1c78cb9460 __libc_start_main +
    245

    6    tmp0el310sm                        0x0000561864f0ff59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if\
    \ a > b {\n        if b > c {\n            return true\n        } else {\n   \
    \         return false\n        }\n    } else {\n        if c > b {\n        \
    \    return false\n        } else {\n            return true\n        }\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp6au66fb9/tmp6au66fb9.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7387d0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7387a01b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7387a01988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7387a007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6au66fb9                        0x0000557c00d2b2ab <unavailable> + 4779

    5    libc.so.6                          0x00002b7387ef6460 __libc_start_main +
    245

    6    tmp6au66fb9                        0x0000557c00d2af59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    return (a * b * c) >= 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpykl_qrsd/tmpykl_qrsd.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6dd5685c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6dd537cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6dd537c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6dd537b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpykl_qrsd                        0x0000564a5975323b <unavailable> + 4667

    5    libc.so.6                          0x00002b6dd5871460 __libc_start_main +
    245

    6    tmpykl_qrsd                        0x0000564a59752e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if\
    \ a > b {\n        if b > c {\n            return true\n        } else {\n   \
    \         return false\n        }\n    } else {\n        if c > b {\n        \
    \    return true\n        } else {\n            return false\n        }\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpx7lprlxv/tmpx7lprlxv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19b1900c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19b15f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19b15f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19b15f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx7lprlxv                        0x000055c71c8b432b <unavailable> + 4907

    5    libc.so.6                          0x00002b19b1aec460 __libc_start_main +
    245

    6    tmpx7lprlxv                        0x000055c71c8b3f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(b - a)\n    let ac = abs(c - a)\n    let bc = abs(b\
    \ - c)\n    let ad = abs(a - d)\n    let bd = abs(b - d)\n    let cd = abs(c -\
    \ d)\n    return (ab == bc && ac == cd && ad == bd)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpouy6x9rp.swift:11:22: error: cannot find 'd' in scope\n    let\
    \ ad = abs(a - d)\n                     ^\n/tmp/tmpouy6x9rp.swift:12:22: error:\
    \ cannot find 'd' in scope\n    let bd = abs(b - d)\n                     ^\n\
    /tmp/tmpouy6x9rp.swift:13:22: error: cannot find 'd' in scope\n    let cd = abs(c\
    \ - d)\n                     ^\n"
  stdout: ''
  timestamp: 1659979093
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n\
    \    let ab = abs(b - a)\n    let ac = abs(c - a)\n    let bc = abs(b - c)\n \
    \   let abc = ab + ac\n    let bcd = bc + ab\n    let abbc = ab + bc\n    let\
    \ abac = ab + ac\n    let acbc = ac + bc\n    let acab = ac + ab\n    let bcab\
    \ = bc + ab\n    let bcaa = bc + aa\n    let abca = ab + ca\n    let caba = ca\
    \ + ab\n    let caab = ca + ab\n    let caaa = ca + aa\n    let aabb = ab + bb\n\
    \    let aabc = ab + bc\n    let aabb = ab + bb\n    let aabc = ab + bc\n    let\
    \ aabb = ab + bb\n    let aabc = ab + bc\n    let aabb = ab + bb\n    let aabc\
    \ = ab + bc\n    let aabb = ab + bb\n    let aabc = ab + bc\n    let aabb = ab\
    \ + bb\n    let aabc = ab + bc\n    let aabb = ab + bb\n    let aabc = ab + bc\n\
    \    let aabb = ab + bb\n    let aabc = ab + bc\n    let aabb = ab + bb\n    let\
    \ aabc = ab + bc\n    let aabb = ab + bb\n    let aabc = ab + bc\n    let aabb\
    \ = ab + bb\n    let aabc = ab + bc\n    let aabb = ab + bb\n    let aabc = ab\
    \ + bc\n    let aabb = ab + bb\n    let aabc = ab + bc\n    let aabb = ab + bb\n\
    \    let aabc = ab + bc\n    let aabb = ab + bb\n    let aabc = ab + bc\n    let\
    \ aabb = ab + bb\n    let aabc = ab + bc\n    let aabb = ab + bb\n    let aabc\
    \ = ab + bc\n    let aabb = ab + bb\n    let aabc = ab + bc\n    let aabb = ab\
    \ + bb\n    let aabc = ab + bc\n    let aabb = ab + bb\n    let aabc = ab + bc\n\
    \    let aabb = ab + bb\n    let aabc = ab + bc\n    let aabb = ab + bb\n    let\
    \ aabc = ab + bc\n    let aabb = ab + bb\n    let aabc = ab + bc\n    let aabb\
    \ = ab + bb\n    let aabc = ab + bc\n    let aabb = ab + bb\n    let aabc = ab\
    \ + bc\n    let aabb = ab + bb\n    let aabc = ab + bc\n    let aabb = ab + bb\n\
    \    let aabc = ab + bc\n    let aabb = ab + bb\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzvzm01oz.swift:21:21: error: cannot find 'aa' in scope\n    let\
    \ bcaa = bc + aa\n                    ^~\n/tmp/tmpzvzm01oz.swift:22:21: error:\
    \ cannot find 'ca' in scope\n    let abca = ab + ca\n                    ^~\n\
    /tmp/tmpzvzm01oz.swift:23:16: error: cannot find 'ca' in scope\n    let caba =\
    \ ca + ab\n               ^~\n/tmp/tmpzvzm01oz.swift:24:16: error: cannot find\
    \ 'ca' in scope\n    let caab = ca + ab\n               ^~\n/tmp/tmpzvzm01oz.swift:25:16:\
    \ error: cannot find 'ca' in scope\n    let caaa = ca + aa\n               ^~\n\
    /tmp/tmpzvzm01oz.swift:25:21: error: cannot find 'aa' in scope\n    let caaa =\
    \ ca + aa\n                    ^~\n/tmp/tmpzvzm01oz.swift:26:21: error: cannot\
    \ find 'bb' in scope\n    let aabb = ab + bb\n                    ^~\n/tmp/tmpzvzm01oz.swift:28:21:\
    \ error: cannot find 'bb' in scope\n    let aabb = ab + bb\n                 \
    \   ^~\n/tmp/tmpzvzm01oz.swift:29:9: error: invalid redeclaration of 'aabc'\n\
    \    let aabc = ab + bc\n        ^\n/tmp/tmpzvzm01oz.swift:27:9: note: 'aabc'\
    \ previously declared here\n    let aabc = ab + bc\n        ^\n/tmp/tmpzvzm01oz.swift:30:21:\
    \ error: cannot find 'bb' in scope\n    let aabb = ab + bb\n                 \
    \   ^~\n/tmp/tmpzvzm01oz.swift:31:9: error: invalid redeclaration of 'aabc'\n\
    \    let aabc = ab + bc\n        ^\n/tmp/tmpzvzm01oz.swift:27:9: note: 'aabc'\
    \ previously declared here\n    let aabc = ab + bc\n        ^\n/tmp/tmpzvzm01oz.swift:32:21:\
    \ error: cannot find 'bb' in scope\n    let aabb = ab + bb\n                 \
    \   ^~\n/tmp/tmpzvzm01oz.swift:33:9: error: invalid redeclaration of 'aabc'\n\
    \    let aabc = ab + bc\n        ^\n/tmp/tmpzvzm01oz.swift:27:9: note: 'aabc'\
    \ previously declared here\n    let aabc = ab + bc\n        ^\n/tmp/tmpzvzm01oz.swift:34:21:\
    \ error: cannot find 'bb' in scope\n    let aabb = ab + bb\n                 \
    \   ^~\n/tmp/tmpzvzm01oz.swift:35:9: error: invalid redeclaration of 'aabc'\n\
    \    let aabc = ab + bc\n        ^\n/tmp/tmpzvzm01oz.swift:27:9: note: 'aabc'\
    \ previously declared here\n    let aabc = ab + bc\n        ^\n/tmp/tmpzvzm01oz.swift:36:21:\
    \ error: cannot find 'bb' in sco"
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if\
    \ a > b {\n        if b > c {\n            return true\n        } else {\n   \
    \         return false\n        }\n    } else {\n        if c > b {\n        \
    \    return true\n        } else {\n            return false\n        }\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpx7lprlxv/tmpx7lprlxv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19b1900c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19b15f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19b15f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19b15f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx7lprlxv                        0x000055c71c8b432b <unavailable> + 4907

    5    libc.so.6                          0x00002b19b1aec460 __libc_start_main +
    245

    6    tmpx7lprlxv                        0x000055c71c8b3f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    return ((a + b > c) && (a + c > b) && (b + c > a))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpwzjn8ju_/tmpwzjn8ju_.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af35566cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af355363b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af355363988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3553627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwzjn8ju_                        0x000055ff54143335 <unavailable> + 4917

    5    libc.so.6                          0x00002af355858460 __libc_start_main +
    245

    6    tmpwzjn8ju_                        0x000055ff54142e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if\
    \ a > b {\n        if b > c {\n            return true\n        } else {\n   \
    \         return false\n        }\n    } else {\n        if c > b {\n        \
    \    return true\n        } else {\n            return false\n        }\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpx7lprlxv/tmpx7lprlxv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19b1900c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19b15f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19b15f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19b15f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx7lprlxv                        0x000055c71c8b432b <unavailable> + 4907

    5    libc.so.6                          0x00002b19b1aec460 __libc_start_main +
    245

    6    tmpx7lprlxv                        0x000055c71c8b3f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if\
    \ a + b > c {\n        return false\n    }\n    if a + c > b {\n        return\
    \ false\n    }\n    if b + c > a {\n        return false\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp3op6xlp8/tmp3op6xlp8.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7142b83c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b714287ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b714287a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71428797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3op6xlp8                        0x00005576f36f12ab <unavailable> + 4779

    5    libc.so.6                          0x00002b7142d6f460 __libc_start_main +
    245

    6    tmp3op6xlp8                        0x00005576f36f0f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(b - a)\n    let ac = abs(c - a)\n    let bc = abs(b\
    \ - c)\n    let cb = abs(c - b)\n    return (ab > ac) && (ab > bc) && (ab > cb)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpp6wvk3c4/tmpp6wvk3c4.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b617c3eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b617c0e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b617c0e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b617c0e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp6wvk3c4                        0x000056102b38f2ab <unavailable> + 4779

    5    libc.so.6                          0x00002b617c5da460 __libc_start_main +
    245

    6    tmpp6wvk3c4                        0x000056102b38ef59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979094
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(a - b)\n    let bc = abs(b - c)\n    let cb = abs(c\
    \ - b)\n    \n    if ab > bc && ab > cb {\n        return true\n    }\n    \n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpyguf8ote/tmpyguf8ote.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b704c94cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b704c643b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b704c643988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b704c6427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyguf8ote                        0x000055a3327f12ab <unavailable> + 4779

    5    libc.so.6                          0x00002b704cb38460 __libc_start_main +
    245

    6    tmpyguf8ote                        0x000055a3327f0f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979094
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    \n\
    \    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    \n    let\
    \ discriminant = b*b - 4*a*c\n    \n    if discriminant < 0 {\n        return\
    \ false\n    }\n    \n    let root1 = (-b + sqrt(discriminant)) / (2*a)\n    let\
    \ root2 = (-b - sqrt(discriminant)) / (2*a)\n    \n    if root1 < root2 {\n  \
    \      return true\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcv3u2cr9.swift:22:23: error: cannot find 'sqrt' in scope\n    let\
    \ root1 = (-b + sqrt(discriminant)) / (2*a)\n                      ^~~~\n/tmp/tmpcv3u2cr9.swift:23:23:\
    \ error: cannot find 'sqrt' in scope\n    let root2 = (-b - sqrt(discriminant))\
    \ / (2*a)\n                      ^~~~\n"
  stdout: ''
  timestamp: 1659979094
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if\
    \ a > b {\n        if b > c {\n            return true\n        } else {\n   \
    \         return false\n        }\n    } else {\n        if c > b {\n        \
    \    return true\n        } else {\n            return false\n        }\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpx7lprlxv/tmpx7lprlxv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19b1900c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19b15f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19b15f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19b15f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx7lprlxv                        0x000055c71c8b432b <unavailable> + 4907

    5    libc.so.6                          0x00002b19b1aec460 __libc_start_main +
    245

    6    tmpx7lprlxv                        0x000055c71c8b3f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    return ((a + b > c) && (a + c > b) && (b + c > a))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpwzjn8ju_/tmpwzjn8ju_.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af35566cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af355363b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af355363988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3553627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwzjn8ju_                        0x000055ff54143335 <unavailable> + 4917

    5    libc.so.6                          0x00002af355858460 __libc_start_main +
    245

    6    tmpwzjn8ju_                        0x000055ff54142e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(a - b)\n    let bc = abs(b - c)\n    let cb = abs(c\
    \ - b)\n    return (ab > bc && ab > cb)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpzxay5gdj/tmpzxay5gdj.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dd6953c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5dd664ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5dd664a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5dd66497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzxay5gdj                        0x000056217222b2ab <unavailable> + 4779

    5    libc.so.6                          0x00002b5dd6b3f460 __libc_start_main +
    245

    6    tmpzxay5gdj                        0x000056217222af59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    \n    let ab = abs(a - b)\n    let bc = abs(b - c)\n    let cd\
    \ = abs(c - d)\n    \n    if ab > bc && ab > cd { return true }\n    else if bc\
    \ > ab && bc > cd { return true }\n    else if cd > ab && cd > bc { return true\
    \ }\n    else { return false }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp2m6_lulr.swift:11:22: error: cannot find 'd' in scope\n    let\
    \ cd = abs(c - d)\n                     ^\n"
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a1 = abs(a)\n    let b1 = abs(b)\n    let c1 = abs(c)\n \
    \   \n    if a1 == b1 && b1 == c1 {\n        return true\n    }\n    \n    if\
    \ a1 == c1 {\n        return false\n    }\n    \n    if b1 == c1 {\n        return\
    \ false\n    }\n    \n    if a1 == b1 {\n        return false\n    }\n    \n \
    \   if a1 == c1 {\n        return false\n    }\n    \n    if b1 == c1 {\n    \
    \    return false\n    }\n    \n    if a1 == b1 {\n        return false\n    }\n\
    \    \n    if a1 == c1 {\n        return false\n    }\n    \n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmppaduf593/tmppaduf593.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada6a288c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada69f7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada69f7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada69f7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppaduf593                        0x000055997f4332ab <unavailable> + 4779

    5    libc.so.6                          0x00002ada6a474460 __libc_start_main +
    245

    6    tmppaduf593                        0x000055997f432f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979094
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(a - b)\n    let bc = abs(b - c)\n    let cb = abs(c\
    \ - b)\n    let abc = ab + bc + cb\n    return abc > ab\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp1fbg3wso/tmp1fbg3wso.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef1fb7ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef1f875b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef1f875988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef1f8747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1fbg3wso                        0x000055f33eb9a32b <unavailable> + 4907

    5    libc.so.6                          0x00002aef1fd6a460 __libc_start_main +
    245

    6    tmp1fbg3wso                        0x000055f33eb99f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979094
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n\
    \    let ab = abs(b - a)\n    let ac = abs(c - a)\n    let bc = abs(b - c)\n \
    \   let abc = ab + ac\n    let bca = bc + ab\n    let abca = abc + bc\n    let\
    \ acab = ac + ab\n    let acbc = ac + bc\n    let abcb = abc + bc\n    let abcaa\
    \ = abc + aca\n    let abcab = abc + cab\n    let abcbc = abc + cba\n    let acaba\
    \ = aca + aba\n    let acbab = aca + bab\n    let acbca = aca + cba\n    let abcba\
    \ = abc + cba\n    let abcaba = abc + caba\n    let abcabb = abc + cabb\n    let\
    \ abcbca = abc + cbaa\n    let acabba = aca + abba\n    let acbaba = aca + baba\n\
    \    let acbcab = aca + cba\n    let abcbaa = abc + cbaa\n    let abcabaa = abc\
    \ + cabaa\n    let abcabab = abc + cabab\n    let abcbcab = abc + cbaca\n    let\
    \ acabbaa = aca + abbaa\n    let acbabab = aca + babab\n    let acbcaba = aca\
    \ + cbaab\n    let abcbaaa = abc + cbaaa\n    let abcabaaa = abc + cabaaa\n  \
    \  let abcabaab = abc + cabaab\n    let abcbcaba = abc + cbacaa\n    let acabbaab\
    \ = aca + abbaab\n    let acbababa = aca + bababa\n    let acbcabab = aca + cbacab\n\
    \    let abcbaaab = abc + cbaaab\n    let abcabaaab = abc + cabaaab\n    let abcabaabb\
    \ = abc + cabaabb\n    let abcbcabab = abc + cbacaab\n    let acabbaaba = aca\
    \ + abbaaba\n    let acbababab = aca + bababab\n    let acbcababa = aca + cbacabab\n\
    \    let abcbaaabb = abc + cbaaabb\n    let abcabaaabb = abc + cabaaabb\n    let\
    \ abcabaabbb = abc + cabaabbb\n    let abcbcababb = abc + cbacaabb\n    let acabbaabab\
    \ = aca + abbaabab\n    let acbabababa = aca + \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpk49no4k0.swift:60:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmpk49no4k0.swift:20:23: error: cannot find 'aca' in scope\n    let\
    \ abcaa = abc + aca\n                      ^~~\n/tmp/tmpk49no4k0.swift:21:23:\
    \ error: cannot find 'cab' in scope\n    let abcab = abc + cab\n             \
    \         ^~~\n/tmp/tmpk49no4k0.swift:22:23: error: cannot find 'cba' in scope\n\
    \    let abcbc = abc + cba\n                      ^~~\n/tmp/tmpk49no4k0.swift:23:17:\
    \ error: cannot find 'aca' in scope\n    let acaba = aca + aba\n             \
    \   ^~~\n/tmp/tmpk49no4k0.swift:23:23: error: cannot find 'aba' in scope\n   \
    \ let acaba = aca + aba\n                      ^~~\n/tmp/tmpk49no4k0.swift:24:17:\
    \ error: cannot find 'aca' in scope\n    let acbab = aca + bab\n             \
    \   ^~~\n/tmp/tmpk49no4k0.swift:24:23: error: cannot find 'bab' in scope\n   \
    \ let acbab = aca + bab\n                      ^~~\n/tmp/tmpk49no4k0.swift:25:17:\
    \ error: cannot find 'aca' in scope\n    let acbca = aca + cba\n             \
    \   ^~~\n/tmp/tmpk49no4k0.swift:25:23: error: cannot find 'cba' in scope\n   \
    \ let acbca = aca + cba\n                      ^~~\n/tmp/tmpk49no4k0.swift:26:23:\
    \ error: cannot find 'cba' in scope\n    let abcba = abc + cba\n             \
    \         ^~~\n/tmp/tmpk49no4k0.swift:27:24: error: cannot find 'caba' in scope\n\
    \    let abcaba = abc + caba\n                       ^~~~\n/tmp/tmpk49no4k0.swift:28:24:\
    \ error: cannot find 'cabb' in scope\n    let abcabb = abc + cabb\n          \
    \             ^~~~\n/tmp/tmpk49no4k0.swift:29:24: error: cannot find 'cbaa' in\
    \ scope\n    let abcbca = abc + cbaa\n                       ^~~~\n/tmp/tmpk49no4k0.swift:30:18:\
    \ error: cannot find 'aca' in scope\n    let acabba = aca + abba\n           \
    \      ^~~\n/tmp/tmpk49no4k0.swift:30:24: error: cannot find 'abba' in scope\n\
    \    let acabba = aca + abba\n                       ^~~~\n/tmp/tmpk49no4k0.swift:31:18:\
    \ error: cannot find 'aca' in scope\n    let acbaba = aca + baba\n           \
    \      ^~~\n/tmp/tmpk49no4k0.swift:31:24: error: cannot find 'baba' in scope\n\
    \    let acbaba = aca + baba\n                       ^~~~\n"
  stdout: ''
  timestamp: 1659979094
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if\
    \ a > b {\n        if b > c {\n            return true\n        } else {\n   \
    \         return false\n        }\n    } else {\n        if c > b {\n        \
    \    return false\n        } else {\n            return true\n        }\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp6au66fb9/tmp6au66fb9.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7387d0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7387a01b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7387a01988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7387a007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6au66fb9                        0x0000557c00d2b2ab <unavailable> + 4779

    5    libc.so.6                          0x00002b7387ef6460 __libc_start_main +
    245

    6    tmp6au66fb9                        0x0000557c00d2af59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if\
    \ a + b > c {\n        return false\n    }\n    if a + c > b {\n        return\
    \ false\n    }\n    if b + c > a {\n        return false\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp3op6xlp8/tmp3op6xlp8.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7142b83c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b714287ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b714287a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71428797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3op6xlp8                        0x00005576f36f12ab <unavailable> + 4779

    5    libc.so.6                          0x00002b7142d6f460 __libc_start_main +
    245

    6    tmp3op6xlp8                        0x00005576f36f0f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(b - a)\n    let ac = abs(c - a)\n    let bc = abs(b\
    \ - c)\n    let abc = ab + ac\n    let bcd = bc + ab\n    let abbc = ab + bc\n\
    \    let abbb = ab + bb\n    let abbd = ab + bd\n    let abbc = ab + bc\n    let\
    \ abbb = ab + bb\n    let abbd = ab + bd\n    let abbc = ab + bc\n    let abbb\
    \ = ab + bb\n    let abbd = ab + bd\n    let abbc = ab + bc\n    let abbb = ab\
    \ + bb\n    let abbd = ab + bd\n    let abbc = ab + bc\n    let abbb = ab + bb\n\
    \    let abbd = ab + bd\n    let abbc = ab + bc\n    let abbb = ab + bb\n    let\
    \ abbd = ab + bd\n    let abbc = ab + bc\n    let abbb = ab + bb\n    let abbd\
    \ = ab + bd\n    let abbc = ab + bc\n    let abbb = ab + bb\n    let abbd = ab\
    \ + bd\n    let abbc = ab + bc\n    let abbb = ab + bb\n    let abbd = ab + bd\n\
    \    let abbc = ab + bc\n    let abbb = ab + bb\n    let abbd = ab + bd\n    let\
    \ abbc = ab + bc\n    let abbb = ab + bb\n    let abbd = ab + bd\n    let abbc\
    \ = ab + bc\n    let abbb = ab + bb\n    let abbd = ab + bd\n    let abbc = ab\
    \ + bc\n    let abbb = ab + bb\n    let abbd = ab + bd\n    let abbc = ab + bc\n\
    \    let abbb = ab + bb\n    let abbd = ab + bd\n    let abbc = ab + bc\n    let\
    \ abbb = ab + bb\n    let abbd = ab + bd\n    let abbc = ab + bc\n    let abbb\
    \ = ab + bb\n    let abbd = ab + bd\n    let abbc = ab + bc\n    let abbb = ab\
    \ + bb\n    let abbd = ab + bd\n    let abbc = ab + bc\n    let abbb = ab + bb\n\
    \    let abbd = ab + bd\n    let abbc = ab + bc\n    let abbb = ab + bb\n    let\
    \ abbd = ab + bd\n    let abbc = ab + bc\n    let abbb = ab + bb\n    let abb\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd3gxe7k0.swift:14:21: error: cannot find 'bb' in scope\n    let\
    \ abbb = ab + bb\n                    ^~\n/tmp/tmpd3gxe7k0.swift:15:21: error:\
    \ cannot find 'bd' in scope\n    let abbd = ab + bd\n                    ^~\n\
    /tmp/tmpd3gxe7k0.swift:16:9: error: invalid redeclaration of 'abbc'\n    let abbc\
    \ = ab + bc\n        ^\n/tmp/tmpd3gxe7k0.swift:13:9: note: 'abbc' previously declared\
    \ here\n    let abbc = ab + bc\n        ^\n/tmp/tmpd3gxe7k0.swift:17:21: error:\
    \ cannot find 'bb' in scope\n    let abbb = ab + bb\n                    ^~\n\
    /tmp/tmpd3gxe7k0.swift:18:21: error: cannot find 'bd' in scope\n    let abbd =\
    \ ab + bd\n                    ^~\n/tmp/tmpd3gxe7k0.swift:19:9: error: invalid\
    \ redeclaration of 'abbc'\n    let abbc = ab + bc\n        ^\n/tmp/tmpd3gxe7k0.swift:13:9:\
    \ note: 'abbc' previously declared here\n    let abbc = ab + bc\n        ^\n/tmp/tmpd3gxe7k0.swift:20:21:\
    \ error: cannot find 'bb' in scope\n    let abbb = ab + bb\n                 \
    \   ^~\n/tmp/tmpd3gxe7k0.swift:21:21: error: cannot find 'bd' in scope\n    let\
    \ abbd = ab + bd\n                    ^~\n/tmp/tmpd3gxe7k0.swift:22:9: error:\
    \ invalid redeclaration of 'abbc'\n    let abbc = ab + bc\n        ^\n/tmp/tmpd3gxe7k0.swift:13:9:\
    \ note: 'abbc' previously declared here\n    let abbc = ab + bc\n        ^\n/tmp/tmpd3gxe7k0.swift:23:21:\
    \ error: cannot find 'bb' in scope\n    let abbb = ab + bb\n                 \
    \   ^~\n/tmp/tmpd3gxe7k0.swift:24:21: error: cannot find 'bd' in scope\n    let\
    \ abbd = ab + bd\n                    ^~\n/tmp/tmpd3gxe7k0.swift:25:9: error:\
    \ invalid redeclaration of 'abbc'\n    let abbc = ab + bc\n        ^\n/tmp/tmpd3gxe7k0.swift:13:9:\
    \ note: 'abbc' previously declared here\n    let abbc = ab + bc\n        ^\n/tmp/tmpd3gxe7k0.swift:26:21:\
    \ error: cannot find 'bb' in scope\n    let abbb = ab + bb\n                 \
    \   ^~\n/tmp/tmpd3gxe7k0.swift:27:21: error: cannot find 'bd' in scope\n    let\
    \ abbd = ab + bd\n                    ^~\n/tmp/tmpd3gxe7k0.swift:28:9: error:\
    \ invalid redeclaration of 'abbc'\n    let abbc = ab + bc\n        ^\n/tmp/tmpd3gxe7k0.swift:13:9:\
    \ note: 'abbc' previously "
  stdout: ''
  timestamp: 1659979094
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpk6bzoldt/tmpk6bzoldt.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8451088c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8450d7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8450d7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8450d7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk6bzoldt                        0x000055602caee1bb <unavailable> + 4539

    5    libc.so.6                          0x00002b8451274460 __libc_start_main +
    245

    6    tmpk6bzoldt                        0x000055602caede69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979094
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(a - b)\n    let ac = abs(a - c)\n    let bc = abs(b\
    \ - c)\n    let abc = ab + ac + bc\n    return abc > 180 ? true : false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp1za76p77/tmp1za76p77.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3ae537c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3ae22eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3ae22e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3ae22d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1za76p77                        0x0000560aa158c2ab <unavailable> + 4779

    5    libc.so.6                          0x00002ba3ae723460 __libc_start_main +
    245

    6    tmp1za76p77                        0x0000560aa158bf59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979094
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(b - a)\n    let ac = abs(c - a)\n    let bc = abs(b\
    \ - c)\n    let ad = abs(a - d)\n    let bd = abs(b - d)\n    let cd = abs(c -\
    \ d)\n    return ab > bc && ab > cd && ac > ad && ac > bd\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpybgk0959.swift:11:22: error: cannot find 'd' in scope\n    let\
    \ ad = abs(a - d)\n                     ^\n/tmp/tmpybgk0959.swift:12:22: error:\
    \ cannot find 'd' in scope\n    let bd = abs(b - d)\n                     ^\n\
    /tmp/tmpybgk0959.swift:13:22: error: cannot find 'd' in scope\n    let cd = abs(c\
    \ - d)\n                     ^\n"
  stdout: ''
  timestamp: 1659979094
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    return ((b * b) - (4 * a * c)) > 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpq5zlyaw6/tmpq5zlyaw6.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b398741dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3987114b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3987114988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39871137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq5zlyaw6                        0x0000564ba65d81bb <unavailable> + 4539

    5    libc.so.6                          0x00002b3987609460 __libc_start_main +
    245

    6    tmpq5zlyaw6                        0x0000564ba65d7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(b - a)\n    let ac = abs(c - a)\n    let bc = abs(b\
    \ - c)\n    let cb = abs(c - b)\n    return (ab == ac && ab == bc && ab == cb)\
    \ || (ab == bc && ab == cb && ab == ac)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmphqd3uist/tmphqd3uist.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af81ae6dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af81ab64b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af81ab64988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af81ab637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphqd3uist                        0x000055a3df2ec2ab <unavailable> + 4779

    5    libc.so.6                          0x00002af81b059460 __libc_start_main +
    245

    6    tmphqd3uist                        0x000055a3df2ebf59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979094
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(a - b)\n    let bc = abs(b - c)\n    let cb = abs(c\
    \ - b)\n    return (ab >= bc && ab >= cb)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmplofhalbm/tmplofhalbm.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc943cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc940c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc940c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc940c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplofhalbm                        0x000055dd4244532b <unavailable> + 4907

    5    libc.so.6                          0x00002afc945b7460 __libc_start_main +
    245

    6    tmplofhalbm                        0x000055dd42444f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979094
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    return ((b - a) * (b - c)) - ((c-a) * (c - b)) > 0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpoiuaxaep/tmpoiuaxaep.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3fb252c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3faf49b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3faf49988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3faf487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoiuaxaep                        0x000055992c17d1bb <unavailable> + 4539

    5    libc.so.6                          0x00002ab3fb43e460 __libc_start_main +
    245

    6    tmpoiuaxaep                        0x000055992c17ce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979094
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    \n\
    \    if a > b + c {\n        return false\n    }\n    \n    if b > a + c {\n \
    \       return false\n    }\n    \n    if c > a + b {\n        return false\n\
    \    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp4n10qtp_/tmp4n10qtp_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0641243c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0640f3ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0640f3a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0640f397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4n10qtp_                        0x00005636bdfee32b <unavailable> + 4907

    5    libc.so.6                          0x00002b064142f460 __libc_start_main +
    245

    6    tmp4n10qtp_                        0x00005636bdfedf59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979094
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if\
    \ a > b {\n        if b > c {\n            return true\n        } else {\n   \
    \         return false\n        }\n    } else {\n        if c > b {\n        \
    \    return true\n        } else {\n            return false\n        }\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpx7lprlxv/tmpx7lprlxv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19b1900c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19b15f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19b15f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19b15f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx7lprlxv                        0x000055c71c8b432b <unavailable> + 4907

    5    libc.so.6                          0x00002b19b1aec460 __libc_start_main +
    245

    6    tmpx7lprlxv                        0x000055c71c8b3f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    return ((a + b > c) && (a + c > b) && (b + c > a))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpwzjn8ju_/tmpwzjn8ju_.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af35566cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af355363b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af355363988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3553627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwzjn8ju_                        0x000055ff54143335 <unavailable> + 4917

    5    libc.so.6                          0x00002af355858460 __libc_start_main +
    245

    6    tmpwzjn8ju_                        0x000055ff54142e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n    let side2 = sqrt(pow(b,\
    \ 2) + pow(c, 2))\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n    let angle1\
    \ = atan2(b, a)\n    let angle2 = atan2(c, a - b)\n    let angle3 = atan2(c, b\
    \ - a)\n    return angle1 < angle2 && angle2 < angle3 && angle3 < angle1\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfhejp_oj.swift:8:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpfhejp_oj.swift:8:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpfhejp_oj.swift:8:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpfhejp_oj.swift:9:17: error: cannot find 'sqrt' in scope\n\
    \    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpfhejp_oj.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpfhejp_oj.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpfhejp_oj.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpfhejp_oj.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpfhejp_oj.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpfhejp_oj.swift:11:18: error: cannot find 'atan2' in\
    \ scope\n    let angle1 = atan2(b, a)\n                 ^~~~~\n/tmp/tmpfhejp_oj.swift:12:18:\
    \ error: cannot find 'atan2' in scope\n    let angle2 = atan2(c, a - b)\n    \
    \             ^~~~~\n/tmp/tmpfhejp_oj.swift:13:18: error: cannot find 'atan2'\
    \ in scope\n    let angle3 = atan2(c, b - a)\n                 ^~~~~\n"
  stdout: ''
  timestamp: 1659979095
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n\
    \    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n    let side2 = sqrt(pow(c, 2) +\
    \ pow(d, 2))\n    let side3 = sqrt(pow(d, 2) + pow(e, 2))\n    let side4 = sqrt(pow(e,\
    \ 2) + pow(f, 2))\n    let side5 = sqrt(pow(f, 2) + pow(g, 2))\n    let side6\
    \ = sqrt(pow(g, 2) + pow(a, 2))\n    let side7 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \    let side8 = sqrt(pow(b, 2) + pow(c, 2))\n    let side9 = sqrt(pow(c, 2) +\
    \ pow(d, 2))\n    let side10 = sqrt(pow(d, 2) + pow(e, 2))\n    let side11 = sqrt(pow(e,\
    \ 2) + pow(f, 2))\n    let side12 = sqrt(pow(f, 2) + pow(g, 2))\n    let side13\
    \ = sqrt(pow(g, 2) + pow(a, 2))\n    let side14 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \    let side15 = sqrt(pow(b, 2) + pow(c, 2))\n    let side16 = sqrt(pow(c, 2)\
    \ + pow(d, 2))\n    let side17 = sqrt(pow(d, 2) + pow(e, 2))\n    let side18 =\
    \ sqrt(pow(e, 2) + pow(f, 2))\n    let side19 = sqrt(pow(f, 2) + pow(g, 2))\n\
    \    let side20 = sqrt(pow(g, 2) + pow(a, 2))\n    let side21 = sqrt(pow(a, 2)\
    \ + pow(b, 2))\n    let side22 = sqrt(pow(b, 2) + pow(c, 2))\n    let side23 =\
    \ sqrt(pow(c, 2) + pow(d, 2))\n    let side24 = sqrt(pow(d, 2) + pow(e, 2))\n\
    \    let side25 = sqrt(pow(e, 2) + pow(f, 2))\n    let side26 = sqrt(pow(f, 2)\
    \ + pow(g, 2))\n    let side27 = sqrt(pow(g, 2) + pow(a, 2))\n    let side28 =\
    \ sqrt(pow(a, 2) + pow(b, 2))\n    let side29 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \    let side30 = sqrt(pow(c, 2) + pow(d, 2))\n    let side31 = sqrt(pow(d, 2)\
    \ + pow(e, 2))\n    let side32 = sqrt(pow(e, 2) + pow(f, 2))\n    let side33 =\
    \ sqrt(pow(f, 2) + pow(g, 2))\n    let side34 = sqrt(pow(g, 2) + pow(a, 2))\n\
    \    let side35 = sqrt(pow(a, 2) + pow(b, 2))\n    let side36 = sqrt(pow(b, 2)\
    \ + pow(c, 2))\n    let side37 = sqrt(pow(c, 2) + pow(d, 2))\n    let side38 =\
    \ sqrt(pow(d, 2) + pow(e, 2))\n    let side39 = sqrt(pow(e, 2) + pow(f, 2))\n\
    \    let side40 = sqrt(pow(f, 2) + pow(g, 2))\n    let side41 = sqrt(pow(g, 2)\
    \ + pow(a, 2))\n    let side42 = sqrt(pow\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnwlxa9pb.swift:53:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpnwlxa9pb.swift:52:22: note: to match this opening '('\n    let side42\
    \ = sqrt(pow\n                     ^\n/tmp/tmpnwlxa9pb.swift:11:17: error: cannot\
    \ find 'sqrt' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n        \
    \        ^~~~\n/tmp/tmpnwlxa9pb.swift:11:22: error: cannot find 'pow' in scope\n\
    \    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                     ^~~\n/tmp/tmpnwlxa9pb.swift:11:34:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                                 ^~~\n/tmp/tmpnwlxa9pb.swift:12:17: error: cannot\
    \ find 'sqrt' in scope\n    let side2 = sqrt(pow(c, 2) + pow(d, 2))\n        \
    \        ^~~~\n/tmp/tmpnwlxa9pb.swift:12:22: error: cannot find 'pow' in scope\n\
    \    let side2 = sqrt(pow(c, 2) + pow(d, 2))\n                     ^~~\n/tmp/tmpnwlxa9pb.swift:12:34:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(c, 2) + pow(d, 2))\n\
    \                                 ^~~\n/tmp/tmpnwlxa9pb.swift:12:38: error: cannot\
    \ find 'd' in scope\n    let side2 = sqrt(pow(c, 2) + pow(d, 2))\n           \
    \                          ^\n/tmp/tmpnwlxa9pb.swift:13:17: error: cannot find\
    \ 'sqrt' in scope\n    let side3 = sqrt(pow(d, 2) + pow(e, 2))\n             \
    \   ^~~~\n/tmp/tmpnwlxa9pb.swift:13:22: error: cannot find 'pow' in scope\n  \
    \  let side3 = sqrt(pow(d, 2) + pow(e, 2))\n                     ^~~\n/tmp/tmpnwlxa9pb.swift:13:26:\
    \ error: cannot find 'd' in scope\n    let side3 = sqrt(pow(d, 2) + pow(e, 2))\n\
    \                         ^\n/tmp/tmpnwlxa9pb.swift:13:34: error: cannot find\
    \ 'pow' in scope\n    let side3 = sqrt(pow(d, 2) + pow(e, 2))\n              \
    \                   ^~~\n/tmp/tmpnwlxa9pb.swift:13:38: error: cannot find 'e'\
    \ in scope\n    let side3 = sqrt(pow(d, 2) + pow(e, 2))\n                    \
    \                 ^\n/tmp/tmpnwlxa9pb.swift:14:17: error: cannot find 'sqrt' in\
    \ scope\n    let side4 = sqrt(pow(e, 2) + pow(f, 2))\n                ^~~~\n/tmp/tmpnwlxa9pb.swift:14:22:\
    \ error: cannot find 'pow' in scope\n    let side4 = sqrt(pow"
  stdout: ''
  timestamp: 1659979094
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(b - a)\n    let ac = abs(c - a)\n    let bc = abs(b\
    \ - c)\n    let abc = ab + ac\n    let bcd = bc + ab\n    return abc >= bcd\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmptywef5eb/tmptywef5eb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7feb095c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7fead8cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7fead8c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7fead8b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptywef5eb                        0x000055dced53332b <unavailable> + 4907

    5    libc.so.6                          0x00002b7feb281460 __libc_start_main +
    245

    6    tmptywef5eb                        0x000055dced532f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979094
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n\
    \    let ab = abs(b - a)\n    let ac = abs(c - a)\n    let bc = abs(b - c)\n \
    \   let abc = ab + ac\n    let bca = bc + ab\n    let abca = abc + bc\n    let\
    \ acab = ac + ab\n    let acbc = ac + bc\n    let abcb = abc + bc\n    let abca\
    \ = abc + ac\n    let acab = ac + ab\n    let acbc = ac + bc\n    let abcb = abc\
    \ + bc\n    let abca = abc + ac\n    let acab = ac + ab\n    let acbc = ac + bc\n\
    \    let abcb = abc + bc\n    let abca = abc + ac\n    let acab = ac + ab\n  \
    \  let acbc = ac + bc\n    let abcb = abc + bc\n    let abca = abc + ac\n    let\
    \ acab = ac + ab\n    let acbc = ac + bc\n    let abcb = abc + bc\n    let abca\
    \ = abc + ac\n    let acab = ac + ab\n    let acbc = ac + bc\n    let abcb = abc\
    \ + bc\n    let abca = abc + ac\n    let acab = ac + ab\n    let acbc = ac + bc\n\
    \    let abcb = abc + bc\n    let abca = abc + ac\n    let acab = ac + ab\n  \
    \  let acbc = ac + bc\n    let abcb = abc + bc\n    let abca = abc + ac\n    let\
    \ acab = ac + ab\n    let acbc = ac + bc\n    let abcb = abc + bc\n    let abca\
    \ = abc + ac\n    let acab = ac + ab\n    let acbc = ac + bc\n    let abcb = abc\
    \ + bc\n    let abca = abc + ac\n    let acab = ac + ab\n    let acbc = ac + bc\n\
    \    let abcb = abc + bc\n    let abca = abc + ac\n    let acab = ac + ab\n  \
    \  let acbc = ac + bc\n    let abcb = abc + bc\n    let abca = abc + ac\n    let\
    \ acab = ac + ab\n    let acbc = ac + bc\n    let abcb = abc + bc\n    let abca\
    \ = abc + ac\n    let acab = ac + ab\n    let acbc = ac + bc\n    let abcb = abc\
    \ + bc\n    let abca = abc + ac\n    let acab = ac + ab\n    let acbc = ac + bc\n\
    \    let abcb = \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp_l3o5s5f.swift:75:15: error: expected initial value after '='\n\
    \    let abcb = \n              ^\n/tmp/tmp_l3o5s5f.swift:20:9: error: invalid\
    \ redeclaration of 'abca'\n    let abca = abc + ac\n        ^\n/tmp/tmp_l3o5s5f.swift:16:9:\
    \ note: 'abca' previously declared here\n    let abca = abc + bc\n        ^\n\
    /tmp/tmp_l3o5s5f.swift:21:9: error: invalid redeclaration of 'acab'\n    let acab\
    \ = ac + ab\n        ^\n/tmp/tmp_l3o5s5f.swift:17:9: note: 'acab' previously declared\
    \ here\n    let acab = ac + ab\n        ^\n/tmp/tmp_l3o5s5f.swift:22:9: error:\
    \ invalid redeclaration of 'acbc'\n    let acbc = ac + bc\n        ^\n/tmp/tmp_l3o5s5f.swift:18:9:\
    \ note: 'acbc' previously declared here\n    let acbc = ac + bc\n        ^\n/tmp/tmp_l3o5s5f.swift:23:9:\
    \ error: invalid redeclaration of 'abcb'\n    let abcb = abc + bc\n        ^\n\
    /tmp/tmp_l3o5s5f.swift:19:9: note: 'abcb' previously declared here\n    let abcb\
    \ = abc + bc\n        ^\n/tmp/tmp_l3o5s5f.swift:24:9: error: invalid redeclaration\
    \ of 'abca'\n    let abca = abc + ac\n        ^\n/tmp/tmp_l3o5s5f.swift:16:9:\
    \ note: 'abca' previously declared here\n    let abca = abc + bc\n        ^\n\
    /tmp/tmp_l3o5s5f.swift:25:9: error: invalid redeclaration of 'acab'\n    let acab\
    \ = ac + ab\n        ^\n/tmp/tmp_l3o5s5f.swift:17:9: note: 'acab' previously declared\
    \ here\n    let acab = ac + ab\n        ^\n/tmp/tmp_l3o5s5f.swift:26:9: error:\
    \ invalid redeclaration of 'acbc'\n    let acbc = ac + bc\n        ^\n/tmp/tmp_l3o5s5f.swift:18:9:\
    \ note: 'acbc' previously declared here\n    let acbc = ac + bc\n        ^\n/tmp/tmp_l3o5s5f.swift:27:9:\
    \ error: invalid redeclaration of 'abcb'\n    let abcb = abc + bc\n        ^\n\
    /tmp/tmp_l3o5s5f.swift:19:9: note: 'abcb' previously declared here\n    let abcb\
    \ = abc + bc\n        ^\n/tmp/tmp_l3o5s5f.swift:28:9: error: invalid redeclaration\
    \ of 'abca'\n    let abca = abc + ac\n        ^\n/tmp/tmp_l3o5s5f.swift:16:9:\
    \ note: 'abca' previously declared here\n    let abca = abc + bc\n        ^\n\
    /tmp/tmp_l3o5s5f.swift:29:9: error: invalid redeclaration of 'acab'\n    let acab\
    \ = ac + ab\n        ^\n/tmp/tmp_l3o5s5f.swift:17:"
  stdout: ''
  timestamp: 1659979094
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(a - b)\n    let ac = abs(a - c)\n    let bc = abs(b\
    \ - c)\n    if ab > ac && ab > bc {\n        return true\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpy0i65kli/tmpy0i65kli.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af152292c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af151f89b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af151f89988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af151f887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy0i65kli                        0x0000563b692042ab <unavailable> + 4779

    5    libc.so.6                          0x00002af15247e460 __libc_start_main +
    245

    6    tmpy0i65kli                        0x0000563b69203f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979094
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if\
    \ a > b {\n        if b > c {\n            return true\n        } else {\n   \
    \         return false\n        }\n    } else {\n        if c > b {\n        \
    \    return true\n        } else {\n            return false\n        }\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpx7lprlxv/tmpx7lprlxv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19b1900c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19b15f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19b15f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19b15f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx7lprlxv                        0x000055c71c8b432b <unavailable> + 4907

    5    libc.so.6                          0x00002b19b1aec460 __libc_start_main +
    245

    6    tmpx7lprlxv                        0x000055c71c8b3f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n    let side2 = sqrt(pow(b,\
    \ 2) + pow(c, 2))\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n    let side4\
    \ = sqrt(pow(a, 2) + pow(b, 2))\n    let side5 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \    let side6 = sqrt(pow(c, 2) + pow(a, 2))\n    let side7 = sqrt(pow(a, 2) +\
    \ pow(b, 2))\n    let side8 = sqrt(pow(b, 2) + pow(c, 2))\n    let side9 = sqrt(pow(c,\
    \ 2) + pow(a, 2))\n    let side10 = sqrt(pow(a, 2) + pow(b, 2))\n    let side11\
    \ = sqrt(pow(b, 2) + pow(c, 2))\n    let side12 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \    let side13 = sqrt(pow(a, 2) + pow(b, 2))\n    let side14 = sqrt(pow(b, 2)\
    \ + pow(c, 2))\n    let side15 = sqrt(pow(c, 2) + pow(a, 2))\n    let side16 =\
    \ sqrt(pow(a, 2) + pow(b, 2))\n    let side17 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \    let side18 = sqrt(pow(c, 2) + pow(a, 2))\n    let side19 = sqrt(pow(a, 2)\
    \ + pow(b, 2))\n    let side20 = sqrt(pow(b, 2) + pow(c, 2))\n    let side21 =\
    \ sqrt(pow(c, 2) + pow(a, 2))\n    let side22 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \    let side23 = sqrt(pow(b, 2) + pow(c, 2))\n    let side24 = sqrt(pow(c, 2)\
    \ + pow(a, 2))\n    let side25 = sqrt(pow(a, 2) + pow(b, 2))\n    let side26 =\
    \ sqrt(pow(b, 2) + pow(c, 2))\n    let side27 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \    let side28 = sqrt(pow(a, 2) + pow(b, 2))\n    let side29 = sqrt(pow(b, 2)\
    \ + pow(c, 2))\n    let side30 = sqrt(pow(c, 2) + pow(a, 2))\n    let side31 =\
    \ sqrt(pow(a, 2) + pow(b, 2))\n    let side32 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \    let side33 = sqrt(pow(c, 2) + pow(a, 2))\n    let side34 = sqrt(pow(a, 2)\
    \ + pow(b, 2))\n    let side35 = sqrt(pow(b, 2) + pow(c, 2))\n    let side36 =\
    \ sqrt(pow(c, 2) + pow(a, 2))\n    let side37 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \    let side38 = sqrt(pow(b, 2) + pow(c, 2))\n    let side39 = sqrt(pow(c, 2)\
    \ + pow(a, 2))\n    let side40 = sqrt(pow(a, 2) + pow(b, 2))\n    let side41 =\
    \ sqrt(pow(b, 2) + pow(c, 2))\n    let side42 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \    let side43 = sqrt(pow(a, 2) + pow(b, 2))\n    let side44 = sqrt(pow(b, 2)\
    \ + \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b:\
    \ 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp4xga0an9.swift:52:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmp4xga0an9.swift:8:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmp4xga0an9.swift:8:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmp4xga0an9.swift:8:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmp4xga0an9.swift:9:17: error: cannot find 'sqrt' in scope\n\
    \    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmp4xga0an9.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmp4xga0an9.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmp4xga0an9.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmp4xga0an9.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmp4xga0an9.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmp4xga0an9.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side4 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmp4xga0an9.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side4 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmp4xga0an9.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side4 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmp4xga0an9.swift:12:17: error: cannot find 'sqrt' in\
    \ scope\n    let side5 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmp4xga0an9.swift:12:22:\
    \ error: cannot find 'pow' in scope\n    let side5 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmp4xga0an9.swift:12:34: error: cannot find 'pow'\
    \ in scope\n    let side5 = sqrt"
  stdout: ''
  timestamp: 1659979094
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    let\
    \ ab = abs(a + b)\n    let bc = abs(b + c)\n    let ac = abs(a + c)\n    let abc\
    \ = ab + bc\n    let acb = ac + ab\n    let abcb = abc * bc\n    let acbc = acb\
    \ * c\n    let acbca = acbc * a\n    let acbcab = acbca * ab\n    let acbcabc\
    \ = acbcab * c\n    let acbcabca = acbcabc * a\n    let acbcabcab = acbcabca *\
    \ ab\n    let acbcabcabc = acbcabcab * c\n    let acbcabcabca = acbcabcabc * a\n\
    \    let acbcabcabcab = acbcabcabca * ab\n    let acbcabcabcabc = acbcabcabcab\
    \ * c\n    let acbcabcabcabca = acbcabcabcabc * a\n    let acbcabcabcabcab = acbcabcabcabca\
    \ * ab\n    let acbcabcabcabcabc = acbcabcabcabcab * c\n    let acbcabcabcabcabca\
    \ = acbcabcabcabcabc * a\n    let acbcabcabcabcabcab = acbcabcabcabcabca * ab\n\
    \    let acbcabcabcabcabcabc = acbcabcabcabcabcab * c\n    let acbcabcabcabcabcabca\
    \ = acbcabcabcabcabcabc * a\n    let acbcabcabcabcabcabcab = acbcabcabcabcabcabcaba\
    \ * ab\n    let acbcabcabcabcabcabcabc = acbcabcabcabcabcabcab * c\n    let acbcabcabcabcabcabcabca\
    \ = acbcabcabcabcabcabcabcab * a\n    let acbcabcabcabcabcabcabcab = acbcabcabcabcabcabcabcaba\
    \ * ab\n    let acbcabcabcabcabcabcabcabc = acbcabcabcabcabcabcabcab * c\n   \
    \ let acbcabcabcabcabcabcabcaba = acbcabcabcabcabcabcabcabcab * a\n    let acbcabcabcabcabcabcabcabab\
    \ = acbcabcabcabcabcabcabcabcaba * ab\n    let acbcabcabcabcabcabcabcababc = acbcabcabcabcabcabcabcabcabab\
    \ * c\n    let acbcabcabcabcabcabcabcabab\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvt1pyijb.swift:34:33: error: cannot find 'acbcabcabcabcabcabcaba'\
    \ in scope\n    let acbcabcabcabcabcabcab = acbcabcabcabcabcabcaba * ab\n    \
    \                            ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvt1pyijb.swift:36:35:\
    \ error: use of local variable 'acbcabcabcabcabcabcabcab' before its declaration\n\
    \    let acbcabcabcabcabcabcabca = acbcabcabcabcabcabcabcab * a\n            \
    \                      ^\n/tmp/tmpvt1pyijb.swift:37:9: note: 'acbcabcabcabcabcabcabcab'\
    \ declared here\n    let acbcabcabcabcabcabcabcab = acbcabcabcabcabcabcabcaba\
    \ * ab\n        ^\n/tmp/tmpvt1pyijb.swift:37:36: error: use of local variable\
    \ 'acbcabcabcabcabcabcabcaba' before its declaration\n    let acbcabcabcabcabcabcabcab\
    \ = acbcabcabcabcabcabcabcaba * ab\n                                   ^\n/tmp/tmpvt1pyijb.swift:39:9:\
    \ note: 'acbcabcabcabcabcabcabcaba' declared here\n    let acbcabcabcabcabcabcabcaba\
    \ = acbcabcabcabcabcabcabcabcab * a\n        ^\n/tmp/tmpvt1pyijb.swift:39:37:\
    \ error: cannot find 'acbcabcabcabcabcabcabcabcab' in scope\n    let acbcabcabcabcabcabcabcaba\
    \ = acbcabcabcabcabcabcabcabcab * a\n                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpvt1pyijb.swift:40:38: error: cannot find 'acbcabcabcabcabcabcabcabcaba'\
    \ in scope\n    let acbcabcabcabcabcabcabcabab = acbcabcabcabcabcabcabcabcaba\
    \ * ab\n                                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvt1pyijb.swift:41:39:\
    \ error: cannot find 'acbcabcabcabcabcabcabcabcabab' in scope\n    let acbcabcabcabcabcabcabcababc\
    \ = acbcabcabcabcabcabcabcabcabab * c\n                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpvt1pyijb.swift:42:9: error: type annotation missing in pattern\n    let\
    \ acbcabcabcabcabcabcabcabab\n        ^\n"
  stdout: ''
  timestamp: 1659979094
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    return ((a + b > c) && (a + c > b) && (b + c > a))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpwzjn8ju_/tmpwzjn8ju_.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af35566cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af355363b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af355363988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3553627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwzjn8ju_                        0x000055ff54143335 <unavailable> + 4917

    5    libc.so.6                          0x00002af355858460 __libc_start_main +
    245

    6    tmpwzjn8ju_                        0x000055ff54142e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    let\
    \ ab = abs(a + b)\n    let bc = abs(b + c)\n    let ac = abs(a + c)\n    if ab\
    \ > bc {\n        if ab > ac {\n            return true\n        } else {\n  \
    \          return false\n        }\n    } else {\n        if bc > ac {\n     \
    \       return true\n        } else {\n            return false\n        }\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpiaw89klw/tmpiaw89klw.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abaa3691c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abaa3388b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abaa3388988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abaa33877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiaw89klw                        0x000056397044e32b <unavailable> + 4907

    5    libc.so.6                          0x00002abaa387d460 __libc_start_main +
    245

    6    tmpiaw89klw                        0x000056397044df59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979094
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n\
    \    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n    let side2 = sqrt(pow(c, 2) +\
    \ pow(d, 2))\n    let side3 = sqrt(pow(d, 2) + pow(e, 2))\n    let side4 = sqrt(pow(e,\
    \ 2) + pow(f, 2))\n    let side5 = sqrt(pow(f, 2) + pow(a, 2))\n    let side6\
    \ = sqrt(pow(a, 2) + pow(b, 2))\n    let side7 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \    let side8 = sqrt(pow(c, 2) + pow(d, 2))\n    let side9 = sqrt(pow(d, 2) +\
    \ pow(e, 2))\n    let side10 = sqrt(pow(e, 2) + pow(f, 2))\n    let side11 = sqrt(pow(f,\
    \ 2) + pow(a, 2))\n    let side12 = sqrt(pow(a, 2) + pow(b, 2))\n    let side13\
    \ = sqrt(pow(b, 2) + pow(c, 2))\n    let side14 = sqrt(pow(c, 2) + pow(d, 2))\n\
    \    let side15 = sqrt(pow(d, 2) + pow(e, 2))\n    let side16 = sqrt(pow(e, 2)\
    \ + pow(f, 2))\n    let side17 = sqrt(pow(f, 2) + pow(a, 2))\n    let side18 =\
    \ sqrt(pow(a, 2) + pow(b, 2))\n    let side19 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \    let side20 = sqrt(pow(c, 2) + pow(d, 2))\n    let side21 = sqrt(pow(d, 2)\
    \ + pow(e, 2))\n    let side22 = sqrt(pow(e, 2) + pow(f, 2))\n    let side23 =\
    \ sqrt(pow(f, 2) + pow(a, 2))\n    let side24 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \    let side25 = sqrt(pow(b, 2) + pow(c, 2))\n    let side26 = sqrt(pow(c, 2)\
    \ + pow(d, 2))\n    let side27 = sqrt(pow(d, 2) + pow(e, 2))\n    let side28 =\
    \ sqrt(pow(e, 2) + pow(f, 2))\n    let side29 = sqrt(pow(f, 2) + pow(a, 2))\n\
    \    let side30 = sqrt(pow(a, 2) + pow(b, 2))\n    let side31 = sqrt(pow(b, 2)\
    \ + pow(c, 2))\n    let side32 = sqrt(pow(c, 2) + pow(d, 2))\n    let side33 =\
    \ sqrt(pow(d, 2) + pow(e, 2))\n    let side34 = sqrt(pow(e, 2) + pow(f, 2))\n\
    \    let side35 = sqrt(pow(f, 2) + pow(a, 2))\n    let side36 = sqrt(pow(a, 2)\
    \ + pow(b, 2))\n    let side37 = sqrt(pow(b, 2) + pow(c, 2))\n    let side38 =\
    \ sqrt(pow(c, 2) + pow(d, 2))\n    let side39 = sqrt(pow(d, 2) + pow(e, 2))\n\
    \    let side40 = sqrt(pow(e, 2) + pow(f, 2))\n    let side41 = sqrt(pow(f, 2)\
    \ + pow(a, 2))\n    let side42 = \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmptlyb1uf1.swift:52:17: error: expected initial value after '='\n\
    \    let side42 = \n                ^\n/tmp/tmptlyb1uf1.swift:11:17: error: cannot\
    \ find 'sqrt' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n        \
    \        ^~~~\n/tmp/tmptlyb1uf1.swift:11:22: error: cannot find 'pow' in scope\n\
    \    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                     ^~~\n/tmp/tmptlyb1uf1.swift:11:34:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                                 ^~~\n/tmp/tmptlyb1uf1.swift:12:17: error: cannot\
    \ find 'sqrt' in scope\n    let side2 = sqrt(pow(c, 2) + pow(d, 2))\n        \
    \        ^~~~\n/tmp/tmptlyb1uf1.swift:12:22: error: cannot find 'pow' in scope\n\
    \    let side2 = sqrt(pow(c, 2) + pow(d, 2))\n                     ^~~\n/tmp/tmptlyb1uf1.swift:12:34:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(c, 2) + pow(d, 2))\n\
    \                                 ^~~\n/tmp/tmptlyb1uf1.swift:12:38: error: cannot\
    \ find 'd' in scope\n    let side2 = sqrt(pow(c, 2) + pow(d, 2))\n           \
    \                          ^\n/tmp/tmptlyb1uf1.swift:13:17: error: cannot find\
    \ 'sqrt' in scope\n    let side3 = sqrt(pow(d, 2) + pow(e, 2))\n             \
    \   ^~~~\n/tmp/tmptlyb1uf1.swift:13:22: error: cannot find 'pow' in scope\n  \
    \  let side3 = sqrt(pow(d, 2) + pow(e, 2))\n                     ^~~\n/tmp/tmptlyb1uf1.swift:13:26:\
    \ error: cannot find 'd' in scope\n    let side3 = sqrt(pow(d, 2) + pow(e, 2))\n\
    \                         ^\n/tmp/tmptlyb1uf1.swift:13:34: error: cannot find\
    \ 'pow' in scope\n    let side3 = sqrt(pow(d, 2) + pow(e, 2))\n              \
    \                   ^~~\n/tmp/tmptlyb1uf1.swift:13:38: error: cannot find 'e'\
    \ in scope\n    let side3 = sqrt(pow(d, 2) + pow(e, 2))\n                    \
    \                 ^\n/tmp/tmptlyb1uf1.swift:14:17: error: cannot find 'sqrt' in\
    \ scope\n    let side4 = sqrt(pow(e, 2) + pow(f, 2))\n                ^~~~\n/tmp/tmptlyb1uf1.swift:14:22:\
    \ error: cannot find 'pow' in scope\n    let side4 = sqrt(pow(e, 2) + pow(f, 2))\n\
    \                     ^~~\n/tmp/tmptlyb1uf1.swift:14:26: er"
  stdout: ''
  timestamp: 1659979094
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    return ((a + b > c) && (a + c > b) && (b + c > a))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpwzjn8ju_/tmpwzjn8ju_.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af35566cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af355363b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af355363988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3553627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwzjn8ju_                        0x000055ff54143335 <unavailable> + 4917

    5    libc.so.6                          0x00002af355858460 __libc_start_main +
    245

    6    tmpwzjn8ju_                        0x000055ff54142e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if\
    \ a > b + c {\n        return false\n    }\n    if b > c + a {\n        return\
    \ false\n    }\n    if c > a + b {\n        return false\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp0el310sm/tmp0el310sm.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c78acdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c787c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c787c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c787c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0el310sm                        0x0000561864f1032b <unavailable> + 4907

    5    libc.so.6                          0x00002b1c78cb9460 __libc_start_main +
    245

    6    tmp0el310sm                        0x0000561864f0ff59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    \n    let a1 = abs(a)\n    let b1 = abs(b)\n    let c1 = abs(c)\n\
    \    \n    if a1 == b1 && b1 == c1 {\n        return true\n    }\n    \n    if\
    \ a1 == c1 {\n        return false\n    }\n    \n    if b1 == c1 {\n        return\
    \ false\n    }\n    \n    if a1 == b1 || b1 == c1 || c1 == a1 {\n        return\
    \ false\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp3pla4au1/tmp3pla4au1.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c070e8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c06ddfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c06ddf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c06dde7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3pla4au1                        0x0000559adeb1a32b <unavailable> + 4907

    5    libc.so.6                          0x00002b9c072d4460 __libc_start_main +
    245

    6    tmp3pla4au1                        0x0000559adeb19f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979094
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a1 = (a + b + c) / 2\n    let b1 = (b + c + a) / 2\n    let\
    \ c1 = (c + a + b) / 2\n    \n    return a1 == b1 && b1 == c1 && c1 == a\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp4tl7s7jm/tmp4tl7s7jm.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5255763c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b525545ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b525545a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b52554597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4tl7s7jm                        0x000055aa20a9b24b <unavailable> + 4683

    5    libc.so.6                          0x00002b525594f460 __libc_start_main +
    245

    6    tmp4tl7s7jm                        0x000055aa20a9aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979094
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if\
    \ a > b {\n        if b > c {\n            return true\n        } else {\n   \
    \         return false\n        }\n    } else {\n        if c > b {\n        \
    \    return true\n        } else {\n            return false\n        }\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpx7lprlxv/tmpx7lprlxv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19b1900c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19b15f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19b15f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19b15f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx7lprlxv                        0x000055c71c8b432b <unavailable> + 4907

    5    libc.so.6                          0x00002b19b1aec460 __libc_start_main +
    245

    6    tmpx7lprlxv                        0x000055c71c8b3f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    if a > b {\n        return false\n    }\n    if b > c {\n   \
    \     return false\n    }\n    if c > a {\n        return false\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp4lmurxyu/tmp4lmurxyu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ca7c02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ca78f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ca78f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ca78f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4lmurxyu                        0x000056199c0211bb <unavailable> + 4539

    5    libc.so.6                          0x00002b4ca7dee460 __libc_start_main +
    245

    6    tmp4lmurxyu                        0x000056199c020e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    return ((a + b > c) && (a + c > b) && (b + c > a))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpwzjn8ju_/tmpwzjn8ju_.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af35566cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af355363b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af355363988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3553627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwzjn8ju_                        0x000055ff54143335 <unavailable> + 4917

    5    libc.so.6                          0x00002af355858460 __libc_start_main +
    245

    6    tmpwzjn8ju_                        0x000055ff54142e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a1 = (a + b + c) / 2\n    let b1 = (b + c + a) / 2\n    let\
    \ c1 = (c + a + b) / 2\n    return a1 == b1 && b1 == c1 && c1 == a1\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp9g4eykgw/tmp9g4eykgw.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b251d9b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b251d6a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b251d6a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b251d6a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9g4eykgw                        0x000055f3b9d932cb <unavailable> + 4811

    5    libc.so.6                          0x00002b251db9e460 __libc_start_main +
    245

    6    tmp9g4eykgw                        0x000055f3b9d92ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979094
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a1 = abs(a)\n    let b1 = abs(b)\n    let c1 = abs(c)\n \
    \   if a1 == b1 && b1 == c1 {\n        return true\n    }\n    if a1 == c1 {\n\
    \        return false\n    }\n    if b1 == c1 {\n        return false\n    }\n\
    \    if a1 == b1 {\n        return false\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp2lgwa453/tmp2lgwa453.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21fde48c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21fdb3fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21fdb3f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21fdb3e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2lgwa453                        0x000055eee32322ab <unavailable> + 4779

    5    libc.so.6                          0x00002b21fe034460 __libc_start_main +
    245

    6    tmp2lgwa453                        0x000055eee3231f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979094
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if\
    \ a > b {\n        if b > c {\n            return true\n        } else {\n   \
    \         return false\n        }\n    } else {\n        if c > b {\n        \
    \    return true\n        } else {\n            return false\n        }\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpx7lprlxv/tmpx7lprlxv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19b1900c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19b15f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19b15f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19b15f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx7lprlxv                        0x000055c71c8b432b <unavailable> + 4907

    5    libc.so.6                          0x00002b19b1aec460 __libc_start_main +
    245

    6    tmpx7lprlxv                        0x000055c71c8b3f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if\
    \ a + b > c {\n        return false\n    }\n    if a + c > b {\n        return\
    \ false\n    }\n    if b + c > a {\n        return false\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp3op6xlp8/tmp3op6xlp8.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7142b83c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b714287ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b714287a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71428797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3op6xlp8                        0x00005576f36f12ab <unavailable> + 4779

    5    libc.so.6                          0x00002b7142d6f460 __libc_start_main +
    245

    6    tmp3op6xlp8                        0x00005576f36f0f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    \n\
    \    if a + b > c {\n        return false\n    }\n    \n    if a + c > b {\n \
    \       return false\n    }\n    \n    if b + c > a {\n        return false\n\
    \    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpey28v29x/tmpey28v29x.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b91b3386c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b91b307db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b91b307d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b91b307c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpey28v29x                        0x0000557c17afd2ab <unavailable> + 4779

    5    libc.so.6                          0x00002b91b3572460 __libc_start_main +
    245

    6    tmpey28v29x                        0x0000557c17afcf59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979094
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a1 = a / 2\n    let b1 = b / 2\n    let c1 = c / 2\n    let\
    \ a2 = a1 + 1\n    let b2 = b1 + 1\n    let c2 = c1 + 1\n    let a3 = a1 + 2\n\
    \    let b3 = b1 + 2\n    let c3 = c1 + 2\n    let a4 = a1 + 3\n    let b4 = b1\
    \ + 3\n    let c4 = c1 + 3\n    let a5 = a2 + 1\n    let b5 = b2 + 1\n    let\
    \ c5 = c5 + 1\n    let a6 = a2 + 2\n    let b6 = b2 + 2\n    let c6 = c6 + 1\n\
    \    let a7 = a2 + 3\n    let b7 = b2 + 3\n    let c7 = c7 + 1\n    let a8 = a3\
    \ + 1\n    let b8 = b3 + 1\n    let c8 = c8 + 1\n    let a9 = a3 + 2\n    let\
    \ b9 = b3 + 2\n    let c9 = c9 + 1\n    let a10 = a3 + 3\n    let b10 = b3 + 3\n\
    \    let c10 = c10 + 1\n    let a11 = a4 + 3\n    let b11 = b4 + 3\n    let c11\
    \ = c11 + 1\n    let a12 = a5 + 3\n    let b12 = b5 + 3\n    let c12 = c12 + 1\n\
    \    let a13 = a6 + 3\n    let b13 = b6 + 3\n    let c13 = c13 + 1\n    let a14\
    \ = a7 + 3\n    let b14 = b7 + 3\n    let c14 = c14 + 1\n    let a15 = a8 + 3\n\
    \    let b15 = b8 + 3\n    let c15 = c15 + 1\n    let a16 = a9 + 3\n    let b16\
    \ = b9 + 3\n    let c16 = c16 + 1\n    let a17 = a10 + 3\n    let b17 = b10 +\
    \ 3\n    let c17 = c17 + 1\n    let a18 = a11 + 3\n    let b18 = b11 + 3\n   \
    \ let c18 = c18 + 1\n    let a19 = a12 + 3\n    let b19 = b12 + 3\n    let c19\
    \ = c19 + 1\n    let a20 = a13 + 3\n    let b20 = b13 + 3\n    let c20 = c20 +\
    \ 1\n    let a21 = a14 + 3\n    let b21 = b14 + 3\n    let c21 = c21 + 1\n   \
    \ let a22 = a15 + 3\n    let b22 = b15 + 3\n    let c22 = c22 + 1\n    let a23\
    \ = a16 + 3\n    let b23 = b16 + 3\n    let c23 = c23 + 1\n    let a24 = a17 +\
    \ 3\n    let b24 = b17 + 3\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpym3urbrx.swift:22:14: error: use of local variable 'c5' before\
    \ its declaration\n    let c5 = c5 + 1\n             ^\n/tmp/tmpym3urbrx.swift:22:9:\
    \ note: 'c5' declared here\n    let c5 = c5 + 1\n        ^\n/tmp/tmpym3urbrx.swift:25:14:\
    \ error: use of local variable 'c6' before its declaration\n    let c6 = c6 +\
    \ 1\n             ^\n/tmp/tmpym3urbrx.swift:25:9: note: 'c6' declared here\n \
    \   let c6 = c6 + 1\n        ^\n/tmp/tmpym3urbrx.swift:28:14: error: use of local\
    \ variable 'c7' before its declaration\n    let c7 = c7 + 1\n             ^\n\
    /tmp/tmpym3urbrx.swift:28:9: note: 'c7' declared here\n    let c7 = c7 + 1\n \
    \       ^\n/tmp/tmpym3urbrx.swift:31:14: error: use of local variable 'c8' before\
    \ its declaration\n    let c8 = c8 + 1\n             ^\n/tmp/tmpym3urbrx.swift:31:9:\
    \ note: 'c8' declared here\n    let c8 = c8 + 1\n        ^\n/tmp/tmpym3urbrx.swift:34:14:\
    \ error: use of local variable 'c9' before its declaration\n    let c9 = c9 +\
    \ 1\n             ^\n/tmp/tmpym3urbrx.swift:34:9: note: 'c9' declared here\n \
    \   let c9 = c9 + 1\n        ^\n/tmp/tmpym3urbrx.swift:37:15: error: use of local\
    \ variable 'c10' before its declaration\n    let c10 = c10 + 1\n             \
    \ ^\n/tmp/tmpym3urbrx.swift:37:9: note: 'c10' declared here\n    let c10 = c10\
    \ + 1\n        ^\n/tmp/tmpym3urbrx.swift:40:15: error: use of local variable 'c11'\
    \ before its declaration\n    let c11 = c11 + 1\n              ^\n/tmp/tmpym3urbrx.swift:40:9:\
    \ note: 'c11' declared here\n    let c11 = c11 + 1\n        ^\n/tmp/tmpym3urbrx.swift:43:15:\
    \ error: use of local variable 'c12' before its declaration\n    let c12 = c12\
    \ + 1\n              ^\n/tmp/tmpym3urbrx.swift:43:9: note: 'c12' declared here\n\
    \    let c12 = c12 + 1\n        ^\n/tmp/tmpym3urbrx.swift:46:15: error: use of\
    \ local variable 'c13' before its declaration\n    let c13 = c13 + 1\n       \
    \       ^\n/tmp/tmpym3urbrx.swift:46:9: note: 'c13' declared here\n    let c13\
    \ = c13 + 1\n        ^\n/tmp/tmpym3urbrx.swift:49:15: error: use of local variable\
    \ 'c14' before its declaration\n    let c14 = c14 + 1\n              ^\n/tmp/tmpym3urbrx.swift:49:9:\
    \ note: 'c14'"
  stdout: ''
  timestamp: 1659979094
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(a - b)\n    let bc = abs(b - c)\n    let cb = abs(c\
    \ - b)\n    let abc = ab + bc + cb\n    return abc > a * b * c\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp_lekrfq3/tmp_lekrfq3.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b933c813c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b933c50ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b933c50a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b933c5097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_lekrfq3                        0x000055c2b41402ab <unavailable> + 4779

    5    libc.so.6                          0x00002b933c9ff460 __libc_start_main +
    245

    6    tmp_lekrfq3                        0x000055c2b413ff59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a1 = abs(a)\n    let b1 = abs(b)\n    let c1 = abs(c)\n \
    \   let a2 = a1 + b1\n    let b2 = b1 + c1\n    let c2 = c1 + a1\n    let a3 =\
    \ a2 + b2\n    let b3 = b2 + c2\n    let c3 = c2 + b2\n    return a3 >= b3 &&\
    \ a3 >= c3 && b3 >= c3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpu__ir7ed/tmpu__ir7ed.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf6e2efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf6dfe6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf6dfe6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf6dfe57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu__ir7ed                        0x000056314449d2ab <unavailable> + 4779

    5    libc.so.6                          0x00002abf6e4db460 __libc_start_main +
    245

    6    tmpu__ir7ed                        0x000056314449cf59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979094
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    \n    let a1 = abs(a)\n    let b1 = abs(b)\n    let c1 = abs(c)\n\
    \    \n    if a1 == b1 && b1 == c1 {\n        return true\n    }\n    \n    let\
    \ a2 = a1 * a1\n    let b2 = b1 * b1\n    let c2 = c1 * c1\n    \n    let a3 =\
    \ a1 * a2\n    let b3 = b1 * b2\n    let c3 = c1 * c2\n    \n    let a4 = a1 *\
    \ a3\n    let b4 = b1 * b3\n    let c4 = c1 * c3\n    \n    let a5 = a1 * a4\n\
    \    let b5 = b1 * b4\n    let c5 = c1 * c5\n    \n    let a6 = a1 * a5\n    let\
    \ b6 = b1 * b5\n    let c6 = c1 * c6\n    \n    let a7 = a1 * a6\n    let b7 =\
    \ b1 * b6\n    let c7 = c1 * c7\n    \n    let a8 = a1 * a7\n    let b8 = b1 *\
    \ b7\n    let c8 = c1 * c8\n    \n    let a9 = a1 * a8\n    let b9 = b1 * b8\n\
    \    let c9 = c1 * c9\n    \n    let a10 = a1 * a9\n    let b10 = b1 * b9\n  \
    \  let c10 = c1 * c10\n    \n    let a11 = a1 * a10\n    let b11 = b1 * b10\n\
    \    let c11 = c1 * c11\n    \n    let a12 = a1 * a11\n    let b12 = b1 * b11\n\
    \    let c12 = c1 * c12\n    \n    let a13 = a1 * a12\n    let b13 = b1 * b12\n\
    \    let c13 = c1 * c13\n    \n    let a14 = a1 * a13\n    let b14 = b1 * b13\n\
    \    let c14 = c1 * c14\n    \n    let a15 = a1 * a14\n    let b15 = b1 * b14\n\
    \    let c15 = c1 * c15\n    \n    let a16 = a1 * a15\n    let b16 = b1 * b15\n\
    \    let c16 = c1 * c16\n    \n    let a17 = a1 * a16\n    let b17 = b1 * b16\n\
    \    let c17 = c1 * c17\n    \n    let a18 = a1 * a17\n    let b18 = b1 * b17\n\
    \    let c18 = c1 * c18\n    \n    let a19 = a1 * a18\n    let b19 = b1 * b18\n\
    \    let c19 = c1 * c19\n    \n    let a20 = a1 * a19\n    let b20 = b1 * b19\n\
    \    let c20 = c1 * c20\n    \n    let a21 = a1 * a20\n    let b21 = 0\n    let\
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b:\
    \ 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp2m86h16u.swift:95:8: error: expected pattern\n    let \n      \
    \ ^\n/tmp/tmp2m86h16u.swift:31:19: error: use of local variable 'c5' before its\
    \ declaration\n    let c5 = c1 * c5\n                  ^\n/tmp/tmp2m86h16u.swift:31:9:\
    \ note: 'c5' declared here\n    let c5 = c1 * c5\n        ^\n/tmp/tmp2m86h16u.swift:35:19:\
    \ error: use of local variable 'c6' before its declaration\n    let c6 = c1 *\
    \ c6\n                  ^\n/tmp/tmp2m86h16u.swift:35:9: note: 'c6' declared here\n\
    \    let c6 = c1 * c6\n        ^\n/tmp/tmp2m86h16u.swift:39:19: error: use of\
    \ local variable 'c7' before its declaration\n    let c7 = c1 * c7\n         \
    \         ^\n/tmp/tmp2m86h16u.swift:39:9: note: 'c7' declared here\n    let c7\
    \ = c1 * c7\n        ^\n/tmp/tmp2m86h16u.swift:43:19: error: use of local variable\
    \ 'c8' before its declaration\n    let c8 = c1 * c8\n                  ^\n/tmp/tmp2m86h16u.swift:43:9:\
    \ note: 'c8' declared here\n    let c8 = c1 * c8\n        ^\n/tmp/tmp2m86h16u.swift:47:19:\
    \ error: use of local variable 'c9' before its declaration\n    let c9 = c1 *\
    \ c9\n                  ^\n/tmp/tmp2m86h16u.swift:47:9: note: 'c9' declared here\n\
    \    let c9 = c1 * c9\n        ^\n/tmp/tmp2m86h16u.swift:51:20: error: use of\
    \ local variable 'c10' before its declaration\n    let c10 = c1 * c10\n      \
    \             ^\n/tmp/tmp2m86h16u.swift:51:9: note: 'c10' declared here\n    let\
    \ c10 = c1 * c10\n        ^\n/tmp/tmp2m86h16u.swift:55:20: error: use of local\
    \ variable 'c11' before its declaration\n    let c11 = c1 * c11\n            \
    \       ^\n/tmp/tmp2m86h16u.swift:55:9: note: 'c11' declared here\n    let c11\
    \ = c1 * c11\n        ^\n/tmp/tmp2m86h16u.swift:59:20: error: use of local variable\
    \ 'c12' before its declaration\n    let c12 = c1 * c12\n                   ^\n\
    /tmp/tmp2m86h16u.swift:59:9: note: 'c12' declared here\n    let c12 = c1 * c12\n\
    \        ^\n/tmp/tmp2m86h16u.swift:63:20: error: use of local variable 'c13' before\
    \ its declaration\n    let c13 = c1 * c13\n                   ^\n/tmp/tmp2m86h16u.swift:63:9:\
    \ note: 'c13' declared here\n    let c13 = c1 * c13\n        ^\n/tmp/tmp2m86h16u.swift:67:20:\
    \ er"
  stdout: ''
  timestamp: 1659979094
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(b - a)\n    let ac = abs(c - a)\n    let bc = abs(b\
    \ - c)\n    let abc = ab + ac\n    let bca = bc + ab\n    let abca = abc + bc\n\
    \    let acab = ac + ab\n    let acbc = ac + bc\n    let abcb = abc + bc\n   \
    \ let abca = abc + ab\n    let acab = ac + ab\n    let acbc = ac + bc\n    let\
    \ abcb = abc + bc\n    let abca = abc + ab\n    let acab = ac + ab\n    let acbc\
    \ = ac + bc\n    let abcb = abc + bc\n    let abca = abc + ab\n    let acab =\
    \ ac + ab\n    let acbc = ac + bc\n    let abcb = abc + bc\n    let abca = abc\
    \ + ab\n    let acab = ac + ab\n    let acbc = ac + bc\n    let abcb = abc + bc\n\
    \    let abca = abc + ab\n    let acab = ac + ab\n    let acbc = ac + bc\n   \
    \ let abcb = abc + bc\n    let abca = abc + ab\n    let acab = ac + ab\n    let\
    \ acbc = ac + bc\n    let abcb = abc + bc\n    let abca = abc + ab\n    let acab\
    \ = ac + ab\n    let acbc = ac + bc\n    let abcb = abc + bc\n    let abca = abc\
    \ + ab\n    let acab = ac + ab\n    let acbc = ac + bc\n    let abcb = abc + bc\n\
    \    let abca = abc + ab\n    let acab = ac + ab\n    let acbc = ac + bc\n   \
    \ let abcb = abc + bc\n    let abca = abc + ab\n    let acab = ac + ab\n    let\
    \ acbc = ac + bc\n    let abcb = abc + bc\n    let abca = abc + ab\n    let acab\
    \ = ac + ab\n    let acbc = ac + bc\n    let abcb = abc + bc\n    let abca = abc\
    \ + ab\n    let acab = ac + ab\n    let acbc = ac + bc\n    let abcb = abc + bc\n\
    \    let abca = abc + ab\n    let acab = ac + ab\n    let acbc = ac + bc\n   \
    \ let abcb = abc + bc\n    let abca = abc + ab\n    let acab = ac + ab\n    let\
    \ acbc = ac + bc\n    let abcb = abc + bc\n    let abca = abc + ab\n    let ac\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpl2vxty2_.swift:17:9: error: invalid redeclaration of 'abca'\n \
    \   let abca = abc + ab\n        ^\n/tmp/tmpl2vxty2_.swift:13:9: note: 'abca'\
    \ previously declared here\n    let abca = abc + bc\n        ^\n/tmp/tmpl2vxty2_.swift:18:9:\
    \ error: invalid redeclaration of 'acab'\n    let acab = ac + ab\n        ^\n\
    /tmp/tmpl2vxty2_.swift:14:9: note: 'acab' previously declared here\n    let acab\
    \ = ac + ab\n        ^\n/tmp/tmpl2vxty2_.swift:19:9: error: invalid redeclaration\
    \ of 'acbc'\n    let acbc = ac + bc\n        ^\n/tmp/tmpl2vxty2_.swift:15:9: note:\
    \ 'acbc' previously declared here\n    let acbc = ac + bc\n        ^\n/tmp/tmpl2vxty2_.swift:20:9:\
    \ error: invalid redeclaration of 'abcb'\n    let abcb = abc + bc\n        ^\n\
    /tmp/tmpl2vxty2_.swift:16:9: note: 'abcb' previously declared here\n    let abcb\
    \ = abc + bc\n        ^\n/tmp/tmpl2vxty2_.swift:21:9: error: invalid redeclaration\
    \ of 'abca'\n    let abca = abc + ab\n        ^\n/tmp/tmpl2vxty2_.swift:13:9:\
    \ note: 'abca' previously declared here\n    let abca = abc + bc\n        ^\n\
    /tmp/tmpl2vxty2_.swift:22:9: error: invalid redeclaration of 'acab'\n    let acab\
    \ = ac + ab\n        ^\n/tmp/tmpl2vxty2_.swift:14:9: note: 'acab' previously declared\
    \ here\n    let acab = ac + ab\n        ^\n/tmp/tmpl2vxty2_.swift:23:9: error:\
    \ invalid redeclaration of 'acbc'\n    let acbc = ac + bc\n        ^\n/tmp/tmpl2vxty2_.swift:15:9:\
    \ note: 'acbc' previously declared here\n    let acbc = ac + bc\n        ^\n/tmp/tmpl2vxty2_.swift:24:9:\
    \ error: invalid redeclaration of 'abcb'\n    let abcb = abc + bc\n        ^\n\
    /tmp/tmpl2vxty2_.swift:16:9: note: 'abcb' previously declared here\n    let abcb\
    \ = abc + bc\n        ^\n/tmp/tmpl2vxty2_.swift:25:9: error: invalid redeclaration\
    \ of 'abca'\n    let abca = abc + ab\n        ^\n/tmp/tmpl2vxty2_.swift:13:9:\
    \ note: 'abca' previously declared here\n    let abca = abc + bc\n        ^\n\
    /tmp/tmpl2vxty2_.swift:26:9: error: invalid redeclaration of 'acab'\n    let acab\
    \ = ac + ab\n        ^\n/tmp/tmpl2vxty2_.swift:14:9: note: 'acab' previously declared\
    \ here\n    let acab = ac + ab\n        ^\n/tmp/tmpl2vxty2_.swift:27:9:"
  stdout: ''
  timestamp: 1659979094
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    return ((a + b > c) && (a + c > b) && (b + c > a))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpwzjn8ju_/tmpwzjn8ju_.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af35566cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af355363b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af355363988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3553627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwzjn8ju_                        0x000055ff54143335 <unavailable> + 4917

    5    libc.so.6                          0x00002af355858460 __libc_start_main +
    245

    6    tmpwzjn8ju_                        0x000055ff54142e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(b - a)\n    let bc = abs(c - b)\n    let ac = abs(c\
    \ - a)\n    return ab >= bc && ab >= ac\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpo7t6_ddy/tmpo7t6_ddy.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7aa2914c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7aa260bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7aa260b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7aa260a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7t6_ddy                        0x000055e24ef0a2ab <unavailable> + 4779

    5    libc.so.6                          0x00002b7aa2b00460 __libc_start_main +
    245

    6    tmpo7t6_ddy                        0x000055e24ef09f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979094
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if\
    \ a > b + c {\n        return false\n    }\n    if b > c + a {\n        return\
    \ false\n    }\n    if c > a + b {\n        return false\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp0el310sm/tmp0el310sm.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c78acdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c787c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c787c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c787c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0el310sm                        0x0000561864f1032b <unavailable> + 4907

    5    libc.so.6                          0x00002b1c78cb9460 __libc_start_main +
    245

    6    tmp0el310sm                        0x0000561864f0ff59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    return ((a + b > c) && (a + c > b) && (b + c > a))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpwzjn8ju_/tmpwzjn8ju_.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af35566cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af355363b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af355363988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3553627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwzjn8ju_                        0x000055ff54143335 <unavailable> + 4917

    5    libc.so.6                          0x00002af355858460 __libc_start_main +
    245

    6    tmpwzjn8ju_                        0x000055ff54142e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if\
    \ a > b {\n        if b > c {\n            return true\n        } else {\n   \
    \         return false\n        }\n    } else {\n        if c > b {\n        \
    \    return true\n        } else {\n            return false\n        }\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpx7lprlxv/tmpx7lprlxv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19b1900c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19b15f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19b15f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19b15f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx7lprlxv                        0x000055c71c8b432b <unavailable> + 4907

    5    libc.so.6                          0x00002b19b1aec460 __libc_start_main +
    245

    6    tmpx7lprlxv                        0x000055c71c8b3f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(b - a)\n    let ac = abs(c - a)\n    let bc = abs(b\
    \ - c)\n    let abc = ab + ac\n    let bcb = bc + ab\n    let abbc = ab + bc\n\
    \    let acbc = ac + bc\n    let abcb = abc + bc \n    let abcbc = abc + bcb \n\
    \    let acbcbc = ac + bcb \n    let abcbb = abc + bb \n    let abcbcb = abc +\
    \ bcb\n    let acbcbcb = ac + bcb\n    let abcbbc = abc + bbc\n    let abcbcbc\
    \ = abc + bcbc\n    let acbcbcbc = ac + bcbc\n    let abcbbcb = abc + bbcb\n \
    \   let abcbcbcb = abc + bcbcb\n    let acbcbcbcb = ac + bcbcb\n    let abcbbcbc\
    \ = abc + bbcbc\n    let abcbcbcbc = abc + bcbcbc\n    let acbcbcbcbc = ac + bcbcbc\n\
    \    let abcbbcbcb = abc + bbcbcb\n    let abcbcbcbcb = abc + bcbcbcb\n    let\
    \ acbcbcbcbcb = ac + bcbcbcb\n    let abcbbcbcbc = abc + bbcbcbc\n    let abcbcbcbcb\
    \ = abc + bcbcbcbc\n    let acbcbcbcbcb = ac + bcbcbcbc\n    let abcbbcbcbcb =\
    \ abc + bbcbcbcb\n    let abcbcbcbcbc = abc + bcbcbcbcb\n    let acbcbcbcbcbc\
    \ = ac + bcbcbcbcb\n    let abcbbcbcbcbc = abc + bbcbcbcbc\n    let abcbcbcbcbcb\
    \ = abc + bcbcbcbcb\n    let acbcbcbcbcbcb = ac + bcbcbcbcb\n    let abcbbcbcbcbcb\
    \ = abc + bbcbcbcbcb\n    let abcbcbcbcbcbc = abc + bcbcbcbcbc\n    let acbcbcbcbcbcbc\
    \ = ac + bcbcbcbcbc\n    let abcbbcbcbcbcbc = abc + bbcbcbcbcbc\n    let abcbcbcbcbcbcb\
    \ = abc + bcbcbcbcbcb\n    let acbcbcbcbcbcbcb = ac + bcbcbcbcbcb\n    let abcbbcbcbcbcbcb\
    \ = abc + bbcbcb\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpodtq14v6.swift:18:23: error: cannot find 'bb' in scope\n    let\
    \ abcbb = abc + bb \n                      ^~\n/tmp/tmpodtq14v6.swift:21:24: error:\
    \ cannot find 'bbc' in scope\n    let abcbbc = abc + bbc\n                   \
    \    ^~~\n/tmp/tmpodtq14v6.swift:22:25: error: cannot find 'bcbc' in scope\n \
    \   let abcbcbc = abc + bcbc\n                        ^~~~\n/tmp/tmpodtq14v6.swift:23:25:\
    \ error: cannot find 'bcbc' in scope\n    let acbcbcbc = ac + bcbc\n         \
    \               ^~~~\n/tmp/tmpodtq14v6.swift:24:25: error: cannot find 'bbcb'\
    \ in scope\n    let abcbbcb = abc + bbcb\n                        ^~~~\n/tmp/tmpodtq14v6.swift:25:26:\
    \ error: cannot find 'bcbcb' in scope\n    let abcbcbcb = abc + bcbcb\n      \
    \                   ^~~~~\n/tmp/tmpodtq14v6.swift:26:26: error: cannot find 'bcbcb'\
    \ in scope\n    let acbcbcbcb = ac + bcbcb\n                         ^~~~~\n/tmp/tmpodtq14v6.swift:27:26:\
    \ error: cannot find 'bbcbc' in scope\n    let abcbbcbc = abc + bbcbc\n      \
    \                   ^~~~~\n/tmp/tmpodtq14v6.swift:28:27: error: cannot find 'bcbcbc'\
    \ in scope\n    let abcbcbcbc = abc + bcbcbc\n                          ^~~~~~\n\
    /tmp/tmpodtq14v6.swift:29:27: error: cannot find 'bcbcbc' in scope\n    let acbcbcbcbc\
    \ = ac + bcbcbc\n                          ^~~~~~\n/tmp/tmpodtq14v6.swift:30:27:\
    \ error: cannot find 'bbcbcb' in scope\n    let abcbbcbcb = abc + bbcbcb\n   \
    \                       ^~~~~~\n/tmp/tmpodtq14v6.swift:31:28: error: cannot find\
    \ 'bcbcbcb' in scope\n    let abcbcbcbcb = abc + bcbcbcb\n                   \
    \        ^~~~~~~\n/tmp/tmpodtq14v6.swift:32:28: error: cannot find 'bcbcbcb' in\
    \ scope\n    let acbcbcbcbcb = ac + bcbcbcb\n                           ^~~~~~~\n\
    /tmp/tmpodtq14v6.swift:33:28: error: cannot find 'bbcbcbc' in scope\n    let abcbbcbcbc\
    \ = abc + bbcbcbc\n                           ^~~~~~~\n/tmp/tmpodtq14v6.swift:34:28:\
    \ error: cannot find 'bcbcbcbc' in scope\n    let abcbcbcbcb = abc + bcbcbcbc\n\
    \                           ^~~~~~~~\n/tmp/tmpodtq14v6.swift:35:28: error: cannot\
    \ find 'bcbcbcbc' in scope\n    let acbcbcbcbcb = ac + bcbcbcbc\n    "
  stdout: ''
  timestamp: 1659979094
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    \n\
    \    if a > b {\n        if b > c {\n            return true\n        } else {\n\
    \            return false\n        }\n    } else {\n        if c > b {\n     \
    \       return true\n        } else {\n            return false\n        }\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpgt9rot67/tmpgt9rot67.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b731a1aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7319ea1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7319ea1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7319ea07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgt9rot67                        0x000055db261b032b <unavailable> + 4907

    5    libc.so.6                          0x00002b731a396460 __libc_start_main +
    245

    6    tmpgt9rot67                        0x000055db261aff59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(a - b)\n    let bc = abs(b - c)\n    let cb = abs(c\
    \ - b)\n    if ab > bc && ab > cb {\n        return true\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp8aiqrd8r/tmp8aiqrd8r.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21cf584c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21cf27bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21cf27b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21cf27a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8aiqrd8r                        0x000055dfabcf72ab <unavailable> + 4779

    5    libc.so.6                          0x00002b21cf770460 __libc_start_main +
    245

    6    tmp8aiqrd8r                        0x000055dfabcf6f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if\
    \ a > b {\n        if b > c {\n            return true\n        } else {\n   \
    \         return false\n        }\n    } else {\n        if c > b {\n        \
    \    return true\n        } else {\n            return false\n        }\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpx7lprlxv/tmpx7lprlxv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19b1900c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19b15f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19b15f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19b15f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx7lprlxv                        0x000055c71c8b432b <unavailable> + 4907

    5    libc.so.6                          0x00002b19b1aec460 __libc_start_main +
    245

    6    tmpx7lprlxv                        0x000055c71c8b3f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if\
    \ a + b > c {\n        return false\n    }\n    if a + c > b {\n        return\
    \ false\n    }\n    if b + c > a {\n        return false\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp3op6xlp8/tmp3op6xlp8.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7142b83c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b714287ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b714287a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71428797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3op6xlp8                        0x00005576f36f12ab <unavailable> + 4779

    5    libc.so.6                          0x00002b7142d6f460 __libc_start_main +
    245

    6    tmp3op6xlp8                        0x00005576f36f0f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    return ((a + b > c) && (a + c > b) && (b + c > a))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpwzjn8ju_/tmpwzjn8ju_.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af35566cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af355363b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af355363988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3553627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwzjn8ju_                        0x000055ff54143335 <unavailable> + 4917

    5    libc.so.6                          0x00002af355858460 __libc_start_main +
    245

    6    tmpwzjn8ju_                        0x000055ff54142e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if\
    \ a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if a > b {\n\
    \        if b > c {\n            return true\n        } else {\n            return\
    \ false\n        }\n    } else {\n        if c > b {\n            return true\n\
    \        } else {\n            return false\n        }\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpxpwx_t23/tmpxpwx_t23.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3353ba3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b335389ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b335389a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33538997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxpwx_t23                        0x0000559145ad732b <unavailable> + 4907

    5    libc.so.6                          0x00002b3353d8f460 __libc_start_main +
    245

    6    tmpxpwx_t23                        0x0000559145ad6f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a1 = (a + b + c) / 2\n    let b1 = (b + c + a) / 2\n    let\
    \ c1 = (c + a + b) / 2\n    return a1 == b1 && b1 == c1 && c1 == a1\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp9g4eykgw/tmp9g4eykgw.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b251d9b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b251d6a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b251d6a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b251d6a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9g4eykgw                        0x000055f3b9d932cb <unavailable> + 4811

    5    libc.so.6                          0x00002b251db9e460 __libc_start_main +
    245

    6    tmp9g4eykgw                        0x000055f3b9d92ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979094
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if\
    \ a > b {\n        if b > c {\n            return true\n        } else {\n   \
    \         return false\n        }\n    } else {\n        if c > b {\n        \
    \    return true\n        } else {\n            return false\n        }\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpx7lprlxv/tmpx7lprlxv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19b1900c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19b15f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19b15f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19b15f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx7lprlxv                        0x000055c71c8b432b <unavailable> + 4907

    5    libc.so.6                          0x00002b19b1aec460 __libc_start_main +
    245

    6    tmpx7lprlxv                        0x000055c71c8b3f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpk6bzoldt/tmpk6bzoldt.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8451088c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8450d7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8450d7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8450d7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk6bzoldt                        0x000055602caee1bb <unavailable> + 4539

    5    libc.so.6                          0x00002b8451274460 __libc_start_main +
    245

    6    tmpk6bzoldt                        0x000055602caede69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979094
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n    let side2 = sqrt(pow(c,\
    \ 2) + pow(d, 2))\n    let side3 = sqrt(pow(d, 2) + pow(e, 2))\n    let side4\
    \ = sqrt(pow(e, 2) + pow(f, 2))\n    let side5 = sqrt(pow(f, 2) + pow(g, 2))\n\
    \    let side6 = sqrt(pow(g, 2) + pow(h,2))\n    let side7 = sqrt(pow(h,2) + pow(i,2))\n\
    \    let side8 = sqrt(pow(i,2) + pow(k,2))\n    let side9 = sqrt(pow(k,2) + pow(l,2))\n\
    \    let side10 = sqrt(pow(l,2) + pow(m, 2))\n    let side11 = sqrt(pow(m, 2)\
    \ + pow(n, 2))\n    let side12 = sqrt(pow(n, 2) + pow(p, 2))\n    let side13 =\
    \ sqrt(pow(p, 2) + pow(q, 2))\n    let side14 = sqrt(pow(q, 2) + pow(r, 2))\n\
    \    let side15 = sqrt(pow(r, 2) + pow(s, 2))\n    let side16 = sqrt(pow(s, 2)\
    \ + pow(t,2))\n    let side17 = sqrt(pow(t,2) + pow(u,2))\n    let side18 = sqrt(pow(u,2)\
    \ + pow(v,2))\n    let side19 = sqrt(pow(v,2) + pow(w, 2))\n    let side20 = sqrt(pow(w,\
    \ 2) + pow(x,2))\n    let side21 = sqrt(pow(x,2) + pow(y,2))\n    let side22 =\
    \ sqrt(pow(y,2) + pow(z,2))\n    let side23 = sqrt(pow(z,2) + pow(s,2))\n    let\
    \ side24 = sqrt(pow(s,2) + pow(t,2))\n    let side25 = sqrt(pow(t,2) + pow(u,2))\n\
    \    let side26 = sqrt(pow(u,2) + pow(v,2))\n    let side27 = sqrt(pow(v,2) +\
    \ pow(w, 2))\n    let side28 = sqrt(pow(w, 2) + pow(x,2))\n    let side29 = sqrt(pow(x,2)\
    \ + pow(y,2))\n    let side30 = sqrt(pow(y,2) + pow(z,2))\n    let side31 = sqrt(pow(z,2)\
    \ + pow(s,2))\n    let side32 = sqrt(pow(s,2) + pow(t,2))\n    let side33 = sqrt(pow(t,2)\
    \ + pow(u,2))\n    let side34 = sqrt(pow(u,2) + pow(v,2))\n    let side35 = sqrt(pow(v,2)\
    \ + pow(w, 2))\n    let side36 = sqrt(pow(w, 2) + pow(x,2))\n    let side37 =\
    \ sqrt(pow(x,2) + pow(y,2))\n    let side38 = sqrt(pow(y,2) + pow(z,2))\n    let\
    \ side39 = sqrt(pow(z,2) + pow(s,2))\n    let side40 = sqrt(pow(s,2) + pow(t,2))\n\
    \    let side41 = sqrt(pow(t,2) + pow(u\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0msmri3u.swift:49:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp0msmri3u.swift:48:37: note: to match this opening '('\n    let side41\
    \ = sqrt(pow(t,2) + pow(u\n                                    ^\n/tmp/tmp0msmri3u.swift:8:17:\
    \ error: cannot find 'sqrt' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b,\
    \ 2))\n                ^~~~\n/tmp/tmp0msmri3u.swift:8:22: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \ ^~~\n/tmp/tmp0msmri3u.swift:8:34: error: cannot find 'pow' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                                 ^~~\n\
    /tmp/tmp0msmri3u.swift:9:17: error: cannot find 'sqrt' in scope\n    let side2\
    \ = sqrt(pow(c, 2) + pow(d, 2))\n                ^~~~\n/tmp/tmp0msmri3u.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(c, 2) + pow(d, 2))\n\
    \                     ^~~\n/tmp/tmp0msmri3u.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(c, 2) + pow(d, 2))\n                    \
    \             ^~~\n/tmp/tmp0msmri3u.swift:9:38: error: cannot find 'd' in scope\n\
    \    let side2 = sqrt(pow(c, 2) + pow(d, 2))\n                               \
    \      ^\n/tmp/tmp0msmri3u.swift:10:17: error: cannot find 'sqrt' in scope\n \
    \   let side3 = sqrt(pow(d, 2) + pow(e, 2))\n                ^~~~\n/tmp/tmp0msmri3u.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(d, 2) + pow(e, 2))\n\
    \                     ^~~\n/tmp/tmp0msmri3u.swift:10:26: error: cannot find 'd'\
    \ in scope\n    let side3 = sqrt(pow(d, 2) + pow(e, 2))\n                    \
    \     ^\n/tmp/tmp0msmri3u.swift:10:34: error: cannot find 'pow' in scope\n   \
    \ let side3 = sqrt(pow(d, 2) + pow(e, 2))\n                                 ^~~\n\
    /tmp/tmp0msmri3u.swift:10:38: error: cannot find 'e' in scope\n    let side3 =\
    \ sqrt(pow(d, 2) + pow(e, 2))\n                                     ^\n/tmp/tmp0msmri3u.swift:11:17:\
    \ error: cannot find 'sqrt' in scope\n    let side4 = sqrt(pow(e, 2) + pow(f,\
    \ 2))\n                ^~~~\n/tmp/tmp0msmri3u.swift:11:22: error: cannot find\
    \ 'pow' in scope\n   "
  stdout: ''
  timestamp: 1659979095
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    let\
    \ ab = abs(a + b)\n    let ac = abs(a + c)\n    let bc = abs(b + c)\n    let abc\
    \ = ab + ac\n    let bca = bc * b\n    let cab = ac * c\n    let acb = ac * b\n\
    \    let bca = b * c\n    let abc = ab + ac\n    let bca = b * c\n    let cab\
    \ = ac * c\n    let acb = ac * b\n    let bca = b * c\n    let abc = ab + ac\n\
    \    let bca = b * c\n    let cab = ac * c\n    let acb = ac * b\n    let bca\
    \ = b * c\n    let abc = ab + ac\n    let bca = b * c\n    let cab = ac * c\n\
    \    let acb = ac * b\n    let bca = b * c\n    let abc = ab + ac\n    let bca\
    \ = b * c\n    let cab = ac * c\n    let acb = ac * b\n    let bca = b * c\n \
    \   let abc = ab + ac\n    let bca = b * c\n    let cab = ac * c\n    let acb\
    \ = ac * b\n    let bca = b * c\n    let abc = ab + ac\n    let bca = b * c\n\
    \    let cab = ac * c\n    let acb = ac * b\n    let bca = b * c\n    let abc\
    \ = ab + ac\n    let bca = b * c\n    let cab = ac * c\n    let acb = ac * b\n\
    \    let bca = b * c\n    let abc = ab + ac\n    let bca = b * c\n    let cab\
    \ = ac * c\n    let acb = ac * b\n    let bca = b * c\n    let abc = ab + ac\n\
    \    let bca = b * c\n    let cab = ac * c\n    let acb = ac * b\n    let bca\
    \ = b * c\n    let abc = ab + ac\n    let bca = b * c\n    let cab = ac * c\n\
    \    let acb = ac * b\n    let bca = b * c\n    let abc = ab + ac\n    let bca\
    \ = b * c\n    let cab = ac * c\n    let acb = ac * b\n    let bca = b * c\n \
    \   let abc = ab + ac\n    let bca = b * c\n    let cab = ac * c\n    let acb\
    \ = ac * b\n    let bca = b * c\n    let abc = ab + ac\n    let bca = b * c\n\
    \    let cab = ac * c\n    let acb = ac * b\n    let bca = b * c\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpl5ou22c4.swift:18:9: error: invalid redeclaration of 'bca'\n  \
    \  let bca = b * c\n        ^\n/tmp/tmpl5ou22c4.swift:15:9: note: 'bca' previously\
    \ declared here\n    let bca = bc * b\n        ^\n/tmp/tmpl5ou22c4.swift:19:9:\
    \ error: invalid redeclaration of 'abc'\n    let abc = ab + ac\n        ^\n/tmp/tmpl5ou22c4.swift:14:9:\
    \ note: 'abc' previously declared here\n    let abc = ab + ac\n        ^\n/tmp/tmpl5ou22c4.swift:20:9:\
    \ error: invalid redeclaration of 'bca'\n    let bca = b * c\n        ^\n/tmp/tmpl5ou22c4.swift:15:9:\
    \ note: 'bca' previously declared here\n    let bca = bc * b\n        ^\n/tmp/tmpl5ou22c4.swift:21:9:\
    \ error: invalid redeclaration of 'cab'\n    let cab = ac * c\n        ^\n/tmp/tmpl5ou22c4.swift:16:9:\
    \ note: 'cab' previously declared here\n    let cab = ac * c\n        ^\n/tmp/tmpl5ou22c4.swift:22:9:\
    \ error: invalid redeclaration of 'acb'\n    let acb = ac * b\n        ^\n/tmp/tmpl5ou22c4.swift:17:9:\
    \ note: 'acb' previously declared here\n    let acb = ac * b\n        ^\n/tmp/tmpl5ou22c4.swift:23:9:\
    \ error: invalid redeclaration of 'bca'\n    let bca = b * c\n        ^\n/tmp/tmpl5ou22c4.swift:15:9:\
    \ note: 'bca' previously declared here\n    let bca = bc * b\n        ^\n/tmp/tmpl5ou22c4.swift:24:9:\
    \ error: invalid redeclaration of 'abc'\n    let abc = ab + ac\n        ^\n/tmp/tmpl5ou22c4.swift:14:9:\
    \ note: 'abc' previously declared here\n    let abc = ab + ac\n        ^\n/tmp/tmpl5ou22c4.swift:25:9:\
    \ error: invalid redeclaration of 'bca'\n    let bca = b * c\n        ^\n/tmp/tmpl5ou22c4.swift:15:9:\
    \ note: 'bca' previously declared here\n    let bca = bc * b\n        ^\n/tmp/tmpl5ou22c4.swift:26:9:\
    \ error: invalid redeclaration of 'cab'\n    let cab = ac * c\n        ^\n/tmp/tmpl5ou22c4.swift:16:9:\
    \ note: 'cab' previously declared here\n    let cab = ac * c\n        ^\n/tmp/tmpl5ou22c4.swift:27:9:\
    \ error: invalid redeclaration of 'acb'\n    let acb = ac * b\n        ^\n/tmp/tmpl5ou22c4.swift:17:9:\
    \ note: 'acb' previously declared here\n    let acb = ac * b\n        ^\n/tmp/tmpl5ou22c4.swift:28:9:\
    \ error: invalid redeclaration of 'bca'\n    let bca = b * c\n        ^\n/"
  stdout: ''
  timestamp: 1659979094
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(a - b)\n    let bc = abs(b - c)\n    let cb = abs(c\
    \ - b)\n    if ab > bc && ab > cb {\n        return true\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp8aiqrd8r/tmp8aiqrd8r.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21cf584c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21cf27bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21cf27b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21cf27a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8aiqrd8r                        0x000055dfabcf72ab <unavailable> + 4779

    5    libc.so.6                          0x00002b21cf770460 __libc_start_main +
    245

    6    tmp8aiqrd8r                        0x000055dfabcf6f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if\
    \ a + b > c {\n        return false\n    }\n    if a + c > b {\n        return\
    \ false\n    }\n    if b + c > a {\n        return false\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp3op6xlp8/tmp3op6xlp8.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7142b83c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b714287ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b714287a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71428797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3op6xlp8                        0x00005576f36f12ab <unavailable> + 4779

    5    libc.so.6                          0x00002b7142d6f460 __libc_start_main +
    245

    6    tmp3op6xlp8                        0x00005576f36f0f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(b - a)\n    let ac = abs(c - a)\n    let bc = abs(b\
    \ - c)\n    if ab > ac && ab > bc {\n        return true\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp5_4_umbw/tmp5_4_umbw.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b458fb70c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b458f867b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b458f867988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b458f8667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5_4_umbw                        0x000055ed5b16d2ab <unavailable> + 4779

    5    libc.so.6                          0x00002b458fd5c460 __libc_start_main +
    245

    6    tmp5_4_umbw                        0x000055ed5b16cf59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979094
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a1 = abs(a)\n    let b1 = abs(b)\n    let c1 = abs(c)\n \
    \   if a1 == b1 && b1 == c1 {\n        return true\n    }\n    if a1 == c1 {\n\
    \        return false\n    }\n    if b1 == c1 {\n        return false\n    }\n\
    \    if a1 == b1 {\n        return false\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp2lgwa453/tmp2lgwa453.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21fde48c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21fdb3fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21fdb3f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21fdb3e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2lgwa453                        0x000055eee32322ab <unavailable> + 4779

    5    libc.so.6                          0x00002b21fe034460 __libc_start_main +
    245

    6    tmp2lgwa453                        0x000055eee3231f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979094
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    return ((a + b > c) && (a + c > b) && (b + c > a))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpwzjn8ju_/tmpwzjn8ju_.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af35566cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af355363b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af355363988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3553627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwzjn8ju_                        0x000055ff54143335 <unavailable> + 4917

    5    libc.so.6                          0x00002af355858460 __libc_start_main +
    245

    6    tmpwzjn8ju_                        0x000055ff54142e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a1 = (b * b) - (4 * a * c)\n    let a2 = (b * b) - (4 * a\
    \ * b)\n    let a3 = (b * b) - (4 * a * a)\n    let b1 = (-b * b) + (4 * a * c)\n\
    \    let b2 = (-b * b) + (4 * a * b)\n    let b3 = (-b * b) + (4 * a * a)\n  \
    \  let c1 = (-b * b) - (4 * a * c)\n    let c2 = (-b * b) - (4 * a * b)\n    let\
    \ c3 = (-b * b) - (4 * a * a)\n    let d1 = (-b * b) + (4 * a * c)\n    let d2\
    \ = (-b * b) + (4 * a * b)\n    let d3 = (-b * b) + (4 * a * a)\n    let e1 =\
    \ (-b * b) - (4 * a * c)\n    let e2 = (-b * b) - (4 * a * b)\n    let e3 = (-b\
    \ * b) - (4 * a * a)\n    let f1 = (-b * b) + (4 * a * c)\n    let f2 = (-b *\
    \ b) + (4 * a * b)\n    let f3 = (-b * b) + (4 * a * a)\n    let g1 = (-b * b)\
    \ - (4 * a * c)\n    let g2 = (-b * b) - (4 * a * b)\n    let g3 = (-b * b) -\
    \ (4 * a * a)\n    let h1 = (-b * b) + (4 * a * c)\n    let h2 = (-b * b) + (4\
    \ * a * b)\n    let h3 = (-b * b) + (4 * a * a)\n    let i1 = (-b * b) - (4 *\
    \ a * c)\n    let i2 = (-b * b) - (4 * a * b)\n    let i3 = (-b * b) - (4 * a\
    \ * a)\n    let j1 = (-b * b) + (4 * a * c)\n    let j2 = (-b * b) + (4 * a *\
    \ b)\n    let j3 = (-b * b) + (4 * a * a)\n    let k1 = (-b * b) - (4 * a * c)\n\
    \    let k2 = (-b * b) - (4 * a * b)\n    let k3 = (-b * b) - (4 * a * a)\n  \
    \  let l1 = (-b * b) + (4 * a * c)\n    let l2 = (-b * b) + (4 * a * b)\n    let\
    \ l3 = (-b * b) + (4 * a * a)\n    let m1 = (-b * b) - (4 * a * c)\n    let m2\
    \ = (-b * b) - (4 * a * b)\n    let m3 = (-b * b) - (4 * a * a)\n    let n1 =\
    \ (-b * b) + (4 * a * c)\n    let n2 = (-b * b) + (4 * a * b)\n    let n3 = (-b\
    \ * b) + (4 * a * a)\n    let o1 = (-b * b) - (4 * a * c)\n    let o2 = (-b *\
    \ b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(right_angle_triangle(a: 3, b:\
    \ 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmppuas4230.swift:52:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmppuas4230.swift:51:14: note: to match this opening '('\n    let o2 =\
    \ (-b * b\n             ^\n/tmp/tmppuas4230.swift:8:9: warning: initialization\
    \ of immutable value 'a1' was never used; consider replacing with assignment to\
    \ '_' or removing it\n    let a1 = (b * b) - (4 * a * c)\n    ~~~~^~\n    _\n\
    /tmp/tmppuas4230.swift:9:9: warning: initialization of immutable value 'a2' was\
    \ never used; consider replacing with assignment to '_' or removing it\n    let\
    \ a2 = (b * b) - (4 * a * b)\n    ~~~~^~\n    _\n/tmp/tmppuas4230.swift:10:9:\
    \ warning: initialization of immutable value 'a3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let a3 = (b * b) - (4 * a * a)\n\
    \    ~~~~^~\n    _\n/tmp/tmppuas4230.swift:11:9: warning: initialization of immutable\
    \ value 'b1' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    let b1 = (-b * b) + (4 * a * c)\n    ~~~~^~\n    _\n/tmp/tmppuas4230.swift:12:9:\
    \ warning: initialization of immutable value 'b2' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let b2 = (-b * b) + (4 * a * b)\n\
    \    ~~~~^~\n    _\n/tmp/tmppuas4230.swift:13:9: warning: initialization of immutable\
    \ value 'b3' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    let b3 = (-b * b) + (4 * a * a)\n    ~~~~^~\n    _\n/tmp/tmppuas4230.swift:14:9:\
    \ warning: initialization of immutable value 'c1' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let c1 = (-b * b) - (4 * a * c)\n\
    \    ~~~~^~\n    _\n/tmp/tmppuas4230.swift:15:9: warning: initialization of immutable\
    \ value 'c2' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    let c2 = (-b * b) - (4 * a * b)\n    ~~~~^~\n    _\n/tmp/tmppuas4230.swift:16:9:\
    \ warning: initialization of immutable value 'c3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let c3 = (-b * b) - (4 * a * a)\n\
    \    ~~~~^~\n    _\n/tmp/tmppuas4230.swift:17:9: warning: initialization of "
  stdout: ''
  timestamp: 1659979094
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if\
    \ a > b {\n        if b > c {\n            return true\n        } else {\n   \
    \         return false\n        }\n    } else {\n        if c > b {\n        \
    \    return true\n        } else {\n            return false\n        }\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpx7lprlxv/tmpx7lprlxv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19b1900c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19b15f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19b15f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19b15f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx7lprlxv                        0x000055c71c8b432b <unavailable> + 4907

    5    libc.so.6                          0x00002b19b1aec460 __libc_start_main +
    245

    6    tmpx7lprlxv                        0x000055c71c8b3f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(a - b)\n    let ac = abs(a - c)\n    let bc = abs(b\
    \ - c)\n    return (ab == ac) && (bc == ab)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp2ts024pl/tmp2ts024pl.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d6fbc6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d6f8bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d6f8bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d6f8bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2ts024pl                        0x0000565273a982ab <unavailable> + 4779

    5    libc.so.6                          0x00002b6d6fdb2460 __libc_start_main +
    245

    6    tmp2ts024pl                        0x0000565273a97f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979094
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    return (a * b * c) >= 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpykl_qrsd/tmpykl_qrsd.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6dd5685c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6dd537cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6dd537c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6dd537b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpykl_qrsd                        0x0000564a5975323b <unavailable> + 4667

    5    libc.so.6                          0x00002b6dd5871460 __libc_start_main +
    245

    6    tmpykl_qrsd                        0x0000564a59752e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(b - a)\n    let ac = abs(c - a)\n    let bc = abs(b\
    \ - c)\n    let cb = abs(c - b)\n    return (ab > ac) && (ab > bc) && (ab > cb)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpp6wvk3c4/tmpp6wvk3c4.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b617c3eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b617c0e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b617c0e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b617c0e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp6wvk3c4                        0x000056102b38f2ab <unavailable> + 4779

    5    libc.so.6                          0x00002b617c5da460 __libc_start_main +
    245

    6    tmpp6wvk3c4                        0x000056102b38ef59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979094
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    \n\
    \    if a > b {\n        if b > c {\n            return true\n        } else {\n\
    \            return false\n        }\n    } else {\n        if c > b {\n     \
    \       return true\n        } else {\n            return false\n        }\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpgt9rot67/tmpgt9rot67.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b731a1aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7319ea1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7319ea1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7319ea07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgt9rot67                        0x000055db261b032b <unavailable> + 4907

    5    libc.so.6                          0x00002b731a396460 __libc_start_main +
    245

    6    tmpgt9rot67                        0x000055db261aff59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n\
    \    let ab = abs(b - a)\n    let ac = abs(c - a)\n    let bc = abs(b - c)\n \
    \   if ab > ac {\n        return ab > bc\n    }\n    return bc > ab\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpb0ywccc3/tmpb0ywccc3.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3fe7bb0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3fe78a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3fe78a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3fe78a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb0ywccc3                        0x000056386d75c2ab <unavailable> + 4779

    5    libc.so.6                          0x00002b3fe7d9c460 __libc_start_main +
    245

    6    tmpb0ywccc3                        0x000056386d75bf59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979094
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(a - b)\n    let bc = abs(b - c)\n    let cb = abs(c\
    \ - b)\n    \n    return ab >= bc && ab >= cb\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp53f_6u_7/tmp53f_6u_7.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d45e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d42dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d42da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d42d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp53f_6u_7                        0x000055bf18c8732b <unavailable> + 4907

    5    libc.so.6                          0x00002b17d47cf460 __libc_start_main +
    245

    6    tmp53f_6u_7                        0x000055bf18c86f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    \n\
    \    if a > b + c {\n        return false\n    }\n    \n    if b > c + a {\n \
    \       return false\n    }\n    \n    if c > a + b {\n        return false\n\
    \    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp4gbh0tzj/tmp4gbh0tzj.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4aa9b2dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4aa9824b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4aa9824988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4aa98237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4gbh0tzj                        0x00005578b4d3332b <unavailable> + 4907

    5    libc.so.6                          0x00002b4aa9d19460 __libc_start_main +
    245

    6    tmp4gbh0tzj                        0x00005578b4d32f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979094
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(a - b)\n    let bc = abs(b - c)\n    let cb = abs(c\
    \ - b)\n    return (ab >= bc && ab >= cb)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmplofhalbm/tmplofhalbm.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc943cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc940c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc940c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc940c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplofhalbm                        0x000055dd4244532b <unavailable> + 4907

    5    libc.so.6                          0x00002afc945b7460 __libc_start_main +
    245

    6    tmplofhalbm                        0x000055dd42444f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979094
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if\
    \ a > b {\n        if b > c {\n            return false\n        } else {\n  \
    \          return true\n        }\n    } else {\n        if c > b {\n        \
    \    return false\n        } else {\n            return true\n        }\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpefqcmt3v/tmpefqcmt3v.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b45137adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b45134a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b45134a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b45134a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpefqcmt3v                        0x000055c3502332ab <unavailable> + 4779

    5    libc.so.6                          0x00002b4513999460 __libc_start_main +
    245

    6    tmpefqcmt3v                        0x000055c350232f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979094
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(b - a)\n    let ac = abs(c - a)\n    let bc = abs(b\
    \ - c)\n    let abc = ab + ac\n    let bca = bc + ab\n    let abca = abc + bc\n\
    \    let abbc = abba + bca\n    let abcab = abcab + abbc\n    let abcabc = abcabc\
    \ + abcab\n    let abcabcb = abcabcb + abcab\n    let abcabcbb = abcabcbb + abcab\n\
    \    let abcabcbbc = abcabcbbc + abcab\n    let abcabcbbcd = abcabcbbcd + abcab\n\
    \    let abcabcbbcde = abcabcbbcde + abcab\n    let abcabcbbcdef = abcabcbbcdef\
    \ + abcab\n    let abcabcbbcdefg = abcabcbbcdefg + abcab\n    let abcabcbbcdefgh\
    \ = abcabcbbcdefgh + abcab\n    let abcabcbbcdefghi = abcabcbbcdefghi + abcab\n\
    \    let abcabcbbcdefghij = abcabcbbcdefghij + abcab\n    let abcabcbbcdefghijk\
    \ = abcabcbbcdefghijk + abcab\n    let abcabcbbcdefghijkl = abcabcbbcdefghijkl\
    \ + abcab\n    let abcabcbbcdefghijkll = abcabcbbcdefghijkll + abcab\n    let\
    \ abcabcbbcdefghijkllm = abcabcbbcdefghijkllm + abcab\n    let abcabcbbcdefghijkllmm\
    \ = abcabcbbcdefghijkllmm + abcab\n    let abcabcbbcdefghijkllmmn = abcabcbbcdefghijkllmmn\
    \ + abcab\n    let abcabcbbcdefghijkllmmnm = abcabcbbcdefghijkllmmnm + abcab\n\
    \    let abcabcbbcdefghijkllmmnmm = abcabcbbcdefghijkllmmnmm + abcab\n    let\
    \ abcabcbbcdefghijkllmmnnm = abcabcbbcdefghijkllmmnnm + abcab\n    let abcabcbbcdefghijkllmmnnmm\
    \ = abcabc\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmppmnlq2rn.swift:14:16: error: cannot find 'abba' in scope\n    let\
    \ abbc = abba + bca\n               ^~~~\n/tmp/tmppmnlq2rn.swift:15:17: error:\
    \ use of local variable 'abcab' before its declaration\n    let abcab = abcab\
    \ + abbc\n                ^\n/tmp/tmppmnlq2rn.swift:15:9: note: 'abcab' declared\
    \ here\n    let abcab = abcab + abbc\n        ^\n/tmp/tmppmnlq2rn.swift:16:18:\
    \ error: use of local variable 'abcabc' before its declaration\n    let abcabc\
    \ = abcabc + abcab\n                 ^\n/tmp/tmppmnlq2rn.swift:16:9: note: 'abcabc'\
    \ declared here\n    let abcabc = abcabc + abcab\n        ^\n/tmp/tmppmnlq2rn.swift:17:19:\
    \ error: use of local variable 'abcabcb' before its declaration\n    let abcabcb\
    \ = abcabcb + abcab\n                  ^\n/tmp/tmppmnlq2rn.swift:17:9: note: 'abcabcb'\
    \ declared here\n    let abcabcb = abcabcb + abcab\n        ^\n/tmp/tmppmnlq2rn.swift:18:20:\
    \ error: use of local variable 'abcabcbb' before its declaration\n    let abcabcbb\
    \ = abcabcbb + abcab\n                   ^\n/tmp/tmppmnlq2rn.swift:18:9: note:\
    \ 'abcabcbb' declared here\n    let abcabcbb = abcabcbb + abcab\n        ^\n/tmp/tmppmnlq2rn.swift:19:21:\
    \ error: use of local variable 'abcabcbbc' before its declaration\n    let abcabcbbc\
    \ = abcabcbbc + abcab\n                    ^\n/tmp/tmppmnlq2rn.swift:19:9: note:\
    \ 'abcabcbbc' declared here\n    let abcabcbbc = abcabcbbc + abcab\n        ^\n\
    /tmp/tmppmnlq2rn.swift:20:22: error: use of local variable 'abcabcbbcd' before\
    \ its declaration\n    let abcabcbbcd = abcabcbbcd + abcab\n                 \
    \    ^\n/tmp/tmppmnlq2rn.swift:20:9: note: 'abcabcbbcd' declared here\n    let\
    \ abcabcbbcd = abcabcbbcd + abcab\n        ^\n/tmp/tmppmnlq2rn.swift:21:23: error:\
    \ use of local variable 'abcabcbbcde' before its declaration\n    let abcabcbbcde\
    \ = abcabcbbcde + abcab\n                      ^\n/tmp/tmppmnlq2rn.swift:21:9:\
    \ note: 'abcabcbbcde' declared here\n    let abcabcbbcde = abcabcbbcde + abcab\n\
    \        ^\n/tmp/tmppmnlq2rn.swift:22:24: error: use of local variable 'abcabcbbcdef'\
    \ before its declaration\n    let abcabcbbcdef = abcabcbbcdef + abcab\n      "
  stdout: ''
  timestamp: 1659979094
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(a - b)\n    let ac = abs(a - c)\n    let bc = abs(b\
    \ - c)\n    \n    if ab > ac && ab > bc {\n        return true\n    } else if\
    \ ac > ab && ac > bc {\n        return false\n    } else {\n        return false\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpqrz_2o3g/tmpqrz_2o3g.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b352c49dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b352c194b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b352c194988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b352c1937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqrz_2o3g                        0x0000564f9a0192ab <unavailable> + 4779

    5    libc.so.6                          0x00002b352c689460 __libc_start_main +
    245

    6    tmpqrz_2o3g                        0x0000564f9a018f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979094
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    if a > b {\n        return false\n    }\n    if a > c {\n   \
    \     return false\n    }\n    if b > c {\n        return false\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp0397qs6b/tmp0397qs6b.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac975465c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac97515cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac97515c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac97515b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0397qs6b                        0x000055befbdec23b <unavailable> + 4667

    5    libc.so.6                          0x00002ac975651460 __libc_start_main +
    245

    6    tmp0397qs6b                        0x000055befbdebe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979094
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if\
    \ a > b {\n        if b > c {\n            return false\n        } else {\n  \
    \          return true\n        }\n    } else {\n        if c > b {\n        \
    \    return false\n        } else {\n            return true\n        }\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpefqcmt3v/tmpefqcmt3v.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b45137adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b45134a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b45134a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b45134a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpefqcmt3v                        0x000055c3502332ab <unavailable> + 4779

    5    libc.so.6                          0x00002b4513999460 __libc_start_main +
    245

    6    tmpefqcmt3v                        0x000055c350232f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979094
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(b - a)\n    let ac = abs(c - a)\n    let bc = abs(b\
    \ - c)\n    \n    if ab == bc {\n        return ac > ab\n    }\n    \n    return\
    \ ab > bc\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpe80qeb1q/tmpe80qeb1q.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed0f024c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed0ed1bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed0ed1b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed0ed1a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe80qeb1q                        0x0000557e5e17232b <unavailable> + 4907

    5    libc.so.6                          0x00002aed0f210460 __libc_start_main +
    245

    6    tmpe80qeb1q                        0x0000557e5e171f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979094
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if\
    \ a + b > c {\n        return false\n    }\n    if a + c > b {\n        return\
    \ false\n    }\n    if b + c > a {\n        return false\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp3op6xlp8/tmp3op6xlp8.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7142b83c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b714287ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b714287a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71428797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3op6xlp8                        0x00005576f36f12ab <unavailable> + 4779

    5    libc.so.6                          0x00002b7142d6f460 __libc_start_main +
    245

    6    tmp3op6xlp8                        0x00005576f36f0f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(a - b)\n    let bc = abs(b - c)\n    let cb = abs(c\
    \ - b)\n    return (ab + bc == ab + cb)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp0m2f8agc/tmp0m2f8agc.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2afe38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad2afb2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad2afb2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad2afb2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0m2f8agc                        0x000056104041932b <unavailable> + 4907

    5    libc.so.6                          0x00002ad2b0024460 __libc_start_main +
    245

    6    tmp0m2f8agc                        0x0000561040418f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979094
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    let\
    \ a1 = a / b\n    let a2 = a / c\n    let b1 = b / c\n    let b2 = b / a\n   \
    \ let c1 = c / a\n    let c2 = c / b\n    return a1 + b1 + c1 == a2 + b2 + c2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpf1cblgwk/tmpf1cblgwk.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e14d91c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e14a88b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e14a88988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e14a877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf1cblgwk                        0x0000559cdfd3a33b <unavailable> + 4923

    5    libc.so.6                          0x00002b9e14f7d460 __libc_start_main +
    245

    6    tmpf1cblgwk                        0x0000559cdfd39fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979094
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(a - b)\n    let bc = abs(b - c)\n    let cb = abs(c\
    \ - b)\n    let abc = ab + bc + cb\n    return abc <= 1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpkiy_fusp/tmpkiy_fusp.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba00a181c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba009e78b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba009e78988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba009e777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkiy_fusp                        0x000055ae7f8662ab <unavailable> + 4779

    5    libc.so.6                          0x00002ba00a36d460 __libc_start_main +
    245

    6    tmpkiy_fusp                        0x000055ae7f865f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979094
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if\
    \ a > b + c {\n        return false\n    }\n    if b > a + c {\n        return\
    \ false\n    }\n    if c > a + b {\n        return false\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpq8f9fdv1/tmpq8f9fdv1.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d2df85c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d2dc7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d2dc7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d2dc7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq8f9fdv1                        0x000055ba0b16f32b <unavailable> + 4907

    5    libc.so.6                          0x00002b1d2e171460 __libc_start_main +
    245

    6    tmpq8f9fdv1                        0x000055ba0b16ef59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979094
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    \n\
    \    if a > b {\n        if b > c {\n            return true\n        } else {\n\
    \            return false\n        }\n    } else {\n        if c > b {\n     \
    \       return true\n        } else {\n            return false\n        }\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpgt9rot67/tmpgt9rot67.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b731a1aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7319ea1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7319ea1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7319ea07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgt9rot67                        0x000055db261b032b <unavailable> + 4907

    5    libc.so.6                          0x00002b731a396460 __libc_start_main +
    245

    6    tmpgt9rot67                        0x000055db261aff59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(a - b)\n    let ac = abs(a - c)\n    let bc = abs(b\
    \ - c)\n    return (ab + ac + bc) == 180 ? true : false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpdn9_eneg/tmpdn9_eneg.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae3bddc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae3bdab9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae3bdab9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae3bdab87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdn9_eneg                        0x000055bec80392ab <unavailable> + 4779

    5    libc.so.6                          0x00002ae3bdfae460 __libc_start_main +
    245

    6    tmpdn9_eneg                        0x000055bec8038f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979094
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    return ((a + b > c) && (a + c > b) && (b + c > a))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpwzjn8ju_/tmpwzjn8ju_.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af35566cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af355363b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af355363988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3553627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwzjn8ju_                        0x000055ff54143335 <unavailable> + 4917

    5    libc.so.6                          0x00002af355858460 __libc_start_main +
    245

    6    tmpwzjn8ju_                        0x000055ff54142e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(a - b)\n    let ac = abs(a - c)\n    let bc = abs(b\
    \ - c)\n    \n    if ab == ac && ab == bc {\n        return true\n    }\n    \n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpu8jtj80w/tmpu8jtj80w.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77b37f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77b34ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77b34ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77b34eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu8jtj80w                        0x00005593043ae2ab <unavailable> + 4779

    5    libc.so.6                          0x00002b77b39e1460 __libc_start_main +
    245

    6    tmpu8jtj80w                        0x00005593043adf59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979094
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(a - b)\n    let bc = abs(b - c)\n    let cb = abs(c\
    \ - b)\n    return (ab + bc + cb) == (a + b + c)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpr03h_467/tmpr03h_467.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ad20f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ad1debb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ad1deb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ad1dea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr03h_467                        0x0000562349e822ab <unavailable> + 4779

    5    libc.so.6                          0x00002b2ad22e0460 __libc_start_main +
    245

    6    tmpr03h_467                        0x0000562349e81f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979094
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(b - a)\n    let ac = abs(c - a)\n    let bc = abs(b\
    \ - c)\n    let abc = ab + ac\n    let bcd = bc + ab\n    let acd = ac + ab\n\
    \    let abcd = abc + bcd\n    return abc <= bcd && abc <= acd && abc <= abcd\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp3l1ewv4u/tmp3l1ewv4u.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07e512dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b07e4e24b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b07e4e24988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b07e4e237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3l1ewv4u                        0x0000562578fa92ab <unavailable> + 4779

    5    libc.so.6                          0x00002b07e5319460 __libc_start_main +
    245

    6    tmp3l1ewv4u                        0x0000562578fa8f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979094
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(a - b)\n    let bc = abs(b - c)\n    let cd = abs(c\
    \ - d)\n    let ac = abs(a - c)\n    let bd = abs(b - d)\n    let ad = abs(a -\
    \ d)\n    return (ab > bc && ab > cd && ab > ac && ab > bd && ab > ad)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmplwz58st_.swift:10:22: error: cannot find 'd' in scope\n    let\
    \ cd = abs(c - d)\n                     ^\n/tmp/tmplwz58st_.swift:12:22: error:\
    \ cannot find 'd' in scope\n    let bd = abs(b - d)\n                     ^\n\
    /tmp/tmplwz58st_.swift:13:22: error: cannot find 'd' in scope\n    let ad = abs(a\
    \ - d)\n                     ^\n"
  stdout: ''
  timestamp: 1659979094
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if\
    \ a + b > c {\n        return false\n    }\n    if a + c > b {\n        return\
    \ false\n    }\n    if b + c > a {\n        return false\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp3op6xlp8/tmp3op6xlp8.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7142b83c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b714287ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b714287a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71428797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3op6xlp8                        0x00005576f36f12ab <unavailable> + 4779

    5    libc.so.6                          0x00002b7142d6f460 __libc_start_main +
    245

    6    tmp3op6xlp8                        0x00005576f36f0f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if\
    \ a + b > c {\n        return false\n    }\n    if a + c > b {\n        return\
    \ false\n    }\n    if b + c > a {\n        return false\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp3op6xlp8/tmp3op6xlp8.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7142b83c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b714287ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b714287a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71428797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3op6xlp8                        0x00005576f36f12ab <unavailable> + 4779

    5    libc.so.6                          0x00002b7142d6f460 __libc_start_main +
    245

    6    tmp3op6xlp8                        0x00005576f36f0f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(b - a)\n    let bc = abs(c - b)\n    let ac = abs(c\
    \ - a)\n    return (ab > bc && ab > ac)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpina0y90l/tmpina0y90l.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd6991fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd69616b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd69616988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd696157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpina0y90l                        0x00005560b199d2ab <unavailable> + 4779

    5    libc.so.6                          0x00002acd69b0b460 __libc_start_main +
    245

    6    tmpina0y90l                        0x00005560b199cf59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979094
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    \n    let a1 = abs(a)\n    let b1 = abs(b)\n    let c1 = abs(c)\n\
    \    \n    if a1 == b1 && b1 == c1 {\n        return true\n    }\n    \n    if\
    \ a1 == c1 {\n        return true\n    }\n    \n    if b1 == c1 {\n        return\
    \ true\n    }\n    \n    if a1 == b1 {\n        return false\n    }\n    \n  \
    \  if a1 == c1 {\n        return false\n    }\n    \n    if b1 == c1 {\n     \
    \   return false\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp77segzhk/tmp77segzhk.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b08ae004c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b08adcfbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b08adcfb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b08adcfa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp77segzhk                        0x000055bb3c7b12ab <unavailable> + 4779

    5    libc.so.6                          0x00002b08ae1f0460 __libc_start_main +
    245

    6    tmp77segzhk                        0x000055bb3c7b0f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979095
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(b - a)\n    let ac = abs(c - a)\n    let bc = abs(b\
    \ - c)\n    let abc = ab + ac\n    let bca = bc + ab\n    let cba = cb + ab\n\
    \    return abc <= bca && bca <= cba\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4odf646c.swift:13:15: error: cannot find 'cb' in scope\n    let\
    \ cba = cb + ab\n              ^~\n"
  stdout: ''
  timestamp: 1659979094
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(b - a)\n    let ac = abs(c - a)\n    let bc = abs(b\
    \ - c)\n    let abc = ab + ac + bc\n    if abc > 0 {\n        return abc > 1\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmpdk1c367w/tmpdk1c367w.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b2b834c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b2b52bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b2b52b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b2b52a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdk1c367w                        0x000055f0f14ac32b <unavailable> + 4907

    5    libc.so.6                          0x00002b4b2ba20460 __libc_start_main +
    245

    6    tmpdk1c367w                        0x000055f0f14abf59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979095
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a1 = (a + b + c) / 2\n    let a2 = (b + c + a) / 2\n    let\
    \ a3 = (a2 + b + a) / 2\n    let b1 = (a + c + b) / 2\n    let b2 = (c + a + b)\
    \ / 2\n    let b3 = (b2 + a + c) / 2\n    let c1 = (a + b + c) / 2\n    let c2\
    \ = (b + c + a) / 2\n    let c3 = (c2 + b + a) / 2\n    let d1 = (a + c + b) /\
    \ 2\n    let d2 = (c + a + b) / 2\n    let d3 = (d2 + a + c) / 2\n    let e1 =\
    \ (a + b + c) / 2\n    let e2 = (b + c + a) / 2\n    let e3 = (e2 + b + a) / 2\n\
    \    let f1 = (a + c + b) / 2\n    let f2 = (c + a + b) / 2\n    let f3 = (f2\
    \ + a + c) / 2\n    let g1 = (a + b + c) / 2\n    let g2 = (b + c + a) / 2\n \
    \   let g3 = (g2 + b + a) / 2\n    let h1 = (a + c + b) / 2\n    let h2 = (c +\
    \ a + b) / 2\n    let h3 = (h2 + a + c) / 2\n    let i1 = (a + b + c) / 2\n  \
    \  let i2 = (b + c + a) / 2\n    let i3 = (i2 + b + a) / 2\n    let j1 = (a +\
    \ c + b) / 2\n    let j2 = (c + a + b) / 2\n    let j3 = (j2 + a + c) / 2\n  \
    \  let k1 = (a + b + c) / 2\n    let k2 = (b + c + a) / 2\n    let k3 = (k2 +\
    \ b + a) / 2\n    let l1 = (a + c + b) / 2\n    let l2 = (c + a + b) / 2\n   \
    \ let l3 = (l2 + a + c) / 2\n    let m1 = (a + b + c) / 2\n    let m2 = (b + c\
    \ + a) / 2\n    let m3 = (m2 + b + a) / 2\n    let n1 = (a + c + b) / 2\n    let\
    \ n2 = (c + a + b) / 2\n    let n3 = (n2 + a + c) / 2\n    let o1 = (a + b + c)\
    \ / 2\n    let o2 = (b + c + a) / 2\n    let o3 = (o2 + b + a) / 2\n    let p1\
    \ = (a + c + b) / 2\n    let p2 = (c + a + b) / 2\n    let p3 = (p2 + a + c) /\
    \ 2\n    let q1 = (a + b + c) / 2\n    let q2 = (b + c + a) / 2\n    let q3 =\
    \ (q2 + b + a) / 2\n    let r1 = (a + c + b) / 2\n    let r2 = (c + a + b) / 2\n\
    \    let r3 = (r2 + a + c) / 2\n    let s1 = (a + b + c) / 2\n    let s2 = (b\
    \ + c + a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp7oelm4du.swift:64:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp7oelm4du.swift:63:14: note: to match this opening '('\n    let s2 =\
    \ (b + c + a\n             ^\n/tmp/tmp7oelm4du.swift:8:9: warning: initialization\
    \ of immutable value 'a1' was never used; consider replacing with assignment to\
    \ '_' or removing it\n    let a1 = (a + b + c) / 2\n    ~~~~^~\n    _\n/tmp/tmp7oelm4du.swift:10:9:\
    \ warning: initialization of immutable value 'a3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let a3 = (a2 + b + a) / 2\n    ~~~~^~\n\
    \    _\n/tmp/tmp7oelm4du.swift:11:9: warning: initialization of immutable value\
    \ 'b1' was never used; consider replacing with assignment to '_' or removing it\n\
    \    let b1 = (a + c + b) / 2\n    ~~~~^~\n    _\n/tmp/tmp7oelm4du.swift:13:9:\
    \ warning: initialization of immutable value 'b3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let b3 = (b2 + a + c) / 2\n    ~~~~^~\n\
    \    _\n/tmp/tmp7oelm4du.swift:14:9: warning: initialization of immutable value\
    \ 'c1' was never used; consider replacing with assignment to '_' or removing it\n\
    \    let c1 = (a + b + c) / 2\n    ~~~~^~\n    _\n/tmp/tmp7oelm4du.swift:16:9:\
    \ warning: initialization of immutable value 'c3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let c3 = (c2 + b + a) / 2\n    ~~~~^~\n\
    \    _\n/tmp/tmp7oelm4du.swift:17:9: warning: initialization of immutable value\
    \ 'd1' was never used; consider replacing with assignment to '_' or removing it\n\
    \    let d1 = (a + c + b) / 2\n    ~~~~^~\n    _\n/tmp/tmp7oelm4du.swift:19:9:\
    \ warning: initialization of immutable value 'd3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let d3 = (d2 + a + c) / 2\n    ~~~~^~\n\
    \    _\n/tmp/tmp7oelm4du.swift:20:9: warning: initialization of immutable value\
    \ 'e1' was never used; consider replacing with assignment to '_' or removing it\n\
    \    let e1 = (a + b + c) / 2\n    ~~~~^~\n    _\n/tmp/tmp7oelm4du.swift:22:9:\
    \ warning: initialization of immutable value 'e3' was never used; consider replac"
  stdout: ''
  timestamp: 1659979094
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if\
    \ a > b {\n        if b > c {\n            return true\n        } else {\n   \
    \         return false\n        }\n    } else {\n        if c > b {\n        \
    \    return true\n        } else {\n            return false\n        }\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpx7lprlxv/tmpx7lprlxv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19b1900c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19b15f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19b15f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19b15f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx7lprlxv                        0x000055c71c8b432b <unavailable> + 4907

    5    libc.so.6                          0x00002b19b1aec460 __libc_start_main +
    245

    6    tmpx7lprlxv                        0x000055c71c8b3f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n\
    \    let delta = b * b - 4 * a * c\n    if delta < 0 {\n        return false\n\
    \    }\n    let theta = (sqrt(delta) / 2.0).truncatingRemainder(dividingBy: Double.pi)\n\
    \    if theta < 0.0 {\n        return false\n    }\n    let x = -(b + theta) /\
    \ (2.0 * a)\n    let y = -(b - theta) / (2.0 * a)\n    return (x * x + y * y)\
    \ <= 1.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp1h8xazlv.swift:15:18: error: cannot find 'sqrt' in scope\n    let\
    \ theta = (sqrt(delta) / 2.0).truncatingRemainder(dividingBy: Double.pi)\n   \
    \              ^~~~\n/tmp/tmp1h8xazlv.swift:19:29: error: cannot convert value\
    \ of type 'Double' to expected argument type 'Int'\n    let x = -(b + theta) /\
    \ (2.0 * a)\n                            ^\n                            Int( )\n\
    /tmp/tmp1h8xazlv.swift:20:29: error: cannot convert value of type 'Double' to\
    \ expected argument type 'Int'\n    let y = -(b - theta) / (2.0 * a)\n       \
    \                     ^\n                            Int( )\n/tmp/tmp1h8xazlv.swift:21:28:\
    \ error: binary operator '<=' cannot be applied to operands of type 'Duration'\
    \ and 'Double'\n    return (x * x + y * y) <= 1.0\n           ~~~~~~~~~~~~~~~\
    \ ^  ~~~\n"
  stdout: ''
  timestamp: 1659979103
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a1 = abs(a)\n    let b1 = abs(b)\n    let c1 = abs(c)\n \
    \   if a1 == b1 && b1 == c1 {\n        return true\n    }\n    else if a1 == c1\
    \ {\n        return true\n    }\n    else if b1 == c1 {\n        return true\n\
    \    }\n    else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpz9ohuwhf/tmpz9ohuwhf.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf94b9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf94891b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf94891988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf948907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9ohuwhf                        0x000056490bef12ab <unavailable> + 4779

    5    libc.so.6                          0x00002abf94d86460 __libc_start_main +
    245

    6    tmpz9ohuwhf                        0x000056490bef0f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979095
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    return ((a + b > c) && (a + c > b) && (b + c > a))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpwzjn8ju_/tmpwzjn8ju_.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af35566cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af355363b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af355363988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3553627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwzjn8ju_                        0x000055ff54143335 <unavailable> + 4917

    5    libc.so.6                          0x00002af355858460 __libc_start_main +
    245

    6    tmpwzjn8ju_                        0x000055ff54142e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    return ((b - a) * (c - b) <= 0)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpk6bzoldt/tmpk6bzoldt.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8451088c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8450d7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8450d7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8450d7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk6bzoldt                        0x000055602caee1bb <unavailable> + 4539

    5    libc.so.6                          0x00002b8451274460 __libc_start_main +
    245

    6    tmpk6bzoldt                        0x000055602caede69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979094
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n\
    \    let ab = abs(b - a)\n    let ac = abs(c - a)\n    let bc = abs(b - c)\n \
    \   let abc = ab + ac\n    if abc > bc {\n        return false\n    }\n    if\
    \ abc < bc {\n        return true\n    }\n    let bca = bc + ac\n    if ab < bca\
    \ && bc < abc {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpj3823lqc/tmpj3823lqc.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f39a26c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f3971db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f3971d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f3971c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj3823lqc                        0x00005590046272ab <unavailable> + 4779

    5    libc.so.6                          0x00002b5f39c12460 __libc_start_main +
    245

    6    tmpj3823lqc                        0x0000559004626f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979095
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if\
    \ a > b {\n        if b > c {\n            return true\n        } else {\n   \
    \         return false\n        }\n    } else {\n        if c > b {\n        \
    \    return true\n        } else {\n            return false\n        }\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpx7lprlxv/tmpx7lprlxv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19b1900c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19b15f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19b15f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19b15f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx7lprlxv                        0x000055c71c8b432b <unavailable> + 4907

    5    libc.so.6                          0x00002b19b1aec460 __libc_start_main +
    245

    6    tmpx7lprlxv                        0x000055c71c8b3f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if\
    \ a > b + c {\n        return false\n    }\n    if b > c + a {\n        return\
    \ false\n    }\n    if c > a + b {\n        return false\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmp0el310sm/tmp0el310sm.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c78acdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c787c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c787c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c787c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0el310sm                        0x0000561864f1032b <unavailable> + 4907

    5    libc.so.6                          0x00002b1c78cb9460 __libc_start_main +
    245

    6    tmp0el310sm                        0x0000561864f0ff59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a1 = (a + b + c) / 2\n    let b1 = (a + b) / 2\n    let c1\
    \ = (a + c) / 2\n    let a2 = (b + c + a) / 2\n    let b2 = (b + c) / 2\n    let\
    \ c2 = (b + a) / 2\n    let a3 = (a2 + b2 + c2) / 2\n    let b3 = (a2 + b2 + c2)\
    \ / 2\n    let c3 = (a2 + c2 + a) / 2\n    let a4 = (b2 + c2 + a) / 2\n    let\
    \ b4 = (b2 + c2 + a) / 2\n    let c4 = (b2 + a2 + c) / 2\n    let a5 = (a3 + b3\
    \ + c3) / 2\n    let b5 = (a3 + b3 + c3) / 2\n    let c5 = (a3 + c3 + a3) / 2\n\
    \    let a6 = (a4 + b5 + c6) / 2\n    let b6 = (a4 + b5 + c6) / 2\n    let c6\
    \ = (a4 + b6 + a4) / 2\n    let a7 = (a5 + b5 + c6) / 2\n    let b7 = (a5 + b5\
    \ + c6) / 2\n    let c7 = (a5 + b6 + a5) / 2\n    let a8 = (a6 + b6 + a7) / 2\n\
    \    let b8 = (a6 + b6 + a7) / 2\n    let c8 = (a6 + b7 + a6) / 2\n    let a9\
    \ = (a7 + b7 + c8) / 2\n    let b9 = (a7 + b7 + c8) / 2\n    let c9 = (a7 + b8\
    \ + a7) / 2\n    let a10 = (a9 + b9 + c9) / 2\n    let b10 = (a9 + b9 + c9) /\
    \ 2\n    let c10 = (a9 + c1 + a9) / 2\n    let a11 = (a10 + b10 + c10) / 2\n \
    \   let b11 = (a10 + b10 + c10) / 2\n    let c11 = (a10 + c10 + a10) / 2\n   \
    \ let a12 = (a11 + b11 + c11) / 2\n    let b12 = (a11 + b11 + c11) / 2\n    let\
    \ c12 = (a11 + c11 + a11) / 2\n    let a13 = (a12 + b12 + c12) / 2\n    let b13\
    \ = (a12 + b12 + c12) / 2\n    let c13 = (a12 + c12 + a12) / 2\n    let a14 =\
    \ (a13 + b13 + c13) / 2\n    let b14 = (a13 + b13 + c13) / 2\n    let c14 = (a13\
    \ + c13 + a13) / 2\n    let a15 = (a14 + b14 + c14) / 2\n    let b15 = (a14 +\
    \ b14 + c14) / 2\n    let c15 = (a14 + c14 + a14) / 2\n    let a16 = (a15 + b15\
    \ + c15) / 2\n    let b16 = (a15 + b15 + c15) / 2\n    let c16 = (a15\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpc6ntcys4.swift:56:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpc6ntcys4.swift:55:15: note: to match this opening '('\n    let c16\
    \ = (a15\n              ^\n/tmp/tmpc6ntcys4.swift:23:25: error: use of local variable\
    \ 'c6' before its declaration\n    let a6 = (a4 + b5 + c6) / 2\n             \
    \           ^\n/tmp/tmpc6ntcys4.swift:25:9: note: 'c6' declared here\n    let\
    \ c6 = (a4 + b6 + a4) / 2\n        ^\n/tmp/tmpc6ntcys4.swift:24:25: error: use\
    \ of local variable 'c6' before its declaration\n    let b6 = (a4 + b5 + c6) /\
    \ 2\n                        ^\n/tmp/tmpc6ntcys4.swift:25:9: note: 'c6' declared\
    \ here\n    let c6 = (a4 + b6 + a4) / 2\n        ^\n"
  stdout: ''
  timestamp: 1659979095
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    return ((a + b > c) && (a + c > b) && (b + c > a))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpwzjn8ju_/tmpwzjn8ju_.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af35566cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af355363b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af355363988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3553627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwzjn8ju_                        0x000055ff54143335 <unavailable> + 4917

    5    libc.so.6                          0x00002af355858460 __libc_start_main +
    245

    6    tmpwzjn8ju_                        0x000055ff54142e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a1 = (b - a) / 2.0\n    let b1 = (c - b) / 2.0\n    let c1\
    \ = (a - c) / 2.0\n    return a1 * b1 + b1 * c1 == c1 * c1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp20y4i7ex.swift:8:22: error: binary operator '/' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n    let a1 = (b - a) / 2.0\n       \
    \      ~~~~~~~ ^ ~~~\n/tmp/tmp20y4i7ex.swift:8:22: note: overloads for '/' exist\
    \ with these partially matching parameter lists: (Double, Double), (Duration,\
    \ Double), (Int, Int)\n    let a1 = (b - a) / 2.0\n                     ^\n/tmp/tmp20y4i7ex.swift:9:22:\
    \ error: binary operator '/' cannot be applied to operands of type 'Int' and 'Double'\n\
    \    let b1 = (c - b) / 2.0\n             ~~~~~~~ ^ ~~~\n/tmp/tmp20y4i7ex.swift:9:22:\
    \ note: overloads for '/' exist with these partially matching parameter lists:\
    \ (Double, Double), (Duration, Double), (Int, Int)\n    let b1 = (c - b) / 2.0\n\
    \                     ^\n/tmp/tmp20y4i7ex.swift:10:22: error: binary operator\
    \ '/' cannot be applied to operands of type 'Int' and 'Double'\n    let c1 = (a\
    \ - c) / 2.0\n             ~~~~~~~ ^ ~~~\n/tmp/tmp20y4i7ex.swift:10:22: note:\
    \ overloads for '/' exist with these partially matching parameter lists: (Double,\
    \ Double), (Duration, Double), (Int, Int)\n    let c1 = (a - c) / 2.0\n      \
    \               ^\n"
  stdout: ''
  timestamp: 1659979112
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let ab = abs(a - b)\n    let ac = abs(a - c)\n    let bc = abs(b\
    \ - c)\n    return (ab == ac && ab == bc) || (ab != ac && bc != ac)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpccbkdmx_/tmpccbkdmx_.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b027822bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0277f22b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0277f22988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0277f217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpccbkdmx_                        0x0000555815b0532b <unavailable> + 4907

    5    libc.so.6                          0x00002b0278417460 __libc_start_main +
    245

    6    tmpccbkdmx_                        0x0000555815b04f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979095
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if\
    \ a > b {\n        if b > c {\n            return true\n        } else {\n   \
    \         return false\n        }\n    } else {\n        if c > b {\n        \
    \    return true\n        } else {\n            return false\n        }\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpx7lprlxv/tmpx7lprlxv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19b1900c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19b15f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19b15f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19b15f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx7lprlxv                        0x000055c71c8b432b <unavailable> + 4907

    5    libc.so.6                          0x00002b19b1aec460 __libc_start_main +
    245

    6    tmpx7lprlxv                        0x000055c71c8b3f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\nfunc right_angle_triangle(a: Int, b: Int, c: Int)\
    \ -> Bool {\n    let a = abs(a)\n    let b = abs(b)\n    let c = abs(c)\n    if\
    \ a > b {\n        if b > c {\n            return true\n        } else {\n   \
    \         return false\n        }\n    } else {\n        if c > b {\n        \
    \    return true\n        } else {\n            return false\n        }\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpx7lprlxv/tmpx7lprlxv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19b1900c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19b15f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19b15f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19b15f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx7lprlxv                        0x000055c71c8b432b <unavailable> + 4907

    5    libc.so.6                          0x00002b19b1aec460 __libc_start_main +
    245

    6    tmpx7lprlxv                        0x000055c71c8b3f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659979093
