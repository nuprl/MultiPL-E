language: swift
name: HumanEval_108_count_nums
results:
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for num in arr {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpshdhq6ya/tmpshdhq6ya.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d59c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d56bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d56bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d56bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshdhq6ya                        0x000055ef89430510 <unavailable> + 5392

    5    libc.so.6                          0x00002b22d5bb1460 __libc_start_main +
    245

    6    tmpshdhq6ya                        0x000055ef894300d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for num in arr {\n        if num < 0 {\n            sum\
    \ += num\n        } else {\n            sum += num % 10\n        }\n    }\n  \
    \  return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmphsrd9tlg/tmphsrd9tlg.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c6f856c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c6f54db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c6f54d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c6f54c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphsrd9tlg                        0x00005635f64f25a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b1c6fa42460 __libc_start_main +
    245

    6    tmphsrd9tlg                        0x00005635f64f2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for n in arr {\n        sum += n\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpk2hgbajh/tmpk2hgbajh.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae04d0adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae04cda4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae04cda4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae04cda37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk2hgbajh                        0x0000556108b8e510 <unavailable> + 5392

    5    libc.so.6                          0x00002ae04d299460 __libc_start_main +
    245

    6    tmpk2hgbajh                        0x0000556108b8e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for x in arr {\n        sum += x\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpo9ngzwht/tmpo9ngzwht.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a7c31ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a7c015b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a7c015988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a7c0147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9ngzwht                        0x00005580051c4510 <unavailable> + 5392

    5    libc.so.6                          0x00002b6a7c50a460 __libc_start_main +
    245

    6    tmpo9ngzwht                        0x00005580051c40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for x in arr {\n        sum += x\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpo9ngzwht/tmpo9ngzwht.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a7c31ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a7c015b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a7c015988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a7c0147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9ngzwht                        0x00005580051c4510 <unavailable> + 5392

    5    libc.so.6                          0x00002b6a7c50a460 __libc_start_main +
    245

    6    tmpo9ngzwht                        0x00005580051c40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for n in arr {\n        sum += n\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpk2hgbajh/tmpk2hgbajh.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae04d0adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae04cda4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae04cda4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae04cda37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk2hgbajh                        0x0000556108b8e510 <unavailable> + 5392

    5    libc.so.6                          0x00002ae04d299460 __libc_start_main +
    245

    6    tmpk2hgbajh                        0x0000556108b8e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for n in arr {\n        sum += n\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpk2hgbajh/tmpk2hgbajh.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae04d0adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae04cda4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae04cda4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae04cda37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk2hgbajh                        0x0000556108b8e510 <unavailable> + 5392

    5    libc.so.6                          0x00002ae04d299460 __libc_start_main +
    245

    6    tmpk2hgbajh                        0x0000556108b8e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for num in arr {\n        if num < 0 {\n            num\
    \ = -num\n        }\n        if num > 9 {\n            num = num - 10\n      \
    \  }\n        count += num\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp2w6sevx3.swift:10:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n/tmp/tmp2w6sevx3.swift:13:13:\
    \ error: cannot assign to value: 'num' is a 'let' constant\n            num =\
    \ num - 10\n            ^~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for x in arr {\n        sum += x\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpo9ngzwht/tmpo9ngzwht.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a7c31ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a7c015b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a7c015988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a7c0147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9ngzwht                        0x00005580051c4510 <unavailable> + 5392

    5    libc.so.6                          0x00002b6a7c50a460 __libc_start_main +
    245

    6    tmpo9ngzwht                        0x00005580051c40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for x in arr {\n        if x > 0 {\n            count\
    \ += x / 10\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp3yedslqw/tmp3yedslqw.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab7a2f24c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab7a2c1bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab7a2c1b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7a2c1a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3yedslqw                        0x000055991739a685 <unavailable> + 5765

    5    libc.so.6                          0x00002ab7a3110460 __libc_start_main +
    245

    6    tmp3yedslqw                        0x000055991739a169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for num in arr {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpshdhq6ya/tmpshdhq6ya.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d59c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d56bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d56bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d56bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshdhq6ya                        0x000055ef89430510 <unavailable> + 5392

    5    libc.so.6                          0x00002b22d5bb1460 __libc_start_main +
    245

    6    tmpshdhq6ya                        0x000055ef894300d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for n in arr {\n        sum += n\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpk2hgbajh/tmpk2hgbajh.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae04d0adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae04cda4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae04cda4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae04cda37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk2hgbajh                        0x0000556108b8e510 <unavailable> + 5392

    5    libc.so.6                          0x00002ae04d299460 __libc_start_main +
    245

    6    tmpk2hgbajh                        0x0000556108b8e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for num in arr {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpshdhq6ya/tmpshdhq6ya.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d59c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d56bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d56bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d56bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshdhq6ya                        0x000055ef89430510 <unavailable> + 5392

    5    libc.so.6                          0x00002b22d5bb1460 __libc_start_main +
    245

    6    tmpshdhq6ya                        0x000055ef894300d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for n in arr {\n        if n > 0 {\n            sum += n\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp0_7oqqn6/tmp0_7oqqn6.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4079ba4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b407989bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b407989b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b407989a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0_7oqqn6                        0x000055eb8a4295f5 <unavailable> + 5621

    5    libc.so.6                          0x00002b4079d90460 __libc_start_main +
    245

    6    tmp0_7oqqn6                        0x000055eb8a4290d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for x in arr {\n        sum += x\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpo9ngzwht/tmpo9ngzwht.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a7c31ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a7c015b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a7c015988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a7c0147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9ngzwht                        0x00005580051c4510 <unavailable> + 5392

    5    libc.so.6                          0x00002b6a7c50a460 __libc_start_main +
    245

    6    tmpo9ngzwht                        0x00005580051c40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for num in arr {\n        if num > 0 {\n            count\
    \ += num / 10\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpbtpf4jvs/tmpbtpf4jvs.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9a5a0a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9a59d99b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9a59d99988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9a59d987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbtpf4jvs                        0x0000563333980685 <unavailable> + 5765

    5    libc.so.6                          0x00002b9a5a28e460 __libc_start_main +
    245

    6    tmpbtpf4jvs                        0x0000563333980169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for num in arr {\n        if num < 0 {\n            num\
    \ = -num\n        }\n        count += num % 10\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpxp8oh0bt.swift:10:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for x in arr {\n        sum += x\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpo9ngzwht/tmpo9ngzwht.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a7c31ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a7c015b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a7c015988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a7c0147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9ngzwht                        0x00005580051c4510 <unavailable> + 5392

    5    libc.so.6                          0x00002b6a7c50a460 __libc_start_main +
    245

    6    tmpo9ngzwht                        0x00005580051c40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for num in arr {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpshdhq6ya/tmpshdhq6ya.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d59c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d56bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d56bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d56bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshdhq6ya                        0x000055ef89430510 <unavailable> + 5392

    5    libc.so.6                          0x00002b22d5bb1460 __libc_start_main +
    245

    6    tmpshdhq6ya                        0x000055ef894300d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for num in arr {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpshdhq6ya/tmpshdhq6ya.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d59c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d56bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d56bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d56bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshdhq6ya                        0x000055ef89430510 <unavailable> + 5392

    5    libc.so.6                          0x00002b22d5bb1460 __libc_start_main +
    245

    6    tmpshdhq6ya                        0x000055ef894300d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for x in arr {\n        sum += x\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpo9ngzwht/tmpo9ngzwht.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a7c31ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a7c015b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a7c015988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a7c0147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9ngzwht                        0x00005580051c4510 <unavailable> + 5392

    5    libc.so.6                          0x00002b6a7c50a460 __libc_start_main +
    245

    6    tmpo9ngzwht                        0x00005580051c40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for num in arr {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpshdhq6ya/tmpshdhq6ya.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d59c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d56bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d56bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d56bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshdhq6ya                        0x000055ef89430510 <unavailable> + 5392

    5    libc.so.6                          0x00002b22d5bb1460 __libc_start_main +
    245

    6    tmpshdhq6ya                        0x000055ef894300d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for n in arr {\n        sum += n\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpk2hgbajh/tmpk2hgbajh.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae04d0adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae04cda4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae04cda4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae04cda37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk2hgbajh                        0x0000556108b8e510 <unavailable> + 5392

    5    libc.so.6                          0x00002ae04d299460 __libc_start_main +
    245

    6    tmpk2hgbajh                        0x0000556108b8e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for x in arr {\n        if x > 0 {\n            count\
    \ += x / 10\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp3yedslqw/tmp3yedslqw.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab7a2f24c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab7a2c1bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab7a2c1b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7a2c1a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3yedslqw                        0x000055991739a685 <unavailable> + 5765

    5    libc.so.6                          0x00002ab7a3110460 __libc_start_main +
    245

    6    tmp3yedslqw                        0x000055991739a169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for num in arr {\n        if num < 0 {\n            num\
    \ = -num\n        }\n        count += num / 10\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpprn1v1i5.swift:10:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for x in arr {\n        if x >= 0 {\n            count\
    \ += x\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmprh78900m/tmprh78900m.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b036c4c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b036c1bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b036c1bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b036c1ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprh78900m                        0x0000559839b465f5 <unavailable> + 5621

    5    libc.so.6                          0x00002b036c6b0460 __libc_start_main +
    245

    6    tmprh78900m                        0x0000559839b460d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for num in arr {\n        if num < 0 {\n            sum\
    \ += (-num).signDigit()\n        } else {\n            sum += num.signDigit()\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmphh1954mr.swift:10:27: error: value of type 'Int' has no member\
    \ 'signDigit'\n            sum += (-num).signDigit()\n                   ~~~~~~\
    \ ^~~~~~~~~\n/tmp/tmphh1954mr.swift:12:24: error: value of type 'Int' has no member\
    \ 'signDigit'\n            sum += num.signDigit()\n                   ~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for num in arr {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpshdhq6ya/tmpshdhq6ya.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d59c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d56bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d56bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d56bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshdhq6ya                        0x000055ef89430510 <unavailable> + 5392

    5    libc.so.6                          0x00002b22d5bb1460 __libc_start_main +
    245

    6    tmpshdhq6ya                        0x000055ef894300d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for x in arr {\n        if x > 0 {\n            count\
    \ += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpp0h8vhun/tmpp0h8vhun.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19d6e92c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19d6b89b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19d6b89988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19d6b887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp0h8vhun                        0x00005561c448e8ca <unavailable> + 6346

    5    libc.so.6                          0x00002b19d707e460 __libc_start_main +
    245

    6    tmpp0h8vhun                        0x00005561c448e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for num in arr {\n        count += count_digits(num)\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp1_1j7m1z.swift:9:18: error: cannot find 'count_digits' in scope\n\
    \        count += count_digits(num)\n                 ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for n in arr {\n        sum += n\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpk2hgbajh/tmpk2hgbajh.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae04d0adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae04cda4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae04cda4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae04cda37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk2hgbajh                        0x0000556108b8e510 <unavailable> + 5392

    5    libc.so.6                          0x00002ae04d299460 __libc_start_main +
    245

    6    tmpk2hgbajh                        0x0000556108b8e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for x in arr {\n        if x > 0 {\n            count\
    \ += x\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp_jpnt_od/tmp_jpnt_od.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b87a8bc1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b87a88b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b87a88b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b87a88b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_jpnt_od                        0x0000558a2c47f5f5 <unavailable> + 5621

    5    libc.so.6                          0x00002b87a8dad460 __libc_start_main +
    245

    6    tmp_jpnt_od                        0x0000558a2c47f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for x in arr {\n        sum += x\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpo9ngzwht/tmpo9ngzwht.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a7c31ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a7c015b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a7c015988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a7c0147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9ngzwht                        0x00005580051c4510 <unavailable> + 5392

    5    libc.so.6                          0x00002b6a7c50a460 __libc_start_main +
    245

    6    tmpo9ngzwht                        0x00005580051c40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for x in arr {\n        sum += x\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpo9ngzwht/tmpo9ngzwht.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a7c31ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a7c015b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a7c015988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a7c0147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9ngzwht                        0x00005580051c4510 <unavailable> + 5392

    5    libc.so.6                          0x00002b6a7c50a460 __libc_start_main +
    245

    6    tmpo9ngzwht                        0x00005580051c40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for x in arr {\n        if x < 0 {\n            sum += (-x)\
    \ % 10\n        } else {\n            sum += x\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpywym5vs8/tmpywym5vs8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4bd3b1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4bd3814b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4bd3814988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4bd38137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpywym5vs8                        0x00005644ec67e5a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b4bd3d09460 __libc_start_main +
    245

    6    tmpywym5vs8                        0x00005644ec67e169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for x in arr {\n        if x > 0 {\n            count\
    \ += x\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp_jpnt_od/tmp_jpnt_od.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b87a8bc1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b87a88b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b87a88b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b87a88b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_jpnt_od                        0x0000558a2c47f5f5 <unavailable> + 5621

    5    libc.so.6                          0x00002b87a8dad460 __libc_start_main +
    245

    6    tmp_jpnt_od                        0x0000558a2c47f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for num in arr {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpshdhq6ya/tmpshdhq6ya.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d59c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d56bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d56bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d56bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshdhq6ya                        0x000055ef89430510 <unavailable> + 5392

    5    libc.so.6                          0x00002b22d5bb1460 __libc_start_main +
    245

    6    tmpshdhq6ya                        0x000055ef894300d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for x in arr {\n        sum += x\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpo9ngzwht/tmpo9ngzwht.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a7c31ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a7c015b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a7c015988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a7c0147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9ngzwht                        0x00005580051c4510 <unavailable> + 5392

    5    libc.so.6                          0x00002b6a7c50a460 __libc_start_main +
    245

    6    tmpo9ngzwht                        0x00005580051c40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for num in arr {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpshdhq6ya/tmpshdhq6ya.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d59c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d56bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d56bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d56bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshdhq6ya                        0x000055ef89430510 <unavailable> + 5392

    5    libc.so.6                          0x00002b22d5bb1460 __libc_start_main +
    245

    6    tmpshdhq6ya                        0x000055ef894300d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for num in arr {\n        if num < 0 {\n            num\
    \ = -num\n        }\n        if num > 9 {\n            num = num - 10\n      \
    \  }\n        count += num\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp2w6sevx3.swift:10:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n/tmp/tmp2w6sevx3.swift:13:13:\
    \ error: cannot assign to value: 'num' is a 'let' constant\n            num =\
    \ num - 10\n            ^~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for x in arr {\n        sum += x\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpo9ngzwht/tmpo9ngzwht.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a7c31ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a7c015b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a7c015988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a7c0147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9ngzwht                        0x00005580051c4510 <unavailable> + 5392

    5    libc.so.6                          0x00002b6a7c50a460 __libc_start_main +
    245

    6    tmpo9ngzwht                        0x00005580051c40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for num in arr {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpshdhq6ya/tmpshdhq6ya.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d59c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d56bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d56bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d56bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshdhq6ya                        0x000055ef89430510 <unavailable> + 5392

    5    libc.so.6                          0x00002b22d5bb1460 __libc_start_main +
    245

    6    tmpshdhq6ya                        0x000055ef894300d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for x in arr {\n        sum += x\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpo9ngzwht/tmpo9ngzwht.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a7c31ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a7c015b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a7c015988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a7c0147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9ngzwht                        0x00005580051c4510 <unavailable> + 5392

    5    libc.so.6                          0x00002b6a7c50a460 __libc_start_main +
    245

    6    tmpo9ngzwht                        0x00005580051c40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for num in arr {\n        if num < 0 {\n            num\
    \ = -num\n        }\n        if num < 10 {\n            count += num\n       \
    \ }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpkujh88v2.swift:10:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for num in arr {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpshdhq6ya/tmpshdhq6ya.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d59c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d56bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d56bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d56bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshdhq6ya                        0x000055ef89430510 <unavailable> + 5392

    5    libc.so.6                          0x00002b22d5bb1460 __libc_start_main +
    245

    6    tmpshdhq6ya                        0x000055ef894300d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for num in arr {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpshdhq6ya/tmpshdhq6ya.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d59c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d56bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d56bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d56bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshdhq6ya                        0x000055ef89430510 <unavailable> + 5392

    5    libc.so.6                          0x00002b22d5bb1460 __libc_start_main +
    245

    6    tmpshdhq6ya                        0x000055ef894300d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for n in arr {\n        if n >= 0 {\n            sum +=\
    \ n\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpbr_kq1b9/tmpbr_kq1b9.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b729cefac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b729cbf1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b729cbf1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b729cbf07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbr_kq1b9                        0x000055bbf55505f5 <unavailable> + 5621

    5    libc.so.6                          0x00002b729d0e6460 __libc_start_main +
    245

    6    tmpbr_kq1b9                        0x000055bbf55500d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for x in arr {\n        if x > 0 {\n            count\
    \ += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpp0h8vhun/tmpp0h8vhun.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19d6e92c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19d6b89b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19d6b89988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19d6b887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp0h8vhun                        0x00005561c448e8ca <unavailable> + 6346

    5    libc.so.6                          0x00002b19d707e460 __libc_start_main +
    245

    6    tmpp0h8vhun                        0x00005561c448e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for n in arr {\n        sum += n\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpk2hgbajh/tmpk2hgbajh.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae04d0adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae04cda4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae04cda4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae04cda37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk2hgbajh                        0x0000556108b8e510 <unavailable> + 5392

    5    libc.so.6                          0x00002ae04d299460 __libc_start_main +
    245

    6    tmpk2hgbajh                        0x0000556108b8e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for x in arr {\n        if x >= 0 {\n            sum +=\
    \ x\n        } else {\n            sum += x * -1\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmprb2zvy7l/tmprb2zvy7l.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed77451c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed77148b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed77148988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed771477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprb2zvy7l                        0x0000557ea2131510 <unavailable> + 5392

    5    libc.so.6                          0x00002aed7763d460 __libc_start_main +
    245

    6    tmprb2zvy7l                        0x0000557ea21310d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for x in arr {\n        if x >= 0 {\n            count\
    \ += x\n        } else {\n            count += abs(x)\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpqq7uet01/tmpqq7uet01.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5c7b69fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5c7b396b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5c7b396988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5c7b3957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqq7uet01                        0x00005644db46d600 <unavailable> + 5632

    5    libc.so.6                          0x00002b5c7b88b460 __libc_start_main +
    245

    6    tmpqq7uet01                        0x00005644db46d1c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for x in arr {\n        if x >= 0 {\n            count\
    \ += x\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmprh78900m/tmprh78900m.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b036c4c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b036c1bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b036c1bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b036c1ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprh78900m                        0x0000559839b465f5 <unavailable> + 5621

    5    libc.so.6                          0x00002b036c6b0460 __libc_start_main +
    245

    6    tmprh78900m                        0x0000559839b460d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for n in arr {\n        sum += n\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpk2hgbajh/tmpk2hgbajh.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae04d0adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae04cda4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae04cda4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae04cda37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk2hgbajh                        0x0000556108b8e510 <unavailable> + 5392

    5    libc.so.6                          0x00002ae04d299460 __libc_start_main +
    245

    6    tmpk2hgbajh                        0x0000556108b8e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for x in arr {\n        if x > 0 {\n            count\
    \ += x / 10\n        }\n        if x < 0 {\n            count += x / 10 - x /\
    \ 10 * 10\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpsm0j00bv/tmpsm0j00bv.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba9bd3b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba9bd0adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba9bd0ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba9bd0ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsm0j00bv                        0x00005602cfaaa685 <unavailable> + 5765

    5    libc.so.6                          0x00002ba9bd5a2460 __libc_start_main +
    245

    6    tmpsm0j00bv                        0x00005602cfaaa169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for n in arr {\n        if n > 0 {\n            sum += n\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp0_7oqqn6/tmp0_7oqqn6.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4079ba4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b407989bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b407989b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b407989a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0_7oqqn6                        0x000055eb8a4295f5 <unavailable> + 5621

    5    libc.so.6                          0x00002b4079d90460 __libc_start_main +
    245

    6    tmp0_7oqqn6                        0x000055eb8a4290d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for num in arr {\n        if num < 0 {\n            num\
    \ = -num\n        }\n        if num % 10 == 0 {\n            count += 1\n    \
    \    }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7gmit4v2.swift:10:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for x in arr {\n        sum += x\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpo9ngzwht/tmpo9ngzwht.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a7c31ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a7c015b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a7c015988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a7c0147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9ngzwht                        0x00005580051c4510 <unavailable> + 5392

    5    libc.so.6                          0x00002b6a7c50a460 __libc_start_main +
    245

    6    tmpo9ngzwht                        0x00005580051c40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for num in arr {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpshdhq6ya/tmpshdhq6ya.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d59c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d56bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d56bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d56bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshdhq6ya                        0x000055ef89430510 <unavailable> + 5392

    5    libc.so.6                          0x00002b22d5bb1460 __libc_start_main +
    245

    6    tmpshdhq6ya                        0x000055ef894300d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for x in arr {\n        if x >= 0 {\n            count\
    \ += x\n        } else {\n            count += x * -1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpgg3wzh2c/tmpgg3wzh2c.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac672b0bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac672802b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac672802988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6728017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgg3wzh2c                        0x0000565395da5510 <unavailable> + 5392

    5    libc.so.6                          0x00002ac672cf7460 __libc_start_main +
    245

    6    tmpgg3wzh2c                        0x0000565395da50d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for num in arr {\n        if num < 0 {\n            num\
    \ = -num\n        }\n        count += num % 10\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpxp8oh0bt.swift:10:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for x in arr {\n        if x > 0 {\n            sum += x\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpfl7uom12/tmpfl7uom12.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3fc496dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3fc4664b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3fc4664988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3fc46637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfl7uom12                        0x00005570c3d745f5 <unavailable> + 5621

    5    libc.so.6                          0x00002b3fc4b59460 __libc_start_main +
    245

    6    tmpfl7uom12                        0x00005570c3d740d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for n in arr {\n        if n > 0 {\n            count\
    \ += count_digits(n)\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpks1glnig.swift:10:22: error: cannot find 'count_digits' in scope\n\
    \            count += count_digits(n)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for x in arr {\n        sum += x\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpo9ngzwht/tmpo9ngzwht.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a7c31ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a7c015b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a7c015988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a7c0147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9ngzwht                        0x00005580051c4510 <unavailable> + 5392

    5    libc.so.6                          0x00002b6a7c50a460 __libc_start_main +
    245

    6    tmpo9ngzwht                        0x00005580051c40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for n in arr {\n        sum += n\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpk2hgbajh/tmpk2hgbajh.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae04d0adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae04cda4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae04cda4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae04cda37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk2hgbajh                        0x0000556108b8e510 <unavailable> + 5392

    5    libc.so.6                          0x00002ae04d299460 __libc_start_main +
    245

    6    tmpk2hgbajh                        0x0000556108b8e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for x in arr {\n        if x >= 0 {\n            count\
    \ += x\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmprh78900m/tmprh78900m.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b036c4c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b036c1bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b036c1bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b036c1ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprh78900m                        0x0000559839b465f5 <unavailable> + 5621

    5    libc.so.6                          0x00002b036c6b0460 __libc_start_main +
    245

    6    tmprh78900m                        0x0000559839b460d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for num in arr {\n        if num < 0 {\n            num\
    \ = -num\n        }\n        count += num % 10\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpxp8oh0bt.swift:10:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for num in arr {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpshdhq6ya/tmpshdhq6ya.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d59c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d56bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d56bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d56bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshdhq6ya                        0x000055ef89430510 <unavailable> + 5392

    5    libc.so.6                          0x00002b22d5bb1460 __libc_start_main +
    245

    6    tmpshdhq6ya                        0x000055ef894300d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for num in arr {\n        if num < 0 {\n            num\
    \ = -num\n        }\n        if num > 0 {\n            count += num % 10\n   \
    \     }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpcr_4o844.swift:10:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for num in arr {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpshdhq6ya/tmpshdhq6ya.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d59c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d56bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d56bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d56bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshdhq6ya                        0x000055ef89430510 <unavailable> + 5392

    5    libc.so.6                          0x00002b22d5bb1460 __libc_start_main +
    245

    6    tmpshdhq6ya                        0x000055ef894300d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for num in arr {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpshdhq6ya/tmpshdhq6ya.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d59c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d56bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d56bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d56bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshdhq6ya                        0x000055ef89430510 <unavailable> + 5392

    5    libc.so.6                          0x00002b22d5bb1460 __libc_start_main +
    245

    6    tmpshdhq6ya                        0x000055ef894300d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for num in arr {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpshdhq6ya/tmpshdhq6ya.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d59c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d56bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d56bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d56bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshdhq6ya                        0x000055ef89430510 <unavailable> + 5392

    5    libc.so.6                          0x00002b22d5bb1460 __libc_start_main +
    245

    6    tmpshdhq6ya                        0x000055ef894300d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for x in arr {\n        sum += x\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpo9ngzwht/tmpo9ngzwht.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a7c31ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a7c015b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a7c015988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a7c0147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9ngzwht                        0x00005580051c4510 <unavailable> + 5392

    5    libc.so.6                          0x00002b6a7c50a460 __libc_start_main +
    245

    6    tmpo9ngzwht                        0x00005580051c40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for x in arr {\n        sum += x\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpo9ngzwht/tmpo9ngzwht.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a7c31ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a7c015b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a7c015988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a7c0147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9ngzwht                        0x00005580051c4510 <unavailable> + 5392

    5    libc.so.6                          0x00002b6a7c50a460 __libc_start_main +
    245

    6    tmpo9ngzwht                        0x00005580051c40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for num in arr {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpshdhq6ya/tmpshdhq6ya.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d59c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d56bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d56bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d56bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshdhq6ya                        0x000055ef89430510 <unavailable> + 5392

    5    libc.so.6                          0x00002b22d5bb1460 __libc_start_main +
    245

    6    tmpshdhq6ya                        0x000055ef894300d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for x in arr {\n        sum += x\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpo9ngzwht/tmpo9ngzwht.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a7c31ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a7c015b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a7c015988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a7c0147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9ngzwht                        0x00005580051c4510 <unavailable> + 5392

    5    libc.so.6                          0x00002b6a7c50a460 __libc_start_main +
    245

    6    tmpo9ngzwht                        0x00005580051c40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for x in arr {\n        sum += x\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpo9ngzwht/tmpo9ngzwht.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a7c31ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a7c015b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a7c015988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a7c0147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9ngzwht                        0x00005580051c4510 <unavailable> + 5392

    5    libc.so.6                          0x00002b6a7c50a460 __libc_start_main +
    245

    6    tmpo9ngzwht                        0x00005580051c40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for num in arr {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpshdhq6ya/tmpshdhq6ya.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d59c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d56bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d56bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d56bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshdhq6ya                        0x000055ef89430510 <unavailable> + 5392

    5    libc.so.6                          0x00002b22d5bb1460 __libc_start_main +
    245

    6    tmpshdhq6ya                        0x000055ef894300d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for x in arr {\n        sum += x\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpo9ngzwht/tmpo9ngzwht.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a7c31ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a7c015b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a7c015988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a7c0147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9ngzwht                        0x00005580051c4510 <unavailable> + 5392

    5    libc.so.6                          0x00002b6a7c50a460 __libc_start_main +
    245

    6    tmpo9ngzwht                        0x00005580051c40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for num in arr {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpshdhq6ya/tmpshdhq6ya.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d59c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d56bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d56bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d56bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshdhq6ya                        0x000055ef89430510 <unavailable> + 5392

    5    libc.so.6                          0x00002b22d5bb1460 __libc_start_main +
    245

    6    tmpshdhq6ya                        0x000055ef894300d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for num in arr {\n        if num < 0 {\n            num\
    \ = -num\n        }\n        count += num % 10\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpxp8oh0bt.swift:10:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for x in arr {\n        if x > 0 {\n            count\
    \ += x % 10\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpn2pffqu6/tmpn2pffqu6.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fd1a1cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fd1713b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8fd1713988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8fd17127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn2pffqu6                        0x000055e1d7567685 <unavailable> + 5765

    5    libc.so.6                          0x00002b8fd1c08460 __libc_start_main +
    245

    6    tmpn2pffqu6                        0x000055e1d7567169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for n in arr {\n        if n > 0 {\n            sum += n\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp0_7oqqn6/tmp0_7oqqn6.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4079ba4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b407989bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b407989b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b407989a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0_7oqqn6                        0x000055eb8a4295f5 <unavailable> + 5621

    5    libc.so.6                          0x00002b4079d90460 __libc_start_main +
    245

    6    tmp0_7oqqn6                        0x000055eb8a4290d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for num in arr {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpshdhq6ya/tmpshdhq6ya.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d59c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d56bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d56bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d56bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshdhq6ya                        0x000055ef89430510 <unavailable> + 5392

    5    libc.so.6                          0x00002b22d5bb1460 __libc_start_main +
    245

    6    tmpshdhq6ya                        0x000055ef894300d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for x in arr {\n        if x > 0 {\n            count\
    \ += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpp0h8vhun/tmpp0h8vhun.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19d6e92c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19d6b89b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19d6b89988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19d6b887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp0h8vhun                        0x00005561c448e8ca <unavailable> + 6346

    5    libc.so.6                          0x00002b19d707e460 __libc_start_main +
    245

    6    tmpp0h8vhun                        0x00005561c448e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for x in arr {\n        sum += x\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpo9ngzwht/tmpo9ngzwht.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a7c31ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a7c015b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a7c015988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a7c0147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9ngzwht                        0x00005580051c4510 <unavailable> + 5392

    5    libc.so.6                          0x00002b6a7c50a460 __libc_start_main +
    245

    6    tmpo9ngzwht                        0x00005580051c40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for x in arr {\n        sum += x\n    }\n    if sum < 0\
    \ {\n        sum *= -1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp12dwy035/tmp12dwy035.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b354710cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3546e03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3546e03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3546e027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12dwy035                        0x00005643bff45510 <unavailable> + 5392

    5    libc.so.6                          0x00002b35472f8460 __libc_start_main +
    245

    6    tmp12dwy035                        0x00005643bff450d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for num in arr {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpshdhq6ya/tmpshdhq6ya.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d59c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d56bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d56bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d56bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshdhq6ya                        0x000055ef89430510 <unavailable> + 5392

    5    libc.so.6                          0x00002b22d5bb1460 __libc_start_main +
    245

    6    tmpshdhq6ya                        0x000055ef894300d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for x in arr {\n        sum += x\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpo9ngzwht/tmpo9ngzwht.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a7c31ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a7c015b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a7c015988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a7c0147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9ngzwht                        0x00005580051c4510 <unavailable> + 5392

    5    libc.so.6                          0x00002b6a7c50a460 __libc_start_main +
    245

    6    tmpo9ngzwht                        0x00005580051c40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for num in arr {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpshdhq6ya/tmpshdhq6ya.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d59c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d56bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d56bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d56bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshdhq6ya                        0x000055ef89430510 <unavailable> + 5392

    5    libc.so.6                          0x00002b22d5bb1460 __libc_start_main +
    245

    6    tmpshdhq6ya                        0x000055ef894300d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for n in arr {\n        sum += n\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpk2hgbajh/tmpk2hgbajh.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae04d0adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae04cda4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae04cda4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae04cda37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk2hgbajh                        0x0000556108b8e510 <unavailable> + 5392

    5    libc.so.6                          0x00002ae04d299460 __libc_start_main +
    245

    6    tmpk2hgbajh                        0x0000556108b8e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for num in arr {\n        if num < 0 {\n            num\
    \ = -num\n        }\n        count += num / 10\n        num %= 10\n    }\n   \
    \ return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmper3sntob.swift:10:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n/tmp/tmper3sntob.swift:13:13:\
    \ error: left side of mutating operator isn't mutable: 'num' is a 'let' constant\n\
    \        num %= 10\n        ~~~ ^\n"
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for x in arr {\n        sum += x\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpo9ngzwht/tmpo9ngzwht.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a7c31ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a7c015b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a7c015988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a7c0147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9ngzwht                        0x00005580051c4510 <unavailable> + 5392

    5    libc.so.6                          0x00002b6a7c50a460 __libc_start_main +
    245

    6    tmpo9ngzwht                        0x00005580051c40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for x in arr {\n        sum += x\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpo9ngzwht/tmpo9ngzwht.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a7c31ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a7c015b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a7c015988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a7c0147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9ngzwht                        0x00005580051c4510 <unavailable> + 5392

    5    libc.so.6                          0x00002b6a7c50a460 __libc_start_main +
    245

    6    tmpo9ngzwht                        0x00005580051c40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for num in arr {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpshdhq6ya/tmpshdhq6ya.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d59c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d56bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d56bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d56bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshdhq6ya                        0x000055ef89430510 <unavailable> + 5392

    5    libc.so.6                          0x00002b22d5bb1460 __libc_start_main +
    245

    6    tmpshdhq6ya                        0x000055ef894300d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for x in arr {\n        if x > 0 {\n            count\
    \ += x\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp_jpnt_od/tmp_jpnt_od.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b87a8bc1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b87a88b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b87a88b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b87a88b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_jpnt_od                        0x0000558a2c47f5f5 <unavailable> + 5621

    5    libc.so.6                          0x00002b87a8dad460 __libc_start_main +
    245

    6    tmp_jpnt_od                        0x0000558a2c47f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for num in arr {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpshdhq6ya/tmpshdhq6ya.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d59c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d56bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d56bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d56bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshdhq6ya                        0x000055ef89430510 <unavailable> + 5392

    5    libc.so.6                          0x00002b22d5bb1460 __libc_start_main +
    245

    6    tmpshdhq6ya                        0x000055ef894300d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for num in arr {\n        if num < 0 {\n            num\
    \ = -num\n        }\n        count += num / 10\n        num %= 10\n    }\n   \
    \ return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmper3sntob.swift:10:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n/tmp/tmper3sntob.swift:13:13:\
    \ error: left side of mutating operator isn't mutable: 'num' is a 'let' constant\n\
    \        num %= 10\n        ~~~ ^\n"
  stdout: ''
  timestamp: 1660013459
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for num in arr {\n        if num < 0 {\n            num\
    \ = -num\n        }\n        count += num / 10\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpprn1v1i5.swift:10:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for n in arr {\n        if n >= 0 {\n            count\
    \ += n\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp47_j8z9e/tmp47_j8z9e.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa0d9b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa0d6abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa0d6ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa0d6aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp47_j8z9e                        0x000055eb779ed5f5 <unavailable> + 5621

    5    libc.so.6                          0x00002baa0dba0460 __libc_start_main +
    245

    6    tmp47_j8z9e                        0x000055eb779ed0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for x in arr {\n        sum += x\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpo9ngzwht/tmpo9ngzwht.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a7c31ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a7c015b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a7c015988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a7c0147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9ngzwht                        0x00005580051c4510 <unavailable> + 5392

    5    libc.so.6                          0x00002b6a7c50a460 __libc_start_main +
    245

    6    tmpo9ngzwht                        0x00005580051c40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for x in arr {\n        sum += x\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpo9ngzwht/tmpo9ngzwht.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a7c31ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a7c015b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a7c015988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a7c0147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9ngzwht                        0x00005580051c4510 <unavailable> + 5392

    5    libc.so.6                          0x00002b6a7c50a460 __libc_start_main +
    245

    6    tmpo9ngzwht                        0x00005580051c40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for num in arr {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpshdhq6ya/tmpshdhq6ya.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d59c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d56bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d56bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d56bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshdhq6ya                        0x000055ef89430510 <unavailable> + 5392

    5    libc.so.6                          0x00002b22d5bb1460 __libc_start_main +
    245

    6    tmpshdhq6ya                        0x000055ef894300d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for num in arr {\n        count += count_num(num)\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpszdvfhdm.swift:9:18: error: cannot find 'count_num' in scope\n\
    \        count += count_num(num)\n                 ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for n in arr {\n        sum += n\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpk2hgbajh/tmpk2hgbajh.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae04d0adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae04cda4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae04cda4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae04cda37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk2hgbajh                        0x0000556108b8e510 <unavailable> + 5392

    5    libc.so.6                          0x00002ae04d299460 __libc_start_main +
    245

    6    tmpk2hgbajh                        0x0000556108b8e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for x in arr {\n        if x > 0 {\n            count\
    \ += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpp0h8vhun/tmpp0h8vhun.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19d6e92c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19d6b89b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19d6b89988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19d6b887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp0h8vhun                        0x00005561c448e8ca <unavailable> + 6346

    5    libc.so.6                          0x00002b19d707e460 __libc_start_main +
    245

    6    tmpp0h8vhun                        0x00005561c448e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for x in arr {\n        if x > 0 {\n            count\
    \ += count_digits(x)\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpetu754qi.swift:10:22: error: cannot find 'count_digits' in scope\n\
    \            count += count_digits(x)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for x in arr {\n        if x >= 0 {\n            sum +=\
    \ x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpjc7gm015/tmpjc7gm015.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e3b51dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e3b214b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e3b214988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e3b2137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjc7gm015                        0x0000556747df55f5 <unavailable> + 5621

    5    libc.so.6                          0x00002b8e3b709460 __libc_start_main +
    245

    6    tmpjc7gm015                        0x0000556747df50d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for x in arr {\n        if x > 0 {\n            sum += x\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpfl7uom12/tmpfl7uom12.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3fc496dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3fc4664b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3fc4664988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3fc46637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfl7uom12                        0x00005570c3d745f5 <unavailable> + 5621

    5    libc.so.6                          0x00002b3fc4b59460 __libc_start_main +
    245

    6    tmpfl7uom12                        0x00005570c3d740d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for n in arr {\n        sum += n\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpk2hgbajh/tmpk2hgbajh.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae04d0adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae04cda4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae04cda4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae04cda37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk2hgbajh                        0x0000556108b8e510 <unavailable> + 5392

    5    libc.so.6                          0x00002ae04d299460 __libc_start_main +
    245

    6    tmpk2hgbajh                        0x0000556108b8e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for n in arr {\n        count += count_digits(n)\n   \
    \ }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmphm43k45_.swift:9:18: error: cannot find 'count_digits' in scope\n\
    \        count += count_digits(n)\n                 ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for x in arr {\n        if x > 0 {\n            count\
    \ += x / 10\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp3yedslqw/tmp3yedslqw.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab7a2f24c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab7a2c1bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab7a2c1b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7a2c1a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3yedslqw                        0x000055991739a685 <unavailable> + 5765

    5    libc.so.6                          0x00002ab7a3110460 __libc_start_main +
    245

    6    tmp3yedslqw                        0x000055991739a169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for n in arr {\n        count += count_digits(n)\n   \
    \ }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmphm43k45_.swift:9:18: error: cannot find 'count_digits' in scope\n\
    \        count += count_digits(n)\n                 ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for num in arr {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpshdhq6ya/tmpshdhq6ya.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d59c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d56bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d56bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d56bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshdhq6ya                        0x000055ef89430510 <unavailable> + 5392

    5    libc.so.6                          0x00002b22d5bb1460 __libc_start_main +
    245

    6    tmpshdhq6ya                        0x000055ef894300d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for n in arr {\n        sum += n\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpk2hgbajh/tmpk2hgbajh.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae04d0adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae04cda4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae04cda4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae04cda37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk2hgbajh                        0x0000556108b8e510 <unavailable> + 5392

    5    libc.so.6                          0x00002ae04d299460 __libc_start_main +
    245

    6    tmpk2hgbajh                        0x0000556108b8e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for num in arr {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpshdhq6ya/tmpshdhq6ya.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d59c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d56bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d56bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d56bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshdhq6ya                        0x000055ef89430510 <unavailable> + 5392

    5    libc.so.6                          0x00002b22d5bb1460 __libc_start_main +
    245

    6    tmpshdhq6ya                        0x000055ef894300d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for x in arr {\n        sum += x\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpo9ngzwht/tmpo9ngzwht.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a7c31ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a7c015b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a7c015988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a7c0147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9ngzwht                        0x00005580051c4510 <unavailable> + 5392

    5    libc.so.6                          0x00002b6a7c50a460 __libc_start_main +
    245

    6    tmpo9ngzwht                        0x00005580051c40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for n in arr {\n        sum += n\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpk2hgbajh/tmpk2hgbajh.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae04d0adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae04cda4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae04cda4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae04cda37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk2hgbajh                        0x0000556108b8e510 <unavailable> + 5392

    5    libc.so.6                          0x00002ae04d299460 __libc_start_main +
    245

    6    tmpk2hgbajh                        0x0000556108b8e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for num in arr {\n        if num < 0 {\n            sum\
    \ += num\n        } else {\n            sum += num % 10\n        }\n    }\n  \
    \  return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmphsrd9tlg/tmphsrd9tlg.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c6f856c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c6f54db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c6f54d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c6f54c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphsrd9tlg                        0x00005635f64f25a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b1c6fa42460 __libc_start_main +
    245

    6    tmphsrd9tlg                        0x00005635f64f2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for x in arr {\n        count += count_digits(x)\n   \
    \ }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpjdsgonxy.swift:9:18: error: cannot find 'count_digits' in scope\n\
    \        count += count_digits(x)\n                 ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for num in arr {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpshdhq6ya/tmpshdhq6ya.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d59c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d56bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d56bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d56bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshdhq6ya                        0x000055ef89430510 <unavailable> + 5392

    5    libc.so.6                          0x00002b22d5bb1460 __libc_start_main +
    245

    6    tmpshdhq6ya                        0x000055ef894300d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for num in arr {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpshdhq6ya/tmpshdhq6ya.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d59c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d56bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d56bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d56bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshdhq6ya                        0x000055ef89430510 <unavailable> + 5392

    5    libc.so.6                          0x00002b22d5bb1460 __libc_start_main +
    245

    6    tmpshdhq6ya                        0x000055ef894300d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for x in arr {\n        sum += x\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpo9ngzwht/tmpo9ngzwht.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a7c31ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a7c015b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a7c015988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a7c0147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9ngzwht                        0x00005580051c4510 <unavailable> + 5392

    5    libc.so.6                          0x00002b6a7c50a460 __libc_start_main +
    245

    6    tmpo9ngzwht                        0x00005580051c40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for x in arr {\n        sum += x\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpo9ngzwht/tmpo9ngzwht.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a7c31ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a7c015b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a7c015988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a7c0147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9ngzwht                        0x00005580051c4510 <unavailable> + 5392

    5    libc.so.6                          0x00002b6a7c50a460 __libc_start_main +
    245

    6    tmpo9ngzwht                        0x00005580051c40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for num in arr {\n        if num < 0 {\n            num\
    \ = -num\n        }\n        if num < 10 {\n            count += num\n       \
    \ }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpkujh88v2.swift:10:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for n in arr {\n        sum += n\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpk2hgbajh/tmpk2hgbajh.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae04d0adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae04cda4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae04cda4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae04cda37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk2hgbajh                        0x0000556108b8e510 <unavailable> + 5392

    5    libc.so.6                          0x00002ae04d299460 __libc_start_main +
    245

    6    tmpk2hgbajh                        0x0000556108b8e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for n in arr {\n        sum += n\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpk2hgbajh/tmpk2hgbajh.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae04d0adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae04cda4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae04cda4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae04cda37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk2hgbajh                        0x0000556108b8e510 <unavailable> + 5392

    5    libc.so.6                          0x00002ae04d299460 __libc_start_main +
    245

    6    tmpk2hgbajh                        0x0000556108b8e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for num in arr {\n        if num < 0 {\n            num\
    \ = -num\n        }\n        count += num % 10\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpxp8oh0bt.swift:10:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for num in arr {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpshdhq6ya/tmpshdhq6ya.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d59c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d56bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d56bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d56bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshdhq6ya                        0x000055ef89430510 <unavailable> + 5392

    5    libc.so.6                          0x00002b22d5bb1460 __libc_start_main +
    245

    6    tmpshdhq6ya                        0x000055ef894300d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for n in arr {\n        if n > 0 {\n            count\
    \ += count_digits(n)\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpks1glnig.swift:10:22: error: cannot find 'count_digits' in scope\n\
    \            count += count_digits(n)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for x in arr {\n        if x < 0 {\n            sum += (-x)\
    \ % 10\n        } else {\n            sum += x\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpywym5vs8/tmpywym5vs8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4bd3b1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4bd3814b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4bd3814988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4bd38137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpywym5vs8                        0x00005644ec67e5a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b4bd3d09460 __libc_start_main +
    245

    6    tmpywym5vs8                        0x00005644ec67e169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for num in arr {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpshdhq6ya/tmpshdhq6ya.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d59c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d56bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d56bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d56bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshdhq6ya                        0x000055ef89430510 <unavailable> + 5392

    5    libc.so.6                          0x00002b22d5bb1460 __libc_start_main +
    245

    6    tmpshdhq6ya                        0x000055ef894300d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for x in arr {\n        sum += x\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpo9ngzwht/tmpo9ngzwht.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a7c31ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a7c015b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a7c015988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a7c0147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9ngzwht                        0x00005580051c4510 <unavailable> + 5392

    5    libc.so.6                          0x00002b6a7c50a460 __libc_start_main +
    245

    6    tmpo9ngzwht                        0x00005580051c40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for num in arr {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpshdhq6ya/tmpshdhq6ya.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d59c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d56bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d56bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d56bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshdhq6ya                        0x000055ef89430510 <unavailable> + 5392

    5    libc.so.6                          0x00002b22d5bb1460 __libc_start_main +
    245

    6    tmpshdhq6ya                        0x000055ef894300d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for x in arr {\n        sum += x\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpo9ngzwht/tmpo9ngzwht.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a7c31ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a7c015b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a7c015988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a7c0147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9ngzwht                        0x00005580051c4510 <unavailable> + 5392

    5    libc.so.6                          0x00002b6a7c50a460 __libc_start_main +
    245

    6    tmpo9ngzwht                        0x00005580051c40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for x in arr {\n        sum += x\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpo9ngzwht/tmpo9ngzwht.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a7c31ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a7c015b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a7c015988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a7c0147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9ngzwht                        0x00005580051c4510 <unavailable> + 5392

    5    libc.so.6                          0x00002b6a7c50a460 __libc_start_main +
    245

    6    tmpo9ngzwht                        0x00005580051c40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for x in arr {\n        sum += x\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpo9ngzwht/tmpo9ngzwht.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a7c31ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a7c015b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a7c015988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a7c0147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9ngzwht                        0x00005580051c4510 <unavailable> + 5392

    5    libc.so.6                          0x00002b6a7c50a460 __libc_start_main +
    245

    6    tmpo9ngzwht                        0x00005580051c40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for num in arr {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpshdhq6ya/tmpshdhq6ya.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d59c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d56bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d56bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d56bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshdhq6ya                        0x000055ef89430510 <unavailable> + 5392

    5    libc.so.6                          0x00002b22d5bb1460 __libc_start_main +
    245

    6    tmpshdhq6ya                        0x000055ef894300d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for num in arr {\n        if num < 0 {\n            num\
    \ = -num\n        }\n        count += num % 10\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpxp8oh0bt.swift:10:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for x in arr {\n        if x > 0 {\n            count\
    \ += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpp0h8vhun/tmpp0h8vhun.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19d6e92c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19d6b89b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19d6b89988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19d6b887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp0h8vhun                        0x00005561c448e8ca <unavailable> + 6346

    5    libc.so.6                          0x00002b19d707e460 __libc_start_main +
    245

    6    tmpp0h8vhun                        0x00005561c448e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for num in arr {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpshdhq6ya/tmpshdhq6ya.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d59c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d56bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d56bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d56bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshdhq6ya                        0x000055ef89430510 <unavailable> + 5392

    5    libc.so.6                          0x00002b22d5bb1460 __libc_start_main +
    245

    6    tmpshdhq6ya                        0x000055ef894300d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for n in arr {\n        sum += n\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpk2hgbajh/tmpk2hgbajh.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae04d0adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae04cda4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae04cda4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae04cda37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk2hgbajh                        0x0000556108b8e510 <unavailable> + 5392

    5    libc.so.6                          0x00002ae04d299460 __libc_start_main +
    245

    6    tmpk2hgbajh                        0x0000556108b8e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for x in arr {\n        if x > 0 {\n            count\
    \ += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpp0h8vhun/tmpp0h8vhun.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19d6e92c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19d6b89b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19d6b89988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19d6b887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp0h8vhun                        0x00005561c448e8ca <unavailable> + 6346

    5    libc.so.6                          0x00002b19d707e460 __libc_start_main +
    245

    6    tmpp0h8vhun                        0x00005561c448e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for x in arr {\n        sum += x\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpo9ngzwht/tmpo9ngzwht.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a7c31ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a7c015b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a7c015988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a7c0147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9ngzwht                        0x00005580051c4510 <unavailable> + 5392

    5    libc.so.6                          0x00002b6a7c50a460 __libc_start_main +
    245

    6    tmpo9ngzwht                        0x00005580051c40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for num in arr {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpshdhq6ya/tmpshdhq6ya.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d59c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d56bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d56bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d56bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshdhq6ya                        0x000055ef89430510 <unavailable> + 5392

    5    libc.so.6                          0x00002b22d5bb1460 __libc_start_main +
    245

    6    tmpshdhq6ya                        0x000055ef894300d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for x in arr {\n        sum += x\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpo9ngzwht/tmpo9ngzwht.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a7c31ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a7c015b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a7c015988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a7c0147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9ngzwht                        0x00005580051c4510 <unavailable> + 5392

    5    libc.so.6                          0x00002b6a7c50a460 __libc_start_main +
    245

    6    tmpo9ngzwht                        0x00005580051c40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for num in arr {\n        if num < 0 {\n            num\
    \ = -num\n        }\n        for d in num {\n            if d > 0 {\n        \
    \        count += 1\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpsqrpx2bf.swift:10:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n/tmp/tmpsqrpx2bf.swift:12:18:\
    \ error: for-in loop requires 'Int' to conform to 'Sequence'\n        for d in\
    \ num {\n                 ^~~\n"
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for num in arr {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpshdhq6ya/tmpshdhq6ya.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d59c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d56bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d56bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d56bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshdhq6ya                        0x000055ef89430510 <unavailable> + 5392

    5    libc.so.6                          0x00002b22d5bb1460 __libc_start_main +
    245

    6    tmpshdhq6ya                        0x000055ef894300d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for num in arr {\n        if num < 0 {\n            num\
    \ = -num\n        }\n        count += num / 10\n        num %= 10\n    }\n   \
    \ return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmper3sntob.swift:10:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n/tmp/tmper3sntob.swift:13:13:\
    \ error: left side of mutating operator isn't mutable: 'num' is a 'let' constant\n\
    \        num %= 10\n        ~~~ ^\n"
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for x in arr {\n        sum += x\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpo9ngzwht/tmpo9ngzwht.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a7c31ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a7c015b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a7c015988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a7c0147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9ngzwht                        0x00005580051c4510 <unavailable> + 5392

    5    libc.so.6                          0x00002b6a7c50a460 __libc_start_main +
    245

    6    tmpo9ngzwht                        0x00005580051c40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for x in arr {\n        if x > 0 {\n            sum += x\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpfl7uom12/tmpfl7uom12.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3fc496dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3fc4664b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3fc4664988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3fc46637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfl7uom12                        0x00005570c3d745f5 <unavailable> + 5621

    5    libc.so.6                          0x00002b3fc4b59460 __libc_start_main +
    245

    6    tmpfl7uom12                        0x00005570c3d740d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for n in arr {\n        sum += n\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpk2hgbajh/tmpk2hgbajh.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae04d0adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae04cda4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae04cda4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae04cda37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk2hgbajh                        0x0000556108b8e510 <unavailable> + 5392

    5    libc.so.6                          0x00002ae04d299460 __libc_start_main +
    245

    6    tmpk2hgbajh                        0x0000556108b8e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for x in arr {\n        if x > 0 {\n            count\
    \ += x % 10\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpn2pffqu6/tmpn2pffqu6.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fd1a1cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fd1713b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8fd1713988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8fd17127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn2pffqu6                        0x000055e1d7567685 <unavailable> + 5765

    5    libc.so.6                          0x00002b8fd1c08460 __libc_start_main +
    245

    6    tmpn2pffqu6                        0x000055e1d7567169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for x in arr {\n        if x >= 0 {\n            count\
    \ += x\n        } else {\n            count += x * -1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpgg3wzh2c/tmpgg3wzh2c.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac672b0bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac672802b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac672802988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6728017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgg3wzh2c                        0x0000565395da5510 <unavailable> + 5392

    5    libc.so.6                          0x00002ac672cf7460 __libc_start_main +
    245

    6    tmpgg3wzh2c                        0x0000565395da50d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for num in arr {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpshdhq6ya/tmpshdhq6ya.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d59c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d56bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d56bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d56bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshdhq6ya                        0x000055ef89430510 <unavailable> + 5392

    5    libc.so.6                          0x00002b22d5bb1460 __libc_start_main +
    245

    6    tmpshdhq6ya                        0x000055ef894300d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for x in arr {\n        sum += x\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpo9ngzwht/tmpo9ngzwht.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a7c31ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a7c015b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a7c015988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a7c0147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9ngzwht                        0x00005580051c4510 <unavailable> + 5392

    5    libc.so.6                          0x00002b6a7c50a460 __libc_start_main +
    245

    6    tmpo9ngzwht                        0x00005580051c40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for x in arr {\n        sum += x\n    }\n    if sum < 0\
    \ {\n        sum *= -1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp12dwy035/tmp12dwy035.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b354710cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3546e03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3546e03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3546e027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12dwy035                        0x00005643bff45510 <unavailable> + 5392

    5    libc.so.6                          0x00002b35472f8460 __libc_start_main +
    245

    6    tmp12dwy035                        0x00005643bff450d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for x in arr {\n        if x > 0 {\n            count\
    \ += x / 10\n        }\n        if x < 0 {\n            count += x / 10\n    \
    \    }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp4xuqtyjl/tmp4xuqtyjl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af239c49c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af239940b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af239940988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af23993f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4xuqtyjl                        0x000055b5b95ce685 <unavailable> + 5765

    5    libc.so.6                          0x00002af239e35460 __libc_start_main +
    245

    6    tmp4xuqtyjl                        0x000055b5b95ce169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for x in arr {\n        sum += x\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpo9ngzwht/tmpo9ngzwht.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a7c31ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a7c015b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a7c015988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a7c0147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9ngzwht                        0x00005580051c4510 <unavailable> + 5392

    5    libc.so.6                          0x00002b6a7c50a460 __libc_start_main +
    245

    6    tmpo9ngzwht                        0x00005580051c40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for x in arr {\n        if x > 0 {\n            count\
    \ += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpp0h8vhun/tmpp0h8vhun.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19d6e92c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19d6b89b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19d6b89988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19d6b887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp0h8vhun                        0x00005561c448e8ca <unavailable> + 6346

    5    libc.so.6                          0x00002b19d707e460 __libc_start_main +
    245

    6    tmpp0h8vhun                        0x00005561c448e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for x in arr {\n        sum += x\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpo9ngzwht/tmpo9ngzwht.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a7c31ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a7c015b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a7c015988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a7c0147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9ngzwht                        0x00005580051c4510 <unavailable> + 5392

    5    libc.so.6                          0x00002b6a7c50a460 __libc_start_main +
    245

    6    tmpo9ngzwht                        0x00005580051c40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for x in arr {\n        if x > 0 {\n            count\
    \ += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpp0h8vhun/tmpp0h8vhun.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19d6e92c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19d6b89b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19d6b89988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19d6b887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp0h8vhun                        0x00005561c448e8ca <unavailable> + 6346

    5    libc.so.6                          0x00002b19d707e460 __libc_start_main +
    245

    6    tmpp0h8vhun                        0x00005561c448e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for x in arr {\n        sum += x\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpo9ngzwht/tmpo9ngzwht.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a7c31ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a7c015b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a7c015988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a7c0147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9ngzwht                        0x00005580051c4510 <unavailable> + 5392

    5    libc.so.6                          0x00002b6a7c50a460 __libc_start_main +
    245

    6    tmpo9ngzwht                        0x00005580051c40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for num in arr {\n        if num < 0 {\n            num\
    \ = -num\n        }\n        count += num % 10\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpxp8oh0bt.swift:10:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for num in arr {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpshdhq6ya/tmpshdhq6ya.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d59c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d56bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d56bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d56bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshdhq6ya                        0x000055ef89430510 <unavailable> + 5392

    5    libc.so.6                          0x00002b22d5bb1460 __libc_start_main +
    245

    6    tmpshdhq6ya                        0x000055ef894300d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for n in arr {\n        sum += n\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpk2hgbajh/tmpk2hgbajh.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae04d0adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae04cda4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae04cda4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae04cda37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk2hgbajh                        0x0000556108b8e510 <unavailable> + 5392

    5    libc.so.6                          0x00002ae04d299460 __libc_start_main +
    245

    6    tmpk2hgbajh                        0x0000556108b8e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for x in arr {\n        if x > 0 {\n            count\
    \ += x / 10\n        }\n        if x < 0 {\n            count += x / 10 * 10\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp0dd3ndrz/tmp0dd3ndrz.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6808b42c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6808839b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6808839988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68088387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0dd3ndrz                        0x00005633c1764685 <unavailable> + 5765

    5    libc.so.6                          0x00002b6808d2e460 __libc_start_main +
    245

    6    tmp0dd3ndrz                        0x00005633c1764169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for num in arr {\n        if num < 0 {\n            sum\
    \ += num\n        } else {\n            sum += num % 10\n        }\n    }\n  \
    \  return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmphsrd9tlg/tmphsrd9tlg.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c6f856c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c6f54db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c6f54d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c6f54c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphsrd9tlg                        0x00005635f64f25a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b1c6fa42460 __libc_start_main +
    245

    6    tmphsrd9tlg                        0x00005635f64f2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for n in arr {\n        sum += n\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpk2hgbajh/tmpk2hgbajh.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae04d0adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae04cda4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae04cda4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae04cda37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk2hgbajh                        0x0000556108b8e510 <unavailable> + 5392

    5    libc.so.6                          0x00002ae04d299460 __libc_start_main +
    245

    6    tmpk2hgbajh                        0x0000556108b8e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for n in arr {\n        sum += n\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpk2hgbajh/tmpk2hgbajh.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae04d0adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae04cda4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae04cda4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae04cda37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk2hgbajh                        0x0000556108b8e510 <unavailable> + 5392

    5    libc.so.6                          0x00002ae04d299460 __libc_start_main +
    245

    6    tmpk2hgbajh                        0x0000556108b8e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for num in arr {\n        if num < 0 {\n            num\
    \ = -num\n        }\n        count += num / 10\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpprn1v1i5.swift:10:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for n in arr {\n        sum += n\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpk2hgbajh/tmpk2hgbajh.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae04d0adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae04cda4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae04cda4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae04cda37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk2hgbajh                        0x0000556108b8e510 <unavailable> + 5392

    5    libc.so.6                          0x00002ae04d299460 __libc_start_main +
    245

    6    tmpk2hgbajh                        0x0000556108b8e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for x in arr {\n        if x > 0 {\n            count\
    \ += x\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp_jpnt_od/tmp_jpnt_od.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b87a8bc1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b87a88b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b87a88b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b87a88b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_jpnt_od                        0x0000558a2c47f5f5 <unavailable> + 5621

    5    libc.so.6                          0x00002b87a8dad460 __libc_start_main +
    245

    6    tmp_jpnt_od                        0x0000558a2c47f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for x in arr {\n        sum += x\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpo9ngzwht/tmpo9ngzwht.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a7c31ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a7c015b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a7c015988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a7c0147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9ngzwht                        0x00005580051c4510 <unavailable> + 5392

    5    libc.so.6                          0x00002b6a7c50a460 __libc_start_main +
    245

    6    tmpo9ngzwht                        0x00005580051c40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for num in arr {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpshdhq6ya/tmpshdhq6ya.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d59c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d56bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d56bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d56bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshdhq6ya                        0x000055ef89430510 <unavailable> + 5392

    5    libc.so.6                          0x00002b22d5bb1460 __libc_start_main +
    245

    6    tmpshdhq6ya                        0x000055ef894300d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for num in arr {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpshdhq6ya/tmpshdhq6ya.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d59c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d56bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d56bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d56bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshdhq6ya                        0x000055ef89430510 <unavailable> + 5392

    5    libc.so.6                          0x00002b22d5bb1460 __libc_start_main +
    245

    6    tmpshdhq6ya                        0x000055ef894300d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for x in arr {\n        sum += x\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpo9ngzwht/tmpo9ngzwht.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a7c31ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a7c015b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a7c015988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a7c0147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9ngzwht                        0x00005580051c4510 <unavailable> + 5392

    5    libc.so.6                          0x00002b6a7c50a460 __libc_start_main +
    245

    6    tmpo9ngzwht                        0x00005580051c40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for x in arr {\n        sum += x\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpo9ngzwht/tmpo9ngzwht.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a7c31ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a7c015b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a7c015988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a7c0147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9ngzwht                        0x00005580051c4510 <unavailable> + 5392

    5    libc.so.6                          0x00002b6a7c50a460 __libc_start_main +
    245

    6    tmpo9ngzwht                        0x00005580051c40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for n in arr {\n        sum += n\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpk2hgbajh/tmpk2hgbajh.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae04d0adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae04cda4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae04cda4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae04cda37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk2hgbajh                        0x0000556108b8e510 <unavailable> + 5392

    5    libc.so.6                          0x00002ae04d299460 __libc_start_main +
    245

    6    tmpk2hgbajh                        0x0000556108b8e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for x in arr {\n        if x > 0 {\n            count\
    \ += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpp0h8vhun/tmpp0h8vhun.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19d6e92c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19d6b89b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19d6b89988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19d6b887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp0h8vhun                        0x00005561c448e8ca <unavailable> + 6346

    5    libc.so.6                          0x00002b19d707e460 __libc_start_main +
    245

    6    tmpp0h8vhun                        0x00005561c448e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for x in arr {\n        if x > 0 {\n            count\
    \ += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpp0h8vhun/tmpp0h8vhun.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19d6e92c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19d6b89b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19d6b89988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19d6b887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp0h8vhun                        0x00005561c448e8ca <unavailable> + 6346

    5    libc.so.6                          0x00002b19d707e460 __libc_start_main +
    245

    6    tmpp0h8vhun                        0x00005561c448e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for x in arr {\n        if x > 0 {\n            count\
    \ += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpp0h8vhun/tmpp0h8vhun.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19d6e92c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19d6b89b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19d6b89988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19d6b887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp0h8vhun                        0x00005561c448e8ca <unavailable> + 6346

    5    libc.so.6                          0x00002b19d707e460 __libc_start_main +
    245

    6    tmpp0h8vhun                        0x00005561c448e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for num in arr {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpshdhq6ya/tmpshdhq6ya.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d59c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d56bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d56bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d56bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshdhq6ya                        0x000055ef89430510 <unavailable> + 5392

    5    libc.so.6                          0x00002b22d5bb1460 __libc_start_main +
    245

    6    tmpshdhq6ya                        0x000055ef894300d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for num in arr {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpshdhq6ya/tmpshdhq6ya.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d59c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d56bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d56bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d56bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshdhq6ya                        0x000055ef89430510 <unavailable> + 5392

    5    libc.so.6                          0x00002b22d5bb1460 __libc_start_main +
    245

    6    tmpshdhq6ya                        0x000055ef894300d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for x in arr {\n        sum += x\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpo9ngzwht/tmpo9ngzwht.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a7c31ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a7c015b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a7c015988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a7c0147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9ngzwht                        0x00005580051c4510 <unavailable> + 5392

    5    libc.so.6                          0x00002b6a7c50a460 __libc_start_main +
    245

    6    tmpo9ngzwht                        0x00005580051c40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for x in arr {\n        sum += x\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpo9ngzwht/tmpo9ngzwht.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a7c31ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a7c015b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a7c015988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a7c0147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9ngzwht                        0x00005580051c4510 <unavailable> + 5392

    5    libc.so.6                          0x00002b6a7c50a460 __libc_start_main +
    245

    6    tmpo9ngzwht                        0x00005580051c40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for x in arr {\n        if x > 0 {\n            count\
    \ += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpp0h8vhun/tmpp0h8vhun.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19d6e92c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19d6b89b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19d6b89988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19d6b887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp0h8vhun                        0x00005561c448e8ca <unavailable> + 6346

    5    libc.so.6                          0x00002b19d707e460 __libc_start_main +
    245

    6    tmpp0h8vhun                        0x00005561c448e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for num in arr {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpshdhq6ya/tmpshdhq6ya.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d59c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d56bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d56bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d56bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshdhq6ya                        0x000055ef89430510 <unavailable> + 5392

    5    libc.so.6                          0x00002b22d5bb1460 __libc_start_main +
    245

    6    tmpshdhq6ya                        0x000055ef894300d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for num in arr {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpshdhq6ya/tmpshdhq6ya.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d59c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d56bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d56bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d56bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshdhq6ya                        0x000055ef89430510 <unavailable> + 5392

    5    libc.so.6                          0x00002b22d5bb1460 __libc_start_main +
    245

    6    tmpshdhq6ya                        0x000055ef894300d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for x in arr {\n        if x > 0 {\n            count\
    \ += x\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp_jpnt_od/tmp_jpnt_od.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b87a8bc1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b87a88b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b87a88b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b87a88b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_jpnt_od                        0x0000558a2c47f5f5 <unavailable> + 5621

    5    libc.so.6                          0x00002b87a8dad460 __libc_start_main +
    245

    6    tmp_jpnt_od                        0x0000558a2c47f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for num in arr {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpshdhq6ya/tmpshdhq6ya.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d59c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d56bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d56bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d56bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshdhq6ya                        0x000055ef89430510 <unavailable> + 5392

    5    libc.so.6                          0x00002b22d5bb1460 __libc_start_main +
    245

    6    tmpshdhq6ya                        0x000055ef894300d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for num in arr {\n        if num < 0 {\n            sum\
    \ += num\n        } else {\n            sum += num % 10\n        }\n    }\n  \
    \  return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmphsrd9tlg/tmphsrd9tlg.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c6f856c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c6f54db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c6f54d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c6f54c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphsrd9tlg                        0x00005635f64f25a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b1c6fa42460 __libc_start_main +
    245

    6    tmphsrd9tlg                        0x00005635f64f2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for x in arr {\n        sum += x\n    }\n    if sum < 0\
    \ {\n        sum *= -1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp12dwy035/tmp12dwy035.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b354710cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3546e03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3546e03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3546e027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12dwy035                        0x00005643bff45510 <unavailable> + 5392

    5    libc.so.6                          0x00002b35472f8460 __libc_start_main +
    245

    6    tmp12dwy035                        0x00005643bff450d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for num in arr {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpshdhq6ya/tmpshdhq6ya.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d59c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d56bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d56bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d56bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshdhq6ya                        0x000055ef89430510 <unavailable> + 5392

    5    libc.so.6                          0x00002b22d5bb1460 __libc_start_main +
    245

    6    tmpshdhq6ya                        0x000055ef894300d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for x in arr {\n        if x > 0 {\n            count\
    \ += x % 10\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpn2pffqu6/tmpn2pffqu6.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fd1a1cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fd1713b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8fd1713988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8fd17127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn2pffqu6                        0x000055e1d7567685 <unavailable> + 5765

    5    libc.so.6                          0x00002b8fd1c08460 __libc_start_main +
    245

    6    tmpn2pffqu6                        0x000055e1d7567169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for x in arr {\n        sum += x\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpo9ngzwht/tmpo9ngzwht.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a7c31ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a7c015b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a7c015988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a7c0147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9ngzwht                        0x00005580051c4510 <unavailable> + 5392

    5    libc.so.6                          0x00002b6a7c50a460 __libc_start_main +
    245

    6    tmpo9ngzwht                        0x00005580051c40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for n in arr {\n        sum += n\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpk2hgbajh/tmpk2hgbajh.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae04d0adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae04cda4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae04cda4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae04cda37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk2hgbajh                        0x0000556108b8e510 <unavailable> + 5392

    5    libc.so.6                          0x00002ae04d299460 __libc_start_main +
    245

    6    tmpk2hgbajh                        0x0000556108b8e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var sum = 0\n    for num in arr {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpshdhq6ya/tmpshdhq6ya.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d59c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d56bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d56bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d56bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshdhq6ya                        0x000055ef89430510 <unavailable> + 5392

    5    libc.so.6                          0x00002b22d5bb1460 __libc_start_main +
    245

    6    tmpshdhq6ya                        0x000055ef894300d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013459
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for x in arr {\n        if x >= 0 {\n            count\
    \ += count_digits(x)\n        } else {\n            count += count_digits(-x)\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpk1t29f_6.swift:10:22: error: cannot find 'count_digits' in scope\n\
    \            count += count_digits(x)\n                     ^~~~~~~~~~~~\n/tmp/tmpk1t29f_6.swift:12:22:\
    \ error: cannot find 'count_digits' in scope\n            count += count_digits(-x)\n\
    \                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013459
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for num in arr {\n        if num < 0 {\n            num\
    \ = -num\n        }\n        if num < 10 {\n            count++\n        } else\
    \ if num < 100 {\n            count += 2\n        } else if num < 1000 {\n   \
    \         count += 3\n        } else if num < 10000 {\n            count += 4\n\
    \        } else if num < 100000 {\n            count += 5\n        } else if num\
    \ < 1000000 {\n            count += 6\n        } else if num < 10000000 {\n  \
    \          count += 7\n        } else if num < 100000000 {\n            count\
    \ += 8\n        } else if num < 1000000000 {\n            count += 9\n       \
    \ }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp6t00g3cd.swift:10:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n/tmp/tmp6t00g3cd.swift:13:18:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  count++\n                 ^~\n"
  stdout: ''
  timestamp: 1660013459
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\nfunc count_nums(arr: [Int]) -> Int {\n\
    \    var count = 0\n    for x in arr {\n        if x > 0 {\n            count\
    \ += x / 10\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp3yedslqw/tmp3yedslqw.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab7a2f24c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab7a2c1bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab7a2c1b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7a2c1a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3yedslqw                        0x000055991739a685 <unavailable> + 5765

    5    libc.so.6                          0x00002ab7a3110460 __libc_start_main +
    245

    6    tmp3yedslqw                        0x000055991739a169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013459
