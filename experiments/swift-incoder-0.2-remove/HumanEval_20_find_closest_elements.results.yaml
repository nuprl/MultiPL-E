language: swift
name: HumanEval_20_find_closest_elements
results:
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n\
    \    }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n    for i\
    \ in 1..numbers.count {\n        if numbers[i] < smallest {\n            smallest\
    \ = numbers[i]\n        }\n        if numbers[i] > largest {\n            largest\
    \ = numbers[i]\n        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmp7owmp89q.swift:10:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..numbers.count {\n              ^~\n   \
    \           ...\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count > 2 else { return (numbers[0], numbers[1])\
    \ }\n    guard numbers.count > 3 else { return (numbers[0], numbers[2]) }\n  \
    \  guard numbers.count > 4 else { return (numbers[0], numbers[3]) }\n    guard\
    \ numbers.count > 5 else { return (numbers[0], numbers[4]) }\n    guard numbers.count\
    \ > 6 else { return (numbers[0], numbers[5]) }\n    guard numbers.count > 7 else\
    \ { return (numbers[0], numbers[6]) }\n    guard numbers.count > 8 else { return\
    \ (numbers[0], numbers[7]) }\n    guard numbers.count > 9 else { return (numbers[0],\
    \ numbers[8]) }\n    guard numbers.count > 10 else { return (numbers[0], numbers[9])\
    \ }\n    guard numbers.count > 11 else { return (numbers[0], numbers[10]) }\n\
    \    guard numbers.count > 12 else { return (numbers[0], numbers[11]) }\n    guard\
    \ numbers.count > 13 else { return (numbers[0], numbers[12]) }\n    guard numbers.count\
    \ > 14 else { return (numbers[0], numbers[13]) }\n    guard numbers.count > 15\
    \ else { return (numbers[0], numbers[14]) }\n    guard numbers.count > 16 else\
    \ { return (numbers[0], numbers[15]) }\n    guard numbers.count > 17 else { return\
    \ (numbers[0], numbers[16]) }\n    guard numbers.count > 18 else { return (numbers[0],\
    \ numbers[17]) }\n    guard numbers.count > 19 else { return (numbers[0], numbers[18])\
    \ }\n    guard numbers.count > 20 else { return (numbers[0], numbers[19]) }\n\
    \    guard numbers.count > 21 else { return (numbers[0], numbers[20]) }\n    guard\
    \ numbers.count > 22 else { return (numbers[0], numbers[21]) }\n    guard numbers.count\
    \ > 23 else { return (numbers[0], numbers[22]) }\n    guard numbers.count > 24\
    \ else { return (numbers[0], numbers[23]) }\n    guard numbers.count > 25 else\
    \ { return (numbers[0], numbers[24]) }\n    guard numbers.count > 26 else { return\
    \ (numbers[0], numbers[25]) }\n    guard numbers.count > 27 else { return (numbers[0],\
    \ numbers[26]) }\n    guard numbers.count > 28 else { return (numbers[0], numbers[27])\
    \ }\n    guard numbers.count > 29 else { return (numbers[0], number\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmp8w7zzds2.swift:34:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp8w7zzds2.swift:33:44: note: to match this opening '('\n    guard numbers.count\
    \ > 29 else { return (numbers[0], number\n                                   \
    \        ^\n/tmp/tmp8w7zzds2.swift:53:80: error: expected '}' at end of brace\
    \ statement\nassert(find_closest_elements(numbers: [1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == (2.2, 3.1))\n                                                           \
    \                    ^\n/tmp/tmp8w7zzds2.swift:4:67: note: to match this opening\
    \ '{'\nfunc find_closest_elements(numbers: [Double]) -> (Double, Double) {\n \
    \                                                                 ^\n/tmp/tmp8w7zzds2.swift:33:57:\
    \ error: cannot find 'number' in scope\n    guard numbers.count > 29 else { return\
    \ (numbers[0], number\n                                                      \
    \  ^~~~~~\n/tmp/tmp8w7zzds2.swift:37:6: error: operator functions can only be\
    \ declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count > 1 else {\n        return numbers[0],\
    \ numbers[0]\n    }\n    let smallest = numbers[0]\n    let largest = numbers[0]\n\
    \    for i in 1..<numbers.count {\n        if numbers[i] < smallest {\n      \
    \      smallest = numbers[i]\n        } else if numbers[i] > largest {\n     \
    \       largest = numbers[i]\n        }\n    }\n    return (smallest, largest)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpzbprrbon.swift:6:26: error: consecutive statements on a line must\
    \ be separated by ';'\n        return numbers[0], numbers[0]\n               \
    \          ^\n                         ;\n/tmp/tmpzbprrbon.swift:6:26: error:\
    \ expected expression\n        return numbers[0], numbers[0]\n               \
    \          ^\n/tmp/tmpzbprrbon.swift:6:23: error: cannot convert return expression\
    \ of type 'Double' to return type '(Double, Double)'\n        return numbers[0],\
    \ numbers[0]\n               ~~~~~~~^~~\n/tmp/tmpzbprrbon.swift:12:13: error:\
    \ cannot assign to value: 'smallest' is a 'let' constant\n            smallest\
    \ = numbers[i]\n            ^~~~~~~~\n/tmp/tmpzbprrbon.swift:8:5: note: change\
    \ 'let' to 'var' to make it mutable\n    let smallest = numbers[0]\n    ^~~\n\
    \    var\n/tmp/tmpzbprrbon.swift:14:13: error: cannot assign to value: 'largest'\
    \ is a 'let' constant\n            largest = numbers[i]\n            ^~~~~~~\n\
    /tmp/tmpzbprrbon.swift:9:5: note: change 'let' to 'var' to make it mutable\n \
    \   let largest = numbers[0]\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 3 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 4 else { return (numbers[0], numbers[0]) }\n \
    \   guard numbers.count >= 5 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 6 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 7 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 8\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 9 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 10 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 11 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 12 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 13 else { return (numbers[0], numbers[0]) }\n\
    \    guard numbers.count >= 14 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 15 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 16 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 17\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 18 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 19 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 20 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 21 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 22 else { return (numbers[0], numbers[0]) }\n\
    \    guard numbers.count >= 23 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 24 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 25 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 26\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 27 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 28 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 29 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 30 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 31 else { return (numbers[0], numbers[0]) }\n\
    \    guard \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpq6s829l8.swift:35:10: error: expected expression, var, let or case\
    \ in 'guard' condition\n    guard \n         ^\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count > 1 else {\n        return (0.0,0.0)\n\
    \    }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n    for number\
    \ in numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpb4pfkggt/tmpb4pfkggt.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85f8dffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85f8af6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85f8af6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85f8af57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb4pfkggt                        0x0000556bc8aa369e <unavailable> + 5790

    5    libc.so.6                          0x00002b85f8feb460 __libc_start_main +
    245

    6    tmpb4pfkggt                        0x0000556bc8aa3259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else {\n        return (0,\
    \ 0)\n    }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n   \
    \ for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpin1itjni/tmpin1itjni.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b546cdccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b546cac3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b546cac3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b546cac27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpin1itjni                        0x0000559980dd169e <unavailable> + 5790

    5    libc.so.6                          0x00002b546cfb8460 __libc_start_main +
    245

    6    tmpin1itjni                        0x0000559980dd1259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n\
    \    }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n    for number\
    \ in numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmprkspmxv9/tmprkspmxv9.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8898682c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8898379b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8898379988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88983787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprkspmxv9                        0x0000563f2263b69e <unavailable> + 5790

    5    libc.so.6                          0x00002b889886e460 __libc_start_main +
    245

    6    tmprkspmxv9                        0x0000563f2263b259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n\
    \    }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n    for number\
    \ in numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmprkspmxv9/tmprkspmxv9.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8898682c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8898379b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8898379988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88983787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprkspmxv9                        0x0000563f2263b69e <unavailable> + 5790

    5    libc.so.6                          0x00002b889886e460 __libc_start_main +
    245

    6    tmprkspmxv9                        0x0000563f2263b259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        } else if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpgxnulirk/tmpgxnulirk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b652c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b64fbdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b64fbd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b64fbc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxnulirk                        0x0000555d095f464e <unavailable> + 5710

    5    libc.so.6                          0x00002b7b654b2460 __libc_start_main +
    245

    6    tmpgxnulirk                        0x0000555d095f4209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count > 2 else { return (numbers[0], numbers[1])\
    \ }\n\n    var smallest = numbers[0]\n    var largest = numbers[0]\n    for number\
    \ in numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpda5kqkf8/tmpda5kqkf8.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae662e43c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae662b3ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae662b3a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae662b397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpda5kqkf8                        0x0000557f0951369e <unavailable> + 5790

    5    libc.so.6                          0x00002ae66302f460 __libc_start_main +
    245

    6    tmpda5kqkf8                        0x0000557f09513259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else { return (numbers[0],\
    \ numbers[0]) }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpi5v8_ih_/tmpi5v8_ih_.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abccf8e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abccf5d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abccf5d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abccf5d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi5v8_ih_                        0x00005559e31d369e <unavailable> + 5790

    5    libc.so.6                          0x00002abccface460 __libc_start_main +
    245

    6    tmpi5v8_ih_                        0x00005559e31d3259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else { return (numbers[0],\
    \ numbers[0]) }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for i in 1..numbers.count {\n        if numbers[i] > largest {\n        \
    \    largest = numbers[i]\n        } else if numbers[i] < smallest {\n       \
    \     smallest = numbers[i]\n        }\n    }\n    return (smallest, largest)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmps5sh1t8p.swift:8:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..numbers.count {\n              ^~\n   \
    \           ...\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else { return (numbers[0],\
    \ numbers[0]) }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for i in 1..numbers.count {\n        if numbers[i] < smallest {\n       \
    \     smallest = numbers[i]\n        }\n        if numbers[i] > largest {\n  \
    \          largest = numbers[i]\n        }\n    }\n    return (smallest, largest)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpbz3kmnz8.swift:8:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..numbers.count {\n              ^~\n   \
    \           ...\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n\
    \    }\n    \n    let smallest = numbers[0]\n    let largest = numbers[0]\n  \
    \  \n    for number in numbers {\n        if number < smallest {\n           \
    \ smallest = number\n        }\n        if number > largest {\n            largest\
    \ = number\n        }\n    }\n    \n    return (smallest, largest)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmp_3xwga39.swift:14:13: error: cannot assign to value: 'smallest'\
    \ is a 'let' constant\n            smallest = number\n            ^~~~~~~~\n/tmp/tmp_3xwga39.swift:9:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let smallest = numbers[0]\n\
    \    ^~~\n    var\n/tmp/tmp_3xwga39.swift:17:13: error: cannot assign to value:\
    \ 'largest' is a 'let' constant\n            largest = number\n            ^~~~~~~\n\
    /tmp/tmp_3xwga39.swift:10:5: note: change 'let' to 'var' to make it mutable\n\
    \    let largest = numbers[0]\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count > 1 else {\n        return (0.0,0.0)\n\
    \    }\n    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n    }\n\
    \    var smallest = numbers[0]\n    var largest = numbers[0]\n    for number in\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    return (smallest,largest)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpgu270539/tmpgu270539.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec0ac20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec0a917b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec0a917988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec0a9167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgu270539                        0x000055571865869e <unavailable> + 5790

    5    libc.so.6                          0x00002aec0ae0c460 __libc_start_main +
    245

    6    tmpgu270539                        0x0000555718658259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else { return (0.0, 0.0)\
    \ }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n    for number\
    \ in numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpbflmku92/tmpbflmku92.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b132a2f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1329febb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1329feb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1329fea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbflmku92                        0x0000561c6aa7569e <unavailable> + 5790

    5    libc.so.6                          0x00002b132a4e0460 __libc_start_main +
    245

    6    tmpbflmku92                        0x0000561c6aa75259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n\
    \    }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n    for i\
    \ in 1..numbers.count {\n        if numbers[i] > largest {\n            largest\
    \ = numbers[i]\n        }\n        if numbers[i] < smallest {\n            smallest\
    \ = numbers[i]\n        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmplzrtwkno.swift:10:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..numbers.count {\n              ^~\n   \
    \           ...\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        } else if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpgxnulirk/tmpgxnulirk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b652c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b64fbdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b64fbd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b64fbc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxnulirk                        0x0000555d095f464e <unavailable> + 5710

    5    libc.so.6                          0x00002b7b654b2460 __libc_start_main +
    245

    6    tmpgxnulirk                        0x0000555d095f4209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    if numbers.count < 2 {\n        return numbers[0],\
    \ numbers[0]\n    }\n    \n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    \n    for i in 1..numbers.count {\n        if numbers[i] > largest {\n  \
    \          largest = numbers[i]\n        }\n        if numbers[i] < smallest {\n\
    \            smallest = numbers[i]\n        }\n    }\n    \n    return (smallest,\
    \ largest)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpqq7ek05_.swift:6:26: error: consecutive statements on a line must\
    \ be separated by ';'\n        return numbers[0], numbers[0]\n               \
    \          ^\n                         ;\n/tmp/tmpqq7ek05_.swift:6:26: error:\
    \ expected expression\n        return numbers[0], numbers[0]\n               \
    \          ^\n/tmp/tmpqq7ek05_.swift:6:23: error: cannot convert return expression\
    \ of type 'Double' to return type '(Double, Double)'\n        return numbers[0],\
    \ numbers[0]\n               ~~~~~~~^~~\n/tmp/tmpqq7ek05_.swift:12:15: error:\
    \ cannot find operator '..' in scope; did you mean '...'?\n    for i in 1..numbers.count\
    \ {\n              ^~\n              ...\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n\
    \    }\n    \n    var smallest = numbers[0]\n    var largest = numbers[0]\n  \
    \  \n    for number in numbers {\n        if number < smallest {\n           \
    \ smallest = number\n        }\n        if number > largest {\n            largest\
    \ = number\n        }\n    }\n    \n    return (smallest, largest)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp0r0piicg/tmp0r0piicg.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b71b2d29c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b71b2a20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b71b2a20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71b2a1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0r0piicg                        0x0000557a479de69e <unavailable> + 5790

    5    libc.so.6                          0x00002b71b2f15460 __libc_start_main +
    245

    6    tmp0r0piicg                        0x0000557a479de259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n\
    \    }\n\n    var smallest = numbers[0]\n    var largest = numbers[0]\n    var\
    \ smallestIndex = 0\n    var largestIndex = 0\n\n    for index in 1..numbers.count\
    \ {\n        let currentNumber = numbers[index]\n        if currentNumber < smallest\
    \ {\n            smallest = currentNumber\n            smallestIndex = index\n\
    \        }\n        if currentNumber > largest {\n            largest = currentNumber\n\
    \            largestIndex = index\n        }\n    }\n\n    return (numbers[smallestIndex],\
    \ numbers[largestIndex])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpy19azolu.swift:14:19: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for index in 1..numbers.count {\n                 \
    \ ^~\n                  ...\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 3 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 4 else { return (numbers[0], numbers[0]) }\n \
    \   guard numbers.count >= 5 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 6 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 7 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 8\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 9 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 10 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 11 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 12 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 13 else { return (numbers[0], numbers[0]) }\n\
    \    guard numbers.count >= 14 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 15 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 16 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 17\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 18 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 19 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 20 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 21 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 22 else { return (numbers[0], numbers[0]) }\n\
    \    guard numbers.count >= 23 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 24 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 25 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 26\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 27 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 28 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 29 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 30 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 31 else { return (numbers[0], numbers[0]) }\n\
    \    guard \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpq6s829l8.swift:35:10: error: expected expression, var, let or case\
    \ in 'guard' condition\n    guard \n         ^\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    if numbers.count < 2 {\n        return (0.0,0.0)\n\
    \    }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n    for number\
    \ in numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp38vizmdc/tmp38vizmdc.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30f4d45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30f4a3cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30f4a3c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30f4a3b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp38vizmdc                        0x0000564e5de3069e <unavailable> + 5790

    5    libc.so.6                          0x00002b30f4f31460 __libc_start_main +
    245

    6    tmp38vizmdc                        0x0000564e5de30259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    if numbers.count < 2 {\n        return numbers[0],\
    \ numbers[0]\n    }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmp36_4fvg6.swift:6:26: error: consecutive statements on a line must\
    \ be separated by ';'\n        return numbers[0], numbers[0]\n               \
    \          ^\n                         ;\n/tmp/tmp36_4fvg6.swift:6:26: error:\
    \ expected expression\n        return numbers[0], numbers[0]\n               \
    \          ^\n/tmp/tmp36_4fvg6.swift:6:23: error: cannot convert return expression\
    \ of type 'Double' to return type '(Double, Double)'\n        return numbers[0],\
    \ numbers[0]\n               ~~~~~~~^~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n\
    \    }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n    for i\
    \ in 1..numbers.count {\n        if numbers[i] < smallest {\n            smallest\
    \ = numbers[i]\n        }\n        if numbers[i] > largest {\n            largest\
    \ = numbers[i]\n        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmp7owmp89q.swift:10:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..numbers.count {\n              ^~\n   \
    \           ...\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n\
    \    }\n    guard numbers.count > 1 else {\n        return (0.0,0.0)\n    }\n\
    \    guard numbers.count <= 3 else {\n        return (0.0,0.0)\n    }\n    var\
    \ smallest = numbers[0]\n    var largest = numbers[0]\n    for number in numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpgoetcb5t/tmpgoetcb5t.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4b9d10c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4b9a07b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4b9a07988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4b9a067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgoetcb5t                        0x000055a83570d69e <unavailable> + 5790

    5    libc.so.6                          0x00002ba4b9efc460 __libc_start_main +
    245

    6    tmpgoetcb5t                        0x000055a83570d259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 3 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 4 else { return (numbers[0], numbers[0]) }\n \
    \   guard numbers.count >= 5 else { return (numbers[0], numbers[0]) }\n\n    var\
    \ smallest = numbers[0]\n    var largest = numbers[0]\n    var smallest_index\
    \ = -1\n    var largest_index = -1\n\n    for i in 1..<numbers.count {\n     \
    \   if numbers[i] < smallest {\n            smallest = numbers[i]\n          \
    \  smallest_index = i\n        }\n        if numbers[i] > largest {\n        \
    \    largest = numbers[i]\n            largest_index = i\n        }\n    }\n\n\
    \    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpi03a2j47/tmpi03a2j47.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18b0d35c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18b0a2cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b18b0a2c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18b0a2b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi03a2j47                        0x000055aa01fe46be <unavailable> + 5822

    5    libc.so.6                          0x00002b18b0f21460 __libc_start_main +
    245

    6    tmpi03a2j47                        0x000055aa01fe4279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    let smallest = min(numbers)\n    let largest = max(numbers)\n\
    \    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpnwkkis96.swift:5:31: error: missing argument for parameter #2 in\
    \ call\n    let smallest = min(numbers)\n                              ^\n   \
    \                           , <#[Double]#>\nSwift.min:1:24: note: 'min' declared\
    \ here\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n\
    \                       ^\n/tmp/tmpnwkkis96.swift:6:30: error: missing argument\
    \ for parameter #2 in call\n    let largest = max(numbers)\n                 \
    \            ^\n                             , <#[Double]#>\nSwift.max:1:24: note:\
    \ 'max' declared here\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where\
    \ T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n\
    \    }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n    for number\
    \ in numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmprkspmxv9/tmprkspmxv9.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8898682c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8898379b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8898379988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88983787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprkspmxv9                        0x0000563f2263b69e <unavailable> + 5790

    5    libc.so.6                          0x00002b889886e460 __libc_start_main +
    245

    6    tmprkspmxv9                        0x0000563f2263b259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n\
    \    }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n    for number\
    \ in numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmprkspmxv9/tmprkspmxv9.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8898682c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8898379b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8898379988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88983787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprkspmxv9                        0x0000563f2263b69e <unavailable> + 5790

    5    libc.so.6                          0x00002b889886e460 __libc_start_main +
    245

    6    tmprkspmxv9                        0x0000563f2263b259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else { return (numbers[0],\
    \ numbers[0]) }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpi5v8_ih_/tmpi5v8_ih_.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abccf8e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abccf5d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abccf5d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abccf5d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi5v8_ih_                        0x00005559e31d369e <unavailable> + 5790

    5    libc.so.6                          0x00002abccface460 __libc_start_main +
    245

    6    tmpi5v8_ih_                        0x00005559e31d3259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n\
    \    }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n    for i\
    \ in 1..numbers.count {\n        if numbers[i] < smallest {\n            smallest\
    \ = numbers[i]\n        }\n        if numbers[i] > largest {\n            largest\
    \ = numbers[i]\n        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmp7owmp89q.swift:10:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..numbers.count {\n              ^~\n   \
    \           ...\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    if numbers.count < 2 {\n        return numbers[0],\
    \ numbers[0]\n    }\n\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmp9uobckqr.swift:6:26: error: consecutive statements on a line must\
    \ be separated by ';'\n        return numbers[0], numbers[0]\n               \
    \          ^\n                         ;\n/tmp/tmp9uobckqr.swift:6:26: error:\
    \ expected expression\n        return numbers[0], numbers[0]\n               \
    \          ^\n/tmp/tmp9uobckqr.swift:6:23: error: cannot convert return expression\
    \ of type 'Double' to return type '(Double, Double)'\n        return numbers[0],\
    \ numbers[0]\n               ~~~~~~~^~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    let smallest = numbers[0]\n    let largest = numbers[0]\n\
    \    for i in 1..<numbers.count {\n        if numbers[i] < smallest {\n      \
    \      smallest = numbers[i]\n        } else if numbers[i] > largest {\n     \
    \       largest = numbers[i]\n        }\n    }\n    return (smallest, largest)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpwu8l5ufi.swift:9:13: error: cannot assign to value: 'smallest'\
    \ is a 'let' constant\n            smallest = numbers[i]\n            ^~~~~~~~\n\
    /tmp/tmpwu8l5ufi.swift:5:5: note: change 'let' to 'var' to make it mutable\n \
    \   let smallest = numbers[0]\n    ^~~\n    var\n/tmp/tmpwu8l5ufi.swift:11:13:\
    \ error: cannot assign to value: 'largest' is a 'let' constant\n            largest\
    \ = numbers[i]\n            ^~~~~~~\n/tmp/tmpwu8l5ufi.swift:6:5: note: change\
    \ 'let' to 'var' to make it mutable\n    let largest = numbers[0]\n    ^~~\n \
    \   var\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    if numbers.count < 2 {\n        return numbers[0],\
    \ numbers[0]\n    }\n\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \n    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpbuwic9pt.swift:6:26: error: consecutive statements on a line must\
    \ be separated by ';'\n        return numbers[0], numbers[0]\n               \
    \          ^\n                         ;\n/tmp/tmpbuwic9pt.swift:6:26: error:\
    \ expected expression\n        return numbers[0], numbers[0]\n               \
    \          ^\n/tmp/tmpbuwic9pt.swift:6:23: error: cannot convert return expression\
    \ of type 'Double' to return type '(Double, Double)'\n        return numbers[0],\
    \ numbers[0]\n               ~~~~~~~^~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    if numbers.count < 2 {\n        return numbers[0],\
    \ numbers[0]\n    }\n\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpc2kn8qi3.swift:6:26: error: consecutive statements on a line must\
    \ be separated by ';'\n        return numbers[0], numbers[0]\n               \
    \          ^\n                         ;\n/tmp/tmpc2kn8qi3.swift:6:26: error:\
    \ expected expression\n        return numbers[0], numbers[0]\n               \
    \          ^\n/tmp/tmpc2kn8qi3.swift:6:23: error: cannot convert return expression\
    \ of type 'Double' to return type '(Double, Double)'\n        return numbers[0],\
    \ numbers[0]\n               ~~~~~~~^~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else { return (0.0, 0.0)\
    \ }\n    guard numbers.count > 1 else {\n        return (0.9999999999999999, numbers.last!)\n\
    \    }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n    for i\
    \ in 1..numbers.count {\n        if numbers[i] > largest {\n            largest\
    \ = numbers[i]\n        }\n        if numbers[i] < smallest {\n            smallest\
    \ = numbers[i]\n        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpuc5wo2bq.swift:11:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..numbers.count {\n              ^~\n   \
    \           ...\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else {\n        fatalError(\"\
    find_closest_elements: numbers must have at least two elements\")\n    }\n\n \
    \   var smallest = numbers[0]\n    var largest = numbers[0]\n    for i in 1..numbers.count\
    \ {\n        if numbers[i] > largest {\n            largest = numbers[i]\n   \
    \     }\n        if numbers[i] < smallest {\n            smallest = numbers[i]\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpiq6kv_em.swift:11:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..numbers.count {\n              ^~\n   \
    \           ...\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 3 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 4 else { return (numbers[0], numbers[0]) }\n \
    \   guard numbers.count >= 5 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 6 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 7 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 8\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 9 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 10 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 11 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 12 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 13 else { return (numbers[0], numbers[0]) }\n\
    \    guard numbers.count >= 14 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 15 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 16 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 17\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 18 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 19 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 20 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 21 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 22 else { return (numbers[0], numbers[0]) }\n\
    \    guard numbers.count >= 23 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 24 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 25 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 26\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 27 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 28 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 29 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 30 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 31 else { return (numbers[0], numbers[0]) }\n\
    \    guard \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpq6s829l8.swift:35:10: error: expected expression, var, let or case\
    \ in 'guard' condition\n    guard \n         ^\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n\
    \    }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n    for i\
    \ in 1..numbers.count {\n        if numbers[i] < smallest {\n            smallest\
    \ = numbers[i]\n        }\n        if numbers[i] > largest {\n            largest\
    \ = numbers[i]\n        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmp7owmp89q.swift:10:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..numbers.count {\n              ^~\n   \
    \           ...\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n\
    \    }\n    \n    var smallest = numbers[0]\n    var largest = numbers[0]\n  \
    \  \n    for i in 1..numbers.count {\n        if numbers[i] < smallest {\n   \
    \         smallest = numbers[i]\n        }\n        if numbers[i] > largest {\n\
    \            largest = numbers[i]\n        }\n    }\n    \n    return (smallest,\
    \ largest)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmphmlh9_ua.swift:12:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..numbers.count {\n              ^~\n   \
    \           ...\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n\
    \    }\n    guard numbers.count > 1 else {\n        return (0.0,0.0)\n    }\n\
    \    var smallest = numbers[0]\n    var largest = numbers[0]\n    for number in\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpe0genane/tmpe0genane.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba29bddcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba29bad3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba29bad3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba29bad27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe0genane                        0x0000555e512e069e <unavailable> + 5790

    5    libc.so.6                          0x00002ba29bfc8460 __libc_start_main +
    245

    6    tmpe0genane                        0x0000555e512e0259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else {\n        return (0,\
    \ 0)\n    }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n   \
    \ for i in 1..numbers.count {\n        if numbers[i] < smallest {\n          \
    \  smallest = numbers[i]\n        } else if numbers[i] > largest {\n         \
    \   largest = numbers[i]\n        }\n    }\n    return (smallest, largest)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmp58s6ox0p.swift:10:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..numbers.count {\n              ^~\n   \
    \           ...\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n\
    \    }\n    let smallest = numbers[0]\n    let largest = numbers[0]\n    for number\
    \ in numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpit13rfue.swift:12:13: error: cannot assign to value: 'smallest'\
    \ is a 'let' constant\n            smallest = number\n            ^~~~~~~~\n/tmp/tmpit13rfue.swift:8:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let smallest = numbers[0]\n\
    \    ^~~\n    var\n/tmp/tmpit13rfue.swift:15:13: error: cannot assign to value:\
    \ 'largest' is a 'let' constant\n            largest = number\n            ^~~~~~~\n\
    /tmp/tmpit13rfue.swift:9:5: note: change 'let' to 'var' to make it mutable\n \
    \   let largest = numbers[0]\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n\
    \    }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n    for number\
    \ in numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmprkspmxv9/tmprkspmxv9.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8898682c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8898379b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8898379988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88983787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprkspmxv9                        0x0000563f2263b69e <unavailable> + 5790

    5    libc.so.6                          0x00002b889886e460 __libc_start_main +
    245

    6    tmprkspmxv9                        0x0000563f2263b259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 3 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 4 else { return (numbers[0], numbers[0]) }\n\n\
    \    var smallest = numbers[0]\n    var largest = numbers[0]\n    var smallest_index\
    \ = -1\n    var largest_index = -1\n\n    for i in 1..<numbers.count {\n     \
    \   if numbers[i] < smallest {\n            smallest = numbers[i]\n          \
    \  smallest_index = i\n        }\n        if numbers[i] > largest {\n        \
    \    largest = numbers[i]\n            largest_index = i\n        }\n    }\n\n\
    \    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpykskbp5y/tmpykskbp5y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d1df96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d1dc8db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d1dc8d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d1dc8c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpykskbp5y                        0x00005642052ba6be <unavailable> + 5822

    5    libc.so.6                          0x00002b4d1e182460 __libc_start_main +
    245

    6    tmpykskbp5y                        0x00005642052ba279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    if numbers.count < 2 {\n        return numbers[0],\
    \ numbers[0]\n    }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmp36_4fvg6.swift:6:26: error: consecutive statements on a line must\
    \ be separated by ';'\n        return numbers[0], numbers[0]\n               \
    \          ^\n                         ;\n/tmp/tmp36_4fvg6.swift:6:26: error:\
    \ expected expression\n        return numbers[0], numbers[0]\n               \
    \          ^\n/tmp/tmp36_4fvg6.swift:6:23: error: cannot convert return expression\
    \ of type 'Double' to return type '(Double, Double)'\n        return numbers[0],\
    \ numbers[0]\n               ~~~~~~~^~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        } else if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpgxnulirk/tmpgxnulirk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b652c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b64fbdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b64fbd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b64fbc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxnulirk                        0x0000555d095f464e <unavailable> + 5710

    5    libc.so.6                          0x00002b7b654b2460 __libc_start_main +
    245

    6    tmpgxnulirk                        0x0000555d095f4209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        } else if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpgxnulirk/tmpgxnulirk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b652c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b64fbdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b64fbd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b64fbc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxnulirk                        0x0000555d095f464e <unavailable> + 5710

    5    libc.so.6                          0x00002b7b654b2460 __libc_start_main +
    245

    6    tmpgxnulirk                        0x0000555d095f4209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        } else if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpgxnulirk/tmpgxnulirk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b652c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b64fbdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b64fbd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b64fbc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxnulirk                        0x0000555d095f464e <unavailable> + 5710

    5    libc.so.6                          0x00002b7b654b2460 __libc_start_main +
    245

    6    tmpgxnulirk                        0x0000555d095f4209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count > 1 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count > 2 else { return (numbers[0], numbers[1])\
    \ }\n\n    var smallest = numbers[0]\n    var largest = numbers[0]\n    for number\
    \ in numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp1ba2a74g/tmp1ba2a74g.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97aa3c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b97aa0b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b97aa0b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b97aa0b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1ba2a74g                        0x000055f18474469e <unavailable> + 5790

    5    libc.so.6                          0x00002b97aa5ae460 __libc_start_main +
    245

    6    tmp1ba2a74g                        0x000055f184744259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else { return (numbers[0],\
    \ numbers[0]) }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for i in 1..numbers.count {\n        if numbers[i] < smallest {\n       \
    \     smallest = numbers[i]\n        } else if numbers[i] > largest {\n      \
    \      largest = numbers[i]\n        }\n    }\n    return (smallest, largest)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpsjxrqjgz.swift:8:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..numbers.count {\n              ^~\n   \
    \           ...\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n\
    \    }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n    for number\
    \ in numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmprkspmxv9/tmprkspmxv9.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8898682c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8898379b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8898379988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88983787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprkspmxv9                        0x0000563f2263b69e <unavailable> + 5790

    5    libc.so.6                          0x00002b889886e460 __libc_start_main +
    245

    6    tmprkspmxv9                        0x0000563f2263b259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n\
    \    }\n\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\n    for\
    \ number in numbers {\n        if number < smallest {\n            smallest =\
    \ number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcw6i3all/tmpcw6i3all.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f68ddcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f68ad3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f68ad3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f68ad27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcw6i3all                        0x000056251237269e <unavailable> + 5790

    5    libc.so.6                          0x00002b5f68fc8460 __libc_start_main +
    245

    6    tmpcw6i3all                        0x0000562512372259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    if numbers.count < 2 {\n        return numbers[0],\
    \ numbers[0]\n    }\n    \n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    \n    for number in numbers {\n        if number < smallest {\n         \
    \   smallest = number\n        }\n        if number > largest {\n            largest\
    \ = number\n        }\n    }\n    \n    return (smallest, largest)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpcepccxow.swift:6:26: error: consecutive statements on a line must\
    \ be separated by ';'\n        return numbers[0], numbers[0]\n               \
    \          ^\n                         ;\n/tmp/tmpcepccxow.swift:6:26: error:\
    \ expected expression\n        return numbers[0], numbers[0]\n               \
    \          ^\n/tmp/tmpcepccxow.swift:6:23: error: cannot convert return expression\
    \ of type 'Double' to return type '(Double, Double)'\n        return numbers[0],\
    \ numbers[0]\n               ~~~~~~~^~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    if numbers.count < 2 {\n        return (0.0,0.0)\n\
    \    }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n    for i\
    \ in 1..numbers.count {\n        if numbers[i] < smallest {\n            smallest\
    \ = numbers[i]\n        }\n        if numbers[i] > largest {\n            largest\
    \ = numbers[i]\n        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmp6a9jfqk4.swift:10:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..numbers.count {\n              ^~\n   \
    \           ...\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n\
    \    }\n    let smallest = numbers[0]\n    let largest = numbers[0]\n    for i\
    \ in 1..<numbers.count {\n        let current = numbers[i]\n        if current\
    \ < smallest {\n            smallest = current\n        } else if current > largest\
    \ {\n            largest = current\n        }\n    }\n    return (smallest, largest)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpvt0uxf7i.swift:13:13: error: cannot assign to value: 'smallest'\
    \ is a 'let' constant\n            smallest = current\n            ^~~~~~~~\n\
    /tmp/tmpvt0uxf7i.swift:8:5: note: change 'let' to 'var' to make it mutable\n \
    \   let smallest = numbers[0]\n    ^~~\n    var\n/tmp/tmpvt0uxf7i.swift:15:13:\
    \ error: cannot assign to value: 'largest' is a 'let' constant\n            largest\
    \ = current\n            ^~~~~~~\n/tmp/tmpvt0uxf7i.swift:9:5: note: change 'let'\
    \ to 'var' to make it mutable\n    let largest = numbers[0]\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else { return (0.0, 0.0)\
    \ }\n    guard numbers.count > 2 else { return (numbers[0], numbers[0]) }\n  \
    \  guard numbers.count > 3 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count > 4 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ > 5 else { return (numbers[0], numbers[0]) }\n    guard numbers.count > 6 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count > 7 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count > 8 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count > 9 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count > 10 else { return (numbers[0], numbers[0]) }\n \
    \   guard numbers.count > 11 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count > 12 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ > 13 else { return (numbers[0], numbers[0]) }\n    guard numbers.count > 14\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count > 15 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count > 16 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count > 17 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count > 18 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count > 19 else { return (numbers[0], numbers[0]) }\n \
    \   guard numbers.count > 20 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count > 21 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ > 22 else { return (numbers[0], numbers[0]) }\n    guard numbers.count > 23\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count > 24 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count > 25 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count > 26 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count > 27 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count > 28 else { return (numbers[0], numbers[0]) }\n \
    \   guard numbers.count > 29 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count > 30 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ > \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: '/tmp/tmpjtp3mxhl.swift:36:1: error: expected expression after operator

    }

    ^

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 3 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 4 else { return (numbers[0], numbers[0]) }\n\n\
    \    var smallest = numbers[0]\n    var largest = numbers[0]\n    var smallest2\
    \ = numbers[0]\n    var largest2 = numbers[0]\n\n    for i in 1..numbers.count\
    \ {\n        if numbers[i] > largest {\n            largest = numbers[i]\n   \
    \     }\n        if numbers[i] < smallest {\n            smallest = numbers[i]\n\
    \        }\n        if numbers[i] > largest2 {\n            largest2 = numbers[i]\n\
    \        }\n        if numbers[i] < smallest2 {\n            smallest2 = numbers[i]\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpeyh00mtf.swift:14:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..numbers.count {\n              ^~\n   \
    \           ...\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 3 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 4 else { return (numbers[0], numbers[0]) }\n\n\
    \    let smallest = numbers[0]\n    let largest = numbers[0]\n\n    for i in 1..<numbers.count\
    \ {\n        if numbers[i] < smallest {\n            smallest = numbers[i]\n \
    \       } else if numbers[i] > largest {\n            largest = numbers[i]\n \
    \       }\n    }\n\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmp1f9wa5uv.swift:14:13: error: cannot assign to value: 'smallest'\
    \ is a 'let' constant\n            smallest = numbers[i]\n            ^~~~~~~~\n\
    /tmp/tmp1f9wa5uv.swift:9:5: note: change 'let' to 'var' to make it mutable\n \
    \   let smallest = numbers[0]\n    ^~~\n    var\n/tmp/tmp1f9wa5uv.swift:16:13:\
    \ error: cannot assign to value: 'largest' is a 'let' constant\n            largest\
    \ = numbers[i]\n            ^~~~~~~\n/tmp/tmp1f9wa5uv.swift:10:5: note: change\
    \ 'let' to 'var' to make it mutable\n    let largest = numbers[0]\n    ^~~\n \
    \   var\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n\
    \    }\n    let smallest = numbers[0]\n    let largest = numbers[0]\n    for number\
    \ in numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpit13rfue.swift:12:13: error: cannot assign to value: 'smallest'\
    \ is a 'let' constant\n            smallest = number\n            ^~~~~~~~\n/tmp/tmpit13rfue.swift:8:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let smallest = numbers[0]\n\
    \    ^~~\n    var\n/tmp/tmpit13rfue.swift:15:13: error: cannot assign to value:\
    \ 'largest' is a 'let' constant\n            largest = number\n            ^~~~~~~\n\
    /tmp/tmpit13rfue.swift:9:5: note: change 'let' to 'var' to make it mutable\n \
    \   let largest = numbers[0]\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else {\n        return (0,\
    \ 0)\n    }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n   \
    \ for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpin1itjni/tmpin1itjni.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b546cdccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b546cac3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b546cac3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b546cac27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpin1itjni                        0x0000559980dd169e <unavailable> + 5790

    5    libc.so.6                          0x00002b546cfb8460 __libc_start_main +
    245

    6    tmpin1itjni                        0x0000559980dd1259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    if numbers.count < 2 {\n        return numbers[0],\
    \ numbers[0]\n    }\n\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpc2kn8qi3.swift:6:26: error: consecutive statements on a line must\
    \ be separated by ';'\n        return numbers[0], numbers[0]\n               \
    \          ^\n                         ;\n/tmp/tmpc2kn8qi3.swift:6:26: error:\
    \ expected expression\n        return numbers[0], numbers[0]\n               \
    \          ^\n/tmp/tmpc2kn8qi3.swift:6:23: error: cannot convert return expression\
    \ of type 'Double' to return type '(Double, Double)'\n        return numbers[0],\
    \ numbers[0]\n               ~~~~~~~^~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n\
    \    }\n    \n    let smallest = numbers[0]\n    let largest = numbers[0]\n  \
    \  \n    for number in numbers {\n        if number < smallest {\n           \
    \ smallest = number\n        }\n        if number > largest {\n            largest\
    \ = number\n        }\n    }\n    \n    return (smallest, largest)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmp_3xwga39.swift:14:13: error: cannot assign to value: 'smallest'\
    \ is a 'let' constant\n            smallest = number\n            ^~~~~~~~\n/tmp/tmp_3xwga39.swift:9:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let smallest = numbers[0]\n\
    \    ^~~\n    var\n/tmp/tmp_3xwga39.swift:17:13: error: cannot assign to value:\
    \ 'largest' is a 'let' constant\n            largest = number\n            ^~~~~~~\n\
    /tmp/tmp_3xwga39.swift:10:5: note: change 'let' to 'var' to make it mutable\n\
    \    let largest = numbers[0]\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count > 1 else {\n        return (0.0,0.0)\n\
    \    }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n    for i\
    \ in 1..<numbers.count {\n        if numbers[i] > largest {\n            largest\
    \ = numbers[i]\n        }\n        if numbers[i] < smallest {\n            smallest\
    \ = numbers[i]\n        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpxu06_03y/tmpxu06_03y.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0e8df5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0e8aecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0e8aec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0e8aeb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxu06_03y                        0x000055a01869c6be <unavailable> + 5822

    5    libc.so.6                          0x00002af0e8fe1460 __libc_start_main +
    245

    6    tmpxu06_03y                        0x000055a01869c279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    if numbers.count < 2 {\n        return numbers[0],\
    \ numbers[0]\n    }\n\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        } else if number > largest {\n            largest = number\n\
    \        }\n    }\n\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmp7rl4bh66.swift:6:26: error: consecutive statements on a line must\
    \ be separated by ';'\n        return numbers[0], numbers[0]\n               \
    \          ^\n                         ;\n/tmp/tmp7rl4bh66.swift:6:26: error:\
    \ expected expression\n        return numbers[0], numbers[0]\n               \
    \          ^\n/tmp/tmp7rl4bh66.swift:6:23: error: cannot convert return expression\
    \ of type 'Double' to return type '(Double, Double)'\n        return numbers[0],\
    \ numbers[0]\n               ~~~~~~~^~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count > 1 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count > 2 else { return (numbers[0], numbers[1])\
    \ }\n\n    var smallest = numbers[0]\n    var largest = numbers[0]\n    for i\
    \ in 1..numbers.count {\n        if numbers[i] < smallest {\n            smallest\
    \ = numbers[i]\n        } else if numbers[i] > largest {\n            largest\
    \ = numbers[i]\n        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmply0wfp8t.swift:10:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..numbers.count {\n              ^~\n   \
    \           ...\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else { return (0.0, 0.0)\
    \ }\n    guard numbers.count <= 4 else { return (0.0, 0.0) }\n    guard numbers.count\
    \ % 2 == 0 else { return (0.0, 0.0) }\n\n    var smallest = numbers[0]\n    var\
    \ largest = numbers[0]\n    for i in 1..numbers.count {\n        if numbers[i]\
    \ < smallest {\n            smallest = numbers[i]\n        } else if numbers[i]\
    \ > largest {\n            largest = numbers[i]\n        }\n    }\n    return\
    \ (smallest, largest)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpznq5b46l.swift:11:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..numbers.count {\n              ^~\n   \
    \           ...\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else { return (0.0, 0.0)\
    \ }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n    for number\
    \ in numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpbflmku92/tmpbflmku92.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b132a2f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1329febb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1329feb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1329fea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbflmku92                        0x0000561c6aa7569e <unavailable> + 5790

    5    libc.so.6                          0x00002b132a4e0460 __libc_start_main +
    245

    6    tmpbflmku92                        0x0000561c6aa75259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else {\n        return (0,\
    \ 0)\n    }\n    guard numbers.count <= 100 else {\n        return (0, 0)\n  \
    \  }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n    for number\
    \ in numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpe3_bkgxz/tmpe3_bkgxz.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f342d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f33fc8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f33fc8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f33fc77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3_bkgxz                        0x0000562806d5d69e <unavailable> + 5790

    5    libc.so.6                          0x00002b6f344bd460 __libc_start_main +
    245

    6    tmpe3_bkgxz                        0x0000562806d5d259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else {\n        fatalError(\"\
    find_closest_elements: numbers must have at least two elements\")\n    }\n\n \
    \   var smallest = numbers[0]\n    var largest = numbers[0]\n    for i in 1..numbers.count\
    \ {\n        if numbers[i] < smallest {\n            smallest = numbers[i]\n \
    \       } else if numbers[i] > largest {\n            largest = numbers[i]\n \
    \       }\n    }\n\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpb7en05gi.swift:11:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..numbers.count {\n              ^~\n   \
    \           ...\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    if numbers.count < 2 {\n        return numbers[0],\
    \ numbers[0]\n    }\n\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmp9uobckqr.swift:6:26: error: consecutive statements on a line must\
    \ be separated by ';'\n        return numbers[0], numbers[0]\n               \
    \          ^\n                         ;\n/tmp/tmp9uobckqr.swift:6:26: error:\
    \ expected expression\n        return numbers[0], numbers[0]\n               \
    \          ^\n/tmp/tmp9uobckqr.swift:6:23: error: cannot convert return expression\
    \ of type 'Double' to return type '(Double, Double)'\n        return numbers[0],\
    \ numbers[0]\n               ~~~~~~~^~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count > 2 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count > 3 else { return (numbers[0], numbers[0]) }\n  \
    \  guard numbers.count > 4 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count > 5 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ > 6 else { return (numbers[0], numbers[0]) }\n    guard numbers.count > 7 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count > 8 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count > 9 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count > 10 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count > 11 else { return (numbers[0], numbers[0]) }\n \
    \   guard numbers.count > 12 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count > 13 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ > 14 else { return (numbers[0], numbers[0]) }\n    guard numbers.count > 15\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count > 16 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count > 17 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count > 18 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count > 19 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count > 20 else { return (numbers[0], numbers[0]) }\n \
    \   guard numbers.count > 21 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count > 22 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ > 23 else { return (numbers[0], numbers[0]) }\n    guard numbers.count > 24\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count > 25 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count > 26 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count > 27 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count > 28 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count > 29 else { return (numbers[0], numbers[0]) }\n \
    \   guard numbers.count > 30 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmptl6bjth5.swift:35:18: error: expected member name following '.'\n\
    \    guard numbers.\n                 ^\n/tmp/tmptl6bjth5.swift:35:19: error:\
    \ expected 'else' after 'guard' condition\n    guard numbers.\n              \
    \    ^\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    if numbers.count < 2 {\n        return numbers[0],\
    \ numbers[0]\n    }\n\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    var smallest_index = -1\n    var largest_index = -1\n\n    for i in 1..<numbers.count\
    \ {\n        if numbers[i] < smallest {\n            smallest = numbers[i]\n \
    \           smallest_index = i\n        }\n\n        if numbers[i] > largest {\n\
    \            largest = numbers[i]\n            largest_index = i\n        }\n\
    \    }\n\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpik7a0nwi.swift:6:26: error: consecutive statements on a line must\
    \ be separated by ';'\n        return numbers[0], numbers[0]\n               \
    \          ^\n                         ;\n/tmp/tmpik7a0nwi.swift:6:26: error:\
    \ expected expression\n        return numbers[0], numbers[0]\n               \
    \          ^\n/tmp/tmpik7a0nwi.swift:6:23: error: cannot convert return expression\
    \ of type 'Double' to return type '(Double, Double)'\n        return numbers[0],\
    \ numbers[0]\n               ~~~~~~~^~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    if numbers.count < 2 {\n        return numbers[0],\
    \ numbers[0]\n    }\n    \n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    \n    for number in numbers {\n        if number < smallest {\n         \
    \   smallest = number\n        }\n        if number > largest {\n            largest\
    \ = number\n        }\n    }\n    \n    return (smallest, largest)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpcepccxow.swift:6:26: error: consecutive statements on a line must\
    \ be separated by ';'\n        return numbers[0], numbers[0]\n               \
    \          ^\n                         ;\n/tmp/tmpcepccxow.swift:6:26: error:\
    \ expected expression\n        return numbers[0], numbers[0]\n               \
    \          ^\n/tmp/tmpcepccxow.swift:6:23: error: cannot convert return expression\
    \ of type 'Double' to return type '(Double, Double)'\n        return numbers[0],\
    \ numbers[0]\n               ~~~~~~~^~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count > 1 else {\n        return (0.0,0.0)\n\
    \    }\n    let smallest = numbers[0]\n    let largest = numbers[0]\n    for i\
    \ in 1..<numbers.count {\n        let current = numbers[i]\n        if current\
    \ < smallest {\n            smallest = current\n        }\n        if current\
    \ > largest {\n            largest = current\n        }\n    }\n    return (smallest,\
    \ largest)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpup6_y8z0.swift:13:13: error: cannot assign to value: 'smallest'\
    \ is a 'let' constant\n            smallest = current\n            ^~~~~~~~\n\
    /tmp/tmpup6_y8z0.swift:8:5: note: change 'let' to 'var' to make it mutable\n \
    \   let smallest = numbers[0]\n    ^~~\n    var\n/tmp/tmpup6_y8z0.swift:16:13:\
    \ error: cannot assign to value: 'largest' is a 'let' constant\n            largest\
    \ = current\n            ^~~~~~~\n/tmp/tmpup6_y8z0.swift:9:5: note: change 'let'\
    \ to 'var' to make it mutable\n    let largest = numbers[0]\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else { return (0.0, 0.0)\
    \ }\n    guard numbers.count <= 10 else { return (0.0, 0.0) }\n\n    var smallest\
    \ = numbers[0]\n    var largest = numbers[0]\n    var smallest_index = -1\n  \
    \  var largest_index = -1\n\n    for i in 1..<numbers.count {\n        if numbers[i]\
    \ < smallest {\n            smallest = numbers[i]\n            smallest_index\
    \ = i\n        }\n        if numbers[i] > largest {\n            largest = numbers[i]\n\
    \            largest_index = i\n        }\n    }\n\n    return (smallest, largest)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpy_bjw5cf/tmpy_bjw5cf.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67afc8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67af981b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67af981988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67af9807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy_bjw5cf                        0x000055cb8d0636be <unavailable> + 5822

    5    libc.so.6                          0x00002b67afe76460 __libc_start_main +
    245

    6    tmpy_bjw5cf                        0x000055cb8d063279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660013822
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n\
    \    }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n    for number\
    \ in numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmprkspmxv9/tmprkspmxv9.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8898682c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8898379b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8898379988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88983787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprkspmxv9                        0x0000563f2263b69e <unavailable> + 5790

    5    libc.so.6                          0x00002b889886e460 __libc_start_main +
    245

    6    tmprkspmxv9                        0x0000563f2263b259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    if numbers.count < 2 {\n        return numbers[0],\
    \ numbers[0]\n    }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmp36_4fvg6.swift:6:26: error: consecutive statements on a line must\
    \ be separated by ';'\n        return numbers[0], numbers[0]\n               \
    \          ^\n                         ;\n/tmp/tmp36_4fvg6.swift:6:26: error:\
    \ expected expression\n        return numbers[0], numbers[0]\n               \
    \          ^\n/tmp/tmp36_4fvg6.swift:6:23: error: cannot convert return expression\
    \ of type 'Double' to return type '(Double, Double)'\n        return numbers[0],\
    \ numbers[0]\n               ~~~~~~~^~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count > 1 else {\n        return numbers[0],\
    \ numbers[0]\n    }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpu_44au9l.swift:6:26: error: consecutive statements on a line must\
    \ be separated by ';'\n        return numbers[0], numbers[0]\n               \
    \          ^\n                         ;\n/tmp/tmpu_44au9l.swift:6:26: error:\
    \ expected expression\n        return numbers[0], numbers[0]\n               \
    \          ^\n/tmp/tmpu_44au9l.swift:6:23: error: cannot convert return expression\
    \ of type 'Double' to return type '(Double, Double)'\n        return numbers[0],\
    \ numbers[0]\n               ~~~~~~~^~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else {\n        return (0,\
    \ 0)\n    }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n   \
    \ for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpin1itjni/tmpin1itjni.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b546cdccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b546cac3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b546cac3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b546cac27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpin1itjni                        0x0000559980dd169e <unavailable> + 5790

    5    libc.so.6                          0x00002b546cfb8460 __libc_start_main +
    245

    6    tmpin1itjni                        0x0000559980dd1259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n\
    \    }\n    let smallest = numbers[0]\n    let largest = numbers[0]\n    for i\
    \ in 1..<numbers.count {\n        if numbers[i] > largest {\n            largest\
    \ = numbers[i]\n        }\n        if numbers[i] < smallest {\n            smallest\
    \ = numbers[i]\n        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpbk_1xn11.swift:12:13: error: cannot assign to value: 'largest'\
    \ is a 'let' constant\n            largest = numbers[i]\n            ^~~~~~~\n\
    /tmp/tmpbk_1xn11.swift:9:5: note: change 'let' to 'var' to make it mutable\n \
    \   let largest = numbers[0]\n    ^~~\n    var\n/tmp/tmpbk_1xn11.swift:15:13:\
    \ error: cannot assign to value: 'smallest' is a 'let' constant\n            smallest\
    \ = numbers[i]\n            ^~~~~~~~\n/tmp/tmpbk_1xn11.swift:8:5: note: change\
    \ 'let' to 'var' to make it mutable\n    let smallest = numbers[0]\n    ^~~\n\
    \    var\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count > 1 else {\n        return (0.0,0.0)\n\
    \    }\n    let smallest = numbers[0]\n    let largest = numbers[0]\n    for number\
    \ in numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpquxapdea.swift:12:13: error: cannot assign to value: 'smallest'\
    \ is a 'let' constant\n            smallest = number\n            ^~~~~~~~\n/tmp/tmpquxapdea.swift:8:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let smallest = numbers[0]\n\
    \    ^~~\n    var\n/tmp/tmpquxapdea.swift:15:13: error: cannot assign to value:\
    \ 'largest' is a 'let' constant\n            largest = number\n            ^~~~~~~\n\
    /tmp/tmpquxapdea.swift:9:5: note: change 'let' to 'var' to make it mutable\n \
    \   let largest = numbers[0]\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n\
    \    }\n\n    var smallest = numbers[0]\n    var largest = numbers[0]\n    var\
    \ smallest_index = -1\n    var largest_index = -1\n\n    for i in 1..<numbers.count\
    \ {\n        if numbers[i] < smallest {\n            smallest = numbers[i]\n \
    \           smallest_index = i\n        }\n        if numbers[i] > largest {\n\
    \            largest = numbers[i]\n            largest_index = i\n        }\n\
    \    }\n\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpkmn1cn8c/tmpkmn1cn8c.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad849235c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad848f2cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad848f2c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad848f2b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmn1cn8c                        0x00005585d43666be <unavailable> + 5822

    5    libc.so.6                          0x00002ad849421460 __libc_start_main +
    245

    6    tmpkmn1cn8c                        0x00005585d4366279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660013822
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        } else if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpgxnulirk/tmpgxnulirk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b652c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b64fbdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b64fbd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b64fbc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxnulirk                        0x0000555d095f464e <unavailable> + 5710

    5    libc.so.6                          0x00002b7b654b2460 __libc_start_main +
    245

    6    tmpgxnulirk                        0x0000555d095f4209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 3 else { return (numbers[0], numbers[0])\
    \ }\n\n    var smallest = numbers[0]\n    var largest = numbers[0]\n    var smallest_index\
    \ = -1\n    var largest_index = -1\n\n    for i in 1..numbers.count {\n      \
    \  if numbers[i] < smallest {\n            smallest = numbers[i]\n           \
    \ smallest_index = i\n        }\n        if numbers[i] > largest {\n         \
    \   largest = numbers[i]\n            largest_index = i\n        }\n    }\n\n\
    \    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpzkkyd06k.swift:13:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..numbers.count {\n              ^~\n   \
    \           ...\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else {\n        return (0,\
    \ 0)\n    }\n\n    var smallest = numbers[0]\n    var largest = numbers[0]\n \
    \   for i in 1..numbers.count {\n        if numbers[i] < smallest {\n        \
    \    smallest = numbers[i]\n        }\n        if numbers[i] > largest {\n   \
    \         largest = numbers[i]\n        }\n    }\n\n    return (smallest, largest)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpu_mmkah3.swift:11:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..numbers.count {\n              ^~\n   \
    \           ...\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    if numbers.count < 2 {\n        return numbers[0],\
    \ numbers[0]\n    }\n    \n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    \n    for number in numbers {\n        if number < smallest {\n         \
    \   smallest = number\n        }\n        if number > largest {\n            largest\
    \ = number\n        }\n    }\n    \n    return (smallest, largest)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpcepccxow.swift:6:26: error: consecutive statements on a line must\
    \ be separated by ';'\n        return numbers[0], numbers[0]\n               \
    \          ^\n                         ;\n/tmp/tmpcepccxow.swift:6:26: error:\
    \ expected expression\n        return numbers[0], numbers[0]\n               \
    \          ^\n/tmp/tmpcepccxow.swift:6:23: error: cannot convert return expression\
    \ of type 'Double' to return type '(Double, Double)'\n        return numbers[0],\
    \ numbers[0]\n               ~~~~~~~^~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n\
    \    }\n    \n    var smallest = numbers[0]\n    var largest = numbers[0]\n  \
    \  \n    for i in 1..numbers.count {\n        if numbers[i] < smallest {\n   \
    \         smallest = numbers[i]\n        }\n        if numbers[i] > largest {\n\
    \            largest = numbers[i]\n        }\n    }\n    \n    return (smallest,\
    \ largest)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmphmlh9_ua.swift:12:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..numbers.count {\n              ^~\n   \
    \           ...\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else { return (0.0, 0.0)\
    \ }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n    for number\
    \ in numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpbflmku92/tmpbflmku92.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b132a2f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1329febb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1329feb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1329fea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbflmku92                        0x0000561c6aa7569e <unavailable> + 5790

    5    libc.so.6                          0x00002b132a4e0460 __libc_start_main +
    245

    6    tmpbflmku92                        0x0000561c6aa75259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 3 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 4 else { return (numbers[0], numbers[0]) }\n \
    \   guard numbers.count >= 5 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 6 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 7 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 8\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 9 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 10 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 11 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 12 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 13 else { return (numbers[0], numbers[0]) }\n\
    \    guard numbers.count >= 14 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 15 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 16 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 17\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 18 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 19 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 20 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 21 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 22 else { return (numbers[0], numbers[0]) }\n\
    \    guard numbers.count >= 23 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 24 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 25 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 26\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 27 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 28 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 29 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 30 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 31 else { return (numbers[0], numbers[0]) }\n\
    \    guard \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpq6s829l8.swift:35:10: error: expected expression, var, let or case\
    \ in 'guard' condition\n    guard \n         ^\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count > 1 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count > 2 else { return (numbers[0], numbers[1])\
    \ }\n    guard numbers.count > 3 else { return (numbers[0], numbers[2]) }\n  \
    \  guard numbers.count > 4 else { return (numbers[0], numbers[3]) }\n    guard\
    \ numbers.count > 5 else { return (numbers[0], numbers[4]) }\n    guard numbers.count\
    \ > 6 else { return (numbers[0], numbers[5]) }\n    guard numbers.count > 7 else\
    \ { return (numbers[0], numbers[6]) }\n    guard numbers.count > 8 else { return\
    \ (numbers[0], numbers[7]) }\n    guard numbers.count > 9 else { return (numbers[0],\
    \ numbers[8]) }\n    guard numbers.count > 10 else { return (numbers[0], numbers[9])\
    \ }\n    guard numbers.count > 11 else { return (numbers[0], numbers[10]) }\n\
    \    guard numbers.count > 12 else { return (numbers[0], numbers[11]) }\n    guard\
    \ numbers.count > 13 else { return (numbers[0], numbers[12]) }\n    guard numbers.count\
    \ > 14 else { return (numbers[0], numbers[13]) }\n    guard numbers.count > 15\
    \ else { return (numbers[0], numbers[14]) }\n    guard numbers.count > 16 else\
    \ { return (numbers[0], numbers[15]) }\n    guard numbers.count > 17 else { return\
    \ (numbers[0], numbers[16]) }\n    guard numbers.count > 18 else { return (numbers[0],\
    \ numbers[17]) }\n    guard numbers.count > 19 else { return (numbers[0], numbers[18])\
    \ }\n    guard numbers.count > 20 else { return (numbers[0], numbers[19]) }\n\
    \    guard numbers.count > 21 else { return (numbers[0], numbers[20]) }\n    guard\
    \ numbers.count > 22 else { return (numbers[0], numbers[21]) }\n    guard numbers.count\
    \ > 23 else { return (numbers[0], numbers[22]) }\n    guard numbers.count > 24\
    \ else { return (numbers[0], numbers[23]) }\n    guard numbers.count > 25 else\
    \ { return (numbers[0], numbers[24]) }\n    guard numbers.count > 26 else { return\
    \ (numbers[0], numbers[25]) }\n    guard numbers.count > 27 else { return (numbers[0],\
    \ numbers[26]) }\n    guard numbers.count > 28 else { return (numbers[0], numbers[27])\
    \ }\n    guard numbers.count > 29 else { return (numbers[0], number\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpbo8ksny5.swift:34:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpbo8ksny5.swift:33:44: note: to match this opening '('\n    guard numbers.count\
    \ > 29 else { return (numbers[0], number\n                                   \
    \        ^\n/tmp/tmpbo8ksny5.swift:53:80: error: expected '}' at end of brace\
    \ statement\nassert(find_closest_elements(numbers: [1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == (2.2, 3.1))\n                                                           \
    \                    ^\n/tmp/tmpbo8ksny5.swift:4:67: note: to match this opening\
    \ '{'\nfunc find_closest_elements(numbers: [Double]) -> (Double, Double) {\n \
    \                                                                 ^\n/tmp/tmpbo8ksny5.swift:33:57:\
    \ error: cannot find 'number' in scope\n    guard numbers.count > 29 else { return\
    \ (numbers[0], number\n                                                      \
    \  ^~~~~~\n/tmp/tmpbo8ksny5.swift:37:6: error: operator functions can only be\
    \ declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else { return (0.0, 0.0)\
    \ }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n    for number\
    \ in numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpbflmku92/tmpbflmku92.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b132a2f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1329febb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1329feb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1329fea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbflmku92                        0x0000561c6aa7569e <unavailable> + 5790

    5    libc.so.6                          0x00002b132a4e0460 __libc_start_main +
    245

    6    tmpbflmku92                        0x0000561c6aa75259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count > 1 else {\n        return (0.0,0.0)\n\
    \    }\n    \n    var smallest = numbers[0]\n    var largest = numbers[0]\n  \
    \  \n    for number in numbers {\n        if number < smallest {\n           \
    \ smallest = number\n        }\n        if number > largest {\n            largest\
    \ = number\n        }\n    }\n    \n    return (smallest, largest)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp4pk70can/tmp4pk70can.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0dcc5b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0dcc2aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0dcc2aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0dcc2a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4pk70can                        0x0000560ed371169e <unavailable> + 5790

    5    libc.so.6                          0x00002b0dcc79f460 __libc_start_main +
    245

    6    tmp4pk70can                        0x0000560ed3711259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013822
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 3 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 4 else { return (numbers[0], numbers[0]) }\n \
    \   guard numbers.count >= 5 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 6 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 7 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 8\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 9 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 10 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 11 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 12 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 13 else { return (numbers[0], numbers[0]) }\n\
    \    guard numbers.count >= 14 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 15 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 16 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 17\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 18 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 19 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 20 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 21 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 22 else { return (numbers[0], numbers[0]) }\n\
    \    guard numbers.count >= 23 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 24 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 25 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 26\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 27 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 28 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 29 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 30 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 31 else { return (numbers[0], numbers[0]) }\n\
    \    guard \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpq6s829l8.swift:35:10: error: expected expression, var, let or case\
    \ in 'guard' condition\n    guard \n         ^\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    if numbers.count < 2 {\n        return numbers[0],\
    \ numbers[0]\n    }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmp36_4fvg6.swift:6:26: error: consecutive statements on a line must\
    \ be separated by ';'\n        return numbers[0], numbers[0]\n               \
    \          ^\n                         ;\n/tmp/tmp36_4fvg6.swift:6:26: error:\
    \ expected expression\n        return numbers[0], numbers[0]\n               \
    \          ^\n/tmp/tmp36_4fvg6.swift:6:23: error: cannot convert return expression\
    \ of type 'Double' to return type '(Double, Double)'\n        return numbers[0],\
    \ numbers[0]\n               ~~~~~~~^~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    if numbers.count < 2 {\n        return (0.0,0.0)\n\
    \    }\n    \n    var smallest = numbers[0]\n    var largest = numbers[0]\n  \
    \  \n    for i in 1..numbers.count {\n        if numbers[i] < smallest {\n   \
    \         smallest = numbers[i]\n        }\n        if numbers[i] > largest {\n\
    \            largest = numbers[i]\n        }\n    }\n    \n    return (smallest,\
    \ largest)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpix16kn_w.swift:12:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..numbers.count {\n              ^~\n   \
    \           ...\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    let smallest = numbers[0]\n    let largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmp6t7a7_ao.swift:9:13: error: cannot assign to value: 'smallest'\
    \ is a 'let' constant\n            smallest = number\n            ^~~~~~~~\n/tmp/tmp6t7a7_ao.swift:5:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let smallest = numbers[0]\n\
    \    ^~~\n    var\n/tmp/tmp6t7a7_ao.swift:12:13: error: cannot assign to value:\
    \ 'largest' is a 'let' constant\n            largest = number\n            ^~~~~~~\n\
    /tmp/tmp6t7a7_ao.swift:6:5: note: change 'let' to 'var' to make it mutable\n \
    \   let largest = numbers[0]\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 3 else { return (numbers[0], numbers[0])\
    \ }\n\n    var smallest = numbers[0]\n    var largest = numbers[0]\n    for number\
    \ in numbers {\n        if number < smallest {\n            smallest = number\n\
    \        } else if number > largest {\n            largest = number\n        }\n\
    \    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpvjlg91vv/tmpvjlg91vv.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaae1426c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaae111db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaae111d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaae111c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvjlg91vv                        0x0000562024d3869e <unavailable> + 5790

    5    libc.so.6                          0x00002aaae1612460 __libc_start_main +
    245

    6    tmpvjlg91vv                        0x0000562024d38259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013822
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    if numbers.count < 2 {\n        return numbers[0],\
    \ numbers[0]\n    }\n\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    var smallestIndex = -1\n    var largestIndex = -1\n\n    for index in 1..numbers.count\
    \ {\n        if numbers[index] < smallest {\n            smallest = numbers[index]\n\
    \            smallestIndex = index\n        }\n        if numbers[index] > largest\
    \ {\n            largest = numbers[index]\n            largestIndex = index\n\
    \        }\n    }\n\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmp_vc_re72.swift:6:26: error: consecutive statements on a line must\
    \ be separated by ';'\n        return numbers[0], numbers[0]\n               \
    \          ^\n                         ;\n/tmp/tmp_vc_re72.swift:6:26: error:\
    \ expected expression\n        return numbers[0], numbers[0]\n               \
    \          ^\n/tmp/tmp_vc_re72.swift:6:23: error: cannot convert return expression\
    \ of type 'Double' to return type '(Double, Double)'\n        return numbers[0],\
    \ numbers[0]\n               ~~~~~~~^~~\n/tmp/tmp_vc_re72.swift:14:19: error:\
    \ cannot find operator '..' in scope; did you mean '...'?\n    for index in 1..numbers.count\
    \ {\n                  ^~\n                  ...\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else { return (numbers[0],\
    \ numbers[0]) }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for i in 1..numbers.count {\n        if numbers[i] < smallest {\n       \
    \     smallest = numbers[i]\n        } else if numbers[i] > largest {\n      \
    \      largest = numbers[i]\n        }\n    }\n    return (smallest, largest)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpsjxrqjgz.swift:8:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..numbers.count {\n              ^~\n   \
    \           ...\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else { return (0.0, 0.0)\
    \ }\n\n    var smallest = numbers[0]\n    var largest = numbers[0]\n    for i\
    \ in 1..numbers.count {\n        if numbers[i] > largest {\n            largest\
    \ = numbers[i]\n        }\n        if numbers[i] < smallest {\n            smallest\
    \ = numbers[i]\n        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpmeskjt4b.swift:9:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..numbers.count {\n              ^~\n   \
    \           ...\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n\
    \    }\n    guard numbers.count > 1 else {\n        return (0.0,0.0)\n    }\n\
    \    let smallest = numbers[0]\n    let largest = numbers[0]\n    for i in 1..numbers.count\
    \ {\n        if numbers[i] > largest {\n            largest = numbers[i]\n   \
    \     }\n        if numbers[i] < smallest {\n            smallest = numbers[i]\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmp5bizil6a.swift:13:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..numbers.count {\n              ^~\n   \
    \           ...\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n\
    \    }\n    let smallest = numbers[0]\n    let largest = numbers[0]\n    for i\
    \ in 1..<numbers.count {\n        if numbers[i] < smallest {\n            smallest\
    \ = numbers[i]\n        }\n        if numbers[i] > largest {\n            largest\
    \ = numbers[i]\n        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmp0ef5uocj.swift:12:13: error: cannot assign to value: 'smallest'\
    \ is a 'let' constant\n            smallest = numbers[i]\n            ^~~~~~~~\n\
    /tmp/tmp0ef5uocj.swift:8:5: note: change 'let' to 'var' to make it mutable\n \
    \   let smallest = numbers[0]\n    ^~~\n    var\n/tmp/tmp0ef5uocj.swift:15:13:\
    \ error: cannot assign to value: 'largest' is a 'let' constant\n            largest\
    \ = numbers[i]\n            ^~~~~~~\n/tmp/tmp0ef5uocj.swift:9:5: note: change\
    \ 'let' to 'var' to make it mutable\n    let largest = numbers[0]\n    ^~~\n \
    \   var\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else { return (numbers[0],\
    \ numbers[0]) }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for i in 1..numbers.count {\n        if numbers[i] < smallest {\n       \
    \     smallest = numbers[i]\n        } else if numbers[i] > largest {\n      \
    \      largest = numbers[i]\n        }\n    }\n    return (smallest, largest)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpsjxrqjgz.swift:8:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..numbers.count {\n              ^~\n   \
    \           ...\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n\
    \    }\n    let smallest = numbers[0]\n    let largest = numbers[0]\n    for i\
    \ in 1..<numbers.count {\n        if numbers[i] < smallest {\n            smallest\
    \ = numbers[i]\n        }\n        if numbers[i] > largest {\n            largest\
    \ = numbers[i]\n        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmp0ef5uocj.swift:12:13: error: cannot assign to value: 'smallest'\
    \ is a 'let' constant\n            smallest = numbers[i]\n            ^~~~~~~~\n\
    /tmp/tmp0ef5uocj.swift:8:5: note: change 'let' to 'var' to make it mutable\n \
    \   let smallest = numbers[0]\n    ^~~\n    var\n/tmp/tmp0ef5uocj.swift:15:13:\
    \ error: cannot assign to value: 'largest' is a 'let' constant\n            largest\
    \ = numbers[i]\n            ^~~~~~~\n/tmp/tmp0ef5uocj.swift:9:5: note: change\
    \ 'let' to 'var' to make it mutable\n    let largest = numbers[0]\n    ^~~\n \
    \   var\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else { return (0.0, 0.0)\
    \ }\n    guard numbers.count <= 4 else { return (0.0, 0.0) }\n\n    var smallest\
    \ = numbers[0]\n    var largest = numbers[0]\n    var smallest_index = -1\n  \
    \  var largest_index = -1\n\n    for i in 1..numbers.count {\n        if numbers[i]\
    \ < smallest {\n            smallest = numbers[i]\n            smallest_index\
    \ = i\n        }\n        if numbers[i] > largest {\n            largest = numbers[i]\n\
    \            largest_index = i\n        }\n    }\n\n    return (smallest, largest)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpmm36729k.swift:13:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..numbers.count {\n              ^~\n   \
    \           ...\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    if numbers.count < 2 {\n        return numbers[0],\
    \ numbers[0]\n    }\n\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpc2kn8qi3.swift:6:26: error: consecutive statements on a line must\
    \ be separated by ';'\n        return numbers[0], numbers[0]\n               \
    \          ^\n                         ;\n/tmp/tmpc2kn8qi3.swift:6:26: error:\
    \ expected expression\n        return numbers[0], numbers[0]\n               \
    \          ^\n/tmp/tmpc2kn8qi3.swift:6:23: error: cannot convert return expression\
    \ of type 'Double' to return type '(Double, Double)'\n        return numbers[0],\
    \ numbers[0]\n               ~~~~~~~^~~\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count > 1 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count > 2 else { return (numbers[0], numbers[1])\
    \ }\n    guard numbers.count > 3 else { return (numbers[0], numbers[2]) }\n  \
    \  guard numbers.count > 4 else { return (numbers[0], numbers[3]) }\n    guard\
    \ numbers.count > 5 else { return (numbers[0], numbers[4]) }\n    guard numbers.count\
    \ > 6 else { return (numbers[0], numbers[5]) }\n    guard numbers.count > 7 else\
    \ { return (numbers[0], numbers[6]) }\n    guard numbers.count > 8 else { return\
    \ (numbers[0], numbers[7]) }\n    guard numbers.count > 9 else { return (numbers[0],\
    \ numbers[8]) }\n    guard numbers.count > 10 else { return (numbers[0], numbers[9])\
    \ }\n    guard numbers.count > 11 else { return (numbers[0], numbers[10]) }\n\
    \    guard numbers.count > 12 else { return (numbers[0], numbers[11]) }\n    guard\
    \ numbers.count > 13 else { return (numbers[0], numbers[12]) }\n    guard numbers.count\
    \ > 14 else { return (numbers[0], numbers[13]) }\n    guard numbers.count > 15\
    \ else { return (numbers[0], numbers[14]) }\n    guard numbers.count > 16 else\
    \ { return (numbers[0], numbers[15]) }\n    guard numbers.count > 17 else { return\
    \ (numbers[0], numbers[16]) }\n    guard numbers.count > 18 else { return (numbers[0],\
    \ numbers[17]) }\n    guard numbers.count > 19 else { return (numbers[0], numbers[18])\
    \ }\n    guard numbers.count > 20 else { return (numbers[0], numbers[19]) }\n\
    \    guard numbers.count > 21 else { return (numbers[0], numbers[20]) }\n    guard\
    \ numbers.count > 22 ? { return (numbers[0], numbers[21]) }\n    guard numbers.count\
    \ > 23 ? { return (numbers[0], numbers[22]) }\n    guard numbers.count > 24 ?\
    \ { return (numbers[0], numbers[23]) }\n    guard numbers.count > 25 ? { return\
    \ (numbers[0], numbers[24]) }\n    guard numbers.count > 26 ? { return (numbers[0],\
    \ numbers[25]) }\n    guard numbers.count > 27 ? { return (numbers[0], numbers[26])\
    \ }\n    guard numbers.count > 28 ? { return (numbers[0], numbers[27]) }\n   \
    \ guard numbers.count > 29 ? { return (numbers[0], number\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpc6_6ehku.swift:26:30: error: expected ':' after '? ...' in ternary\
    \ expression\n    guard numbers.count > 22 ? { return (numbers[0], numbers[21])\
    \ }\n                             ^\n/tmp/tmpc6_6ehku.swift:27:30: error: expected\
    \ ':' after '? ...' in ternary expression\n    guard numbers.count > 23 ? { return\
    \ (numbers[0], numbers[22]) }\n                             ^\n/tmp/tmpc6_6ehku.swift:28:30:\
    \ error: expected ':' after '? ...' in ternary expression\n    guard numbers.count\
    \ > 24 ? { return (numbers[0], numbers[23]) }\n                             ^\n\
    /tmp/tmpc6_6ehku.swift:29:30: error: expected ':' after '? ...' in ternary expression\n\
    \    guard numbers.count > 25 ? { return (numbers[0], numbers[24]) }\n       \
    \                      ^\n/tmp/tmpc6_6ehku.swift:30:30: error: expected ':' after\
    \ '? ...' in ternary expression\n    guard numbers.count > 26 ? { return (numbers[0],\
    \ numbers[25]) }\n                             ^\n/tmp/tmpc6_6ehku.swift:31:30:\
    \ error: expected ':' after '? ...' in ternary expression\n    guard numbers.count\
    \ > 27 ? { return (numbers[0], numbers[26]) }\n                             ^\n\
    /tmp/tmpc6_6ehku.swift:32:30: error: expected ':' after '? ...' in ternary expression\n\
    \    guard numbers.count > 28 ? { return (numbers[0], numbers[27]) }\n       \
    \                      ^\n/tmp/tmpc6_6ehku.swift:34:1: error: expected ')' in\
    \ expression list\n}\n^\n/tmp/tmpc6_6ehku.swift:33:41: note: to match this opening\
    \ '('\n    guard numbers.count > 29 ? { return (numbers[0], number\n         \
    \                               ^\n/tmp/tmpc6_6ehku.swift:33:30: error: expected\
    \ ':' after '? ...' in ternary expression\n    guard numbers.count > 29 ? { return\
    \ (numbers[0], number\n                             ^\n/tmp/tmpc6_6ehku.swift:53:80:\
    \ error: expected '}' at end of brace statement\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n                                \
    \                                               ^\n/tmp/tmpc6_6ehku.swift:4:67:\
    \ note: to match this opening '{'\nfunc find_closest_elements(numbers: [Doubl"
  stdout: ''
  timestamp: 1660013822
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n\
    \    }\n    var smallest = numbers[0]\n    var largest = numbers[0]\n    for number\
    \ in numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmprkspmxv9/tmprkspmxv9.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8898682c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8898379b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8898379988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88983787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprkspmxv9                        0x0000563f2263b69e <unavailable> + 5790

    5    libc.so.6                          0x00002b889886e460 __libc_start_main +
    245

    6    tmprkspmxv9                        0x0000563f2263b259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 3 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 4 else { return (numbers[0], numbers[0]) }\n \
    \   guard numbers.count >= 5 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 6 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 7 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 8\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 9 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 10 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 11 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 12 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 13 else { return (numbers[0], numbers[0]) }\n\
    \    guard numbers.count >= 14 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 15 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 16 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 17\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 18 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 19 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 20 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 21 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 22 else { return (numbers[0], numbers[0]) }\n\
    \    guard numbers.count >= 23 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 24 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 25 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 26\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 27 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 28 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 29 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 30 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 31 else { return (numbers[0], numbers[0]) }\n\
    \    guard \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpq6s829l8.swift:35:10: error: expected expression, var, let or case\
    \ in 'guard' condition\n    guard \n         ^\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 3 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 4 else { return (numbers[0], numbers[0]) }\n \
    \   guard numbers.count >= 5 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 6 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 7 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 8\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 9 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 10 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 11 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 12 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 13 else { return (numbers[0], numbers[0]) }\n\
    \    guard numbers.count >= 14 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 15 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 16 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 17\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 18 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 19 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 20 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 21 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 22 else { return (numbers[0], numbers[0]) }\n\
    \    guard numbers.count >= 23 else { return (numbers[0], numbers[0]) }\n    guard\
    \ numbers.count >= 24 else { return (numbers[0], numbers[0]) }\n    guard numbers.count\
    \ >= 25 else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 26\
    \ else { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 27 else\
    \ { return (numbers[0], numbers[0]) }\n    guard numbers.count >= 28 else { return\
    \ (numbers[0], numbers[0]) }\n    guard numbers.count >= 29 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 30 else { return (numbers[0], numbers[0])\
    \ }\n    guard numbers.count >= 31 else { return (numbers[0], numbers[0]) }\n\
    \    guard \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpq6s829l8.swift:35:10: error: expected expression, var, let or case\
    \ in 'guard' condition\n    guard \n         ^\n"
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    let smallest = numbers[0]\n    let largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmp6t7a7_ao.swift:9:13: error: cannot assign to value: 'smallest'\
    \ is a 'let' constant\n            smallest = number\n            ^~~~~~~~\n/tmp/tmp6t7a7_ao.swift:5:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let smallest = numbers[0]\n\
    \    ^~~\n    var\n/tmp/tmp6t7a7_ao.swift:12:13: error: cannot assign to value:\
    \ 'largest' is a 'let' constant\n            largest = number\n            ^~~~~~~\n\
    /tmp/tmp6t7a7_ao.swift:6:5: note: change 'let' to 'var' to make it mutable\n \
    \   let largest = numbers[0]\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpudk0v0gq/tmpudk0v0gq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0581439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0581130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0581130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b058112f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudk0v0gq                        0x000055683848664e <unavailable> + 5710

    5    libc.so.6                          0x00002b0581625460 __libc_start_main +
    245

    6    tmpudk0v0gq                        0x0000556838486209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013821
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else { return (numbers[0],\
    \ numbers[0]) }\n    guard numbers.count >= 3 else { return (numbers[0], numbers[0])\
    \ }\n\n    var smallest = numbers[0]\n    var largest = numbers[0]\n    var smallest_index\
    \ = -1\n    var largest_index = -1\n\n    for i in 1..numbers.count {\n      \
    \  if numbers[i] < smallest {\n            smallest = numbers[i]\n           \
    \ smallest_index = i\n        }\n        if numbers[i] > largest {\n         \
    \   largest = numbers[i]\n            largest_index = i\n        }\n    }\n\n\
    \    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpzkkyd06k.swift:13:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..numbers.count {\n              ^~\n   \
    \           ...\n"
  stdout: ''
  timestamp: 1660013822
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count > 1 else {\n        return (0.0,0.0)\n\
    \    }\n    guard numbers.count >= 2 else {\n        return (0.0,0.0)\n    }\n\
    \    var smallest = numbers[0]\n    var largest = numbers[0]\n    for i in 1..numbers.count\
    \ {\n        if numbers[i] < smallest {\n            smallest = numbers[i]\n \
    \       }\n        if numbers[i] > largest {\n            largest = numbers[i]\n\
    \        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpw6xzoqgc.swift:13:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..numbers.count {\n              ^~\n   \
    \           ...\n"
  stdout: ''
  timestamp: 1660013822
