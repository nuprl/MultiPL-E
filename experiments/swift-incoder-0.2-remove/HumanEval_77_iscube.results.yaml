language: swift
name: HumanEval_77_iscube
results:
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpru9a27nv/tmpru9a27nv.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdd622fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdd5f26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdd5f26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdd5f257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpru9a27nv                        0x000055c2a59e82b7 <unavailable> + 4791

    5    libc.so.6                          0x00002afdd641b460 __libc_start_main +
    245

    6    tmpru9a27nv                        0x000055c2a59e7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   switch a {\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n\
    \    case 6:\n    case 7:\n    case 8:\n    case 9:\n    case 10:\n    case 11:\n\
    \    case 12:\n    case 13:\n    case 14:\n    case 15:\n    case 16:\n    case\
    \ 17:\n    case 18:\n    case 19:\n    case 20:\n    case 21:\n    case 22:\n\
    \    case 23:\n    case 24:\n    case 25:\n    case 26:\n    case 27:\n    case\
    \ 28:\n    case 29:\n    case 30:\n    case 31:\n    case 32:\n    case 33:\n\
    \    case 34:\n    case 35:\n    case 36:\n    case 37:\n    case 38:\n    case\
    \ 39:\n    case 40:\n    case 41:\n    case 42:\n    case 43:\n    case 44:\n\
    \    case 45:\n    case 46:\n    case 47:\n    case 48:\n    case 49:\n    case\
    \ 50:\n    case 51:\n    case 52:\n    case 53:\n    case 54:\n    case 55:\n\
    \    case 56:\n    case 57:\n    case 58:\n    case 59:\n    case 60:\n    case\
    \ 61:\n    case 62:\n    case 63:\n    case 64:\n    case 65:\n    case 66:\n\
    \    case 67:\n    case 68:\n    case 69:\n    case 70:\n    case 71:\n    case\
    \ 72:\n    case 73:\n    case 74:\n    case 75:\n    case 76:\n    case 77:\n\
    \    case 78:\n    case 79:\n    case 80:\n    case 81:\n    case 82:\n    case\
    \ 83:\n    case 84:\n    case 85:\n    case 86:\n    case 87:\n    case 88:\n\
    \    case 89:\n    case 90:\n    case 91:\n    case 92:\n    case 93:\n    case\
    \ 94:\n    case 95:\n    case 96:\n    case 97:\n    case 98:\n    case 99:\n\
    \    case 100:\n    case 101:\n    case 102:\n    case 103:\n    case 104:\n \
    \   case 105:\n    case 106:\n    case 107:\n    case 108:\n    case 109:\n  \
    \  case 110:\n    case 111:\n    case 112:\n    case 113:\n    case 114:\n   \
    \ case 115:\n    case 116:\n    case 117:\n    case 118:\n    case 119:\n    case\
    \ 120:\n    case 121:\n    case 122:\n    case 123:\n    case 124:\n    case 125:\n\
    \    case 126:\n    case 127:\n    case 128:\n    case 129:\n    case 130:\n \
    \   case 131:\n    case 132:\n    case 133:\n    case 134:\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmps_kkk3gi.swift:8:5: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n    case 1:\n    ^~~~~~~\n            break\n\
    /tmp/tmps_kkk3gi.swift:9:5: error: 'case' label in a 'switch' must have at least\
    \ one executable statement\n    case 2:\n    ^~~~~~~\n            break\n/tmp/tmps_kkk3gi.swift:10:5:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \    case 3:\n    ^~~~~~~\n            break\n/tmp/tmps_kkk3gi.swift:11:5: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \ case 4:\n    ^~~~~~~\n            break\n/tmp/tmps_kkk3gi.swift:12:5: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \ case 5:\n    ^~~~~~~\n            break\n/tmp/tmps_kkk3gi.swift:13:5: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \ case 6:\n    ^~~~~~~\n            break\n/tmp/tmps_kkk3gi.swift:14:5: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \ case 7:\n    ^~~~~~~\n            break\n/tmp/tmps_kkk3gi.swift:15:5: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \ case 8:\n    ^~~~~~~\n            break\n/tmp/tmps_kkk3gi.swift:16:5: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \ case 9:\n    ^~~~~~~\n            break\n/tmp/tmps_kkk3gi.swift:17:5: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \ case 10:\n    ^~~~~~~~\n             break\n/tmp/tmps_kkk3gi.swift:18:5: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \ case 11:\n    ^~~~~~~~\n             break\n/tmp/tmps_kkk3gi.swift:19:5: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \ case 12:\n    ^~~~~~~~\n             break\n/tmp/tmps_kkk3gi.swift:20:5: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \ case 13:\n    ^~~~~~~~\n             break\n/tmp/tmps_kkk3gi.swift:21:5: error:\
    \ 'case' label in a 'switch' must have at least one executable stat"
  stdout: ''
  timestamp: 1659979791
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   switch a {\n    case 1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169,\
    \ 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576, 625, 676, 729, 784, 841,\
    \ 900, 961, 1024, 1089, 1156, 1225, 1281, 1344, 1417, 1486, 1549, 1624, 1689,\
    \ 1754, 1821, 1888, 1956, 2033, 2110, 2180, 2239, 2316, 2381, 2448, 2525, 2596,\
    \ 2653, 2720, 2779, 2846, 2921, 2984, 3049, 3120, 3189, 3257, 3334, 3401, 3468,\
    \ 3535, 3600, 3676, 3745, 3822, 3881, 3949, 4016, 4101, 4164, 4229, 4314, 4379,\
    \ 4454, 4522, 4591, 4659, 4736, 4811, 4876, 4941, 5008, 5069, 5144, 5211, 5276,\
    \ 5341, 5407, 5472, 5537, 5596, 5653, 5720, 5785, 5852, 5917, 5971, 6034, 6099,\
    \ 6156, 6224, 6291, 6366, 6441, 6508, 6569, 6644, 6721, 6781, 6846, 6923, 6991,\
    \ 7058, 7124, 7191, 7264, 7319, 7385, 7442, 7501, 7576, 7631, 7685, 7741, 7808,\
    \ 7876, 7933, 8001, 8066, 8132, 8192, 8255, 8311, 8385, 8450, 8516, 8581, 8646,\
    \ 8701, 8767, 8834, 8910, 8974, 9039, 9106, 9163, 9221, 9285, 9351, 9415, 9471,\
    \ 9537, 9593, 9651, 9715, 9771, 9836, 9900, 9966, 10032, 10100, 10166, 10222,\
    \ 10288, 10356, 10432, 10500, 10565, 10632, 10698, 10765, 10831, 10896, 10952,\
    \ 11018, 11084, 11151, 11226, 11301, 11366, 11432, 11498, 11565, 11631, 11697,\
    \ 11762, 11821, 11886, 11952, 12018, 12084, 12151, 12226, 12300, 12367, 12442,\
    \ 12510, 12576, 12642, 12708, 12775, 12839, 12916, 12981, 13044, 13108, 13165,\
    \ 13231, 13297, 13362, 13431, 13507, 1356\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmprleuh56u.swift:8:1344: error: expected ':' after 'case'\n    case\
    \ 1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324,\
    \ 361, 400, 441, 484, 529, 576, 625, 676, 729, 784, 841, 900, 961, 1024, 1089,\
    \ 1156, 1225, 1281, 1344, 1417, 1486, 1549, 1624, 1689, 1754, 1821, 1888, 1956,\
    \ 2033, 2110, 2180, 2239, 2316, 2381, 2448, 2525, 2596, 2653, 2720, 2779, 2846,\
    \ 2921, 2984, 3049, 3120, 3189, 3257, 3334, 3401, 3468, 3535, 3600, 3676, 3745,\
    \ 3822, 3881, 3949, 4016, 4101, 4164, 4229, 4314, 4379, 4454, 4522, 4591, 4659,\
    \ 4736, 4811, 4876, 4941, 5008, 5069, 5144, 5211, 5276, 5341, 5407, 5472, 5537,\
    \ 5596, 5653, 5720, 5785, 5852, 5917, 5971, 6034, 6099, 6156, 6224, 6291, 6366,\
    \ 6441, 6508, 6569, 6644, 6721, 6781, 6846, 6923, 6991, 7058, 7124, 7191, 7264,\
    \ 7319, 7385, 7442, 7501, 7576, 7631, 7685, 7741, 7808, 7876, 7933, 8001, 8066,\
    \ 8132, 8192, 8255, 8311, 8385, 8450, 8516, 8581, 8646, 8701, 8767, 8834, 8910,\
    \ 8974, 9039, 9106, 9163, 9221, 9285, 9351, 9415, 9471, 9537, 9593, 9651, 9715,\
    \ 9771, 9836, 9900, 9966, 10032, 10100, 10166, 10222, 10288, 10356, 10432, 10500,\
    \ 10565, 10632, 10698, 10765, 10831, 10896, 10952, 11018, 11084, 11151, 11226,\
    \ 11301, 11366, 11432, 11498, 11565, 11631, 11697, 11762, 11821, 11886, 11952,\
    \ 12018, 12084, 12151, 12226, 12300, 12367, 12442, 12510, 12576, 12642, 12708,\
    \ 12775, 12839, 12916, 12981, 13044, 13108, 13165, 13231, 13297, 13362, 13431,\
    \ 13507, 1356\n                                                              \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                              "
  stdout: ''
  timestamp: 1659979791
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpns1sfs0v.swift:7:521: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n    return a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                ^\n         \
    \  ((                                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                         ) != 0)\n"
  stdout: ''
  timestamp: 1659979793
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a%3 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmppi72de3d/tmppi72de3d.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35562e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3555fddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3555fdd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3555fdc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppi72de3d                        0x000055e5ce3c3241 <unavailable> + 4673

    5    libc.so.6                          0x00002b35564d2460 __libc_start_main +
    245

    6    tmppi72de3d                        0x000055e5ce3c2ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % 3 == 0 && a % 5 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp9phj3s86/tmp9phj3s86.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b372a7a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b372a49db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b372a49d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b372a49c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9phj3s86                        0x0000563ade24c241 <unavailable> + 4673

    5    libc.so.6                          0x00002b372a992460 __libc_start_main +
    245

    6    tmp9phj3s86                        0x0000563ade24bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpw4txhiro/tmpw4txhiro.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fe8963c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fe865ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fe865a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fe86597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw4txhiro                        0x0000558e0949a227 <unavailable> + 4647

    5    libc.so.6                          0x00002b1fe8b4f460 __libc_start_main +
    245

    6    tmpw4txhiro                        0x0000558e09499e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   switch a {\n    case 1: return true\n    case 2: return true\n    case 3:\
    \ return true\n    case 4: return true\n    case 5: return true\n    case 6: return\
    \ true\n    case 7: return true\n    case 8: return true\n    case 9: return true\n\
    \    case 10: return true\n    case 11: return true\n    case 12: return true\n\
    \    case 13: return true\n    case 14: return true\n    case 15: return true\n\
    \    case 16: return true\n    case 17: return true\n    case 18: return true\n\
    \    case 19: return true\n    case 20: return true\n    case 21: return true\n\
    \    case 22: return true\n    case 23: return true\n    case 24: return true\n\
    \    case 25: return true\n    case 26: return true\n    case 27: return true\n\
    \    case 28: return true\n    case 29: return true\n    case 30: return true\n\
    \    case 31: return true\n    case 32: return true\n    case 33: return true\n\
    \    case 34: return true\n    case 35: return true\n    case 36: return true\n\
    \    case 37: return true\n    case 38: return true\n    case 39: return true\n\
    \    case 40: return true\n    case 41: return true\n    case 42: return true\n\
    \    case 43: return true\n    case 44: return true\n    case 45: return true\n\
    \    case 46: return true\n    case 47: return true\n    case 48: return true\n\
    \    case 49: return true\n    case 50: return true\n    case 51: return true\n\
    \    case 52: return true\n    case 53: return true\n    case 54: return true\n\
    \    case 55: return true\n    case 56: return true\n    case 57: return true\n\
    \    case 58: return true\n    case 59: return true\n    case 60: return true\n\
    \    case 61: return true\n    case 62: return true\n    case 63: return true\n\
    \    case 64: return true\n    case 65: return true\n    case 66: return true\n\
    \    case 67: return true\n    case 68: return true\n    case 69: return true\n\
    \    case 70: return true\n    case 71: return true\n    case 72: return true\n\
    \    case 73: return true\n    case 74: return true\n    case 75: return true\n\
    \    case 76: return true\n    case 77: return true\n    case 78: return true\n\
    \    case 79: return true\n    case 80: return true\n    case 81: return true\n\
    \    case 82: return true\n    case 83: return true\n    case 84: return true\n\
    \    case 85: return true\n    case 86: return true\n    case 87: return true\n\
    \    case 88: return true\n    case 89: return true\n    case 90: return true\n\
    \    case 91: return true\n    case 92: return true\n    case 93: return true\n\
    \    case 94: return true\n    case 95: return true\n    case 96: return true\n\
    \    case 97: return true\n    case 98: return true\n    case 99: return true\n\
    \    case 100: return true\n    case 101: return \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8itmsfg1.swift:131:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmp8itmsfg1.swift:6:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmp8itmsfg1.swift:108:15: error: non-void function should\
    \ return a value\n    case 101: return \n              ^\n/tmp/tmp8itmsfg1.swift:7:5:\
    \ error: switch must be exhaustive\n    switch a {\n    ^\n/tmp/tmp8itmsfg1.swift:7:5:\
    \ note: do you want to add a default clause?\n    switch a {\n    ^\n/tmp/tmp8itmsfg1.swift:112:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % 3 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp277n8epi/tmp277n8epi.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7dbea9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7dbe793b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7dbe793988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7dbe7927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp277n8epi                        0x0000564b0209d241 <unavailable> + 4673

    5    libc.so.6                          0x00002b7dbec88460 __libc_start_main +
    245

    6    tmp277n8epi                        0x0000564b0209cef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpru9a27nv/tmpru9a27nv.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdd622fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdd5f26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdd5f26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdd5f257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpru9a27nv                        0x000055c2a59e82b7 <unavailable> + 4791

    5    libc.so.6                          0x00002afdd641b460 __libc_start_main +
    245

    6    tmpru9a27nv                        0x000055c2a59e7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpru9a27nv/tmpru9a27nv.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdd622fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdd5f26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdd5f26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdd5f257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpru9a27nv                        0x000055c2a59e82b7 <unavailable> + 4791

    5    libc.so.6                          0x00002afdd641b460 __libc_start_main +
    245

    6    tmpru9a27nv                        0x000055c2a59e7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpw4txhiro/tmpw4txhiro.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fe8963c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fe865ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fe865a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fe86597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw4txhiro                        0x0000558e0949a227 <unavailable> + 4647

    5    libc.so.6                          0x00002b1fe8b4f460 __libc_start_main +
    245

    6    tmpw4txhiro                        0x0000558e09499e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpru9a27nv/tmpru9a27nv.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdd622fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdd5f26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdd5f26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdd5f257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpru9a27nv                        0x000055c2a59e82b7 <unavailable> + 4791

    5    libc.so.6                          0x00002afdd641b460 __libc_start_main +
    245

    6    tmpru9a27nv                        0x000055c2a59e7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   if a < 0 {\n        return false\n    }\n    if a > 9 {\n        return false\n\
    \    }\n    if a % 3 == 0 {\n        return true\n    }\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpnwipn8zm/tmpnwipn8zm.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e79b19c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e79810b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e79810988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e7980f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnwipn8zm                        0x0000560737014241 <unavailable> + 4673

    5    libc.so.6                          0x00002b7e79d05460 __libc_start_main +
    245

    6    tmpnwipn8zm                        0x0000560737013ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   if a < 0 {\n        return false\n    }\n    if a > 1 {\n        return false\n\
    \    }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n       \
    \ return true\n    }\n    if a == 3 {\n        return true\n    }\n    if a ==\
    \ 4 {\n        return true\n    }\n    if a == 5 {\n        return true\n    }\n\
    \    if a == 6 {\n        return true\n    }\n    if a == 7 {\n        return\
    \ true\n    }\n    if a == 8 {\n        return true\n    }\n    if a == 9 {\n\
    \        return true\n    }\n    if a == 10 {\n        return true\n    }\n  \
    \  if a == 11 {\n        return true\n    }\n    if a == 12 {\n        return\
    \ true\n    }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n\
    \        return true\n    }\n    if a == 15 {\n        return true\n    }\n  \
    \  if a == 16 {\n        return true\n    }\n    if a == 17 {\n        return\
    \ true\n    }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n\
    \        return true\n    }\n    if a == 20 {\n        return true\n    }\n  \
    \  if a == 21 {\n        return true\n    }\n    if a == 22 {\n        return\
    \ true\n    }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n\
    \        return true\n    }\n    if a == 25 {\n        return true\n    }\n  \
    \  if a == 26 {\n        return true\n    }\n    if a == 27 {\n        return\
    \ true\n    }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n\
    \        return true\n    }\n    if a == 30 {\n        return true\n    }\n  \
    \  if a == 31 {\n        return true\n    }\n    if a == 32 {\n        return\
    \ true\n    }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n\
    \        return true\n    }\n    if a == 35 {\n        return true\n    }\n  \
    \  if a == 36 {\n        return true\n    }\n    if a == 37 {\n        return\
    \ true\n    }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n\
    \        return true\n    }\n    if a == 40 {\n        return true\n    }\n  \
    \  if a == 41 {\n        return true\n    }\n    if a == 42 {\n        return\
    \ true\n    }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n\
    \        return true\n    }\n    if a == 45 {\n        return true\n    }\n  \
    \  if a == 46 {\n        return true\n    }\n    if a == 47 {\n        return\
    \ true\n    }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n\
    \        return true\n    }\n    if a == 50 {\n        return \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpop_5lemt.swift:184:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmpop_5lemt.swift:6:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmpop_5lemt.swift:161:9: error: non-void function should\
    \ return a value\n        return \n        ^\n/tmp/tmpop_5lemt.swift:165:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979791
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n        return true\n    }\n    if a == 51 {\n\
    \        return true\n    }\n    if a == 52 {\n        return \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp04w0kh7d.swift:184:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmp04w0kh7d.swift:6:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmp04w0kh7d.swift:161:9: error: non-void function should\
    \ return a value\n        return \n        ^\n/tmp/tmp04w0kh7d.swift:165:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979791
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   if a <= 0 {\n        return false\n    }\n    if a <= 1 {\n        return\
    \ true\n    }\n    if a <= 3 {\n        return true\n    }\n    if a <= 6 {\n\
    \        return true\n    }\n    if a <= 9 {\n        return true\n    }\n   \
    \ if a <= 12 {\n        return true\n    }\n    if a <= 15 {\n        return true\n\
    \    }\n    if a <= 18 {\n        return true\n    }\n    if a <= 21 {\n     \
    \   return true\n    }\n    if a <= 24 {\n        return true\n    }\n    if a\
    \ <= 27 {\n        return true\n    }\n    if a <= 30 {\n        return true\n\
    \    }\n    if a <= 33 {\n        return true\n    }\n    if a <= 36 {\n     \
    \   return true\n    }\n    if a <= 39 {\n        return true\n    }\n    if a\
    \ <= 42 {\n        return true\n    }\n    if a <= 45 {\n        return true\n\
    \    }\n    if a <= 48 {\n        return true\n    }\n    if a <= 51 {\n     \
    \   return true\n    }\n    if a <= 54 {\n        return true\n    }\n    if a\
    \ <= 57 {\n        return true\n    }\n    if a <= 60 {\n        return true\n\
    \    }\n    if a <= 63 {\n        return true\n    }\n    if a <= 66 {\n     \
    \   return true\n    }\n    if a <= 69 {\n        return true\n    }\n    if a\
    \ <= 72 {\n        return true\n    }\n    if a <= 75 {\n        return true\n\
    \    }\n    if a <= 78 {\n        return true\n    }\n    if a <= 81 {\n     \
    \   return true\n    }\n    if a <= 84 {\n        return true\n    }\n    if a\
    \ <= 87 {\n        return true\n    }\n    if a <= 90 {\n        return true\n\
    \    }\n    if a <= 93 {\n        return true\n    }\n    if a <= 96 {\n     \
    \   return true\n    }\n    if a <= 99 {\n        return true\n    }\n    if a\
    \ <= 102 {\n        return true\n    }\n    if a <= 105 {\n        return true\n\
    \    }\n    if a <= 108 {\n        return true\n    }\n    if a <= 111 {\n   \
    \     return true\n    }\n    if a <= 114 {\n        return true\n    }\n    if\
    \ a <= 117 {\n        return true\n    }\n    if a <= 120 {\n        return true\n\
    \    }\n    if a <= 123 {\n        return true\n    }\n    if a <= 126 {\n   \
    \     return true\n    }\n    if a <= 129 {\n        return true\n    }\n    if\
    \ a <= 132 {\n        return true\n    }\n    if a <= 135 {\n        return true\n\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpslvdai4e.swift:170:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmpslvdai4e.swift:6:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmpslvdai4e.swift:151:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % 3 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp277n8epi/tmp277n8epi.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7dbea9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7dbe793b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7dbe793988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7dbe7927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp277n8epi                        0x0000564b0209d241 <unavailable> + 4673

    5    libc.so.6                          0x00002b7dbec88460 __libc_start_main +
    245

    6    tmp277n8epi                        0x0000564b0209cef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpns1sfs0v.swift:7:521: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n    return a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                ^\n         \
    \  ((                                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                         ) != 0)\n"
  stdout: ''
  timestamp: 1659979793
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   if a <= 0 {\n        return false\n    }\n    if a > 1 {\n        return false\n\
    \    }\n    if a > 2 {\n        return false\n    }\n    if a > 3 {\n        return\
    \ false\n    }\n    if a > 4 {\n        return false\n    }\n    if a > 5 {\n\
    \        return false\n    }\n    if a > 6 {\n        return false\n    }\n  \
    \  if a > 7 {\n        return false\n    }\n    if a > 8 {\n        return false\n\
    \    }\n    if a > 9 {\n        return false\n    }\n    if a > 10 {\n       \
    \ return false\n    }\n    if a > 11 {\n        return false\n    }\n    if a\
    \ > 12 {\n        return false\n    }\n    if a > 13 {\n        return false\n\
    \    }\n    if a > 14 {\n        return false\n    }\n    if a > 15 {\n      \
    \  return false\n    }\n    if a > 16 {\n        return false\n    }\n    if a\
    \ > 17 {\n        return false\n    }\n    if a > 18 {\n        return false\n\
    \    }\n    if a > 19 {\n        return false\n    }\n    if a > 20 {\n      \
    \  return false\n    }\n    if a > 21 {\n        return false\n    }\n    if a\
    \ > 22 {\n        return false\n    }\n    if a > 23 {\n        return false\n\
    \    }\n    if a > 24 {\n        return false\n    }\n    if a > 25 {\n      \
    \  return false\n    }\n    if a > 26 {\n        return false\n    }\n    if a\
    \ > 27 {\n        return false\n    }\n    if a > 28 {\n        return false\n\
    \    }\n    if a > 29 {\n        return false\n    }\n    if a > 30 {\n      \
    \  return false\n    }\n    if a > 31 {\n        return false\n    }\n    if a\
    \ > 32 {\n        return false\n    }\n    if a > 33 {\n        return false\n\
    \    }\n    if a > 34 {\n        return false\n    }\n    if a > 35 {\n      \
    \  return false\n    }\n    if a > 36 {\n        return false\n    }\n    if a\
    \ > 37 {\n        return false\n    }\n    if a > 38 {\n        return false\n\
    \    }\n    if a > 39 {\n        return false\n    }\n    if a > 40 {\n      \
    \  return false\n    }\n    if a > 41 {\n        return false\n    }\n    if a\
    \ > 42 {\n        return false\n    }\n    if a > 43 {\n        return false\n\
    \    }\n    if a > 44 {\n        return false\n    }\n    if a > 45 {\n      \
    \  return false\n    }\n    if a > 46 {\n        return false\n    }\n\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: '/tmp/tmp84s_odvp.swift:149:1: error: missing return in global function
    expected to return ''Bool''

    }

    ^

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   if a <= 0 {\n        return false\n    }\n    if a > 1 {\n        return false\n\
    \    }\n    if a > 2 {\n        return false\n    }\n    if a > 3 {\n        return\
    \ false\n    }\n    if a > 4 {\n        return false\n    }\n    if a > 5 {\n\
    \        return false\n    }\n    if a > 6 {\n        return false\n    }\n  \
    \  if a > 7 {\n        return false\n    }\n    if a > 8 {\n        return false\n\
    \    }\n    if a > 9 {\n        return false\n    }\n    if a > 10 {\n       \
    \ return false\n    }\n    if a > 11 {\n        return false\n    }\n    if a\
    \ > 12 {\n        return false\n    }\n    if a > 13 {\n        return false\n\
    \    }\n    if a > 14 {\n        return false\n    }\n    if a > 15 {\n      \
    \  return false\n    }\n    if a > 16 {\n        return false\n    }\n    if a\
    \ > 17 {\n        return false\n    }\n    if a > 18 {\n        return false\n\
    \    }\n    if a > 19 {\n        return false\n    }\n    if a > 20 {\n      \
    \  return false\n    }\n    if a > 21 {\n        return false\n    }\n    if a\
    \ > 22 {\n        return false\n    }\n    if a > 23 {\n        return false\n\
    \    }\n    if a > 24 {\n        return false\n    }\n    if a > 25 {\n      \
    \  return false\n    }\n    if a > 26 {\n        return false\n    }\n    if a\
    \ > 27 {\n        return false\n    }\n    if a > 28 {\n        return false\n\
    \    }\n    if a > 29 {\n        return false\n    }\n    if a > 30 {\n      \
    \  return false\n    }\n    if a > 31 {\n        return false\n    }\n    if a\
    \ > 32 {\n        return false\n    }\n    if a > 33 {\n        return false\n\
    \    }\n    if a > 34 {\n        return false\n    }\n    if a > 35 {\n      \
    \  return false\n    }\n    if a > 36 {\n        return false\n    }\n    if a\
    \ > 37 {\n        return false\n    }\n    if a > 38 {\n        return false\n\
    \    }\n    if a > 39 {\n        return false\n    }\n    if a > 40 {\n      \
    \  return false\n    }\n    if a > 41 {\n        return false\n    }\n    if a\
    \ > 42 {\n        return false\n    }\n    if a > 43 {\n        return false\n\
    \    }\n    if a > 44 {\n        return false\n    }\n    if a > 45 {\n      \
    \  return false\n    }\n    if a > 46 {\n        return false\n    }\n\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: '/tmp/tmp84s_odvp.swift:149:1: error: missing return in global function
    expected to return ''Bool''

    }

    ^

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpw4txhiro/tmpw4txhiro.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fe8963c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fe865ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fe865a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fe86597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw4txhiro                        0x0000558e0949a227 <unavailable> + 4647

    5    libc.so.6                          0x00002b1fe8b4f460 __libc_start_main +
    245

    6    tmpw4txhiro                        0x0000558e09499e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % 3 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp277n8epi/tmp277n8epi.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7dbea9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7dbe793b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7dbe793988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7dbe7927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp277n8epi                        0x0000564b0209d241 <unavailable> + 4673

    5    libc.so.6                          0x00002b7dbec88460 __libc_start_main +
    245

    6    tmp277n8epi                        0x0000564b0209cef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpns1sfs0v.swift:7:521: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n    return a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                ^\n         \
    \  ((                                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                         ) != 0)\n"
  stdout: ''
  timestamp: 1659979793
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: '/tmp/tmpcl71z_fj.swift:8:1: error: missing return in global function expected
    to return ''Bool''

    }

    ^

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a%3 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmppi72de3d/tmppi72de3d.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35562e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3555fddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3555fdd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3555fdc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppi72de3d                        0x000055e5ce3c3241 <unavailable> + 4673

    5    libc.so.6                          0x00002b35564d2460 __libc_start_main +
    245

    6    tmppi72de3d                        0x000055e5ce3c2ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpru9a27nv/tmpru9a27nv.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdd622fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdd5f26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdd5f26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdd5f257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpru9a27nv                        0x000055c2a59e82b7 <unavailable> + 4791

    5    libc.so.6                          0x00002afdd641b460 __libc_start_main +
    245

    6    tmpru9a27nv                        0x000055c2a59e7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a%3 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmppi72de3d/tmppi72de3d.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35562e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3555fddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3555fdd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3555fdc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppi72de3d                        0x000055e5ce3c3241 <unavailable> + 4673

    5    libc.so.6                          0x00002b35564d2460 __libc_start_main +
    245

    6    tmppi72de3d                        0x000055e5ce3c2ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % 3 == 0 || a % 5 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpbz9gsxwj/tmpbz9gsxwj.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af13547cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af135173b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af135173988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1351727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbz9gsxwj                        0x0000555cc6736241 <unavailable> + 4673

    5    libc.so.6                          0x00002af135668460 __libc_start_main +
    245

    6    tmpbz9gsxwj                        0x0000555cc6735ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   if a <= 0 {\n        return false\n    }\n    if a > 100 {\n        return\
    \ false\n    }\n    if a > 1000 {\n        return false\n    }\n    if a > 10000\
    \ {\n        return false\n    }\n    if a > 100000 {\n        return false\n\
    \    }\n    if a > 1000000 {\n        return false\n    }\n    if a > 10000000\
    \ {\n        return false\n    }\n    if a > 100000000 {\n        return false\n\
    \    }\n    if a > 1000000000 {\n        return false\n    }\n    if a > 10000000000\
    \ {\n        return false\n    }\n    if a > 100000000000 {\n        return false\n\
    \    }\n    if a > 1000000000000 {\n        return false\n    }\n    if a > 10000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000 {\n        return\
    \ false\n    }\n    if a > 1000000000000000 {\n        return false\n    }\n \
    \   if a > 10000000000000000 {\n        return false\n    }\n    if a > 100000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000 {\n        return\
    \ false\n    }\n    if a > 10000000000000000000 {\n        return false\n    }\n\
    \    if a > 100000000000000000000 {\n        return false\n    }\n    if a > 1000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000 {\n     \
    \   return false\n    }\n    if a > 100000000000000000000000 {\n        return\
    \ false\n    }\n    if a > 1000000000000000000000000 {\n        return false\n\
    \    }\n    if a > 10000000000000000000000000 {\n        return false\n    }\n\
    \    if a > 100000000000000000000000000 {\n        return false\n    }\n    if\
    \ a > 1000000000000000000000000000 {\n        return false\n    }\n    if a >\
    \ 10000000000000000000000000000 {\n        return false\n    }\n    if a > 100000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 10000000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 100000000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 1000000000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 10000000000000000000000000000000000 {\n\
    \        return false\n    }\n    if a > 100000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 100000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 1000000000000000000000000000000000000000\
    \ {\n        return false\n    }\n    if a > 10000000000000000000000000000000000000000\
    \ {\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfrtapluc.swift:148:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmpfrtapluc.swift:6:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmpfrtapluc.swift:129:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpw4txhiro/tmpw4txhiro.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fe8963c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fe865ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fe865a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fe86597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw4txhiro                        0x0000558e0949a227 <unavailable> + 4647

    5    libc.so.6                          0x00002b1fe8b4f460 __libc_start_main +
    245

    6    tmpw4txhiro                        0x0000558e09499e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % 3 == 0 || a % 5 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpbz9gsxwj/tmpbz9gsxwj.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af13547cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af135173b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af135173988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1351727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbz9gsxwj                        0x0000555cc6736241 <unavailable> + 4673

    5    libc.so.6                          0x00002af135668460 __libc_start_main +
    245

    6    tmpbz9gsxwj                        0x0000555cc6735ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: '/tmp/tmpcl71z_fj.swift:8:1: error: missing return in global function expected
    to return ''Bool''

    }

    ^

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpru9a27nv/tmpru9a27nv.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdd622fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdd5f26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdd5f26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdd5f257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpru9a27nv                        0x000055c2a59e82b7 <unavailable> + 4791

    5    libc.so.6                          0x00002afdd641b460 __libc_start_main +
    245

    6    tmpru9a27nv                        0x000055c2a59e7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % 3 == 0 && a % 5 == 0 && a % 7 == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmplrii5l7z/tmplrii5l7z.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac64f351c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac64f048b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac64f048988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac64f0477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplrii5l7z                        0x0000556512e39241 <unavailable> + 4673

    5    libc.so.6                          0x00002ac64f53d460 __libc_start_main +
    245

    6    tmplrii5l7z                        0x0000556512e38ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpru9a27nv/tmpru9a27nv.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdd622fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdd5f26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdd5f26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdd5f257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpru9a27nv                        0x000055c2a59e82b7 <unavailable> + 4791

    5    libc.so.6                          0x00002afdd641b460 __libc_start_main +
    245

    6    tmpru9a27nv                        0x000055c2a59e7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n        return true\n    }\n    if a == 51 {\n\
    \        return true\n    }\n    if a == 52 {\n        return \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp04w0kh7d.swift:184:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmp04w0kh7d.swift:6:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmp04w0kh7d.swift:161:9: error: non-void function should\
    \ return a value\n        return \n        ^\n/tmp/tmp04w0kh7d.swift:165:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979791
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpns1sfs0v.swift:7:521: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n    return a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                ^\n         \
    \  ((                                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                         ) != 0)\n"
  stdout: ''
  timestamp: 1659979793
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: '/tmp/tmpcl71z_fj.swift:8:1: error: missing return in global function expected
    to return ''Bool''

    }

    ^

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a%3 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmppi72de3d/tmppi72de3d.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35562e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3555fddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3555fdd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3555fdc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppi72de3d                        0x000055e5ce3c3241 <unavailable> + 4673

    5    libc.so.6                          0x00002b35564d2460 __libc_start_main +
    245

    6    tmppi72de3d                        0x000055e5ce3c2ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   if a <= 0 {\n        return false\n    }\n    var cube = 0\n    var cube_power\
    \ = 1\n    for _ in 0..<a {\n        cube = cube * cube + cube_power\n       \
    \ cube_power = cube_power * 3\n    }\n    return cube == a\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpf_xgspo_/tmpf_xgspo_.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11c4579c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11c4270b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11c4270988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11c426f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf_xgspo_                        0x000055a12244f41d <unavailable> + 5149

    5    libc.so.6                          0x00002b11c4765460 __libc_start_main +
    245

    6    tmpf_xgspo_                        0x000055a12244efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpru9a27nv/tmpru9a27nv.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdd622fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdd5f26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdd5f26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdd5f257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpru9a27nv                        0x000055c2a59e82b7 <unavailable> + 4791

    5    libc.so.6                          0x00002afdd641b460 __libc_start_main +
    245

    6    tmpru9a27nv                        0x000055c2a59e7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpru9a27nv/tmpru9a27nv.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdd622fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdd5f26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdd5f26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdd5f257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpru9a27nv                        0x000055c2a59e82b7 <unavailable> + 4791

    5    libc.so.6                          0x00002afdd641b460 __libc_start_main +
    245

    6    tmpru9a27nv                        0x000055c2a59e7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpns1sfs0v.swift:7:521: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n    return a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                ^\n         \
    \  ((                                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                         ) != 0)\n"
  stdout: ''
  timestamp: 1659979793
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n        return true\n    }\n    if a == 51 {\n\
    \        return true\n    }\n    if a == 52 {\n        return \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp04w0kh7d.swift:184:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmp04w0kh7d.swift:6:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmp04w0kh7d.swift:161:9: error: non-void function should\
    \ return a value\n        return \n        ^\n/tmp/tmp04w0kh7d.swift:165:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpw4txhiro/tmpw4txhiro.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fe8963c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fe865ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fe865a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fe86597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw4txhiro                        0x0000558e0949a227 <unavailable> + 4647

    5    libc.so.6                          0x00002b1fe8b4f460 __libc_start_main +
    245

    6    tmpw4txhiro                        0x0000558e09499e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a%a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp7dvnurj8/tmp7dvnurj8.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac26f00cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac26ed03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac26ed03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac26ed027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7dvnurj8                        0x0000563d1b9722b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ac26f1f8460 __libc_start_main +
    245

    6    tmp7dvnurj8                        0x0000563d1b971ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a == Int(a) * Int(a) * Int(a) * Int(a)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpr0b2ddl9/tmpr0b2ddl9.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f7d303c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f7cffab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f7cffa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f7cff97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr0b2ddl9                        0x00005604966ee3cd <unavailable> + 5069

    5    libc.so.6                          0x00002b1f7d4ef460 __libc_start_main +
    245

    6    tmpr0b2ddl9                        0x00005604966edf99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   if a < 0 {\n        return false\n    }\n    if a > 1 {\n        return false\n\
    \    }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n       \
    \ return true\n    }\n    if a == 3 {\n        return true\n    }\n    if a ==\
    \ 4 {\n        return true\n    }\n    if a == 5 {\n        return true\n    }\n\
    \    if a == 6 {\n        return true\n    }\n    if a == 7 {\n        return\
    \ true\n    }\n    if a == 8 {\n        return true\n    }\n    if a == 9 {\n\
    \        return true\n    }\n    if a == 10 {\n        return true\n    }\n  \
    \  if a == 11 {\n        return true\n    }\n    if a == 12 {\n        return\
    \ true\n    }\n    if a == 13 {\n        return true\n    }\n    if a == 14 {\n\
    \        return true\n    }\n    if a == 15 {\n        return true\n    }\n  \
    \  if a == 16 {\n        return true\n    }\n    if a == 17 {\n        return\
    \ true\n    }\n    if a == 18 {\n        return true\n    }\n    if a == 19 {\n\
    \        return true\n    }\n    if a == 20 {\n        return true\n    }\n  \
    \  if a == 21 {\n        return true\n    }\n    if a == 22 {\n        return\
    \ true\n    }\n    if a == 23 {\n        return true\n    }\n    if a == 24 {\n\
    \        return true\n    }\n    if a == 25 {\n        return true\n    }\n  \
    \  if a == 26 {\n        return true\n    }\n    if a == 27 {\n        return\
    \ true\n    }\n    if a == 28 {\n        return true\n    }\n    if a == 29 {\n\
    \        return true\n    }\n    if a == 30 {\n        return true\n    }\n  \
    \  if a == 31 {\n        return true\n    }\n    if a == 32 {\n        return\
    \ true\n    }\n    if a == 33 {\n        return true\n    }\n    if a == 34 {\n\
    \        return true\n    }\n    if a == 35 {\n        return true\n    }\n  \
    \  if a == 36 {\n        return true\n    }\n    if a == 37 {\n        return\
    \ true\n    }\n    if a == 38 {\n        return true\n    }\n    if a == 39 {\n\
    \        return true\n    }\n    if a == 40 {\n        return true\n    }\n  \
    \  if a == 41 {\n        return true\n    }\n    if a == 42 {\n        return\
    \ true\n    }\n    if a == 43 {\n        return true\n    }\n    if a == 44 {\n\
    \        return true\n    }\n    if a == 45 {\n        return true\n    }\n  \
    \  if a == 46 {\n        return true\n    }\n    if a == 47 {\n        return\
    \ true\n    }\n    if a == 48 {\n        return true\n    }\n    if a == 49 {\n\
    \        return true\n    }\n    if a == 50 {\n        return \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpop_5lemt.swift:184:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmpop_5lemt.swift:6:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmpop_5lemt.swift:161:9: error: non-void function should\
    \ return a value\n        return \n        ^\n/tmp/tmpop_5lemt.swift:165:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a%3 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmppi72de3d/tmppi72de3d.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35562e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3555fddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3555fdd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3555fdc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppi72de3d                        0x000055e5ce3c3241 <unavailable> + 4673

    5    libc.so.6                          0x00002b35564d2460 __libc_start_main +
    245

    6    tmppi72de3d                        0x000055e5ce3c2ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a%3 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmppi72de3d/tmppi72de3d.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35562e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3555fddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3555fdd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3555fdc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppi72de3d                        0x000055e5ce3c3241 <unavailable> + 4673

    5    libc.so.6                          0x00002b35564d2460 __libc_start_main +
    245

    6    tmppi72de3d                        0x000055e5ce3c2ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % 3 == 0 || a % 5 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpbz9gsxwj/tmpbz9gsxwj.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af13547cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af135173b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af135173988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1351727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbz9gsxwj                        0x0000555cc6736241 <unavailable> + 4673

    5    libc.so.6                          0x00002af135668460 __libc_start_main +
    245

    6    tmpbz9gsxwj                        0x0000555cc6735ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   switch a {\n    case 1: return true\n    case 2: return true\n    case 3:\
    \ return true\n    case 4: return true\n    case 5: return true\n    case 6: return\
    \ true\n    case 7: return true\n    case 8: return true\n    case 9: return true\n\
    \    case 10: return true\n    case 11: return true\n    case 12: return true\n\
    \    case 13: return true\n    case 14: return true\n    case 15: return true\n\
    \    case 16: return true\n    case 17: return true\n    case 18: return true\n\
    \    case 19: return true\n    case 20: return true\n    case 21: return true\n\
    \    case 22: return true\n    case 23: return true\n    case 24: return true\n\
    \    case 25: return true\n    case 26: return true\n    case 27: return true\n\
    \    case 28: return true\n    case 29: return true\n    case 30: return true\n\
    \    case 31: return true\n    case 32: return true\n    case 33: return true\n\
    \    case 34: return true\n    case 35: return true\n    case 36: return true\n\
    \    case 37: return true\n    case 38: return true\n    case 39: return true\n\
    \    case 40: return true\n    case 41: return true\n    case 42: return true\n\
    \    case 43: return true\n    case 44: return true\n    case 45: return true\n\
    \    case 46: return true\n    case 47: return true\n    case 48: return true\n\
    \    case 49: return true\n    case 50: return true\n    case 51: return true\n\
    \    case 52: return true\n    case 53: return true\n    case 54: return true\n\
    \    case 55: return true\n    case 56: return true\n    case 57: return true\n\
    \    case 58: return true\n    case 59: return true\n    case 60: return true\n\
    \    case 61: return true\n    case 62: return true\n    case 63: return true\n\
    \    case 64: return true\n    case 65: return true\n    case 66: return true\n\
    \    case 67: return true\n    case 68: return true\n    case 69: return true\n\
    \    case 70: return true\n    case 71: return true\n    case 72: return true\n\
    \    case 73: return true\n    case 74: return true\n    case 75: return true\n\
    \    case 76: return true\n    case 77: return true\n    case 78: return true\n\
    \    case 79: return true\n    case 80: return true\n    case 81: return true\n\
    \    case 82: return true\n    case 83: return true\n    case 84: return true\n\
    \    case 85: return true\n    case 86: return true\n    case 87: return true\n\
    \    case 88: return true\n    case 89: return true\n    case 90: return true\n\
    \    case 91: return true\n    case 92: return true\n    case 93: return true\n\
    \    case 94: return true\n    case 95: return true\n    case 96: return true\n\
    \    case 97: return true\n    case 98: return true\n    case 99: return true\n\
    \    case 100: return true\n    case 101: return \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8itmsfg1.swift:131:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmp8itmsfg1.swift:6:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmp8itmsfg1.swift:108:15: error: non-void function should\
    \ return a value\n    case 101: return \n              ^\n/tmp/tmp8itmsfg1.swift:7:5:\
    \ error: switch must be exhaustive\n    switch a {\n    ^\n/tmp/tmp8itmsfg1.swift:7:5:\
    \ note: do you want to add a default clause?\n    switch a {\n    ^\n/tmp/tmp8itmsfg1.swift:112:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979791
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpns1sfs0v.swift:7:521: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n    return a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                ^\n         \
    \  ((                                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                         ) != 0)\n"
  stdout: ''
  timestamp: 1659979793
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpns1sfs0v.swift:7:521: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n    return a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                ^\n         \
    \  ((                                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                         ) != 0)\n"
  stdout: ''
  timestamp: 1659979793
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n        return true\n    }\n    if a == 51 {\n\
    \        return true\n    }\n    if a == 52 {\n        return \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp04w0kh7d.swift:184:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmp04w0kh7d.swift:6:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmp04w0kh7d.swift:161:9: error: non-void function should\
    \ return a value\n        return \n        ^\n/tmp/tmp04w0kh7d.swift:165:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpw4txhiro/tmpw4txhiro.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fe8963c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fe865ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fe865a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fe86597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw4txhiro                        0x0000558e0949a227 <unavailable> + 4647

    5    libc.so.6                          0x00002b1fe8b4f460 __libc_start_main +
    245

    6    tmpw4txhiro                        0x0000558e09499e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpw4txhiro/tmpw4txhiro.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fe8963c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fe865ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fe865a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fe86597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw4txhiro                        0x0000558e0949a227 <unavailable> + 4647

    5    libc.so.6                          0x00002b1fe8b4f460 __libc_start_main +
    245

    6    tmpw4txhiro                        0x0000558e09499e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a == Int(a) * Int(a) * Int(a) \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmptb5vh_nu/tmptb5vh_nu.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53635f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53632e8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53632e8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53632e77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptb5vh_nu                        0x000055954839c441 <unavailable> + 5185

    5    libc.so.6                          0x00002b53637dd460 __libc_start_main +
    245

    6    tmptb5vh_nu                        0x000055954839bf99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a%1 == 0 && a%2 == 0 && a%3 == 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp644funv_/tmp644funv_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea62809c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea62500b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea62500988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea624ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp644funv_                        0x0000558a4f472241 <unavailable> + 4673

    5    libc.so.6                          0x00002aea629f5460 __libc_start_main +
    245

    6    tmp644funv_                        0x0000558a4f471ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a%3 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmppi72de3d/tmppi72de3d.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35562e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3555fddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3555fdd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3555fdc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppi72de3d                        0x000055e5ce3c3241 <unavailable> + 4673

    5    libc.so.6                          0x00002b35564d2460 __libc_start_main +
    245

    6    tmppi72de3d                        0x000055e5ce3c2ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a%3 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmppi72de3d/tmppi72de3d.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35562e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3555fddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3555fdd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3555fdc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppi72de3d                        0x000055e5ce3c3241 <unavailable> + 4673

    5    libc.so.6                          0x00002b35564d2460 __libc_start_main +
    245

    6    tmppi72de3d                        0x000055e5ce3c2ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   if a <= 1 {\n        return false\n    }\n    var cube = 0\n    for _ in 0..<a\
    \ {\n        cube *= a\n    }\n    return cube == a\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmptrhrpxqv/tmptrhrpxqv.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff90c99c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff90990b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff90990988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff9098f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptrhrpxqv                        0x000055b14bd2d331 <unavailable> + 4913

    5    libc.so.6                          0x00002aff90e85460 __libc_start_main +
    245

    6    tmptrhrpxqv                        0x000055b14bd2cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpru9a27nv/tmpru9a27nv.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdd622fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdd5f26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdd5f26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdd5f257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpru9a27nv                        0x000055c2a59e82b7 <unavailable> + 4791

    5    libc.so.6                          0x00002afdd641b460 __libc_start_main +
    245

    6    tmpru9a27nv                        0x000055c2a59e7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpw4txhiro/tmpw4txhiro.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fe8963c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fe865ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fe865a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fe86597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw4txhiro                        0x0000558e0949a227 <unavailable> + 4647

    5    libc.so.6                          0x00002b1fe8b4f460 __libc_start_main +
    245

    6    tmpw4txhiro                        0x0000558e09499e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpw4txhiro/tmpw4txhiro.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fe8963c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fe865ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fe865a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fe86597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw4txhiro                        0x0000558e0949a227 <unavailable> + 4647

    5    libc.so.6                          0x00002b1fe8b4f460 __libc_start_main +
    245

    6    tmpw4txhiro                        0x0000558e09499e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a%3 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmppi72de3d/tmppi72de3d.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35562e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3555fddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3555fdd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3555fdc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppi72de3d                        0x000055e5ce3c3241 <unavailable> + 4673

    5    libc.so.6                          0x00002b35564d2460 __libc_start_main +
    245

    6    tmppi72de3d                        0x000055e5ce3c2ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   if a < 1 {\n        return false\n    }\n    if a > 100 {\n        return\
    \ false\n    }\n    if a % 1 != 0 {\n        return false\n    }\n    if a < 3\
    \ {\n        return false\n    }\n    if a > 100 {\n        return false\n   \
    \ }\n    if a < 3 {\n        return false\n    }\n    if a > 100 {\n        return\
    \ false\n    }\n    if a < 3 {\n        return false\n    }\n    if a > 100 {\n\
    \        return false\n    }\n    if a < 3 {\n        return false\n    }\n  \
    \  if a > 100 {\n        return false\n    }\n    if a < 3 {\n        return false\n\
    \    }\n    if a > 100 {\n        return false\n    }\n    if a < 3 {\n      \
    \  return false\n    }\n    if a > 100 {\n        return false\n    }\n    if\
    \ a < 3 {\n        return false\n    }\n    if a > 100 {\n        return false\n\
    \    }\n    if a < 3 {\n        return false\n    }\n    if a > 100 {\n      \
    \  return false\n    }\n    if a < 3 {\n        return false\n    }\n    if a\
    \ > 100 {\n        return false\n    }\n    if a < 3 {\n        return false\n\
    \    }\n    if a > 100 {\n        return false\n    }\n    if a < 3 {\n      \
    \  return false\n    }\n    if a > 100 {\n        return false\n    }\n    if\
    \ a < 3 {\n        return false\n    }\n    if a > 100 {\n        return false\n\
    \    }\n    if a < 3 {\n        return false\n    }\n    if a > 100 {\n      \
    \  return false\n    }\n    if a < 3 {\n        return false\n    }\n    if a\
    \ > 100 {\n        return false\n    }\n    if a < 3 {\n        return false\n\
    \    }\n    if a > 100 {\n        return false\n    }\n    if a < 3 {\n      \
    \  return false\n    }\n    if a > 100 {\n        return false\n    }\n    if\
    \ a < 3 {\n        return false\n    }\n    if a > 100 {\n        return false\n\
    \    }\n    if a < 3 {\n        return false\n    }\n    if a > 100 {\n      \
    \  return false\n    }\n    if a < 3 {\n        return false\n    }\n    if a\
    \ > 100 {\n        return false\n    }\n    if a < 3 {\n        return false\n\
    \    }\n    if a > 100 {\n        return false\n    }\n    if a < 3 {\n      \
    \  return false\n    }\n    if a > 100 {\n        return false\n    }\n    if\
    \ a < 3 {\n        return false\n    }\n    if a > 100 {\n        return false\n\
    \    }\n    if a < 3 {\n        return false\n    }\n    if a > 100 {\n      \
    \  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfrzm9pfs.swift:175:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmpfrzm9pfs.swift:6:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmpfrzm9pfs.swift:156:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a%a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp7dvnurj8/tmp7dvnurj8.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac26f00cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac26ed03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac26ed03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac26ed027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7dvnurj8                        0x0000563d1b9722b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ac26f1f8460 __libc_start_main +
    245

    6    tmp7dvnurj8                        0x0000563d1b971ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpw4txhiro/tmpw4txhiro.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fe8963c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fe865ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fe865a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fe86597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw4txhiro                        0x0000558e0949a227 <unavailable> + 4647

    5    libc.so.6                          0x00002b1fe8b4f460 __libc_start_main +
    245

    6    tmpw4txhiro                        0x0000558e09499e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n        return true\n    }\n    if a == 51 {\n\
    \        return true\n    }\n    if a == 52 {\n        return \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp04w0kh7d.swift:184:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmp04w0kh7d.swift:6:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmp04w0kh7d.swift:161:9: error: non-void function should\
    \ return a value\n        return \n        ^\n/tmp/tmp04w0kh7d.swift:165:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a%a%a%a%a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp09a6tc3e/tmp09a6tc3e.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b03e04b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b03e01aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b03e01aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b03e01a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp09a6tc3e                        0x000055ea0352b2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b03e069f460 __libc_start_main +
    245

    6    tmp09a6tc3e                        0x000055ea0352aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979792
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpns1sfs0v.swift:7:521: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n    return a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                ^\n         \
    \  ((                                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                         ) != 0)\n"
  stdout: ''
  timestamp: 1659979793
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a%3 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmppi72de3d/tmppi72de3d.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35562e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3555fddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3555fdd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3555fdc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppi72de3d                        0x000055e5ce3c3241 <unavailable> + 4673

    5    libc.so.6                          0x00002b35564d2460 __libc_start_main +
    245

    6    tmppi72de3d                        0x000055e5ce3c2ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   if a <= 0 {\n        return false\n    }\n    if a <= 1 {\n        return\
    \ true\n    }\n    if a <= 2 {\n        return true\n    }\n    if a <= 3 {\n\
    \        return true\n    }\n    if a <= 4 {\n        return true\n    }\n   \
    \ if a <= 5 {\n        return true\n    }\n    if a <= 6 {\n        return true\n\
    \    }\n    if a <= 7 {\n        return true\n    }\n    if a <= 8 {\n       \
    \ return true\n    }\n    if a <= 9 {\n        return true\n    }\n    if a <=\
    \ 10 {\n        return true\n    }\n    if a <= 11 {\n        return true\n  \
    \  }\n    if a <= 12 {\n        return true\n    }\n    if a <= 13 {\n       \
    \ return true\n    }\n    if a <= 14 {\n        return true\n    }\n    if a <=\
    \ 15 {\n        return true\n    }\n    if a <= 16 {\n        return true\n  \
    \  }\n    if a <= 17 {\n        return true\n    }\n    if a <= 18 {\n       \
    \ return true\n    }\n    if a <= 19 {\n        return true\n    }\n    if a <=\
    \ 20 {\n        return true\n    }\n    if a <= 21 {\n        return true\n  \
    \  }\n    if a <= 22 {\n        return true\n    }\n    if a <= 23 {\n       \
    \ return true\n    }\n    if a <= 24 {\n        return true\n    }\n    if a <=\
    \ 25 {\n        return true\n    }\n    if a <= 26 {\n        return true\n  \
    \  }\n    if a <= 27 {\n        return true\n    }\n    if a <= 28 {\n       \
    \ return true\n    }\n    if a <= 29 {\n        return true\n    }\n    if a <=\
    \ 30 {\n        return true\n    }\n    if a <= 31 {\n        return true\n  \
    \  }\n    if a <= 32 {\n        return true\n    }\n    if a <= 33 {\n       \
    \ return true\n    }\n    if a <= 34 {\n        return true\n    }\n    if a <=\
    \ 35 {\n        return true\n    }\n    if a <= 36 {\n        return true\n  \
    \  }\n    if a <= 37 {\n        return true\n    }\n    if a <= 38 {\n       \
    \ return true\n    }\n    if a <= 39 {\n        return true\n    }\n    if a <=\
    \ 40 {\n        return true\n    }\n    if a <= 41 {\n        return true\n  \
    \  }\n    if a <= 42 {\n        return true\n    }\n    if a <= 43 {\n       \
    \ return true\n    }\n    if a <= 44 {\n        return true\n    }\n    if a <=\
    \ 45 {\n        return true\n    }\n    if a <= 46 {\n        return true\n  \
    \  }\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: '/tmp/tmpkhsd3qlk.swift:149:1: error: missing return in global function
    expected to return ''Bool''

    }

    ^

    '
  stdout: ''
  timestamp: 1659979792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a%a%a%a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp61swcvw_/tmp61swcvw_.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c1803fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c17d36b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c17d36988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c17d357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp61swcvw_                        0x00005593a20df2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b3c1822b460 __libc_start_main +
    245

    6    tmp61swcvw_                        0x00005593a20deef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979792
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n        return true\n    }\n    if a == 51 {\n\
    \        return true\n    }\n    if a == 52 {\n        return \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp04w0kh7d.swift:184:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmp04w0kh7d.swift:6:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmp04w0kh7d.swift:161:9: error: non-void function should\
    \ return a value\n        return \n        ^\n/tmp/tmp04w0kh7d.swift:165:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979791
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   if a <= 0 {\n        return false\n    }\n    if a <= 1 {\n        return\
    \ true\n    }\n    if a <= 3 {\n        return true\n    }\n    if a <= 6 {\n\
    \        return true\n    }\n    if a <= 9 {\n        return true\n    }\n   \
    \ if a <= 12 {\n        return true\n    }\n    if a <= 15 {\n        return true\n\
    \    }\n    if a <= 18 {\n        return true\n    }\n    if a <= 21 {\n     \
    \   return true\n    }\n    if a <= 24 {\n        return true\n    }\n    if a\
    \ <= 27 {\n        return true\n    }\n    if a <= 30 {\n        return true\n\
    \    }\n    if a <= 33 {\n        return true\n    }\n    if a <= 36 {\n     \
    \   return true\n    }\n    if a <= 39 {\n        return true\n    }\n    if a\
    \ <= 42 {\n        return true\n    }\n    if a <= 45 {\n        return true\n\
    \    }\n    if a <= 48 {\n        return true\n    }\n    if a <= 51 {\n     \
    \   return true\n    }\n    if a <= 54 {\n        return true\n    }\n    if a\
    \ <= 57 {\n        return true\n    }\n    if a <= 60 {\n        return true\n\
    \    }\n    if a <= 63 {\n        return true\n    }\n    if a <= 66 {\n     \
    \   return true\n    }\n    if a <= 69 {\n        return true\n    }\n    if a\
    \ <= 72 {\n        return true\n    }\n    if a <= 75 {\n        return true\n\
    \    }\n    if a <= 78 {\n        return true\n    }\n    if a <= 81 {\n     \
    \   return true\n    }\n    if a <= 84 {\n        return true\n    }\n    if a\
    \ <= 87 {\n        return true\n    }\n    if a <= 90 {\n        return true\n\
    \    }\n    if a <= 93 {\n        return true\n    }\n    if a <= 96 {\n     \
    \   return true\n    }\n    if a <= 99 {\n        return true\n    }\n    if a\
    \ <= 102 {\n        return true\n    }\n    if a <= 105 {\n        return true\n\
    \    }\n    if a <= 108 {\n        return true\n    }\n    if a <= 111 {\n   \
    \     return true\n    }\n    if a <= 114 {\n        return true\n    }\n    if\
    \ a <= 117 {\n        return true\n    }\n    if a <= 120 {\n        return true\n\
    \    }\n    if a <= 123 {\n        return true\n    }\n    if a <= 126 {\n   \
    \     return true\n    }\n    if a <= 129 {\n        return true\n    }\n    if\
    \ a <= 132 {\n        return true\n    }\n    if a <= 135 {\n        return true\n\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpslvdai4e.swift:170:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmpslvdai4e.swift:6:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmpslvdai4e.swift:151:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpw4txhiro/tmpw4txhiro.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fe8963c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fe865ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fe865a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fe86597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw4txhiro                        0x0000558e0949a227 <unavailable> + 4647

    5    libc.so.6                          0x00002b1fe8b4f460 __libc_start_main +
    245

    6    tmpw4txhiro                        0x0000558e09499e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpru9a27nv/tmpru9a27nv.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdd622fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdd5f26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdd5f26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdd5f257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpru9a27nv                        0x000055c2a59e82b7 <unavailable> + 4791

    5    libc.so.6                          0x00002afdd641b460 __libc_start_main +
    245

    6    tmpru9a27nv                        0x000055c2a59e7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a == a * a * a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpsakqnbck/tmpsakqnbck.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfaf777c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfaf46eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfaf46e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfaf46d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsakqnbck                        0x000056101a902311 <unavailable> + 4881

    5    libc.so.6                          0x00002abfaf963460 __libc_start_main +
    245

    6    tmpsakqnbck                        0x000056101a901e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpw4txhiro/tmpw4txhiro.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fe8963c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fe865ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fe865a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fe86597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw4txhiro                        0x0000558e0949a227 <unavailable> + 4647

    5    libc.so.6                          0x00002b1fe8b4f460 __libc_start_main +
    245

    6    tmpw4txhiro                        0x0000558e09499e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpns1sfs0v.swift:7:521: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n    return a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                ^\n         \
    \  ((                                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                         ) != 0)\n"
  stdout: ''
  timestamp: 1659979793
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpru9a27nv/tmpru9a27nv.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdd622fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdd5f26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdd5f26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdd5f257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpru9a27nv                        0x000055c2a59e82b7 <unavailable> + 4791

    5    libc.so.6                          0x00002afdd641b460 __libc_start_main +
    245

    6    tmpru9a27nv                        0x000055c2a59e7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpns1sfs0v.swift:7:521: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n    return a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                ^\n         \
    \  ((                                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                         ) != 0)\n"
  stdout: ''
  timestamp: 1659979793
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpw4txhiro/tmpw4txhiro.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fe8963c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fe865ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fe865a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fe86597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw4txhiro                        0x0000558e0949a227 <unavailable> + 4647

    5    libc.so.6                          0x00002b1fe8b4f460 __libc_start_main +
    245

    6    tmpw4txhiro                        0x0000558e09499e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpru9a27nv/tmpru9a27nv.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdd622fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdd5f26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdd5f26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdd5f257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpru9a27nv                        0x000055c2a59e82b7 <unavailable> + 4791

    5    libc.so.6                          0x00002afdd641b460 __libc_start_main +
    245

    6    tmpru9a27nv                        0x000055c2a59e7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpns1sfs0v.swift:7:521: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n    return a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                ^\n         \
    \  ((                                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                         ) != 0)\n"
  stdout: ''
  timestamp: 1659979793
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: '/tmp/tmpcl71z_fj.swift:8:1: error: missing return in global function expected
    to return ''Bool''

    }

    ^

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a*a*a == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpq_jwbj49/tmpq_jwbj49.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b16601e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b165fedbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b165fedb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b165feda7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq_jwbj49                        0x000055d8f9226311 <unavailable> + 4881

    5    libc.so.6                          0x00002b16603d0460 __libc_start_main +
    245

    6    tmpq_jwbj49                        0x000055d8f9225e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979792
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpns1sfs0v.swift:7:521: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n    return a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                ^\n         \
    \  ((                                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                         ) != 0)\n"
  stdout: ''
  timestamp: 1659979793
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a*a*a == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpq_jwbj49/tmpq_jwbj49.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b16601e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b165fedbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b165fedb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b165feda7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq_jwbj49                        0x000055d8f9226311 <unavailable> + 4881

    5    libc.so.6                          0x00002b16603d0460 __libc_start_main +
    245

    6    tmpq_jwbj49                        0x000055d8f9225e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpru9a27nv/tmpru9a27nv.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdd622fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdd5f26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdd5f26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdd5f257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpru9a27nv                        0x000055c2a59e82b7 <unavailable> + 4791

    5    libc.so.6                          0x00002afdd641b460 __libc_start_main +
    245

    6    tmpru9a27nv                        0x000055c2a59e7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n        return true\n    }\n    if a == 51 {\n\
    \        return true\n    }\n    if a == 52 {\n        return \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp04w0kh7d.swift:184:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmp04w0kh7d.swift:6:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmp04w0kh7d.swift:161:9: error: non-void function should\
    \ return a value\n        return \n        ^\n/tmp/tmp04w0kh7d.swift:165:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpru9a27nv/tmpru9a27nv.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdd622fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdd5f26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdd5f26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdd5f257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpru9a27nv                        0x000055c2a59e82b7 <unavailable> + 4791

    5    libc.so.6                          0x00002afdd641b460 __libc_start_main +
    245

    6    tmpru9a27nv                        0x000055c2a59e7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a%a%a%a%a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp09a6tc3e/tmp09a6tc3e.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b03e04b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b03e01aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b03e01aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b03e01a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp09a6tc3e                        0x000055ea0352b2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b03e069f460 __libc_start_main +
    245

    6    tmp09a6tc3e                        0x000055ea0352aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpru9a27nv/tmpru9a27nv.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdd622fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdd5f26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdd5f26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdd5f257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpru9a27nv                        0x000055c2a59e82b7 <unavailable> + 4791

    5    libc.so.6                          0x00002afdd641b460 __libc_start_main +
    245

    6    tmpru9a27nv                        0x000055c2a59e7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpw4txhiro/tmpw4txhiro.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fe8963c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fe865ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fe865a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fe86597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw4txhiro                        0x0000558e0949a227 <unavailable> + 4647

    5    libc.so.6                          0x00002b1fe8b4f460 __libc_start_main +
    245

    6    tmpw4txhiro                        0x0000558e09499e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpru9a27nv/tmpru9a27nv.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdd622fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdd5f26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdd5f26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdd5f257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpru9a27nv                        0x000055c2a59e82b7 <unavailable> + 4791

    5    libc.so.6                          0x00002afdd641b460 __libc_start_main +
    245

    6    tmpru9a27nv                        0x000055c2a59e7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: '/tmp/tmpcl71z_fj.swift:8:1: error: missing return in global function expected
    to return ''Bool''

    }

    ^

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   if a <= 1 {\n        return false\n    }\n    if a <= 3 {\n        return\
    \ true\n    }\n    if a <= 6 {\n        return true\n    }\n    if a <= 9 {\n\
    \        return true\n    }\n    if a <= 12 {\n        return true\n    }\n  \
    \  if a <= 15 {\n        return true\n    }\n    if a <= 18 {\n        return\
    \ true\n    }\n    if a <= 21 {\n        return true\n    }\n    if a <= 24 {\n\
    \        return true\n    }\n    if a <= 27 {\n        return true\n    }\n  \
    \  if a <= 30 {\n        return true\n    }\n    if a <= 33 {\n        return\
    \ true\n    }\n    if a <= 36 {\n        return true\n    }\n    if a <= 39 {\n\
    \        return true\n    }\n    if a <= 42 {\n        return true\n    }\n  \
    \  if a <= 45 {\n        return true\n    }\n    if a <= 48 {\n        return\
    \ true\n    }\n    if a <= 51 {\n        return true\n    }\n    if a <= 54 {\n\
    \        return true\n    }\n    if a <= 57 {\n        return true\n    }\n  \
    \  if a <= 60 {\n        return true\n    }\n    if a <= 63 {\n        return\
    \ true\n    }\n    if a <= 66 {\n        return true\n    }\n    if a <= 69 {\n\
    \        return true\n    }\n    if a <= 72 {\n        return true\n    }\n  \
    \  if a <= 75 {\n        return true\n    }\n    if a <= 78 {\n        return\
    \ true\n    }\n    if a <= 81 {\n        return true\n    }\n    if a <= 84 {\n\
    \        return true\n    }\n    if a <= 87 {\n        return true\n    }\n  \
    \  if a <= 90 {\n        return true\n    }\n    if a <= 93 {\n        return\
    \ true\n    }\n    if a <= 96 {\n        return true\n    }\n    if a <= 99 {\n\
    \        return true\n    }\n    if a <= 102 {\n        return true\n    }\n \
    \   if a <= 105 {\n        return true\n    }\n    if a <= 108 {\n        return\
    \ true\n    }\n    if a <= 111 {\n        return true\n    }\n    if a <= 114\
    \ {\n        return true\n    }\n    if a <= 117 {\n        return true\n    }\n\
    \    if a <= 120 {\n        return true\n    }\n    if a <= 123 {\n        return\
    \ true\n    }\n    if a <= 126 {\n        return true\n    }\n    if a <= 129\
    \ {\n        return true\n    }\n    if a <= 132 {\n        return true\n    }\n\
    \    if a <= 135 {\n        return true\n    }\n    if a <= 138 {\n        return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpr2op_6sx.swift:169:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmpr2op_6sx.swift:6:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmpr2op_6sx.swift:150:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpw4txhiro/tmpw4txhiro.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fe8963c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fe865ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fe865a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fe86597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw4txhiro                        0x0000558e0949a227 <unavailable> + 4647

    5    libc.so.6                          0x00002b1fe8b4f460 __libc_start_main +
    245

    6    tmpw4txhiro                        0x0000558e09499e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpns1sfs0v.swift:7:521: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n    return a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                ^\n         \
    \  ((                                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                         ) != 0)\n"
  stdout: ''
  timestamp: 1659979793
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a%a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp7dvnurj8/tmp7dvnurj8.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac26f00cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac26ed03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac26ed03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac26ed027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7dvnurj8                        0x0000563d1b9722b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ac26f1f8460 __libc_start_main +
    245

    6    tmp7dvnurj8                        0x0000563d1b971ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpw4txhiro/tmpw4txhiro.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fe8963c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fe865ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fe865a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fe86597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw4txhiro                        0x0000558e0949a227 <unavailable> + 4647

    5    libc.so.6                          0x00002b1fe8b4f460 __libc_start_main +
    245

    6    tmpw4txhiro                        0x0000558e09499e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % 3 == 0 && a % 5 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp9phj3s86/tmp9phj3s86.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b372a7a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b372a49db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b372a49d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b372a49c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9phj3s86                        0x0000563ade24c241 <unavailable> + 4673

    5    libc.so.6                          0x00002b372a992460 __libc_start_main +
    245

    6    tmp9phj3s86                        0x0000563ade24bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpru9a27nv/tmpru9a27nv.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdd622fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdd5f26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdd5f26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdd5f257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpru9a27nv                        0x000055c2a59e82b7 <unavailable> + 4791

    5    libc.so.6                          0x00002afdd641b460 __libc_start_main +
    245

    6    tmpru9a27nv                        0x000055c2a59e7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpru9a27nv/tmpru9a27nv.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdd622fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdd5f26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdd5f26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdd5f257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpru9a27nv                        0x000055c2a59e82b7 <unavailable> + 4791

    5    libc.so.6                          0x00002afdd641b460 __libc_start_main +
    245

    6    tmpru9a27nv                        0x000055c2a59e7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a%a%a%a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp61swcvw_/tmp61swcvw_.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c1803fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c17d36b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c17d36988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c17d357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp61swcvw_                        0x00005593a20df2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b3c1822b460 __libc_start_main +
    245

    6    tmp61swcvw_                        0x00005593a20deef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a == (a * a * a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpidiucwp4/tmpidiucwp4.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af091d14c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af091a0bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af091a0b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af091a0a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpidiucwp4                        0x000055d7e59ca311 <unavailable> + 4881

    5    libc.so.6                          0x00002af091f00460 __libc_start_main +
    245

    6    tmpidiucwp4                        0x000055d7e59c9e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a == Int(a) * Int(a) * Int(a) * Int(a)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpr0b2ddl9/tmpr0b2ddl9.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f7d303c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f7cffab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f7cffa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f7cff97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr0b2ddl9                        0x00005604966ee3cd <unavailable> + 5069

    5    libc.so.6                          0x00002b1f7d4ef460 __libc_start_main +
    245

    6    tmpr0b2ddl9                        0x00005604966edf99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a*a*a == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpq_jwbj49/tmpq_jwbj49.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b16601e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b165fedbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b165fedb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b165feda7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq_jwbj49                        0x000055d8f9226311 <unavailable> + 4881

    5    libc.so.6                          0x00002b16603d0460 __libc_start_main +
    245

    6    tmpq_jwbj49                        0x000055d8f9225e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % 3 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp277n8epi/tmp277n8epi.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7dbea9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7dbe793b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7dbe793988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7dbe7927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp277n8epi                        0x0000564b0209d241 <unavailable> + 4673

    5    libc.so.6                          0x00002b7dbec88460 __libc_start_main +
    245

    6    tmp277n8epi                        0x0000564b0209cef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   if a <= 0 {\n        return false\n    }\n    var cube = 0\n    for _ in 0..<a\
    \ {\n        cube = cube * cube + 1\n    }\n    return cube == a\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpkvdbk_uj/tmpkvdbk_uj.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3d6481c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3d6178b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3d6178988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3d61777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkvdbk_uj                        0x000055b3870843a7 <unavailable> + 5031

    5    libc.so.6                          0x00002ba3d666d460 __libc_start_main +
    245

    6    tmpkvdbk_uj                        0x000055b387083fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979792
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpns1sfs0v.swift:7:521: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n    return a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                ^\n         \
    \  ((                                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                         ) != 0)\n"
  stdout: ''
  timestamp: 1659979793
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a%a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp7dvnurj8/tmp7dvnurj8.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac26f00cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac26ed03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac26ed03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac26ed027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7dvnurj8                        0x0000563d1b9722b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ac26f1f8460 __libc_start_main +
    245

    6    tmp7dvnurj8                        0x0000563d1b971ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % 3 == 0 || a % 5 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpbz9gsxwj/tmpbz9gsxwj.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af13547cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af135173b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af135173988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1351727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbz9gsxwj                        0x0000555cc6736241 <unavailable> + 4673

    5    libc.so.6                          0x00002af135668460 __libc_start_main +
    245

    6    tmpbz9gsxwj                        0x0000555cc6735ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   if a <= 0 {\n        return false\n    }\n    if a > 1 {\n        return false\n\
    \    }\n    if a > 2 {\n        return false\n    }\n    if a > 3 {\n        return\
    \ false\n    }\n    if a > 4 {\n        return false\n    }\n    if a > 5 {\n\
    \        return false\n    }\n    if a > 6 {\n        return false\n    }\n  \
    \  if a > 7 {\n        return false\n    }\n    if a > 8 {\n        return false\n\
    \    }\n    if a > 9 {\n        return false\n    }\n    if a > 10 {\n       \
    \ return false\n    }\n    if a > 11 {\n        return false\n    }\n    if a\
    \ > 12 {\n        return false\n    }\n    if a > 13 {\n        return false\n\
    \    }\n    if a > 14 {\n        return false\n    }\n    if a > 15 {\n      \
    \  return false\n    }\n    if a > 16 {\n        return false\n    }\n    if a\
    \ > 17 {\n        return false\n    }\n    if a > 18 {\n        return false\n\
    \    }\n    if a > 19 {\n        return false\n    }\n    if a > 20 {\n      \
    \  return false\n    }\n    if a > 21 {\n        return false\n    }\n    if a\
    \ > 22 {\n        return false\n    }\n    if a > 23 {\n        return false\n\
    \    }\n    if a > 24 {\n        return false\n    }\n    if a > 25 {\n      \
    \  return false\n    }\n    if a > 26 {\n        return false\n    }\n    if a\
    \ > 27 {\n        return false\n    }\n    if a > 28 {\n        return false\n\
    \    }\n    if a > 29 {\n        return false\n    }\n    if a > 30 {\n      \
    \  return false\n    }\n    if a > 31 {\n        return false\n    }\n    if a\
    \ > 32 {\n        return false\n    }\n    if a > 33 {\n        return false\n\
    \    }\n    if a > 34 {\n        return false\n    }\n    if a > 35 {\n      \
    \  return false\n    }\n    if a > 36 {\n        return false\n    }\n    if a\
    \ > 37 {\n        return false\n    }\n    if a > 38 {\n        return false\n\
    \    }\n    if a > 39 {\n        return false\n    }\n    if a > 40 {\n      \
    \  return false\n    }\n    if a > 41 {\n        return false\n    }\n    if a\
    \ > 42 {\n        return false\n    }\n    if a > 43 {\n        return false\n\
    \    }\n    if a > 44 {\n        return false\n    }\n    if a > 45 {\n      \
    \  return false\n    }\n    if a > 46 {\n        return false\n    }\n\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: '/tmp/tmp84s_odvp.swift:149:1: error: missing return in global function
    expected to return ''Bool''

    }

    ^

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   switch a {\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n\
    \    case 6:\n    case 7:\n    case 8:\n    case 9:\n    case 10:\n    case 11:\n\
    \    case 12:\n    case 13:\n    case 14:\n    case 15:\n    case 16:\n    case\
    \ 17:\n    case 18:\n    case 19:\n    case 20:\n    case 21:\n    case 22:\n\
    \    case 23:\n    case 24:\n    case 25:\n    case 26:\n    case 27:\n    case\
    \ 28:\n    case 29:\n    case 30:\n    case 31:\n    case 32:\n    case 33:\n\
    \    case 34:\n    case 35:\n    case 36:\n    case 37:\n    case 38:\n    case\
    \ 39:\n    case 40:\n    case 41:\n    case 42:\n    case 43:\n    case 44:\n\
    \    case 45:\n    case 46:\n    case 47:\n    case 48:\n    case 49:\n    case\
    \ 50:\n    case 51:\n    case 52:\n    case 53:\n    case 54:\n    case 55:\n\
    \    case 56:\n    case 57:\n    case 58:\n    case 59:\n    case 60:\n    case\
    \ 61:\n    case 62:\n    case 63:\n    case 64:\n    case 65:\n    case 66:\n\
    \    case 67:\n    case 68:\n    case 69:\n    case 70:\n    case 71:\n    case\
    \ 72:\n    case 73:\n    case 74:\n    case 75:\n    case 76:\n    case 77:\n\
    \    case 78:\n    case 79:\n    case 80:\n    case 81:\n    case 82:\n    case\
    \ 83:\n    case 84:\n    case 85:\n    case 86:\n    case 87:\n    case 88:\n\
    \    case 89:\n    case 90:\n    case 91:\n    case 92:\n    case 93:\n    case\
    \ 94:\n    case 95:\n    case 96:\n    case 97:\n    case 98:\n    case 99:\n\
    \    case 100:\n    case 101:\n    case 102:\n    case 103:\n    case 104:\n \
    \   case 105:\n    case 106:\n    case 107:\n    case 108:\n    case 109:\n  \
    \  case 110:\n    case 111:\n    case 112:\n    case 113:\n    case 114:\n   \
    \ case 115:\n    case 116:\n    case 117:\n    case 118:\n    case 119:\n    case\
    \ 120:\n    case 121:\n    case 122:\n    case 123:\n    case 124:\n    case 125:\n\
    \    case 126:\n    case 127:\n    case 128:\n    case 129:\n    case 130:\n \
    \   case 131:\n    case 132:\n    case 133:\n    case 134:\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmps_kkk3gi.swift:8:5: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n    case 1:\n    ^~~~~~~\n            break\n\
    /tmp/tmps_kkk3gi.swift:9:5: error: 'case' label in a 'switch' must have at least\
    \ one executable statement\n    case 2:\n    ^~~~~~~\n            break\n/tmp/tmps_kkk3gi.swift:10:5:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \    case 3:\n    ^~~~~~~\n            break\n/tmp/tmps_kkk3gi.swift:11:5: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \ case 4:\n    ^~~~~~~\n            break\n/tmp/tmps_kkk3gi.swift:12:5: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \ case 5:\n    ^~~~~~~\n            break\n/tmp/tmps_kkk3gi.swift:13:5: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \ case 6:\n    ^~~~~~~\n            break\n/tmp/tmps_kkk3gi.swift:14:5: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \ case 7:\n    ^~~~~~~\n            break\n/tmp/tmps_kkk3gi.swift:15:5: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \ case 8:\n    ^~~~~~~\n            break\n/tmp/tmps_kkk3gi.swift:16:5: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \ case 9:\n    ^~~~~~~\n            break\n/tmp/tmps_kkk3gi.swift:17:5: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \ case 10:\n    ^~~~~~~~\n             break\n/tmp/tmps_kkk3gi.swift:18:5: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \ case 11:\n    ^~~~~~~~\n             break\n/tmp/tmps_kkk3gi.swift:19:5: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \ case 12:\n    ^~~~~~~~\n             break\n/tmp/tmps_kkk3gi.swift:20:5: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \ case 13:\n    ^~~~~~~~\n             break\n/tmp/tmps_kkk3gi.swift:21:5: error:\
    \ 'case' label in a 'switch' must have at least one executable stat"
  stdout: ''
  timestamp: 1659979791
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n        return true\n    }\n    if a == 51 {\n\
    \        return true\n    }\n    if a == 52 {\n        return \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp04w0kh7d.swift:184:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmp04w0kh7d.swift:6:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmp04w0kh7d.swift:161:9: error: non-void function should\
    \ return a value\n        return \n        ^\n/tmp/tmp04w0kh7d.swift:165:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpru9a27nv/tmpru9a27nv.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdd622fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdd5f26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdd5f26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdd5f257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpru9a27nv                        0x000055c2a59e82b7 <unavailable> + 4791

    5    libc.so.6                          0x00002afdd641b460 __libc_start_main +
    245

    6    tmpru9a27nv                        0x000055c2a59e7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpw4txhiro/tmpw4txhiro.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fe8963c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fe865ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fe865a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fe86597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw4txhiro                        0x0000558e0949a227 <unavailable> + 4647

    5    libc.so.6                          0x00002b1fe8b4f460 __libc_start_main +
    245

    6    tmpw4txhiro                        0x0000558e09499e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   switch a {\n    case 1: return true\n    case 2: return true\n    case 3:\
    \ return true\n    case 4: return true\n    case 5: return true\n    case 6: return\
    \ true\n    case 7: return true\n    case 8: return true\n    case 9: return true\n\
    \    case 10: return true\n    case 11: return true\n    case 12: return true\n\
    \    case 13: return true\n    case 14: return true\n    case 15: return true\n\
    \    case 16: return true\n    case 17: return true\n    case 18: return true\n\
    \    case 19: return true\n    case 20: return true\n    case 21: return true\n\
    \    case 22: return true\n    case 23: return true\n    case 24: return true\n\
    \    case 25: return true\n    case 26: return true\n    case 27: return true\n\
    \    case 28: return true\n    case 29: return true\n    case 30: return true\n\
    \    case 31: return true\n    case 32: return true\n    case 33: return true\n\
    \    case 34: return true\n    case 35: return true\n    case 36: return true\n\
    \    case 37: return true\n    case 38: return true\n    case 39: return true\n\
    \    case 40: return true\n    case 41: return true\n    case 42: return true\n\
    \    case 43: return true\n    case 44: return true\n    case 45: return true\n\
    \    case 46: return true\n    case 47: return true\n    case 48: return true\n\
    \    case 49: return true\n    case 50: return true\n    case 51: return true\n\
    \    case 52: return true\n    case 53: return true\n    case 54: return true\n\
    \    case 55: return true\n    case 56: return true\n    case 57: return true\n\
    \    case 58: return true\n    case 59: return true\n    case 60: return true\n\
    \    case 61: return true\n    case 62: return true\n    case 63: return true\n\
    \    case 64: return true\n    case 65: return true\n    case 66: return true\n\
    \    case 67: return true\n    case 68: return true\n    case 69: return true\n\
    \    case 70: return true\n    case 71: return true\n    case 72: return true\n\
    \    case 73: return true\n    case 74: return true\n    case 75: return true\n\
    \    case 76: return true\n    case 77: return true\n    case 78: return true\n\
    \    case 79: return true\n    case 80: return true\n    case 81: return true\n\
    \    case 82: return true\n    case 83: return true\n    case 84: return true\n\
    \    case 85: return true\n    case 86: return true\n    case 87: return true\n\
    \    case 88: return true\n    case 89: return true\n    case 90: return true\n\
    \    case 91: return true\n    case 92: return true\n    case 93: return true\n\
    \    case 94: return true\n    case 95: return true\n    case 96: return true\n\
    \    case 97: return true\n    case 98: return true\n    case 99: return true\n\
    \    case 100: return true\n    case 101: return \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8itmsfg1.swift:131:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmp8itmsfg1.swift:6:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmp8itmsfg1.swift:108:15: error: non-void function should\
    \ return a value\n    case 101: return \n              ^\n/tmp/tmp8itmsfg1.swift:7:5:\
    \ error: switch must be exhaustive\n    switch a {\n    ^\n/tmp/tmp8itmsfg1.swift:7:5:\
    \ note: do you want to add a default clause?\n    switch a {\n    ^\n/tmp/tmp8itmsfg1.swift:112:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpru9a27nv/tmpru9a27nv.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdd622fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdd5f26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdd5f26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdd5f257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpru9a27nv                        0x000055c2a59e82b7 <unavailable> + 4791

    5    libc.so.6                          0x00002afdd641b460 __libc_start_main +
    245

    6    tmpru9a27nv                        0x000055c2a59e7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpru9a27nv/tmpru9a27nv.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdd622fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdd5f26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdd5f26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdd5f257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpru9a27nv                        0x000055c2a59e82b7 <unavailable> + 4791

    5    libc.so.6                          0x00002afdd641b460 __libc_start_main +
    245

    6    tmpru9a27nv                        0x000055c2a59e7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   switch a {\n    case 1: return true\n    case 2: return true\n    case 3:\
    \ return true\n    case 4: return true\n    case 5: return true\n    case 6: return\
    \ true\n    case 7: return true\n    case 8: return true\n    case 9: return true\n\
    \    case 10: return true\n    case 11: return true\n    case 12: return true\n\
    \    case 13: return true\n    case 14: return true\n    case 15: return true\n\
    \    case 16: return true\n    case 17: return true\n    case 18: return true\n\
    \    case 19: return true\n    case 20: return true\n    case 21: return true\n\
    \    case 22: return true\n    case 23: return true\n    case 24: return true\n\
    \    case 25: return true\n    case 26: return true\n    case 27: return true\n\
    \    case 28: return true\n    case 29: return true\n    case 30: return true\n\
    \    case 31: return true\n    case 32: return true\n    case 33: return true\n\
    \    case 34: return true\n    case 35: return true\n    case 36: return true\n\
    \    case 37: return true\n    case 38: return true\n    case 39: return true\n\
    \    case 40: return true\n    case 41: return true\n    case 42: return true\n\
    \    case 43: return true\n    case 44: return true\n    case 45: return true\n\
    \    case 46: return true\n    case 47: return true\n    case 48: return true\n\
    \    case 49: return true\n    case 50: return true\n    case 51: return true\n\
    \    case 52: return true\n    case 53: return true\n    case 54: return true\n\
    \    case 55: return true\n    case 56: return true\n    case 57: return true\n\
    \    case 58: return true\n    case 59: return true\n    case 60: return true\n\
    \    case 61: return true\n    case 62: return true\n    case 63: return true\n\
    \    case 64: return true\n    case 65: return true\n    case 66: return true\n\
    \    case 67: return true\n    case 68: return true\n    case 69: return true\n\
    \    case 70: return true\n    case 71: return true\n    case 72: return true\n\
    \    case 73: return true\n    case 74: return true\n    case 75: return true\n\
    \    case 76: return true\n    case 77: return true\n    case 78: return true\n\
    \    case 79: return true\n    case 80: return true\n    case 81: return true\n\
    \    case 82: return true\n    case 83: return true\n    case 84: return true\n\
    \    case 85: return true\n    case 86: return true\n    case 87: return true\n\
    \    case 88: return true\n    case 89: return true\n    case 90: return true\n\
    \    case 91: return true\n    case 92: return true\n    case 93: return true\n\
    \    case 94: return true\n    case 95: return true\n    case 96: return true\n\
    \    case 97: return true\n    case 98: return true\n    case 99: return true\n\
    \    case 100: return true\n    case 101: return \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8itmsfg1.swift:131:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmp8itmsfg1.swift:6:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmp8itmsfg1.swift:108:15: error: non-void function should\
    \ return a value\n    case 101: return \n              ^\n/tmp/tmp8itmsfg1.swift:7:5:\
    \ error: switch must be exhaustive\n    switch a {\n    ^\n/tmp/tmp8itmsfg1.swift:7:5:\
    \ note: do you want to add a default clause?\n    switch a {\n    ^\n/tmp/tmp8itmsfg1.swift:112:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a == Int(a) * Int(a) * Int(a) * Int(a)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpr0b2ddl9/tmpr0b2ddl9.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f7d303c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f7cffab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f7cffa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f7cff97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr0b2ddl9                        0x00005604966ee3cd <unavailable> + 5069

    5    libc.so.6                          0x00002b1f7d4ef460 __libc_start_main +
    245

    6    tmpr0b2ddl9                        0x00005604966edf99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   if a <= 1 {\n        return false\n    }\n    if a <= 3 {\n        return\
    \ true\n    }\n    if a <= 6 {\n        return true\n    }\n    if a <= 9 {\n\
    \        return true\n    }\n    if a <= 12 {\n        return true\n    }\n  \
    \  if a <= 15 {\n        return true\n    }\n    if a <= 18 {\n        return\
    \ true\n    }\n    if a <= 21 {\n        return true\n    }\n    if a <= 24 {\n\
    \        return true\n    }\n    if a <= 27 {\n        return true\n    }\n  \
    \  if a <= 30 {\n        return true\n    }\n    if a <= 33 {\n        return\
    \ true\n    }\n    if a <= 36 {\n        return true\n    }\n    if a <= 39 {\n\
    \        return true\n    }\n    if a <= 42 {\n        return true\n    }\n  \
    \  if a <= 45 {\n        return true\n    }\n    if a <= 48 {\n        return\
    \ true\n    }\n    if a <= 51 {\n        return true\n    }\n    if a <= 54 {\n\
    \        return true\n    }\n    if a <= 57 {\n        return true\n    }\n  \
    \  if a <= 60 {\n        return true\n    }\n    if a <= 63 {\n        return\
    \ true\n    }\n    if a <= 66 {\n        return true\n    }\n    if a <= 69 {\n\
    \        return true\n    }\n    if a <= 72 {\n        return true\n    }\n  \
    \  if a <= 75 {\n        return true\n    }\n    if a <= 78 {\n        return\
    \ true\n    }\n    if a <= 81 {\n        return true\n    }\n    if a <= 84 {\n\
    \        return true\n    }\n    if a <= 87 {\n        return true\n    }\n  \
    \  if a <= 90 {\n        return true\n    }\n    if a <= 93 {\n        return\
    \ true\n    }\n    if a <= 96 {\n        return true\n    }\n    if a <= 99 {\n\
    \        return true\n    }\n    if a <= 102 {\n        return true\n    }\n \
    \   if a <= 105 {\n        return true\n    }\n    if a <= 108 {\n        return\
    \ true\n    }\n    if a <= 111 {\n        return true\n    }\n    if a <= 114\
    \ {\n        return true\n    }\n    if a <= 117 {\n        return true\n    }\n\
    \    if a <= 120 {\n        return true\n    }\n    if a <= 123 {\n        return\
    \ true\n    }\n    if a <= 126 {\n        return true\n    }\n    if a <= 129\
    \ {\n        return true\n    }\n    if a <= 132 {\n        return true\n    }\n\
    \    if a <= 135 {\n        return true\n    }\n    if a <= 138 {\n        return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpr2op_6sx.swift:169:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmpr2op_6sx.swift:6:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmpr2op_6sx.swift:150:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a == Int(a) * Int(a) * Int(a) * Int(a)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpr0b2ddl9/tmpr0b2ddl9.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f7d303c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f7cffab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f7cffa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f7cff97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr0b2ddl9                        0x00005604966ee3cd <unavailable> + 5069

    5    libc.so.6                          0x00002b1f7d4ef460 __libc_start_main +
    245

    6    tmpr0b2ddl9                        0x00005604966edf99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a%a%a%a%a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp09a6tc3e/tmp09a6tc3e.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b03e04b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b03e01aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b03e01aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b03e01a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp09a6tc3e                        0x000055ea0352b2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b03e069f460 __libc_start_main +
    245

    6    tmp09a6tc3e                        0x000055ea0352aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a%a%a%a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp61swcvw_/tmp61swcvw_.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c1803fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c17d36b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c17d36988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c17d357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp61swcvw_                        0x00005593a20df2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b3c1822b460 __libc_start_main +
    245

    6    tmp61swcvw_                        0x00005593a20deef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpru9a27nv/tmpru9a27nv.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdd622fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdd5f26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdd5f26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdd5f257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpru9a27nv                        0x000055c2a59e82b7 <unavailable> + 4791

    5    libc.so.6                          0x00002afdd641b460 __libc_start_main +
    245

    6    tmpru9a27nv                        0x000055c2a59e7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpru9a27nv/tmpru9a27nv.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdd622fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdd5f26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdd5f26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdd5f257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpru9a27nv                        0x000055c2a59e82b7 <unavailable> + 4791

    5    libc.so.6                          0x00002afdd641b460 __libc_start_main +
    245

    6    tmpru9a27nv                        0x000055c2a59e7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpns1sfs0v.swift:7:521: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n    return a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                ^\n         \
    \  ((                                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                         ) != 0)\n"
  stdout: ''
  timestamp: 1659979793
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpru9a27nv/tmpru9a27nv.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdd622fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdd5f26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdd5f26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdd5f257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpru9a27nv                        0x000055c2a59e82b7 <unavailable> + 4791

    5    libc.so.6                          0x00002afdd641b460 __libc_start_main +
    245

    6    tmpru9a27nv                        0x000055c2a59e7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpru9a27nv/tmpru9a27nv.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdd622fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdd5f26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdd5f26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdd5f257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpru9a27nv                        0x000055c2a59e82b7 <unavailable> + 4791

    5    libc.so.6                          0x00002afdd641b460 __libc_start_main +
    245

    6    tmpru9a27nv                        0x000055c2a59e7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: '/tmp/tmpcl71z_fj.swift:8:1: error: missing return in global function expected
    to return ''Bool''

    }

    ^

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a%a%a%a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp61swcvw_/tmp61swcvw_.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c1803fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c17d36b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c17d36988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c17d357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp61swcvw_                        0x00005593a20df2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b3c1822b460 __libc_start_main +
    245

    6    tmp61swcvw_                        0x00005593a20deef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % 3 == 0 || a % 5 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpbz9gsxwj/tmpbz9gsxwj.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af13547cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af135173b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af135173988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1351727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbz9gsxwj                        0x0000555cc6736241 <unavailable> + 4673

    5    libc.so.6                          0x00002af135668460 __libc_start_main +
    245

    6    tmpbz9gsxwj                        0x0000555cc6735ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   if a <= 0 {\n        return false\n    }\n    var cube = 0\n    for _ in 0..<Int(sqrt(Double(a)))\
    \ + 1 {\n        cube *= a\n        cube %= Int(sqrt(Double(a)))\n    }\n    return\
    \ cube == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5hkn04dz.swift:11:22: error: cannot find 'sqrt' in scope\n    for\
    \ _ in 0..<Int(sqrt(Double(a))) + 1 {\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659979792
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n        return true\n    }\n    if a == 51 {\n\
    \        return true\n    }\n    if a == 52 {\n        return \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp04w0kh7d.swift:184:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmp04w0kh7d.swift:6:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmp04w0kh7d.swift:161:9: error: non-void function should\
    \ return a value\n        return \n        ^\n/tmp/tmp04w0kh7d.swift:165:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979791
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   if a <= 1 {\n        return false\n    }\n    if a <= 3 {\n        return\
    \ true\n    }\n    if a <= 5 {\n        return true\n    }\n    if a <= 7 {\n\
    \        return true\n    }\n    if a <= 9 {\n        return true\n    }\n   \
    \ if a <= 11 {\n        return true\n    }\n    if a <= 13 {\n        return true\n\
    \    }\n    if a <= 15 {\n        return true\n    }\n    if a <= 17 {\n     \
    \   return true\n    }\n    if a <= 19 {\n        return true\n    }\n    if a\
    \ <= 21 {\n        return true\n    }\n    if a <= 23 {\n        return true\n\
    \    }\n    if a <= 25 {\n        return true\n    }\n    if a <= 27 {\n     \
    \   return true\n    }\n    if a <= 29 {\n        return true\n    }\n    if a\
    \ <= 31 {\n        return true\n    }\n    if a <= 33 {\n        return true\n\
    \    }\n    if a <= 35 {\n        return true\n    }\n    if a <= 37 {\n     \
    \   return true\n    }\n    if a <= 39 {\n        return true\n    }\n    if a\
    \ <= 41 {\n        return true\n    }\n    if a <= 43 {\n        return true\n\
    \    }\n    if a <= 45 {\n        return true\n    }\n    if a <= 47 {\n     \
    \   return true\n    }\n    if a <= 49 {\n        return true\n    }\n    if a\
    \ <= 51 {\n        return true\n    }\n    if a <= 53 {\n        return true\n\
    \    }\n    if a <= 55 {\n        return true\n    }\n    if a <= 57 {\n     \
    \   return true\n    }\n    if a <= 59 {\n        return true\n    }\n    if a\
    \ <= 61 {\n        return true\n    }\n    if a <= 63 {\n        return true\n\
    \    }\n    if a <= 65 {\n        return true\n    }\n    if a <= 67 {\n     \
    \   return true\n    }\n    if a <= 69 {\n        return true\n    }\n    if a\
    \ <= 71 {\n        return true\n    }\n    if a <= 73 {\n        return true\n\
    \    }\n    if a <= 75 {\n        return true\n    }\n    if a <= 77 {\n     \
    \   return true\n    }\n    if a <= 79 {\n        return true\n    }\n    if a\
    \ <= 81 {\n        return true\n    }\n    if a <= 83 {\n        return true\n\
    \    }\n    if a <= 85 {\n        return true\n    }\n    if a <= 87 {\n     \
    \   return true\n    }\n    if a <= 89 {\n        return true\n    }\n    if a\
    \ <= 91 {\n        return true\n    }\n    if a <= 93 {\n        return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxyeq97iy.swift:169:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmpxyeq97iy.swift:6:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmpxyeq97iy.swift:150:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % 3 == 0 || a % 5 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpbz9gsxwj/tmpbz9gsxwj.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af13547cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af135173b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af135173988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1351727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbz9gsxwj                        0x0000555cc6736241 <unavailable> + 4673

    5    libc.so.6                          0x00002af135668460 __libc_start_main +
    245

    6    tmpbz9gsxwj                        0x0000555cc6735ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpns1sfs0v.swift:7:521: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n    return a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                ^\n         \
    \  ((                                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                         ) != 0)\n"
  stdout: ''
  timestamp: 1659979793
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a*a*a == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpq_jwbj49/tmpq_jwbj49.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b16601e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b165fedbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b165fedb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b165feda7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq_jwbj49                        0x000055d8f9226311 <unavailable> + 4881

    5    libc.so.6                          0x00002b16603d0460 __libc_start_main +
    245

    6    tmpq_jwbj49                        0x000055d8f9225e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979792
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: '/tmp/tmpcl71z_fj.swift:8:1: error: missing return in global function expected
    to return ''Bool''

    }

    ^

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpru9a27nv/tmpru9a27nv.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdd622fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdd5f26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdd5f26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdd5f257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpru9a27nv                        0x000055c2a59e82b7 <unavailable> + 4791

    5    libc.so.6                          0x00002afdd641b460 __libc_start_main +
    245

    6    tmpru9a27nv                        0x000055c2a59e7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpw4txhiro/tmpw4txhiro.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fe8963c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fe865ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fe865a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fe86597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw4txhiro                        0x0000558e0949a227 <unavailable> + 4647

    5    libc.so.6                          0x00002b1fe8b4f460 __libc_start_main +
    245

    6    tmpw4txhiro                        0x0000558e09499e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpru9a27nv/tmpru9a27nv.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdd622fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdd5f26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdd5f26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdd5f257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpru9a27nv                        0x000055c2a59e82b7 <unavailable> + 4791

    5    libc.so.6                          0x00002afdd641b460 __libc_start_main +
    245

    6    tmpru9a27nv                        0x000055c2a59e7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % 1 == 0 && a % 2 == 0 && a % 3 == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpdm0kalj_/tmpdm0kalj_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61bf3cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61bf0c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b61bf0c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61bf0c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdm0kalj_                        0x000055ba568be241 <unavailable> + 4673

    5    libc.so.6                          0x00002b61bf5b7460 __libc_start_main +
    245

    6    tmpdm0kalj_                        0x000055ba568bdef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % 1 == 0 && a % 2 == 0 && a % 3 == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpdm0kalj_/tmpdm0kalj_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61bf3cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61bf0c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b61bf0c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61bf0c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdm0kalj_                        0x000055ba568be241 <unavailable> + 4673

    5    libc.so.6                          0x00002b61bf5b7460 __libc_start_main +
    245

    6    tmpdm0kalj_                        0x000055ba568bdef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979792
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n        return true\n    }\n    if a == 51 {\n\
    \        return true\n    }\n    if a == 52 {\n        return \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp04w0kh7d.swift:184:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmp04w0kh7d.swift:6:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmp04w0kh7d.swift:161:9: error: non-void function should\
    \ return a value\n        return \n        ^\n/tmp/tmp04w0kh7d.swift:165:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpw4txhiro/tmpw4txhiro.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fe8963c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fe865ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fe865a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fe86597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw4txhiro                        0x0000558e0949a227 <unavailable> + 4647

    5    libc.so.6                          0x00002b1fe8b4f460 __libc_start_main +
    245

    6    tmpw4txhiro                        0x0000558e09499e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpns1sfs0v.swift:7:521: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n    return a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                ^\n         \
    \  ((                                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                         ) != 0)\n"
  stdout: ''
  timestamp: 1659979793
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a == Int(a) * Int(a) * Int(a) \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmptb5vh_nu/tmptb5vh_nu.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53635f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53632e8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53632e8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53632e77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptb5vh_nu                        0x000055954839c441 <unavailable> + 5185

    5    libc.so.6                          0x00002b53637dd460 __libc_start_main +
    245

    6    tmptb5vh_nu                        0x000055954839bf99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a*a*a == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpq_jwbj49/tmpq_jwbj49.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b16601e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b165fedbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b165fedb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b165feda7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq_jwbj49                        0x000055d8f9226311 <unavailable> + 4881

    5    libc.so.6                          0x00002b16603d0460 __libc_start_main +
    245

    6    tmpq_jwbj49                        0x000055d8f9225e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpru9a27nv/tmpru9a27nv.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdd622fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdd5f26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdd5f26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdd5f257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpru9a27nv                        0x000055c2a59e82b7 <unavailable> + 4791

    5    libc.so.6                          0x00002afdd641b460 __libc_start_main +
    245

    6    tmpru9a27nv                        0x000055c2a59e7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   if a < 0 {\n        return false\n    }\n    if a == 1 {\n        return true\n\
    \    }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n       \
    \ return true\n    }\n    if a == 4 {\n        return true\n    }\n    if a ==\
    \ 5 {\n        return true\n    }\n    if a == 6 {\n        return true\n    }\n\
    \    if a == 7 {\n        return true\n    }\n    if a == 8 {\n        return\
    \ true\n    }\n    if a == 9 {\n        return true\n    }\n    if a == 10 {\n\
    \        return true\n    }\n    if a == 11 {\n        return true\n    }\n  \
    \  if a == 12 {\n        return true\n    }\n    if a == 13 {\n        return\
    \ true\n    }\n    if a == 14 {\n        return true\n    }\n    if a == 15 {\n\
    \        return true\n    }\n    if a == 16 {\n        return true\n    }\n  \
    \  if a == 17 {\n        return true\n    }\n    if a == 18 {\n        return\
    \ true\n    }\n    if a == 19 {\n        return true\n    }\n    if a == 20 {\n\
    \        return true\n    }\n    if a == 21 {\n        return true\n    }\n  \
    \  if a == 22 {\n        return true\n    }\n    if a == 23 {\n        return\
    \ true\n    }\n    if a == 24 {\n        return true\n    }\n    if a == 25 {\n\
    \        return true\n    }\n    if a == 26 {\n        return true\n    }\n  \
    \  if a == 27 {\n        return true\n    }\n    if a == 28 {\n        return\
    \ true\n    }\n    if a == 29 {\n        return true\n    }\n    if a == 30 {\n\
    \        return true\n    }\n    if a == 31 {\n        return true\n    }\n  \
    \  if a == 32 {\n        return true\n    }\n    if a == 33 {\n        return\
    \ true\n    }\n    if a == 34 {\n        return true\n    }\n    if a == 35 {\n\
    \        return true\n    }\n    if a == 36 {\n        return true\n    }\n  \
    \  if a == 37 {\n        return true\n    }\n    if a == 38 {\n        return\
    \ true\n    }\n    if a == 39 {\n        return true\n    }\n    if a == 40 {\n\
    \        return true\n    }\n    if a == 41 {\n        return true\n    }\n  \
    \  if a == 42 {\n        return true\n    }\n    if a == 43 {\n        return\
    \ true\n    }\n    if a == 44 {\n        return true\n    }\n    if a == 45 {\n\
    \        return true\n    }\n    if a == 46 {\n        return true\n    }\n  \
    \  if a == 47 {\n        return true\n    }\n    if a == 48 {\n        return\
    \ true\n    }\n    if a == 49 {\n        return true\n    }\n    if a == 50 {\n\
    \        return true\n    }\n    if a == 51 {\n        return \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpivgzf17y.swift:184:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmpivgzf17y.swift:6:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmpivgzf17y.swift:161:9: error: non-void function should\
    \ return a value\n        return \n        ^\n/tmp/tmpivgzf17y.swift:165:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpru9a27nv/tmpru9a27nv.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdd622fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdd5f26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdd5f26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdd5f257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpru9a27nv                        0x000055c2a59e82b7 <unavailable> + 4791

    5    libc.so.6                          0x00002afdd641b460 __libc_start_main +
    245

    6    tmpru9a27nv                        0x000055c2a59e7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpru9a27nv/tmpru9a27nv.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdd622fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdd5f26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdd5f26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdd5f257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpru9a27nv                        0x000055c2a59e82b7 <unavailable> + 4791

    5    libc.so.6                          0x00002afdd641b460 __libc_start_main +
    245

    6    tmpru9a27nv                        0x000055c2a59e7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a%3 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmppi72de3d/tmppi72de3d.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35562e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3555fddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3555fdd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3555fdc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppi72de3d                        0x000055e5ce3c3241 <unavailable> + 4673

    5    libc.so.6                          0x00002b35564d2460 __libc_start_main +
    245

    6    tmppi72de3d                        0x000055e5ce3c2ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   if a < 1 {\n        return false\n    }\n    if a > 1 {\n        return false\n\
    \    }\n    if a < 3 {\n        return false\n    }\n    if a < 6 {\n        return\
    \ false\n    }\n    if a < 9 {\n        return true\n    }\n    if a < 12 {\n\
    \        return true\n    }\n    if a < 15 {\n        return true\n    }\n   \
    \ if a < 18 {\n        return true\n    }\n    if a < 21 {\n        return true\n\
    \    }\n    if a < 24 {\n        return true\n    }\n    if a < 27 {\n       \
    \ return true\n    }\n    if a < 30 {\n        return true\n    }\n    if a <\
    \ 33 {\n        return true\n    }\n    if a < 36 {\n        return true\n   \
    \ }\n    if a < 39 {\n        return true\n    }\n    if a < 42 {\n        return\
    \ true\n    }\n    if a < 45 {\n        return true\n    }\n    if a < 48 {\n\
    \        return true\n    }\n    if a < 51 {\n        return true\n    }\n   \
    \ if a < 54 {\n        return true\n    }\n    if a < 57 {\n        return true\n\
    \    }\n    if a < 60 {\n        return true\n    }\n    if a < 63 {\n       \
    \ return true\n    }\n    if a < 66 {\n        return true\n    }\n    if a <\
    \ 69 {\n        return true\n    }\n    if a < 72 {\n        return true\n   \
    \ }\n    if a < 75 {\n        return true\n    }\n    if a < 78 {\n        return\
    \ true\n    }\n    if a < 81 {\n        return true\n    }\n    if a < 84 {\n\
    \        return true\n    }\n    if a < 87 {\n        return true\n    }\n   \
    \ if a < 90 {\n        return true\n    }\n    if a < 93 {\n        return true\n\
    \    }\n    if a < 96 {\n        return true\n    }\n    if a < 99 {\n       \
    \ return true\n    }\n    if a < 102 {\n        return true\n    }\n    if a <\
    \ 105 {\n        return true\n    }\n    if a < 108 {\n        return true\n \
    \   }\n    if a < 111 {\n        return true\n    }\n    if a < 114 {\n      \
    \  return true\n    }\n    if a < 117 {\n        return true\n    }\n    if a\
    \ < 120 {\n        return true\n    }\n    if a < 123 {\n        return true\n\
    \    }\n    if a < 126 {\n        return true\n    }\n    if a < 129 {\n     \
    \   return true\n    }\n    if a < 132 {\n        return true\n    }\n    if a\
    \ < 135 {\n        return true\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp885e9wm7.swift:170:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmp885e9wm7.swift:6:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmp885e9wm7.swift:151:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpw4txhiro/tmpw4txhiro.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fe8963c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fe865ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fe865a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fe86597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw4txhiro                        0x0000558e0949a227 <unavailable> + 4647

    5    libc.so.6                          0x00002b1fe8b4f460 __libc_start_main +
    245

    6    tmpw4txhiro                        0x0000558e09499e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpns1sfs0v.swift:7:521: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n    return a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                ^\n         \
    \  ((                                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                         ) != 0)\n"
  stdout: ''
  timestamp: 1659979793
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpru9a27nv/tmpru9a27nv.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdd622fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdd5f26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdd5f26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdd5f257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpru9a27nv                        0x000055c2a59e82b7 <unavailable> + 4791

    5    libc.so.6                          0x00002afdd641b460 __libc_start_main +
    245

    6    tmpru9a27nv                        0x000055c2a59e7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % 3 == 0 || a % 5 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpbz9gsxwj/tmpbz9gsxwj.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af13547cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af135173b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af135173988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1351727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbz9gsxwj                        0x0000555cc6736241 <unavailable> + 4673

    5    libc.so.6                          0x00002af135668460 __libc_start_main +
    245

    6    tmpbz9gsxwj                        0x0000555cc6735ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpru9a27nv/tmpru9a27nv.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdd622fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdd5f26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdd5f26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdd5f257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpru9a27nv                        0x000055c2a59e82b7 <unavailable> + 4791

    5    libc.so.6                          0x00002afdd641b460 __libc_start_main +
    245

    6    tmpru9a27nv                        0x000055c2a59e7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpns1sfs0v.swift:7:521: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n    return a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                ^\n         \
    \  ((                                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                         ) != 0)\n"
  stdout: ''
  timestamp: 1659979793
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpru9a27nv/tmpru9a27nv.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdd622fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdd5f26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdd5f26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdd5f257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpru9a27nv                        0x000055c2a59e82b7 <unavailable> + 4791

    5    libc.so.6                          0x00002afdd641b460 __libc_start_main +
    245

    6    tmpru9a27nv                        0x000055c2a59e7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpru9a27nv/tmpru9a27nv.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdd622fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdd5f26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdd5f26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdd5f257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpru9a27nv                        0x000055c2a59e82b7 <unavailable> + 4791

    5    libc.so.6                          0x00002afdd641b460 __libc_start_main +
    245

    6    tmpru9a27nv                        0x000055c2a59e7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   switch a {\n    case 1: return true\n    case 2: return true\n    case 3:\
    \ return true\n    case 4: return true\n    case 5: return true\n    case 6: return\
    \ true\n    case 7: return true\n    case 8: return true\n    case 9: return true\n\
    \    case 10: return true\n    case 11: return true\n    case 12: return true\n\
    \    case 13: return true\n    case 14: return true\n    case 15: return true\n\
    \    case 16: return true\n    case 17: return true\n    case 18: return true\n\
    \    case 19: return true\n    case 20: return true\n    case 21: return true\n\
    \    case 22: return true\n    case 23: return true\n    case 24: return true\n\
    \    case 25: return true\n    case 26: return true\n    case 27: return true\n\
    \    case 28: return true\n    case 29: return true\n    case 30: return true\n\
    \    case 31: return true\n    case 32: return true\n    case 33: return true\n\
    \    case 34: return true\n    case 35: return true\n    case 36: return true\n\
    \    case 37: return true\n    case 38: return true\n    case 39: return true\n\
    \    case 40: return true\n    case 41: return true\n    case 42: return true\n\
    \    case 43: return true\n    case 44: return true\n    case 45: return true\n\
    \    case 46: return true\n    case 47: return true\n    case 48: return true\n\
    \    case 49: return true\n    case 50: return true\n    case 51: return true\n\
    \    case 52: return true\n    case 53: return true\n    case 54: return true\n\
    \    case 55: return true\n    case 56: return true\n    case 57: return true\n\
    \    case 58: return true\n    case 59: return true\n    case 60: return true\n\
    \    case 61: return true\n    case 62: return true\n    case 63: return true\n\
    \    case 64: return true\n    case 65: return true\n    case 66: return true\n\
    \    case 67: return true\n    case 68: return true\n    case 69: return true\n\
    \    case 70: return true\n    case 71: return true\n    case 72: return true\n\
    \    case 73: return true\n    case 74: return true\n    case 75: return true\n\
    \    case 76: return true\n    case 77: return true\n    case 78: return true\n\
    \    case 79: return true\n    case 80: return true\n    case 81: return true\n\
    \    case 82: return true\n    case 83: return true\n    case 84: return true\n\
    \    case 85: return true\n    case 86: return true\n    case 87: return true\n\
    \    case 88: return true\n    case 89: return true\n    case 90: return true\n\
    \    case 91: return true\n    case 92: return true\n    case 93: return true\n\
    \    case 94: return true\n    case 95: return true\n    case 96: return true\n\
    \    case 97: return true\n    case 98: return true\n    case 99: return true\n\
    \    case 100: return true\n    case 101: return \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8itmsfg1.swift:131:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmp8itmsfg1.swift:6:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmp8itmsfg1.swift:108:15: error: non-void function should\
    \ return a value\n    case 101: return \n              ^\n/tmp/tmp8itmsfg1.swift:7:5:\
    \ error: switch must be exhaustive\n    switch a {\n    ^\n/tmp/tmp8itmsfg1.swift:7:5:\
    \ note: do you want to add a default clause?\n    switch a {\n    ^\n/tmp/tmp8itmsfg1.swift:112:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979791
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n        return true\n    }\n    if a == 51 {\n\
    \        return true\n    }\n    if a == 52 {\n        return \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp04w0kh7d.swift:184:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmp04w0kh7d.swift:6:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmp04w0kh7d.swift:161:9: error: non-void function should\
    \ return a value\n        return \n        ^\n/tmp/tmp04w0kh7d.swift:165:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979791
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   if a <= 0 {\n        return false\n    }\n    if a > 1 {\n        return false\n\
    \    }\n    if a > 2 {\n        return false\n    }\n    if a > 3 {\n        return\
    \ false\n    }\n    if a > 4 {\n        return false\n    }\n    if a > 5 {\n\
    \        return false\n    }\n    if a > 6 {\n        return false\n    }\n  \
    \  if a > 7 {\n        return false\n    }\n    if a > 8 {\n        return false\n\
    \    }\n    if a > 9 {\n        return false\n    }\n    if a > 10 {\n       \
    \ return false\n    }\n    if a > 11 {\n        return false\n    }\n    if a\
    \ > 12 {\n        return false\n    }\n    if a > 13 {\n        return false\n\
    \    }\n    if a > 14 {\n        return false\n    }\n    if a > 15 {\n      \
    \  return false\n    }\n    if a > 16 {\n        return false\n    }\n    if a\
    \ > 17 {\n        return false\n    }\n    if a > 18 {\n        return false\n\
    \    }\n    if a > 19 {\n        return false\n    }\n    if a > 20 {\n      \
    \  return false\n    }\n    if a > 21 {\n        return false\n    }\n    if a\
    \ > 22 {\n        return false\n    }\n    if a > 23 {\n        return false\n\
    \    }\n    if a > 24 {\n        return false\n    }\n    if a > 25 {\n      \
    \  return false\n    }\n    if a > 26 {\n        return false\n    }\n    if a\
    \ > 27 {\n        return false\n    }\n    if a > 28 {\n        return false\n\
    \    }\n    if a > 29 {\n        return false\n    }\n    if a > 30 {\n      \
    \  return false\n    }\n    if a > 31 {\n        return false\n    }\n    if a\
    \ > 32 {\n        return false\n    }\n    if a > 33 {\n        return false\n\
    \    }\n    if a > 34 {\n        return false\n    }\n    if a > 35 {\n      \
    \  return false\n    }\n    if a > 36 {\n        return false\n    }\n    if a\
    \ > 37 {\n        return false\n    }\n    if a > 38 {\n        return false\n\
    \    }\n    if a > 39 {\n        return false\n    }\n    if a > 40 {\n      \
    \  return false\n    }\n    if a > 41 {\n        return false\n    }\n    if a\
    \ > 42 {\n        return false\n    }\n    if a > 43 {\n        return false\n\
    \    }\n    if a > 44 {\n        return false\n    }\n    if a > 45 {\n      \
    \  return false\n    }\n    if a > 46 {\n        return false\n    }\n\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: '/tmp/tmp84s_odvp.swift:149:1: error: missing return in global function
    expected to return ''Bool''

    }

    ^

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a%a%a%a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp61swcvw_/tmp61swcvw_.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c1803fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c17d36b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c17d36988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c17d357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp61swcvw_                        0x00005593a20df2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b3c1822b460 __libc_start_main +
    245

    6    tmp61swcvw_                        0x00005593a20deef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a%a%a%a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp61swcvw_/tmp61swcvw_.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c1803fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c17d36b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c17d36988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c17d357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp61swcvw_                        0x00005593a20df2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b3c1822b460 __libc_start_main +
    245

    6    tmp61swcvw_                        0x00005593a20deef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a%a%a%a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp61swcvw_/tmp61swcvw_.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c1803fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c17d36b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c17d36988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c17d357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp61swcvw_                        0x00005593a20df2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b3c1822b460 __libc_start_main +
    245

    6    tmp61swcvw_                        0x00005593a20deef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979792
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   switch a {\n    case 1: return true\n    case 2: return true\n    case 3:\
    \ return true\n    case 4: return true\n    case 5: return true\n    case 6: return\
    \ true\n    case 7: return true\n    case 8: return true\n    case 9: return true\n\
    \    case 10: return true\n    case 11: return true\n    case 12: return true\n\
    \    case 13: return true\n    case 14: return true\n    case 15: return true\n\
    \    case 16: return true\n    case 17: return true\n    case 18: return true\n\
    \    case 19: return true\n    case 20: return true\n    case 21: return true\n\
    \    case 22: return true\n    case 23: return true\n    case 24: return true\n\
    \    case 25: return true\n    case 26: return true\n    case 27: return true\n\
    \    case 28: return true\n    case 29: return true\n    case 30: return true\n\
    \    case 31: return true\n    case 32: return true\n    case 33: return true\n\
    \    case 34: return true\n    case 35: return true\n    case 36: return true\n\
    \    case 37: return true\n    case 38: return true\n    case 39: return true\n\
    \    case 40: return true\n    case 41: return true\n    case 42: return true\n\
    \    case 43: return true\n    case 44: return true\n    case 45: return true\n\
    \    case 46: return true\n    case 47: return true\n    case 48: return true\n\
    \    case 49: return true\n    case 50: return true\n    case 51: return true\n\
    \    case 52: return true\n    case 53: return true\n    case 54: return true\n\
    \    case 55: return true\n    case 56: return true\n    case 57: return true\n\
    \    case 58: return true\n    case 59: return true\n    case 60: return true\n\
    \    case 61: return true\n    case 62: return true\n    case 63: return true\n\
    \    case 64: return true\n    case 65: return true\n    case 66: return true\n\
    \    case 67: return true\n    case 68: return true\n    case 69: return true\n\
    \    case 70: return true\n    case 71: return true\n    case 72: return true\n\
    \    case 73: return true\n    case 74: return true\n    case 75: return true\n\
    \    case 76: return true\n    case 77: return true\n    case 78: return true\n\
    \    case 79: return true\n    case 80: return true\n    case 81: return true\n\
    \    case 82: return true\n    case 83: return true\n    case 84: return true\n\
    \    case 85: return true\n    case 86: return true\n    case 87: return true\n\
    \    case 88: return true\n    case 89: return true\n    case 90: return true\n\
    \    case 91: return true\n    case 92: return true\n    case 93: return true\n\
    \    case 94: return true\n    case 95: return true\n    case 96: return true\n\
    \    case 97: return true\n    case 98: return true\n    case 99: return true\n\
    \    case 100: return true\n    case 101: return \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8itmsfg1.swift:131:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmp8itmsfg1.swift:6:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmp8itmsfg1.swift:108:15: error: non-void function should\
    \ return a value\n    case 101: return \n              ^\n/tmp/tmp8itmsfg1.swift:7:5:\
    \ error: switch must be exhaustive\n    switch a {\n    ^\n/tmp/tmp8itmsfg1.swift:7:5:\
    \ note: do you want to add a default clause?\n    switch a {\n    ^\n/tmp/tmp8itmsfg1.swift:112:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % 3 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp277n8epi/tmp277n8epi.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7dbea9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7dbe793b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7dbe793988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7dbe7927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp277n8epi                        0x0000564b0209d241 <unavailable> + 4673

    5    libc.so.6                          0x00002b7dbec88460 __libc_start_main +
    245

    6    tmp277n8epi                        0x0000564b0209cef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n        return true\n    }\n    if a == 51 {\n\
    \        return true\n    }\n    if a == 52 {\n        return \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp04w0kh7d.swift:184:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmp04w0kh7d.swift:6:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmp04w0kh7d.swift:161:9: error: non-void function should\
    \ return a value\n        return \n        ^\n/tmp/tmp04w0kh7d.swift:165:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979791
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   if a <= 0 {\n        return false\n    }\n    if a <= 1 {\n        return\
    \ true\n    }\n    if a <= 2 {\n        return true\n    }\n    if a <= 3 {\n\
    \        return true\n    }\n    if a <= 4 {\n        return true\n    }\n   \
    \ if a <= 5 {\n        return true\n    }\n    if a <= 6 {\n        return true\n\
    \    }\n    if a <= 7 {\n        return true\n    }\n    if a <= 8 {\n       \
    \ return true\n    }\n    if a <= 9 {\n        return true\n    }\n    if a <=\
    \ 10 {\n        return true\n    }\n    if a <= 11 {\n        return true\n  \
    \  }\n    if a <= 12 {\n        return true\n    }\n    if a <= 13 {\n       \
    \ return true\n    }\n    if a <= 14 {\n        return true\n    }\n    if a <=\
    \ 15 {\n        return true\n    }\n    if a <= 16 {\n        return true\n  \
    \  }\n    if a <= 17 {\n        return true\n    }\n    if a <= 18 {\n       \
    \ return true\n    }\n    if a <= 19 {\n        return true\n    }\n    if a <=\
    \ 20 {\n        return true\n    }\n    if a <= 21 {\n        return true\n  \
    \  }\n    if a <= 22 {\n        return true\n    }\n    if a <= 23 {\n       \
    \ return true\n    }\n    if a <= 24 {\n        return true\n    }\n    if a <=\
    \ 25 {\n        return true\n    }\n    if a <= 26 {\n        return true\n  \
    \  }\n    if a <= 27 {\n        return true\n    }\n    if a <= 28 {\n       \
    \ return true\n    }\n    if a <= 29 {\n        return true\n    }\n    if a <=\
    \ 30 {\n        return true\n    }\n    if a <= 31 {\n        return true\n  \
    \  }\n    if a <= 32 {\n        return true\n    }\n    if a <= 33 {\n       \
    \ return true\n    }\n    if a <= 34 {\n        return true\n    }\n    if a <=\
    \ 35 {\n        return true\n    }\n    if a <= 36 {\n        return true\n  \
    \  }\n    if a <= 37 {\n        return true\n    }\n    if a <= 38 {\n       \
    \ return true\n    }\n    if a <= 39 {\n        return true\n    }\n    if a <=\
    \ 40 {\n        return true\n    }\n    if a <= 41 {\n        return true\n  \
    \  }\n    if a <= 42 {\n        return true\n    }\n    if a <= 43 {\n       \
    \ return true\n    }\n    if a <= 44 {\n        return true\n    }\n    if a <=\
    \ 45 {\n        return true\n    }\n    if a <= 46 {\n        return true\n  \
    \  }\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: '/tmp/tmpkhsd3qlk.swift:149:1: error: missing return in global function
    expected to return ''Bool''

    }

    ^

    '
  stdout: ''
  timestamp: 1659979792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a%a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp7dvnurj8/tmp7dvnurj8.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac26f00cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac26ed03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac26ed03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac26ed027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7dvnurj8                        0x0000563d1b9722b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ac26f1f8460 __libc_start_main +
    245

    6    tmp7dvnurj8                        0x0000563d1b971ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a*a*a == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpq_jwbj49/tmpq_jwbj49.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b16601e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b165fedbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b165fedb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b165feda7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq_jwbj49                        0x000055d8f9226311 <unavailable> + 4881

    5    libc.so.6                          0x00002b16603d0460 __libc_start_main +
    245

    6    tmpq_jwbj49                        0x000055d8f9225e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a == Int(a) * Int(a) * Int(a)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp10dgtum7/tmp10dgtum7.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12b28b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b12b25aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b12b25ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b12b25ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp10dgtum7                        0x0000559563cfe441 <unavailable> + 5185

    5    libc.so.6                          0x00002b12b2aa3460 __libc_start_main +
    245

    6    tmp10dgtum7                        0x0000559563cfdf99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1659979792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a%3 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmppi72de3d/tmppi72de3d.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35562e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3555fddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3555fdd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3555fdc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppi72de3d                        0x000055e5ce3c3241 <unavailable> + 4673

    5    libc.so.6                          0x00002b35564d2460 __libc_start_main +
    245

    6    tmppi72de3d                        0x000055e5ce3c2ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpns1sfs0v.swift:7:521: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n    return a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                ^\n         \
    \  ((                                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                         ) != 0)\n"
  stdout: ''
  timestamp: 1659979793
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpru9a27nv/tmpru9a27nv.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdd622fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdd5f26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdd5f26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdd5f257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpru9a27nv                        0x000055c2a59e82b7 <unavailable> + 4791

    5    libc.so.6                          0x00002afdd641b460 __libc_start_main +
    245

    6    tmpru9a27nv                        0x000055c2a59e7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpru9a27nv/tmpru9a27nv.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdd622fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdd5f26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdd5f26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdd5f257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpru9a27nv                        0x000055c2a59e82b7 <unavailable> + 4791

    5    libc.so.6                          0x00002afdd641b460 __libc_start_main +
    245

    6    tmpru9a27nv                        0x000055c2a59e7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpru9a27nv/tmpru9a27nv.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdd622fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdd5f26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdd5f26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdd5f257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpru9a27nv                        0x000055c2a59e82b7 <unavailable> + 4791

    5    libc.so.6                          0x00002afdd641b460 __libc_start_main +
    245

    6    tmpru9a27nv                        0x000055c2a59e7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpw4txhiro/tmpw4txhiro.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fe8963c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fe865ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fe865a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fe86597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw4txhiro                        0x0000558e0949a227 <unavailable> + 4647

    5    libc.so.6                          0x00002b1fe8b4f460 __libc_start_main +
    245

    6    tmpw4txhiro                        0x0000558e09499e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpns1sfs0v.swift:7:521: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n    return a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                ^\n         \
    \  ((                                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                         ) != 0)\n"
  stdout: ''
  timestamp: 1659979793
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 4 {\n       \
    \ return true\n    }\n    if a == 5 {\n        return true\n    }\n    if a ==\
    \ 6 {\n        return true\n    }\n    if a == 7 {\n        return true\n    }\n\
    \    if a == 8 {\n        return true\n    }\n    if a == 9 {\n        return\
    \ true\n    }\n    if a == 10 {\n        return true\n    }\n    if a == 11 {\n\
    \        return true\n    }\n    if a == 12 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 14 {\n        return\
    \ true\n    }\n    if a == 15 {\n        return true\n    }\n    if a == 16 {\n\
    \        return true\n    }\n    if a == 17 {\n        return true\n    }\n  \
    \  if a == 18 {\n        return true\n    }\n    if a == 19 {\n        return\
    \ true\n    }\n    if a == 20 {\n        return true\n    }\n    if a == 21 {\n\
    \        return true\n    }\n    if a == 22 {\n        return true\n    }\n  \
    \  if a == 23 {\n        return true\n    }\n    if a == 24 {\n        return\
    \ true\n    }\n    if a == 25 {\n        return true\n    }\n    if a == 26 {\n\
    \        return true\n    }\n    if a == 27 {\n        return true\n    }\n  \
    \  if a == 28 {\n        return true\n    }\n    if a == 29 {\n        return\
    \ true\n    }\n    if a == 30 {\n        return true\n    }\n    if a == 31 {\n\
    \        return true\n    }\n    if a == 32 {\n        return true\n    }\n  \
    \  if a == 33 {\n        return true\n    }\n    if a == 34 {\n        return\
    \ true\n    }\n    if a == 35 {\n        return true\n    }\n    if a == 36 {\n\
    \        return true\n    }\n    if a == 37 {\n        return true\n    }\n  \
    \  if a == 38 {\n        return true\n    }\n    if a == 39 {\n        return\
    \ true\n    }\n    if a == 40 {\n        return true\n    }\n    if a == 41 {\n\
    \        return true\n    }\n    if a == 42 {\n        return true\n    }\n  \
    \  if a == 43 {\n        return true\n    }\n    if a == 44 {\n        return\
    \ true\n    }\n    if a == 45 {\n        return true\n    }\n    if a == 46 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 48 {\n        return true\n    }\n    if a == 49 {\n        return\
    \ true\n    }\n    if a == 50 {\n        return true\n    }\n    if a == 51 {\n\
    \        return true\n    }\n    if a == 52 {\n        return \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp04w0kh7d.swift:184:33: error: expected '}' at end of brace statement\n\
    assert(iscube(a: 1729) == false)\n                                ^\n/tmp/tmp04w0kh7d.swift:6:29:\
    \ note: to match this opening '{'\nfunc iscube(a: Int) -> Bool {\n           \
    \                 ^\n/tmp/tmp04w0kh7d.swift:161:9: error: non-void function should\
    \ return a value\n        return \n        ^\n/tmp/tmp04w0kh7d.swift:165:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % 1 == 0 && a % 2 == 0 && a % 3 == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpdm0kalj_/tmpdm0kalj_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61bf3cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61bf0c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b61bf0c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61bf0c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdm0kalj_                        0x000055ba568be241 <unavailable> + 4673

    5    libc.so.6                          0x00002b61bf5b7460 __libc_start_main +
    245

    6    tmpdm0kalj_                        0x000055ba568bdef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a%a%a%a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp61swcvw_/tmp61swcvw_.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c1803fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c17d36b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c17d36988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c17d357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp61swcvw_                        0x00005593a20df2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b3c1822b460 __libc_start_main +
    245

    6    tmp61swcvw_                        0x00005593a20deef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979792
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   if a <= 0 {\n        return false\n    }\n    if a > 1 {\n        return false\n\
    \    }\n    if a > 2 {\n        return false\n    }\n    if a > 3 {\n        return\
    \ false\n    }\n    if a > 4 {\n        return false\n    }\n    if a > 5 {\n\
    \        return false\n    }\n    if a > 6 {\n        return false\n    }\n  \
    \  if a > 7 {\n        return false\n    }\n    if a > 8 {\n        return false\n\
    \    }\n    if a > 9 {\n        return false\n    }\n    if a > 10 {\n       \
    \ return false\n    }\n    if a > 11 {\n        return false\n    }\n    if a\
    \ > 12 {\n        return false\n    }\n    if a > 13 {\n        return false\n\
    \    }\n    if a > 14 {\n        return false\n    }\n    if a > 15 {\n      \
    \  return false\n    }\n    if a > 16 {\n        return false\n    }\n    if a\
    \ > 17 {\n        return false\n    }\n    if a > 18 {\n        return false\n\
    \    }\n    if a > 19 {\n        return false\n    }\n    if a > 20 {\n      \
    \  return false\n    }\n    if a > 21 {\n        return false\n    }\n    if a\
    \ > 22 {\n        return false\n    }\n    if a > 23 {\n        return false\n\
    \    }\n    if a > 24 {\n        return false\n    }\n    if a > 25 {\n      \
    \  return false\n    }\n    if a > 26 {\n        return false\n    }\n    if a\
    \ > 27 {\n        return false\n    }\n    if a > 28 {\n        return false\n\
    \    }\n    if a > 29 {\n        return false\n    }\n    if a > 30 {\n      \
    \  return false\n    }\n    if a > 31 {\n        return false\n    }\n    if a\
    \ > 32 {\n        return false\n    }\n    if a > 33 {\n        return false\n\
    \    }\n    if a > 34 {\n        return false\n    }\n    if a > 35 {\n      \
    \  return false\n    }\n    if a > 36 {\n        return false\n    }\n    if a\
    \ > 37 {\n        return false\n    }\n    if a > 38 {\n        return false\n\
    \    }\n    if a > 39 {\n        return false\n    }\n    if a > 40 {\n      \
    \  return false\n    }\n    if a > 41 {\n        return false\n    }\n    if a\
    \ > 42 {\n        return false\n    }\n    if a > 43 {\n        return false\n\
    \    }\n    if a > 44 {\n        return false\n    }\n    if a > 45 {\n      \
    \  return false\n    }\n    if a > 46 {\n        return false\n    }\n\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: '/tmp/tmp84s_odvp.swift:149:1: error: missing return in global function
    expected to return ''Bool''

    }

    ^

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpns1sfs0v.swift:7:521: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n    return a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                ^\n         \
    \  ((                                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                         ) != 0)\n"
  stdout: ''
  timestamp: 1659979793
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpru9a27nv/tmpru9a27nv.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdd622fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdd5f26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdd5f26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdd5f257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpru9a27nv                        0x000055c2a59e82b7 <unavailable> + 4791

    5    libc.so.6                          0x00002afdd641b460 __libc_start_main +
    245

    6    tmpru9a27nv                        0x000055c2a59e7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a%3 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmppi72de3d/tmppi72de3d.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35562e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3555fddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3555fdd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3555fdc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppi72de3d                        0x000055e5ce3c3241 <unavailable> + 4673

    5    libc.so.6                          0x00002b35564d2460 __libc_start_main +
    245

    6    tmppi72de3d                        0x000055e5ce3c2ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   if a <= 0 {\n        return false\n    }\n    if a > 1 {\n        return false\n\
    \    }\n    if a > 2 {\n        return false\n    }\n    if a > 3 {\n        return\
    \ false\n    }\n    if a > 4 {\n        return false\n    }\n    if a > 5 {\n\
    \        return false\n    }\n    if a > 6 {\n        return false\n    }\n  \
    \  if a > 7 {\n        return false\n    }\n    if a > 8 {\n        return false\n\
    \    }\n    if a > 9 {\n        return false\n    }\n    if a > 10 {\n       \
    \ return false\n    }\n    if a > 11 {\n        return false\n    }\n    if a\
    \ > 12 {\n        return false\n    }\n    if a > 13 {\n        return false\n\
    \    }\n    if a > 14 {\n        return false\n    }\n    if a > 15 {\n      \
    \  return false\n    }\n    if a > 16 {\n        return false\n    }\n    if a\
    \ > 17 {\n        return false\n    }\n    if a > 18 {\n        return false\n\
    \    }\n    if a > 19 {\n        return false\n    }\n    if a > 20 {\n      \
    \  return false\n    }\n    if a > 21 {\n        return false\n    }\n    if a\
    \ > 22 {\n        return false\n    }\n    if a > 23 {\n        return false\n\
    \    }\n    if a > 24 {\n        return false\n    }\n    if a > 25 {\n      \
    \  return false\n    }\n    if a > 26 {\n        return false\n    }\n    if a\
    \ > 27 {\n        return false\n    }\n    if a > 28 {\n        return false\n\
    \    }\n    if a > 29 {\n        return false\n    }\n    if a > 30 {\n      \
    \  return false\n    }\n    if a > 31 {\n        return false\n    }\n    if a\
    \ > 32 {\n        return false\n    }\n    if a > 33 {\n        return false\n\
    \    }\n    if a > 34 {\n        return false\n    }\n    if a > 35 {\n      \
    \  return false\n    }\n    if a > 36 {\n        return false\n    }\n    if a\
    \ > 37 {\n        return false\n    }\n    if a > 38 {\n        return false\n\
    \    }\n    if a > 39 {\n        return false\n    }\n    if a > 40 {\n      \
    \  return false\n    }\n    if a > 41 {\n        return false\n    }\n    if a\
    \ > 42 {\n        return false\n    }\n    if a > 43 {\n        return false\n\
    \    }\n    if a > 44 {\n        return false\n    }\n    if a > 45 {\n      \
    \  return false\n    }\n    if a > 46 {\n        return false\n    }\n\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: '/tmp/tmp84s_odvp.swift:149:1: error: missing return in global function
    expected to return ''Bool''

    }

    ^

    '
  stdout: ''
  timestamp: 1659979791
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a*a*a == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpq_jwbj49/tmpq_jwbj49.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b16601e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b165fedbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b165fedb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b165feda7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq_jwbj49                        0x000055d8f9226311 <unavailable> + 4881

    5    libc.so.6                          0x00002b16603d0460 __libc_start_main +
    245

    6    tmpq_jwbj49                        0x000055d8f9225e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979792
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\nfunc iscube(a: Int) -> Bool {\n \
    \   return a % a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpru9a27nv/tmpru9a27nv.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdd622fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdd5f26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdd5f26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdd5f257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpru9a27nv                        0x000055c2a59e82b7 <unavailable> + 4791

    5    libc.so.6                          0x00002afdd641b460 __libc_start_main +
    245

    6    tmpru9a27nv                        0x000055c2a59e7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979791
