name: HumanEval_90_next_smallest
language: swift
prompt: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
  \ that returns the 2nd smallest element of the list.\n/// Return None if there is\
  \ no such element.\nfunc next_smallest(lst: [Int]) -> Int? {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\n\
  assert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as\
  \ [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
  \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
  \ [-35, 34, 12, -45]) == -35)"
completions: ["    guard lst.count > 0 else {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else {\n            if lst[i] < secondSmallest\
    \ {\n                secondSmallest = lst[i]\n            }\n        }\n    }\n\
    \    return secondSmallest", "    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for el in lst {\n        if el < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = el\n        } else if el < secondSmallest\
    \ {\n            secondSmallest = el\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i in lst {\n\
    \        if i < smallest {\n            secondSmallest = smallest\n          \
    \  smallest = i\n        } else if i == smallest {\n            secondSmallest\
    \ = i\n        }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n\
    \    var secondSmallest = lst[0]\n    for el in lst {\n        if el < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = el\n      \
    \  } else if el < secondSmallest {\n            secondSmallest = el\n        }\n\
    \    }\n    return secondSmallest", "    guard lst.count > 0 else {\n        return\
    \ nil\n    }\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n   \
    \ for i in 1..lst.count {\n        if lst[i] < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < secondSmallest\
    \ {\n            secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    guard lst.count > 0 else {\n        return nil\n    }\n    guard lst.count\
    \ > 1 else {\n        return lst[1]\n    }\n    var smallest = lst[0]\n    var\
    \ secondSmallest = lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = lst[i]\n  \
    \      }\n        if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n\
    \        }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n  \
    \  var secondSmallest = lst[0]\n    for i in 1..<lst.count {\n        if lst[i]\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ lst[i]\n        } else {\n            if lst[i] < secondSmallest {\n       \
    \         secondSmallest = lst[i]\n            }\n        }\n    }\n    return\
    \ secondSmallest", "    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count > 1 else {\n        return lst[1]\n    }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count {\n  \
    \      if lst[i] < smallest {\n            secondSmallest = smallest\n       \
    \     smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n       \
    \     secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest", " \
    \   guard lst.count > 0 else {\n        return nil\n    }\n    guard lst.count\
    \ > 1 else {\n        return lst[1]\n    }\n    guard lst.count > 2 else {\n \
    \       return nil\n    }\n    var smallest = lst[1]\n    for element in lst {\n\
    \        if element < smallest {\n            smallest = element\n        }\n\
    \    }\n    return smallest", "    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for el in lst {\n        if el < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = el\n        } else if el < secondSmallest\
    \ {\n            secondSmallest = el\n        }\n    }\n    return secondSmallest",
  "    var smallest: Int? = nil\n    for el in lst {\n        if smallest == nil ||\
    \ el < smallest {\n            smallest = el\n        }\n    }\n    return smallest",
  "    guard lst.count > 0 else {\n        return nil\n    }\n    guard lst.count\
    \ > 1 else {\n        return lst[1]\n    }\n    var smallest = lst[0]\n    for\
    \ element in lst {\n        if element < smallest {\n            smallest = element\n\
    \        }\n    }\n    return smallest", "    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for el in lst {\n        if el < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = el\n        } else {\n            if el <\
    \ secondSmallest {\n                secondSmallest = el\n            }\n     \
    \   }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n    var\
    \ secondSmallest = lst[0]\n    for element in lst {\n        if element < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = element\n \
    \       } else {\n            if element < secondSmallest {\n                secondSmallest\
    \ = element\n            }\n        }\n    }\n    return secondSmallest", "  \
    \  var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for el in lst {\n\
    \        if el < smallest {\n            secondSmallest = smallest\n         \
    \   smallest = el\n        } else if el < secondSmallest {\n            secondSmallest\
    \ = el\n        }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n\
    \    var secondSmallest = lst[0]\n    for i in lst {\n        if i < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = i\n       \
    \ } else {\n            if i < secondSmallest {\n                secondSmallest\
    \ = i\n            }\n        }\n    }\n    return secondSmallest", "    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n    for element in lst {\n      \
    \  if element < smallest {\n            secondSmallest = smallest\n          \
    \  smallest = element\n        } else if element < secondSmallest {\n        \
    \    secondSmallest = element\n        }\n    }\n    return secondSmallest", " \
    \   guard lst.count > 0 else {\n        return nil\n    }\n\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n\n    for i in 1..lst.count {\n \
    \       if lst[i] < smallest {\n            secondSmallest = smallest\n      \
    \      smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n      \
    \      secondSmallest = lst[i]\n        }\n    }\n\n    return secondSmallest",
  "    guard lst.count > 0 else {\n        return nil\n    }\n    guard lst.count\
    \ > 1 else {\n        return lst[1]\n    }\n    var smallest = lst[0]\n    var\
    \ secondSmallest = lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = lst[i]\n  \
    \      } else if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n\
    \        }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n  \
    \  var secondSmallest = lst[0]\n    for i in 1..<lst.count {\n        if lst[i]\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ lst[i]\n        } else if lst[i] < secondSmallest {\n            secondSmallest\
    \ = lst[i]\n        }\n    }\n    return secondSmallest", "    guard lst.count\
    \ > 0 else {\n        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for i in 1..lst.count {\n        if lst[i] < smallest {\n    \
    \        secondSmallest = smallest\n            smallest = lst[i]\n        } else\
    \ if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n        }\n\
    \    }\n    return secondSmallest", "    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for element in lst {\n        if element < smallest {\n      \
    \      secondSmallest = smallest\n            smallest = element\n        } else\
    \ if element < secondSmallest {\n            secondSmallest = element\n      \
    \  }\n    }\n    return secondSmallest", "    if lst.count < 2 {\n        return\
    \ nil\n    }\n    var smallest = lst[0]\n    var secondSmallest = lst[1]\n   \
    \ for element in lst {\n        if element < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = element\n        } else if element < secondSmallest\
    \ {\n            secondSmallest = element\n        }\n    }\n    return secondSmallest",
  "    guard lst.count > 0 else {\n        return nil\n    }\n    var smallest = lst[0]\n\
    \    var secondSmallest = lst[0]\n    for i in 1..lst.count {\n        if lst[i]\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ lst[i]\n        } else if lst[i] < secondSmallest {\n            secondSmallest\
    \ = lst[i]\n        }\n    }\n    return secondSmallest", "    var smallest =\
    \ lst[0]\n    var secondSmallest = lst[0]\n    for el in lst {\n        if el\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ el\n        } else if el < secondSmallest {\n            secondSmallest = el\n\
    \        }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n  \
    \  var secondSmallest = lst[0]\n    for i in lst {\n        if i < smallest {\n\
    \            secondSmallest = smallest\n            smallest = i\n        } else\
    \ {\n            if i < secondSmallest {\n                secondSmallest = i\n\
    \            }\n        }\n    }\n    return secondSmallest", "    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..<lst.count {\n  \
    \      if lst[i] < smallest {\n            secondSmallest = smallest\n       \
    \     smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n       \
    \     secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest", " \
    \   var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for el in lst\
    \ {\n        if el < smallest {\n            secondSmallest = smallest\n     \
    \       smallest = el\n        } else {\n            if el < secondSmallest {\n\
    \                secondSmallest = el\n            }\n        }\n    }\n    return\
    \ secondSmallest", "    var smallest: Int?\n    var secondSmallest: Int?\n   \
    \ for element in lst {\n        if smallest == nil {\n            smallest = element\n\
    \        } else if element < smallest {\n            secondSmallest = smallest\n\
    \            smallest = element\n        } else {\n            secondSmallest\
    \ = element\n        }\n    }\n    return secondSmallest", "    guard lst.count\
    \ > 0 else {\n        return nil\n    }\n\n    var smallest = lst[0]\n    var\
    \ secondSmallest = lst[0]\n\n    for element in lst {\n        if element < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = element\n \
    \       } else if element < secondSmallest {\n            secondSmallest = element\n\
    \        }\n    }\n\n    return secondSmallest", "    var smallest = lst[0]\n\
    \    var secondSmallest = lst[0]\n    for i in 1..<lst.count {\n        if lst[i]\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ lst[i]\n        } else if lst[i] < secondSmallest {\n            secondSmallest\
    \ = lst[i]\n        }\n    }\n    return secondSmallest", "    var smallest: Int?\
    \ = nil\n    for el in lst {\n        if smallest == nil || el < smallest {\n\
    \            smallest = el\n        }\n    }\n    return smallest", "    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n    for i in lst {\n        if i\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ i\n        } else if i == smallest {\n            secondSmallest = i\n     \
    \   }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n    var\
    \ secondSmallest = lst[0]\n    for element in lst {\n        if element < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = element\n \
    \       } else if element < secondSmallest {\n            secondSmallest = element\n\
    \        }\n    }\n    return secondSmallest", "    guard lst.count > 0 else {\n\
    \        return nil\n    }\n    guard lst.count >= 2 else {\n        return nil\n\
    \    }\n    var smallest = lst[0]\n    var secondSmallest = lst[1]\n    for i\
    \ in 2..<lst.count {\n        if lst[i] < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < secondSmallest\
    \ {\n            secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for element in\
    \ lst {\n        if element < smallest {\n            secondSmallest = smallest\n\
    \            smallest = element\n        } else if element < secondSmallest {\n\
    \            secondSmallest = element\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for element in\
    \ lst {\n        if element < smallest {\n            secondSmallest = smallest\n\
    \            smallest = element\n        } else if element < secondSmallest {\n\
    \            secondSmallest = element\n        }\n    }\n    return secondSmallest",
  "    guard lst.count > 0 else {\n        return nil\n    }\n    guard lst.count\
    \ > 1 else {\n        return lst[0]\n    }\n    var smallest = lst[0]\n    var\
    \ secondSmallest = lst[1]\n    for i in 1..lst.count {\n        if smallest >\
    \ lst[i] {\n            secondSmallest = smallest\n            smallest = lst[i]\n\
    \        }\n    }\n    return secondSmallest", "    var smallest: Int? = nil\n\
    \    var secondSmallest: Int? = nil\n    for element in lst {\n        if smallest\
    \ == nil || element < smallest {\n            secondSmallest = element\n     \
    \       smallest = element\n        } else {\n            if element < secondSmallest\
    \ {\n                secondSmallest = element\n            }\n        }\n    }\n\
    \    return secondSmallest", "    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for i in 1..<lst.count {\n        if lst[i] < smallest {\n   \
    \         secondSmallest = smallest\n            smallest = lst[i]\n        }\
    \ else {\n            if lst[i] < secondSmallest {\n                secondSmallest\
    \ = lst[i]\n            }\n        }\n    }\n    return secondSmallest", "   \
    \ var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for el in lst {\n\
    \        if el < smallest {\n            secondSmallest = smallest\n         \
    \   smallest = el\n        } else if el < secondSmallest {\n            secondSmallest\
    \ = el\n        }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n\
    \    var secondSmallest = lst[0]\n    for element in lst {\n        if element\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ element\n        } else if element < secondSmallest {\n            secondSmallest\
    \ = element\n        }\n    }\n    return secondSmallest", "    if lst.count ==\
    \ 0 {\n        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for x in lst {\n        if x < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = x\n        } else if x < secondSmallest {\n\
    \            secondSmallest = x\n        }\n    }\n    return secondSmallest",
  "    guard lst.count > 0 else {\n        return nil\n    }\n    guard lst.count\
    \ > 1 else {\n        return lst[1]\n    }\n    var smallest = lst[0]\n    for\
    \ i in 1..lst.count {\n        if smallest > lst[i] {\n            smallest =\
    \ lst[i]\n        }\n    }\n    return smallest", "    guard lst.count > 0 else\
    \ { return nil }\n    guard lst.count > 1 else {\n        return lst[1]\n    }\n\
    \    var smallest = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    guard lst.count > 0 else {\n        return nil\n    }\n    var smallest = lst[0]\n\
    \    var secondSmallest = lst[0]\n    for i in 1..lst.count {\n        if lst[i]\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ lst[i]\n        } else {\n            if lst[i] < secondSmallest {\n       \
    \         secondSmallest = lst[i]\n            }\n        }\n    }\n    return\
    \ secondSmallest", "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for el in lst {\n        if el < smallest {\n            secondSmallest =\
    \ smallest\n            smallest = el\n        } else if el < secondSmallest {\n\
    \            secondSmallest = el\n        }\n    }\n    return secondSmallest",
  "    if lst.count < 2 {\n        return nil\n    }\n    var smallest = lst[0]\n\
    \    var secondSmallest = lst[1]\n    for i in 2..<lst.count {\n        if lst[i]\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ lst[i]\n        } else if lst[i] < secondSmallest {\n            secondSmallest\
    \ = lst[i]\n        }\n    }\n    return secondSmallest", "    var smallest =\
    \ lst[0]\n    var secondSmallest = lst[0]\n    for el in lst {\n        if el\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ el\n        } else if el < secondSmallest {\n            secondSmallest = el\n\
    \        }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n  \
    \  var secondSmallest = lst[0]\n    for el in lst {\n        if el < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = el\n      \
    \  } else if el < secondSmallest {\n            secondSmallest = el\n        }\n\
    \    }\n    return secondSmallest", "    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for el in lst {\n        if el < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = el\n        } else if el < secondSmallest\
    \ {\n            secondSmallest = el\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for el in lst {\n\
    \        if el < smallest {\n            secondSmallest = smallest\n         \
    \   smallest = el\n        } else if el < secondSmallest {\n            secondSmallest\
    \ = el\n        }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n\
    \    var secondSmallest = lst[0]\n    for el in lst {\n        if el < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = el\n      \
    \  } else if el < secondSmallest {\n            secondSmallest = el\n        }\n\
    \    }\n    return secondSmallest", "    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for element in lst {\n        if element < smallest {\n      \
    \      secondSmallest = smallest\n            smallest = element\n        } else\
    \ {\n            if element < secondSmallest {\n                secondSmallest\
    \ = element\n            }\n        }\n    }\n    return secondSmallest", "  \
    \  guard lst.count > 0 else {\n        return nil\n    }\n\n    var smallest =\
    \ lst[0]\n    var secondSmallest = lst[0]\n\n    for i in 1..<lst.count {\n  \
    \      if lst[i] < smallest {\n            secondSmallest = smallest\n       \
    \     smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n       \
    \     secondSmallest = lst[i]\n        }\n    }\n\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for element in\
    \ lst {\n        if element < smallest {\n            secondSmallest = smallest\n\
    \            smallest = element\n        } else {\n            if element < secondSmallest\
    \ {\n                secondSmallest = element\n            }\n        }\n    }\n\
    \    return secondSmallest", "    guard lst.count > 0 else {\n        return nil\n\
    \    }\n    guard lst.count > 1 else {\n        return lst[1]\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        }\n        if lst[i] < secondSmallest {\n\
    \            secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for el in lst {\n\
    \        if el < smallest {\n            secondSmallest = smallest\n         \
    \   smallest = el\n        } else {\n            if el < secondSmallest {\n  \
    \              secondSmallest = el\n            }\n        }\n    }\n    return\
    \ secondSmallest", "    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count > 1 else {\n        return lst[1]\n    }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count {\n  \
    \      if smallest.isLess(lst[i]) {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        }\n    }\n    return secondSmallest", " \
    \   var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for el in lst\
    \ {\n        if el < smallest {\n            secondSmallest = smallest\n     \
    \       smallest = el\n        } else if el < secondSmallest {\n            secondSmallest\
    \ = el\n        }\n    }\n    return secondSmallest", "    guard lst.count > 0\
    \ else {\n        return nil\n    }\n    guard lst.count > 1 else {\n        return\
    \ lst[0]\n    }\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for i in 1..lst.count {\n        if lst[i] < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < secondSmallest\
    \ {\n            secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    var smallest: Int? = nil\n    for x in lst {\n        if smallest == nil ||\
    \ x < smallest {\n            smallest = x\n        }\n    }\n    return smallest",
  "    guard lst.count > 0 else {\n        return nil\n    }\n    var smallest = lst[0]\n\
    \    var secondSmallest = lst[0]\n    for i in 1..lst.count {\n        if lst[i]\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ lst[i]\n        } else {\n            if lst[i] < secondSmallest {\n       \
    \         secondSmallest = lst[i]\n            }\n        }\n    }\n    return\
    \ secondSmallest", "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for i in lst {\n        if i < smallest {\n            secondSmallest = smallest\n\
    \            smallest = i\n        } else if i == smallest {\n            secondSmallest\
    \ = i\n        }\n    }\n    return secondSmallest", "    guard lst.count > 0\
    \ else {\n        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for i in 1..lst.count {\n        if lst[i] < smallest {\n    \
    \        secondSmallest = smallest\n            smallest = lst[i]\n        } else\
    \ if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n        }\n\
    \    }\n    return secondSmallest", "    guard lst.count > 0 else {\n        return\
    \ nil\n    }\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n   \
    \ for element in lst {\n        if element < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = element\n        } else if element < secondSmallest\
    \ {\n            secondSmallest = element\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i in lst {\n\
    \        if i < smallest {\n            secondSmallest = smallest\n          \
    \  smallest = i\n        } else if i == smallest {\n            secondSmallest\
    \ = i\n        }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n\
    \    var secondSmallest = lst[0]\n    for el in lst {\n        if el < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = el\n      \
    \  } else {\n            if el < secondSmallest {\n                secondSmallest\
    \ = el\n            }\n        }\n    }\n    return secondSmallest", "    guard\
    \ lst.count > 0 else {\n        return nil\n    }\n    guard lst.count > 1 else\
    \ {\n        return lst[1]\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[1]\n    for i in 2..<lst.count {\n        if smallest.isLess(lst[i]) {\n\
    \            secondSmallest = smallest\n            smallest = lst[i]\n      \
    \  }\n    }\n    return secondSmallest", "    if lst.count == 0 {\n        return\
    \ nil\n    }\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n   \
    \ for el in lst {\n        if el < smallest {\n            secondSmallest = smallest\n\
    \            smallest = el\n        } else if el < secondSmallest {\n        \
    \    secondSmallest = el\n        }\n    }\n    return secondSmallest", "    guard\
    \ lst.count > 0 else {\n        return nil\n    }\n    guard lst.count > 1 else\
    \ {\n        return lst[1]\n    }\n    guard lst.count > 2 else {\n        return\
    \ lst[2]\n    }\n    var smallest = lst[1]\n    for i in 2..<lst.count {\n   \
    \     if lst[i] < smallest {\n            smallest = lst[i]\n        }\n    }\n\
    \    return smallest", "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for element in lst {\n        if element < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = element\n        } else if element < secondSmallest\
    \ {\n            secondSmallest = element\n        }\n    }\n    return secondSmallest",
  "    guard lst.count > 0 else {\n        return nil\n    }\n    var smallest = lst[0]\n\
    \    var secondSmallest = lst[0]\n    for i in 1..lst.count {\n        if smallest.isLess(lst[i])\
    \ {\n            secondSmallest = smallest\n            smallest = lst[i]\n  \
    \      } else {\n            secondSmallest = lst[i]\n        }\n    }\n    return\
    \ secondSmallest", "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < secondSmallest\
    \ {\n            secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    guard lst.count > 0 else {\n        return nil\n    }\n    guard lst.count\
    \ > 1 else {\n        return lst[1]\n    }\n    var smallest = lst[0]\n    var\
    \ secondSmallest = lst[1]\n    for i in 1..lst.count {\n        if lst[i] < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = lst[i]\n  \
    \      } else if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n\
    \        }\n    }\n    return secondSmallest", "    var smallest: Int? = nil\n\
    \    for element in lst {\n        if smallest == nil || element < smallest {\n\
    \            smallest = element\n        }\n    }\n    return smallest", "   \
    \ var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for el in lst {\n\
    \        if el < smallest {\n            secondSmallest = smallest\n         \
    \   smallest = el\n        } else if el < secondSmallest {\n            secondSmallest\
    \ = el\n        }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n\
    \    var secondSmallest = lst[0]\n    for el in lst {\n        if el < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = el\n      \
    \  } else if el < secondSmallest {\n            secondSmallest = el\n        }\n\
    \    }\n    return secondSmallest", "    guard lst.count > 0 else {\n        return\
    \ nil\n    }\n    guard lst.count > 1 else {\n        return lst[1]\n    }\n \
    \   var smallest = lst[0]\n    for element in lst {\n        if element < smallest\
    \ {\n            smallest = element\n        }\n    }\n    return smallest", " \
    \   var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    guard lst.count > 0 else {\n        return nil\n    }\n\n    var smallest =\
    \ lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..lst.count {\n     \
    \   if lst[i] < smallest {\n            secondSmallest = smallest\n          \
    \  smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n          \
    \  secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest", "  \
    \  var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for el in lst {\n\
    \        if el < smallest {\n            secondSmallest = smallest\n         \
    \   smallest = el\n        } else if el < secondSmallest {\n            secondSmallest\
    \ = el\n        }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n\
    \    var secondSmallest = lst[0]\n    for value in lst {\n        if value < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = value\n   \
    \     } else if value < secondSmallest {\n            secondSmallest = value\n\
    \        }\n    }\n    return secondSmallest", "    guard lst.count > 0 else {\n\
    \        return nil\n    }\n\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for i in 1..<lst.count {\n        if lst[i] < smallest {\n   \
    \         secondSmallest = smallest\n            smallest = lst[i]\n        }\
    \ else if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n   \
    \     }\n    }\n    return secondSmallest", "    guard lst.count > 0 else {\n\
    \        return nil\n    }\n    guard lst.count > 1 else {\n        return lst[1]\n\
    \    }\n    var smallest = lst[0]\n    var secondSmallest = lst[1]\n    for i\
    \ in 2..<lst.count {\n        if smallest.isLess(lst[i]) {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    guard lst.count > 0 else {\n        return nil\n    }\n    guard lst.count\
    \ > 1 else {\n        return lst[1]\n    }\n    var smallest = lst[0]\n    var\
    \ secondSmallest = lst[1]\n    for i in 1..lst.count {\n        if lst[i] < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = lst[i]\n  \
    \      } else if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n\
    \        }\n    }\n    return secondSmallest", "    guard lst.count > 0 else {\n\
    \        return nil\n    }\n\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n\n    for i in 1..<lst.count {\n        if lst[i] < smallest {\n \
    \           secondSmallest = smallest\n            smallest = lst[i]\n       \
    \ } else {\n            if lst[i] < secondSmallest {\n                secondSmallest\
    \ = lst[i]\n            }\n        }\n    }\n\n    return secondSmallest", " \
    \   guard lst.count > 0 else {\n        return nil\n    }\n    guard lst.count\
    \ > 1 else {\n        return lst[1]\n    }\n    var smallest = lst[0]\n    var\
    \ secondSmallest = lst[1]\n    for i in 1..lst.count {\n        if lst[i] < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = lst[i]\n  \
    \      } else if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n\
    \        }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n  \
    \  var secondSmallest = lst[0]\n    for i in 1..<lst.count {\n        if lst[i]\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ lst[i]\n        } else {\n            if lst[i] < secondSmallest {\n       \
    \         secondSmallest = lst[i]\n            }\n        }\n    }\n    return\
    \ secondSmallest", "    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    guard lst.count > 1 else {\n        return lst[1]\n    }\n    guard lst.count\
    \ > 2 else {\n        return lst[2]\n    }\n    let smallest = lst[1]\n    let\
    \ second = lst[2]\n    if smallest < second {\n        return smallest\n    }\n\
    \    return second", "    guard lst.count > 0 else {\n        return nil\n   \
    \ }\n\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\n    for element\
    \ in lst {\n        if element < smallest {\n            secondSmallest = smallest\n\
    \            smallest = element\n        } else if element < secondSmallest {\n\
    \            secondSmallest = element\n        }\n    }\n\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for element in\
    \ lst {\n        if element < smallest {\n            secondSmallest = smallest\n\
    \            smallest = element\n        } else if element < secondSmallest {\n\
    \            secondSmallest = element\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for element in\
    \ lst {\n        if element < smallest {\n            secondSmallest = smallest\n\
    \            smallest = element\n        } else if element < secondSmallest {\n\
    \            secondSmallest = element\n        }\n    }\n    return secondSmallest",
  "    guard lst.count > 0 else {\n        return nil\n    }\n    guard lst.count\
    \ > 1 else {\n        return lst[0]\n    }\n    let smallest = lst[0]\n    let\
    \ secondSmallest = lst[1]\n    if smallest < secondSmallest {\n        return\
    \ secondSmallest\n    } else {\n        return smallest\n    }", "    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n    for el in lst {\n        if el\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ el\n        } else if el < secondSmallest {\n            secondSmallest = el\n\
    \        }\n    }\n    return secondSmallest", "    if lst.count < 2 {\n     \
    \   return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest = lst[1]\n\
    \    for element in lst {\n        if element < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = element\n        } else if element < secondSmallest\
    \ {\n            secondSmallest = element\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i in lst {\n\
    \        if i < smallest {\n            secondSmallest = smallest\n          \
    \  smallest = i\n        } else if i == smallest {\n            secondSmallest\
    \ = i\n        }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n\
    \    var secondSmallest = lst[0]\n    for i in lst {\n        if i < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = i\n       \
    \ } else {\n            if i < secondSmallest {\n                secondSmallest\
    \ = i\n            }\n        }\n    }\n    return secondSmallest", "    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n    for element in lst {\n      \
    \  if element < smallest {\n            secondSmallest = smallest\n          \
    \  smallest = element\n        } else if element < secondSmallest {\n        \
    \    secondSmallest = element\n        }\n    }\n    return secondSmallest", " \
    \   guard lst.count > 0 else {\n        return nil\n    }\n    guard lst.count\
    \ > 1 else {\n        return lst[0]\n    }\n    let smallest = lst[0]\n    let\
    \ secondSmallest = lst[1]\n    if smallest > secondSmallest {\n        return\
    \ nil\n    }\n    return secondSmallest", "    var smallest = lst[0]\n    var\
    \ secondSmallest = lst[0]\n    for element in lst {\n        if element < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = element\n \
    \       } else if element < secondSmallest {\n            secondSmallest = element\n\
    \        }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n  \
    \  var secondSmallest = lst[0]\n    for element in lst {\n        if element <\
    \ smallest {\n            secondSmallest = smallest\n            smallest = element\n\
    \        } else if element < secondSmallest {\n            secondSmallest = element\n\
    \        }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n  \
    \  var secondSmallest = lst[0]\n    for i in lst {\n        if i < smallest {\n\
    \            secondSmallest = smallest\n            smallest = i\n        } else\
    \ if i == smallest {\n            secondSmallest = i\n        }\n    }\n    return\
    \ secondSmallest", "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for el in lst {\n        if el < smallest {\n            secondSmallest =\
    \ smallest\n            smallest = el\n        } else {\n            if el < secondSmallest\
    \ {\n                secondSmallest = el\n            }\n        }\n    }\n  \
    \  return secondSmallest", "    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for i in 1..<lst.count {\n        if lst[i] < smallest {\n   \
    \         secondSmallest = smallest\n            smallest = lst[i]\n        }\
    \ else if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n   \
    \     }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n    var\
    \ secondSmallest = lst[0]\n    for element in lst {\n        if element < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = element\n \
    \       } else if element < secondSmallest {\n            secondSmallest = element\n\
    \        }\n    }\n    return secondSmallest", "    guard lst.count > 0 else {\n\
    \        return nil\n    }\n\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for i in 1..<lst.count {\n        if lst[i] < smallest {\n   \
    \         secondSmallest = smallest\n            smallest = lst[i]\n        }\
    \ else if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n   \
    \     }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n    var\
    \ secondSmallest = lst[0]\n    for element in lst {\n        if element < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = element\n \
    \       } else if element < secondSmallest {\n            secondSmallest = element\n\
    \        }\n    }\n    return secondSmallest", "    guard lst.count > 0 else {\n\
    \        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for i in 1..<lst.count {\n        if lst[i] < smallest {\n   \
    \         secondSmallest = smallest\n            smallest = lst[i]\n        }\
    \ else if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n   \
    \     }\n    }\n    return secondSmallest", "    guard lst.count > 0 else {\n\
    \        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for element in lst {\n        if element < smallest {\n      \
    \      secondSmallest = smallest\n            smallest = element\n        } else\
    \ if element < secondSmallest {\n            secondSmallest = element\n      \
    \  }\n    }\n    return secondSmallest", "    guard lst.count > 0 else {\n   \
    \     return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for i in 1..lst.count {\n        if lst[i] < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < secondSmallest\
    \ {\n            secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i in lst {\n\
    \        if i < smallest {\n            secondSmallest = smallest\n          \
    \  smallest = i\n        } else {\n            if i < secondSmallest {\n     \
    \           secondSmallest = i\n            }\n        }\n    }\n    return secondSmallest",
  "    guard lst.count > 0 else {\n        return nil\n    }\n    guard lst.count\
    \ > 1 else {\n        return lst[0]\n    }\n    guard lst.count > 2 else {\n \
    \       return lst[1]\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < smallest {\n   \
    \         secondSmallest = smallest\n            smallest = lst[i]\n        }\
    \ else if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n   \
    \     }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n    var\
    \ secondSmallest = lst[0]\n    for i in lst {\n        if i < smallest {\n   \
    \         secondSmallest = smallest\n            smallest = i\n        } else\
    \ if i == smallest {\n            secondSmallest = i\n        }\n    }\n    return\
    \ secondSmallest", "    guard lst.count > 0 else {\n        return nil\n    }\n\
    \n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\n    for i in 1..lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for el in lst {\n\
    \        if el < smallest {\n            secondSmallest = smallest\n         \
    \   smallest = el\n        } else if el < secondSmallest {\n            secondSmallest\
    \ = el\n        }\n    }\n    return secondSmallest", "    guard lst.count > 0\
    \ else {\n        return nil\n    }\n    guard lst.count > 1 else {\n        return\
    \ lst[1]\n    }\n    var smallest = lst[0]\n    for element in lst {\n       \
    \ if element < smallest {\n            smallest = element\n        }\n    }\n\
    \    return smallest", "    guard lst.count > 0 else {\n        return nil\n \
    \   }\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i in\
    \ 1..<lst.count {\n        if lst[i] < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < secondSmallest\
    \ {\n            secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    guard lst.count > 0 else {\n        return nil\n    }\n\n    var smallest =\
    \ lst[0]\n    var secondSmallest = lst[0]\n\n    for element in lst {\n      \
    \  if element < smallest {\n            secondSmallest = smallest\n          \
    \  smallest = element\n        } else if element < secondSmallest {\n        \
    \    secondSmallest = element\n        }\n    }\n\n    return secondSmallest",
  "    guard lst.count > 0 else {\n        return nil\n    }\n    guard lst.count\
    \ > 1 else {\n        return lst[1]\n    }\n    var smallest = lst[0]\n    var\
    \ secondSmallest = lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = lst[i]\n  \
    \      } else if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n\
    \        }\n    }\n    return secondSmallest", "    var smallest: Int? = nil\n\
    \    var secondSmallest: Int? = nil\n    for number in lst {\n        if smallest\
    \ == nil || number < smallest {\n            secondSmallest = number\n       \
    \     smallest = number\n        } else {\n            if number < secondSmallest\
    \ {\n                secondSmallest = number\n            }\n        }\n    }\n\
    \    return secondSmallest", "    guard lst.count > 0 else {\n        return nil\n\
    \    }\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i\
    \ in 1..lst.count {\n        if lst[i] < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < secondSmallest\
    \ {\n            secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    guard lst.count > 0 else {\n        return nil\n    }\n    guard lst.count\
    \ > 1 else {\n        return lst[0]\n    }\n    let smallest = lst[0]\n    let\
    \ secondSmallest = lst[1]\n    if smallest < secondSmallest {\n        return\
    \ secondSmallest\n    }\n    return smallest", "    var smallest = lst[0]\n  \
    \  var secondSmallest = lst[0]\n    for i in lst {\n        if i < smallest {\n\
    \            secondSmallest = smallest\n            smallest = i\n        } else\
    \ if i == smallest {\n            secondSmallest = i\n        }\n    }\n    return\
    \ secondSmallest", "    guard lst.count > 0 else {\n        return nil\n    }\n\
    \n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\n    for element\
    \ in lst {\n        if element < smallest {\n            secondSmallest = smallest\n\
    \            smallest = element\n        } else if element < secondSmallest {\n\
    \            secondSmallest = element\n        }\n    }\n\n    return secondSmallest",
  "    guard lst.count > 0 else {\n        return nil\n    }\n    guard lst.count\
    \ >= 2 else {\n        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < smallest {\n   \
    \         secondSmallest = smallest\n            smallest = lst[i]\n        }\
    \ else if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n   \
    \     }\n    }\n    return secondSmallest", "    guard lst.count > 0 else {\n\
    \        return nil\n    }\n    guard lst.count > 1 else {\n        return lst[1]\n\
    \    }\n    var smallest = lst[0]\n    var secondSmallest = lst[1]\n    for i\
    \ in 1..lst.count {\n        if smallest.isLess(lst[i]) {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for el in lst {\n\
    \        if el < smallest {\n            secondSmallest = smallest\n         \
    \   smallest = el\n        } else if el < secondSmallest {\n            secondSmallest\
    \ = el\n        }\n    }\n    return secondSmallest", "    guard lst.count > 0\
    \ else {\n        return nil\n    }\n\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n\n    for i in 1..lst.count {\n        if lst[i] < smallest {\n  \
    \          secondSmallest = smallest\n            smallest = lst[i]\n        }\
    \ else if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n   \
    \     }\n    }\n\n    return secondSmallest", "    guard lst.count > 0 else {\n\
    \        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for i in 1..lst.count {\n        if lst[i] < smallest {\n    \
    \        secondSmallest = smallest\n            smallest = lst[i]\n        } else\
    \ if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n        }\n\
    \    }\n    return secondSmallest", "    guard lst.count > 0 else {\n        return\
    \ nil\n    }\n\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\n\
    \    for element in lst {\n        if element < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = element\n        } else if element < secondSmallest\
    \ {\n            secondSmallest = element\n        }\n    }\n\n    return secondSmallest",
  "    var smallest: Int?\n    var smallestIndex: Int?\n    for index in 0..<lst.count\
    \ {\n        if smallest == nil || lst[index] < smallest {\n            smallest\
    \ = lst[index]\n            smallestIndex = index\n        }\n    }\n    return\
    \ smallest", "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n   \
    \ for el in lst {\n        if el < smallest {\n            secondSmallest = smallest\n\
    \            smallest = el\n        } else if el < secondSmallest {\n        \
    \    secondSmallest = el\n        }\n    }\n    return secondSmallest", "    guard\
    \ lst.count > 0 else {\n        return nil\n    }\n    guard lst.count > 1 else\
    \ {\n        return lst[0]\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < smallest {\n   \
    \         secondSmallest = smallest\n            smallest = lst[i]\n        }\
    \ else {\n            if lst[i] < secondSmallest {\n                secondSmallest\
    \ = lst[i]\n            }\n        }\n    }\n    return secondSmallest", "   \
    \ var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for el in lst {\n\
    \        if el < smallest {\n            secondSmallest = smallest\n         \
    \   smallest = el\n        } else if el < secondSmallest {\n            secondSmallest\
    \ = el\n        }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n\
    \    var secondSmallest = lst[0]\n    for element in lst {\n        if element\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ element\n        } else if element < secondSmallest {\n            secondSmallest\
    \ = element\n        }\n    }\n    return secondSmallest", "    guard lst.count\
    \ > 0 else {\n        return nil\n    }\n    guard lst.count > 1 else {\n    \
    \    return lst[1]\n    }\n    var smallest = lst[0]\n    var secondSmallest =\
    \ lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < smallest {\n     \
    \       secondSmallest = smallest\n            smallest = lst[i]\n        } else\
    \ if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n        }\n\
    \    }\n    return secondSmallest", "    guard lst.count > 0 else {\n        return\
    \ nil\n    }\n    guard lst.count > 1 else {\n        return lst[1]\n    }\n \
    \   let smallest = lst[0]\n    let rest = lst[1..<lst.count]\n    let result =\
    \ rest.min()\n    if result == smallest {\n        return nil\n    }\n    return\
    \ smallest", "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n   \
    \ for i in 1..<lst.count {\n        if lst[i] < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < secondSmallest\
    \ {\n            secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    if lst.count < 2 {\n        return nil\n    }\n    var smallest = lst[0]\n\
    \    var secondSmallest = lst[0]\n    for i in 1..lst.count {\n        if lst[i]\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ lst[i]\n        } else if lst[i] < secondSmallest {\n            secondSmallest\
    \ = lst[i]\n        }\n    }\n    return secondSmallest", "    var smallest =\
    \ lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..<lst.count {\n    \
    \    if lst[i] < smallest {\n            secondSmallest = smallest\n         \
    \   smallest = lst[i]\n        } else if lst[i] > smallest {\n            secondSmallest\
    \ = lst[i]\n        }\n    }\n    return secondSmallest", "    guard lst.count\
    \ > 0 else {\n        return nil\n    }\n    guard lst.count > 1 else {\n    \
    \    return lst[1]\n    }\n    var smallest = lst[0]\n    var secondSmallest =\
    \ lst[1]\n    for i in 1..lst.count {\n        if smallest.isLess(lst[i]) {\n\
    \            secondSmallest = smallest\n            smallest = lst[i]\n      \
    \  }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for el in lst {\n        if el < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = el\n        } else if el < secondSmallest\
    \ {\n            secondSmallest = el\n        }\n    }\n    return secondSmallest",
  "    guard lst.count > 0 else {\n        return nil\n    }\n    guard lst.count\
    \ > 1 else {\n        return lst[1]\n    }\n    let min = lst[0]\n    for i in\
    \ 1..<lst.count {\n        if lst[i] < min {\n            min = lst[i]\n     \
    \   }\n    }\n    return min", "    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for element in lst {\n        if element < smallest {\n      \
    \      secondSmallest = smallest\n            smallest = element\n        } else\
    \ if element < secondSmallest {\n            secondSmallest = element\n      \
    \  }\n    }\n    return secondSmallest", "    guard lst.count > 0 else {\n   \
    \     return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < secondSmallest\
    \ {\n            secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for el in lst {\n\
    \        if el < smallest {\n            secondSmallest = smallest\n         \
    \   smallest = el\n        } else if el < secondSmallest {\n            secondSmallest\
    \ = el\n        }\n    }\n    return secondSmallest", "    guard lst.count > 0\
    \ else {\n        return nil\n    }\n\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n\n    for i in 1..lst.count {\n        if lst[i] < smallest {\n  \
    \          secondSmallest = smallest\n            smallest = lst[i]\n        }\
    \ else if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n   \
    \     }\n    }\n\n    return secondSmallest", "    guard lst.count > 0 else {\n\
    \        return nil\n    }\n    guard lst.count > 1 else {\n        return lst[1]\n\
    \    }\n    var smallest = lst[0]\n    var secondSmallest = lst[1]\n    for i\
    \ in 2..<lst.count {\n        if lst[i] < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    guard lst.count > 0 else {\n        return nil\n    }\n    var smallest = lst[0]\n\
    \    var secondSmallest = lst[0]\n    for i in 1..lst.count {\n        if lst[i]\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ lst[i]\n        } else {\n            if lst[i] < secondSmallest {\n       \
    \         secondSmallest = lst[i]\n            }\n        }\n    }\n    return\
    \ secondSmallest", "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for element in lst {\n        if element < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = element\n        } else if element < secondSmallest\
    \ {\n            secondSmallest = element\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i in lst {\n\
    \        if i < smallest {\n            secondSmallest = smallest\n          \
    \  smallest = i\n        } else if i == smallest {\n            if secondSmallest\
    \ < i {\n                secondSmallest = i\n            }\n        }\n    }\n\
    \    return secondSmallest", "    var smallest: Int?\n    var secondSmallest:\
    \ Int?\n    for i in lst {\n        if smallest == nil || i < smallest {\n   \
    \         secondSmallest = i\n            smallest = i\n        } else if secondSmallest\
    \ == nil || i < secondSmallest {\n            secondSmallest = i\n        }\n\
    \    }\n    return secondSmallest", "    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for i in lst {\n        if i < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = i\n        } else if i == smallest {\n  \
    \          secondSmallest = i\n        }\n    }\n    return secondSmallest", " \
    \   var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for el in lst\
    \ {\n        if el < smallest {\n            secondSmallest = smallest\n     \
    \       smallest = el\n        } else if el < secondSmallest {\n            secondSmallest\
    \ = el\n        }\n    }\n    return secondSmallest", "    guard lst.count > 0\
    \ else { return nil }\n    guard lst.count > 1 else {\n        return lst[0]\n\
    \    }\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i\
    \ in 1..lst.count {\n        if smallest > lst[i] {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else {\n            if\
    \ secondSmallest > lst[i] {\n                secondSmallest = lst[i]\n       \
    \     }\n        }\n    }\n    return secondSmallest", "    if lst.count == 0\
    \ {\n        return nil\n    }\n    if lst.count == 1 {\n        return lst[0]\n\
    \    }\n    if lst[0] < lst[1] {\n        return lst[0]\n    }\n    return lst[1]",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for el in lst {\n\
    \        if el < smallest {\n            secondSmallest = smallest\n         \
    \   smallest = el\n        } else {\n            if el < secondSmallest {\n  \
    \              secondSmallest = el\n            }\n        }\n    }\n    return\
    \ secondSmallest", "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\
    \    for element in lst {\n        if element < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = element\n        } else {\n            if\
    \ element < secondSmallest {\n                secondSmallest = element\n     \
    \       }\n        }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n\
    \    var secondSmallest = lst[0]\n    for i in lst {\n        if i < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = i\n       \
    \ } else if i == smallest {\n            if secondSmallest < i {\n           \
    \     secondSmallest = i\n            }\n        }\n    }\n    return secondSmallest",
  "    guard lst.count > 0 else {\n        return nil\n    }\n    var smallest = lst[0]\n\
    \    var secondSmallest = lst[0]\n    for i in 1..<lst.count {\n        if lst[i]\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ lst[i]\n        } else {\n            if lst[i] < secondSmallest {\n       \
    \         secondSmallest = lst[i]\n            }\n        }\n    }\n    return\
    \ secondSmallest", "    guard lst.count > 0 else {\n        return nil\n    }\n\
    \    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    guard lst.count > 0 else {\n        return nil\n    }\n    var smallest = lst[0]\n\
    \    var secondSmallest = lst[0]\n    for i in 1..lst.count {\n        if lst[i]\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ lst[i]\n        } else if lst[i] < secondSmallest {\n            secondSmallest\
    \ = lst[i]\n        }\n    }\n    return secondSmallest", "    guard lst.count\
    \ > 0 else {\n        return nil\n    }\n    guard lst.count > 1 else {\n    \
    \    return lst[1]\n    }\n    let smallest = lst[0]\n    var smallestIndex =\
    \ lst.startIndex\n    for i in lst.startIndex..<lst.endIndex {\n        if lst[i]\
    \ < smallest {\n            smallest = lst[i]\n            smallestIndex = i\n\
    \        }\n    }\n    return smallest", "    guard lst.count > 0 else {\n   \
    \     return nil\n    }\n    guard lst.count > 1 else {\n        return lst[0]\n\
    \    }\n    let smallest = lst[0]\n    var smallestIndex = lst.startIndex\n  \
    \  for i in 1..<lst.count {\n        if lst[i] < smallest {\n            smallest\
    \ = lst[i]\n            smallestIndex = i\n        }\n    }\n    return lst[smallestIndex]",
  "    guard lst.count > 0 else {\n        return nil\n    }\n    guard lst.count\
    \ > 1 else {\n        return lst[1]\n    }\n    var smallest = lst[0]\n    var\
    \ secondSmallest = lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = lst[i]\n  \
    \      } else if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n\
    \        }\n    }\n    return secondSmallest", "    guard lst.count > 0 else {\
    \ return nil }\n    guard lst.count > 1 else {\n        return lst[1]\n    }\n\
    \    var smallest = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    guard lst.count > 0 else {\n        return nil\n    }\n    guard lst.count\
    \ > 1 else {\n        return lst[1]\n    }\n    var smallest = lst[0]\n    var\
    \ secondSmallest = lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = lst[i]\n  \
    \      }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n    var\
    \ secondSmallest = lst[0]\n    for el in lst {\n        if el < smallest {\n \
    \           secondSmallest = smallest\n            smallest = el\n        } else\
    \ if el < secondSmallest {\n            secondSmallest = el\n        }\n    }\n\
    \    return secondSmallest", "    guard lst.count > 0 else {\n        return nil\n\
    \    }\n\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\n    for\
    \ element in lst {\n        if element < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = element\n        } else if element < secondSmallest\
    \ {\n            secondSmallest = element\n        }\n    }\n\n    return secondSmallest",
  "    guard lst.count > 0 else {\n        return nil\n    }\n    guard lst.count\
    \ > 1 else {\n        return lst[1]\n    }\n    var smallest = lst[0]\n    var\
    \ secondSmallest = lst[1]\n    for i in 2..<lst.count {\n        if smallest.isLess(lst[i])\
    \ {\n            secondSmallest = smallest\n            smallest = lst[i]\n  \
    \      }\n    }\n    return secondSmallest", "    guard lst.count > 0 else {\n\
    \        return nil\n    }\n    guard lst.count > 1 else {\n        return lst[0]\n\
    \    }\n    var smallest = lst[0]\n    var secondSmallest = lst[1]\n    for i\
    \ in 0..<lst.count - 1 {\n        if smallest > lst[i] {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else {\n            if\
    \ secondSmallest > lst[i] {\n                secondSmallest = lst[i]\n       \
    \     }\n        }\n    }\n    return secondSmallest", "    guard lst.count >\
    \ 0 else {\n        return nil\n    }\n    guard lst.count >= 2 else {\n     \
    \   return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest = lst[1]\n\
    \    for i in 2..<lst.count {\n        if lst[i] < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < secondSmallest\
    \ {\n            secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for el in lst {\n\
    \        if el < smallest {\n            secondSmallest = smallest\n         \
    \   smallest = el\n        } else if el < secondSmallest {\n            secondSmallest\
    \ = el\n        }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n\
    \    var secondSmallest = lst[0]\n    for i in 1..<lst.count {\n        if lst[i]\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ lst[i]\n        } else if lst[i] < secondSmallest {\n            secondSmallest\
    \ = lst[i]\n        }\n    }\n    return secondSmallest", "    var smallest =\
    \ lst[0]\n    var secondSmallest = lst[0]\n    for el in lst {\n        if el\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ el\n        } else {\n            if el < secondSmallest {\n               \
    \ secondSmallest = el\n            }\n        }\n    }\n    return secondSmallest",
  "    guard lst.count > 0 else {\n        return nil\n    }\n    guard lst.count\
    \ > 1 else {\n        return lst[1]\n    }\n    guard lst.count >= 2 else {\n\
    \        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[1]\n    for index in lst.indices {\n        if smallest > lst[index] {\n\
    \            secondSmallest = smallest\n            smallest = lst[index]\n  \
    \      }\n    }\n    return secondSmallest", "    guard lst.count > 0 else {\n\
    \        return nil\n    }\n    guard lst.count > 1 else {\n        return lst[1]\n\
    \    }\n    var smallest = lst[0]\n    var secondSmallest = lst[1]\n    for i\
    \ in 1..lst.count {\n        if smallest > lst[i] {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for element in\
    \ lst {\n        if element < smallest {\n            secondSmallest = smallest\n\
    \            smallest = element\n        } else if element < secondSmallest {\n\
    \            secondSmallest = element\n        }\n    }\n    return secondSmallest",
  "    guard lst.count > 0 else {\n        return nil\n    }\n    guard lst.count\
    \ > 1 else {\n        return lst[0]\n    }\n    var smallest = lst[0]\n    var\
    \ secondSmallest = lst[0]\n    for i in 1..lst.count {\n        if lst[i] < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = lst[i]\n  \
    \      } else if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n\
    \        }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n  \
    \  var secondSmallest = lst[0]\n    for i in 1..<lst.count {\n        if lst[i]\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ lst[i]\n        } else if lst[i] < secondSmallest {\n            secondSmallest\
    \ = lst[i]\n        }\n    }\n    return secondSmallest", "    guard lst.count\
    \ > 0 else {\n        return nil\n    }\n    guard lst.count > 1 else {\n    \
    \    return lst[0]\n    }\n    var smallest = lst[0]\n    var secondSmallest =\
    \ lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < smallest {\n     \
    \       secondSmallest = smallest\n            smallest = lst[i]\n        }\n\
    \        else if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n\
    \        }\n    }\n    return secondSmallest", "    guard lst.count > 0 else {\n\
    \        return nil\n    }\n    guard lst.count > 1 else {\n        return lst[0]\n\
    \    }\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for i\
    \ in 1..lst.count {\n        if smallest > lst[i] {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else {\n            if\
    \ secondSmallest > lst[i] {\n                secondSmallest = lst[i]\n       \
    \     }\n        }\n    }\n    return secondSmallest", "    guard lst.count >\
    \ 0 else {\n        return nil\n    }\n    guard lst.count > 1 else {\n      \
    \  return lst[1]\n    }\n    var smallest = lst[0]\n    var secondSmallest = lst[1]\n\
    \    for i in 1..lst.count {\n        if smallest > lst[i] {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for element in\
    \ lst {\n        if element < smallest {\n            secondSmallest = smallest\n\
    \            smallest = element\n        } else if element < secondSmallest {\n\
    \            secondSmallest = element\n        }\n    }\n    return secondSmallest",
  "    guard lst.count > 0 else {\n        return nil\n    }\n    var smallest = lst[0]\n\
    \    var secondSmallest = lst[0]\n    for i in 1..lst.count {\n        if smallest.isLess(lst[i])\
    \ {\n            secondSmallest = smallest\n            smallest = lst[i]\n  \
    \      }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n    var\
    \ secondSmallest = lst[0]\n    for i in lst {\n        if i < smallest {\n   \
    \         secondSmallest = smallest\n            smallest = i\n        } else\
    \ if i == smallest {\n            if secondSmallest < i {\n                secondSmallest\
    \ = i\n            }\n        }\n    }\n    return secondSmallest", "    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[0]\n    for el in lst {\n        if el\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ el\n        } else if el < secondSmallest {\n            secondSmallest = el\n\
    \        }\n    }\n    return secondSmallest", "    var smallest = lst[0]\n  \
    \  var secondSmallest = lst[0]\n    for el in lst {\n        if el < smallest\
    \ {\n            secondSmallest = smallest\n            smallest = el\n      \
    \  } else if el < secondSmallest {\n            secondSmallest = el\n        }\n\
    \    }\n    return secondSmallest", "    var smallest = lst[0]\n    var secondSmallest\
    \ = lst[0]\n    for i in lst {\n        if i < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = i\n        } else if i == smallest {\n  \
    \          secondSmallest = i\n        }\n    }\n    return secondSmallest", " \
    \   guard lst.count > 0 else {\n        return nil\n    }\n    guard lst.count\
    \ >= 2 else {\n        return nil\n    }\n    let smallest = lst[0]\n    let secondSmallest\
    \ = lst[1]\n    if smallest < secondSmallest {\n        return secondSmallest\n\
    \    }\n    return smallest", "    guard lst.count > 0 else {\n        return\
    \ nil\n    }\n\n    var smallest = lst[0]\n    var secondSmallest = lst[0]\n\n\
    \    for value in lst {\n        if value < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = value\n        } else if value < secondSmallest\
    \ {\n            secondSmallest = value\n        }\n    }\n\n    return secondSmallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for element in\
    \ lst {\n        if element < smallest {\n            secondSmallest = smallest\n\
    \            smallest = element\n        } else if element < secondSmallest {\n\
    \            secondSmallest = element\n        }\n    }\n    return secondSmallest",
  "    var smallest: Int? = nil\n    for el in lst {\n        if smallest == nil ||\
    \ el < smallest {\n            smallest = el\n        }\n    }\n    return smallest",
  "    var smallest = lst[0]\n    var secondSmallest = lst[0]\n    for element in\
    \ lst {\n        if element < smallest {\n            secondSmallest = smallest\n\
    \            smallest = element\n        } else if element < secondSmallest {\n\
    \            secondSmallest = element\n        }\n    }\n    return secondSmallest"]
stop_tokens:
- "\n}"
