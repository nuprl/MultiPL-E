name: HumanEval_124_valid_date
language: swift
prompt: "\n/// You have to write a function which validates a given date string and\n\
  /// returns True if the date is valid otherwise False.\n/// The date is valid if\
  \ all of the following rules are satisfied:\n/// 1. The date string is not empty.\n\
  /// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12.\
  \ And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11.\
  \ And, the number of days is not less than 1 or higher than 29 for the month 2.\n\
  /// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date\
  \ should be in the format: mm-dd-yyyy\nfunc valid_date(date: String) -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\n\
  assert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\"\
  ) == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date:\
  \ \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\n\
  assert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\"\
  ) == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date:\
  \ \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\n\
  assert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\"\
  ) == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date:\
  \ \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)"
completions: ["    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    let dateString = dateFormatter.date(from: date)\n    if\
    \ dateString == nil {\n        return false\n    }\n    let calendar = Calendar.current\n\
    \    let components = calendar.dateComponents([.day], from: dateString!, to: Date())\n\
    \    let daysInMonth = calendar.dateComponents([.day], from: Date(), to: Date()).day!\n\
    \    return components.day == daysInMonth", "    if date == \"\" {\n        return\
    \ false\n    }\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    let dateFromString = dateFormatter.date(from: date)\n\
    \    if dateFromString == nil {\n        return false\n    }\n    let calendar\
    \ = Calendar.current\n    let components = calendar.dateComponents([.day], from:\
    \ dateFromString!, to: Date())\n    return components.day != nil", "    if date\
    \ == \"\" {\n        return false\n    }\n\n    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateFromString = dateFormatter.date(from:\
    \ date)\n    if dateFromString == nil {\n        return false\n    }\n\n    let\
    \ calendar = Calendar.current\n    let components = calendar.dateComponents([.day],\
    \ from: dateFromString!, to: Date())\n    if components.day < 1 || components.day\
    \ > 31 || components.month < 1 || components.month > 12 || components.year < 1950\
    \ {\n        return false\n    }\n\n    return true", "    guard !date.isEmpty\
    \ else {\n        return false\n    }\n    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateFromString = dateFormatter.date(from:\
    \ date)\n    guard dateFromString != nil else {\n        return false\n    }\n\
    \    let calendar = Calendar.current\n    let components = calendar.dateComponents([.day],\
    \ from: dateFromString!, to: Date())\n    let days = components.day!\n    return\
    \ days <= 31 && days >= 1 && days <= 29 && days >= 1 && days <= 31", "    if !is_empty(date)\
    \ {\n        let dateFormatter = DateFormatter()\n        dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n        let dateFromString = dateFormatter.date(from: date)\n\
    \        if dateFromString != nil {\n            let calendar = Calendar.current\n\
    \            let components = calendar.dateComponents([.day], from: dateFromString!,\
    \ to: Date())\n            if components.day > 31 || components.day < 1 {\n  \
    \              return false\n            }\n            if components.month >=\
    \ 1 || components.month < 4 {\n                return false\n            }\n \
    \           if components.month == 2 && components.day > 29 {\n              \
    \  return false\n            }\n            return true\n        }\n    }\n  \
    \  return false", "    guard !date.isEmpty else { return false }\n    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let date\
    \ = dateFormatter.date(from: date)\n    guard date != nil else { return false\
    \ }\n    let calendar = Calendar.current\n    let components = calendar.dateComponents([.day],\
    \ from: date!, to: Date())\n    return components.day != nil", "    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    if let\
    \ date = dateFormatter.date(from: date) {\n        let calendar = Calendar.current\n\
    \        let components = calendar.dateComponents([.day], from: date, to: Date())\n\
    \        let days = components.day!\n        return days > 0 && days < 32 && days\
    \ < 29 && days < 31\n    }\n    return false", "    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    if let date = dateFormatter.date(from:\
    \ date) {\n        let calendar = Calendar.current\n        let components = calendar.dateComponents([.day],\
    \ from: date, to: Date())\n        return components.day != 0\n    }\n    return\
    \ false", "    guard !date.isEmpty else {\n        return false\n    }\n\n   \
    \ let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n    let dateFromString = dateFormatter.date(from: date)\n    if dateFromString\
    \ == nil {\n        return false\n    }\n\n    let calendar = Calendar.current\n\
    \    let components = calendar.dateComponents([.day], from: dateFromString!, to:\
    \ Date())\n    return components.day != 0", "    if !date.isEmpty {\n        let\
    \ dateFormatter = DateFormatter()\n        dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n        let dateFromString = dateFormatter.date(from: date)\n        return\
    \ dateFromString != nil\n    }\n    return false", "    if date == \"\" {\n  \
    \      return false\n    }\n\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    let dateFromString = dateFormatter.date(from: date)\n\n\
    \    if dateFromString == nil {\n        return false\n    }\n\n    let calendar\
    \ = Calendar.current\n    let components = calendar.dateComponents([.day], from:\
    \ dateFromString!, to: Date())\n\n    if components.day < 1 || components.day\
    \ > 31 || components.month < 1 || components.month > 12 || components.year < 1980\
    \ {\n        return false\n    }\n\n    return true", "    guard !date.isEmpty\
    \ else {\n        return false\n    }\n    \n    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    \n    guard let date = dateFormatter.date(from:\
    \ date) else {\n        return false\n    }\n    \n    let calendar = Calendar.current\n\
    \    \n    let daysInMonth = calendar.dateComponents([.day], from: date, to: Date()).day!\n\
    \    \n    return daysInMonth < 1 || daysInMonth > 31\n        || daysInMonth\
    \ < 1 || daysInMonth > 30\n        || daysInMonth < 1 || daysInMonth > 29\n  \
    \      || daysInMonth < 1 || daysInMonth > 12", "    if !date.isEmpty {\n    \
    \    let dateFormatter = DateFormatter()\n        dateFormatter.dateFormat = \"\
    MM-dd-yyyy\"\n        let dateFromString = dateFormatter.date(from: date)\n  \
    \      return dateFromString != nil\n    }\n    return false", "    if date ==\
    \ \"\" {\n        return false\n    }\n\n    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n\n    let dateComponents = dateFormatter.date(from:\
    \ date)\n    if dateComponents == nil {\n        return false\n    }\n\n    let\
    \ calendar = Calendar.current\n    let components = calendar.dateComponents([.day],\
    \ from: dateComponents!, to: Date())\n    if components.day < 1 || components.day\
    \ > 31 || components.month < 1 || components.month > 12 || components.year < 1950\
    \ {\n        return false\n    }\n\n    return true", "    let dateFormatter =\
    \ DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateFromString\
    \ = dateFormatter.date(from: date)\n    if dateFromString != nil {\n        let\
    \ calendar = Calendar.current\n        let components = calendar.dateComponents([.day],\
    \ from: dateFromString!, to: Date())\n        let daysInMonth = calendar.dateComponents([.day],\
    \ from: Date(), to: Date()).day!\n        return components.day == daysInMonth\n\
    \    }\n    return false", "    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    guard let date = dateFormatter.date(from: date) else {\
    \ return false }\n    let calendar = Calendar.current\n    let components = calendar.dateComponents([.day],\
    \ from: date, to: Date())\n    return components.day != nil && components.day\
    \ >= 1 && components.day <= 31\n        && components.month != nil && components.month\
    \ >= 1 && components.month <= 12\n        && components.year != nil", "    if\
    \ !is_empty(date) {\n        let dateFormatter = DateFormatter()\n        dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n        guard let date = dateFormatter.date(from: date) else\
    \ {\n            return false\n        }\n        let calendar = Calendar.current\n\
    \        let components = calendar.dateComponents([.day], from: date, to: Date())\n\
    \        return components.day != 0\n    }\n    return false", "    if date ==\
    \ \"\" {\n        return false\n    }\n    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateFromString = dateFormatter.date(from:\
    \ date)\n    if dateFromString == nil {\n        return false\n    }\n    let\
    \ calendar = Calendar.current\n    let components = calendar.dateComponents([.day],\
    \ from: dateFromString!, to: Date())\n    return components.day != nil", "   \
    \ if date == \"\" {\n        return false\n    }\n    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateObj = dateFormatter.date(from:\
    \ date)\n    if dateObj == nil {\n        return false\n    }\n    let calendar\
    \ = Calendar.current\n    let components = calendar.dateComponents([.day], from:\
    \ dateObj!, to: Date())\n    let daysInMonth = calendar.dateComponents([.day],\
    \ from: Date(), to: Date()).day!\n    return components.day == daysInMonth", " \
    \   if !is_empty(date) {\n        let dateFormatter = DateFormatter()\n      \
    \  dateFormatter.dateFormat = \"MM-dd-yyyy\"\n        let dateFromString = dateFormatter.date(from:\
    \ date)\n        return dateFromString != nil\n    }\n    return false", "   \
    \ guard !date.isEmpty else {\n        return false\n    }\n    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateFromString\
    \ = dateFormatter.date(from: date)\n    if dateFromString == nil {\n        return\
    \ false\n    }\n    let calendar = Calendar.current\n    let components = calendar.dateComponents([.day],\
    \ from: dateFromString!, to: Date())\n    let days = components.day!\n    if days\
    \ > 31 || days < 1 {\n        return false\n    }\n    if components.month! >\
    \ 12 || components.month! < 1 {\n        return false\n    }\n    return true",
  "    if !is_empty(date) {\n        let dateFormatter = DateFormatter()\n       \
    \ dateFormatter.dateFormat = \"MM-dd-yyyy\"\n        let dateFromString = dateFormatter.date(from:\
    \ date)\n        return dateFromString != nil\n    }\n    return false", "   \
    \ let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n    let dateFromString = dateFormatter.date(from: date)\n    if dateFromString\
    \ == nil {\n        return false\n    }\n    let calendar = Calendar.current\n\
    \    let components = calendar.dateComponents([.day], from: dateFromString!, to:\
    \ Date())\n    if components.day < 1 || components.day > 31 || components.month\
    \ < 1 || components.month > 12 || components.year < 1950 {\n        return false\n\
    \    }\n    return true", "    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    let dateString = dateFormatter.date(from: date)\n    if\
    \ dateString == nil {\n        return false\n    }\n    let calendar = Calendar.current\n\
    \    let components = calendar.dateComponents([.day], from: dateString!, to: Date())\n\
    \    let daysInMonth = calendar.dateComponents([.day], from: Date(), to: Date()).day!\n\
    \    return components.day == daysInMonth", "    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    if let date = dateFormatter.date(from:\
    \ date) {\n        let calendar = Calendar.current\n        let components = calendar.dateComponents([.day],\
    \ from: date, to: Date())\n        return components.day != 0\n    }\n    return\
    \ false", "    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    if let date = dateFormatter.date(from: date) {\n     \
    \   let calendar = Calendar.current\n        let components = calendar.dateComponents([.day],\
    \ from: date, to: Date())\n        let daysInMonth = calendar.dateComponents([.day],\
    \ from: Date(), to: Date()).day!\n        return components.day == daysInMonth\n\
    \    }\n    return false", "    if !date.isEmpty {\n        let dateFormatter\
    \ = DateFormatter()\n        dateFormatter.dateFormat = \"MM-dd-yyyy\"\n     \
    \   let date = dateFormatter.date(from: date)\n        if date != nil {\n    \
    \        let calendar = Calendar.current\n            let components = calendar.dateComponents([.day],\
    \ from: date!, to: Date())\n            let days = components.day!\n         \
    \   if days > 31 || days < 1 {\n                return false\n            }\n\
    \            let months = components.month!\n            if months > 12 || months\
    \ < 1 {\n                return false\n            }\n            return true\n\
    \        }\n    }\n    return false", "    guard !date.isEmpty else { return false\
    \ }\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"\
    MM-dd-yyyy\"\n    let dateFromString = dateFormatter.date(from: date)\n    guard\
    \ dateFromString != nil else { return false }\n    let calendar = Calendar.current\n\
    \    let components = calendar.dateComponents([.day], from: dateFromString!, to:\
    \ Date())\n    return components.day != nil", "    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateFromString = dateFormatter.date(from:\
    \ date)\n    if dateFromString == nil {\n        return false\n    }\n    let\
    \ calendar = Calendar.current\n    let components = calendar.dateComponents([.day],\
    \ from: dateFromString!, to: Date())\n    let daysInMonth = calendar.dateComponents([.day],\
    \ from: Date(), to: Date()).day!\n    if components.day == daysInMonth {\n   \
    \     return true\n    }\n    return false", "    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateCheck = dateFormatter.date(from:\
    \ date)\n    if dateCheck == nil {\n        return false\n    }\n    let dateComponents\
    \ = Calendar.current.dateComponents([.day, .month, .year], from: dateCheck!)\n\
    \    if dateComponents.day == 0 || dateComponents.month == 0 || dateComponents.year\
    \ == 0 {\n        return false\n    }\n    if dateComponents.month == 1 || dateComponents.month\
    \ == 3 || dateComponents.month == 5 || dateComponents.month == 7 || dateComponents.month\
    \ == 8 || dateComponents.month == 10 || dateComponents.month == 12 {\n       \
    \ return false\n    }\n    if dateComponents.month == 4 || dateComponents.month\
    \ == 6 || dateComponents.month == 9 || dateComponents.month == 11 {\n        return\
    \ false\n    }\n    if dateComponents.month == 2 && dateComponents.day > 29 {\n\
    \        return false\n    }\n    return true", "    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateString = dateFormatter.date(from:\
    \ date)\n    if dateString == nil {\n        return false\n    }\n    let calendar\
    \ = Calendar.current\n    let components = calendar.dateComponents([.day], from:\
    \ dateString!, to: Date())\n    let daysInMonth = calendar.dateComponents([.day],\
    \ from: Date(), to: Date()).day!\n    if components.day != daysInMonth {\n   \
    \     return false\n    }\n    if components.month != 12 {\n        return false\n\
    \    }\n    if components.year != 2020 {\n        return false\n    }\n    return\
    \ true", "    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    let dateString = dateFormatter.date(from: date)\n    return\
    \ dateString != nil", "    guard !date.isEmpty else { return false }\n    let\
    \ dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n    let dateFromString = dateFormatter.date(from: date)\n    guard dateFromString\
    \ != nil else { return false }\n    let calendar = Calendar.current\n    let components\
    \ = calendar.dateComponents([.day], from: dateFromString!, to: Date())\n    return\
    \ components.day != 0", "    guard !date.isEmpty else {\n        return false\n\
    \    }\n    \n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    \n    guard let date = dateFormatter.date(from: date)\
    \ else {\n        return false\n    }\n    \n    let calendar = Calendar.current\n\
    \    \n    let components = calendar.dateComponents([.day], from: date, to: Date())\n\
    \    \n    return components.day != 0", "    guard !date.isEmpty else {\n    \
    \    return false\n    }\n\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    let dateFromString = dateFormatter.date(from: date)\n\
    \    guard dateFromString != nil else {\n        return false\n    }\n\n    let\
    \ calendar = Calendar.current\n    let components = calendar.dateComponents([.day],\
    \ from: dateFromString!, to: Date())\n    let daysInMonth = calendar.dateComponents([.day],\
    \ from: Date(), to: Date()).day!\n\n    return components.day == daysInMonth",
  "    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n    guard let date = dateFormatter.date(from: date) else { return false }\n\
    \    let calendar = Calendar.current\n    let components = calendar.dateComponents([.day],\
    \ from: date, to: Date())\n    return components.day != nil && components.day\
    \ >= 1 && components.day <= 31\n        && components.month != nil && components.month\
    \ >= 1 && components.month <= 12\n        && components.year != nil && components.year\
    \ >= 1980", "    if !date.isEmpty {\n        let dateFormatter = DateFormatter()\n\
    \        dateFormatter.dateFormat = \"MM-dd-yyyy\"\n        let dateFromString\
    \ = dateFormatter.date(from: date)\n        if dateFromString != nil {\n     \
    \       let calendar = Calendar.current\n            let components = calendar.dateComponents([.day],\
    \ from: dateFromString!, to: Date())\n            let days = components.day!\n\
    \            if days > 31 || days < 1 {\n                return false\n      \
    \      }\n            if days > 30 || days < 1 {\n                return false\n\
    \            }\n            if days > 29 || days < 1 {\n                return\
    \ false\n            }\n            if days > 12 || days < 1 {\n             \
    \   return false\n            }\n            return true\n        }\n    }\n \
    \   return false", "    if !date.isEmpty {\n        let dateFormatter = DateFormatter()\n\
    \        dateFormatter.dateFormat = \"MM-dd-yyyy\"\n        let dateFromString\
    \ = dateFormatter.date(from: date)\n        return dateFromString != nil\n   \
    \ }\n    return false", "    if !date.isEmpty {\n        let dateFormatter = DateFormatter()\n\
    \        dateFormatter.dateFormat = \"MM-dd-yyyy\"\n        let dateFromString\
    \ = dateFormatter.date(from: date)\n        return dateFromString != nil\n   \
    \ }\n    return false", "    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    if let date = dateFormatter.date(from: date) {\n     \
    \   let calendar = Calendar.current\n        let components = calendar.dateComponents([.day],\
    \ from: date, to: Date())\n        return components.day != 0\n    }\n    return\
    \ false", "    guard !date.isEmpty else { return false }\n    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateFromString\
    \ = dateFormatter.date(from: date)\n    return dateFromString != nil", "    if\
    \ !date.isEmpty {\n        let dateFormatter = DateFormatter()\n        dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n        let dateFromString = dateFormatter.date(from: date)\n\
    \        return dateFromString != nil\n    }\n    return false", "    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateFromString\
    \ = dateFormatter.date(from: date)\n    if dateFromString != nil {\n        let\
    \ calendar = Calendar.current\n        let components = calendar.dateComponents([.day],\
    \ from: dateFromString!, to: Date())\n        let daysInMonth = calendar.dateComponents([.day],\
    \ from: Date(), to: Date()).day!\n        return components.day == daysInMonth\n\
    \    }\n    return false", "    guard !date.isEmpty else {\n        return false\n\
    \    }\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    let dateFromString = dateFormatter.date(from: date)\n\
    \    if dateFromString == nil {\n        return false\n    }\n    let calendar\
    \ = Calendar.current\n    let components = calendar.dateComponents([.day], from:\
    \ dateFromString!, to: Date())\n    return components.day != nil", "    guard\
    \ !date.isEmpty else {\n        return false\n    }\n    \n    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    \n   \
    \ let dateComponents = dateFormatter.date(from: date)\n    \n    if dateComponents\
    \ == nil {\n        return false\n    }\n    \n    let calendar = Calendar.current\n\
    \    \n    let year = dateComponents!.year\n    let month = dateComponents!.month\n\
    \    let day = dateComponents!.day\n    \n    let monthDays = [31, 28, 31, 30,\
    \ 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    if month < 1 || month > 12 {\n  \
    \      return false\n    }\n    \n    if month == 2 {\n        if day < 1 || day\
    \ > monthDays(month - 1) {\n            return false\n        }\n    }\n    \n\
    \    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 ||\
    \ month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n           \
    \ return false\n        }\n    }\n    \n    if month == 4 || month == 6 || month\
    \ == 9 || month == 11 {\n        if day < 1 || day > 30 {\n            return\
    \ false\n        }\n    }\n    \n    return true", "    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    if let date = dateFormatter.date(from:\
    \ date) {\n        let calendar = Calendar.current\n        let components = calendar.dateComponents([.day],\
    \ from: date, to: Date())\n        let days = components.day!\n        return\
    \ days > 0 && days < 32 && days < 29 && days < 31\n    }\n    return false", " \
    \   if date == \"\" {\n        return false\n    }\n    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateObj = dateFormatter.date(from:\
    \ date)\n    if dateObj == nil {\n        return false\n    }\n    let calendar\
    \ = Calendar.current\n    let components = calendar.dateComponents([.day], from:\
    \ dateObj!, to: Date())\n    if components.day < 1 || components.day > 31 || components.month\
    \ < 1 || components.month > 12 || components.year < 1950 {\n        return false\n\
    \    }\n    return true", "    guard !date.isEmpty else {\n        return false\n\
    \    }\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    guard let date = dateFormatter.date(from: date) else {\n\
    \        return false\n    }\n    let calendar = Calendar.current\n    let components\
    \ = calendar.dateComponents([.day], from: date, to: Date())\n    return components.day\
    \ != 0", "    guard !date.isEmpty else {\n        return false\n    }\n\n    let\
    \ dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n    let dateFromString = dateFormatter.date(from: date)\n\n    if dateFromString\
    \ == nil {\n        return false\n    }\n\n    let calendar = Calendar.current\n\
    \    let components = calendar.dateComponents([.day], from: dateFromString!, to:\
    \ Date())\n    let daysBetweenDates = components.day!\n\n    if daysBetweenDates\
    \ < 1 || daysBetweenDates > 31 || daysBetweenDates < 30 || daysBetweenDates >\
    \ 29 || daysBetweenDates < 1 {\n        return false\n    }\n\n    return true",
  "    if !date.isEmpty {\n        let dateFormatter = DateFormatter()\n        dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n        let dateFromString = dateFormatter.date(from: date)\n\
    \        if dateFromString != nil {\n            let calendar = Calendar.current\n\
    \            let components = calendar.dateComponents([.day], from: dateFromString!,\
    \ to: Date())\n            let daysInMonth = calendar.dateComponents([.day], from:\
    \ Date(), to: Date()).day!\n            if components.day == daysInMonth {\n \
    \               return true\n            } else {\n                return false\n\
    \            }\n        } else {\n            return false\n        }\n    } else\
    \ {\n        return false\n    }", "    guard !date.isEmpty else {\n        return\
    \ false\n    }\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    let dateObj = dateFormatter.date(from: date)\n    if dateObj\
    \ == nil {\n        return false\n    }\n    let calendar = Calendar.current\n\
    \    let components = calendar.dateComponents([.day], from: dateObj!, to: Date())\n\
    \    return components.day != 0", "    let dateFormatter = DateFormatter()\n \
    \   dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    if let date = dateFormatter.date(from:\
    \ date) {\n        let calendar = Calendar.current\n        let components = calendar.dateComponents([.day],\
    \ from: date, to: Date())\n        return components.day != 0\n    }\n    return\
    \ false", "    if date == \"\" {\n        return false\n    }\n    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateFromString\
    \ = dateFormatter.date(from: date)\n    if dateFromString == nil {\n        return\
    \ false\n    }\n    let calendar = Calendar.current\n    let components = calendar.dateComponents([.day],\
    \ from: dateFromString!, to: Date())\n    if components.day < 1 || components.day\
    \ > 31 || components.month < 1 || components.month > 12 || components.year < 1950\
    \ {\n        return false\n    }\n    return true", "    guard !date.isEmpty else\
    \ {\n        return false\n    }\n\n    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateFromString = dateFormatter.date(from:\
    \ date)\n\n    guard dateFromString != nil else {\n        return false\n    }\n\
    \n    let calendar = Calendar.current\n    let components = calendar.dateComponents([.day],\
    \ from: dateFromString!, to: Date())\n\n    return components.day != nil", " \
    \   guard !date.isEmpty else {\n        return false\n    }\n\n    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateFromString\
    \ = dateFormatter.date(from: date)\n\n    if dateFromString == nil {\n       \
    \ return false\n    }\n\n    let calendar = Calendar.current\n    let components\
    \ = calendar.dateComponents([.day], from: dateFromString!, to: Date())\n    let\
    \ daysInMonth = calendar.dateComponents([.day], from: Date(), to: Date()).day!\n\
    \n    return components.day == daysInMonth", "    guard !date.isEmpty else { return\
    \ false }\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    let dateFromString = dateFormatter.date(from: date)\n\
    \    guard dateFromString != nil else { return false }\n    let calendar = Calendar.current\n\
    \    let components = calendar.dateComponents([.day], from: dateFromString!, to:\
    \ Date())\n    return components.day != nil", "    guard !date.isEmpty else {\n\
    \        return false\n    }\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    guard let date = dateFormatter.date(from: date) else {\n\
    \        return false\n    }\n    let calendar = Calendar.current\n    let components\
    \ = calendar.dateComponents([.day], from: date, to: Date())\n    return components.day\
    \ != 0", "    if !is_empty(date) {\n        let dateFormatter = DateFormatter()\n\
    \        dateFormatter.dateFormat = \"MM-dd-yyyy\"\n        let dateFromString\
    \ = dateFormatter.date(from: date)\n        if dateFromString != nil {\n     \
    \       let calendar = Calendar.current\n            let components = calendar.dateComponents([.day],\
    \ from: dateFromString!, to: Date())\n            if components.day == 31 || components.day\
    \ == 30 || components.day == 29 || components.day == 31 || components.day == 30\
    \ || components.day == 29 || components.day == 31 || components.day == 30 || components.day\
    \ == 29 || components.day == 31 || components.day == 30 || components.day == 29\
    \ || components.day == 31 || components.day == 30 || components.day == 29 || components.day\
    \ == 31 || components.day == 30 || components.day == 29 || components.day == 31\
    \ || components.day == 30 || components.day == 29 || components.day == 31 || components.day\
    \ == 30 || components.day == 29 || components.day == 31 || components.day == 30\
    \ || components.day == 29 || components.day == 31 || components.day == 30 || components.day\
    \ == 29 || components.day == 31 || components.day == 30 || components.day == 29\
    \ || components.day == 31 || components.day == 30 || components.day == 29 || components.day\
    \ == 31 || components.day == 30 || components.day == 29 || components.day == 31\
    \ || components.day == 30 || components.day == 29 || components.day == 31 || components.day\
    \ == 30 || components.day == 29 || components.day == 31 || components.day == 30\
    \ || components.day == 29 || components.day == 31 || components.day == 30 || components.day\
    \ == 29 || components.day == 31 || components.day == 30 || components.day == 29\
    \ || components.day == 31 || components.day == 30 || components.day == 29 || components.day\
    \ == 31 || components.day == 30 || components.day == 29 || components.day == 31\
    \ || components.day == 30 || components.day == 29 || components.day == 31 || components.day\
    \ == 30 || components.day == 29 || components.day == 31 || components.day == 30\
    \ || components.day == 29 || components.day == 31 || components.day == 30 || components.day\
    \ == 29 || components.day == 31 || components.day == 30 || components.day == 29\
    \ || components.day == 31 || components.day == 30 || components.day == 29 || components.day\
    \ == 31 || components.day == 30 || components.day == 29 || components.day == 31\
    \ || components.day == 30 || components.day == 29 || components.day == 31 || components.day\
    \ == 30 || components.day == 29 || components.day ", "    let dateFormatter =\
    \ DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateFromString\
    \ = dateFormatter.date(from: date)\n    if dateFromString == nil {\n        return\
    \ false\n    }\n    let calendar = Calendar.current\n    let components = calendar.dateComponents([.day],\
    \ from: dateFromString!, to: Date())\n    let daysInMonth = calendar.dateComponents([.day],\
    \ from: Date(), to: Date()).day!\n    return components.day == daysInMonth", " \
    \   guard !date.isEmpty else { return false }\n    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateFromString = dateFormatter.date(from:\
    \ date)\n    guard dateFromString != nil else { return false }\n    let calendar\
    \ = Calendar.current\n    let components = calendar.dateComponents([.day], from:\
    \ dateFromString!, to: Date())\n    return components.day != nil", "    if !is_empty(date)\
    \ {\n        let dateFormatter = DateFormatter()\n        dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n        let dateFromString = dateFormatter.date(from: date)\n\
    \        if dateFromString != nil {\n            let calendar = Calendar.current\n\
    \            let components = calendar.dateComponents([.day], from: dateFromString!,\
    \ to: Date())\n            if components.day != 0 {\n                return true\n\
    \            }\n        }\n    }\n    return false", "    let dateFormatter =\
    \ DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateString\
    \ = dateFormatter.date(from: date)\n    if dateString == nil {\n        return\
    \ false\n    }\n    let calendar = Calendar.current\n    let components = calendar.dateComponents([.day],\
    \ from: dateString!, to: Date())\n    let daysInMonth = calendar.dateComponents([.day],\
    \ from: Date(), to: Date()).day!\n    if components.day < 1 || components.day\
    \ > daysInMonth {\n        return false\n    }\n    if components.month < 1 ||\
    \ components.month > 12 {\n        return false\n    }\n    return true", "  \
    \  guard !date.isEmpty else { return false }\n    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateObj = dateFormatter.date(from:\
    \ date)\n    if dateObj == nil { return false }\n    let calendar = Calendar.current\n\
    \    let components = calendar.dateComponents([.day], from: dateObj!, to: Date())\n\
    \    return components.day != nil", "    guard !date.isEmpty else {\n        return\
    \ false\n    }\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    let dateFromString = dateFormatter.date(from: date)\n\
    \    if dateFromString == nil {\n        return false\n    }\n    let calendar\
    \ = Calendar.current\n    let components = calendar.dateComponents([.day], from:\
    \ dateFromString!, to: Date())\n    return components.day != nil", "    if !date.isEmpty\
    \ {\n        let dateFormatter = DateFormatter()\n        dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n        let dateFromString = dateFormatter.date(from: date)\n\
    \        if dateFromString != nil {\n            let calendar = Calendar.current\n\
    \            let components = calendar.dateComponents([.day], from: dateFromString!,\
    \ to: Date())\n            if components.day > 31 || components.day < 1 {\n  \
    \              return false\n            }\n            if components.month >\
    \ 12 || components.month < 1 {\n                return false\n            }\n\
    \            if components.month == 2 && components.day > 29 {\n             \
    \   return false\n            }\n            return true\n        }\n    }\n \
    \   return false", "    guard !date.isEmpty else {\n        return false\n   \
    \ }\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"\
    MM-dd-yyyy\"\n    guard let date = dateFormatter.date(from: date) else {\n   \
    \     return false\n    }\n    let calendar = Calendar.current\n    let components\
    \ = calendar.dateComponents([.day], from: date, to: Date())\n    return components.day\
    \ != 0", "    guard !date.isEmpty else {\n        return false\n    }\n    let\
    \ dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n    let dateFromString = dateFormatter.date(from: date)\n    if dateFromString\
    \ == nil {\n        return false\n    }\n    let calendar = Calendar.current\n\
    \    let components = calendar.dateComponents([.day], from: dateFromString!, to:\
    \ Date())\n    return components.day != nil", "    if date == \"\" {\n       \
    \ return false\n    }\n\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    let dateFromString = dateFormatter.date(from: date)\n\n\
    \    if dateFromString == nil {\n        return false\n    }\n\n    let calendar\
    \ = Calendar.current\n    let components = calendar.dateComponents([.day], from:\
    \ dateFromString!, to: Date())\n\n    if components.day < 1 || components.day\
    \ > 31 || components.month < 1 || components.month > 12 || components.year < 1980\
    \ || components.year > Date().year {\n        return false\n    }\n\n    return\
    \ true", "    guard !date.isEmpty else {\n        return false\n    }\n    \n\
    \    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n    \n    let dateComponents = dateFormatter.date(from: date)\n    \n    guard\
    \ dateComponents != nil else {\n        return false\n    }\n    \n    let calendar\
    \ = Calendar.current\n    \n    let year = dateComponents!.year\n    let month\
    \ = dateComponents!.month\n    let day = dateComponents!.day\n    \n    let dateComponentsValidate\
    \ = calendar.dateComponents([.day, .month, .year], from: dateComponents!, to:\
    \ Date())\n    \n    guard dateComponentsValidate != nil else {\n        return\
    \ false\n    }\n    \n    let daysInMonth = calendar.dateComponents([.day], from:\
    \ Date(), to: dateComponentsValidate!.nextDate(after: dateComponentsValidate!.date!)!).day!\n\
    \    \n    guard daysInMonth > 1 else {\n        return false\n    }\n    \n \
    \   guard month >= 1 && month <= 12 else {\n        return false\n    }\n    \n\
    \    guard day >= 1 && day <= daysInMonth else {\n        return false\n    }\n\
    \    \n    return true", "    guard !date.isEmpty else {\n        return false\n\
    \    }\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    let dateFromString = dateFormatter.date(from: date)\n\
    \    guard dateFromString != nil else {\n        return false\n    }\n    let\
    \ calendar = Calendar.current\n    let components = calendar.dateComponents([.day],\
    \ from: dateFromString!, to: Date())\n    return components.day != 0", "    if\
    \ !date.isEmpty {\n        let dateFormatter = DateFormatter()\n        dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n        let dateFromString = dateFormatter.date(from: date)\n\
    \        if dateFromString != nil {\n            let calendar = Calendar.current\n\
    \            let components = calendar.dateComponents([.day], from: dateFromString!,\
    \ to: Date())\n            let daysInMonth = calendar.dateComponents([.day], from:\
    \ Date(), to: Date()).day!\n            if components.day == daysInMonth {\n \
    \               return true\n            }\n        }\n    }\n    return false",
  "    if date == \"\" {\n        return false\n    }\n    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateFromString = dateFormatter.date(from:\
    \ date)\n    if dateFromString == nil {\n        return false\n    }\n    let\
    \ calendar = Calendar.current\n    let components = calendar.dateComponents([.day],\
    \ from: dateFromString!, to: Date())\n    if components.day < 1 || components.day\
    \ > 31 || components.month < 1 || components.month > 12 || components.year < 1980\
    \ {\n        return false\n    }\n    return true", "    guard !date.isEmpty else\
    \ {\n        return false\n    }\n    let dateFormatter = DateFormatter()\n  \
    \  dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    guard let date = dateFormatter.date(from:\
    \ date) else {\n        return false\n    }\n    let calendar = Calendar.current\n\
    \    let components = calendar.dateComponents([.day], from: date, to: Date())\n\
    \    return components.day != nil && components.day >= 1 && components.day <=\
    \ 31\n        && components.month != nil && components.month >= 1 && components.month\
    \ <= 12\n        && components.year != nil", "    guard !date.isEmpty else {\n\
    \        return false\n    }\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    let date = dateFormatter.date(from: date)\n    if date\
    \ == nil {\n        return false\n    }\n    let calendar = Calendar.current\n\
    \    let components = calendar.dateComponents([.day], from: date!, to: Date())\n\
    \    return components.day != nil", "    if !date.isEmpty {\n        let dateFormatter\
    \ = DateFormatter()\n        dateFormatter.dateFormat = \"MM-dd-yyyy\"\n     \
    \   let dateFromString = dateFormatter.date(from: date)\n        if dateFromString\
    \ != nil {\n            let calendar = Calendar.current\n            let components\
    \ = calendar.dateComponents([.day], from: dateFromString!, to: Date())\n     \
    \       return components.day != nil\n        }\n    }\n    return false", " \
    \   guard !date.isEmpty else { return false }\n    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateObject = dateFormatter.date(from:\
    \ date)\n    return dateObject != nil", "    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    guard let date = dateFormatter.date(from:\
    \ date) else { return false }\n    let calendar = Calendar.current\n    let components\
    \ = calendar.dateComponents([.day, .month, .year], from: date)\n    return components.day\
    \ != nil && components.month != nil && components.year != nil", "    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    if let\
    \ date = dateFormatter.date(from: date) {\n        let calendar = Calendar.current\n\
    \        let components = calendar.dateComponents([.day], from: date, to: Date())\n\
    \        return components.day != 0\n    }\n    return false", "    if !date.isEmpty\
    \ {\n        let dateFormatter = DateFormatter()\n        dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n        let dateObj = dateFormatter.date(from: date)\n   \
    \     if dateObj != nil {\n            let calendar = Calendar.current\n     \
    \       let components = calendar.dateComponents([.day], from: dateObj!, to: Date())\n\
    \            let days = components.day!\n            if days > 31 || days < 1\
    \ || days > 30 || days < 29 || days > 31 {\n                return false\n   \
    \         }\n            let months = components.month!\n            if months\
    \ > 12 || months < 1 || months > 12 || months < 1 {\n                return false\n\
    \            }\n            return true\n        }\n    }\n    return false",
  "    guard !date.isEmpty else { return false }\n    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateFromString = dateFormatter.date(from:\
    \ date)\n    guard dateFromString != nil else { return false }\n    let calendar\
    \ = Calendar.current\n    let components = calendar.dateComponents([.day], from:\
    \ dateFromString!, to: Date())\n    return components.day != nil", "    if !date.isEmpty\
    \ {\n        let dateFormatter = DateFormatter()\n        dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n        let dateFromString = dateFormatter.date(from: date)\n\
    \        return dateFromString != nil\n    }\n    return false", "    if !is_empty(date)\
    \ {\n        let dateFormatter = DateFormatter()\n        dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n        let dateFromString = dateFormatter.date(from: date)\n\
    \        return dateFromString != nil\n    }\n    return false", "    if !date.isEmpty\
    \ {\n        let dateFormatter = DateFormatter()\n        dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n        let dateFromString = dateFormatter.date(from: date)\n\
    \        return dateFromString != nil\n    }\n    return false", "    if date\
    \ == \"\" {\n        return false\n    }\n    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateFromString = dateFormatter.date(from:\
    \ date)\n    if dateFromString == nil {\n        return false\n    }\n    let\
    \ calendar = Calendar.current\n    let components = calendar.dateComponents([.day],\
    \ from: dateFromString!, to: Date())\n    if components.day < 1 || components.day\
    \ > 31 || components.month < 1 || components.month > 12 || components.year < 1901\
    \ || components.year > Date().year {\n        return false\n    }\n    return\
    \ true", "    if !is_empty_string(date) {\n        let dateFormatter = DateFormatter()\n\
    \        dateFormatter.dateFormat = \"MM-dd-yyyy\"\n        let dateFromString\
    \ = dateFormatter.date(from: date)\n        if dateFromString != nil {\n     \
    \       let calendar = Calendar.current\n            let components = calendar.dateComponents([.day],\
    \ from: dateFromString!, to: Date())\n            let daysInMonth = calendar.dateComponents([.day],\
    \ from: Date(), to: Date()).day!\n            if components.day == daysInMonth\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false", "    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    let dateAsString = dateFormatter.date(from: date)\n  \
    \  if dateAsString == nil {\n        return false\n    }\n    let calendar = Calendar.current\n\
    \    let components = calendar.dateComponents([.day], from: dateAsString!, to:\
    \ Date())\n    return components.day != nil && components.day >= 1 && components.day\
    \ <= 31\n        && components.month != nil && components.month >= 1 && components.month\
    \ <= 12\n        && components.year != nil", "    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    if let date = dateFormatter.date(from:\
    \ date) {\n        let calendar = Calendar.current\n        let components = calendar.dateComponents([.day],\
    \ from: date, to: Date())\n        return components.day != 0\n    }\n    return\
    \ false", "    guard !date.isEmpty else { return false }\n    guard date.count\
    \ >= 2 else { return false }\n    guard date.count == 4 else { return false }\n\
    \    guard let dateFormatter = DateFormatter()\n        dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n        dateFormatter.locale = Locale(identifier: \"en_US_POSIX\"\
    )\n        dateFormatter.dateFormat = \"MM-dd-yyyy\"\n        let dateFromString\
    \ = dateFormatter.date(from: date)\n        guard let dateFromString = dateFromString\
    \ else { return false }\n        let calendar = Calendar.current\n        let\
    \ components = calendar.dateComponents([.day], from: dateFromString, to: Date())\n\
    \        return components.day != nil\n    }", "    if !date.isEmpty {\n     \
    \   let dateFormatter = DateFormatter()\n        dateFormatter.dateFormat = \"\
    MM-dd-yyyy\"\n        let dateFromString = dateFormatter.date(from: date)\n  \
    \      return dateFromString != nil\n    }\n    return false", "    if date ==\
    \ \"\" {\n        return false\n    }\n    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateFromString = dateFormatter.date(from:\
    \ date)\n    if dateFromString == nil {\n        return false\n    }\n    let\
    \ calendar = Calendar.current\n    let components = calendar.dateComponents([.day],\
    \ from: dateFromString!, to: Date())\n    if components.day < 1 || components.day\
    \ > 31 || components.month < 1 || components.month > 12 || components.year < 1950\
    \ || components.year > 2050 {\n        return false\n    }\n    return true",
  "    guard !date.isEmpty else { return false }\n    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateObj = dateFormatter.date(from:\
    \ date)\n    guard dateObj != nil else { return false }\n    let calendar = Calendar.current\n\
    \    let components = calendar.dateComponents([.day], from: dateObj!, to: Date())\n\
    \    return components.day != nil", "    guard !date.isEmpty else {\n        return\
    \ false\n    }\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    let dateObj = dateFormatter.date(from: date)\n    if dateObj\
    \ == nil {\n        return false\n    }\n    let calendar = Calendar.current\n\
    \    let components = calendar.dateComponents([.day], from: dateObj!, to: Date())\n\
    \    if components.day < 1 || components.day > 31 || components.month < 1 || components.month\
    \ > 12 || components.year < 1900 || (components.month == 2 && components.day >\
    \ 29) {\n        return false\n    }\n    return true", "    guard !date.isEmpty\
    \ else {\n        return false\n    }\n    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let date = dateFormatter.date(from:\
    \ date)\n    guard let validDate = date else {\n        return false\n    }\n\
    \    let calendar = Calendar.current\n    let components = calendar.dateComponents([.day],\
    \ from: validDate, to: Date())\n    return components.day != 0", "    guard !date.isEmpty\
    \ else {\n        return false\n    }\n    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateFromString = dateFormatter.date(from:\
    \ date)\n    if dateFromString == nil {\n        return false\n    }\n    let\
    \ calendar = Calendar.current\n    let components = calendar.dateComponents([.day],\
    \ from: dateFromString!, to: Date())\n    return components.day != 0", "    let\
    \ dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n    let dateFromString = dateFormatter.date(from: date)\n    return dateFromString\
    \ != nil", "    if !is_empty_string(date) {\n        let dateFormatter = DateFormatter()\n\
    \        dateFormatter.dateFormat = \"MM-dd-yyyy\"\n        let dateFromString\
    \ = dateFormatter.date(from: date)\n        return dateFromString != nil\n   \
    \ }\n    return false", "    if !is_empty(date) {\n        let dateFormatter =\
    \ DateFormatter()\n        dateFormatter.dateFormat = \"MM-dd-yyyy\"\n       \
    \ let dateFromString = dateFormatter.date(from: date)\n        return dateFromString\
    \ != nil\n    }\n    return false", "    guard !date.isEmpty else {\n        return\
    \ false\n    }\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    let dateFromString = dateFormatter.date(from: date)\n\
    \    guard dateFromString != nil else {\n        return false\n    }\n    let\
    \ calendar = Calendar.current\n    let components = calendar.dateComponents([.day],\
    \ from: dateFromString!, to: Date())\n    return components.day != nil", "   \
    \ guard !date.isEmpty else {\n        return false\n    }\n\n    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateFromString\
    \ = dateFormatter.date(from: date)\n\n    if dateFromString == nil {\n       \
    \ return false\n    }\n\n    let calendar = Calendar.current\n    let components\
    \ = calendar.dateComponents([.day], from: dateFromString!, to: Date())\n    let\
    \ daysInMonth = calendar.dateComponents([.day], from: Date(), to: Date()).day!\n\
    \n    return components.day >= 1 && components.day <= daysInMonth", "    guard\
    \ !date.isEmpty else { return false }\n    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateObj = dateFormatter.date(from:\
    \ date)\n    return dateObj != nil", "    if !date.isEmpty {\n        let dateFormatter\
    \ = DateFormatter()\n        dateFormatter.dateFormat = \"MM-dd-yyyy\"\n     \
    \   let dateFromString = dateFormatter.date(from: date)\n        if dateFromString\
    \ != nil {\n            let calendar = Calendar.current\n            let components\
    \ = calendar.dateComponents([.day], from: dateFromString!, to: Date())\n     \
    \       return components.day != nil\n        }\n    }\n    return false", " \
    \   if !date.isEmpty {\n        let dateFormatter = DateFormatter()\n        dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n        let dateFromString = dateFormatter.date(from: date)\n\
    \        return dateFromString != nil\n    }\n    return false", "    if !date.isEmpty\
    \ {\n        let dateFormatter = DateFormatter()\n        dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n        let dateFromString = dateFormatter.date(from: date)\n\
    \        return dateFromString != nil\n    }\n    return false", "    guard !date.isEmpty\
    \ else {\n        return false\n    }\n\n    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateFromString = dateFormatter.date(from:\
    \ date)\n\n    if dateFromString == nil {\n        return false\n    }\n\n   \
    \ let calendar = Calendar.current\n    let components = calendar.dateComponents([.day],\
    \ from: dateFromString!, to: Date())\n    let daysInMonth = calendar.dateComponents([.day],\
    \ from: Date(), to: Date()).day!\n\n    return components.day == daysInMonth",
  "    guard !date.isEmpty else {\n        return false\n    }\n    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateFromString\
    \ = dateFormatter.date(from: date)\n    guard dateFromString != nil else {\n \
    \       return false\n    }\n    let calendar = Calendar.current\n    let components\
    \ = calendar.dateComponents([.day], from: dateFromString!, to: Date())\n    guard\
    \ components.day >= 1 && components.day <= 31 else {\n        return false\n \
    \   }\n    guard components.month >= 1 && components.month <= 12 else {\n    \
    \    return false\n    }\n    return true", "    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateFromString = dateFormatter.date(from:\
    \ date)\n    return dateFromString != nil", "    guard !date.isEmpty else {\n\
    \        return false\n    }\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    let dateObj = dateFormatter.date(from: date)\n    if dateObj\
    \ == nil {\n        return false\n    }\n    let calendar = Calendar.current\n\
    \    let components = calendar.dateComponents([.day], from: dateObj!, to: Date())\n\
    \    return components.day != nil", "    guard !date.isEmpty else {\n        return\
    \ false\n    }\n    \n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    \n    let dateComponents = dateFormatter.date(from: date)\n\
    \    \n    guard dateComponents != nil else {\n        return false\n    }\n \
    \   \n    let calendar = Calendar.current\n    \n    let year = dateComponents!.year\n\
    \    let month = dateComponents!.month\n    let day = dateComponents!.day\n  \
    \  \n    let isLeapYear = calendar.isLeapYear(year: year)\n    \n    let daysInMonth\
    \ = calendar.component(.day, from: DateComponents(year: year, month: month, day:\
    \ day))\n    \n    let daysInYear = calendar.component(.day, from: DateComponents(year:\
    \ year, month: 12, day: 1))\n    \n    let daysInLeapYear = calendar.component(.day,\
    \ from: DateComponents(year: year, month: 12, day: isLeapYear ? 29 : 28))\n  \
    \  \n    let daysInLeapYear2 = calendar.component(.day, from: DateComponents(year:\
    \ year, month: isLeapYear ? 1 : 3, day: 1))\n    \n    let daysInLeapYear3 = calendar.component(.day,\
    \ from: DateComponents(year: year, month: isLeapYear ? 3 : 1, day: 1))\n    \n\
    \    let daysInLeapYear4 = calendar.component(.day, from: DateComponents(year:\
    \ year, month: isLeapYear ? 5 : 1, day: 1))\n    \n    let daysInLeapYear5 = calendar.component(.day,\
    \ from: DateComponents(year: year, month: isLeapYear ? 7 : 1, day: 1))\n    \n\
    \    let daysInLeapYear6 = calendar.component(.day, from: DateComponents(year:\
    \ year, month: isLeapYear ? 8 : 1, day: 1))\n    \n    let daysInLeapYear7 = calendar.component(.day,\
    \ from: DateComponents(year: year, month: isLeapYear ? 10 : 1, day: 1))\n    \n\
    \    let daysInLeapYear8 = calendar.component(.day, from: DateComponents(year:\
    \ year, month: isLeapYear ? 12 : 1, day: 1))\n    \n    let daysInLeapYear9 =\
    \ calendar.component(.day, from: DateComponents(year: year, month: isLeapYear\
    \ ? 11 : 1, day: 1))\n    \n    let daysInLeapYear10 = calendar.component(.day,\
    \ from: DateComponents(year: year, month: isLeapYear ? 12 : 1, day: 1))\n    \n\
    \    let daysInLeapYear11 = calendar.component(.day, from: DateComponents(year:\
    \ year, month: isLeapYear ? 12 : 1, day: 1))\n    \n    let daysInLeapYear12 =\
    \ calendar.component(.day, from: DateComponents(year: year, month: isLeapYear",
  "    if date == \"\" {\n        return false\n    }\n    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let date = dateFormatter.date(from:\
    \ date)\n    if date == nil {\n        return false\n    }\n    let calendar =\
    \ Calendar.current\n    let components = calendar.dateComponents([.day], from:\
    \ date!, to: Date())\n    if components.day < 1 || components.day > 31 || components.month\
    \ < 1 || components.month > 12 || components.year < 1950 {\n        return false\n\
    \    }\n    return true", "    guard !date.isEmpty else {\n        return false\n\
    \    }\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    let dateFromString = dateFormatter.date(from: date)\n\
    \    if dateFromString == nil {\n        return false\n    }\n    let calendar\
    \ = Calendar.current\n    let components = calendar.dateComponents([.day], from:\
    \ dateFromString!, to: Date())\n    return components.day != nil", "    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    if let\
    \ date = dateFormatter.date(from: date) {\n        let calendar = Calendar.current\n\
    \        let components = calendar.dateComponents([.day], from: date, to: Date())\n\
    \        let daysInMonth = calendar.dateComponents([.day], from: Date(), to: Date()).day!\n\
    \        return components.day == daysInMonth\n    }\n    return false", "   \
    \ let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n    let dateString = dateFormatter.date(from: date)\n    return dateString !=\
    \ nil && dateString!.day != 0 && dateString!.month != 0 && dateString!.year !=\
    \ 0", "    if !is_empty(date) {\n        let dateFormatter = DateFormatter()\n\
    \        dateFormatter.dateFormat = \"MM-dd-yyyy\"\n        let dateFromString\
    \ = dateFormatter.date(from: date)\n        return dateFromString != nil\n   \
    \ }\n    return false", "    guard !date.isEmpty else {\n        return false\n\
    \    }\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    let date = dateFormatter.date(from: date)\n    guard date\
    \ != nil else {\n        return false\n    }\n    let calendar = Calendar.current\n\
    \    let components = calendar.dateComponents([.day], from: date!, to: Date())\n\
    \    return components.day != nil", "    guard !date.isEmpty else {\n        return\
    \ false\n    }\n    \n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    \n    let dateComponents = dateFormatter.date(from: date)\n\
    \    \n    if dateComponents == nil {\n        return false\n    }\n    \n   \
    \ let calendar = Calendar.current\n    \n    let daysInMonth = calendar.dateComponents([.day],\
    \ from: dateComponents!, to: Date()).day!\n    \n    let monthsInYear = calendar.dateComponents([.month],\
    \ from: dateComponents!, to: Date()).month!\n    \n    let yearComponents = calendar.dateComponents([.year],\
    \ from: dateComponents!, to: Date())\n    \n    let years = yearComponents.year!\n\
    \    \n    let monthsBetween = monthsInYear - yearComponents.month!\n    \n  \
    \  let daysBetween = daysInMonth - yearComponents.day!\n    \n    if daysBetween\
    \ < 1 || daysBetween > 31 || monthsBetween < 1 || monthsBetween > 12 || years\
    \ < 1 || years > 12 {\n        return false\n    }\n    \n    return true", " \
    \   if date == \"\" {\n        return false\n    }\n    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateFromString = dateFormatter.date(from:\
    \ date)\n    if dateFromString == nil {\n        return false\n    }\n    let\
    \ calendar = Calendar.current\n    let components = calendar.dateComponents([.day],\
    \ from: dateFromString!, to: Date())\n    return components.day != nil", "   \
    \ if date == \"\" {\n        return false\n    }\n    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateFromString = dateFormatter.date(from:\
    \ date)\n    if dateFromString == nil {\n        return false\n    }\n    let\
    \ calendar = Calendar.current\n    let components = calendar.dateComponents([.day],\
    \ from: dateFromString!, to: Date())\n    return components.day != nil", "   \
    \ let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n    if let date = dateFormatter.date(from: date) {\n        let calendar = Calendar.current\n\
    \        let components = calendar.dateComponents([.day], from: date, to: Date())\n\
    \        return components.day != 0\n    }\n    return false", "    if !date.isEmpty\
    \ {\n        let dateFormatter = DateFormatter()\n        dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n        guard let date = dateFormatter.date(from: date) else\
    \ { return false }\n        let calendar = Calendar.current\n        let components\
    \ = calendar.dateComponents([.day], from: date, to: Date())\n        return components.day\
    \ != 0\n    }\n    return false", "    let dateFormatter = DateFormatter()\n \
    \   dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateFromString = dateFormatter.date(from:\
    \ date)\n    if dateFromString == nil {\n        return false\n    }\n    let\
    \ calendar = Calendar.current\n    let components = calendar.dateComponents([.day],\
    \ from: dateFromString!, to: Date())\n    let daysInMonth = calendar.dateComponents([.day],\
    \ from: Date(), to: Date()).day!\n    if components.day != daysInMonth || components.month\
    \ != 12 || components.year != 2020 {\n        return false\n    }\n    return\
    \ true", "    if !is_empty(date) {\n        let dateFormatter = DateFormatter()\n\
    \        dateFormatter.dateFormat = \"MM-dd-yyyy\"\n        let dateFromString\
    \ = dateFormatter.date(from: date)\n        return dateFromString != nil\n   \
    \ }\n    return false", "    guard !date.isEmpty else { return false }\n    let\
    \ dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n    let date = dateFormatter.date(from: date)\n    return date != nil", "  \
    \  let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n    if let date = dateFormatter.date(from: date) {\n        let calendar = Calendar.current\n\
    \        let components = calendar.dateComponents([.day], from: date, to: Date())\n\
    \        return components.day != 0\n    }\n    return false", "    if !is_empty(date)\
    \ {\n        let dateFormatter = DateFormatter()\n        dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n        let dateFromString = dateFormatter.date(from: date)\n\
    \        return dateFromString != nil\n    }\n    return false", "    if !is_empty_string(date)\
    \ {\n        let dateFormatter = DateFormatter()\n        dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n        let dateFromString = dateFormatter.date(from: date)\n\
    \        return dateFromString != nil\n    }\n    return false", "    if !date.isEmpty\
    \ {\n        let dateFormatter = DateFormatter()\n        dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n        let date = dateFormatter.date(from: date)\n      \
    \  return date != nil\n    }\n    return false", "    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateFromString = dateFormatter.date(from:\
    \ date)\n    if dateFromString != nil {\n        let calendar = Calendar.current\n\
    \        let components = calendar.dateComponents([.day], from: dateFromString!,\
    \ to: Date())\n        let daysInMonth = calendar.dateComponents([.day], from:\
    \ Date(), to: Date()).day!\n        return components.day == daysInMonth\n   \
    \ }\n    return false", "    if date == \"\" {\n        return false\n    }\n\
    \    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n    let dateObj = dateFormatter.date(from: date)\n    if dateObj == nil {\n\
    \        return false\n    }\n    let calendar = Calendar.current\n    let components\
    \ = calendar.dateComponents([.day], from: dateObj!, to: Date())\n    return components.day\
    \ != 0", "    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    let dateString = dateFormatter.date(from: date)\n    if\
    \ dateString == nil {\n        return false\n    }\n    let calendar = Calendar.current\n\
    \    let components = calendar.dateComponents([.day], from: dateString!, to: Date())\n\
    \    let daysInMonth = calendar.dateComponents([.day], from: Date(), to: Date()).day!\n\
    \    return components.day == daysInMonth", "    if !is_empty(date) {\n      \
    \  let dateFormatter = DateFormatter()\n        dateFormatter.dateFormat = \"\
    MM-dd-yyyy\"\n        let dateFromString = dateFormatter.date(from: date)\n  \
    \      return dateFromString != nil\n    }\n    return false", "    if !is_empty(date)\
    \ {\n        let dateFormatter = DateFormatter()\n        dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n        let dateObj = dateFormatter.date(from: date)\n   \
    \     return dateObj != nil\n    }\n    return false", "    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    guard\
    \ let date = dateFormatter.date(from: date) else { return false }\n    let calendar\
    \ = Calendar.current\n    let components = calendar.dateComponents([.day], from:\
    \ date, to: Date())\n    return components.day != 0", "    if !is_empty(date)\
    \ {\n        let dateFormatter = DateFormatter()\n        dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n        let dateFromString = dateFormatter.date(from: date)\n\
    \        return dateFromString != nil\n    }\n    return false", "    guard !date.isEmpty\
    \ else {\n        return false\n    }\n    \n    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    \n    let dateComponents =\
    \ dateFormatter.date(from: date)\n    \n    if dateComponents == nil {\n     \
    \   return false\n    }\n    \n    let calendar = Calendar.current\n    \n   \
    \ let year = dateComponents!.year\n    let month = dateComponents!.month\n   \
    \ let day = dateComponents!.day\n    \n    let dateComponentsValidate = calendar.dateComponents([.day,\
    \ .month, .year], from: year, to: month)\n    \n    if dateComponentsValidate.day\
    \ == 0 || dateComponentsValidate.month == 0 || dateComponentsValidate.year ==\
    \ 0 {\n        return false\n    }\n    \n    if dateComponentsValidate.day >\
    \ 31 || dateComponentsValidate.month > 12 || dateComponentsValidate.year > 9999\
    \ {\n        return false\n    }\n    \n    if dateComponentsValidate.day < 1\
    \ || dateComponentsValidate.month < 1 || dateComponentsValidate.year < 1 {\n \
    \       return false\n    }\n    \n    return true", "    guard !date.isEmpty\
    \ else { return false }\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    let dateFromString = dateFormatter.date(from: date)\n\
    \    guard dateFromString != nil else { return false }\n    let calendar = Calendar.current\n\
    \    let components = calendar.dateComponents([.day], from: dateFromString!, to:\
    \ Date())\n    return components.day != nil", "    if date == \"\" {\n       \
    \ return false\n    }\n\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    let dateObj = dateFormatter.date(from: date)\n    if dateObj\
    \ == nil {\n        return false\n    }\n\n    let calendar = Calendar.current\n\
    \    let components = calendar.dateComponents([.day], from: dateObj!, to: Date())\n\
    \    if components.day < 1 || components.day > 31 || components.month < 1 || components.month\
    \ > 12 {\n        return false\n    }\n\n    return true", "    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    if let\
    \ date = dateFormatter.date(from: date) {\n        let calendar = Calendar.current\n\
    \        let components = calendar.dateComponents([.day], from: date, to: Date())\n\
    \        return components.day != 0\n    }\n    return false", "    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateString:\
    \ String = dateFormatter.string(from: date)\n    if dateString.isEmpty {\n   \
    \     return false\n    }\n    let dateComponents = dateFormatter.date(from: dateString)\n\
    \    if dateComponents == nil {\n        return false\n    }\n    let calendar\
    \ = Calendar.current\n    let components = calendar.dateComponents([.day], from:\
    \ dateComponents!, to: Date())\n    if components.day < 1 || components.day >\
    \ 31 || components.month < 1 || components.month > 12 || components.year < 1980\
    \ || components.year > 2099 {\n        return false\n    }\n    return true",
  "    guard !date.isEmpty else {\n        return false\n    }\n\n    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateFromString\
    \ = dateFormatter.date(from: date)\n    if dateFromString == nil {\n        return\
    \ false\n    }\n\n    let calendar = Calendar.current\n    let components = calendar.dateComponents([.day],\
    \ from: dateFromString!, to: Date())\n    if components.day < 1 || components.day\
    \ > 31 || components.month < 1 || components.month > 12 || components.year < 1901\
    \ || components.year > Date().year {\n        return false\n    }\n\n    return\
    \ true", "    guard !date.isEmpty else { return false }\n    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateFromString\
    \ = dateFormatter.date(from: date)\n    guard dateFromString != nil else { return\
    \ false }\n    let calendar = Calendar.current\n    let components = calendar.dateComponents([.day],\
    \ from: dateFromString!, to: Date())\n    return components.day != nil", "   \
    \ guard !date.isEmpty else {\n        return false\n    }\n    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateFromString\
    \ = dateFormatter.date(from: date)\n    if dateFromString == nil {\n        return\
    \ false\n    }\n    let calendar = Calendar.current\n    let components = calendar.dateComponents([.day],\
    \ from: dateFromString!, to: Date())\n    return components.day != nil", "   \
    \ let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n    if let date = dateFormatter.date(from: date) {\n        let calendar = Calendar.current\n\
    \        let components = calendar.dateComponents([.day], from: date, to: Date())\n\
    \        return components.day != 0\n    }\n    return false", "    guard !date.isEmpty\
    \ else {\n        return false\n    }\n    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateFromString = dateFormatter.date(from:\
    \ date)\n    if dateFromString == nil {\n        return false\n    }\n    let\
    \ calendar = Calendar.current\n    let components = calendar.dateComponents([.day],\
    \ from: dateFromString!, to: Date())\n    let days = components.day!\n    return\
    \ days > 0 && days <= 29 && components.month! >= 1 && components.month! <= 12",
  "    guard !date.isEmpty else { return false }\n    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateFromString = dateFormatter.date(from:\
    \ date)\n    return dateFromString != nil", "    if !date.isEmpty {\n        let\
    \ dateFormatter = DateFormatter()\n        dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n        let dateFromString = dateFormatter.date(from: date)\n        if dateFromString\
    \ != nil {\n            let calendar = Calendar.current\n            let components\
    \ = calendar.dateComponents([.day], from: dateFromString!, to: Date())\n     \
    \       if components.day <= 31 &&\n                components.day >= 1 &&\n \
    \               components.month <= 12 &&\n                components.month >=\
    \ 1 {\n                return true\n            }\n        }\n    }\n    return\
    \ false", "    guard !date.isEmpty else {\n        return false\n    }\n    let\
    \ dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n    let dateFromString = dateFormatter.date(from: date)\n    if dateFromString\
    \ == nil {\n        return false\n    }\n    let calendar = Calendar.current\n\
    \    let components = calendar.dateComponents([.day], from: dateFromString!, to:\
    \ Date())\n    if components.day < 1 || components.day > 31 || components.month\
    \ < 1 || components.month > 12 || components.year < 1900 || (components.year >\
    \ 2100 && components.month == 2) {\n        return false\n    }\n    return true",
  "    if date == \"\" {\n        return false\n    }\n\n    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateFromString = dateFormatter.date(from:\
    \ date)\n\n    if dateFromString == nil {\n        return false\n    }\n\n   \
    \ let calendar = Calendar.current\n    let components = calendar.dateComponents([.day],\
    \ from: dateFromString!, to: Date())\n\n    if components.day < 1 || components.day\
    \ > 31 {\n        return false\n    }\n\n    if components.month < 1 || components.month\
    \ > 12 {\n        return false\n    }\n\n    return true", "    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateCheck\
    \ = dateFormatter.date(from: date)\n    if dateCheck != nil {\n        let calendar\
    \ = Calendar.current\n        let components = calendar.dateComponents([.day],\
    \ from: dateCheck!, to: Date())\n        let daysInMonth = calendar.dateComponents([.day],\
    \ from: Date(), to: dateCheck!)\n        let daysInMonth = daysInMonth.day!\n\
    \        if components.day == daysInMonth {\n            return true\n       \
    \ } else {\n            return false\n        }\n    } else {\n        return\
    \ false\n    }", "    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    let dateString = dateFormatter.date(from: date)\n    return\
    \ dateString != nil", "    if date == \"\" {\n        return false\n    }\n\n\
    \    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n    let dateObj = dateFormatter.date(from: date)\n\n    if dateObj == nil {\n\
    \        return false\n    }\n\n    let calendar = Calendar.current\n    let components\
    \ = calendar.dateComponents([.day], from: dateObj!, to: Date())\n    let daysInMonth\
    \ = calendar.dateComponents([.day], from: Date(), to: dateObj!).day!\n\n    if\
    \ components.day < 1 || components.day > daysInMonth {\n        return false\n\
    \    }\n\n    if components.month < 1 || components.month > 12 {\n        return\
    \ false\n    }\n\n    return true", "    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    if let date = dateFormatter.date(from:\
    \ date) {\n        let calendar = Calendar.current\n        let components = calendar.dateComponents([.day],\
    \ from: date, to: Date())\n        let daysInMonth = calendar.dateComponents([.day],\
    \ from: Date(), to: Date()).day!\n        return components.day == daysInMonth\n\
    \    }\n    return false", "    guard !date.isEmpty else {\n        return false\n\
    \    }\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    let date = dateFormatter.date(from: date)\n    guard let\
    \ date = date else {\n        return false\n    }\n    let calendar = Calendar.current\n\
    \    let components = calendar.dateComponents([.day], from: date, to: Date())\n\
    \    return components.day != 0", "    if date == \"\" {\n        return false\n\
    \    }\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    let dateFromString = dateFormatter.date(from: date)\n\
    \    if dateFromString == nil {\n        return false\n    }\n    let calendar\
    \ = Calendar.current\n    let components = calendar.dateComponents([.day], from:\
    \ dateFromString!, to: Date())\n    if components.day < 1 || components.day >\
    \ 31 || components.month < 1 || components.month > 12 || components.year < 1900\
    \ ||\n        components.year > Date().year {\n        return false\n    }\n \
    \   return true", "    if date == \"\" {\n        return false\n    }\n\n    let\
    \ dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n    let dateFromString = dateFormatter.date(from: date)\n\n    if dateFromString\
    \ == nil {\n        return false\n    }\n\n    let calendar = Calendar.current\n\
    \    let components = calendar.dateComponents([.day], from: dateFromString!, to:\
    \ Date())\n    let daysInMonth = calendar.dateComponents([.day], from: Date(),\
    \ to: Date()).day!\n\n    if components.day < 1 || components.day > daysInMonth\
    \ {\n        return false\n    }\n\n    if components.month < 1 || components.month\
    \ > 12 {\n        return false\n    }\n\n    return true", "    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateString\
    \ = dateFormatter.date(from: date)\n    if dateString == nil {\n        return\
    \ false\n    }\n    let dateComponents = dateString!.components(\n        from:\
    \ NSRange(location: 0, length: 2))\n    let months = dateComponents.month\n  \
    \  let days = dateComponents.day\n    let years = dateComponents.year\n    if\
    \ months.isEmpty || days.isEmpty || years.isEmpty {\n        return false\n  \
    \  }\n    if months.count < 1 || months.count > 12 {\n        return false\n \
    \   }\n    if days.count < 1 || days.count > 31 {\n        return false\n    }\n\
    \    if years.count < 1 || years.count > 99 {\n        return false\n    }\n \
    \   if months.count == 2 && days.count == 29 && years.count == 99 {\n        return\
    \ true\n    }\n    return false", "    guard !date.isEmpty else {\n        return\
    \ false\n    }\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    let dateFromString = dateFormatter.date(from: date)\n\
    \    if dateFromString == nil {\n        return false\n    }\n    let calendar\
    \ = Calendar.current\n    let components = calendar.dateComponents([.day], from:\
    \ dateFromString!, to: Date())\n    return components.day != nil", "    if date\
    \ == \"\" {\n        return false\n    }\n\n    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateFromString = dateFormatter.date(from:\
    \ date)\n\n    if dateFromString == nil {\n        return false\n    }\n\n   \
    \ let calendar = Calendar.current\n    let components = calendar.dateComponents([.day],\
    \ from: dateFromString!, to: Date())\n\n    if components.day < 1 || components.day\
    \ > 31 || components.month < 1 || components.month > 12 || components.year < 1900\
    \ || (components.month == 2 && components.day > 29) {\n        return false\n\
    \    }\n\n    return true", "    guard !date.isEmpty else { return false }\n \
    \   let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n    let dateObj = dateFormatter.date(from: date)\n    guard dateObj != nil else\
    \ { return false }\n    let calendar = Calendar.current\n    let components =\
    \ calendar.dateComponents([.day], from: dateObj!, to: Date())\n    guard components.day\
    \ != nil else { return false }\n    return true", "    if !is_empty(date) {\n\
    \        let dateFormatter = DateFormatter()\n        dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n        let dateFromString = dateFormatter.date(from: date)\n\
    \        return dateFromString != nil\n    }\n    return false", "    if !date.isEmpty\
    \ {\n        let dateFormatter = DateFormatter()\n        dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n        let dateFromString = dateFormatter.date(from: date)\n\
    \        return dateFromString != nil\n    }\n    return false", "    guard !date.isEmpty\
    \ else {\n        return false\n    }\n\n    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let date = dateFormatter.date(from:\
    \ date)\n\n    guard date != nil else {\n        return false\n    }\n\n    let\
    \ calendar = Calendar.current\n    let components = calendar.dateComponents([.day],\
    \ from: date!, to: Date())\n    let days = components.day!\n\n    guard days >\
    \ 1 && days < 31 && days < 30 && days < 29 else {\n        return false\n    }\n\
    \n    guard components.month != nil && components.month! > 0 && components.month!\
    \ < 12 else {\n        return false\n    }\n\n    return true", "    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateString:\
    \ String = dateFormatter.string(from: date)\n    if dateString.isEmpty {\n   \
    \     return false\n    }\n    let dateComponents = dateString.components(separatedBy:\
    \ \"-\")\n    if dateComponents.count != 3 {\n        return false\n    }\n  \
    \  let monthComponents = dateComponents[0]\n    let dayComponents = dateComponents[1]\n\
    \    let yearComponents = dateComponents[2]\n    let monthComponentsInt: Int =\
    \ Int(monthComponents)!\n    let dayComponentsInt: Int = Int(dayComponents)!\n\
    \    let yearComponentsInt: Int = Int(yearComponents)!\n    if monthComponentsInt\
    \ < 1 || monthComponentsInt > 12 {\n        return false\n    }\n    if dayComponentsInt\
    \ < 1 || dayComponentsInt > 31 {\n        return false\n    }\n    if monthComponentsInt\
    \ < 4 || monthComponentsInt > 12 {\n        return false\n    }\n    if yearComponentsInt\
    \ < 1 || yearComponentsInt > 9999 {\n        return false\n    }\n    return true",
  "    guard !date.isEmpty else { return false }\n    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateObj = dateFormatter.date(from:\
    \ date)\n    guard dateObj != nil else { return false }\n    let calendar = Calendar.current\n\
    \    let components = calendar.dateComponents([.day], from: dateObj!, to: Date())\n\
    \    return components.day != nil && components.day >= 1 && components.day <=\
    \ 31\n        && components.month != nil && components.month >= 1 && components.month\
    \ <= 12\n        && components.year != nil", "    guard !date.isEmpty else { return\
    \ false }\n    guard let dateComponents = dateFormatter.date(from: date) else\
    \ { return false }\n    guard dateComponents.month >= 1 && dateComponents.month\
    \ <= 12 else { return false }\n    guard dateComponents.day >= 1 && dateComponents.day\
    \ <= 31 else { return false }\n    guard dateComponents.year >= 1900 else { return\
    \ false }\n    return true", "    guard !date.isEmpty else { return false }\n\
    \    guard !date.isEmpty,\n        let dateComponents = Calendar.current.dateComponents([.day,\
    \ .month, .year], from: date),\n        let days = dateComponents.day!,\n    \
    \    let months = dateComponents.month!,\n        let years = dateComponents.year!\n\
    \        else { return false }\n    guard days > 1 && days < 31 &&\n        months\
    \ > 1 && months < 12 &&\n        years > 0 && years < 100 else { return false\
    \ }\n    return true", "    if !date.isEmpty {\n        let dateFormatter = DateFormatter()\n\
    \        dateFormatter.dateFormat = \"MM-dd-yyyy\"\n        let dateFromString\
    \ = dateFormatter.date(from: date)\n        return dateFromString != nil\n   \
    \ }\n    return false", "    if !date.isEmpty {\n        let dateFormatter = DateFormatter()\n\
    \        dateFormatter.dateFormat = \"MM-dd-yyyy\"\n        let dateFromString\
    \ = dateFormatter.date(from: date)\n        return dateFromString != nil\n   \
    \ }\n    return false", "    if !is_empty(date) {\n        let dateFormatter =\
    \ DateFormatter()\n        dateFormatter.dateFormat = \"MM-dd-yyyy\"\n       \
    \ let dateFromString = dateFormatter.date(from: date)\n        return dateFromString\
    \ != nil\n    }\n    return false", "    if !is_empty(date) {\n        let dateFormatter\
    \ = DateFormatter()\n        dateFormatter.dateFormat = \"MM-dd-yyyy\"\n     \
    \   guard let date = dateFormatter.date(from: date) else {\n            return\
    \ false\n        }\n        let calendar = Calendar.current\n        let components\
    \ = calendar.dateComponents([.day], from: date, to: Date())\n        let daysInMonth\
    \ = calendar.dateComponents([.day], from: Date(), to: Date()).day!\n        return\
    \ components.day == daysInMonth\n    }\n    return false", "    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    if let\
    \ date = dateFormatter.date(from: date) {\n        let calendar = Calendar.current\n\
    \        let components = calendar.dateComponents([.day], from: date, to: Date())\n\
    \        return components.day != 0\n    }\n    return false", "    guard !date.isEmpty\
    \ else {\n        return false\n    }\n    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateFromString = dateFormatter.date(from:\
    \ date)\n    guard dateFromString != nil else {\n        return false\n    }\n\
    \    let calendar = Calendar.current\n    let components = calendar.dateComponents([.day],\
    \ from: dateFromString!, to: Date())\n    let daysInMonth = calendar.dateComponents([.day],\
    \ from: Date(), to: Date()).day!\n    return components.day >= 1 && components.day\
    \ <= daysInMonth", "    guard !date.isEmpty else {\n        return false\n   \
    \ }\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"\
    MM-dd-yyyy\"\n    let date = dateFormatter.date(from: date)\n    if date == nil\
    \ {\n        return false\n    }\n    let calendar = Calendar.current\n    let\
    \ components = calendar.dateComponents([.day], from: date!, to: Date())\n    return\
    \ components.day != nil && components.day >= 1 && components.day <= 31\n     \
    \   && components.month != nil && components.month >= 1 && components.month <=\
    \ 12\n        && components.year != nil && components.year >= 1980", "    guard\
    \ !date.isEmpty else { return false }\n    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    guard let date = dateFormatter.date(from:\
    \ date) else { return false }\n    let calendar = Calendar.current\n    let components\
    \ = calendar.dateComponents([.day], from: date, to: Date())\n    return components.day\
    \ != 0", "    guard !date.isEmpty else { return false }\n    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateFromString\
    \ = dateFormatter.date(from: date)\n    guard dateFromString != nil else { return\
    \ false }\n    let calendar = Calendar.current\n    let components = calendar.dateComponents([.day],\
    \ from: dateFromString!, to: Date())\n    return components.day != nil", "   \
    \ guard !date.isEmpty else {\n        return false\n    }\n\n    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateFromString\
    \ = dateFormatter.date(from: date)\n\n    if dateFromString == nil {\n       \
    \ return false\n    }\n\n    let calendar = Calendar.current\n    let components\
    \ = calendar.dateComponents([.day], from: dateFromString!, to: Date())\n    let\
    \ daysInMonth = calendar.dateComponents([.day], from: Date(), to: Date()).day!\n\
    \n    return components.day >= 1 && components.day <= daysInMonth", "    if !date.isEmpty\
    \ {\n        let dateFormatter = DateFormatter()\n        dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n        let dateFromString = dateFormatter.date(from: date)\n\
    \        return dateFromString != nil\n    }\n    return false", "    if !date.isEmpty\
    \ {\n        let dateFormatter = DateFormatter()\n        dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n        let dateFromString = dateFormatter.date(from: date)\n\
    \        if dateFromString != nil {\n            let calendar = Calendar.current\n\
    \            let components = calendar.dateComponents([.day], from: dateFromString!,\
    \ to: Date())\n            if components.day > 0 && components.day <= 31 &&\n\
    \                components.month >= 1 && components.month <= 12 &&\n        \
    \        components.year >= 1900 {\n                return true\n            }\n\
    \        }\n    }\n    return false", "    guard !date.isEmpty else {\n      \
    \  return false\n    }\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    let dateFromString = dateFormatter.date(from: date)\n\
    \    if dateFromString == nil {\n        return false\n    }\n    let calendar\
    \ = Calendar.current\n    let components = calendar.dateComponents([.day], from:\
    \ dateFromString!, to: Date())\n    return components.day != nil", "    guard\
    \ !date.isEmpty else {\n        return false\n    }\n    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateFromString = dateFormatter.date(from:\
    \ date)\n    guard dateFromString != nil else {\n        return false\n    }\n\
    \    let calendar = Calendar.current\n    let components = calendar.dateComponents([.day],\
    \ from: dateFromString!, to: Date())\n    let daysInMonth = calendar.dateComponents([.day],\
    \ from: Date(), to: Date()).day!\n    return components.day == daysInMonth", " \
    \   let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n    if let date = dateFormatter.date(from: date) {\n        let calendar = Calendar.current\n\
    \        let components = calendar.dateComponents([.day], from: date, to: Date())\n\
    \        return components.day != 0\n    }\n    return false", "    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    guard\
    \ let date = dateFormatter.date(from: date) else { return false }\n    let calendar\
    \ = Calendar.current\n    let components = calendar.dateComponents([.day], from:\
    \ date, to: Date())\n    return components.day != 0", "    let dateFormatter =\
    \ DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    if let date\
    \ = dateFormatter.date(from: date) {\n        let calendar = Calendar.current\n\
    \        let components = calendar.dateComponents([.day], from: date, to: Date())\n\
    \        return components.day != 0\n    }\n    return false", "    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    if let\
    \ date = dateFormatter.date(from: date) {\n        let calendar = Calendar.current\n\
    \        let components = calendar.dateComponents([.day], from: date, to: Date())\n\
    \        let daysInMonth = calendar.dateComponents([.day], from: Date(), to: Date()).day!\n\
    \        return components.day == daysInMonth\n    }\n    return false", "   \
    \ let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n    let dateString = dateFormatter.date(from: date)\n    if dateString == nil\
    \ {\n        return false\n    }\n    let calendar = Calendar.current\n    let\
    \ components = calendar.dateComponents([.day], from: dateString!, to: Date())\n\
    \    return components.day != nil", "    guard !date.isEmpty else {\n        return\
    \ false\n    }\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    guard let date = dateFormatter.date(from: date) else {\n\
    \        return false\n    }\n    let calendar = Calendar.current\n    let components\
    \ = calendar.dateComponents([.day], from: date, to: Date())\n    return components.day\
    \ != 0", "    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    let dateObj = dateFormatter.date(from: date)\n    return\
    \ dateObj != nil", "    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    let dateFromString = dateFormatter.date(from: date)\n\
    \    if dateFromString == nil {\n        return false\n    }\n    let calendar\
    \ = Calendar.current\n    let components = calendar.dateComponents([.day], from:\
    \ dateFromString!, to: Date())\n    return components.day != nil", "    if !date.isEmpty\
    \ {\n        let dateFormatter = DateFormatter()\n        dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n        let dateFromString = dateFormatter.date(from: date)\n\
    \        if dateFromString != nil {\n            let calendar = Calendar.current\n\
    \            let components = calendar.dateComponents([.day], from: dateFromString!,\
    \ to: Date())\n            let daysInMonth = calendar.dateComponents([.day], from:\
    \ Date(), to: Date()).day!\n            if components.day == daysInMonth {\n \
    \               return true\n            }\n        }\n    }\n    return false",
  "    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n    guard let date = dateFormatter.date(from: date) else { return false }\n\
    \    let calendar = Calendar.current\n    let components = calendar.dateComponents([.day],\
    \ from: date, to: Date())\n    return components.day != nil && components.day\
    \ >= 1 && components.day <= 31\n        && components.month != nil && components.month\
    \ >= 1 && components.month <= 12\n        && components.year != nil", "    if\
    \ !is_empty(date) {\n        let dateFormatter = DateFormatter()\n        dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n        let dateFromString = dateFormatter.date(from: date)\n\
    \        if dateFromString != nil {\n            let calendar = Calendar.current\n\
    \            let components = calendar.dateComponents([.day], from: dateFromString!,\
    \ to: Date())\n            if components.day == 31 || components.day == 30 ||\
    \ components.day == 29 {\n                return false\n            }\n      \
    \      if components.month == 1 {\n                return false\n            }\n\
    \            if components.month == 3 || components.month == 5 || components.month\
    \ == 7 || components.month == 8 || components.month == 10 || components.month\
    \ == 12 {\n                return false\n            }\n            if components.month\
    \ == 4 || components.month == 6 || components.month == 9 || components.month ==\
    \ 11 {\n                return false\n            }\n            return true\n\
    \        }\n    }\n    return false", "    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateAsString = dateFormatter.date(from:\
    \ date)\n    if dateAsString != nil {\n        let calendar = Calendar.current\n\
    \        let components = calendar.dateComponents([.day], from: dateAsString!,\
    \ to: Date())\n        let daysInMonth = calendar.dateComponents([.day], from:\
    \ Date(), to: Date()).day!\n        return components.day == daysInMonth\n   \
    \ }\n    return false", "    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    let dateFromString = dateFormatter.date(from: date)\n\
    \    if dateFromString == nil {\n        return false\n    }\n    let calendar\
    \ = Calendar.current\n    let components = calendar.dateComponents([.day], from:\
    \ dateFromString!, to: Date())\n    return components.day != nil && components.day\
    \ > 0 && components.day <= 31\n        && components.month != nil && components.month\
    \ > 0 && components.month <= 12\n        && components.year != nil && components.year\
    \ > 0 && components.year <= 9999", "    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    if let date = dateFormatter.date(from:\
    \ date) {\n        let calendar = Calendar.current\n        let components = calendar.dateComponents([.day],\
    \ from: date, to: Date())\n        return components.day != 0\n    }\n    return\
    \ false", "    guard !date.isEmpty else {\n        return false\n    }\n    let\
    \ dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n    let dateFromString = dateFormatter.date(from: date)\n    if dateFromString\
    \ == nil {\n        return false\n    }\n    let calendar = Calendar.current\n\
    \    let components = calendar.dateComponents([.day], from: dateFromString!, to:\
    \ Date())\n    return components.day != nil", "    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateString = dateFormatter.date(from:\
    \ date)\n    if dateString == nil {\n        return false\n    }\n    let calendar\
    \ = Calendar.current\n    let components = calendar.dateComponents([.day], from:\
    \ dateString!, to: Date())\n    if components.day < 1 || components.day > 31 ||\
    \ components.month < 1 || components.month > 12 {\n        return false\n    }\n\
    \    return true", "    guard !date.isEmpty else { return false }\n    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateObj\
    \ = dateFormatter.date(from: date)\n    guard dateObj != nil else { return false\
    \ }\n    let calendar = Calendar.current\n    let components = calendar.dateComponents([.day],\
    \ from: dateObj!, to: Date())\n    return components.day != nil", "    guard !date.isEmpty\
    \ else { return false }\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    let dateFromString = dateFormatter.date(from: date)\n\
    \    guard dateFromString != nil else { return false }\n    let calendar = Calendar.current\n\
    \    let components = calendar.dateComponents([.day], from: dateFromString!, to:\
    \ Date())\n    return components.day != nil", "    if !is_empty(date) {\n    \
    \    let dateFormatter = DateFormatter()\n        dateFormatter.dateFormat = \"\
    MM-dd-yyyy\"\n        let dateFromString = dateFormatter.date(from: date)\n  \
    \      return dateFromString != nil\n    }\n    return false", "    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    guard\
    \ let date = dateFormatter.date(from: date) else { return false }\n    let calendar\
    \ = Calendar.current\n    let components = calendar.dateComponents([.day], from:\
    \ date, to: Date())\n    return components.day != 0", "    guard !date.isEmpty\
    \ else { return false }\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    guard let date = dateFormatter.date(from: date) else {\
    \ return false }\n    let calendar = Calendar.current\n    let components = calendar.dateComponents([.day],\
    \ from: date, to: Date())\n    return components.day != 0"]
stop_tokens:
- "\n}"
