name: HumanEval_35_max_element
language: swift
prompt: "\n/// Return maximum element in the list.\nfunc max_element(l: [Int]) ->\
  \ Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
  \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
completions: ["    let max: Int = Int.max\n    for element in l {\n        if element\
    \ > max {\n            max = element\n        }\n    }\n    return max", "   \
    \ if l.is_empty() {\n        return -1\n    }\n    return l[0]", "    l.sort()\n\
    \    return l[0]", '    return l.max()', '    return l.max()', "    let max =\
    \ l[0]\n    for i in l.indices {\n        if l[i] > max {\n            max = l[i]\n\
    \        }\n    }\n    return max", "    let max = l[0]\n    for i in 1 ..< l.count\
    \ {\n        if l[i] > max {\n            max = l[i]\n        }\n    }\n    return\
    \ max", '    return l.max()', '    return l.max()', "    l.sort()\n    return\
    \ l[0]", '    return l.max()', "    l.sort()\n    return l[0]", '    return l.max()',
  '    return l.max()', "    if l.is_empty() {\n        return 0\n    }\n    let max\
    \ = l[0]\n    for i in 1..<l.count {\n        if l[i] > max {\n            max\
    \ = l[i]\n        }\n    }\n    return max", '    return l.max()', '    return
    l.max()', '    return l.max()', '    return l.max()', '    return l.max()', " \
    \   l.sort()\n    return l[0]", "    l.sort()\n    return l[0]", '    return l.max()',
  '    return l.max()', "    l.sort()\n    return l[0]", "    l.sort()\n    return\
    \ l[0]", '    return l.max()', '    return l.max()', "    let max: Int = l[0]\n\
    \    for i in l.indices {\n        if l[i] > max {\n            max = l[i]\n \
    \       }\n    }\n    return max", '    return l.max()', '    return l.max()',
  '    return l.max()', '    return l.max()', '    return l.max()', "    l.sort()\n\
    \    return l[0]", "    let max = l[0]\n    for i in 1..<l.count {\n        if\
    \ l[i] > max {\n            max = l[i]\n        }\n    }\n    return max", '    return
    l.max()', '    return l.max()', "    l.sort()\n    return l[0]", '    return l.max()',
  '    return l.max()', '    return l.max()', "    let max = l[0]\n    for i in 1..<l.count\
    \ {\n        if l[i] > max {\n            max = l[i]\n        }\n    }\n    return\
    \ max", '    return l.max()', '    return l.max()', '    return l.max()', '    return
    l.max()', '    return l.max()', '    return l.max()', "    let max = l[0]\n  \
    \  for i in 1..<l.count {\n        if l[i] > max {\n            max = l[i]\n \
    \       }\n    }\n    return max", "    if l.len() == 0 {\n        return 0\n\
    \    }\n    \n    var max = l[0]\n    for element in l[1..] {\n        if element\
    \ > max {\n            max = element\n        }\n    }\n    return max", '    return
    l.max()', '    return l.max()', "    l.sort()\n    return l[0]", "    if l.is_empty()\
    \ {\n        return -1\n    }\n    var max: Int = 0\n    for x in l {\n      \
    \  if x > max {\n            max = x\n        }\n    }\n    return max", "   \
    \ l.sort()\n    return l[0]", '    return l.max()', '    return l.max()', '    return
    l.max()', '    return l.max()', "    let max = l[0]\n    for i in 1..<l.count\
    \ {\n        if l[i] > max {\n            max = l[i]\n        }\n    }\n    return\
    \ max", '    return l.max()', '    return l.max()', '    return l.max()', '    return
    l.max()', '    return l.max()', "    l.sort()\n    return l[0]", '    return l.max()',
  '    return l.max()', '    return l.max()', "    l.sort()\n    return l[0]", " \
    \   l.sort()\n    return l[0]", '    return l.max()', '    return l.max()', '    return
    l.max()', "    l.sort()\n    return l[0]", "    l.sort()\n    return l[0]", " \
    \   let max = l[0]\n    for i in 1 ..< l.count {\n        if l[i] > max {\n  \
    \          max = l[i]\n        }\n    }\n    return max", '    return l.max()',
  '    return l.max()', '    return l.max()', "    l.sort()\n    return l[0]", " \
    \   let max = l[0]\n    for i in l.indices {\n        if l[i] > max {\n      \
    \      max = l[i]\n        }\n    }\n    return max", '    return l.max()', " \
    \   l.sort()\n    return l[0]", '    return l.max()', '    return l.max()', '    return
    l.max()', "    l.sort()\n    return l[0]", "    if l.len() == 0 {\n        return\
    \ 0\n    }\n    var max = l[0]\n    for el in l {\n        if el > max {\n   \
    \         max = el\n        }\n    }\n    return max", "    l.sort()\n    return\
    \ l[0]", '    return l.max()', '    return l.max()', '    return l.max()', " \
    \   l.sort()\n    return l[0]", '    return l.max()', '    return l.max()', '    return
    l.max()', '    return l.max()', '    return l.max()', '    return l.max()', " \
    \   let max = l[0]\n    for i in 1..<l.count {\n        if l[i] > max {\n    \
    \        max = l[i]\n        }\n    }\n    return max", '    return l.max()',
  '    return l.max()', "    l.sort()\n    return l[l.count - 1]", '    return l.max()',
  "    l.sort()\n    return l[0]", '    return l.max()', '    return l.max()', " \
    \   l.sort()\n    return l[0]", '    return l.max()', '    return l.max()', '    return
    l.max()', '    return l.max()', '    return l.max()', '    return l.max()', " \
    \   l.sort()\n    return l[0]", '    return l.max()', "    let max: Int = l[0]\n\
    \    for i in 1..<l.count {\n        if l[i] > max {\n            max = l[i]\n\
    \        }\n    }\n    return max", '    return l.max()', "    l.sort()\n    return\
    \ l[0]", '    return l.max()', "    let max: Int = Int.max\n    for x in l {\n\
    \        if x > max {\n            max = x\n        }\n    }\n    return max",
  "    let max = l[0]\n    for i in l.indices {\n        if l[i] > max {\n       \
    \     max = l[i]\n        }\n    }\n    return max", "    l.sort()\n    return\
    \ l[0]", '    return l.max()', '    return l.max()', "    l.sort()\n    return\
    \ l[0]", "    l.sort()\n    return l[0]", "    l.sort()\n    return l[0]", '    return
    l.max()', '    return l.max()', "    l.sort()\n    return l[0]", "    l.sort()\n\
    \    return l[0]", '    return l.max()', "    let maxElement = l.max()\n    return\
    \ maxElement", '    return l.max()', '    return l.max()', '    return l.max()',
  "    l.sort()\n    return l[0]", '    return l.max()', '    return l.max()', '    return
    l.max()', "    l.sort()\n    return l[0]", '    return l.max()', "    l.sort()\n\
    \    return l[0]", '    return l.max()', '    return l.max()', '    return l.max()',
  "    let max = l[0]\n    for i in l.indices {\n        if l[i] > max {\n       \
    \     max = l[i]\n        }\n    }\n    return max", '    return l.max()', '    return
    l.max()', '    return l.max()', '    return l.max()', '    return l.max()', " \
    \   l.sort()\n    return l[0]", '    return l.max()', '    return l.max()', '    return
    l.max()', '    return l.max()', "    l.sort()\n    return l[0]", '    return l.max()',
  "    l.sort()\n    return l[0]", '    return l.max()', '    return l.max()', '    return
    l.max()', '    return l.max()', "    l.sort()\n    return l[0]", '    return l.max()',
  '    return l.max()', "    l.sort()\n    return l[0]", "    l.sort()\n    return\
    \ l[0]", '    return l.max()', '    return l.max()', "    l.sort()\n    return\
    \ l[0]", "    l.sort()\n    return l[0]", "    let max = l[0]\n    for i in 1\
    \ ..< l.count {\n        if l[i] > max {\n            max = l[i]\n        }\n\
    \    }\n    return max", '    return l.max()', "    l.sort()\n    return l[0]",
  '    return l.max()', '    return l.max()', "    l.sort()\n    return l[0]", '    return
    l.max()', '    return l.max()', '    return l.max()', '    return l.max()', " \
    \   if l.isEmpty() {\n        return 0\n    }\n    var max = l[0]\n    for i in\
    \ 1..<l.count {\n        if l[i] > max {\n            max = l[i]\n        }\n\
    \    }\n    return max", '    return l.max()', '    return l.max()', "    let\
    \ max = l[0]\n    for i in 1..<l.count {\n        if l[i] > max {\n          \
    \  max = l[i]\n        }\n    }\n    return max", '    return l.max()', '    return
    l.max()', "    let max = l[0]\n    for i in 1..<l.count {\n        if l[i] > max\
    \ {\n            max = l[i]\n        }\n    }\n    return max", "    l.sort()\n\
    \    return l[0]", '    return l.max()', '    return l.max()', '    return l.max()',
  '    return l.max()', '    return l.max()', '    return l.max()']
stop_tokens:
- "\n}"
