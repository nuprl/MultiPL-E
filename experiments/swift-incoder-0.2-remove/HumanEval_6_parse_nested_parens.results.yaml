language: swift
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    for c in\
    \ paren_string.unicodeScalars {\n        if c == paren_count {\n            levels[paren_count]\
    \ += 1\n        } else {\n            levels[paren_count] = 0\n            paren_count\
    \ = c\n        }\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpg80cw_rz.swift:9:14: error: referencing operator function '=='\
    \ on 'BinaryInteger' requires that 'Unicode.Scalar' conform to 'BinaryInteger'\n\
    \        if c == paren_count {\n             ^\nSwift.BinaryInteger:1:11: note:\
    \ where 'Self' = 'Unicode.Scalar'\nextension BinaryInteger {\n          ^\n/tmp/tmpg80cw_rz.swift:13:27:\
    \ error: cannot assign value of type 'Unicode.Scalar' to type 'Int'\n        \
    \    paren_count = c\n                          ^\n"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var paren_level = 0\n    var paren_char =\
    \ 0\n    var paren_char_count = 0\n    var paren_chars = []\n    var paren_char_index\
    \ = 0\n    var paren_char_counts = []\n    var paren_char_indexes = []\n    var\
    \ paren_char_count = 0\n    var paren_char_index = 0\n    var paren_char_counts\
    \ = []\n    var paren_char_indexes = []\n    var paren_char_count = 0\n    var\
    \ paren_char_index = 0\n    var paren_char_counts = []\n    var paren_char_indexes\
    \ = []\n    var paren_char_count = 0\n    var paren_char_index = 0\n    var paren_char_counts\
    \ = []\n    var paren_char_indexes = []\n    var paren_char_count = 0\n    var\
    \ paren_char_index = 0\n    var paren_char_counts = []\n    var paren_char_indexes\
    \ = []\n    var paren_char_count = 0\n    var paren_char_index = 0\n    var paren_char_counts\
    \ = []\n    var paren_char_indexes = []\n    var paren_char_count = 0\n    var\
    \ paren_char_index = 0\n    var paren_char_counts = []\n    var paren_char_indexes\
    \ = []\n    var paren_char_count = 0\n    var paren_char_index = 0\n    var paren_char_counts\
    \ = []\n    var paren_char_indexes = []\n    var paren_char_count = 0\n    var\
    \ paren_char_index = 0\n    var paren_char_counts = []\n    var paren_char_indexes\
    \ = []\n    var paren_char_count = 0\n    var paren_char_index = 0\n    var paren_char_counts\
    \ = []\n    var paren_char_indexes = []\n    var paren_char_count = 0\n    var\
    \ paren_char_index = 0\n    var paren_char_counts = []\n    var paren_char_indexes\
    \ = []\n    var paren_char_count = 0\n    var paren_char_index = 0\n    var paren_char_counts\
    \ = []\n    var paren_char_indexes = []\n    var paren_char_count = 0\n    var\
    \ paren_char_index = 0\n    var paren_char_counts = []\n    var paren_char_indexes\
    \ = []\n    var paren_char_count = 0\n    var paren_char_index = 0\n    var paren_char_counts\
    \ = []\n    var paren_char_indexes = []\n    var paren_char_count = 0\n    var\
    \ paren_char_index = 0\n    var paren_char_counts = []\n    var paren_char_indexes\
    \ = []\n    var paren_char_count = 0\n    var paren_char_index = 0\n    var paren_char_counts\
    \ = []\n    var paren_char_indexes = []\n    var paren_char_count = 0\n    var\
    \ paren_char_index = 0\n    var paren_char_counts = []\n    var paren_char_index\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpyy29292q.swift:10:23: error: empty collection literal requires\
    \ an explicit type\n    var paren_chars = []\n                      ^~\n/tmp/tmpyy29292q.swift:12:29:\
    \ error: empty collection literal requires an explicit type\n    var paren_char_counts\
    \ = []\n                            ^~\n/tmp/tmpyy29292q.swift:13:30: error: empty\
    \ collection literal requires an explicit type\n    var paren_char_indexes = []\n\
    \                             ^~\n/tmp/tmpyy29292q.swift:14:9: error: invalid\
    \ redeclaration of 'paren_char_count'\n    var paren_char_count = 0\n        ^\n\
    /tmp/tmpyy29292q.swift:9:9: note: 'paren_char_count' previously declared here\n\
    \    var paren_char_count = 0\n        ^\n/tmp/tmpyy29292q.swift:15:9: error:\
    \ invalid redeclaration of 'paren_char_index'\n    var paren_char_index = 0\n\
    \        ^\n/tmp/tmpyy29292q.swift:11:9: note: 'paren_char_index' previously declared\
    \ here\n    var paren_char_index = 0\n        ^\n/tmp/tmpyy29292q.swift:16:29:\
    \ error: empty collection literal requires an explicit type\n    var paren_char_counts\
    \ = []\n                            ^~\n/tmp/tmpyy29292q.swift:16:9: error: invalid\
    \ redeclaration of 'paren_char_counts'\n    var paren_char_counts = []\n     \
    \   ^\n/tmp/tmpyy29292q.swift:12:9: note: 'paren_char_counts' previously declared\
    \ here\n    var paren_char_counts = []\n        ^\n/tmp/tmpyy29292q.swift:17:30:\
    \ error: empty collection literal requires an explicit type\n    var paren_char_indexes\
    \ = []\n                             ^~\n/tmp/tmpyy29292q.swift:17:9: error: invalid\
    \ redeclaration of 'paren_char_indexes'\n    var paren_char_indexes = []\n   \
    \     ^\n/tmp/tmpyy29292q.swift:13:9: note: 'paren_char_indexes' previously declared\
    \ here\n    var paren_char_indexes = []\n        ^\n/tmp/tmpyy29292q.swift:18:9:\
    \ error: invalid redeclaration of 'paren_char_count'\n    var paren_char_count\
    \ = 0\n        ^\n/tmp/tmpyy29292q.swift:9:9: note: 'paren_char_count' previously\
    \ declared here\n    var paren_char_count = 0\n        ^\n/tmp/tmpyy29292q.swift:19:9:\
    \ error: invalid redeclaration of 'paren_char_index'\n    var paren_char_index\
    \ = "
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var max_level = 0\n    var level = 0\n    var paren_level =\
    \ 0\n    var paren_level_stack: [Int] = []\n    var paren_level_stack_index =\
    \ 0\n    var paren_level_stack_size = 0\n    var paren_level_stack_string = \"\
    \"\n    var paren_level_stack_string_index = 0\n    var paren_level_stack_string_size\
    \ = 0\n    var paren_level_stack_string_string = \"\"\n    var paren_level_stack_string_string_index\
    \ = 0\n    var paren_level_stack_string_string_size = 0\n    var paren_level_stack_string_string_string\
    \ = \"\"\n    var paren_level_stack_string_string_string_index = 0\n    var paren_level_stack_string_string_string_size\
    \ = 0\n    var paren_level_stack_string_string_string_string = \"\"\n    var paren_level_stack_string_string_string_index\
    \ = 0\n    var paren_level_stack_string_string_string_size = 0\n    var paren_level_stack_string_string_string_string\
    \ = \"\"\n    var paren_level_stack_string_string_string_index = 0\n    var paren_level_stack_string_string_string_size\
    \ = 0\n    var paren_level_stack_string_string_string_string = \"\"\n    var paren_level_stack_string_string_string_index\
    \ = 0\n    var paren_level_stack_string_string_string_size = 0\n    var paren_level_stack_string_string_string_string\
    \ = \"\"\n    var paren_level_stack_string_string_string_index = 0\n    var paren_level_stack_string_string_string_size\
    \ = 0\n    var paren_level_stack_string_string_string_string = \"\"\n    var paren_level_stack_string_string_string_index\
    \ = 0\n    var paren_level_stack_string_string_string_size = 0\n    var paren_level_stack_string_string_string_string\
    \ = \"\"\n    var paren_level_stack_string_string_string_index = 0\n    var paren_level_stack_string_string_string_size\
    \ = 0\n    var paren_level_stack_string_string_string_string = \"\"\n    var paren_level_stack_string_string_string_index\
    \ = 0\n    var paren_level_stack_string_string_string_size = 0\n    var paren_level_stack_string_string_string_string\
    \ = \"\"\n    var paren_level_stack_string_string_string_index = 0\n    var paren_level_stack_string_string_string_size\
    \ = 0\n    var paren_level_stack_string_string_string_string = \"\"\n    var paren_level_stack_string_string_string_index\
    \ = 0\n    var paren_level_stack_string_string_string_size = 0\n    var paren_level_stack_string_string_string_string\
    \ = \"\"\n    var paren_level_stack_string_string_string_index = 0\n    var paren_level_stack_string_string_string_size\
    \ = 0\n    var paren_level_stack_string_string_string_string = \"\"\n    var paren_level_stack_string_string_string_index\
    \ = 0\n    var paren_level_stack_string_string_string_size = 0\n    var paren_level_stack_string_string_string_string\
    \ = \"\"\n    var paren_level_stack_string_string_string_index = 0\n\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpfa1bbx97.swift:22:9: error: invalid redeclaration of 'paren_level_stack_string_string_string_index'\n\
    \    var paren_level_stack_string_string_string_index = 0\n        ^\n/tmp/tmpfa1bbx97.swift:19:9:\
    \ note: 'paren_level_stack_string_string_string_index' previously declared here\n\
    \    var paren_level_stack_string_string_string_index = 0\n        ^\n/tmp/tmpfa1bbx97.swift:23:9:\
    \ error: invalid redeclaration of 'paren_level_stack_string_string_string_size'\n\
    \    var paren_level_stack_string_string_string_size = 0\n        ^\n/tmp/tmpfa1bbx97.swift:20:9:\
    \ note: 'paren_level_stack_string_string_string_size' previously declared here\n\
    \    var paren_level_stack_string_string_string_size = 0\n        ^\n/tmp/tmpfa1bbx97.swift:24:9:\
    \ error: invalid redeclaration of 'paren_level_stack_string_string_string_string'\n\
    \    var paren_level_stack_string_string_string_string = \"\"\n        ^\n/tmp/tmpfa1bbx97.swift:21:9:\
    \ note: 'paren_level_stack_string_string_string_string' previously declared here\n\
    \    var paren_level_stack_string_string_string_string = \"\"\n        ^\n/tmp/tmpfa1bbx97.swift:25:9:\
    \ error: invalid redeclaration of 'paren_level_stack_string_string_string_index'\n\
    \    var paren_level_stack_string_string_string_index = 0\n        ^\n/tmp/tmpfa1bbx97.swift:19:9:\
    \ note: 'paren_level_stack_string_string_string_index' previously declared here\n\
    \    var paren_level_stack_string_string_string_index = 0\n        ^\n/tmp/tmpfa1bbx97.swift:26:9:\
    \ error: invalid redeclaration of 'paren_level_stack_string_string_string_size'\n\
    \    var paren_level_stack_string_string_string_size = 0\n        ^\n/tmp/tmpfa1bbx97.swift:20:9:\
    \ note: 'paren_level_stack_string_string_string_size' previously declared here\n\
    \    var paren_level_stack_string_string_string_size = 0\n        ^\n/tmp/tmpfa1bbx97.swift:27:9:\
    \ error: invalid redeclaration of 'paren_level_stack_string_string_string_string'\n\
    \    var paren_level_stack_string_string_string_string = \"\"\n        ^\n/tmp/tmpfa1bbx97.swift:21:9:\
    \ note: 'paren_level_stack_string_string_string_string' previously declared here\n\
    \    var paren_level"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    for ch in\
    \ paren_string.unicodeScalars {\n        if ch == '(' {\n            paren_count\
    \ += 1\n        } else if ch == ')' {\n            paren_count -= 1\n        \
    \    if paren_count == 0 {\n                levels.append(paren_count)\n     \
    \       }\n        }\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmplaqush6o.swift:9:18: error: single-quoted string literal found,\
    \ use '\"'\n        if ch == '(' {\n                 ^~~\n                 \"\
    (\"\n/tmp/tmplaqush6o.swift:11:25: error: single-quoted string literal found,\
    \ use '\"'\n        } else if ch == ')' {\n                        ^~~\n     \
    \                   \")\"\n"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_char = 0\n\
    \    var paren_char_count = 0\n    var paren_char_count_prev = 0\n    var paren_char_count_next\
    \ = 0\n    var paren_char_count_prev2 = 0\n    var paren_char_count_next2 = 0\n\
    \    var paren_char_count_prev3 = 0\n    var paren_char_count_next3 = 0\n    var\
    \ paren_char_count_prev4 = 0\n    var paren_char_count_next4 = 0\n    var paren_char_count_prev5\
    \ = 0\n    var paren_char_count_next5 = 0\n    var paren_char_count_prev6 = 0\n\
    \    var paren_char_count_next6 = 0\n    var paren_char_count_prev7 = 0\n    var\
    \ paren_char_count_next7 = 0\n    var paren_char_count_prev8 = 0\n    var paren_char_count_next8\
    \ = 0\n    var paren_char_count_prev9 = 0\n    var paren_char_count_next9 = 0\n\
    \    var paren_char_count_prev10 = 0\n    var paren_char_count_next10 = 0\n  \
    \  var paren_char_count_prev11 = 0\n    var paren_char_count_next11 = 0\n    var\
    \ paren_char_count_prev12 = 0\n    var paren_char_count_next12 = 0\n    var paren_char_count_prev13\
    \ = 0\n    var paren_char_count_next13 = 0\n    var paren_char_count_prev14 =\
    \ 0\n    var paren_char_count_next14 = 0\n    var paren_char_count_prev15 = 0\n\
    \    var paren_char_count_next15 = 0\n    var paren_char_count_prev16 = 0\n  \
    \  var paren_char_count_next16 = 0\n    var paren_char_count_prev17 = 0\n    var\
    \ paren_char_count_next17 = 0\n    var paren_char_count_prev18 = 0\n    var paren_char_count_next18\
    \ = 0\n    var paren_char_count_prev19 = 0\n    var paren_char_count_next19 =\
    \ 0\n    var paren_char_count_prev20 = 0\n    var paren_char_count_next20 = 0\n\
    \    var paren_char_count_prev21 = 0\n    var paren_char_count_next21 = 0\n  \
    \  var paren_char_count_prev22 = 0\n    var paren_char_count_next22 = 0\n    var\
    \ paren_char_count_prev23 = 0\n    var paren_char_count_next23 = 0\n    var paren_char_count_prev24\
    \ = 0\n    var paren_char_count_next24 = 0\n    var paren_char_count_prev25 =\
    \ 0\n    var paren_char_count_next25 = 0\n    var paren_char_count_prev26 = 0\n\
    \    var paren_char_count_next26 = 0\n    var paren_char_\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpnwg0wa4k.swift:65:9: error: type annotation missing in pattern\n\
    \    var paren_char_\n        ^\n"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpbyoklpki.swift:12:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmpbyoklpki.swift:8:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmpbyoklpki.swift:13:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmpbyoklpki.swift:9:9: note: 'paren_start' previously declared here\n\
    \    var paren_start = 0\n        ^\n/tmp/tmpbyoklpki.swift:14:9: error: invalid\
    \ redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmpbyoklpki.swift:10:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmpbyoklpki.swift:15:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmpbyoklpki.swift:11:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmpbyoklpki.swift:16:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmpbyoklpki.swift:8:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmpbyoklpki.swift:17:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmpbyoklpki.swift:9:9: note: 'paren_start' previously declared here\n\
    \    var paren_start = 0\n        ^\n/tmp/tmpbyoklpki.swift:18:9: error: invalid\
    \ redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmpbyoklpki.swift:10:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmpbyoklpki.swift:19:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmpbyoklpki.swift:11:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmpbyoklpki.swift:20:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmpbyoklpki.swift:8:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmpbyoklpki.swift:21:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var p"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpbyoklpki.swift:12:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmpbyoklpki.swift:8:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmpbyoklpki.swift:13:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmpbyoklpki.swift:9:9: note: 'paren_start' previously declared here\n\
    \    var paren_start = 0\n        ^\n/tmp/tmpbyoklpki.swift:14:9: error: invalid\
    \ redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmpbyoklpki.swift:10:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmpbyoklpki.swift:15:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmpbyoklpki.swift:11:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmpbyoklpki.swift:16:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmpbyoklpki.swift:8:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmpbyoklpki.swift:17:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmpbyoklpki.swift:9:9: note: 'paren_start' previously declared here\n\
    \    var paren_start = 0\n        ^\n/tmp/tmpbyoklpki.swift:18:9: error: invalid\
    \ redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmpbyoklpki.swift:10:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmpbyoklpki.swift:19:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmpbyoklpki.swift:11:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmpbyoklpki.swift:20:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmpbyoklpki.swift:8:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmpbyoklpki.swift:21:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var p"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_level_count = 0\n    var paren_level_start = 0\n    var paren_level_end\
    \ = 0\n    var paren_level_start = 0\n    var paren_level_end = 0\n    var paren_level_start\
    \ = 0\n    var paren_level_end = 0\n    var paren_level_start = 0\n    var paren_level_end\
    \ = 0\n    var paren_level_start = 0\n    var paren_level_end = 0\n    var paren_level_start\
    \ = 0\n    var paren_level_end = 0\n    var paren_level_start = 0\n    var paren_level_end\
    \ = 0\n    var paren_level_start = 0\n    var paren_level_end = 0\n    var paren_level_start\
    \ = 0\n    var paren_level_end = 0\n    var paren_level_start = 0\n    var paren_level_end\
    \ = 0\n    var paren_level_start = 0\n    var paren_level_end = 0\n    var paren_level_start\
    \ = 0\n    var paren_level_end = 0\n    var paren_level_start = 0\n    var paren_level_end\
    \ = 0\n    var paren_level_start = 0\n    var paren_level_end = 0\n    var paren_level_start\
    \ = 0\n    var paren_level_end = 0\n    var paren_level_start = 0\n    var paren_level_end\
    \ = 0\n    var paren_level_start = 0\n    var paren_level_end = 0\n    var paren_level_start\
    \ = 0\n    var paren_level_end = 0\n    var paren_level_start = 0\n    var paren_level_end\
    \ = 0\n    var paren_level_start = 0\n    var paren_level_end = 0\n    var paren_level_start\
    \ = 0\n    var paren_level_end = 0\n    var paren_level_start = 0\n    var paren_level_end\
    \ = 0\n    var paren_level_start = 0\n    var paren_level_end = 0\n    var paren_level_start\
    \ = 0\n    var paren_level_end = 0\n    var paren_level_start = 0\n    var paren_level_end\
    \ = 0\n    var paren_level_start = 0\n    var paren_level_end = 0\n    var paren_level_start\
    \ = 0\n    var paren_level_end = 0\n    var paren_level_start = 0\n    var paren_level_end\
    \ = 0\n    var paren_level_start = 0\n    var paren_level_end = 0\n    var paren_level_start\
    \ = 0\n    var paren_level_end = 0\n    var paren_level_start = 0\n    var paren_level_end\
    \ = 0\n    var paren_level_start = 0\n    var paren_level_end = 0\n    var paren_level_start\
    \ = 0\n    var paren_level_end = 0\n    var paren_level_start = 0\n    var paren\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpye4mdjz8.swift:15:9: error: invalid redeclaration of 'paren_level_start'\n\
    \    var paren_level_start = 0\n        ^\n/tmp/tmpye4mdjz8.swift:13:9: note:\
    \ 'paren_level_start' previously declared here\n    var paren_level_start = 0\n\
    \        ^\n/tmp/tmpye4mdjz8.swift:16:9: error: invalid redeclaration of 'paren_level_end'\n\
    \    var paren_level_end = 0\n        ^\n/tmp/tmpye4mdjz8.swift:14:9: note: 'paren_level_end'\
    \ previously declared here\n    var paren_level_end = 0\n        ^\n/tmp/tmpye4mdjz8.swift:17:9:\
    \ error: invalid redeclaration of 'paren_level_start'\n    var paren_level_start\
    \ = 0\n        ^\n/tmp/tmpye4mdjz8.swift:13:9: note: 'paren_level_start' previously\
    \ declared here\n    var paren_level_start = 0\n        ^\n/tmp/tmpye4mdjz8.swift:18:9:\
    \ error: invalid redeclaration of 'paren_level_end'\n    var paren_level_end =\
    \ 0\n        ^\n/tmp/tmpye4mdjz8.swift:14:9: note: 'paren_level_end' previously\
    \ declared here\n    var paren_level_end = 0\n        ^\n/tmp/tmpye4mdjz8.swift:19:9:\
    \ error: invalid redeclaration of 'paren_level_start'\n    var paren_level_start\
    \ = 0\n        ^\n/tmp/tmpye4mdjz8.swift:13:9: note: 'paren_level_start' previously\
    \ declared here\n    var paren_level_start = 0\n        ^\n/tmp/tmpye4mdjz8.swift:20:9:\
    \ error: invalid redeclaration of 'paren_level_end'\n    var paren_level_end =\
    \ 0\n        ^\n/tmp/tmpye4mdjz8.swift:14:9: note: 'paren_level_end' previously\
    \ declared here\n    var paren_level_end = 0\n        ^\n/tmp/tmpye4mdjz8.swift:21:9:\
    \ error: invalid redeclaration of 'paren_level_start'\n    var paren_level_start\
    \ = 0\n        ^\n/tmp/tmpye4mdjz8.swift:13:9: note: 'paren_level_start' previously\
    \ declared here\n    var paren_level_start = 0\n        ^\n/tmp/tmpye4mdjz8.swift:22:9:\
    \ error: invalid redeclaration of 'paren_level_end'\n    var paren_level_end =\
    \ 0\n        ^\n/tmp/tmpye4mdjz8.swift:14:9: note: 'paren_level_end' previously\
    \ declared here\n    var paren_level_end = 0\n        ^\n/tmp/tmpye4mdjz8.swift:23:9:\
    \ error: invalid redeclaration of 'paren_level_start'\n    var paren_level_start\
    \ = 0\n        ^\n/tmp/tmpye4mdjz8.swift:13:9: no"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    for c in\
    \ paren_string.unicodeScalars {\n        if c == paren_count {\n            levels[paren_count]\
    \ += 1\n        } else {\n            levels[paren_count] = 0\n            paren_count\
    \ = c\n        }\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpg80cw_rz.swift:9:14: error: referencing operator function '=='\
    \ on 'BinaryInteger' requires that 'Unicode.Scalar' conform to 'BinaryInteger'\n\
    \        if c == paren_count {\n             ^\nSwift.BinaryInteger:1:11: note:\
    \ where 'Self' = 'Unicode.Scalar'\nextension BinaryInteger {\n          ^\n/tmp/tmpg80cw_rz.swift:13:27:\
    \ error: cannot assign value of type 'Unicode.Scalar' to type 'Int'\n        \
    \    paren_count = c\n                          ^\n"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    for c in paren_string.unicodeScalars {\n \
    \       if paren_count == 0 {\n            levels.append(level)\n            paren_count\
    \ = 1\n            paren_level = 0\n        }\n        switch c {\n        case\
    \ ')':\n            paren_count--\n            if paren_count == 0 {\n       \
    \         levels.append(level)\n                levels.append(level)\n       \
    \         level = 0\n                paren_count = 0\n            }\n        case\
    \ ')':\n            paren_count--\n            if paren_count == 0 {\n       \
    \         levels.append(level)\n                levels.append(level)\n       \
    \         level = 0\n                paren_count = 0\n            }\n        case\
    \ ')':\n            paren_count--\n            if paren_count == 0 {\n       \
    \         levels.append(level)\n                levels.append(level)\n       \
    \         level = 0\n                paren_count = 0\n            }\n        default:\n\
    \            level++\n            paren_count++\n        }\n    }\n    return\
    \ levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp5_zk_z_4.swift:17:14: error: single-quoted string literal found,\
    \ use '\"'\n        case ')':\n             ^~~\n             \")\"\n/tmp/tmp5_zk_z_4.swift:25:14:\
    \ error: single-quoted string literal found, use '\"'\n        case ')':\n   \
    \          ^~~\n             \")\"\n/tmp/tmp5_zk_z_4.swift:33:14: error: single-quoted\
    \ string literal found, use '\"'\n        case ')':\n             ^~~\n      \
    \       \")\"\n/tmp/tmp5_zk_z_4.swift:18:24: error: cannot find operator '--'\
    \ in scope; did you mean '-= 1'?\n            paren_count--\n                \
    \       ^~\n/tmp/tmp5_zk_z_4.swift:26:24: error: cannot find operator '--' in\
    \ scope; did you mean '-= 1'?\n            paren_count--\n                   \
    \    ^~\n/tmp/tmp5_zk_z_4.swift:34:24: error: cannot find operator '--' in scope;\
    \ did you mean '-= 1'?\n            paren_count--\n                       ^~\n\
    /tmp/tmp5_zk_z_4.swift:42:18: error: cannot find operator '++' in scope; did you\
    \ mean '+= 1'?\n            level++\n                 ^~\n/tmp/tmp5_zk_z_4.swift:43:24:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  paren_count++\n                       ^~\n/tmp/tmp5_zk_z_4.swift:25:14: warning:\
    \ literal value is already handled by previous pattern; consider removing it\n\
    \        case ')':\n             ^~~\n/tmp/tmp5_zk_z_4.swift:17:14: note: first\
    \ occurrence of identical literal pattern is here\n        case ')':\n       \
    \      ^~~\n/tmp/tmp5_zk_z_4.swift:33:14: warning: literal value is already handled\
    \ by previous pattern; consider removing it\n        case ')':\n             ^~~\n\
    /tmp/tmp5_zk_z_4.swift:17:14: note: first occurrence of identical literal pattern\
    \ is here\n        case ')':\n             ^~~\n"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens = 0\n\
    \    var paren_level = 0\n    var paren_char = 0\n    var paren_char_count = 0\n\
    \    var paren_char_count_in_parens = 0\n    var paren_char_count_in_parens_after_parens\
    \ = 0\n    var paren_char_count_in_parens_after_parens_after_parens = 0\n    var\
    \ paren_char_count_in_parens_after_parens_after_parens = 0\n    var paren_char_count_in_parens_after_parens_after_parens_after_parens\
    \ = 0\n    var paren_char_count_in_parens_after_parens_after_parens_after_parens_after_parens\
    \ = 0\n    var paren_char_count_in_parens_after_parens_after_parens_after_parens_after_parens_after_parens\
    \ = 0\n    var paren_char_count_in_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens\
    \ = 0\n    var paren_char_count_in_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens\
    \ = 0\n    var paren_char_count_in_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens\
    \ = 0\n    var paren_char_count_in_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens\
    \ = 0\n    var paren_char_count_in_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens\
    \ = 0\n    var paren_char_count_in_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens\
    \ = 0\n    var paren_char_count_in_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens\
    \ = 0\n    var paren_char_count_in_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens\
    \ = 0\n    var paren_char_count_in_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens\
    \ = 0\n    var paren_char_count_in_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_paren\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpi77w1waa.swift:15:9: error: invalid redeclaration of 'paren_char_count_in_parens_after_parens_after_parens'\n\
    \    var paren_char_count_in_parens_after_parens_after_parens = 0\n        ^\n\
    /tmp/tmpi77w1waa.swift:14:9: note: 'paren_char_count_in_parens_after_parens_after_parens'\
    \ previously declared here\n    var paren_char_count_in_parens_after_parens_after_parens\
    \ = 0\n        ^\n/tmp/tmpi77w1waa.swift:23:9: error: invalid redeclaration of\
    \ 'paren_char_count_in_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens'\n\
    \    var paren_char_count_in_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens\
    \ = 0\n        ^\n/tmp/tmpi77w1waa.swift:22:9: note: 'paren_char_count_in_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens'\
    \ previously declared here\n    var paren_char_count_in_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens\
    \ = 0\n        ^\n/tmp/tmpi77w1waa.swift:26:9: error: invalid redeclaration of\
    \ 'paren_char_count_in_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens'\n\
    \    var paren_char_count_in_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens\
    \ = 0\n        ^\n/tmp/tmpi77w1waa.swift:25:9: note: 'paren_char_count_in_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens'\
    \ previously declared here\n    var paren_char_count_in_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens_after_parens\
    \ = 0\n        ^\n/tmp/tmpi77w1waa.swift:28:9: error: type annotation missing\
    \ in pattern\n  "
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_char_count = 0\n    var paren_char_level\
    \ = 0\n    var paren_char = \"\"\n    var paren_char_next = \"\"\n    var paren_char_prev\
    \ = \"\"\n    var paren_char_next2 = \"\"\n    var paren_char_prev2 = \"\"\n \
    \   var paren_char_next3 = \"\"\n    var paren_char_prev3 = \"\"\n    var paren_char_next4\
    \ = \"\"\n    var paren_char_prev4 = \"\"\n    var paren_char_next5 = \"\"\n \
    \   var paren_char_prev5 = \"\"\n    var paren_char_next6 = \"\"\n    var paren_char_prev6\
    \ = \"\"\n    var paren_char_next7 = \"\"\n    var paren_char_prev7 = \"\"\n \
    \   var paren_char_next8 = \"\"\n    var paren_char_prev8 = \"\"\n    var paren_char_next9\
    \ = \"\"\n    var paren_char_prev9 = \"\"\n    var paren_char_next10 = \"\"\n\
    \    var paren_char_prev10 = \"\"\n    var paren_char_next11 = \"\"\n    var paren_char_prev11\
    \ = \"\"\n    var paren_char_next12 = \"\"\n    var paren_char_prev12 = \"\"\n\
    \    var paren_char_next13 = \"\"\n    var paren_char_prev13 = \"\"\n    var paren_char_next14\
    \ = \"\"\n    var paren_char_prev14 = \"\"\n    var paren_char_next15 = \"\"\n\
    \    var paren_char_prev15 = \"\"\n    var paren_char_next16 = \"\"\n    var paren_char_prev16\
    \ = \"\"\n    var paren_char_next17 = \"\"\n    var paren_char_prev17 = \"\"\n\
    \    var paren_char_next18 = \"\"\n    var paren_char_prev18 = \"\"\n    var paren_char_next19\
    \ = \"\"\n    var paren_char_prev19 = \"\"\n    var paren_char_next20 = \"\"\n\
    \    var paren_char_prev20 = \"\"\n    var paren_char_next21 = \"\"\n    var paren_char_prev21\
    \ = \"\"\n    var paren_char_next22 = \"\"\n    var paren_char_prev22 = \"\"\n\
    \    var paren_char_next23 = \"\"\n    var paren_char_prev23 = \"\"\n    var paren_char_next24\
    \ = \"\"\n    var paren_char_prev24 = \"\"\n    var paren_char_next25 = \"\"\n\
    \    var paren_char_prev25 = \"\"\n    var paren_char_next26 = \"\"\n    var paren_char_prev26\
    \ = \"\"\n    var paren_char_next27 = \"\"\n    var paren_char_prev27 = \"\"\n\
    \    var paren_char_next28 = \"\"\n    var paren_char_prev28 = \"\"\n    var paren_char_next29\
    \ = \"\"\n    var paren_char_prev29 = \"\"\n    var paren_char_next30\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpm9_4pn3n.swift:71:9: error: type annotation missing in pattern\n\
    \    var paren_char_next30\n        ^\n"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_paren\
    \ = 0\n    var paren_level = 0\n    var paren_level_paren = 0\n    var paren_level_paren_paren\
    \ = 0\n    var paren_level_paren_paren_paren = 0\n    var paren_level_paren_paren_paren_paren\
    \ = 0\n    var paren_level_paren_paren_paren_paren_paren = 0\n    var paren_level_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_level_paren_paren_paren_paren_paren_paren_paren = 0\n   \
    \ var paren_level_paren_paren_paren_paren_paren_paren_paren_paren = 0\n    var\
    \ paren_level_paren_paren_paren_paren_paren_paren_paren_paren_paren = 0\n    var\
    \ paren_level_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren = 0\n\
    \    var paren_level_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_level_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_level_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_level_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_level_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_level_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_level_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_level_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_level_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n    var paren_level_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpktt93dfg.swift:23:9: error: invalid redeclaration of 'paren_level_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren'\n\
    \    var paren_level_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n        ^\n/tmp/tmpktt93dfg.swift:22:9: note: 'paren_level_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren'\
    \ previously declared here\n    var paren_level_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n        ^\n/tmp/tmpktt93dfg.swift:27:9: error: invalid redeclaration of\
    \ 'paren_level_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren'\n\
    \    var paren_level_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n        ^\n/tmp/tmpktt93dfg.swift:26:9: note: 'paren_level_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren'\
    \ previously declared here\n    var paren_level_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren\
    \ = 0\n        ^\n/tmp/tmpktt93dfg.swift:29:9: error: type annotation missing\
    \ in pattern\n    var paren_level_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var max_level = 0\n    var level = 0\n    var levels = [Int]()\n\
    \    var paren_count = 0\n    for ch in paren_string.characters {\n        if\
    \ ch == '(' {\n            paren_count += 1\n        } else if ch == ')' {\n \
    \           paren_count -= 1\n        }\n        if paren_count == 0 {\n     \
    \       levels.append(level)\n            if level > max_level {\n           \
    \     max_level = level\n            }\n            level = 0\n        }\n   \
    \     level += 1\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmphg2h2jt2.swift:11:18: error: single-quoted string literal found,\
    \ use '\"'\n        if ch == '(' {\n                 ^~~\n                 \"\
    (\"\n/tmp/tmphg2h2jt2.swift:13:25: error: single-quoted string literal found,\
    \ use '\"'\n        } else if ch == ')' {\n                        ^~~\n     \
    \                   \")\"\n/tmp/tmphg2h2jt2.swift:10:28: error: 'characters' is\
    \ unavailable: Please use String directly\n    for ch in paren_string.characters\
    \ {\n                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    for c in paren_string.unicodeScalars {\n        if paren_count == 0\
    \ {\n            levels.append(paren_level)\n        }\n        switch c {\n \
    \       case .OpenSquareBracket:\n            paren_count += 1\n        case .CloseSquareBracket:\n\
    \            paren_count -= 1\n        case .OpenParenthesis:\n            paren_level\
    \ += 1\n        case .CloseParenthesis:\n            paren_level -= 1\n      \
    \  }\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpbe_n4zlp.swift:14:15: error: type 'Unicode.Scalar' has no member\
    \ 'OpenSquareBracket'\n        case .OpenSquareBracket:\n             ~^~~~~~~~~~~~~~~~~\n\
    /tmp/tmpbe_n4zlp.swift:16:15: error: type 'Unicode.Scalar' has no member 'CloseSquareBracket'\n\
    \        case .CloseSquareBracket:\n             ~^~~~~~~~~~~~~~~~~~\n/tmp/tmpbe_n4zlp.swift:18:15:\
    \ error: type 'Unicode.Scalar' has no member 'OpenParenthesis'\n        case .OpenParenthesis:\n\
    \             ~^~~~~~~~~~~~~~~\n/tmp/tmpbe_n4zlp.swift:20:15: error: type 'Unicode.Scalar'\
    \ has no member 'CloseParenthesis'\n        case .CloseParenthesis:\n        \
    \     ~^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var max_level = 0\n    var level = 0\n    var paren_level =\
    \ 0\n    var paren_level_count = 0\n    var paren_level_char_count = 0\n    var\
    \ paren_level_char = \"\"\n    var paren_level_chars = []\n    var paren_level_char_index\
    \ = 0\n    var paren_level_char_indexes = []\n    var paren_level_char_indexes_count\
    \ = 0\n    var paren_level_char_indexes_index = 0\n    var paren_level_char_indexes_index\
    \ = 0\n    var paren_level_char_indexes_index = 0\n    var paren_level_char_indexes_index\
    \ = 0\n    var paren_level_char_indexes_index = 0\n    var paren_level_char_indexes_index\
    \ = 0\n    var paren_level_char_indexes_index = 0\n    var paren_level_char_indexes_index\
    \ = 0\n    var paren_level_char_indexes_index = 0\n    var paren_level_char_indexes_index\
    \ = 0\n    var paren_level_char_indexes_index = 0\n    var paren_level_char_indexes_index\
    \ = 0\n    var paren_level_char_indexes_index = 0\n    var paren_level_char_indexes_index\
    \ = 0\n    var paren_level_char_indexes_index = 0\n    var paren_level_char_indexes_index\
    \ = 0\n    var paren_level_char_indexes_index = 0\n    var paren_level_char_indexes_index\
    \ = 0\n    var paren_level_char_indexes_index = 0\n    var paren_level_char_indexes_index\
    \ = 0\n    var paren_level_char_indexes_index = 0\n    var paren_level_char_indexes_index\
    \ = 0\n    var paren_level_char_indexes_index = 0\n    var paren_level_char_indexes_index\
    \ = 0\n    var paren_level_char_indexes_index = 0\n    var paren_level_char_indexes_index\
    \ = 0\n    var paren_level_char_indexes_index = 0\n    var paren_level_char_indexes_index\
    \ = 0\n    var paren_level_char_indexes_index = 0\n    var paren_level_char_indexes_index\
    \ = 0\n    var paren_level_char_indexes_index = 0\n    var paren_level_char_indexes_index\
    \ = 0\n    var paren_level_char_indexes_index = 0\n    var paren_level_char_indexes_index\
    \ = 0\n    var paren_level_char_indexes_index = 0\n    var paren_level_char_indexes_index\
    \ = 0\n    var paren_level_char_indexes_index = 0\n    var paren_level_char_indexes_index\
    \ = 0\n    var paren_level_char_indexes_index = 0\n    var paren_level_char_indexes_index\
    \ = 0\n    var paren_level_char_indexes_index = 0\n    var paren_level_char_indexes_index\
    \ = 0\n    var paren_level_char_indexes_index = 0\n    var paren_level_char_indexes_index\
    \ = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpmofx422z.swift:12:29: error: empty collection literal requires\
    \ an explicit type\n    var paren_level_chars = []\n                         \
    \   ^~\n/tmp/tmpmofx422z.swift:14:36: error: empty collection literal requires\
    \ an explicit type\n    var paren_level_char_indexes = []\n                  \
    \                 ^~\n/tmp/tmpmofx422z.swift:17:9: error: invalid redeclaration\
    \ of 'paren_level_char_indexes_index'\n    var paren_level_char_indexes_index\
    \ = 0\n        ^\n/tmp/tmpmofx422z.swift:16:9: note: 'paren_level_char_indexes_index'\
    \ previously declared here\n    var paren_level_char_indexes_index = 0\n     \
    \   ^\n/tmp/tmpmofx422z.swift:18:9: error: invalid redeclaration of 'paren_level_char_indexes_index'\n\
    \    var paren_level_char_indexes_index = 0\n        ^\n/tmp/tmpmofx422z.swift:16:9:\
    \ note: 'paren_level_char_indexes_index' previously declared here\n    var paren_level_char_indexes_index\
    \ = 0\n        ^\n/tmp/tmpmofx422z.swift:19:9: error: invalid redeclaration of\
    \ 'paren_level_char_indexes_index'\n    var paren_level_char_indexes_index = 0\n\
    \        ^\n/tmp/tmpmofx422z.swift:16:9: note: 'paren_level_char_indexes_index'\
    \ previously declared here\n    var paren_level_char_indexes_index = 0\n     \
    \   ^\n/tmp/tmpmofx422z.swift:20:9: error: invalid redeclaration of 'paren_level_char_indexes_index'\n\
    \    var paren_level_char_indexes_index = 0\n        ^\n/tmp/tmpmofx422z.swift:16:9:\
    \ note: 'paren_level_char_indexes_index' previously declared here\n    var paren_level_char_indexes_index\
    \ = 0\n        ^\n/tmp/tmpmofx422z.swift:21:9: error: invalid redeclaration of\
    \ 'paren_level_char_indexes_index'\n    var paren_level_char_indexes_index = 0\n\
    \        ^\n/tmp/tmpmofx422z.swift:16:9: note: 'paren_level_char_indexes_index'\
    \ previously declared here\n    var paren_level_char_indexes_index = 0\n     \
    \   ^\n/tmp/tmpmofx422z.swift:22:9: error: invalid redeclaration of 'paren_level_char_indexes_index'\n\
    \    var paren_level_char_indexes_index = 0\n        ^\n/tmp/tmpmofx422z.swift:16:9:\
    \ note: 'paren_level_char_indexes_index' previously declared here\n    var paren_level_char_inde"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var paren_level = 0\n    var paren_nesting\
    \ = 0\n    var paren_nesting_level = 0\n    var paren_nesting_nesting = 0\n  \
    \  var paren_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_nesting_level = 0\n    var\
    \ paren_nesting_nesting_nesting_nesting_nesting_nesting = 0\n    var paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_nesting_nesting = 0\n   \
    \ var paren_nesting_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_nesting_level = 0\n    var\
    \ paren_nesting_nesting_nesting_nesting_nesting_nesting = 0\n    var paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_nesting = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_level\
    \ = 0\n    var paren_nesting_level = 0\n    var paren_level = 0\n    var paren_nesting\
    \ = 0\n    var paren_nesting_level = 0\n    var paren_nesting_nesting = 0\n  \
    \  var paren_nesting_nesting_level = 0\n    var paren_nesting_nesting_level =\
    \ 0\n    var paren_nesting_nesting_level = 0\n    var paren_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_level = 0\n    var paren_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_level = 0\n    var paren_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_level = 0\n    var paren_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_level = 0\n    var paren_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_level = 0\n    var paren_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_level = 0\n    var paren_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpxlryxuev.swift:19:9: error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_nesting_level'\n\
    \    var paren_nesting_nesting_nesting_nesting_nesting_level = 0\n        ^\n\
    /tmp/tmpxlryxuev.swift:17:9: note: 'paren_nesting_nesting_nesting_nesting_nesting_level'\
    \ previously declared here\n    var paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n        ^\n/tmp/tmpxlryxuev.swift:20:9: error: invalid redeclaration of\
    \ 'paren_nesting_nesting_nesting_nesting_nesting_nesting'\n    var paren_nesting_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n        ^\n/tmp/tmpxlryxuev.swift:18:9: note: 'paren_nesting_nesting_nesting_nesting_nesting_nesting'\
    \ previously declared here\n    var paren_nesting_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n        ^\n/tmp/tmpxlryxuev.swift:21:9: error: invalid redeclaration of\
    \ 'paren_nesting_nesting_nesting_nesting_nesting_level'\n    var paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n        ^\n/tmp/tmpxlryxuev.swift:17:9: note: 'paren_nesting_nesting_nesting_nesting_nesting_level'\
    \ previously declared here\n    var paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n        ^\n/tmp/tmpxlryxuev.swift:22:9: error: invalid redeclaration of\
    \ 'paren_nesting_nesting_nesting_nesting_nesting_nesting'\n    var paren_nesting_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n        ^\n/tmp/tmpxlryxuev.swift:18:9: note: 'paren_nesting_nesting_nesting_nesting_nesting_nesting'\
    \ previously declared here\n    var paren_nesting_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n        ^\n/tmp/tmpxlryxuev.swift:23:9: error: invalid redeclaration of\
    \ 'paren_nesting_nesting_nesting_nesting_nesting_level'\n    var paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n        ^\n/tmp/tmpxlryxuev.swift:17:9: note: 'paren_nesting_nesting_nesting_nesting_nesting_level'\
    \ previously declared here\n    var paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n        ^\n/tmp/tmpxlryxuev.swift:24:9: error: invalid redeclaration of\
    \ 'paren_nesting_nesting_nesting_nesting_nesting_nesting'\n    var paren_nesting_nesting_"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_level = 0\n    var paren_nesting\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_nestings = [Int]()\n    var\
    \ paren_level = 0\n    var paren_nesting = 0\n    var paren_levels = [Int]()\n\
    \    var paren_nestings = [Int]()\n    var paren_level = 0\n    var paren_nesting\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_nestings = [Int]()\n    var\
    \ paren_level = 0\n    var paren_nesting = 0\n    var paren_levels = [Int]()\n\
    \    var paren_nestings = [Int]()\n    var paren_level = 0\n    var paren_nesting\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_nestings = [Int]()\n    var\
    \ paren_level = 0\n    var paren_nesting = 0\n    var paren_levels = [Int]()\n\
    \    var paren_nestings = [Int]()\n    var paren_level = 0\n    var paren_nesting\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_nestings = [Int]()\n    var\
    \ paren_level = 0\n    var paren_nesting = 0\n    var paren_levels = [Int]()\n\
    \    var paren_nestings = [Int]()\n    var paren_level = 0\n    var paren_nesting\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_nestings = [Int]()\n    var\
    \ paren_level = 0\n    var paren_nesting = 0\n    var paren_levels = [Int]()\n\
    \    var paren_nestings = [Int]()\n    var paren_level = 0\n    var paren_nesting\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_nestings = [Int]()\n    var\
    \ paren_level = 0\n    var paren_nesting = 0\n    var paren_levels = [Int]()\n\
    \    var paren_nestings = [Int]()\n    var paren_level = 0\n    var paren_nesting\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_nestings = [Int]()\n    var\
    \ paren_level = 0\n    var paren_nesting = 0\n    var paren_levels = [Int]()\n\
    \    var paren_nestings = [Int]()\n    var paren_level = 0\n    var paren_nesting\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_nestings = [Int]()\n    var\
    \ paren_level = 0\n    var paren_nesting = 0\n    var paren_levels = [Int]()\n\
    \    var paren_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp85363y3a.swift:11:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp85363y3a.swift:7:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp85363y3a.swift:12:9:\
    \ error: invalid redeclaration of 'paren_nesting'\n    var paren_nesting = 0\n\
    \        ^\n/tmp/tmp85363y3a.swift:8:9: note: 'paren_nesting' previously declared\
    \ here\n    var paren_nesting = 0\n        ^\n/tmp/tmp85363y3a.swift:13:9: error:\
    \ invalid redeclaration of 'paren_levels'\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp85363y3a.swift:9:9: note: 'paren_levels' previously declared\
    \ here\n    var paren_levels = [Int]()\n        ^\n/tmp/tmp85363y3a.swift:14:9:\
    \ error: invalid redeclaration of 'paren_nestings'\n    var paren_nestings = [Int]()\n\
    \        ^\n/tmp/tmp85363y3a.swift:10:9: note: 'paren_nestings' previously declared\
    \ here\n    var paren_nestings = [Int]()\n        ^\n/tmp/tmp85363y3a.swift:15:9:\
    \ error: invalid redeclaration of 'paren_level'\n    var paren_level = 0\n   \
    \     ^\n/tmp/tmp85363y3a.swift:7:9: note: 'paren_level' previously declared here\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp85363y3a.swift:16:9: error: invalid\
    \ redeclaration of 'paren_nesting'\n    var paren_nesting = 0\n        ^\n/tmp/tmp85363y3a.swift:8:9:\
    \ note: 'paren_nesting' previously declared here\n    var paren_nesting = 0\n\
    \        ^\n/tmp/tmp85363y3a.swift:17:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmp85363y3a.swift:9:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp85363y3a.swift:18:9: error: invalid redeclaration of 'paren_nestings'\n\
    \    var paren_nestings = [Int]()\n        ^\n/tmp/tmp85363y3a.swift:10:9: note:\
    \ 'paren_nestings' previously declared here\n    var paren_nestings = [Int]()\n\
    \        ^\n/tmp/tmp85363y3a.swift:19:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp85363y3a.swift:7:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/t"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    for c in paren_string {\n        if c == '(' {\n            paren_count\
    \ += 1\n        } else if c == ')' {\n            paren_count -= 1\n         \
    \   if paren_count == 0 {\n                levels.append(paren_level)\n      \
    \      }\n        }\n        paren_level += c == '(' ? 1 : -1\n    }\n    return\
    \ levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpajjlzp9b.swift:10:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmpajjlzp9b.swift:12:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmpajjlzp9b.swift:18:29: error: single-quoted string literal\
    \ found, use '\"'\n        paren_level += c == '(' ? 1 : -1\n                \
    \            ^~~\n                            \"(\"\n"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    var paren_start = -1\n    var paren_end = -1\n    for index in 0..<paren_string.characters.count\
    \ {\n        let char = paren_string.characters[index]\n        switch char {\n\
    \        case \"(\":\n            paren_count += 1\n            paren_start =\
    \ index\n        case \"(\":\n            paren_count += 1\n        case \"(\"\
    :\n            paren_count += 1\n        case \"(\":\n            paren_count\
    \ += 1\n        case \"(\":\n            paren_count += 1\n        case \"(\"\
    :\n            paren_count += 1\n        case \"(\":\n            paren_count\
    \ += 1\n        case \"(\":\n            paren_count += 1\n        case \"(\"\
    :\n            paren_count += 1\n        case \"(\":\n            paren_count\
    \ += 1\n        case \"(\":\n            paren_count += 1\n        case \"(\"\
    :\n            paren_count += 1\n        case \"(\":\n            paren_count\
    \ += 1\n        case \"(\":\n            paren_count += 1\n        case \"(\"\
    :\n            paren_count += 1\n        case \"(\":\n            paren_count\
    \ += 1\n        case \"(\":\n            paren_count += 1\n        case \"(\"\
    :\n            paren_count += 1\n        case \"(\":\n            paren_count\
    \ += 1\n        case \"(\":\n            paren_count += 1\n        case \"(\"\
    :\n            paren_count += 1\n        case \"(\":\n            paren_count\
    \ += 1\n        case \"(\":\n            paren_count += 1\n        case \"(\"\
    :\n            paren_count += 1\n        case \"(\":\n            paren_count\
    \ += 1\n        case \"(\":\n            paren_count += 1\n        case \"(\"\
    :\n            paren_count += 1\n        case \"(\":\n            paren_count\
    \ += 1\n        case \"(\":\n            paren_count += 1\n        case \"(\"\
    :\n            paren_count += 1\n        case \"(\":\n            paren_count\
    \ += 1\n        case \"(\":\n            paren_count += 1\n        case \"(\"\
    :\n            paren_count += 1\n        case \"(\":\n            paren_count\
    \ += 1\n        case \"(\":\n            paren_count += 1\n        case \"(\"\
    :\n            paren_count += 1\n        case \"(\":\n            paren_count\
    \ += 1\n        case \"(\":\n            paren_count += 1\n        case \"(\"\
    :\n            paren_count += 1\n        case \"(\":\n            paren_count\
    \ += 1\n        case \"(\":\n            paren_count += 1\n        case \"(\"\
    :\n            paren_count += 1\n        case \"(\":\n            paren_count\
    \ += 1\n        case \"(\":\n            paren_count += 1\n        case \"(\"\
    :\n            paren_count += 1\n        case \"(\":\n            paren_count\
    \ += 1\n        case \"(\":\n            paren_count += 1\n        case \"(\"\
    :\n            paren_count += 1\n        case \"(\":\n            paren_count\
    \ += 1\n        case \"(\":\n            paren_count += 1\n        \n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp5grfa6yk.swift:133:67: error: expected '}' at end of brace statement\n\
    assert(parse_nested_parens(paren_string: \"(()(())((())))\") == [4])\n       \
    \                                                           ^\n/tmp/tmp5grfa6yk.swift:11:52:\
    \ note: to match this opening '{'\n    for index in 0..<paren_string.characters.count\
    \ {\n                                                   ^\n/tmp/tmp5grfa6yk.swift:133:67:\
    \ error: expected '}' at end of brace statement\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])\n                                              \
    \                    ^\n/tmp/tmp5grfa6yk.swift:5:57: note: to match this opening\
    \ '{'\nfunc parse_nested_parens(paren_string: String) -> [Int] {\n           \
    \                                             ^\n/tmp/tmp5grfa6yk.swift:11:35:\
    \ error: 'characters' is unavailable: Please use String directly\n    for index\
    \ in 0..<paren_string.characters.count {\n                                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp5grfa6yk.swift:12:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        let char = paren_string.characters[index]\n\
    \                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp5grfa6yk.swift:12:33: error: 'characters'\
    \ is unavailable: Please use String directly\n        let char = paren_string.characters[index]\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp5grfa6yk.swift:17:14: warning: literal value is already\
    \ handled by previous pattern; consider removing it\n        case \"(\":\n   \
    \          ^~~\n/tmp/tmp5grfa6yk.swift:14:14: note: first occurrence of identical\
    \ literal pattern is here\n        case \"(\":\n       "
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens = 0\n\
    \    for ch in paren_string.characters {\n        if ch == '(' {\n           \
    \ parens += 1\n            levels.append(level)\n        } else if ch == ')' {\n\
    \            levels[level] = parens\n            parens -= 1\n        }\n    \
    \    level += 1\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpggh2om1s.swift:10:18: error: single-quoted string literal found,\
    \ use '\"'\n        if ch == '(' {\n                 ^~~\n                 \"\
    (\"\n/tmp/tmpggh2om1s.swift:13:25: error: single-quoted string literal found,\
    \ use '\"'\n        } else if ch == ')' {\n                        ^~~\n     \
    \                   \")\"\n/tmp/tmpggh2om1s.swift:9:28: error: 'characters' is\
    \ unavailable: Please use String directly\n    for ch in paren_string.characters\
    \ {\n                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_level = 0\n    for ch in\
    \ paren_string.unicodeScalars {\n        switch ch {\n        case .LeftParenthesis:\n\
    \            paren_level++\n        case .RightParenthesis:\n            paren_level--\n\
    \        case .Space:\n            if paren_level == 0 {\n                levels.append(paren_level)\n\
    \            }\n        }\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpb2ccllj1.swift:10:15: error: type 'Unicode.Scalar' has no member\
    \ 'LeftParenthesis'\n        case .LeftParenthesis:\n             ~^~~~~~~~~~~~~~~\n\
    /tmp/tmpb2ccllj1.swift:12:15: error: type 'Unicode.Scalar' has no member 'RightParenthesis'\n\
    \        case .RightParenthesis:\n             ~^~~~~~~~~~~~~~~~\n/tmp/tmpb2ccllj1.swift:14:15:\
    \ error: type 'Unicode.Scalar' has no member 'Space'\n        case .Space:\n \
    \            ~^~~~~\n/tmp/tmpb2ccllj1.swift:11:24: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n            paren_level++\n           \
    \            ^~\n/tmp/tmpb2ccllj1.swift:13:24: error: cannot find operator '--'\
    \ in scope; did you mean '-= 1'?\n            paren_level--\n                \
    \       ^~\n"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var paren_level = 0\n    var paren_nesting\
    \ = 0\n    var paren_nesting_level = 0\n    var paren_nesting_nesting = 0\n  \
    \  var paren_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_nesting_level = 0\n    var\
    \ paren_nesting_nesting_nesting_nesting_nesting_nesting = 0\n    var paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_nesting_nesting = 0\n   \
    \ var paren_nesting_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_nesting_level = 0\n    var\
    \ paren_nesting_nesting_nesting_nesting_nesting_nesting = 0\n    var paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_nesting_nesting = 0\n   \
    \ var paren_nesting_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_nesting_level = 0\n    var\
    \ paren_nesting_nesting_nesting_nesting_nesting_nesting = 0\n    var paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_nesting_nesting = 0\n   \
    \ var paren_nesting_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp_nkxxfe0.swift:19:9: error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_nesting_level'\n\
    \    var paren_nesting_nesting_nesting_nesting_nesting_level = 0\n        ^\n\
    /tmp/tmp_nkxxfe0.swift:17:9: note: 'paren_nesting_nesting_nesting_nesting_nesting_level'\
    \ previously declared here\n    var paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n        ^\n/tmp/tmp_nkxxfe0.swift:20:9: error: invalid redeclaration of\
    \ 'paren_nesting_nesting_nesting_nesting_nesting_nesting'\n    var paren_nesting_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n        ^\n/tmp/tmp_nkxxfe0.swift:18:9: note: 'paren_nesting_nesting_nesting_nesting_nesting_nesting'\
    \ previously declared here\n    var paren_nesting_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n        ^\n/tmp/tmp_nkxxfe0.swift:21:9: error: invalid redeclaration of\
    \ 'paren_nesting_nesting_nesting_nesting_nesting_level'\n    var paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n        ^\n/tmp/tmp_nkxxfe0.swift:17:9: note: 'paren_nesting_nesting_nesting_nesting_nesting_level'\
    \ previously declared here\n    var paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n        ^\n/tmp/tmp_nkxxfe0.swift:22:9: error: invalid redeclaration of\
    \ 'paren_nesting_nesting_nesting_nesting_nesting_nesting'\n    var paren_nesting_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n        ^\n/tmp/tmp_nkxxfe0.swift:18:9: note: 'paren_nesting_nesting_nesting_nesting_nesting_nesting'\
    \ previously declared here\n    var paren_nesting_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n        ^\n/tmp/tmp_nkxxfe0.swift:23:9: error: invalid redeclaration of\
    \ 'paren_nesting_nesting_nesting_nesting_nesting_level'\n    var paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n        ^\n/tmp/tmp_nkxxfe0.swift:17:9: note: 'paren_nesting_nesting_nesting_nesting_nesting_level'\
    \ previously declared here\n    var paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n        ^\n/tmp/tmp_nkxxfe0.swift:24:9: error: invalid redeclaration of\
    \ 'paren_nesting_nesting_nesting_nesting_nesting_nesting'\n    var paren_nesting_nesting_"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp5hpkv_dr.swift:13:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp5hpkv_dr.swift:9:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp5hpkv_dr.swift:14:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmp5hpkv_dr.swift:10:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmp5hpkv_dr.swift:15:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmp5hpkv_dr.swift:11:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmp5hpkv_dr.swift:16:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmp5hpkv_dr.swift:12:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp5hpkv_dr.swift:17:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp5hpkv_dr.swift:9:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp5hpkv_dr.swift:18:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmp5hpkv_dr.swift:10:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmp5hpkv_dr.swift:19:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmp5hpkv_dr.swift:11:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmp5hpkv_dr.swift:20:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmp5hpkv_dr.swift:12:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp5hpkv_dr.swift:21:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp5hpkv_dr.swift:9:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp5hpkv_dr.swift:22:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_group\
    \ = 0\n    var max_level_group_count = 0\n    var paren_group = 0\n    var paren_group_count\
    \ = 0\n    var paren_group_level = 0\n    var paren_group_level_count = 0\n  \
    \  var paren_group_level_group = 0\n    var paren_group_level_group_count = 0\n\
    \    var paren_group_level_group_level = 0\n    var paren_group_level_group_level_count\
    \ = 0\n    var paren_group_level_group_level_group = 0\n    var paren_group_level_group_level_group_count\
    \ = 0\n    var paren_group_level_group_level_group_level = 0\n    var paren_group_level_group_level_group_level_count\
    \ = 0\n    var paren_group_level_group_level_group_level_group = 0\n    var paren_group_level_group_level_group_level_group_count\
    \ = 0\n    var paren_group_level_group_level_group_level_group_level = 0\n   \
    \ var paren_group_level_group_level_group_level_group_level_count = 0\n    var\
    \ paren_group_level_group_level_group_level_group_level_group = 0\n    var paren_group_level_group_level_group_level_group_level_count\
    \ = 0\n    var paren_group_level_group_level_group_level_group_level_group = 0\n\
    \    var paren_group_level_group_level_group_level_group_level_group_count = 0\n\
    \    var paren_group_level_group_level_group_level_group_level_group_level = 0\n\
    \    var paren_group_level_group_level_group_level_group_level_group_level_count\
    \ = 0\n    var paren_group_level_group_level_group_level_group_level_group_level_group\
    \ = 0\n    var paren_group_level_group_level_group_level_group_level_group_level_count\
    \ = 0\n    var paren_group_level_group_level_group_level_group_level_group_level_group\
    \ = 0\n    var paren_group_level_group_level_group_level_group_level_group_level_group_count\
    \ = 0\n    var paren_group_level_group_level_group_level_group_level_group_level_group_level\
    \ = 0\n    var paren_group_level_group_level_group_level_group_level_group_level_group_level_count\
    \ = 0\n    var paren_group_level_group_level_group_level_group_level_group_level_group_level_group\
    \ = 0\n    var paren_group_level_group_level_group_level_group_level_group_level_group_level_count\
    \ = 0\n    var paren_group_level_group_level_group_level_group_level_group_level_group_level\
    \ = 0\n    var paren_group_level_group_level_group_level_group_level_group_level_group_level_count\
    \ = 0\n    var paren_group_level_group_level_group_level_group_level_group_level_group_level_group\
    \ = 0\n    var paren_group_level_group_level_group_level_group_level_group_level_group_level_count\
    \ = 0\n    var paren_group_level_group_level_group_level_group_level_group_level_group_level_group\
    \ = 0\n    var paren_group_level_group_level_group_level_group_level_group_level_group_level_group_level_count\
    \ = 0\n    var paren_group_level_group_level_group_level_group_level_group_level_group_level_group_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp9xtkdn_t.swift:27:9: error: invalid redeclaration of 'paren_group_level_group_level_group_level_group_level_count'\n\
    \    var paren_group_level_group_level_group_level_group_level_count = 0\n   \
    \     ^\n/tmp/tmp9xtkdn_t.swift:25:9: note: 'paren_group_level_group_level_group_level_group_level_count'\
    \ previously declared here\n    var paren_group_level_group_level_group_level_group_level_count\
    \ = 0\n        ^\n/tmp/tmp9xtkdn_t.swift:28:9: error: invalid redeclaration of\
    \ 'paren_group_level_group_level_group_level_group_level_group'\n    var paren_group_level_group_level_group_level_group_level_group\
    \ = 0\n        ^\n/tmp/tmp9xtkdn_t.swift:26:9: note: 'paren_group_level_group_level_group_level_group_level_group'\
    \ previously declared here\n    var paren_group_level_group_level_group_level_group_level_group\
    \ = 0\n        ^\n/tmp/tmp9xtkdn_t.swift:33:9: error: invalid redeclaration of\
    \ 'paren_group_level_group_level_group_level_group_level_group_level_count'\n\
    \    var paren_group_level_group_level_group_level_group_level_group_level_count\
    \ = 0\n        ^\n/tmp/tmp9xtkdn_t.swift:31:9: note: 'paren_group_level_group_level_group_level_group_level_group_level_count'\
    \ previously declared here\n    var paren_group_level_group_level_group_level_group_level_group_level_count\
    \ = 0\n        ^\n/tmp/tmp9xtkdn_t.swift:34:9: error: invalid redeclaration of\
    \ 'paren_group_level_group_level_group_level_group_level_group_level_group'\n\
    \    var paren_group_level_group_level_group_level_group_level_group_level_group\
    \ = 0\n        ^\n/tmp/tmp9xtkdn_t.swift:32:9: note: 'paren_group_level_group_level_group_level_group_level_group_level_group'\
    \ previously declared here\n    var paren_group_level_group_level_group_level_group_level_group_level_group\
    \ = 0\n        ^\n/tmp/tmp9xtkdn_t.swift:39:9: error: invalid redeclaration of\
    \ 'paren_group_level_group_level_group_level_group_level_group_level_group_level_count'\n\
    \    var paren_group_level_group_level_group_level_group_level_group_level_group_level_count\
    \ = 0\n        ^\n/tmp/tmp9xtkdn_t.swift:37:9: note: 'paren_group_level_group_lev"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens = 0\n\
    \    for c in paren_string.unicodeScalars {\n        if c == '(' {\n         \
    \   levels[level] = parens\n            parens += 1\n        } else if c == ')'\
    \ {\n            levels[level] = parens\n            parens -= 1\n           \
    \ if parens == 0 {\n                levels[level] = -1\n                level\
    \ += 1\n            }\n        }\n    }\n    return levels\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp3xt_swyz.swift:10:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmp3xt_swyz.swift:13:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_level = 0\n    var paren_nesting\
    \ = 0\n    for index in 0..<paren_string.characters.count {\n        let char\
    \ = paren_string.characters[index]\n        if char == '(' {\n            paren_nesting\
    \ += 1\n            levels.append(paren_nesting)\n        } else if char == ')'\
    \ {\n            paren_nesting -= 1\n            if paren_nesting == 0 {\n   \
    \             levels.append(paren_level)\n            }\n        }\n    }\n  \
    \  return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmptdts1d8b.swift:11:20: error: single-quoted string literal found,\
    \ use '\"'\n        if char == '(' {\n                   ^~~\n               \
    \    \"(\"\n/tmp/tmptdts1d8b.swift:14:27: error: single-quoted string literal\
    \ found, use '\"'\n        } else if char == ')' {\n                         \
    \ ^~~\n                          \")\"\n/tmp/tmptdts1d8b.swift:9:35: error: 'characters'\
    \ is unavailable: Please use String directly\n    for index in 0..<paren_string.characters.count\
    \ {\n                                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmptdts1d8b.swift:10:20: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        let\
    \ char = paren_string.characters[index]\n                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmptdts1d8b.swift:10:33:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ char = paren_string.characters[index]\n                                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmptdts1d8b.swift:7:9:\
    \ warning: variable 'paren_level' was never mutated; consider changing to 'let'\
    \ constant\n    var paren_level = 0\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_char = 0\n    var paren_char_count\
    \ = 0\n    var paren_char_index = 0\n    var paren_char_length = 0\n    var paren_char_length_index\
    \ = 0\n    var paren_char_length_count = 0\n    var paren_char_length_index =\
    \ 0\n    var paren_char_length_count = 0\n    var paren_char_length_index = 0\n\
    \    var paren_char_length_count = 0\n    var paren_char_length_index = 0\n  \
    \  var paren_char_length_count = 0\n    var paren_char_length_index = 0\n    var\
    \ paren_char_length_count = 0\n    var paren_char_length_index = 0\n    var paren_char_length_count\
    \ = 0\n    var paren_char_length_index = 0\n    var paren_char_length_count =\
    \ 0\n    var paren_char_length_index = 0\n    var paren_char_length_count = 0\n\
    \    var paren_char_length_index = 0\n    var paren_char_length_count = 0\n  \
    \  var paren_char_length_index = 0\n    var paren_char_length_count = 0\n    var\
    \ paren_char_length_index = 0\n    var paren_char_length_count = 0\n    var paren_char_length_index\
    \ = 0\n    var paren_char_length_count = 0\n    var paren_char_length_index =\
    \ 0\n    var paren_char_length_count = 0\n    var paren_char_length_index = 0\n\
    \    var paren_char_length_count = 0\n    var paren_char_length_index = 0\n  \
    \  var paren_char_length_count = 0\n    var paren_char_length_index = 0\n    var\
    \ paren_char_length_count = 0\n    var paren_char_length_index = 0\n    var paren_char_length_count\
    \ = 0\n    var paren_char_length_index = 0\n    var paren_char_length_count =\
    \ 0\n    var paren_char_length_index = 0\n    var paren_char_length_count = 0\n\
    \    var paren_char_length_index = 0\n    var paren_char_length_count = 0\n  \
    \  var paren_char_length_index = 0\n    var paren_char_length_count = 0\n    var\
    \ paren_char_length_index = 0\n    var paren_char_length_count = 0\n    var paren_char_length_index\
    \ = 0\n    var paren_char_length_count = 0\n    var paren_char_length_index =\
    \ 0\n    var paren_char_length_count = 0\n    var paren_char_length_index = 0\n\
    \    var paren_char_length_count = 0\n    var paren_char_length_index = 0\n  \
    \  var paren_char_length_count = 0\n    var paren_char_length_index = 0\n    var\
    \ paren_char_length_count = 0\n    var paren_char_length_index = 0\n    var paren_char_length_count\
    \ = 0\n    var paren_char_length_index = 0\n    var paren_char_length_count =\
    \ 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpog0p8_ka.swift:72:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpog0p8_ka.swift:16:9: error: invalid redeclaration of 'paren_char_length_index'\n\
    \    var paren_char_length_index = 0\n        ^\n/tmp/tmpog0p8_ka.swift:14:9:\
    \ note: 'paren_char_length_index' previously declared here\n    var paren_char_length_index\
    \ = 0\n        ^\n/tmp/tmpog0p8_ka.swift:17:9: error: invalid redeclaration of\
    \ 'paren_char_length_count'\n    var paren_char_length_count = 0\n        ^\n\
    /tmp/tmpog0p8_ka.swift:15:9: note: 'paren_char_length_count' previously declared\
    \ here\n    var paren_char_length_count = 0\n        ^\n/tmp/tmpog0p8_ka.swift:18:9:\
    \ error: invalid redeclaration of 'paren_char_length_index'\n    var paren_char_length_index\
    \ = 0\n        ^\n/tmp/tmpog0p8_ka.swift:14:9: note: 'paren_char_length_index'\
    \ previously declared here\n    var paren_char_length_index = 0\n        ^\n/tmp/tmpog0p8_ka.swift:19:9:\
    \ error: invalid redeclaration of 'paren_char_length_count'\n    var paren_char_length_count\
    \ = 0\n        ^\n/tmp/tmpog0p8_ka.swift:15:9: note: 'paren_char_length_count'\
    \ previously declared here\n    var paren_char_length_count = 0\n        ^\n/tmp/tmpog0p8_ka.swift:20:9:\
    \ error: invalid redeclaration of 'paren_char_length_index'\n    var paren_char_length_index\
    \ = 0\n        ^\n/tmp/tmpog0p8_ka.swift:14:9: note: 'paren_char_length_index'\
    \ previously declared here\n    var paren_char_length_index = 0\n        ^\n/tmp/tmpog0p8_ka.swift:21:9:\
    \ error: invalid redeclaration of 'paren_char_length_count'\n    var paren_char_length_count\
    \ = 0\n        ^\n/tmp/tmpog0p8_ka.swift:15:9: note: 'paren_char_length_count'\
    \ previously declared here\n    var paren_char_length_count = 0\n        ^\n/tmp/tmpog0p8_ka.swift:22:9:\
    \ error: invalid redeclaration of 'paren_char_length_index'\n    var paren_char_length_index\
    \ = 0\n        ^\n/tmp/tmpog0p8_ka.swift:14:9: note: 'paren_char_length_index'\
    \ previously declared here\n    var paren_char_length_index = 0\n        ^\n/tmp/tmpog0p8_ka.swift:23:9:\
    \ error: invalid redeclaration of 'paren_char_length_count'\n    var paren_char_length_count\
    \ = 0"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens = 0\n\
    \    for c in paren_string.characters {\n        if c == '(' {\n            levels[level]\
    \ = parens\n            level += 1\n            parens += 1\n        } else if\
    \ c == ')' {\n            levels[level] = parens\n            level -= 1\n   \
    \         parens -= 1\n        } else {\n            levels[level] = parens\n\
    \        }\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpxcglquv6.swift:10:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmpxcglquv6.swift:14:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmpxcglquv6.swift:9:27: error: 'characters' is unavailable:\
    \ Please use String directly\n    for c in paren_string.characters {\n       \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level_stack = [Int]()\n    var paren_level_stack_index\
    \ = 0\n    var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n\
    \    var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n   \
    \ var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n    var\
    \ paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n    var paren_level_stack_size\
    \ = 0\n    var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n\
    \    var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n   \
    \ var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n    var\
    \ paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n    var paren_level_stack_index\
    \ = 0\n    var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n\
    \    var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n   \
    \ var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n    var\
    \ paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n    var paren_level_stack_size\
    \ = 0\n    var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n\
    \    var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n   \
    \ var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n    var\
    \ paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n    var paren_level_stack_index\
    \ = 0\n    var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n\
    \    var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n   \
    \ var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n    var\
    \ paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n    var paren_level_stack_size\
    \ = 0\n    var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n\
    \    var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n   \
    \ var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n    var\
    \ paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n    var paren_level_stack_index\
    \ = 0\n    var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n\
    \    var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n   \
    \ var paren_level_stack_size = 0\n    var paren_\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp_4mtlh0r.swift:12:9: error: invalid redeclaration of 'paren_level_stack_index'\n\
    \    var paren_level_stack_index = 0\n        ^\n/tmp/tmp_4mtlh0r.swift:10:9:\
    \ note: 'paren_level_stack_index' previously declared here\n    var paren_level_stack_index\
    \ = 0\n        ^\n/tmp/tmp_4mtlh0r.swift:13:9: error: invalid redeclaration of\
    \ 'paren_level_stack_size'\n    var paren_level_stack_size = 0\n        ^\n/tmp/tmp_4mtlh0r.swift:11:9:\
    \ note: 'paren_level_stack_size' previously declared here\n    var paren_level_stack_size\
    \ = 0\n        ^\n/tmp/tmp_4mtlh0r.swift:14:9: error: invalid redeclaration of\
    \ 'paren_level_stack_index'\n    var paren_level_stack_index = 0\n        ^\n\
    /tmp/tmp_4mtlh0r.swift:10:9: note: 'paren_level_stack_index' previously declared\
    \ here\n    var paren_level_stack_index = 0\n        ^\n/tmp/tmp_4mtlh0r.swift:15:9:\
    \ error: invalid redeclaration of 'paren_level_stack_size'\n    var paren_level_stack_size\
    \ = 0\n        ^\n/tmp/tmp_4mtlh0r.swift:11:9: note: 'paren_level_stack_size'\
    \ previously declared here\n    var paren_level_stack_size = 0\n        ^\n/tmp/tmp_4mtlh0r.swift:16:9:\
    \ error: invalid redeclaration of 'paren_level_stack_index'\n    var paren_level_stack_index\
    \ = 0\n        ^\n/tmp/tmp_4mtlh0r.swift:10:9: note: 'paren_level_stack_index'\
    \ previously declared here\n    var paren_level_stack_index = 0\n        ^\n/tmp/tmp_4mtlh0r.swift:17:9:\
    \ error: invalid redeclaration of 'paren_level_stack_size'\n    var paren_level_stack_size\
    \ = 0\n        ^\n/tmp/tmp_4mtlh0r.swift:11:9: note: 'paren_level_stack_size'\
    \ previously declared here\n    var paren_level_stack_size = 0\n        ^\n/tmp/tmp_4mtlh0r.swift:18:9:\
    \ error: invalid redeclaration of 'paren_level_stack_index'\n    var paren_level_stack_index\
    \ = 0\n        ^\n/tmp/tmp_4mtlh0r.swift:10:9: note: 'paren_level_stack_index'\
    \ previously declared here\n    var paren_level_stack_index = 0\n        ^\n/tmp/tmp_4mtlh0r.swift:19:9:\
    \ error: invalid redeclaration of 'paren_level_stack_size'\n    var paren_level_stack_size\
    \ = 0\n        ^\n/tmp/tmp_4mtlh0r.swift:11:9: note: 'paren_level_stack_size'\
    \ previously dec"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_level = 0\n    var paren_nesting\
    \ = 0\n    for c in paren_string.unicodeScalars {\n        if paren_nesting ==\
    \ 0 {\n            levels.append(paren_level)\n        }\n        if paren_nesting\
    \ == 1 && paren_level == 0 {\n            levels.append(paren_level)\n       \
    \ }\n        if paren_nesting == 1 && paren_level == 1 {\n            levels.append(paren_level)\n\
    \        }\n        if paren_nesting == 2 && paren_level == 0 {\n            levels.append(paren_level)\n\
    \        }\n        if paren_nesting == 2 && paren_level == 1 {\n            levels.append(paren_level)\n\
    \        }\n        if paren_nesting == 3 && paren_level == 0 {\n            levels.append(paren_level)\n\
    \        }\n        if paren_nesting == 3 && paren_level == 1 {\n            levels.append(paren_level)\n\
    \        }\n        if paren_nesting == 3 && paren_level == 2 {\n            levels.append(paren_level)\n\
    \        }\n        if paren_nesting == 4 && paren_level == 0 {\n            levels.append(paren_level)\n\
    \        }\n        if paren_nesting == 4 && paren_level == 1 {\n            levels.append(paren_level)\n\
    \        }\n        if paren_nesting == 4 && paren_level == 2 {\n            levels.append(paren_level)\n\
    \        }\n        if paren_nesting == 4 && paren_level == 3 {\n            levels.append(paren_level)\n\
    \        }\n        if paren_nesting == 4 && paren_level == 4 {\n            levels.append(paren_level)\n\
    \        }\n        if paren_nesting == 5 && paren_level == 0 {\n            levels.append(paren_level)\n\
    \        }\n        if paren_nesting == 5 && paren_level == 1 {\n            levels.append(paren_level)\n\
    \        }\n        if paren_nesting == 5 && paren_level == 2 {\n            levels.append(paren_level)\n\
    \        }\n        if paren_nesting == 5 && paren_level == 3 {\n            levels.append(paren_level)\n\
    \        }\n        if paren_nesting == 5 && paren_level == 4 {\n            levels.append(paren_level)\n\
    \        }\n        if paren_nesting == 6 && paren_level == 0 {\n            levels.append(paren_level)\n\
    \        }\n        if paren_nesting == 6 && paren_level == 1 {\n            levels.append(paren_level)\n\
    \        }\n        if paren_nesting == 6 && paren_level == 2 {\n            levels.append(paren_level)\n\
    \        }\n        if paren_nesting == 6 && paren_\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmphu6149lb.swift:73:40: error: expected '{' after 'if' condition\n\
    \        if paren_nesting == 6 && paren_\n                                   \
    \    ^\n/tmp/tmphu6149lb.swift:91:67: error: expected '}' at end of brace statement\n\
    assert(parse_nested_parens(paren_string: \"(()(())((())))\") == [4])\n       \
    \                                                           ^\n/tmp/tmphu6149lb.swift:5:57:\
    \ note: to match this opening '{'\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n                                                        ^\n/tmp/tmphu6149lb.swift:73:34:\
    \ error: cannot find 'paren_' in scope\n        if paren_nesting == 6 && paren_\n\
    \                                 ^~~~~~\n/tmp/tmphu6149lb.swift:77:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    for c in paren_string.characters {\n     \
    \   if c == '(' {\n            paren_count += 1\n            levels.append(paren_level)\n\
    \            paren_level = 0\n        } else if c == ')' {\n            paren_count\
    \ -= 1\n            if paren_count < 0 {\n                paren_level += paren_level\n\
    \                levels.append(paren_level)\n            }\n        }\n    }\n\
    \    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp6_f72wjp.swift:11:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmp6_f72wjp.swift:15:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmp6_f72wjp.swift:10:27: error: 'characters' is unavailable:\
    \ Please use String directly\n    for c in paren_string.characters {\n       \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp6_f72wjp.swift:9:9: warning: initialization of variable 'paren_start'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_start = 0\n    ~~~~^~~~~~~~~~~\n    _\n"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_levels_len = 0\n    var paren_levels_lens = [Int]()\n\
    \    var paren_levels_lens_len = 0\n    var paren_levels_lens_lens = [Int]()\n\
    \    var paren_levels_lens_lens_len = 0\n    var paren_levels_lens_lens_lens =\
    \ [Int]()\n    var paren_levels_lens_lens_lens_len = 0\n    var paren_levels_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_len = 0\n    var paren_levels_lens_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_len = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_lens_len = 0\n    var\
    \ paren_levels_lens_lens_lens_lens_lens_lens_lens = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_len\
    \ = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens = [Int]()\n\
    \    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_len = 0\n    var\
    \ paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens = [Int]()\n    var\
    \ paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_len = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\
    \ = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpmdw_sjlv.swift:32:9: error: type annotation missing in pattern\n\
    \    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var paren_level =\
    \ 0\n    var paren_max_level = 0\n    var paren_stack = [Int]()\n    var paren_stack_size\
    \ = 0\n    var paren_stack_max_size = 0\n    var paren_stack_max_level = 0\n \
    \   var paren_stack_max_level_num = 0\n    var paren_stack_max_level_num_index\
    \ = 0\n    var paren_stack_max_level_num_index2 = 0\n    var paren_stack_max_level_num_index3\
    \ = 0\n    var paren_stack_max_level_num_index4 = 0\n    var paren_stack_max_level_num_index5\
    \ = 0\n    var paren_stack_max_level_num_index6 = 0\n    var paren_stack_max_level_num_index7\
    \ = 0\n    var paren_stack_max_level_num_index8 = 0\n    var paren_stack_max_level_num_index9\
    \ = 0\n    var paren_stack_max_level_num_index10 = 0\n    var paren_stack_max_level_num_index11\
    \ = 0\n    var paren_stack_max_level_num_index12 = 0\n    var paren_stack_max_level_num_index13\
    \ = 0\n    var paren_stack_max_level_num_index14 = 0\n    var paren_stack_max_level_num_index15\
    \ = 0\n    var paren_stack_max_level_num_index16 = 0\n    var paren_stack_max_level_num_index17\
    \ = 0\n    var paren_stack_max_level_num_index18 = 0\n    var paren_stack_max_level_num_index19\
    \ = 0\n    var paren_stack_max_level_num_index20 = 0\n    var paren_stack_max_level_num_index21\
    \ = 0\n    var paren_stack_max_level_num_index22 = 0\n    var paren_stack_max_level_num_index23\
    \ = 0\n    var paren_stack_max_level_num_index24 = 0\n    var paren_stack_max_level_num_index25\
    \ = 0\n    var paren_stack_max_level_num_index26 = 0\n    var paren_stack_max_level_num_index27\
    \ = 0\n    var paren_stack_max_level_num_index28 = 0\n    var paren_stack_max_level_num_index29\
    \ = 0\n    var paren_stack_max_level_num_index30 = 0\n    var paren_stack_max_level_num_index31\
    \ = 0\n    var paren_stack_max_level_num_index32 = 0\n    var paren_stack_max_level_num_index33\
    \ = 0\n    var paren_stack_max_level_num_index34 = 0\n    var paren_stack_max_level_num_index35\
    \ = 0\n    var paren_stack_max_level_num_index36 = 0\n    var paren_stack_max_level_num_index37\
    \ = 0\n    var paren_stack_max_level_num_index38 = 0\n    var paren_stack_max_level_num_index39\
    \ = 0\n    var paren_stack_max_level_num_index40 = 0\n    var paren_stack_max_level_num_index41\
    \ = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpxwqbrui7.swift:6:9: warning: initialization of variable 'level'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var level = 0\n    ~~~~^~~~~\n    _\n/tmp/tmpxwqbrui7.swift:7:9: warning:\
    \ initialization of variable 'max_level' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var max_level = 0\n    ~~~~^~~~~~~~~\n\
    \    _\n/tmp/tmpxwqbrui7.swift:8:9: warning: initialization of variable 'paren_level'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_level = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpxwqbrui7.swift:9:9:\
    \ warning: initialization of variable 'paren_max_level' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_max_level = 0\n\
    \    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpxwqbrui7.swift:10:9: warning: initialization\
    \ of variable 'paren_stack' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var paren_stack = [Int]()\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpxwqbrui7.swift:11:9: warning: initialization of variable 'paren_stack_size'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_stack_size = 0\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpxwqbrui7.swift:12:9:\
    \ warning: initialization of variable 'paren_stack_max_size' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_stack_max_size\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpxwqbrui7.swift:13:9: warning:\
    \ initialization of variable 'paren_stack_max_level' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_stack_max_level\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpxwqbrui7.swift:14:9: warning:\
    \ initialization of variable 'paren_stack_max_level_num' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_stack_max_level_num\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpxwqbrui7.swift:15:9:\
    \ warning: initialization of variable 'paren_stack_max_level_num_index' was never\
    \ used; consider re"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_levels_count = 0\n    var\
    \ paren_levels_count_max = 0\n    var paren_levels_count_min = 0\n    var paren_levels_count_max2\
    \ = 0\n    var paren_levels_count_min2 = 0\n    var paren_levels_count_max3 =\
    \ 0\n    var paren_levels_count_min3 = 0\n    var paren_levels_count_max4 = 0\n\
    \    var paren_levels_count_min4 = 0\n    var paren_levels_count_max5 = 0\n  \
    \  var paren_levels_count_min5 = 0\n    var paren_levels_count_max6 = 0\n    var\
    \ paren_levels_count_min6 = 0\n    var paren_levels_count_max7 = 0\n    var paren_levels_count_min7\
    \ = 0\n    var paren_levels_count_max8 = 0\n    var paren_levels_count_min8 =\
    \ 0\n    var paren_levels_count_max9 = 0\n    var paren_levels_count_min9 = 0\n\
    \    var paren_levels_count_max10 = 0\n    var paren_levels_count_min10 = 0\n\
    \    var paren_levels_count_max11 = 0\n    var paren_levels_count_min11 = 0\n\
    \    var paren_levels_count_max12 = 0\n    var paren_levels_count_min12 = 0\n\
    \    var paren_levels_count_max13 = 0\n    var paren_levels_count_min13 = 0\n\
    \    var paren_levels_count_max14 = 0\n    var paren_levels_count_min14 = 0\n\
    \    var paren_levels_count_max15 = 0\n    var paren_levels_count_min15 = 0\n\
    \    var paren_levels_count_max16 = 0\n    var paren_levels_count_min16 = 0\n\
    \    var paren_levels_count_max17 = 0\n    var paren_levels_count_min17 = 0\n\
    \    var paren_levels_count_max18 = 0\n    var paren_levels_count_min18 = 0\n\
    \    var paren_levels_count_max19 = 0\n    var paren_levels_count_min19 = 0\n\
    \    var paren_levels_count_max20 = 0\n    var paren_levels_count_min20 = 0\n\
    \    var paren_levels_count_max21 = 0\n    var paren_levels_count_min21 = 0\n\
    \    var paren_levels_count_max22 = 0\n    var paren_levels_count_min22 = 0\n\
    \    var paren_levels_count_max23 = 0\n    var paren_levels_count_min23 = 0\n\
    \    var paren_levels_count_max24 = 0\n    var paren_levels_count_min24 = 0\n\
    \    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpqqr_q4tq.swift:59:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpqqr_q4tq.swift:6:9: warning: initialization of variable 'level' was\
    \ never used; consider replacing with assignment to '_' or removing it\n    var\
    \ level = 0\n    ~~~~^~~~~\n    _\n/tmp/tmpqqr_q4tq.swift:7:9: warning: initialization\
    \ of variable 'levels' was never used; consider replacing with assignment to '_'\
    \ or removing it\n    var levels = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmpqqr_q4tq.swift:8:9:\
    \ warning: initialization of variable 'paren_level' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var paren_level = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpqqr_q4tq.swift:9:9: warning: initialization of variable 'paren_levels'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_levels = [Int]()\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpqqr_q4tq.swift:10:9:\
    \ warning: initialization of variable 'paren_levels_count' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_levels_count\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpqqr_q4tq.swift:11:9: warning:\
    \ initialization of variable 'paren_levels_count_max' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_levels_count_max\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpqqr_q4tq.swift:12:9: warning:\
    \ initialization of variable 'paren_levels_count_min' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_levels_count_min\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpqqr_q4tq.swift:13:9: warning:\
    \ initialization of variable 'paren_levels_count_max2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_levels_count_max2\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpqqr_q4tq.swift:14:9: warning:\
    \ initialization of variable 'paren_levels_count_min2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_levels_count_min2\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpqqr_q4tq.swift"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_level = 0\n    for c in\
    \ paren_string.unicodeScalars {\n        if paren_level == 0 && c == '(' {\n \
    \           levels.append(paren_level)\n            paren_level++\n        } else\
    \ if paren_level > 0 && paren_level == levels[levels.count - 1] {\n          \
    \  levels.append(paren_level)\n            paren_level++\n        } else if paren_level\
    \ > 0 && paren_level < levels[levels.count - 1] {\n            levels.append(paren_level)\n\
    \            paren_level++\n        } else {\n            levels.append(paren_level)\n\
    \            paren_level = 0\n        }\n    }\n    return levels\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp34jm95ks.swift:9:37: error: single-quoted string literal found,\
    \ use '\"'\n        if paren_level == 0 && c == '(' {\n                      \
    \              ^~~\n                                    \"(\"\n/tmp/tmp34jm95ks.swift:11:24:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  paren_level++\n                       ^~\n/tmp/tmp34jm95ks.swift:14:24: error:\
    \ cannot find operator '++' in scope; did you mean '+= 1'?\n            paren_level++\n\
    \                       ^~\n/tmp/tmp34jm95ks.swift:17:24: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n            paren_level++\n           \
    \            ^~\n"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    for c in paren_string.characters {\n     \
    \   if c == '(' {\n            paren_count += 1\n            levels.append(paren_level)\n\
    \            paren_level = 0\n        } else if c == ')' {\n            paren_count\
    \ -= 1\n            if paren_count < 0 {\n                throw Error::new(ErrorKind::UnbalancedParenthesis,\
    \ paren_string)\n            }\n            levels.append(paren_level)\n     \
    \       paren_level = 0\n        } else {\n            paren_level += 1\n    \
    \    }\n    }\n    levels.append(paren_level)\n    return levels\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp73qtjmh3.swift:11:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmp73qtjmh3.swift:15:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmp73qtjmh3.swift:18:28: error: consecutive statements on\
    \ a line must be separated by ';'\n                throw Error::new(ErrorKind::UnbalancedParenthesis,\
    \ paren_string)\n                           ^\n                           ;\n\
    /tmp/tmp73qtjmh3.swift:18:28: error: expected expression\n                throw\
    \ Error::new(ErrorKind::UnbalancedParenthesis, paren_string)\n               \
    \            ^\n/tmp/tmp73qtjmh3.swift:10:27: error: 'characters' is unavailable:\
    \ Please use String directly\n    for c in paren_string.characters {\n       \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp73qtjmh3.swift:18:23: error: thrown expression type '(any Error).Type'\
    \ does not conform to 'Error'\n                throw Error::new(ErrorKind::UnbalancedParenthesis,\
    \ paren_string)\n                      ^~~~~\n/tmp/tmp73qtjmh3.swift:18:17: error:\
    \ error is not handled because the enclosing function is not declared 'throws'\n\
    \                throw Error::new(ErrorKind::UnbalancedParenthesis, paren_string)\n\
    \                ^\n"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var level\
    \ = 0\n    for c in paren_string.characters {\n        if c == '(' {\n       \
    \     paren_count += 1\n            levels.append(level)\n        } else if c\
    \ == ')' {\n            paren_count -= 1\n            if paren_count == 0 {\n\
    \                levels.append(level)\n            }\n        }\n        level\
    \ += 1\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpm2xviikf.swift:10:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmpm2xviikf.swift:13:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmpm2xviikf.swift:9:27: error: 'characters' is unavailable:\
    \ Please use String directly\n    for c in paren_string.characters {\n       \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_char = 0\n    var paren_char_count = 0\n    var paren_char_level\
    \ = 0\n    var paren_char_start = 0\n    var paren_char_end = 0\n    var paren_char_char\
    \ = 0\n    var paren_char_char_count = 0\n    var paren_char_char_level = 0\n\
    \    var paren_char_char_start = 0\n    var paren_char_char_end = 0\n    var paren_char_char_char\
    \ = 0\n    var paren_char_char_char_count = 0\n    var paren_char_char_char_level\
    \ = 0\n    var paren_char_char_char_start = 0\n    var paren_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char = 0\n    var paren_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_level = 0\n    var paren_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_end = 0\n    var paren_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_char_char_end = 0\n    var paren_char_char_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_level = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_start = 0\n\
    \    var paren_char_char_char_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpdxi2onuc.swift:56:9: error: type annotation missing in pattern\n\
    \    var paren_char_char_char_\n        ^\n"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_open = 0\n    var paren_close = 0\n    var paren_nest = 0\n\
    \    var paren_nesting = 0\n    var paren_nesting_level = 0\n    var paren_nesting_open\
    \ = 0\n    var paren_nesting_close = 0\n    var paren_nesting_nest = 0\n    var\
    \ paren_nesting_nesting = 0\n    var paren_nesting_nesting_level = 0\n    var\
    \ paren_nesting_nesting_open = 0\n    var paren_nesting_nesting_close = 0\n  \
    \  var paren_nesting_nesting_nest = 0\n    var paren_nesting_nesting_nesting =\
    \ 0\n    var paren_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_open\
    \ = 0\n    var paren_nesting_nesting_nesting_close = 0\n    var paren_nesting_nesting_nesting_nest\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_open = 0\n    var paren_nesting_nesting_nesting_nesting_close\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_nest = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_open = 0\n    var paren_nesting_nesting_nesting_nesting_close\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_nest = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_open = 0\n    var paren_nesting_nesting_nesting_nesting_close\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_nest = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_open = 0\n    var paren_nesting_nesting_nesting_nesting_close\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_nest = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_open = 0\n    var paren_nesting_nesting_nesting_nesting_close\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_nest = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_open = 0\n    var paren_nesting_nesting_nesting_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpm3zw5dmm.swift:32:9: error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_level'\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpm3zw5dmm.swift:28:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_level' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpm3zw5dmm.swift:33:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_open'\n\
    \    var paren_nesting_nesting_nesting_nesting_open = 0\n        ^\n/tmp/tmpm3zw5dmm.swift:29:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_open' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nesting_open = 0\n        ^\n/tmp/tmpm3zw5dmm.swift:34:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_close'\n\
    \    var paren_nesting_nesting_nesting_nesting_close = 0\n        ^\n/tmp/tmpm3zw5dmm.swift:30:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_close' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nesting_close = 0\n        ^\n/tmp/tmpm3zw5dmm.swift:35:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_nest'\n\
    \    var paren_nesting_nesting_nesting_nesting_nest = 0\n        ^\n/tmp/tmpm3zw5dmm.swift:31:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_nest' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nesting_nest = 0\n        ^\n/tmp/tmpm3zw5dmm.swift:36:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_level'\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpm3zw5dmm.swift:28:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_level' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpm3zw5dmm.swift:37:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_open'\n\
    \    var paren_nesting_nesting_nesting_nesting_open = 0\n        ^\n/tmp/tmpm3zw5dmm.swift:29:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_open' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nesting_open = 0\n"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    for ch in paren_string.unicodeScalars {\n        if ch == '(' {\n \
    \           paren_count += 1\n        } else if ch == ')' {\n            paren_count\
    \ -= 1\n            if paren_count == 0 {\n                levels.append(paren_level)\n\
    \            }\n        }\n        paren_level += ch == '(' ? 1 : -1\n    }\n\
    \    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmptvs8uper.swift:10:18: error: single-quoted string literal found,\
    \ use '\"'\n        if ch == '(' {\n                 ^~~\n                 \"\
    (\"\n/tmp/tmptvs8uper.swift:12:25: error: single-quoted string literal found,\
    \ use '\"'\n        } else if ch == ')' {\n                        ^~~\n     \
    \                   \")\"\n/tmp/tmptvs8uper.swift:18:30: error: single-quoted\
    \ string literal found, use '\"'\n        paren_level += ch == '(' ? 1 : -1\n\
    \                             ^~~\n                             \"(\"\n"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp5hpkv_dr.swift:13:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp5hpkv_dr.swift:9:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp5hpkv_dr.swift:14:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmp5hpkv_dr.swift:10:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmp5hpkv_dr.swift:15:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmp5hpkv_dr.swift:11:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmp5hpkv_dr.swift:16:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmp5hpkv_dr.swift:12:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp5hpkv_dr.swift:17:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp5hpkv_dr.swift:9:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp5hpkv_dr.swift:18:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmp5hpkv_dr.swift:10:9: note: 'paren_start' previously declared\
    \ here\n    var paren_start = 0\n        ^\n/tmp/tmp5hpkv_dr.swift:19:9: error:\
    \ invalid redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmp5hpkv_dr.swift:11:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmp5hpkv_dr.swift:20:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmp5hpkv_dr.swift:12:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp5hpkv_dr.swift:21:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp5hpkv_dr.swift:9:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp5hpkv_dr.swift:22:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var level\
    \ = 0\n    for ch in paren_string {\n        if ch == '(' {\n            paren_count\
    \ += 1\n            levels.append(level)\n        } else if ch == ')' {\n    \
    \        paren_count -= 1\n            if paren_count == 0 {\n               \
    \ levels = levels[0..<levels.count-1]\n                levels.append(0)\n    \
    \        }\n        }\n        level += 1\n    }\n    return levels\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmptfwjajzu.swift:10:18: error: single-quoted string literal found,\
    \ use '\"'\n        if ch == '(' {\n                 ^~~\n                 \"\
    (\"\n/tmp/tmptfwjajzu.swift:13:25: error: single-quoted string literal found,\
    \ use '\"'\n        } else if ch == ')' {\n                        ^~~\n     \
    \                   \")\"\n/tmp/tmptfwjajzu.swift:16:32: error: cannot assign\
    \ value of type 'ArraySlice<Int>' to type '[Int]'\n                levels = levels[0..<levels.count-1]\n\
    \                         ~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_open = 0\n    var paren_close = 0\n    var paren_level_count\
    \ = 0\n    var paren_open_count = 0\n    var paren_close_count = 0\n    var paren_level_string\
    \ = \"\"\n    var paren_open_string = \"\"\n    var paren_close_string = \"\"\n\
    \    var paren_level_string_count = 0\n    var paren_open_string_count = 0\n \
    \   var paren_close_string_count = 0\n    var paren_level_count = 0\n    var paren_open_count\
    \ = 0\n    var paren_close_count = 0\n    var paren_level_string = \"\"\n    var\
    \ paren_open_string = \"\"\n    var paren_close_string = \"\"\n    var paren_level_string_count\
    \ = 0\n    var paren_open_string_count = 0\n    var paren_close_string_count =\
    \ 0\n    var paren_level_count = 0\n    var paren_open_count = 0\n    var paren_close_count\
    \ = 0\n    var paren_level_string = \"\"\n    var paren_open_string = \"\"\n \
    \   var paren_close_string = \"\"\n    var paren_level_string_count = 0\n    var\
    \ paren_open_string_count = 0\n    var paren_close_string_count = 0\n    var paren_level_count\
    \ = 0\n    var paren_open_count = 0\n    var paren_close_count = 0\n    var paren_level_string\
    \ = \"\"\n    var paren_open_string = \"\"\n    var paren_close_string = \"\"\n\
    \    var paren_level_string_count = 0\n    var paren_open_string_count = 0\n \
    \   var paren_close_string_count = 0\n    var paren_level_count = 0\n    var paren_open_count\
    \ = 0\n    var paren_close_count = 0\n    var paren_level_string = \"\"\n    var\
    \ paren_open_string = \"\"\n    var paren_close_string = \"\"\n    var paren_level_string_count\
    \ = 0\n    var paren_open_string_count = 0\n    var paren_close_string_count =\
    \ 0\n    var paren_level_count = 0\n    var paren_open_count = 0\n    var paren_close_count\
    \ = 0\n    var paren_level_string = \"\"\n    var paren_open_string = \"\"\n \
    \   var paren_close_string = \"\"\n    var paren_level_string_count = 0\n    var\
    \ paren_open_string_count = 0\n    var paren_close_string_count = 0\n    var paren_level_count\
    \ = 0\n    var paren_open_count = 0\n    var paren_close_count = 0\n    var paren_level_string\
    \ = \"\"\n    var paren_open_string = \"\"\n    var paren_close_string = \"\"\n\
    \    var paren_level_string_count = 0\n    var paren_open_string_count = 0\n \
    \   var paren_close_string_count = 0\n    var paren_level_count = 0\n    var paren_open_count\
    \ = 0\n    var paren_close_count = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpsdpvjx_n.swift:20:9: error: invalid redeclaration of 'paren_level_count'\n\
    \    var paren_level_count = 0\n        ^\n/tmp/tmpsdpvjx_n.swift:11:9: note:\
    \ 'paren_level_count' previously declared here\n    var paren_level_count = 0\n\
    \        ^\n/tmp/tmpsdpvjx_n.swift:21:9: error: invalid redeclaration of 'paren_open_count'\n\
    \    var paren_open_count = 0\n        ^\n/tmp/tmpsdpvjx_n.swift:12:9: note: 'paren_open_count'\
    \ previously declared here\n    var paren_open_count = 0\n        ^\n/tmp/tmpsdpvjx_n.swift:22:9:\
    \ error: invalid redeclaration of 'paren_close_count'\n    var paren_close_count\
    \ = 0\n        ^\n/tmp/tmpsdpvjx_n.swift:13:9: note: 'paren_close_count' previously\
    \ declared here\n    var paren_close_count = 0\n        ^\n/tmp/tmpsdpvjx_n.swift:23:9:\
    \ error: invalid redeclaration of 'paren_level_string'\n    var paren_level_string\
    \ = \"\"\n        ^\n/tmp/tmpsdpvjx_n.swift:14:9: note: 'paren_level_string' previously\
    \ declared here\n    var paren_level_string = \"\"\n        ^\n/tmp/tmpsdpvjx_n.swift:24:9:\
    \ error: invalid redeclaration of 'paren_open_string'\n    var paren_open_string\
    \ = \"\"\n        ^\n/tmp/tmpsdpvjx_n.swift:15:9: note: 'paren_open_string' previously\
    \ declared here\n    var paren_open_string = \"\"\n        ^\n/tmp/tmpsdpvjx_n.swift:25:9:\
    \ error: invalid redeclaration of 'paren_close_string'\n    var paren_close_string\
    \ = \"\"\n        ^\n/tmp/tmpsdpvjx_n.swift:16:9: note: 'paren_close_string' previously\
    \ declared here\n    var paren_close_string = \"\"\n        ^\n/tmp/tmpsdpvjx_n.swift:26:9:\
    \ error: invalid redeclaration of 'paren_level_string_count'\n    var paren_level_string_count\
    \ = 0\n        ^\n/tmp/tmpsdpvjx_n.swift:17:9: note: 'paren_level_string_count'\
    \ previously declared here\n    var paren_level_string_count = 0\n        ^\n\
    /tmp/tmpsdpvjx_n.swift:27:9: error: invalid redeclaration of 'paren_open_string_count'\n\
    \    var paren_open_string_count = 0\n        ^\n/tmp/tmpsdpvjx_n.swift:18:9:\
    \ note: 'paren_open_string_count' previously declared here\n    var paren_open_string_count\
    \ = 0\n        ^\n/tmp/tmpsdpvjx_n.swift:28:9: error: invalid redeclaration "
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_levels_size = 0\n    var paren_levels_sizes = [Int]()\n\
    \    var paren_levels_sizes_sum = 0\n    var paren_levels_sizes_sums = [Int]()\n\
    \    var paren_levels_sizes_sums_sum = 0\n    var paren_levels_sizes_sums_sums\
    \ = [Int]()\n    var paren_levels_sizes_sums_sums_sum = 0\n    var paren_levels_sizes_sums_sums_sums\
    \ = [Int]()\n    var paren_levels_sizes_sums_sums_sums_sum = 0\n    var paren_levels_sizes_sums_sums_sums_sums\
    \ = [Int]()\n    var paren_levels_sizes_sums_sums_sums_sums_sum = 0\n    var paren_levels_sizes_sums_sums_sums_sums_sums\
    \ = [Int]()\n    var paren_levels_sizes_sums_sums_sums_sums_sums_sum = 0\n   \
    \ var paren_levels_sizes_sums_sums_sums_sums_sums_sums = [Int]()\n    var paren_levels_sizes_sums_sums_sums_sums_sums_sums_sum\
    \ = 0\n    var paren_levels_sizes_sums_sums_sums_sums_sums_sums_sums = [Int]()\n\
    \    var paren_levels_sizes_sums_sums_sums_sums_sums_sums_sums_sum = 0\n    var\
    \ paren_levels_sizes_sums_sums_sums_sums_sums_sums_sums_sums = [Int]()\n    var\
    \ paren_levels_sizes_sums_sums_sums_sums_sums_sums_sums_sums_sum = 0\n    var\
    \ paren_levels_sizes_sums_sums_sums_sums_sums_sums_sums_sums_sums = [Int]()\n\
    \    var paren_levels_sizes_sums_sums_sums_sums_sums_sums_sums_sums_sums_sum =\
    \ 0\n    var paren_levels_sizes_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums\
    \ = [Int]()\n    var paren_levels_sizes_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sum\
    \ = 0\n    var paren_levels_sizes_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp4tvt4f_3.swift:32:9: error: type annotation missing in pattern\n\
    \    var paren_levels_sizes_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sum\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_levels_len = 0\n    var paren_levels_len2\
    \ = 0\n    var paren_levels_len3 = 0\n    var paren_levels_len4 = 0\n    var paren_levels_len5\
    \ = 0\n    var paren_levels_len6 = 0\n    var paren_levels_len7 = 0\n    var paren_levels_len8\
    \ = 0\n    var paren_levels_len9 = 0\n    var paren_levels_len10 = 0\n    var\
    \ paren_levels_len11 = 0\n    var paren_levels_len12 = 0\n    var paren_levels_len13\
    \ = 0\n    var paren_levels_len14 = 0\n    var paren_levels_len15 = 0\n    var\
    \ paren_levels_len16 = 0\n    var paren_levels_len17 = 0\n    var paren_levels_len18\
    \ = 0\n    var paren_levels_len19 = 0\n    var paren_levels_len20 = 0\n    var\
    \ paren_levels_len21 = 0\n    var paren_levels_len22 = 0\n    var paren_levels_len23\
    \ = 0\n    var paren_levels_len24 = 0\n    var paren_levels_len25 = 0\n    var\
    \ paren_levels_len26 = 0\n    var paren_levels_len27 = 0\n    var paren_levels_len28\
    \ = 0\n    var paren_levels_len29 = 0\n    var paren_levels_len30 = 0\n    var\
    \ paren_levels_len31 = 0\n    var paren_levels_len32 = 0\n    var paren_levels_len33\
    \ = 0\n    var paren_levels_len34 = 0\n    var paren_levels_len35 = 0\n    var\
    \ paren_levels_len36 = 0\n    var paren_levels_len37 = 0\n    var paren_levels_len38\
    \ = 0\n    var paren_levels_len39 = 0\n    var paren_levels_len40 = 0\n    var\
    \ paren_levels_len41 = 0\n    var paren_levels_len42 = 0\n    var paren_levels_len43\
    \ = 0\n    var paren_levels_len44 = 0\n    var paren_levels_len45 = 0\n    var\
    \ paren_levels_len46 = 0\n    var paren_levels_len47 = 0\n    var paren_levels_len48\
    \ = 0\n    var paren_levels_len49 = 0\n    var paren_levels_len50 = 0\n    var\
    \ paren_levels_len51 = 0\n    var paren_levels_len52 = 0\n    var paren_levels_len53\
    \ = 0\n    var paren_levels_len54 = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpagbuziby.swift:6:9: warning: initialization of variable 'levels'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var levels = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmpagbuziby.swift:7:9: warning:\
    \ initialization of variable 'paren_count' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var paren_count = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpagbuziby.swift:8:9: warning: initialization of variable 'paren_level'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_level = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpagbuziby.swift:9:9:\
    \ warning: initialization of variable 'paren_levels' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_levels = [Int]()\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpagbuziby.swift:10:9: warning: initialization\
    \ of variable 'paren_levels_len' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var paren_levels_len = 0\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpagbuziby.swift:11:9: warning: initialization of variable 'paren_levels_len2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_levels_len2 = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpagbuziby.swift:12:9:\
    \ warning: initialization of variable 'paren_levels_len3' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_levels_len3 =\
    \ 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpagbuziby.swift:13:9: warning: initialization\
    \ of variable 'paren_levels_len4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var paren_levels_len4 = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpagbuziby.swift:14:9: warning: initialization of variable 'paren_levels_len5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_levels_len5 = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpagbuziby.swift:15:9:\
    \ warning: initialization of variable 'paren_levels_len6' was never used; consider\
    \ replacing with assignment to '_' or r"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_level = 0\n    var paren_nesting\
    \ = 0\n    for c in paren_string.unicodeScalars {\n        if paren_nesting ==\
    \ 0 {\n            if c == paren {\n                paren_nesting = paren_level\n\
    \            } else {\n                levels.append(paren_nesting)\n        \
    \        paren_nesting = 0\n            }\n        } else {\n            if c\
    \ == paren {\n                paren_nesting--\n            } else {\n        \
    \        levels.append(paren_nesting)\n                paren_nesting = 0\n   \
    \         }\n        }\n    }\n    levels.append(paren_nesting)\n    return levels\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp_xsjxdlm.swift:11:21: error: cannot find 'paren' in scope\n   \
    \         if c == paren {\n                    ^~~~~\n/tmp/tmp_xsjxdlm.swift:18:21:\
    \ error: cannot find 'paren' in scope\n            if c == paren {\n         \
    \           ^~~~~\n/tmp/tmp_xsjxdlm.swift:19:30: error: cannot find operator '--'\
    \ in scope; did you mean '-= 1'?\n                paren_nesting--\n          \
    \                   ^~\n"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_levels_len = 0\n    var paren_levels_lens\
    \ = [Int]()\n    var paren_levels_lens_len = 0\n    var paren_levels_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_len = 0\n    var paren_levels_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_len = 0\n    var paren_levels_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_len = 0\n    var paren_levels_lens_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_len = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_lens_len = 0\n    var\
    \ paren_levels_lens_lens_lens_lens_lens_lens_lens = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_len\
    \ = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens = [Int]()\n\
    \    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_len = 0\n    var\
    \ paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens = [Int]()\n    var\
    \ paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_len = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\
    \ = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\
    \ = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp9ai2pf_h.swift:33:9: error: type annotation missing in pattern\n\
    \    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_nesting = 0\n    var paren_nesting_level = 0\n    var paren_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpcjcmv8yn.swift:16:9: error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_level'\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpcjcmv8yn.swift:15:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_level' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpcjcmv8yn.swift:17:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_level'\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpcjcmv8yn.swift:15:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_level' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpcjcmv8yn.swift:18:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_level'\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpcjcmv8yn.swift:15:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_level' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpcjcmv8yn.swift:19:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_level'\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpcjcmv8yn.swift:15:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_level' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpcjcmv8yn.swift:20:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_level'\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpcjcmv8yn.swift:15:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_level' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpcjcmv8yn.swift:21:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_level'\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpcjcmv8yn.swift:15:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_level' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nestin"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_char = 0\n\
    \    var paren_char_count = 0\n    var paren_char_count_in_paren = 0\n    var\
    \ paren_char_count_in_paren_group = 0\n    var paren_char_count_in_paren_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group = 0\n    var paren_char_count_in_paren_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group = 0\n \
    \   var paren_char_count_in_paren_group_group_group_group_group_group = 0\n  \
    \  var paren_char_count_in_paren_group_group_group_group_group_group_group = 0\n\
    \    var paren_char_count_in_paren_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpvyc524xx.swift:26:9: error: invalid redeclaration of 'paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group'\n\
    \    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n        ^\n/tmp/tmpvyc524xx.swift:25:9: note: 'paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group'\
    \ previously declared here\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n        ^\n/tmp/tmpvyc524xx.swift:29:9: error: invalid redeclaration of\
    \ 'paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group'\n\
    \    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n        ^\n/tmp/tmpvyc524xx.swift:28:9: note: 'paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group'\
    \ previously declared here\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n        ^\n/tmp/tmpvyc524xx.swift:31:9: error: invalid redeclaration of\
    \ 'paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group'\n\
    \    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n        ^\n/tmp/tmpvyc524xx.swift:30:9: note: 'paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group'\
    \ previously declared here\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n        ^\n/tmp/tmpvyc524xx.swift:33:9: error: invalid redeclaration of\
    \ 'paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group'\n\
    \    var paren_char_count_in_paren_group_group_group_group_gr"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n \
    \   var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n \
    \   var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n \
    \   var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n \
    \   var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n \
    \   var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n \
    \   var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n \
    \   var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n \
    \   var paren_levels = [Int]()\n    var paren_level = 0\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpto19eg4o.swift:10:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmpto19eg4o.swift:8:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmpto19eg4o.swift:11:9:\
    \ error: invalid redeclaration of 'paren_levels'\n    var paren_levels = [Int]()\n\
    \        ^\n/tmp/tmpto19eg4o.swift:9:9: note: 'paren_levels' previously declared\
    \ here\n    var paren_levels = [Int]()\n        ^\n/tmp/tmpto19eg4o.swift:12:9:\
    \ error: invalid redeclaration of 'paren_level'\n    var paren_level = 0\n   \
    \     ^\n/tmp/tmpto19eg4o.swift:8:9: note: 'paren_level' previously declared here\n\
    \    var paren_level = 0\n        ^\n/tmp/tmpto19eg4o.swift:13:9: error: invalid\
    \ redeclaration of 'paren_levels'\n    var paren_levels = [Int]()\n        ^\n\
    /tmp/tmpto19eg4o.swift:9:9: note: 'paren_levels' previously declared here\n  \
    \  var paren_levels = [Int]()\n        ^\n/tmp/tmpto19eg4o.swift:14:9: error:\
    \ invalid redeclaration of 'paren_level'\n    var paren_level = 0\n        ^\n\
    /tmp/tmpto19eg4o.swift:8:9: note: 'paren_level' previously declared here\n   \
    \ var paren_level = 0\n        ^\n/tmp/tmpto19eg4o.swift:15:9: error: invalid\
    \ redeclaration of 'paren_levels'\n    var paren_levels = [Int]()\n        ^\n\
    /tmp/tmpto19eg4o.swift:9:9: note: 'paren_levels' previously declared here\n  \
    \  var paren_levels = [Int]()\n        ^\n/tmp/tmpto19eg4o.swift:16:9: error:\
    \ invalid redeclaration of 'paren_level'\n    var paren_level = 0\n        ^\n\
    /tmp/tmpto19eg4o.swift:8:9: note: 'paren_level' previously declared here\n   \
    \ var paren_level = 0\n        ^\n/tmp/tmpto19eg4o.swift:17:9: error: invalid\
    \ redeclaration of 'paren_levels'\n    var paren_levels = [Int]()\n        ^\n\
    /tmp/tmpto19eg4o.swift:9:9: note: 'paren_levels' previously declared here\n  \
    \  var paren_levels = [Int]()\n        ^\n/tmp/tmpto19eg4o.swift:18:9: error:\
    \ invalid redeclaration of 'paren_level'\n    var paren_level = 0\n        ^\n\
    /tmp/tmpto19eg4o.swift:8:9: note: 'paren_level' previously declared here\n   \
    \ var paren_level = 0\n        ^\n/tmp/tmpto19eg4o.swift:19:9: error: inva"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    for index in 0..<paren_string.characters.count {\n        let char = paren_string.characters[index]\n\
    \        if char == \"(\" {\n            paren_count += 1\n            paren_level\
    \ += 1\n            paren_start = index\n        } else if char == \")\" {\n \
    \           paren_count -= 1\n            paren_level -= 1\n            if paren_level\
    \ == 0 {\n                levels.append(paren_end - paren_start + 1)\n       \
    \     }\n        }\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpifxqflcc.swift:12:35: error: 'characters' is unavailable: Please\
    \ use String directly\n    for index in 0..<paren_string.characters.count {\n\
    \                                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpifxqflcc.swift:13:20: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        let\
    \ char = paren_string.characters[index]\n                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpifxqflcc.swift:13:33:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ char = paren_string.characters[index]\n                                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpifxqflcc.swift:7:9:\
    \ warning: initialization of variable 'level' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var level = 0\n    ~~~~^~~~~\n  \
    \  _\n/tmp/tmpifxqflcc.swift:11:9: warning: variable 'paren_end' was never mutated;\
    \ consider changing to 'let' constant\n    var paren_end = 0\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var max_level = 0\n    var level = 0\n    var paren_level =\
    \ 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n\
    \    var paren_stack = [Int]()\n    var paren_stack_ptr = 0\n    var paren_stack_end\
    \ = 0\n    var paren_stack_top = 0\n    var paren_stack_bottom = 0\n    var paren_stack_level\
    \ = 0\n    var paren_stack_level_max = 0\n    var paren_stack_level_min = 0\n\
    \    var paren_stack_level_cur = 0\n    var paren_stack_level_next = 0\n    var\
    \ paren_stack_level_next_max = 0\n    var paren_stack_level_next_min = 0\n   \
    \ var paren_stack_level_next_cur = 0\n    var paren_stack_level_next_next = 0\n\
    \    var paren_stack_level_next_next_max = 0\n    var paren_stack_level_next_next_min\
    \ = 0\n    var paren_stack_level_next_next_cur = 0\n    var paren_stack_level_next_next_next\
    \ = 0\n    var paren_stack_level_next_next_next = 0\n    var paren_stack_level_next_next_next\
    \ = 0\n    var paren_stack_level_next_next_next = 0\n    var paren_stack_level_next_next_next\
    \ = 0\n    var paren_stack_level_next_next_next = 0\n    var paren_stack_level_next_next_next\
    \ = 0\n    var paren_stack_level_next_next_next = 0\n    var paren_stack_level_next_next_next\
    \ = 0\n    var paren_stack_level_next_next_next = 0\n    var paren_stack_level_next_next_next\
    \ = 0\n    var paren_stack_level_next_next_next = 0\n    var paren_stack_level_next_next_next\
    \ = 0\n    var paren_stack_level_next_next_next = 0\n    var paren_stack_level_next_next_next\
    \ = 0\n    var paren_stack_level_next_next_next = 0\n    var paren_stack_level_next_next_next\
    \ = 0\n    var paren_stack_level_next_next_next = 0\n    var paren_stack_level_next_next_next\
    \ = 0\n    var paren_stack_level_next_next_next = 0\n    var paren_stack_level_next_next_next\
    \ = 0\n    var paren_stack_level_next_next_next = 0\n    var paren_stack_level_next_next_next\
    \ = 0\n    var paren_stack_level_next_next_next = 0\n    var paren_stack_level_next_next_next\
    \ = 0\n    var paren_stack_level_next_next_next = 0\n    var paren_stack_level_next_next_next\
    \ = 0\n    var paren_stack_level_next_next_next = 0\n    var paren_stack_level_next_next_next\
    \ = 0\n    var paren_stack_level_next_next_next = 0\n    var paren_stack_level_next_next_next\
    \ = 0\n    var paren_stack_level_next_next_next = 0\n    var paren_stack_level_next_next_next\
    \ = 0\n    var paren_stack_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpzu8v6tcc.swift:30:9: error: invalid redeclaration of 'paren_stack_level_next_next_next'\n\
    \    var paren_stack_level_next_next_next = 0\n        ^\n/tmp/tmpzu8v6tcc.swift:29:9:\
    \ note: 'paren_stack_level_next_next_next' previously declared here\n    var paren_stack_level_next_next_next\
    \ = 0\n        ^\n/tmp/tmpzu8v6tcc.swift:31:9: error: invalid redeclaration of\
    \ 'paren_stack_level_next_next_next'\n    var paren_stack_level_next_next_next\
    \ = 0\n        ^\n/tmp/tmpzu8v6tcc.swift:29:9: note: 'paren_stack_level_next_next_next'\
    \ previously declared here\n    var paren_stack_level_next_next_next = 0\n   \
    \     ^\n/tmp/tmpzu8v6tcc.swift:32:9: error: invalid redeclaration of 'paren_stack_level_next_next_next'\n\
    \    var paren_stack_level_next_next_next = 0\n        ^\n/tmp/tmpzu8v6tcc.swift:29:9:\
    \ note: 'paren_stack_level_next_next_next' previously declared here\n    var paren_stack_level_next_next_next\
    \ = 0\n        ^\n/tmp/tmpzu8v6tcc.swift:33:9: error: invalid redeclaration of\
    \ 'paren_stack_level_next_next_next'\n    var paren_stack_level_next_next_next\
    \ = 0\n        ^\n/tmp/tmpzu8v6tcc.swift:29:9: note: 'paren_stack_level_next_next_next'\
    \ previously declared here\n    var paren_stack_level_next_next_next = 0\n   \
    \     ^\n/tmp/tmpzu8v6tcc.swift:34:9: error: invalid redeclaration of 'paren_stack_level_next_next_next'\n\
    \    var paren_stack_level_next_next_next = 0\n        ^\n/tmp/tmpzu8v6tcc.swift:29:9:\
    \ note: 'paren_stack_level_next_next_next' previously declared here\n    var paren_stack_level_next_next_next\
    \ = 0\n        ^\n/tmp/tmpzu8v6tcc.swift:35:9: error: invalid redeclaration of\
    \ 'paren_stack_level_next_next_next'\n    var paren_stack_level_next_next_next\
    \ = 0\n        ^\n/tmp/tmpzu8v6tcc.swift:29:9: note: 'paren_stack_level_next_next_next'\
    \ previously declared here\n    var paren_stack_level_next_next_next = 0\n   \
    \     ^\n/tmp/tmpzu8v6tcc.swift:36:9: error: invalid redeclaration of 'paren_stack_level_next_next_next'\n\
    \    var paren_stack_level_next_next_next = 0\n        ^\n/tmp/tmpzu8v6tcc.swift:29:9:\
    \ note: 'paren_stack_level_next_next_next' previously declared h"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    for ch in\
    \ paren_string {\n        if ch == '(' {\n            paren_count += 1\n     \
    \   } else if ch == ')' {\n            paren_count -= 1\n            if paren_count\
    \ == 0 {\n                levels.append(paren_count)\n            }\n        }\n\
    \    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpobi3ejek.swift:9:18: error: single-quoted string literal found,\
    \ use '\"'\n        if ch == '(' {\n                 ^~~\n                 \"\
    (\"\n/tmp/tmpobi3ejek.swift:11:25: error: single-quoted string literal found,\
    \ use '\"'\n        } else if ch == ')' {\n                        ^~~\n     \
    \                   \")\"\n"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_start_idx = 0\n    var paren_end_idx = 0\n    var paren_level_idx\
    \ = 0\n    var paren_level_string = \"\"\n    var paren_level_string_len = -1\n\
    \    var paren_level_string_len_idx = 0\n    var paren_level_string_len_len =\
    \ 0\n    var paren_level_string_len_len_idx = 0\n    var paren_level_string_len_len\
    \ = 0\n    var paren_level_string_len_len_idx = 0\n    var paren_level_string_len_len\
    \ = 0\n    var paren_level_string_len_len_idx = 0\n    var paren_level_string_len_len\
    \ = 0\n    var paren_level_string_len_len_idx = 0\n    var paren_level_string_len_len\
    \ = 0\n    var paren_level_string_len_len_idx = 0\n    var paren_level_string_len_len\
    \ = 0\n    var paren_level_string_len_len_idx = 0\n    var paren_level_string_len_len\
    \ = 0\n    var paren_level_string_len_len_idx = 0\n    var paren_level_string_len_len\
    \ = 0\n    var paren_level_string_len_len_idx = 0\n    var paren_level_string_len_len\
    \ = 0\n    var paren_level_string_len_len_idx = 0\n    var paren_level_string_len_len\
    \ = 0\n    var paren_level_string_len_len_idx = 0\n    var paren_level_string_len_len\
    \ = 0\n    var paren_level_string_len_len_idx = 0\n    var paren_level_string_len_len\
    \ = 0\n    var paren_level_string_len_len_idx = 0\n    var paren_level_string_len_len\
    \ = 0\n    var paren_level_string_len_len_idx = 0\n    var paren_level_string_len_len\
    \ = 0\n    var paren_level_string_len_len_idx = 0\n    var paren_level_string_len_len\
    \ = 0\n    var paren_level_string_len_len_idx = 0\n    var paren_level_string_len_len\
    \ = 0\n    var paren_level_string_len_len_idx = 0\n    var paren_level_string_len_len\
    \ = 0\n    var paren_level_string_len_len_idx = 0\n    var paren_level_string_len_len\
    \ = 0\n    var paren_level_string_len_len_idx = 0\n    var paren_level_string_len_len\
    \ = 0\n    var paren_level_string_len_len_idx = 0\n    var paren_level_string_len_len\
    \ = 0\n    var paren_level_string_len_len_idx = 0\n    var paren_level_string_len_len\
    \ = 0\n    var paren_level_string_len_len_idx = 0\n    var paren_level_string_len_len\
    \ = 0\n    var paren_level_string_len_len_idx = 0\n    var paren_level_string_len_len\
    \ = 0\n    var paren_level_string_len\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpnl2xzax4.swift:20:9: error: invalid redeclaration of 'paren_level_string_len_len'\n\
    \    var paren_level_string_len_len = 0\n        ^\n/tmp/tmpnl2xzax4.swift:18:9:\
    \ note: 'paren_level_string_len_len' previously declared here\n    var paren_level_string_len_len\
    \ = 0\n        ^\n/tmp/tmpnl2xzax4.swift:21:9: error: invalid redeclaration of\
    \ 'paren_level_string_len_len_idx'\n    var paren_level_string_len_len_idx = 0\n\
    \        ^\n/tmp/tmpnl2xzax4.swift:19:9: note: 'paren_level_string_len_len_idx'\
    \ previously declared here\n    var paren_level_string_len_len_idx = 0\n     \
    \   ^\n/tmp/tmpnl2xzax4.swift:22:9: error: invalid redeclaration of 'paren_level_string_len_len'\n\
    \    var paren_level_string_len_len = 0\n        ^\n/tmp/tmpnl2xzax4.swift:18:9:\
    \ note: 'paren_level_string_len_len' previously declared here\n    var paren_level_string_len_len\
    \ = 0\n        ^\n/tmp/tmpnl2xzax4.swift:23:9: error: invalid redeclaration of\
    \ 'paren_level_string_len_len_idx'\n    var paren_level_string_len_len_idx = 0\n\
    \        ^\n/tmp/tmpnl2xzax4.swift:19:9: note: 'paren_level_string_len_len_idx'\
    \ previously declared here\n    var paren_level_string_len_len_idx = 0\n     \
    \   ^\n/tmp/tmpnl2xzax4.swift:24:9: error: invalid redeclaration of 'paren_level_string_len_len'\n\
    \    var paren_level_string_len_len = 0\n        ^\n/tmp/tmpnl2xzax4.swift:18:9:\
    \ note: 'paren_level_string_len_len' previously declared here\n    var paren_level_string_len_len\
    \ = 0\n        ^\n/tmp/tmpnl2xzax4.swift:25:9: error: invalid redeclaration of\
    \ 'paren_level_string_len_len_idx'\n    var paren_level_string_len_len_idx = 0\n\
    \        ^\n/tmp/tmpnl2xzax4.swift:19:9: note: 'paren_level_string_len_len_idx'\
    \ previously declared here\n    var paren_level_string_len_len_idx = 0\n     \
    \   ^\n/tmp/tmpnl2xzax4.swift:26:9: error: invalid redeclaration of 'paren_level_string_len_len'\n\
    \    var paren_level_string_len_len = 0\n        ^\n/tmp/tmpnl2xzax4.swift:18:9:\
    \ note: 'paren_level_string_len_len' previously declared here\n    var paren_level_string_len_len\
    \ = 0\n        ^\n/tmp/tmpnl2xzax4.swift:27:9: error: invalid redeclaration of "
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_char = 0\n    var paren_char_count = 0\n    var paren_char_level\
    \ = 0\n    var paren_char_start = 0\n    var paren_char_end = 0\n    var paren_char_char\
    \ = 0\n    var paren_char_char_count = 0\n    var paren_char_char_level = 0\n\
    \    var paren_char_char_start = 0\n    var paren_char_char_end = 0\n    var paren_char_char_char\
    \ = 0\n    var paren_char_char_char_count = 0\n    var paren_char_char_char_level\
    \ = 0\n    var paren_char_char_char_start = 0\n    var paren_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char = 0\n    var paren_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_level = 0\n    var paren_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_end = 0\n    var paren_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_char_char_end = 0\n    var paren_char_char_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_level = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_start = 0\n\
    \    var paren_char_char_char_char_\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpdlsajm5y.swift:56:9: error: type annotation missing in pattern\n\
    \    var paren_char_char_char_char_\n        ^\n"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens = 0\n\
    \    var paren_level = 0\n    for c in paren_string.unicodeScalars {\n       \
    \ if paren_level == 0 {\n            levels.append(level)\n        }\n       \
    \ switch c {\n        case .OpenSquareBracket:\n            parens += 1\n    \
    \        paren_level = 1\n        case .CloseSquareBracket:\n            parens\
    \ -= 1\n            paren_level = 0\n        case .OpenParenthesis:\n        \
    \    paren_level += 1\n        case .CloseParenthesis:\n            paren_level\
    \ -= 1\n        }\n        level += 1\n    }\n    levels.append(level)\n    return\
    \ levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpuas4sa7x.swift:15:15: error: type 'Unicode.Scalar' has no member\
    \ 'OpenSquareBracket'\n        case .OpenSquareBracket:\n             ~^~~~~~~~~~~~~~~~~\n\
    /tmp/tmpuas4sa7x.swift:18:15: error: type 'Unicode.Scalar' has no member 'CloseSquareBracket'\n\
    \        case .CloseSquareBracket:\n             ~^~~~~~~~~~~~~~~~~~\n/tmp/tmpuas4sa7x.swift:21:15:\
    \ error: type 'Unicode.Scalar' has no member 'OpenParenthesis'\n        case .OpenParenthesis:\n\
    \             ~^~~~~~~~~~~~~~~\n/tmp/tmpuas4sa7x.swift:23:15: error: type 'Unicode.Scalar'\
    \ has no member 'CloseParenthesis'\n        case .CloseParenthesis:\n        \
    \     ~^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var paren_stack = [Int]()\n    var paren_level\
    \ = 0\n    var paren_level_stack = [Int]()\n    var paren_level_stack_index =\
    \ 0\n    var paren_level_stack_size = 0\n    var paren_level_stack_pointer = 0\n\
    \    var paren_level_stack_pointer_pointer = 0\n    var paren_level_stack_pointer_pointer_pointer\
    \ = 0\n    var paren_level_stack_pointer_pointer_pointer_pointer = 0\n    var\
    \ paren_level_stack_pointer_pointer_pointer_pointer_pointer = 0\n    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 0\n    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 0\n    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 0\n    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 0\n    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 0\n    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 0\n    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 0\n    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpnwll3q2b.swift:24:9: error: type annotation missing in pattern\n\
    \    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    for c in paren_string.unicodeScalars {\n        if c == '(' {\n   \
    \         paren_count += 1\n        } else if c == ')' {\n            paren_count\
    \ -= 1\n        }\n        if paren_count == 0 {\n            levels.append(level)\n\
    \        }\n        level += 1\n    }\n    return levels\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp6c47u4vn.swift:10:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmp6c47u4vn.swift:12:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_paren\
    \ = 0\n    var paren_count = 0\n    var paren_count_paren = 0\n    var paren_level\
    \ = [Int]()\n    var paren_level_paren = [Int]()\n    var paren_level_paren_count\
    \ = [Int]()\n    var paren_level_paren_count_paren = [Int]()\n    var paren_level_paren_count_paren_level\
    \ = [Int]()\n    var paren_level_paren_count_paren_level_paren = [Int]()\n   \
    \ var paren_level_paren_count_paren_level_paren_level = [Int]()\n    var paren_level_paren_count_paren_level_paren_level_paren\
    \ = [Int]()\n    var paren_level_paren_count_paren_level_paren_level_paren_level\
    \ = [Int]()\n    var paren_level_paren_count_paren_level_paren_level_paren_level_paren\
    \ = [Int]()\n    var paren_level_paren_count_paren_level_paren_level_paren_level_paren_level\
    \ = [Int]()\n    var paren_level_paren_count_paren_level_paren_level_paren_level_paren_level_paren\
    \ = [Int]()\n    var paren_level_paren_count_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = [Int]()\n    var paren_level_paren_count_paren_level_paren_level_paren_level_paren_level_paren_level_paren\
    \ = [Int]()\n    var paren_level_paren_count_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = [Int]()\n    var paren_level_paren_count_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren\
    \ = [Int]()\n    var paren_level_paren_count_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren\
    \ = [Int]()\n    var paren_level_paren_count_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren\
    \ = [Int]()\n    var paren_level_paren_count_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren\
    \ = [Int]()\n    var paren_level_paren_count_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = [Int]()\n    var paren_level_paren_count_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp555m7cca.swift:28:9: error: invalid redeclaration of 'paren_level_paren_count_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren'\n\
    \    var paren_level_paren_count_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren\
    \ = [Int]()\n        ^\n/tmp/tmp555m7cca.swift:27:9: note: 'paren_level_paren_count_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren'\
    \ previously declared here\n    var paren_level_paren_count_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren\
    \ = [Int]()\n        ^\n/tmp/tmp555m7cca.swift:29:9: error: invalid redeclaration\
    \ of 'paren_level_paren_count_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren'\n\
    \    var paren_level_paren_count_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren\
    \ = [Int]()\n        ^\n/tmp/tmp555m7cca.swift:27:9: note: 'paren_level_paren_count_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren'\
    \ previously declared here\n    var paren_level_paren_count_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren\
    \ = [Int]()\n        ^\n/tmp/tmp555m7cca.swift:31:9: error: type annotation missing\
    \ in pattern\n    var paren_level_paren_count_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_open = 0\n    var paren_close = 0\n    var paren_level_count\
    \ = 0\n    var paren_open_count = 0\n    var paren_close_count = 0\n    for c\
    \ in paren_string.unicodeScalars {\n        if paren_level == 0 {\n          \
    \  if c == '(' {\n                paren_open++\n                paren_level_count++\n\
    \            } else if c == ')' {\n                paren_close++\n           \
    \     paren_level_count--\n            }\n        } else if paren_level == paren_level_count\
    \ {\n            if c == '(' {\n                paren_open++\n               \
    \ paren_open_count++\n            } else if c == ')' {\n                paren_close++\n\
    \                paren_close_count--\n            }\n        } else {\n      \
    \      if c == '(' {\n                paren_open++\n                paren_level_count++\n\
    \            } else if c == ')' {\n                paren_close++\n           \
    \     paren_level_count--\n            }\n        }\n        if paren_level ==\
    \ 0 {\n            if paren_open_count == paren_close_count {\n              \
    \  levels.append(level)\n                paren_level = 0\n                paren_open\
    \ = 0\n                paren_close = 0\n                paren_level_count = 0\n\
    \                paren_open_count = 0\n                paren_close_count = 0\n\
    \            }\n        }\n        level++\n    }\n    return levels\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpk2iml_lw.swift:16:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c == '(' {\n                    ^~~\n             \
    \       \"(\"\n/tmp/tmpk2iml_lw.swift:19:28: error: single-quoted string literal\
    \ found, use '\"'\n            } else if c == ')' {\n                        \
    \   ^~~\n                           \")\"\n/tmp/tmpk2iml_lw.swift:24:21: error:\
    \ single-quoted string literal found, use '\"'\n            if c == '(' {\n  \
    \                  ^~~\n                    \"(\"\n/tmp/tmpk2iml_lw.swift:27:28:\
    \ error: single-quoted string literal found, use '\"'\n            } else if c\
    \ == ')' {\n                           ^~~\n                           \")\"\n\
    /tmp/tmpk2iml_lw.swift:32:21: error: single-quoted string literal found, use '\"\
    '\n            if c == '(' {\n                    ^~~\n                    \"\
    (\"\n/tmp/tmpk2iml_lw.swift:35:28: error: single-quoted string literal found,\
    \ use '\"'\n            } else if c == ')' {\n                           ^~~\n\
    \                           \")\"\n/tmp/tmpk2iml_lw.swift:17:27: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n                paren_open++\n\
    \                          ^~\n/tmp/tmpk2iml_lw.swift:18:34: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n                paren_level_count++\n\
    \                                 ^~\n/tmp/tmpk2iml_lw.swift:20:28: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n                paren_close++\n\
    \                           ^~\n/tmp/tmpk2iml_lw.swift:21:34: error: cannot find\
    \ operator '--' in scope; did you mean '-= 1'?\n                paren_level_count--\n\
    \                                 ^~\n/tmp/tmpk2iml_lw.swift:25:27: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n                paren_open++\n\
    \                          ^~\n/tmp/tmpk2iml_lw.swift:26:33: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n                paren_open_count++\n\
    \                                ^~\n/tmp/tmpk2iml_lw.swift:28:28: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n       "
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    for ch in\
    \ paren_string.characters {\n        if ch == '(' {\n            paren_count +=\
    \ 1\n        }\n        if ch == ')' {\n            paren_count -= 1\n       \
    \ }\n        if paren_count == 0 {\n            levels.append(paren_count)\n \
    \       }\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpsd0ud2s0.swift:9:18: error: single-quoted string literal found,\
    \ use '\"'\n        if ch == '(' {\n                 ^~~\n                 \"\
    (\"\n/tmp/tmpsd0ud2s0.swift:12:18: error: single-quoted string literal found,\
    \ use '\"'\n        if ch == ')' {\n                 ^~~\n                 \"\
    )\"\n/tmp/tmpsd0ud2s0.swift:8:28: error: 'characters' is unavailable: Please use\
    \ String directly\n    for ch in paren_string.characters {\n                 \
    \          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var paren_level = 0\n    var paren_nesting\
    \ = 0\n    var paren_nesting_level = 0\n    var paren_nesting_nesting = 0\n  \
    \  var paren_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting = 0\n    var paren_nesting = 0\n    var paren_nesting_level\
    \ = 0\n    var paren_nesting_nesting = 0\n    var paren_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting = 0\n    var paren_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting = 0\n    var paren_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting = 0\n    var paren_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting = 0\n    var paren_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting = 0\n    var paren_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting = 0\n    var paren_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpc6b9mqq3.swift:17:9: error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_level'\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpc6b9mqq3.swift:15:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_level' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpc6b9mqq3.swift:18:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_nesting'\n\
    \    var paren_nesting_nesting_nesting_nesting_nesting = 0\n        ^\n/tmp/tmpc6b9mqq3.swift:16:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_nesting' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nesting_nesting = 0\n        ^\n/tmp/tmpc6b9mqq3.swift:19:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_level'\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpc6b9mqq3.swift:15:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_level' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpc6b9mqq3.swift:20:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_nesting'\n\
    \    var paren_nesting_nesting_nesting_nesting_nesting = 0\n        ^\n/tmp/tmpc6b9mqq3.swift:16:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_nesting' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nesting_nesting = 0\n        ^\n/tmp/tmpc6b9mqq3.swift:21:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_level'\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpc6b9mqq3.swift:15:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_level' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpc6b9mqq3.swift:22:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_nesting'\n\
    \    var paren_nesting_nesting_nesting_nesting_nesting = 0\n        ^\n/tmp/tmpc6b9mqq3.swift:16:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_nesting' previously declared here\n\
    \    var paren_nesting_"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_levels_count = 0\n    var paren_levels_max = 0\n  \
    \  var paren_levels_max_count = 0\n    var paren_levels_max_index = 0\n    var\
    \ paren_levels_max_index2 = 0\n    var paren_levels_max_index3 = 0\n    var paren_levels_max_index4\
    \ = 0\n    var paren_levels_max_index5 = 0\n    var paren_levels_max_index6 =\
    \ 0\n    var paren_levels_max_index7 = 0\n    var paren_levels_max_index8 = 0\n\
    \    var paren_levels_max_index9 = 0\n    var paren_levels_max_index10 = 0\n \
    \   var paren_levels_max_index11 = 0\n    var paren_levels_max_index12 = 0\n \
    \   var paren_levels_max_index13 = 0\n    var paren_levels_max_index14 = 0\n \
    \   var paren_levels_max_index15 = 0\n    var paren_levels_max_index16 = 0\n \
    \   var paren_levels_max_index17 = 0\n    var paren_levels_max_index18 = 0\n \
    \   var paren_levels_max_index19 = 0\n    var paren_levels_max_index20 = 0\n \
    \   var paren_levels_max_index21 = 0\n    var paren_levels_max_index22 = 0\n \
    \   var paren_levels_max_index23 = 0\n    var paren_levels_max_index24 = 0\n \
    \   var paren_levels_max_index25 = 0\n    var paren_levels_max_index26 = 0\n \
    \   var paren_levels_max_index27 = 0\n    var paren_levels_max_index28 = 0\n \
    \   var paren_levels_max_index29 = 0\n    var paren_levels_max_index30 = 0\n \
    \   var paren_levels_max_index31 = 0\n    var paren_levels_max_index32 = 0\n \
    \   var paren_levels_max_index33 = 0\n    var paren_levels_max_index34 = 0\n \
    \   var paren_levels_max_index35 = 0\n    var paren_levels_max_index36 = 0\n \
    \   var paren_levels_max_index37 = 0\n    var paren_levels_max_index38 = 0\n \
    \   var paren_levels_max_index39 = 0\n    var paren_levels_max_index40 = 0\n \
    \   var paren_levels_max_index41 = 0\n    var paren_levels_max_index42 = 0\n \
    \   var paren_levels_max_index43 = 0\n    var paren_levels_max_index44 = 0\n \
    \   var paren_levels_max_index45 = 0\n    var paren_levels_max_index46 = 0\n \
    \   var paren_levels_max_index47\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp2euc52bw.swift:58:9: error: type annotation missing in pattern\n\
    \    var paren_levels_max_index47\n        ^\n"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_start_index = 0\n    var paren_end_index = 0\n    var paren_start_index\
    \ = 0\n    var paren_end_index = 0\n    var paren_start_index = 0\n    var paren_end_index\
    \ = 0\n    var paren_start_index = 0\n    var paren_end_index = 0\n    var paren_start_index\
    \ = 0\n    var paren_end_index = 0\n    var paren_start_index = 0\n    var paren_end_index\
    \ = 0\n    var paren_start_index = 0\n    var paren_end_index = 0\n    var paren_start_index\
    \ = 0\n    var paren_end_index = 0\n    var paren_start_index = 0\n    var paren_end_index\
    \ = 0\n    var paren_start_index = 0\n    var paren_end_index = 0\n    var paren_start_index\
    \ = 0\n    var paren_end_index = 0\n    var paren_start_index = 0\n    var paren_end_index\
    \ = 0\n    var paren_start_index = 0\n    var paren_end_index = 0\n    var paren_start_index\
    \ = 0\n    var paren_end_index = 0\n    var paren_start_index = 0\n    var paren_end_index\
    \ = 0\n    var paren_start_index = 0\n    var paren_end_index = 0\n    var paren_start_index\
    \ = 0\n    var paren_end_index = 0\n    var paren_start_index = 0\n    var paren_end_index\
    \ = 0\n    var paren_start_index = 0\n    var paren_end_index = 0\n    var paren_start_index\
    \ = 0\n    var paren_end_index = 0\n    var paren_start_index = 0\n    var paren_end_index\
    \ = 0\n    var paren_start_index = 0\n    var paren_end_index = 0\n    var paren_start_index\
    \ = 0\n    var paren_end_index = 0\n    var paren_start_index = 0\n    var paren_end_index\
    \ = 0\n    var paren_start_index = 0\n    var paren_end_index = 0\n    var paren_start_index\
    \ = 0\n    var paren_end_index = 0\n    var paren_start_index = 0\n    var paren_end_index\
    \ = 0\n    var paren_start_index = 0\n    var paren_end_index = 0\n    var paren_start_index\
    \ = 0\n    var paren_end_index = 0\n    var paren_start_index = 0\n    var paren_end_index\
    \ = 0\n    var paren_start_index = 0\n    var paren_end_index = 0\n    var paren_start_index\
    \ = 0\n    var paren_end_index = 0\n    var paren_start_index = 0\n    var paren_end_index\
    \ = 0\n    var paren_start_index = 0\n    var paren_end_index = 0\n    var paren\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpywi7tp29.swift:14:9: error: invalid redeclaration of 'paren_start_index'\n\
    \    var paren_start_index = 0\n        ^\n/tmp/tmpywi7tp29.swift:12:9: note:\
    \ 'paren_start_index' previously declared here\n    var paren_start_index = 0\n\
    \        ^\n/tmp/tmpywi7tp29.swift:15:9: error: invalid redeclaration of 'paren_end_index'\n\
    \    var paren_end_index = 0\n        ^\n/tmp/tmpywi7tp29.swift:13:9: note: 'paren_end_index'\
    \ previously declared here\n    var paren_end_index = 0\n        ^\n/tmp/tmpywi7tp29.swift:16:9:\
    \ error: invalid redeclaration of 'paren_start_index'\n    var paren_start_index\
    \ = 0\n        ^\n/tmp/tmpywi7tp29.swift:12:9: note: 'paren_start_index' previously\
    \ declared here\n    var paren_start_index = 0\n        ^\n/tmp/tmpywi7tp29.swift:17:9:\
    \ error: invalid redeclaration of 'paren_end_index'\n    var paren_end_index =\
    \ 0\n        ^\n/tmp/tmpywi7tp29.swift:13:9: note: 'paren_end_index' previously\
    \ declared here\n    var paren_end_index = 0\n        ^\n/tmp/tmpywi7tp29.swift:18:9:\
    \ error: invalid redeclaration of 'paren_start_index'\n    var paren_start_index\
    \ = 0\n        ^\n/tmp/tmpywi7tp29.swift:12:9: note: 'paren_start_index' previously\
    \ declared here\n    var paren_start_index = 0\n        ^\n/tmp/tmpywi7tp29.swift:19:9:\
    \ error: invalid redeclaration of 'paren_end_index'\n    var paren_end_index =\
    \ 0\n        ^\n/tmp/tmpywi7tp29.swift:13:9: note: 'paren_end_index' previously\
    \ declared here\n    var paren_end_index = 0\n        ^\n/tmp/tmpywi7tp29.swift:20:9:\
    \ error: invalid redeclaration of 'paren_start_index'\n    var paren_start_index\
    \ = 0\n        ^\n/tmp/tmpywi7tp29.swift:12:9: note: 'paren_start_index' previously\
    \ declared here\n    var paren_start_index = 0\n        ^\n/tmp/tmpywi7tp29.swift:21:9:\
    \ error: invalid redeclaration of 'paren_end_index'\n    var paren_end_index =\
    \ 0\n        ^\n/tmp/tmpywi7tp29.swift:13:9: note: 'paren_end_index' previously\
    \ declared here\n    var paren_end_index = 0\n        ^\n/tmp/tmpywi7tp29.swift:22:9:\
    \ error: invalid redeclaration of 'paren_start_index'\n    var paren_start_index\
    \ = 0\n        ^\n/tmp/tmpywi7tp29.swift:12:9: no"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    for c in paren_string.unicodeScalars {\n \
    \       if c == '(' {\n            paren_count += 1\n            levels.append(paren_level)\n\
    \            paren_level = 0\n        } else if c == ')' {\n            paren_count\
    \ -= 1\n            if paren_count == 0 {\n                levels.append(paren_level)\n\
    \            }\n            paren_level = 0\n        } else {\n            paren_level\
    \ += 1\n        }\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpu93fxhfs.swift:11:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmpu93fxhfs.swift:15:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmpu93fxhfs.swift:7:9: warning: initialization of variable\
    \ 'level' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    var level = 0\n    ~~~~^~~~~\n    _\n"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_paren\
    \ = 0\n    var paren_count = 0\n    var paren_count_paren = 0\n    var paren_level\
    \ = 0\n    var paren_level_paren = 0\n    var paren_level_paren_level = 0\n  \
    \  var paren_level_paren_level_paren = 0\n    var paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren = 0\n    var paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren = 0\n   \
    \ var paren_level_paren_level_paren_level_paren_level_paren_level = 0\n    var\
    \ paren_level_paren_level_paren_level_paren_level_paren_level_paren = 0\n    var\
    \ paren_level_paren_level_paren_level_paren_level_paren_level_paren_level = 0\n\
    \    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n    var paren_level_paren_level_paren\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpq_wkjyd7.swift:29:9: error: invalid redeclaration of 'paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level'\n\
    \    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n        ^\n/tmp/tmpq_wkjyd7.swift:28:9: note: 'paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level'\
    \ previously declared here\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n        ^\n/tmp/tmpq_wkjyd7.swift:30:9: error: invalid redeclaration of\
    \ 'paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level'\n\
    \    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n        ^\n/tmp/tmpq_wkjyd7.swift:28:9: note: 'paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level'\
    \ previously declared here\n    var paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n        ^\n/tmp/tmpq_wkjyd7.swift:32:9: error: type annotation missing\
    \ in pattern\n    var paren_level_paren_level_paren\n        ^\n"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_level = 0\n    var paren_char\
    \ = 0\n    var paren_char_count = 0\n    var paren_char_index = 0\n    var paren_char_count_index\
    \ = 0\n    var paren_char_count_index_next = 0\n    var paren_char_count_index_next2\
    \ = 0\n    var paren_char_count_index_next3 = 0\n    var paren_char_count_index_next4\
    \ = 0\n    var paren_char_count_index_next5 = 0\n    var paren_char_count_index_next6\
    \ = 0\n    var paren_char_count_index_next7 = 0\n    var paren_char_count_index_next8\
    \ = 0\n    var paren_char_count_index_next9 = 0\n    var paren_char_count_index_next10\
    \ = 0\n    var paren_char_count_index_next11 = 0\n    var paren_char_count_index_next12\
    \ = 0\n    var paren_char_count_index_next13 = 0\n    var paren_char_count_index_next14\
    \ = 0\n    var paren_char_count_index_next15 = 0\n    var paren_char_count_index_next16\
    \ = 0\n    var paren_char_count_index_next17 = 0\n    var paren_char_count_index_next18\
    \ = 0\n    var paren_char_count_index_next19 = 0\n    var paren_char_count_index_next20\
    \ = 0\n    var paren_char_count_index_next21 = 0\n    var paren_char_count_index_next22\
    \ = 0\n    var paren_char_count_index_next23 = 0\n    var paren_char_count_index_next24\
    \ = 0\n    var paren_char_count_index_next25 = 0\n    var paren_char_count_index_next26\
    \ = 0\n    var paren_char_count_index_next27 = 0\n    var paren_char_count_index_next28\
    \ = 0\n    var paren_char_count_index_next29 = 0\n    var paren_char_count_index_next30\
    \ = 0\n    var paren_char_count_index_next31 = 0\n    var paren_char_count_index_next32\
    \ = 0\n    var paren_char_count_index_next33 = 0\n    var paren_char_count_index_next34\
    \ = 0\n    var paren_char_count_index_next35 = 0\n    var paren_char_count_index_next36\
    \ = 0\n    var paren_char_count_index_next37 = 0\n    var paren_char_count_index_next38\
    \ = 0\n    var paren_char_count_index_next39 = 0\n    var paren_char_count_index_next40\
    \ = 0\n    var paren_char_count_index_next41 = 0\n    var paren_char_count_index_next42\
    \ = 0\n    var paren_char_count_index_next43 = 0\n    var paren_char_count_index_next44\
    \ = 0\n    var paren_char_count_index_next45 = 0\n    var paren_char_count_index_next46\
    \ = 0\n    var paren_char_count_index_next47 = 0\n    var paren\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmphovw716l.swift:59:9: error: type annotation missing in pattern\n\
    \    var paren\n        ^\n"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_char = 0\n    var paren_char_count = 0\n    var paren_char_count_in_paren\
    \ = 0\n    var paren_char_count_in_paren_group = 0\n    var paren_char_count_in_paren_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group = 0\n    var paren_char_count_in_paren_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group = 0\n \
    \   var paren_char_count_in_paren_group_group_group_group_group_group = 0\n  \
    \  var paren_char_count_in_paren_group_group_group_group_group_group_group = 0\n\
    \    var paren_char_count_in_paren_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpen88bc3p.swift:26:9: error: invalid redeclaration of 'paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group'\n\
    \    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n        ^\n/tmp/tmpen88bc3p.swift:25:9: note: 'paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group'\
    \ previously declared here\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n        ^\n/tmp/tmpen88bc3p.swift:30:9: error: invalid redeclaration of\
    \ 'paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group'\n\
    \    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n        ^\n/tmp/tmpen88bc3p.swift:29:9: note: 'paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group'\
    \ previously declared here\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n        ^\n/tmp/tmpen88bc3p.swift:32:9: error: invalid redeclaration of\
    \ 'paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group'\n\
    \    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n        ^\n/tmp/tmpen88bc3p.swift:31:9: note: 'paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group'\
    \ previously declared here\n    var paren_char_count_in_paren_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group\
    \ = 0\n        ^\n/tmp/tmpen88bc3p.swift:33:9: error: invalid redeclara"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens = 0\n\
    \    var parens_count = 0\n    for c in paren_string.unicodeScalars {\n      \
    \  if parens_count == 0 {\n            levels.append(level)\n            parens\
    \ += 1\n            parens_count = 0\n        }\n        switch c {\n        case\
    \ .OpenSquareBracket:\n            parens_count += 1\n        case .CloseSquareBracket:\n\
    \            parens_count -= 1\n        case .OpenParenthesis:\n            parens\
    \ += 1\n        case .CloseParenthesis:\n            parens -= 1\n        case\
    \ .Newline:\n            level = 0\n            parens = 0\n            parens_count\
    \ = 0\n        case .Tab:\n            level = 0\n            parens = 0\n   \
    \         parens_count = 0\n        default:\n            level += 1\n       \
    \ }\n    }\n    levels.append(level)\n    return levels\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpxgx4juss.swift:17:15: error: type 'Unicode.Scalar' has no member\
    \ 'OpenSquareBracket'\n        case .OpenSquareBracket:\n             ~^~~~~~~~~~~~~~~~~\n\
    /tmp/tmpxgx4juss.swift:19:15: error: type 'Unicode.Scalar' has no member 'CloseSquareBracket'\n\
    \        case .CloseSquareBracket:\n             ~^~~~~~~~~~~~~~~~~~\n/tmp/tmpxgx4juss.swift:21:15:\
    \ error: type 'Unicode.Scalar' has no member 'OpenParenthesis'\n        case .OpenParenthesis:\n\
    \             ~^~~~~~~~~~~~~~~\n/tmp/tmpxgx4juss.swift:23:15: error: type 'Unicode.Scalar'\
    \ has no member 'CloseParenthesis'\n        case .CloseParenthesis:\n        \
    \     ~^~~~~~~~~~~~~~~~\n/tmp/tmpxgx4juss.swift:25:15: error: type 'Unicode.Scalar'\
    \ has no member 'Newline'\n        case .Newline:\n             ~^~~~~~~\n/tmp/tmpxgx4juss.swift:29:15:\
    \ error: type 'Unicode.Scalar' has no member 'Tab'\n        case .Tab:\n     \
    \        ~^~~\n"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var paren_level =\
    \ 0\n    var paren_max_level = 0\n    var paren_levels = [Int]()\n    var paren_max_levels\
    \ = [Int]()\n    var paren_levels_string = \"\"\n    var paren_max_levels_string\
    \ = \"\"\n    var paren_levels_string_index = 0\n    var paren_max_levels_string_index\
    \ = 0\n    var paren_levels_string_length = 0\n    var paren_max_levels_string_length\
    \ = 0\n    var paren_levels_string_value = 0\n    var paren_max_levels_string_value\
    \ = 0\n    var paren_levels_string_char = 0\n    var paren_max_levels_string_char\
    \ = 0\n    var paren_levels_string_char_length = 0\n    var paren_max_levels_string_char_length\
    \ = 0\n    var paren_levels_string_char_char = 0\n    var paren_max_levels_string_char_char\
    \ = 0\n    var paren_levels_string_char_char_length = 0\n    var paren_max_levels_string_char_char_length\
    \ = 0\n    var paren_levels_string_char_char_char = 0\n    var paren_max_levels_string_char_char_char\
    \ = 0\n    var paren_levels_string_char_char_char_length = 0\n    var paren_max_levels_string_char_char_char_length\
    \ = 0\n    var paren_levels_string_char_char_char_char = 0\n    var paren_max_levels_string_char_char_char_char\
    \ = 0\n    var paren_levels_string_char_char_char_char_length = 0\n    var paren_max_levels_string_char_char_char_char_length\
    \ = 0\n    var paren_levels_string_char_char_char_char_char = 0\n    var paren_max_levels_string_char_char_char_char_char\
    \ = 0\n    var paren_levels_string_char_char_char_char_char_length = 0\n    var\
    \ paren_max_levels_string_char_char_char_char_char_length = 0\n    var paren_levels_string_char_char_char_char_char_char\
    \ = 0\n    var paren_max_levels_string_char_char_char_char_char_char = 0\n   \
    \ var paren_levels_string_char_char_char_char_char_char_length = 0\n    var paren_max_levels_string_char_char_char_char_char_char_length\
    \ = 0\n    var paren_levels_string_char_char_char_char_char_char_char = 0\n  \
    \  var paren_max_levels_string_char_char_char_char_char_char_char = 0\n    var\
    \ paren_levels_string_char_char_char_char_char_char_char_length = 0\n    var paren_max_levels_string_char_char_char_char_char_char_char_length\
    \ = 0\n    var paren_levels_string_char_char_char_char_char_char_char_char = 0\n\
    \    var paren_max_levels_string_char_char_char_char_char_char_char_char = 0\n\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp19gmjss_.swift:6:9: warning: initialization of variable 'level'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var level = 0\n    ~~~~^~~~~\n    _\n/tmp/tmp19gmjss_.swift:7:9: warning:\
    \ initialization of variable 'max_level' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var max_level = 0\n    ~~~~^~~~~~~~~\n\
    \    _\n/tmp/tmp19gmjss_.swift:8:9: warning: initialization of variable 'paren_level'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_level = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp19gmjss_.swift:9:9:\
    \ warning: initialization of variable 'paren_max_level' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_max_level = 0\n\
    \    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmp19gmjss_.swift:10:9: warning: initialization\
    \ of variable 'paren_levels' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var paren_levels = [Int]()\n    ~~~~^~~~~~~~~~~~\n\
    \    _\n/tmp/tmp19gmjss_.swift:11:9: warning: initialization of variable 'paren_max_levels'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_max_levels = [Int]()\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp19gmjss_.swift:12:9:\
    \ warning: initialization of variable 'paren_levels_string' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_levels_string\
    \ = \"\"\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp19gmjss_.swift:13:9: warning:\
    \ initialization of variable 'paren_max_levels_string' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_max_levels_string\
    \ = \"\"\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp19gmjss_.swift:14:9:\
    \ warning: initialization of variable 'paren_levels_string_index' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var paren_levels_string_index\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp19gmjss_.swift:15:9:\
    \ warning: initialization of variable 'paren_max_levels_string_index' was never\
    \ used;"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var paren_level = [Int]()\n    var paren_level_count\
    \ = [Int]()\n    var paren_level_char = [Int]()\n    var paren_level_char_count\
    \ = [Int]()\n    var paren_level_char_index = [Int]()\n    var paren_level_char_index2\
    \ = [Int]()\n    var paren_level_char_index3 = [Int]()\n    var paren_level_char_index4\
    \ = [Int]()\n    var paren_level_char_index5 = [Int]()\n    var paren_level_char_index6\
    \ = [Int]()\n    var paren_level_char_index7 = [Int]()\n    var paren_level_char_index8\
    \ = [Int]()\n    var paren_level_char_index9 = [Int]()\n    var paren_level_char_index10\
    \ = [Int]()\n    var paren_level_char_index11 = [Int]()\n    var paren_level_char_index12\
    \ = [Int]()\n    var paren_level_char_index13 = [Int]()\n    var paren_level_char_index14\
    \ = [Int]()\n    var paren_level_char_index15 = [Int]()\n    var paren_level_char_index16\
    \ = [Int]()\n    var paren_level_char_index17 = [Int]()\n    var paren_level_char_index18\
    \ = [Int]()\n    var paren_level_char_index19 = [Int]()\n    var paren_level_char_index20\
    \ = [Int]()\n    var paren_level_char_index21 = [Int]()\n    var paren_level_char_index22\
    \ = [Int]()\n    var paren_level_char_index23 = [Int]()\n    var paren_level_char_index24\
    \ = [Int]()\n    var paren_level_char_index25 = [Int]()\n    var paren_level_char_index26\
    \ = [Int]()\n    var paren_level_char_index27 = [Int]()\n    var paren_level_char_index28\
    \ = [Int]()\n    var paren_level_char_index29 = [Int]()\n    var paren_level_char_index30\
    \ = [Int]()\n    var paren_level_char_index31 = [Int]()\n    var paren_level_char_index32\
    \ = [Int]()\n    var paren_level_char_index33 = [Int]()\n    var paren_level_char_index34\
    \ = [Int]()\n    var paren_level_char_index35 = [Int]()\n    var paren_level_char_index36\
    \ = [Int]()\n    var paren_level_char_index37 = [Int]()\n    var paren_level_char_index38\
    \ = [Int]()\n    var paren_level_char_index39 = [Int]()\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpqlusyso6.swift:6:9: warning: initialization of variable 'level'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var level = 0\n    ~~~~^~~~~\n    _\n/tmp/tmpqlusyso6.swift:7:9: warning:\
    \ initialization of variable 'paren_level' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var paren_level = [Int]()\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpqlusyso6.swift:8:9: warning: initialization of variable 'paren_level_count'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_level_count = [Int]()\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpqlusyso6.swift:9:9:\
    \ warning: initialization of variable 'paren_level_char' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_level_char =\
    \ [Int]()\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpqlusyso6.swift:10:9: warning:\
    \ initialization of variable 'paren_level_char_count' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_level_char_count\
    \ = [Int]()\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpqlusyso6.swift:11:9:\
    \ warning: initialization of variable 'paren_level_char_index' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var paren_level_char_index\
    \ = [Int]()\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpqlusyso6.swift:12:9:\
    \ warning: initialization of variable 'paren_level_char_index2' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var paren_level_char_index2\
    \ = [Int]()\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpqlusyso6.swift:13:9:\
    \ warning: initialization of variable 'paren_level_char_index3' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var paren_level_char_index3\
    \ = [Int]()\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpqlusyso6.swift:14:9:\
    \ warning: initialization of variable 'paren_level_char_index4' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var paren_level_char_index4\
    \ = [Int]()\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~\n   "
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var paren_level = 0\n    var paren_nesting\
    \ = 0\n    var paren_nesting_max = 0\n    var paren_nesting_curr = 0\n    var\
    \ paren_nesting_max_curr = 0\n    var paren_nesting_curr_index = 0\n    var paren_nesting_max_curr_index\
    \ = 0\n    var paren_nesting_max_index = 0\n    var paren_nesting_max_index2 =\
    \ 0\n    var paren_nesting_max_index3 = 0\n    var paren_nesting_max_index4 =\
    \ 0\n    var paren_nesting_max_index5 = 0\n    var paren_nesting_max_index6 =\
    \ 0\n    var paren_nesting_max_index7 = 0\n    var paren_nesting_max_index8 =\
    \ 0\n    var paren_nesting_max_index9 = 0\n    var paren_nesting_max_index10 =\
    \ 0\n    var paren_nesting_max_index11 = 0\n    var paren_nesting_max_index12\
    \ = 0\n    var paren_nesting_max_index13 = 0\n    var paren_nesting_max_index14\
    \ = 0\n    var paren_nesting_max_index15 = 0\n    var paren_nesting_max_index16\
    \ = 0\n    var paren_nesting_max_index17 = 0\n    var paren_nesting_max_index18\
    \ = 0\n    var paren_nesting_max_index19 = 0\n    var paren_nesting_max_index20\
    \ = 0\n    var paren_nesting_max_index21 = 0\n    var paren_nesting_max_index22\
    \ = 0\n    var paren_nesting_max_index23 = 0\n    var paren_nesting_max_index24\
    \ = 0\n    var paren_nesting_max_index25 = 0\n    var paren_nesting_max_index26\
    \ = 0\n    var paren_nesting_max_index27 = 0\n    var paren_nesting_max_index28\
    \ = 0\n    var paren_nesting_max_index29 = 0\n    var paren_nesting_max_index30\
    \ = 0\n    var paren_nesting_max_index31 = 0\n    var paren_nesting_max_index32\
    \ = 0\n    var paren_nesting_max_index33 = 0\n    var paren_nesting_max_index34\
    \ = 0\n    var paren_nesting_max_index35 = 0\n    var paren_nesting_max_index36\
    \ = 0\n    var paren_nesting_max_index37 = 0\n    var paren_nesting_max_index38\
    \ = 0\n    var paren_nesting_max_index39 = 0\n    var paren_nesting_max_index40\
    \ = 0\n    var paren_nesting_max_index41 = 0\n    var paren_nesting_max_index42\
    \ = 0\n    var paren_nesting_max_index43 = 0\n    var paren_nesting_max_index44\
    \ = 0\n    var paren_nesting_max_index45 = 0\n    var paren\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpxxla3fyu.swift:59:9: error: type annotation missing in pattern\n\
    \    var paren\n        ^\n"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var level\
    \ = 0\n    for c in paren_string {\n        if c == '(' {\n            paren_count\
    \ += 1\n        } else if c == ')' {\n            paren_count -= 1\n         \
    \   if paren_count == 0 {\n                levels.append(level)\n            }\n\
    \        }\n        level += 1\n    }\n    return levels\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpvaz8aaza.swift:10:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmpvaz8aaza.swift:12:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var levels = [Int]()\n    var paren_count\
    \ = 0\n    var paren_group = [String]()\n    var paren_group_count = 0\n    var\
    \ paren_group_level = 0\n    var paren_group_levels = [Int]()\n    var paren_group_paren_count\
    \ = 0\n    var paren_group_paren_group = [String]()\n    var paren_group_paren_group_count\
    \ = 0\n    var paren_group_paren_group_level = 0\n    var paren_group_paren_group_levels\
    \ = [Int]()\n    var paren_group_paren_group_paren_count = 0\n    var paren_group_paren_group_paren_group\
    \ = [String]()\n    var paren_group_paren_group_paren_group_count = 0\n    var\
    \ paren_group_paren_group_paren_group_level = 0\n    var paren_group_paren_group_paren_group_levels\
    \ = [Int]()\n    var paren_group_paren_group_paren_group_paren_count = 0\n   \
    \ var paren_group_paren_group_paren_group_paren_group = [String]()\n    var paren_group_paren_group_paren_group_paren_group_count\
    \ = 0\n    var paren_group_paren_group_paren_group_paren_group_level = 0\n   \
    \ var paren_group_paren_group_paren_group_paren_group_levels = [Int]()\n    var\
    \ paren_group_paren_group_paren_group_paren_group_paren_count = 0\n    var paren_group_paren_group_paren_group_paren_group_paren_group\
    \ = [String]()\n    var paren_group_paren_group_paren_group_paren_group_paren_group_count\
    \ = 0\n    var paren_group_paren_group_paren_group_paren_group_paren_group_level\
    \ = 0\n    var paren_group_paren_group_paren_group_paren_group_paren_group_levels\
    \ = [Int]()\n    var paren_group_paren_group_paren_group_paren_group_paren_group_paren_count\
    \ = 0\n    var paren_group_paren_group_paren_group_paren_group_paren_group_paren_group\
    \ = [String]()\n    var paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_count\
    \ = 0\n    var paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_level\
    \ = 0\n    var paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_levels\
    \ = [Int]()\n    var paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_paren_count\
    \ = 0\n    var paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_paren_group\
    \ = [String]()\n    var paren_group_\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpi8utg5fn.swift:40:9: error: type annotation missing in pattern\n\
    \    var paren_group_\n        ^\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    for c in paren_string.unicodeScalars {\n \
    \       if paren_count == 0 {\n            levels.append(level)\n            paren_level\
    \ = 0\n        }\n        switch c {\n        case .OpenSquareBracket, .CloseSquareBracket,\
    \ .OpenParenthesis, .CloseParenthesis:\n            paren_count += 1\n       \
    \ case .OpenParenthesis:\n            paren_level += 1\n        case .CloseParenthesis:\n\
    \            paren_level -= 1\n            if paren_level == 0 {\n           \
    \     levels.append(level)\n                paren_count = 0\n            }\n \
    \       }\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp3g5l_5ss.swift:16:15: error: type 'Unicode.Scalar' has no member\
    \ 'OpenSquareBracket'\n        case .OpenSquareBracket, .CloseSquareBracket, .OpenParenthesis,\
    \ .CloseParenthesis:\n             ~^~~~~~~~~~~~~~~~~\n/tmp/tmp3g5l_5ss.swift:16:35:\
    \ error: type 'Unicode.Scalar' has no member 'CloseSquareBracket'\n        case\
    \ .OpenSquareBracket, .CloseSquareBracket, .OpenParenthesis, .CloseParenthesis:\n\
    \                                 ~^~~~~~~~~~~~~~~~~~\n/tmp/tmp3g5l_5ss.swift:16:56:\
    \ error: type 'Unicode.Scalar' has no member 'OpenParenthesis'\n        case .OpenSquareBracket,\
    \ .CloseSquareBracket, .OpenParenthesis, .CloseParenthesis:\n                \
    \                                      ~^~~~~~~~~~~~~~~\n/tmp/tmp3g5l_5ss.swift:16:74:\
    \ error: type 'Unicode.Scalar' has no member 'CloseParenthesis'\n        case\
    \ .OpenSquareBracket, .CloseSquareBracket, .OpenParenthesis, .CloseParenthesis:\n\
    \                                                                        ~^~~~~~~~~~~~~~~~\n\
    /tmp/tmp3g5l_5ss.swift:18:15: error: type 'Unicode.Scalar' has no member 'OpenParenthesis'\n\
    \        case .OpenParenthesis:\n             ~^~~~~~~~~~~~~~~\n/tmp/tmp3g5l_5ss.swift:20:15:\
    \ error: type 'Unicode.Scalar' has no member 'CloseParenthesis'\n        case\
    \ .CloseParenthesis:\n             ~^~~~~~~~~~~~~~~~\n/tmp/tmp3g5l_5ss.swift:7:9:\
    \ warning: variable 'level' was never mutated; consider changing to 'let' constant\n\
    \    var level = 0\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    for c in paren_string.unicodeScalars {\n \
    \       if paren_count == 0 {\n            paren_start = c\n        }\n      \
    \  if paren_count == 0 {\n            levels.append(paren_level)\n        }\n\
    \        if paren_count == 0 {\n            paren_count = 1\n        }\n     \
    \   if c == paren_start {\n            paren_count++\n        }\n        if c\
    \ == paren_start && paren_count > 1 {\n            levels.append(paren_level)\n\
    \        }\n        if c == paren_start && paren_count == 1 {\n            levels.append(paren_level)\n\
    \        }\n        if c == paren_start && paren_count == 2 {\n            levels.append(paren_level)\n\
    \        }\n        if c == paren_start && paren_count == 3 {\n            levels.append(paren_level)\n\
    \        }\n        if c == paren_start && paren_count == 4 {\n            levels.append(paren_level)\n\
    \        }\n        if c == paren_start && paren_count == 5 {\n            levels.append(paren_level)\n\
    \        }\n        if c == paren_start && paren_count == 6 {\n            levels.append(paren_level)\n\
    \        }\n        if c == paren_start && paren_count == 7 {\n            levels.append(paren_level)\n\
    \        }\n        if c == paren_start && paren_count == 8 {\n            levels.append(paren_level)\n\
    \        }\n        if c == paren_start && paren_count == 9 {\n            levels.append(paren_level)\n\
    \        }\n        if c == paren_start && paren_count == 10 {\n            levels.append(paren_level)\n\
    \        }\n        if c == paren_start && paren_count == 11 {\n            levels.append(paren_level)\n\
    \        }\n        if c == paren_start && paren_count == 12 {\n            levels.append(paren_level)\n\
    \        }\n        if c == paren_start && paren_count == 13 {\n            levels.append(paren_level)\n\
    \        }\n        if c == paren_start && paren_count == 14 {\n            levels.append(paren_level)\n\
    \        }\n        if c == paren_start && paren_count == 15 {\n            levels.append(paren_level)\n\
    \        }\n        if c == paren_start && paren_count == 16 {\n            levels.append(paren_level)\n\
    \        }\n        if c == paren_start && paren_count == 17 {\n            levels.append(paren_level)\n\
    \        }\n        if c == paren_start && paren_count == 18 {\n            levels.append(paren_level)\n\
    \        }\n        if c == paren_start && paren_count == 19 {\n            levels.append(paren_level)\n\
    \        }\n        if c == paren_start && paren\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp2h55dah6.swift:83:37: error: expected '{' after 'if' condition\n\
    \        if c == paren_start && paren\n                                    ^\n\
    /tmp/tmp2h55dah6.swift:101:67: error: expected '}' at end of brace statement\n\
    assert(parse_nested_parens(paren_string: \"(()(())((())))\") == [4])\n       \
    \                                                           ^\n/tmp/tmp2h55dah6.swift:5:57:\
    \ note: to match this opening '{'\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n                                                        ^\n/tmp/tmp2h55dah6.swift:12:27:\
    \ error: cannot assign value of type 'Unicode.Scalar' to type 'Int'\n        \
    \    paren_start = c\n                          ^\n/tmp/tmp2h55dah6.swift:20:14:\
    \ error: referencing operator function '==' on 'BinaryInteger' requires that 'Unicode.Scalar'\
    \ conform to 'BinaryInteger'\n        if c == paren_start {\n             ^\n\
    Swift.BinaryInteger:1:11: note: where 'Self' = 'Unicode.Scalar'\nextension BinaryInteger\
    \ {\n          ^\n/tmp/tmp2h55dah6.swift:21:24: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            paren_count++\n                \
    \       ^~\n/tmp/tmp2h55dah6.swift:23:14: error: referencing operator function\
    \ '==' on 'BinaryInteger' requires that 'Unicode.Scalar' conform to 'BinaryInteger'\n\
    \        if c == paren_start && paren_count > 1 {\n             ^\nSwift.BinaryInteger:1:11:\
    \ note: where 'Self' = 'Unicode.Scalar'\nextension BinaryInteger {\n         \
    \ ^\n/tmp/tmp2h55dah6.swift:26:14: error: referencing operator function '==' on\
    \ 'BinaryInteger' requires that 'Unicode.Scalar' conform to 'BinaryInteger'\n\
    \        if c == paren_start && paren_count == 1 {\n             ^\nSwift.BinaryInteger:1:11:\
    \ note: where 'Self' = 'Unicode.Scalar'\nextension BinaryInteger {\n         \
    \ ^\n/tmp/tmp2h55dah6.swift:29:14: error: referencing operator function '==' on\
    \ 'BinaryInteger' requires that 'Unicode.Scalar' conform to 'BinaryInteger'\n\
    \        if c == paren_start && paren_count == 2 {\n             ^\nSwift.BinaryInteger:1:11:\
    \ note: where 'Self' = 'Unicode.Scalar'\nextension "
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens = 0\n\
    \    var parens_count = 0\n    var parens_level = 0\n    var parens_level_max\
    \ = 0\n    var parens_level_max_index = 0\n    var parens_level_max_count = 0\n\
    \    var parens_level_max_count_index = 0\n    var parens_level_max_count_index\
    \ = 0\n    var parens_level_max_count_index_count = 0\n    var parens_level_max_count_index_count_index\
    \ = 0\n    var parens_level_max_count_index_count_index_count = 0\n    var parens_level_max_count_index_count_index_count_index\
    \ = 0\n    var parens_level_max_count_index_count_index_count_index_count = 0\n\
    \    var parens_level_max_count_index_count_index_count_index_count_index = 0\n\
    \    var parens_level_max_count_index_count_index_count_index_count_index_count\
    \ = 0\n    var parens_level_max_count_index_count_index_count_index_count_index_count_index\
    \ = 0\n    var parens_level_max_count_index_count_index_count_index_count_index_count_index_count\
    \ = 0\n    var parens_level_max_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = 0\n    var parens_level_max_count_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = 0\n    var parens_level_max_count_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = 0\n    var parens_level_max_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = 0\n    var parens_level_max_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = 0\n    var parens_level_max_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = 0\n    var parens_level_max_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = 0\n    var parens_level_max_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = 0\n    var parens_level_max_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = 0\n    var parens_level_max_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = 0\n    var parens_level_max_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = 0\n    var parens_level_max_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = 0\n    var parens_level_max_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = 0\n    var parens_level_max_count_\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpq82ffhoi.swift:15:9: error: invalid redeclaration of 'parens_level_max_count_index'\n\
    \    var parens_level_max_count_index = 0\n        ^\n/tmp/tmpq82ffhoi.swift:14:9:\
    \ note: 'parens_level_max_count_index' previously declared here\n    var parens_level_max_count_index\
    \ = 0\n        ^\n/tmp/tmpq82ffhoi.swift:38:9: error: type annotation missing\
    \ in pattern\n    var parens_level_max_count_\n        ^\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    for ch in paren_string {\n        if ch == '(' {\n            paren_count\
    \ += 1\n        } else if ch == ')' {\n            paren_count -= 1\n        }\
    \ else if ch == ' ' && paren_count > 0 {\n            levels.append(level)\n \
    \           level = 0\n        }\n        level += 1\n    }\n    levels.append(level)\n\
    \    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpktwgyqgj.swift:10:18: error: single-quoted string literal found,\
    \ use '\"'\n        if ch == '(' {\n                 ^~~\n                 \"\
    (\"\n/tmp/tmpktwgyqgj.swift:12:25: error: single-quoted string literal found,\
    \ use '\"'\n        } else if ch == ')' {\n                        ^~~\n     \
    \                   \")\"\n/tmp/tmpktwgyqgj.swift:14:25: error: single-quoted\
    \ string literal found, use '\"'\n        } else if ch == ' ' && paren_count >\
    \ 0 {\n                        ^~~\n                        \" \"\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var max_level = 0\n    var max_level_index = 0\n    var level\
    \ = 0\n    var level_index = 0\n    var paren_count = 0\n    var paren_count_index\
    \ = 0\n    var paren_group = [String]()\n    var paren_group_index = 0\n    var\
    \ paren_group_count = 0\n    var paren_group_count_index = 0\n    var paren_group_level\
    \ = [Int]()\n    var paren_group_level_index = 0\n    var paren_group_level_count\
    \ = 0\n    var paren_group_level_count_index = 0\n    var paren_group_level_group\
    \ = [String]()\n    var paren_group_level_group_index = 0\n    var paren_group_level_group_count\
    \ = 0\n    var paren_group_level_group_count_index = 0\n    var paren_group_level_group_level\
    \ = [Int]()\n    var paren_group_level_group_level_index = 0\n    var paren_group_level_group_level_count\
    \ = 0\n    var paren_group_level_group_level_count_index = 0\n    var paren_group_level_group_level_group\
    \ = [String]()\n    var paren_group_level_group_level_group_index = 0\n    var\
    \ paren_group_level_group_level_group_count = 0\n    var paren_group_level_group_level_group_count_index\
    \ = 0\n    var paren_group_level_group_level_group_level = [Int]()\n    var paren_group_level_group_level_group_level_index\
    \ = 0\n    var paren_group_level_group_level_group_level_count = 0\n    var paren_group_level_group_level_group_level_count_index\
    \ = 0\n    var paren_group_level_group_level_group_level_group = [String]()\n\
    \    var paren_group_level_group_level_group_level_group_index = 0\n    var paren_group_level_group_level_group_level_group_count\
    \ = 0\n    var paren_group_level_group_level_group_level_group_count_index = 0\n\
    \    var paren_group_level_group_level_group_level_group_level = [Int]()\n   \
    \ var paren_group_level_group_level_group_level_group_level_index = 0\n    var\
    \ paren_group_level_group_level_group_level_group_level_count = 0\n    var paren_group_level_group_level_group_level_group_level_count_index\
    \ = 0\n    var paren_group_level_group_level_group_level_group_level_group = [String]()\n\
    \    var paren_group_level_group_level_group_level_group_level_group_index = 0\n\
    \    var paren_group_level_group_level_group_level_group_level_group_count = 0\n\
    \    var paren_group_level_group_level_group_level_group_level_group_count_index\
    \ = 0\n    var paren_group_level_group_level_group_level_group_level_group_level\
    \ = [Int]()\n    var paren_group_level_group_level_group_level_group_level_group_level_index\
    \ = 0\n    var paren_group_level_group_level_group_level_group_level_group_level_count\
    \ = 0\n    var paren_group_level_group_level_group_level_group_level_group_level_count_index\
    \ = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp93v4d8hv.swift:6:9: warning: initialization of variable 'max_level'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var max_level = 0\n    ~~~~^~~~~~~~~\n    _\n/tmp/tmp93v4d8hv.swift:7:9: warning:\
    \ initialization of variable 'max_level_index' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var max_level_index = 0\n    ~~~~^~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp93v4d8hv.swift:8:9: warning: initialization of variable 'level'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var level = 0\n    ~~~~^~~~~\n    _\n/tmp/tmp93v4d8hv.swift:9:9: warning:\
    \ initialization of variable 'level_index' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var level_index = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp93v4d8hv.swift:10:9: warning: initialization of variable 'paren_count'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_count = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp93v4d8hv.swift:11:9:\
    \ warning: initialization of variable 'paren_count_index' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_count_index =\
    \ 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp93v4d8hv.swift:12:9: warning: initialization\
    \ of variable 'paren_group' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var paren_group = [String]()\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp93v4d8hv.swift:13:9: warning: initialization of variable 'paren_group_index'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_group_index = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp93v4d8hv.swift:14:9:\
    \ warning: initialization of variable 'paren_group_count' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_group_count =\
    \ 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp93v4d8hv.swift:15:9: warning: initialization\
    \ of variable 'paren_group_count_index' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var paren_group"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var level\
    \ = 0\n    var paren_level = 0\n    for c in paren_string.unicodeScalars {\n \
    \       if paren_count == 0 {\n            levels.append(level)\n        }\n \
    \       if paren_count == 1 && c == paren_string.unicodeScalars.first {\n    \
    \        levels.append(level)\n        }\n        if paren_count == 1 && c ==\
    \ paren_string.unicodeScalars.last {\n            levels.append(level)\n     \
    \   }\n        if paren_count == 1 && c == paren_string.unicodeScalars.first {\n\
    \            levels.append(level)\n        }\n        if paren_count == 1 && c\
    \ == paren_string.unicodeScalars.last {\n            levels.append(level)\n  \
    \      }\n        if paren_count == 1 && c == paren_string.unicodeScalars.first\
    \ {\n            levels.append(level)\n        }\n        if paren_count == 1\
    \ && c == paren_string.unicodeScalars.last {\n            levels.append(level)\n\
    \        }\n        if paren_count == 1 && c == paren_string.unicodeScalars.first\
    \ {\n            levels.append(level)\n        }\n        if paren_count == 1\
    \ && c == paren_string.unicodeScalars.last {\n            levels.append(level)\n\
    \        }\n        if paren_count == 1 && c == paren_string.unicodeScalars.first\
    \ {\n            levels.append(level)\n        }\n        if paren_count == 1\
    \ && c == paren_string.unicodeScalars.last {\n            levels.append(level)\n\
    \        }\n        if paren_count == 1 && c == paren_string.unicodeScalars.first\
    \ {\n            levels.append(level)\n        }\n        if paren_count == 1\
    \ && c == paren_string.unicodeScalars.last {\n            levels.append(level)\n\
    \        }\n        if paren_count == 1 && c == paren_string.unicodeScalars.first\
    \ {\n            levels.append(level)\n        }\n        if paren_count == 1\
    \ && c == paren_string.unicodeScalars.last {\n            levels.append(level)\n\
    \        }\n        if paren_count == 1 && c == paren_string.unicodeScalars.first\
    \ {\n            levels.append(level)\n        }\n        if paren_count == 1\
    \ && c == paren_string.unicodeScalars.last {\n            levels.append(level)\n\
    \        }\n        if paren_count == 1 && c == paren_string.unicodeScalars.first\
    \ {\n            levels.append(level)\n        }\n        if paren_count == 1\
    \ && c == paren_string.unicodeScalars.last {\n            levels.append(level)\n\
    \        }\n        if paren_count == 1 && c == paren_string.unicodeScalars.first\
    \ {\n            levels.append(level)\n        }\n        if paren_count == 1\
    \ && c == paren_string.unicodeScalars.last {\n            levels.append(level)\n\
    \        }\n        if paren_count == 1 && c == paren_string.unicodeScalars.first\
    \ {\n            levels.append(level)\n        }\n        if paren_count == 1\
    \ && c == \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp4rf1ejrs.swift:78:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmp4rf1ejrs.swift:95:67: error: expected '}' at end of brace statement\n\
    assert(parse_nested_parens(paren_string: \"(()(())((())))\") == [4])\n       \
    \                                                           ^\n/tmp/tmp4rf1ejrs.swift:5:57:\
    \ note: to match this opening '{'\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n                                                        ^\n/tmp/tmp4rf1ejrs.swift:81:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    for c in paren_string.unicodeScalars {\n        if paren_count == 0\
    \ {\n            levels.append(paren_level)\n        }\n        switch c {\n \
    \       case .OpenSquareBracket:\n            paren_count += 1\n        case .CloseSquareBracket:\n\
    \            paren_count -= 1\n        case .OpenParenthesis:\n            paren_level\
    \ += 1\n        case .CloseParenthesis:\n            paren_level -= 1\n      \
    \  }\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpbe_n4zlp.swift:14:15: error: type 'Unicode.Scalar' has no member\
    \ 'OpenSquareBracket'\n        case .OpenSquareBracket:\n             ~^~~~~~~~~~~~~~~~~\n\
    /tmp/tmpbe_n4zlp.swift:16:15: error: type 'Unicode.Scalar' has no member 'CloseSquareBracket'\n\
    \        case .CloseSquareBracket:\n             ~^~~~~~~~~~~~~~~~~~\n/tmp/tmpbe_n4zlp.swift:18:15:\
    \ error: type 'Unicode.Scalar' has no member 'OpenParenthesis'\n        case .OpenParenthesis:\n\
    \             ~^~~~~~~~~~~~~~~\n/tmp/tmpbe_n4zlp.swift:20:15: error: type 'Unicode.Scalar'\
    \ has no member 'CloseParenthesis'\n        case .CloseParenthesis:\n        \
    \     ~^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_end_count = 0\n    var paren_end_level = 0\n    var paren_end_start\
    \ = 0\n    var paren_end_end = 0\n    var paren_end_end_count = 0\n    var paren_end_end_level\
    \ = 0\n    var paren_end_start_end = 0\n    var paren_end_start_end_count = 0\n\
    \    var paren_end_start_end_level = 0\n    var paren_end_start_end_start = 0\n\
    \    var paren_end_start_end_end = 0\n    var paren_end_start_end_end_count =\
    \ 0\n    var paren_end_start_end_end_level = 0\n    var paren_end_start_end_start_end\
    \ = 0\n    var paren_end_start_end_start_end_count = 0\n    var paren_end_start_end_start_end_level\
    \ = 0\n    var paren_end_start_end_start_start_end = 0\n    var paren_end_start_end_start_start_end_count\
    \ = 0\n    var paren_end_start_end_start_start_end_level = 0\n    var paren_end_start_end_start_start_end_start\
    \ = 0\n    var paren_end_start_end_start_start_end_end = 0\n    var paren_end_start_end_start_start_end_end_count\
    \ = 0\n    var paren_end_start_end_start_start_end_end_level = 0\n    var paren_end_start_end_start_start_start_end_start\
    \ = 0\n    var paren_end_start_end_start_start_end_end = 0\n    var paren_end_start_end_start_start_end_end_count\
    \ = 0\n    var paren_end_start_end_start_start_end_end_level = 0\n    var paren_end_start_end_start_start_end_start_end\
    \ = 0\n    var paren_end_start_end_start_start_end_start_end_count = 0\n    var\
    \ paren_end_start_end_start_start_end_start_end_level = 0\n    var paren_end_start_end_start_start_end_start_start_end\
    \ = 0\n    var paren_end_start_end_start_start_end_start_end_count = 0\n    var\
    \ paren_end_start_end_start_start_end_start_end_level = 0\n    var paren_end_start_end_start_start_end_start_start_end\
    \ = 0\n    var paren_end_start_end_start_start_end_start_end_count = 0\n    var\
    \ paren_end_start_end_start_start_end_start_end_level = 0\n    var paren_end_start_end_start_start_end_start_start_end\
    \ = 0\n    var paren_end_start_end_start_start_end_start_end_count = 0\n    var\
    \ paren_end_start_end_start_start_end_start_end_level = 0\n    var paren_end_start_end_start_start_end_start_start_end_end\
    \ = 0\n    var paren_end_start_end_start_start_end_start_end_end_count = 0\n \
    \   var paren_end_start_end_start_start_end_start_end_level = 0\n    var paren_end_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpxudukkhj.swift:36:9: error: invalid redeclaration of 'paren_end_start_end_start_start_end_end'\n\
    \    var paren_end_start_end_start_start_end_end = 0\n        ^\n/tmp/tmpxudukkhj.swift:32:9:\
    \ note: 'paren_end_start_end_start_start_end_end' previously declared here\n \
    \   var paren_end_start_end_start_start_end_end = 0\n        ^\n/tmp/tmpxudukkhj.swift:37:9:\
    \ error: invalid redeclaration of 'paren_end_start_end_start_start_end_end_count'\n\
    \    var paren_end_start_end_start_start_end_end_count = 0\n        ^\n/tmp/tmpxudukkhj.swift:33:9:\
    \ note: 'paren_end_start_end_start_start_end_end_count' previously declared here\n\
    \    var paren_end_start_end_start_start_end_end_count = 0\n        ^\n/tmp/tmpxudukkhj.swift:38:9:\
    \ error: invalid redeclaration of 'paren_end_start_end_start_start_end_end_level'\n\
    \    var paren_end_start_end_start_start_end_end_level = 0\n        ^\n/tmp/tmpxudukkhj.swift:34:9:\
    \ note: 'paren_end_start_end_start_start_end_end_level' previously declared here\n\
    \    var paren_end_start_end_start_start_end_end_level = 0\n        ^\n/tmp/tmpxudukkhj.swift:43:9:\
    \ error: invalid redeclaration of 'paren_end_start_end_start_start_end_start_end_count'\n\
    \    var paren_end_start_end_start_start_end_start_end_count = 0\n        ^\n\
    /tmp/tmpxudukkhj.swift:40:9: note: 'paren_end_start_end_start_start_end_start_end_count'\
    \ previously declared here\n    var paren_end_start_end_start_start_end_start_end_count\
    \ = 0\n        ^\n/tmp/tmpxudukkhj.swift:44:9: error: invalid redeclaration of\
    \ 'paren_end_start_end_start_start_end_start_end_level'\n    var paren_end_start_end_start_start_end_start_end_level\
    \ = 0\n        ^\n/tmp/tmpxudukkhj.swift:41:9: note: 'paren_end_start_end_start_start_end_start_end_level'\
    \ previously declared here\n    var paren_end_start_end_start_start_end_start_end_level\
    \ = 0\n        ^\n/tmp/tmpxudukkhj.swift:45:9: error: invalid redeclaration of\
    \ 'paren_end_start_end_start_start_end_start_start_end'\n    var paren_end_start_end_start_start_end_start_start_end\
    \ = 0\n        ^\n/tmp/tmpxudukkhj.swift:42:9: note: 'paren_end_start_end_start_start_en"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_levels_len = 0\n    var paren_levels_lens = [Int]()\n\
    \    var paren_levels_lens_len = 0\n    var paren_levels_lens_lens = [Int]()\n\
    \    var paren_levels_lens_lens_len = 0\n    var paren_levels_lens_lens_lens =\
    \ [Int]()\n    var paren_levels_lens_lens_lens_len = 0\n    var paren_levels_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_len = 0\n    var paren_levels_lens_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_len = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_lens_len = 0\n    var\
    \ paren_levels_lens_lens_lens_lens_lens_lens_lens = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_len\
    \ = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens = [Int]()\n\
    \    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_len = 0\n    var\
    \ paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens = [Int]()\n    var\
    \ paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_len = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\
    \ = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\
    \ = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpdkhjhsvp.swift:32:84: error: expected member name or constructor\
    \ call after type name\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int]\n                                                                  \
    \                 ^\n/tmp/tmpdkhjhsvp.swift:32:88: note: add arguments after the\
    \ type to construct a value of the type\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int]\n                                                                  \
    \                     ^\n                                                    \
    \                                    ()\n/tmp/tmpdkhjhsvp.swift:32:88: note: use\
    \ '.self' to reference the type object\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int]\n                                                                  \
    \                     ^\n                                                    \
    \                                    .self\n/tmp/tmpdkhjhsvp.swift:6:9: warning:\
    \ initialization of variable 'levels' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var levels = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n/tmp/tmpdkhjhsvp.swift:7:9: warning: initialization of variable 'paren_level'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_level = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpdkhjhsvp.swift:8:9:\
    \ warning: initialization of variable 'paren_levels' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_levels = [Int]()\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpdkhjhsvp.swift:9:9: warning: initialization\
    \ of variable 'paren_levels_len' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var paren_levels_len = 0\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpdkhjhsvp.swift:10:9: warning: initialization of variable 'paren_levels_lens'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_levels_lens = [Int]()\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpdkhjhsvp.sw"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_levels_len = 0\n    var paren_levels_lens = [Int]()\n\
    \    var paren_levels_lens_len = 0\n    var paren_levels_lens_lens = [Int]()\n\
    \    var paren_levels_lens_lens_len = 0\n    var paren_levels_lens_lens_lens =\
    \ [Int]()\n    var paren_levels_lens_lens_lens_len = 0\n    var paren_levels_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_len = 0\n    var paren_levels_lens_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_len = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_lens_len = 0\n    var\
    \ paren_levels_lens_lens_lens_lens_lens_lens_lens = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_len\
    \ = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens = [Int]()\n\
    \    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_len = 0\n    var\
    \ paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens = [Int]()\n    var\
    \ paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_len = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\
    \ = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\
    \ = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpdkhjhsvp.swift:32:84: error: expected member name or constructor\
    \ call after type name\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int]\n                                                                  \
    \                 ^\n/tmp/tmpdkhjhsvp.swift:32:88: note: add arguments after the\
    \ type to construct a value of the type\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int]\n                                                                  \
    \                     ^\n                                                    \
    \                                    ()\n/tmp/tmpdkhjhsvp.swift:32:88: note: use\
    \ '.self' to reference the type object\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int]\n                                                                  \
    \                     ^\n                                                    \
    \                                    .self\n/tmp/tmpdkhjhsvp.swift:6:9: warning:\
    \ initialization of variable 'levels' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var levels = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n/tmp/tmpdkhjhsvp.swift:7:9: warning: initialization of variable 'paren_level'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_level = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpdkhjhsvp.swift:8:9:\
    \ warning: initialization of variable 'paren_levels' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_levels = [Int]()\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpdkhjhsvp.swift:9:9: warning: initialization\
    \ of variable 'paren_levels_len' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var paren_levels_len = 0\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpdkhjhsvp.swift:10:9: warning: initialization of variable 'paren_levels_lens'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_levels_lens = [Int]()\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpdkhjhsvp.sw"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var paren_level = 0\n    var paren_nesting\
    \ = 0\n    var paren_nesting_level = 0\n    var paren_nesting_nesting = 0\n  \
    \  var paren_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_level = 0\n    var paren_nesting_level =\
    \ 0\n    var paren_nesting = 0\n    var paren_level = 0\n    var paren_nesting_level\
    \ = 0\n    var paren_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_level\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpe11w2l1r.swift:17:9: error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_level'\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpe11w2l1r.swift:15:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_level' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpe11w2l1r.swift:18:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_nesting'\n\
    \    var paren_nesting_nesting_nesting_nesting_nesting = 0\n        ^\n/tmp/tmpe11w2l1r.swift:16:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_nesting' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nesting_nesting = 0\n        ^\n/tmp/tmpe11w2l1r.swift:19:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_level'\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpe11w2l1r.swift:15:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_level' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpe11w2l1r.swift:20:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_nesting'\n\
    \    var paren_nesting_nesting_nesting_nesting_nesting = 0\n        ^\n/tmp/tmpe11w2l1r.swift:16:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_nesting' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nesting_nesting = 0\n        ^\n/tmp/tmpe11w2l1r.swift:21:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_level'\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpe11w2l1r.swift:15:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_level' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpe11w2l1r.swift:22:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_nesting'\n\
    \    var paren_nesting_nesting_nesting_nesting_nesting = 0\n        ^\n/tmp/tmpe11w2l1r.swift:16:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_nesting' previously declared here\n\
    \    var paren_nesting_"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_open = false\n    var paren_close = false\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n \
    \   var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n \
    \   var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n \
    \   var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n \
    \   var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n \
    \   var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n \
    \   var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n \
    \   var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n \
    \   var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmptnsanc84.swift:12:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmptnsanc84.swift:8:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmptnsanc84.swift:13:9:\
    \ error: invalid redeclaration of 'paren_levels'\n    var paren_levels = [Int]()\n\
    \        ^\n/tmp/tmptnsanc84.swift:11:9: note: 'paren_levels' previously declared\
    \ here\n    var paren_levels = [Int]()\n        ^\n/tmp/tmptnsanc84.swift:14:9:\
    \ error: invalid redeclaration of 'paren_level'\n    var paren_level = 0\n   \
    \     ^\n/tmp/tmptnsanc84.swift:8:9: note: 'paren_level' previously declared here\n\
    \    var paren_level = 0\n        ^\n/tmp/tmptnsanc84.swift:15:9: error: invalid\
    \ redeclaration of 'paren_levels'\n    var paren_levels = [Int]()\n        ^\n\
    /tmp/tmptnsanc84.swift:11:9: note: 'paren_levels' previously declared here\n \
    \   var paren_levels = [Int]()\n        ^\n/tmp/tmptnsanc84.swift:16:9: error:\
    \ invalid redeclaration of 'paren_level'\n    var paren_level = 0\n        ^\n\
    /tmp/tmptnsanc84.swift:8:9: note: 'paren_level' previously declared here\n   \
    \ var paren_level = 0\n        ^\n/tmp/tmptnsanc84.swift:17:9: error: invalid\
    \ redeclaration of 'paren_levels'\n    var paren_levels = [Int]()\n        ^\n\
    /tmp/tmptnsanc84.swift:11:9: note: 'paren_levels' previously declared here\n \
    \   var paren_levels = [Int]()\n        ^\n/tmp/tmptnsanc84.swift:18:9: error:\
    \ invalid redeclaration of 'paren_level'\n    var paren_level = 0\n        ^\n\
    /tmp/tmptnsanc84.swift:8:9: note: 'paren_level' previously declared here\n   \
    \ var paren_level = 0\n        ^\n/tmp/tmptnsanc84.swift:19:9: error: invalid\
    \ redeclaration of 'paren_levels'\n    var paren_levels = [Int]()\n        ^\n\
    /tmp/tmptnsanc84.swift:11:9: note: 'paren_levels' previously declared here\n \
    \   var paren_levels = [Int]()\n        ^\n/tmp/tmptnsanc84.swift:20:9: error:\
    \ invalid redeclaration of 'paren_level'\n    var paren_level = 0\n        ^\n\
    /tmp/tmptnsanc84.swift:8:9: note: 'paren_level' previously declared here\n   \
    \ var paren_level = 0\n        ^\n/tmp/tmptnsanc84.swift:21:9: error: "
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_char_count\
    \ = 0\n    var paren_char = \"\"\n    var paren_char_next = \"\"\n    var paren_char_prev\
    \ = \"\"\n    var paren_char_prev2 = \"\"\n    var paren_char_next2 = \"\"\n \
    \   var paren_char_next3 = \"\"\n    var paren_char_prev3 = \"\"\n    var paren_char_prev4\
    \ = \"\"\n    var paren_char_next4 = \"\"\n    var paren_char_next5 = \"\"\n \
    \   var paren_char_prev5 = \"\"\n    var paren_char_prev6 = \"\"\n    var paren_char_next6\
    \ = \"\"\n    var paren_char_next7 = \"\"\n    var paren_char_prev7 = \"\"\n \
    \   var paren_char_prev8 = \"\"\n    var paren_char_next8 = \"\"\n    var paren_char_next9\
    \ = \"\"\n    var paren_char_prev9 = \"\"\n    var paren_char_prev10 = \"\"\n\
    \    var paren_char_next10 = \"\"\n    var paren_char_next11 = \"\"\n    var paren_char_prev11\
    \ = \"\"\n    var paren_char_prev12 = \"\"\n    var paren_char_next12 = \"\"\n\
    \    var paren_char_next13 = \"\"\n    var paren_char_prev13 = \"\"\n    var paren_char_prev14\
    \ = \"\"\n    var paren_char_next14 = \"\"\n    var paren_char_next15 = \"\"\n\
    \    var paren_char_prev15 = \"\"\n    var paren_char_prev16 = \"\"\n    var paren_char_next16\
    \ = \"\"\n    var paren_char_next17 = \"\"\n    var paren_char_prev17 = \"\"\n\
    \    var paren_char_prev18 = \"\"\n    var paren_char_next18 = \"\"\n    var paren_char_next19\
    \ = \"\"\n    var paren_char_prev19 = \"\"\n    var paren_char_prev20 = \"\"\n\
    \    var paren_char_next20 = \"\"\n    var paren_char_next21 = \"\"\n    var paren_char_prev21\
    \ = \"\"\n    var paren_char_prev22 = \"\"\n    var paren_char_next22 = \"\"\n\
    \    var paren_char_next23 = \"\"\n    var paren_char_prev23 = \"\"\n    var paren_char_prev24\
    \ = \"\"\n    var paren_char_next24 = \"\"\n    var paren_char_next25 = \"\"\n\
    \    var paren_char_prev25 = \"\"\n    var paren_char_prev26 = \"\"\n    var paren_char_next26\
    \ = \"\"\n    var paren_char_next27 = \"\"\n    var paren_char_prev27 = \"\"\n\
    \    var paren_char_prev28 = \"\"\n    var paren_char_next28 = \"\"\n    var paren_char_next29\
    \ = \"\"\n    var paren_char_prev29 = \"\"\n    var paren_char_prev30\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpgvgrgbvi.swift:71:9: error: type annotation missing in pattern\n\
    \    var paren_char_prev30\n        ^\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_start_index = 0\n    var paren_end_index = 0\n    var paren_char_count\
    \ = 0\n    var paren_char_level = 0\n    var paren_char_start = 0\n    var paren_char_end\
    \ = 0\n    var paren_char_start_index = 0\n    var paren_char_end_index = 0\n\
    \    var paren_char_char_count = 0\n    var paren_char_char_level = 0\n    var\
    \ paren_char_char_start = 0\n    var paren_char_char_end = 0\n    var paren_char_char_start_index\
    \ = 0\n    var paren_char_char_end_index = 0\n    var paren_char_char_char_count\
    \ = 0\n    var paren_char_char_char_level = 0\n    var paren_char_char_char_start\
    \ = 0\n    var paren_char_char_char_end = 0\n    var paren_char_char_char_start_index\
    \ = 0\n    var paren_char_char_char_end_index = 0\n    var paren_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_level = 0\n    var paren_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_end = 0\n    var paren_char_char_char_char_start_index\
    \ = 0\n    var paren_char_char_char_char_end_index = 0\n    var paren_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_char_end = 0\n    var paren_char_char_char_char_char_start_index\
    \ = 0\n    var paren_char_char_char_char_char_end_index = 0\n    var paren_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_char_char_end = 0\n    var paren_char_char_char_char_char_char_start_index\
    \ = 0\n    var paren_char_char_char_char_char_char_end_index = 0\n    var paren_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_char_char_char_end = 0\n    var paren_char_char_char_char_char_char_char_start_index\
    \ = 0\n    var paren_char_char_char_char_char_char_char_end_index = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpr7hiu_e2.swift:58:9: error: type annotation missing in pattern\n\
    \    var paren\n        ^\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var paren_level = 0\n    var paren_nesting\
    \ = 0\n    var paren_nesting_level = 0\n    var paren_nesting_nesting = 0\n  \
    \  var paren_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_nesting_level = 0\n    var\
    \ paren_nesting_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_nesting_level = 0\n    var\
    \ paren_nesting_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_nesting_level = 0\n    var\
    \ paren_nesting_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_level\
    \ = 0\n    var paren_nesting_level = 0\n    var paren_level = 0\n    var paren_nesting_level\
    \ = 0\n    var paren_nesting_nesting_level = 0\n    var paren_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_level\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpbhu3ngve.swift:17:9: error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_nesting_level'\n\
    \    var paren_nesting_nesting_nesting_nesting_nesting_level = 0\n        ^\n\
    /tmp/tmpbhu3ngve.swift:16:9: note: 'paren_nesting_nesting_nesting_nesting_nesting_level'\
    \ previously declared here\n    var paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n        ^\n/tmp/tmpbhu3ngve.swift:18:9: error: invalid redeclaration of\
    \ 'paren_nesting_nesting_nesting_nesting_nesting_level'\n    var paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n        ^\n/tmp/tmpbhu3ngve.swift:16:9: note: 'paren_nesting_nesting_nesting_nesting_nesting_level'\
    \ previously declared here\n    var paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n        ^\n/tmp/tmpbhu3ngve.swift:19:9: error: invalid redeclaration of\
    \ 'paren_nesting_nesting_nesting_nesting_nesting_level'\n    var paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n        ^\n/tmp/tmpbhu3ngve.swift:16:9: note: 'paren_nesting_nesting_nesting_nesting_nesting_level'\
    \ previously declared here\n    var paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n        ^\n/tmp/tmpbhu3ngve.swift:20:9: error: invalid redeclaration of\
    \ 'paren_nesting_nesting_nesting_nesting_nesting_level'\n    var paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n        ^\n/tmp/tmpbhu3ngve.swift:16:9: note: 'paren_nesting_nesting_nesting_nesting_nesting_level'\
    \ previously declared here\n    var paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n        ^\n/tmp/tmpbhu3ngve.swift:21:9: error: invalid redeclaration of\
    \ 'paren_nesting_nesting_nesting_nesting_nesting_level'\n    var paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n        ^\n/tmp/tmpbhu3ngve.swift:16:9: note: 'paren_nesting_nesting_nesting_nesting_nesting_level'\
    \ previously declared here\n    var paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n        ^\n/tmp/tmpbhu3ngve.swift:22:9: error: invalid redeclaration of\
    \ 'paren_nesting_nesting_nesting_nesting_nesting_level'\n    var paren_nesting_nesting_nesting_nesting_ne"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    for c in paren_string.unicodeScalars {\n \
    \       if paren_count == 0 {\n            levels.append(level)\n            paren_count\
    \ += 1\n        }\n        switch c {\n        case ')':\n            paren_count\
    \ -= 1\n            if paren_count == 0 {\n                levels.append(level)\n\
    \                paren_count += 1\n            }\n        case ')':\n        \
    \    level -= 1\n            if level == 0 {\n                levels.append(level)\n\
    \                paren_count += 1\n            }\n        default:\n         \
    \   level += (c >= '(' ? 1 : -1)\n        }\n    }\n    return levels\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpd1bgicrf.swift:16:14: error: single-quoted string literal found,\
    \ use '\"'\n        case ')':\n             ^~~\n             \")\"\n/tmp/tmpd1bgicrf.swift:22:14:\
    \ error: single-quoted string literal found, use '\"'\n        case ')':\n   \
    \          ^~~\n             \")\"\n/tmp/tmpd1bgicrf.swift:29:28: error: single-quoted\
    \ string literal found, use '\"'\n            level += (c >= '(' ? 1 : -1)\n \
    \                          ^~~\n                           \"(\"\n/tmp/tmpd1bgicrf.swift:22:14:\
    \ warning: literal value is already handled by previous pattern; consider removing\
    \ it\n        case ')':\n             ^~~\n/tmp/tmpd1bgicrf.swift:16:14: note:\
    \ first occurrence of identical literal pattern is here\n        case ')':\n \
    \            ^~~\n/tmp/tmpd1bgicrf.swift:9:9: warning: initialization of variable\
    \ 'paren_level' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    var paren_level = 0\n    ~~~~^~~~~~~~~~~\n    _\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_levels_len = 0\n    var paren_levels_lens = [Int]()\n\
    \    var paren_levels_lens_len = 0\n    var paren_levels_lens_lens = [Int]()\n\
    \    var paren_levels_lens_lens_len = 0\n    var paren_levels_lens_lens_lens =\
    \ [Int]()\n    var paren_levels_lens_lens_lens_len = 0\n    var paren_levels_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_len = 0\n    var paren_levels_lens_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_len = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_lens_len = 0\n    var\
    \ paren_levels_lens_lens_lens_lens_lens_lens_lens = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_len\
    \ = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens = [Int]()\n\
    \    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_len = 0\n    var\
    \ paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens = [Int]()\n    var\
    \ paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_len = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\
    \ = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\
    \ = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpdkhjhsvp.swift:32:84: error: expected member name or constructor\
    \ call after type name\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int]\n                                                                  \
    \                 ^\n/tmp/tmpdkhjhsvp.swift:32:88: note: add arguments after the\
    \ type to construct a value of the type\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int]\n                                                                  \
    \                     ^\n                                                    \
    \                                    ()\n/tmp/tmpdkhjhsvp.swift:32:88: note: use\
    \ '.self' to reference the type object\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int]\n                                                                  \
    \                     ^\n                                                    \
    \                                    .self\n/tmp/tmpdkhjhsvp.swift:6:9: warning:\
    \ initialization of variable 'levels' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var levels = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n/tmp/tmpdkhjhsvp.swift:7:9: warning: initialization of variable 'paren_level'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_level = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpdkhjhsvp.swift:8:9:\
    \ warning: initialization of variable 'paren_levels' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_levels = [Int]()\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpdkhjhsvp.swift:9:9: warning: initialization\
    \ of variable 'paren_levels_len' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var paren_levels_len = 0\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpdkhjhsvp.swift:10:9: warning: initialization of variable 'paren_levels_lens'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_levels_lens = [Int]()\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpdkhjhsvp.sw"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpbyoklpki.swift:12:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmpbyoklpki.swift:8:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmpbyoklpki.swift:13:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmpbyoklpki.swift:9:9: note: 'paren_start' previously declared here\n\
    \    var paren_start = 0\n        ^\n/tmp/tmpbyoklpki.swift:14:9: error: invalid\
    \ redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmpbyoklpki.swift:10:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmpbyoklpki.swift:15:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmpbyoklpki.swift:11:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmpbyoklpki.swift:16:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmpbyoklpki.swift:8:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmpbyoklpki.swift:17:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmpbyoklpki.swift:9:9: note: 'paren_start' previously declared here\n\
    \    var paren_start = 0\n        ^\n/tmp/tmpbyoklpki.swift:18:9: error: invalid\
    \ redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmpbyoklpki.swift:10:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmpbyoklpki.swift:19:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmpbyoklpki.swift:11:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmpbyoklpki.swift:20:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmpbyoklpki.swift:8:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmpbyoklpki.swift:21:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var p"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_open = 0\n    var paren_close = 0\n    var paren_level_count\
    \ = 0\n    var paren_open_count = 0\n    var paren_close_count = 0\n    var paren_level_count2\
    \ = 0\n    var paren_open_count2 = 0\n    var paren_close_count2 = 0\n    var\
    \ paren_level_count3 = 0\n    var paren_open_count3 = 0\n    var paren_close_count3\
    \ = 0\n    var paren_level_count4 = 0\n    var paren_open_count4 = 0\n    var\
    \ paren_close_count4 = 0\n    var paren_level_count5 = 0\n    var paren_open_count5\
    \ = 0\n    var paren_close_count5 = 0\n    var paren_level_count6 = 0\n    var\
    \ paren_open_count6 = 0\n    var paren_close_count6 = 0\n    var paren_level_count7\
    \ = 0\n    var paren_open_count7 = 0\n    var paren_close_count7 = 0\n    var\
    \ paren_level_count8 = 0\n    var paren_open_count8 = 0\n    var paren_close_count8\
    \ = 0\n    var paren_level_count9 = 0\n    var paren_open_count9 = 0\n    var\
    \ paren_close_count9 = 0\n    var paren_level_count10 = 0\n    var paren_open_count10\
    \ = 0\n    var paren_close_count10 = 0\n    var paren_level_count11 = 0\n    var\
    \ paren_open_count11 = 0\n    var paren_close_count11 = 0\n    var paren_level_count12\
    \ = 0\n    var paren_open_count12 = 0\n    var paren_close_count12 = 0\n    var\
    \ paren_level_count13 = 0\n    var paren_open_count13 = 0\n    var paren_close_count13\
    \ = 0\n    var paren_level_count14 = 0\n    var paren_open_count14 = 0\n    var\
    \ paren_close_count14 = 0\n    var paren_level_count15 = 0\n    var paren_open_count15\
    \ = 0\n    var paren_close_count15 = 0\n    var paren_level_count16 = 0\n    var\
    \ paren_open_count16 = 0\n    var paren_close_count16 = 0\n    var paren_level_count17\
    \ = 0\n    var paren_open_count17 = 0\n    var paren_close_count17 = 0\n    var\
    \ paren_level_count18 = 0\n    var paren_open_count18 = 0\n    var paren_close_count18\
    \ = 0\n    var paren_level_count19 = 0\n    var paren_open_count19 = 0\n    var\
    \ paren_close_count19 = 0\n    var paren_level_count20 = 0\n    var paren_open_count20\
    \ = 0\n    var paren_close_count20 = 0\n    var paren_level_count21\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpb_c1c2pa.swift:71:9: error: type annotation missing in pattern\n\
    \    var paren_level_count21\n        ^\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var max_level = 0\n    var level = 0\n    var paren_level =\
    \ 0\n    var paren_levels = [Int]()\n    var paren_levels_string = \"\"\n    var\
    \ paren_levels_count = 0\n    var paren_levels_string_count = 0\n    var paren_levels_string_index\
    \ = 0\n    var paren_levels_string_index_count = 0\n    var paren_levels_string_index_count_max\
    \ = 0\n    var paren_levels_string_index_count_min = 0\n    var paren_levels_string_index_count_min_index\
    \ = 0\n    var paren_levels_string_index_count_max_index = 0\n    var paren_levels_string_index_count_min_index\
    \ = 0\n    var paren_levels_string_index_count_max_index = 0\n    var paren_levels_string_index_count_min_index_count\
    \ = 0\n    var paren_levels_string_index_count_max_index_count = 0\n    var paren_levels_string_index_count_min_index_count_max\
    \ = 0\n    var paren_levels_string_index_count_max_index_count_max = 0\n    var\
    \ paren_levels_string_index_count_min_index_count_min = 0\n    var paren_levels_string_index_count_max_index_count_min\
    \ = 0\n    var paren_levels_string_index_count_min_index_count_min_index = 0\n\
    \    var paren_levels_string_index_count_max_index_count_min_index = 0\n    var\
    \ paren_levels_string_index_count_min_index_count_max_index = 0\n    var paren_levels_string_index_count_max_index_count_max_index\
    \ = 0\n    var paren_levels_string_index_count_min_index_count_min_index_count\
    \ = 0\n    var paren_levels_string_index_count_max_index_count_min_index_count\
    \ = 0\n    var paren_levels_string_index_count_min_index_count_max_index_count\
    \ = 0\n    var paren_levels_string_index_count_max_index_count_max_index_count\
    \ = 0\n    var paren_levels_string_index_count_min_index_count_min_index_count_max\
    \ = 0\n    var paren_levels_string_index_count_max_index_count_min_index_count_max\
    \ = 0\n    var paren_levels_string_index_count_min_index_count_max_index_count_max\
    \ = 0\n    var paren_levels_string_index_count_max_index_count_max_index_count_max\
    \ = 0\n    var paren_levels_string_index_count_min_index_count_min_index_count_min\
    \ = 0\n    var paren_levels_string_index_count_max_index_count_min_index_count_min\
    \ = 0\n    var paren_levels_string_index_count_min_index_count_max_index_count_min\
    \ = 0\n    var paren_levels_string_index_count_max_index_count_max_index_count_min\
    \ = 0\n    var paren_levels_string_index_count_min_index_count_min_index_count_max_index\
    \ = 0\n    var paren_levels_string_index_count_max_index_count_min_index_count_max_index\
    \ = 0\n    var paren_level\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp31efipyc.swift:19:9: error: invalid redeclaration of 'paren_levels_string_index_count_min_index'\n\
    \    var paren_levels_string_index_count_min_index = 0\n        ^\n/tmp/tmp31efipyc.swift:17:9:\
    \ note: 'paren_levels_string_index_count_min_index' previously declared here\n\
    \    var paren_levels_string_index_count_min_index = 0\n        ^\n/tmp/tmp31efipyc.swift:20:9:\
    \ error: invalid redeclaration of 'paren_levels_string_index_count_max_index'\n\
    \    var paren_levels_string_index_count_max_index = 0\n        ^\n/tmp/tmp31efipyc.swift:18:9:\
    \ note: 'paren_levels_string_index_count_max_index' previously declared here\n\
    \    var paren_levels_string_index_count_max_index = 0\n        ^\n/tmp/tmp31efipyc.swift:45:9:\
    \ error: type annotation missing in pattern\n    var paren_level\n        ^\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_char_count = 0\n    var paren_char_level\
    \ = 0\n    var paren_char_pos = 0\n    var paren_char_end = paren_string.count\n\
    \n    for _ in 0..<paren_string.count {\n        let char = paren_string[paren_char_pos]\n\
    \        paren_char_pos += 1\n        switch char {\n        case '(':\n     \
    \       paren_count += 1\n            paren_char_level = 0\n            paren_char_pos\
    \ = 0\n            paren_char_end = paren_string.count\n            levels.append(level)\n\
    \            level += 1\n        case ')':\n            paren_char_level -= 1\n\
    \            if paren_char_level == 0 {\n                levels.append(level)\n\
    \                level -= 1\n            }\n            paren_char_pos = 0\n \
    \           paren_char_end = paren_string.count\n        case ' ':\n         \
    \   paren_char_level = 0\n            paren_char_pos = 0\n            paren_char_end\
    \ = paren_string.count\n        default:\n            paren_char_level = 0\n \
    \           paren_char_pos = 0\n            paren_char_end = paren_string.count\n\
    \        }\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp_i_cr1po.swift:19:14: error: single-quoted string literal found,\
    \ use '\"'\n        case '(':\n             ^~~\n             \"(\"\n/tmp/tmp_i_cr1po.swift:26:14:\
    \ error: single-quoted string literal found, use '\"'\n        case ')':\n   \
    \          ^~~\n             \")\"\n/tmp/tmp_i_cr1po.swift:34:14: error: single-quoted\
    \ string literal found, use '\"'\n        case ' ':\n             ^~~\n      \
    \       \" \"\n/tmp/tmp_i_cr1po.swift:16:20: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        let\
    \ char = paren_string[paren_char_pos]\n                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp_i_cr1po.swift:9:9:\
    \ warning: initialization of variable 'paren_level' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var paren_level = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp_i_cr1po.swift:10:9: warning: initialization of variable 'paren_char_count'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_char_count = 0\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp_i_cr1po.swift:13:9:\
    \ warning: variable 'paren_char_end' was written to, but never read\n    var paren_char_end\
    \ = paren_string.count\n        ^\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_levels_len = 0\n    var paren_levels_lens\
    \ = [Int]()\n    var paren_levels_lens_len = 0\n    var paren_levels_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_len = 0\n    var paren_levels_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_len = 0\n    var paren_levels_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_len = 0\n    var paren_levels_lens_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_len = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_lens_len = 0\n    var\
    \ paren_levels_lens_lens_lens_lens_lens_lens_lens = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_len\
    \ = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens = [Int]()\n\
    \    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_len = 0\n    var\
    \ paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens = [Int]()\n    var\
    \ paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_len = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\
    \ = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\
    \ = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpyrmepj1o.swift:33:9: error: type annotation missing in pattern\n\
    \    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_\n   \
    \     ^\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    for c in paren_string.characters {\n        if c == '(' {\n       \
    \     paren_count += 1\n        } else if c == ')' {\n            paren_count\
    \ -= 1\n            if paren_count == 0 {\n                levels.append(level)\n\
    \            }\n        }\n        level += 1\n    }\n    return levels\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp1r00vwby.swift:10:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmp1r00vwby.swift:12:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmp1r00vwby.swift:9:27: error: 'characters' is unavailable:\
    \ Please use String directly\n    for c in paren_string.characters {\n       \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_count_parens = 0\n    var paren_count_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens = 0\n    var paren_count_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens = 0\n    var paren_count_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens =\
    \ 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n    var paren_count_parens_parens_parens_\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp_m87chy7.swift:22:9: error: invalid redeclaration of 'paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens'\n\
    \    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n        ^\n/tmp/tmp_m87chy7.swift:21:9: note: 'paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens'\
    \ previously declared here\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n        ^\n/tmp/tmp_m87chy7.swift:25:9: error: invalid redeclaration of\
    \ 'paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens'\n\
    \    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n        ^\n/tmp/tmp_m87chy7.swift:24:9: note: 'paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens'\
    \ previously declared here\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n        ^\n/tmp/tmp_m87chy7.swift:27:9: error: invalid redeclaration of\
    \ 'paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens'\n\
    \    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n        ^\n/tmp/tmp_m87chy7.swift:26:9: note: 'paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens'\
    \ previously declared here\n    var paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens\
    \ = 0\n        ^\n/tmp/tmp_m87chy7.swift:28:9: error: invalid redeclaration of\
    \ 'paren_count_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens'\n\
    \    var paren_count_parens_parens_parens_parens_parens_parens_parens_"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpbyoklpki.swift:12:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmpbyoklpki.swift:8:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmpbyoklpki.swift:13:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmpbyoklpki.swift:9:9: note: 'paren_start' previously declared here\n\
    \    var paren_start = 0\n        ^\n/tmp/tmpbyoklpki.swift:14:9: error: invalid\
    \ redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmpbyoklpki.swift:10:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmpbyoklpki.swift:15:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmpbyoklpki.swift:11:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmpbyoklpki.swift:16:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmpbyoklpki.swift:8:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmpbyoklpki.swift:17:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmpbyoklpki.swift:9:9: note: 'paren_start' previously declared here\n\
    \    var paren_start = 0\n        ^\n/tmp/tmpbyoklpki.swift:18:9: error: invalid\
    \ redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmpbyoklpki.swift:10:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmpbyoklpki.swift:19:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmpbyoklpki.swift:11:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmpbyoklpki.swift:20:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmpbyoklpki.swift:8:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmpbyoklpki.swift:21:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var p"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    for ch in\
    \ paren_string.unicodeScalars {\n        if ch == '(' {\n            paren_count\
    \ += 1\n        } else if ch == ')' {\n            paren_count -= 1\n        \
    \    if paren_count == 0 {\n                levels.append(paren_count)\n     \
    \       }\n        }\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmplaqush6o.swift:9:18: error: single-quoted string literal found,\
    \ use '\"'\n        if ch == '(' {\n                 ^~~\n                 \"\
    (\"\n/tmp/tmplaqush6o.swift:11:25: error: single-quoted string literal found,\
    \ use '\"'\n        } else if ch == ')' {\n                        ^~~\n     \
    \                   \")\"\n"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var parens_count = 0\n    var parens_count_parens = 0\n    var parens_count_parens_count\
    \ = 0\n    var parens_count_parens_count_parens = 0\n    var parens_count_parens_count_parens_count\
    \ = 0\n    var parens_count_parens_count_parens_count_parens = 0\n    var parens_count_parens_count_parens_count_parens_count\
    \ = 0\n    var parens_count_parens_count_parens_count_parens_count_parens = 0\n\
    \    var parens_count_parens_count_parens_count_parens_count_parens_count = 0\n\
    \    var parens_count_parens_count_parens_count_parens_count_parens_count_parens\
    \ = 0\n    var parens_count_parens_count_parens_count_parens_count_parens_count_parens_count\
    \ = 0\n    var parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens\
    \ = 0\n    var parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count\
    \ = 0\n    var parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens\
    \ = 0\n    var parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens\
    \ = 0\n    var parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens\
    \ = 0\n    var parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens\
    \ = 0\n    var parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens\
    \ = 0\n    var parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens\
    \ = 0\n    var parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens\
    \ = 0\n    var parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens\
    \ = 0\n    var parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmph6n6d0pt.swift:30:9: error: type annotation missing in pattern\n\
    \    var parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_parens_count_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var max_level = 0\n    var level = 0\n    var paren_level =\
    \ 0\n    var paren_level_stack = [Int]()\n    var paren_level_stack_index = 0\n\
    \    var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n   \
    \ var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n    var\
    \ paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n    var paren_level_stack_size\
    \ = 0\n    var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n\
    \    var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n   \
    \ var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n    var\
    \ paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n    var paren_level_stack_index\
    \ = 0\n    var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n\
    \    var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n   \
    \ var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n    var\
    \ paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n    var paren_level_stack_size\
    \ = 0\n    var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n\
    \    var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n   \
    \ var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n    var\
    \ paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n    var paren_level_stack_index\
    \ = 0\n    var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n\
    \    var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n   \
    \ var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n    var\
    \ paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n    var paren_level_stack_size\
    \ = 0\n    var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n\
    \    var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n   \
    \ var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n    var\
    \ paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n    var paren_level_stack_index\
    \ = 0\n    var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n\
    \    var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n   \
    \ var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n    var\
    \ paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpokw9tj8e.swift:12:9: error: invalid redeclaration of 'paren_level_stack_index'\n\
    \    var paren_level_stack_index = 0\n        ^\n/tmp/tmpokw9tj8e.swift:10:9:\
    \ note: 'paren_level_stack_index' previously declared here\n    var paren_level_stack_index\
    \ = 0\n        ^\n/tmp/tmpokw9tj8e.swift:13:9: error: invalid redeclaration of\
    \ 'paren_level_stack_size'\n    var paren_level_stack_size = 0\n        ^\n/tmp/tmpokw9tj8e.swift:11:9:\
    \ note: 'paren_level_stack_size' previously declared here\n    var paren_level_stack_size\
    \ = 0\n        ^\n/tmp/tmpokw9tj8e.swift:14:9: error: invalid redeclaration of\
    \ 'paren_level_stack_index'\n    var paren_level_stack_index = 0\n        ^\n\
    /tmp/tmpokw9tj8e.swift:10:9: note: 'paren_level_stack_index' previously declared\
    \ here\n    var paren_level_stack_index = 0\n        ^\n/tmp/tmpokw9tj8e.swift:15:9:\
    \ error: invalid redeclaration of 'paren_level_stack_size'\n    var paren_level_stack_size\
    \ = 0\n        ^\n/tmp/tmpokw9tj8e.swift:11:9: note: 'paren_level_stack_size'\
    \ previously declared here\n    var paren_level_stack_size = 0\n        ^\n/tmp/tmpokw9tj8e.swift:16:9:\
    \ error: invalid redeclaration of 'paren_level_stack_index'\n    var paren_level_stack_index\
    \ = 0\n        ^\n/tmp/tmpokw9tj8e.swift:10:9: note: 'paren_level_stack_index'\
    \ previously declared here\n    var paren_level_stack_index = 0\n        ^\n/tmp/tmpokw9tj8e.swift:17:9:\
    \ error: invalid redeclaration of 'paren_level_stack_size'\n    var paren_level_stack_size\
    \ = 0\n        ^\n/tmp/tmpokw9tj8e.swift:11:9: note: 'paren_level_stack_size'\
    \ previously declared here\n    var paren_level_stack_size = 0\n        ^\n/tmp/tmpokw9tj8e.swift:18:9:\
    \ error: invalid redeclaration of 'paren_level_stack_index'\n    var paren_level_stack_index\
    \ = 0\n        ^\n/tmp/tmpokw9tj8e.swift:10:9: note: 'paren_level_stack_index'\
    \ previously declared here\n    var paren_level_stack_index = 0\n        ^\n/tmp/tmpokw9tj8e.swift:19:9:\
    \ error: invalid redeclaration of 'paren_level_stack_size'\n    var paren_level_stack_size\
    \ = 0\n        ^\n/tmp/tmpokw9tj8e.swift:11:9: note: 'paren_level_stack_size'\
    \ previously dec"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens = 0\n\
    \    for c in paren_string.unicodeScalars {\n        if c == '(' {\n         \
    \   levels[level] = parens\n            parens += 1\n        } else if c == ')'\
    \ {\n            levels[level] = parens\n            parens -= 1\n        } else\
    \ if c == '{' {\n            levels[level] = parens\n            parens += 1\n\
    \        } else if c == '}' {\n            levels[level] = parens\n          \
    \  parens -= 1\n        }\n        level++\n    }\n    return levels\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmph1290f2g.swift:10:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmph1290f2g.swift:13:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmph1290f2g.swift:16:24: error: single-quoted string literal\
    \ found, use '\"'\n        } else if c == '{' {\n                       ^~~\n\
    \                       \"{\"\n/tmp/tmph1290f2g.swift:19:24: error: single-quoted\
    \ string literal found, use '\"'\n        } else if c == '}' {\n             \
    \          ^~~\n                       \"}\"\n/tmp/tmph1290f2g.swift:23:14: error:\
    \ cannot find operator '++' in scope; did you mean '+= 1'?\n        level++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_index\
    \ = 0\n    var max_level_char = \"\"\n    var max_level_char_length = 0\n    var\
    \ max_level_char_length_index = 0\n    var max_level_char_length_index2 = 0\n\
    \    var max_level_char_length_index3 = 0\n    var max_level_char_length_index4\
    \ = 0\n    var max_level_char_length_index5 = 0\n    var max_level_char_length_index6\
    \ = 0\n    var max_level_char_length_index7 = 0\n    var max_level_char_length_index8\
    \ = 0\n    var max_level_char_length_index9 = 0\n    var max_level_char_length_index10\
    \ = 0\n    var max_level_char_length_index11 = 0\n    var max_level_char_length_index12\
    \ = 0\n    var max_level_char_length_index13 = 0\n    var max_level_char_length_index14\
    \ = 0\n    var max_level_char_length_index15 = 0\n    var max_level_char_length_index16\
    \ = 0\n    var max_level_char_length_index17 = 0\n    var max_level_char_length_index18\
    \ = 0\n    var max_level_char_length_index19 = 0\n    var max_level_char_length_index20\
    \ = 0\n    var max_level_char_length_index21 = 0\n    var max_level_char_length_index22\
    \ = 0\n    var max_level_char_length_index23 = 0\n    var max_level_char_length_index24\
    \ = 0\n    var max_level_char_length_index25 = 0\n    var max_level_char_length_index26\
    \ = 0\n    var max_level_char_length_index27 = 0\n    var max_level_char_length_index28\
    \ = 0\n    var max_level_char_length_index29 = 0\n    var max_level_char_length_index30\
    \ = 0\n    var max_level_char_length_index31 = 0\n    var max_level_char_length_index32\
    \ = 0\n    var max_level_char_length_index33 = 0\n    var max_level_char_length_index34\
    \ = 0\n    var max_level_char_length_index35 = 0\n    var max_level_char_length_index36\
    \ = 0\n    var max_level_char_length_index37 = 0\n    var max_level_char_length_index38\
    \ = 0\n    var max_level_char_length_index39 = 0\n    var max_level_char_length_index40\
    \ = 0\n    var max_level_char_length_index41 = 0\n    var max_level_char_length_index42\
    \ = 0\n    var max_level_char_length_index43 = 0\n    var max_level_char_length_index44\
    \ = 0\n    var max_level_char_length_index45 = 0\n    var max_level_char_length_index46\
    \ = 0\n    var max_level_char_length_index47 = 0\n    var max_level_char_length_index48\
    \ = 0\n    var max_level_char_length_index49 = 0\n    var max_level_char_length_index50\
    \ = 0\n    var max_level_char_length_index51 = 0\n    var max_level_char_length_index52\
    \ = 0\n    var max_level_char_length_index53 = 0\n    var max_level_char_length_index54\
    \ = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpzwi6iugw.swift:6:9: warning: initialization of variable 'level'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var level = 0\n    ~~~~^~~~~\n    _\n/tmp/tmpzwi6iugw.swift:7:9: warning:\
    \ initialization of variable 'max_level' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var max_level = 0\n    ~~~~^~~~~~~~~\n\
    \    _\n/tmp/tmpzwi6iugw.swift:8:9: warning: initialization of variable 'max_level_index'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var max_level_index = 0\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpzwi6iugw.swift:9:9:\
    \ warning: initialization of variable 'max_level_char' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var max_level_char = \"\
    \"\n    ~~~~^~~~~~~~~~~~~~\n    _\n/tmp/tmpzwi6iugw.swift:10:9: warning: initialization\
    \ of variable 'max_level_char_length' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var max_level_char_length = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpzwi6iugw.swift:11:9: warning: initialization of variable 'max_level_char_length_index'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var max_level_char_length_index = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpzwi6iugw.swift:12:9: warning: initialization of variable 'max_level_char_length_index2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var max_level_char_length_index2 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpzwi6iugw.swift:13:9: warning: initialization of variable 'max_level_char_length_index3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var max_level_char_length_index3 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpzwi6iugw.swift:14:9: warning: initialization of variable 'max_level_char_length_index4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var max_level_char_length_index4 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var level\
    \ = 0\n    for c in paren_string.characters {\n        if c == '(' {\n       \
    \     paren_count += 1\n            levels.append(level)\n        } else if c\
    \ == ')' {\n            paren_count -= 1\n            if paren_count == 0 {\n\
    \                levels.append(level)\n            }\n        }\n        level\
    \ += 1\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpm2xviikf.swift:10:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmpm2xviikf.swift:13:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmpm2xviikf.swift:9:27: error: 'characters' is unavailable:\
    \ Please use String directly\n    for c in paren_string.characters {\n       \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    for c in paren_string.unicodeScalars {\n        if c == parenthesisOpeningCharacter\
    \ {\n            paren_count += 1\n        } else if c == parenthesisClosingCharacter\
    \ {\n            paren_count -= 1\n        }\n        if paren_count == 0 {\n\
    \            levels.append(level)\n        }\n        level += 1\n    }\n    return\
    \ levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmprazwf85h.swift:10:17: error: cannot find 'parenthesisOpeningCharacter'\
    \ in scope\n        if c == parenthesisOpeningCharacter {\n                ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmprazwf85h.swift:12:24: error: cannot find 'parenthesisClosingCharacter'\
    \ in scope\n        } else if c == parenthesisClosingCharacter {\n           \
    \            ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_levels_len = 0\n    var paren_levels_len2 = 0\n   \
    \ var paren_levels_len3 = 0\n    var paren_levels_len4 = 0\n    var paren_levels_len5\
    \ = 0\n    var paren_levels_len6 = 0\n    var paren_levels_len7 = 0\n    var paren_levels_len8\
    \ = 0\n    var paren_levels_len9 = 0\n    var paren_levels_len10 = 0\n    var\
    \ paren_levels_len11 = 0\n    var paren_levels_len12 = 0\n    var paren_levels_len13\
    \ = 0\n    var paren_levels_len14 = 0\n    var paren_levels_len15 = 0\n    var\
    \ paren_levels_len16 = 0\n    var paren_levels_len17 = 0\n    var paren_levels_len18\
    \ = 0\n    var paren_levels_len19 = 0\n    var paren_levels_len20 = 0\n    var\
    \ paren_levels_len21 = 0\n    var paren_levels_len22 = 0\n    var paren_levels_len23\
    \ = 0\n    var paren_levels_len24 = 0\n    var paren_levels_len25 = 0\n    var\
    \ paren_levels_len26 = 0\n    var paren_levels_len27 = 0\n    var paren_levels_len28\
    \ = 0\n    var paren_levels_len29 = 0\n    var paren_levels_len30 = 0\n    var\
    \ paren_levels_len31 = 0\n    var paren_levels_len32 = 0\n    var paren_levels_len33\
    \ = 0\n    var paren_levels_len34 = 0\n    var paren_levels_len35 = 0\n    var\
    \ paren_levels_len36 = 0\n    var paren_levels_len37 = 0\n    var paren_levels_len38\
    \ = 0\n    var paren_levels_len39 = 0\n    var paren_levels_len40 = 0\n    var\
    \ paren_levels_len41 = 0\n    var paren_levels_len42 = 0\n    var paren_levels_len43\
    \ = 0\n    var paren_levels_len44 = 0\n    var paren_levels_len45 = 0\n    var\
    \ paren_levels_len46 = 0\n    var paren_levels_len47 = 0\n    var paren_levels_len48\
    \ = 0\n    var paren_levels_len49 = 0\n    var paren_levels_len50 = 0\n    var\
    \ paren_levels_len51 = 0\n    var paren_levels_len52 = 0\n    var paren_levels_len53\
    \ = 0\n    var paren_levels_len54 = 0\n    var paren_levels_\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmprect68bf.swift:63:9: error: type annotation missing in pattern\n\
    \    var paren_levels_\n        ^\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    for c in paren_string.unicodeScalars {\n        if c == '(' {\n   \
    \         paren_count += 1\n        } else if c == ')' {\n            paren_count\
    \ -= 1\n            if paren_count == 0 {\n                levels.append(paren_level)\n\
    \            }\n        }\n        paren_level += (paren_count > 0)\n    }\n \
    \   return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp95oz8hof.swift:10:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmp95oz8hof.swift:12:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmp95oz8hof.swift:18:37: error: cannot convert value of type\
    \ 'Bool' to expected argument type 'Int'\n        paren_level += (paren_count\
    \ > 0)\n                                    ^\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_levels_size = 0\n    var paren_levels_sizes = [Int]()\n\
    \    var paren_levels_sizes_size = 0\n    var paren_levels_sizes_sizes = [Int]()\n\
    \    var paren_levels_sizes_sizes_size = 0\n    var paren_levels_sizes_sizes_sizes\
    \ = [Int]()\n    var paren_levels_sizes_sizes_sizes_size = 0\n    var paren_levels_sizes_sizes_sizes_sizes\
    \ = [Int]()\n    var paren_levels_sizes_sizes_sizes_sizes_size = 0\n    var paren_levels_sizes_sizes_sizes_sizes_sizes\
    \ = [Int]()\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_size = 0\n   \
    \ var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes = [Int]()\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_size\
    \ = 0\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes = [Int]()\n\
    \    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_size = 0\n   \
    \ var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes = [Int]()\n\
    \    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_size = 0\n\
    \    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes =\
    \ [Int]()\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_size\
    \ = 0\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = [Int]()\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_size\
    \ = 0\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = [Int]()\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_size\
    \ = 0\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = [Int]()\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpu2hxxgop.swift:33:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpu2hxxgop.swift:6:9: warning: initialization of variable 'level' was\
    \ never used; consider replacing with assignment to '_' or removing it\n    var\
    \ level = 0\n    ~~~~^~~~~\n    _\n/tmp/tmpu2hxxgop.swift:7:9: warning: initialization\
    \ of variable 'paren_level' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var paren_level = 0\n    ~~~~^~~~~~~~~~~\n    _\n\
    /tmp/tmpu2hxxgop.swift:8:9: warning: initialization of variable 'paren_levels'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_levels = [Int]()\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpu2hxxgop.swift:9:9:\
    \ warning: initialization of variable 'paren_levels_size' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_levels_size =\
    \ 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpu2hxxgop.swift:10:9: warning: initialization\
    \ of variable 'paren_levels_sizes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var paren_levels_sizes = [Int]()\n    ~~~~^~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpu2hxxgop.swift:11:9: warning: initialization of variable 'paren_levels_sizes_size'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_levels_sizes_size = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~\n    _\n\
    /tmp/tmpu2hxxgop.swift:12:9: warning: initialization of variable 'paren_levels_sizes_sizes'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_levels_sizes_sizes = [Int]()\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpu2hxxgop.swift:13:9: warning: initialization of variable 'paren_levels_sizes_sizes_size'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_levels_sizes_sizes_size = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpu2hxxgop.swift:14:9: warning: initialization of variable 'paren_levels_sizes_sizes_sizes'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_levels_si"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    for ch in paren_string.characters {\n        if ch == '(' {\n     \
    \       paren_count += 1\n        } else if ch == ')' {\n            paren_count\
    \ -= 1\n            if paren_count == 0 {\n                levels.append(level)\n\
    \                level = 0\n            }\n        }\n        level += 1\n   \
    \ }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpud6y6r33.swift:10:18: error: single-quoted string literal found,\
    \ use '\"'\n        if ch == '(' {\n                 ^~~\n                 \"\
    (\"\n/tmp/tmpud6y6r33.swift:12:25: error: single-quoted string literal found,\
    \ use '\"'\n        } else if ch == ')' {\n                        ^~~\n     \
    \                   \")\"\n/tmp/tmpud6y6r33.swift:9:28: error: 'characters' is\
    \ unavailable: Please use String directly\n    for ch in paren_string.characters\
    \ {\n                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_char = 0\n\
    \    var paren_char_count = 0\n    var paren_char_level = 0\n    var paren_char_start\
    \ = 0\n    var paren_char_end = 0\n    var paren_char_char = 0\n    var paren_char_char_count\
    \ = 0\n    var paren_char_char_level = 0\n    var paren_char_char_start = 0\n\
    \    var paren_char_char_end = 0\n    var paren_char_char_char = 0\n    var paren_char_char_char_count\
    \ = 0\n    var paren_char_char_char_level = 0\n    var paren_char_char_char_start\
    \ = 0\n    var paren_char_char_char_end = 0\n    var paren_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_count = 0\n    var paren_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_start = 0\n    var paren_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_char_end = 0\n    var paren_char_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_end = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_level = 0\n\
    \    var paren_char_char_char_char_char_char_char_char_char_char_start = 0\n \
    \   var paren_char_char_char_char_char_char_char_char_char_char_end = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpuh4rb4jq.swift:54:9: error: type annotation missing in pattern\n\
    \    var paren_char_char_char_char_char_char_char_char_\n        ^\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    var paren_start = -1\n    var paren_end = -1\n    var paren_levels\
    \ = [Int]()\n    for index in 0..<paren_string.characters.count {\n        let\
    \ char = paren_string.characters[index]\n        switch char {\n        case '(':\n\
    \            paren_count += 1\n            paren_level = 0\n            paren_start\
    \ = index\n            paren_end = -1\n            paren_levels.append(0)\n  \
    \      case ')':\n            paren_count -= 1\n            paren_level = paren_levels[paren_level]\n\
    \            paren_end = index\n            if paren_count == 0 {\n          \
    \      levels.append(paren_level)\n                paren_levels[paren_level] +=\
    \ 1\n            }\n        }\n    }\n    return levels\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpjtrs3bml.swift:15:14: error: single-quoted string literal found,\
    \ use '\"'\n        case '(':\n             ^~~\n             \"(\"\n/tmp/tmpjtrs3bml.swift:21:14:\
    \ error: single-quoted string literal found, use '\"'\n        case ')':\n   \
    \          ^~~\n             \")\"\n/tmp/tmpjtrs3bml.swift:12:35: error: 'characters'\
    \ is unavailable: Please use String directly\n    for index in 0..<paren_string.characters.count\
    \ {\n                                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpjtrs3bml.swift:13:20: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        let\
    \ char = paren_string.characters[index]\n                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpjtrs3bml.swift:13:33:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ char = paren_string.characters[index]\n                                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpjtrs3bml.swift:14:9:\
    \ error: switch must be exhaustive\n        switch char {\n        ^\n/tmp/tmpjtrs3bml.swift:14:9:\
    \ note: do you want to add a default clause?\n        switch char {\n        ^\n\
    /tmp/tmpjtrs3bml.swift:9:9: warning: variable 'paren_start' was written to, but\
    \ never read\n    var paren_start = -1\n        ^\n/tmp/tmpjtrs3bml.swift:10:9:\
    \ warning: variable 'paren_end' was written to, but never read\n    var paren_end\
    \ = -1\n        ^\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_levels_count = 0\n    var paren_levels_max = 0\n  \
    \  var paren_levels_max_count = 0\n    var paren_levels_max_index = 0\n    var\
    \ paren_levels_max_index2 = 0\n    var paren_levels_max_index3 = 0\n    var paren_levels_max_index4\
    \ = 0\n    var paren_levels_max_index5 = 0\n    var paren_levels_max_index6 =\
    \ 0\n    var paren_levels_max_index7 = 0\n    var paren_levels_max_index8 = 0\n\
    \    var paren_levels_max_index9 = 0\n    var paren_levels_max_index10 = 0\n \
    \   var paren_levels_max_index11 = 0\n    var paren_levels_max_index12 = 0\n \
    \   var paren_levels_max_index13 = 0\n    var paren_levels_max_index14 = 0\n \
    \   var paren_levels_max_index15 = 0\n    var paren_levels_max_index16 = 0\n \
    \   var paren_levels_max_index17 = 0\n    var paren_levels_max_index18 = 0\n \
    \   var paren_levels_max_index19 = 0\n    var paren_levels_max_index20 = 0\n \
    \   var paren_levels_max_index21 = 0\n    var paren_levels_max_index22 = 0\n \
    \   var paren_levels_max_index23 = 0\n    var paren_levels_max_index24 = 0\n \
    \   var paren_levels_max_index25 = 0\n    var paren_levels_max_index26 = 0\n \
    \   var paren_levels_max_index27 = 0\n    var paren_levels_max_index28 = 0\n \
    \   var paren_levels_max_index29 = 0\n    var paren_levels_max_index30 = 0\n \
    \   var paren_levels_max_index31 = 0\n    var paren_levels_max_index32 = 0\n \
    \   var paren_levels_max_index33 = 0\n    var paren_levels_max_index34 = 0\n \
    \   var paren_levels_max_index35 = 0\n    var paren_levels_max_index36 = 0\n \
    \   var paren_levels_max_index37 = 0\n    var paren_levels_max_index38 = 0\n \
    \   var paren_levels_max_index39 = 0\n    var paren_levels_max_index40 = 0\n \
    \   var paren_levels_max_index41 = 0\n    var paren_levels_max_index42 = 0\n \
    \   var paren_levels_max_index43 = 0\n    var paren_levels_max_index44 = 0\n \
    \   var paren_levels_max_index45 = 0\n    var paren_levels_max_index46 = 0\n \
    \   var paren_levels_max_index47\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp2euc52bw.swift:58:9: error: type annotation missing in pattern\n\
    \    var paren_levels_max_index47\n        ^\n"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    var paren_start = -1\n    var paren_end = -1\n    var paren_start_index\
    \ = -1\n    var paren_end_index = -1\n    var paren_start_index = -1\n    var\
    \ paren_end_index = -1\n    var paren_start_index = -1\n    var paren_end_index\
    \ = -1\n    var paren_start_index = -1\n    var paren_end_index = -1\n    var\
    \ paren_start_index = -1\n    var paren_end_index = -1\n    var paren_start_index\
    \ = -1\n    var paren_end_index = -1\n    var paren_start_index = -1\n    var\
    \ paren_end_index = -1\n    var paren_start_index = -1\n    var paren_end_index\
    \ = -1\n    var paren_start_index = -1\n    var paren_end_index = -1\n    var\
    \ paren_start_index = -1\n    var paren_end_index = -1\n    var paren_start_index\
    \ = -1\n    var paren_end_index = -1\n    var paren_start_index = -1\n    var\
    \ paren_end_index = -1\n    var paren_start_index = -1\n    var paren_end_index\
    \ = -1\n    var paren_start_index = -1\n    var paren_end_index = -1\n    var\
    \ paren_start_index = -1\n    var paren_end_index = -1\n    var paren_start_index\
    \ = -1\n    var paren_end_index = -1\n    var paren_start_index = -1\n    var\
    \ paren_end_index = -1\n    var paren_start_index = -1\n    var paren_end_index\
    \ = -1\n    var paren_start_index = -1\n    var paren_end_index = -1\n    var\
    \ paren_start_index = -1\n    var paren_end_index = -1\n    var paren_start_index\
    \ = -1\n    var paren_end_index = -1\n    var paren_start_index = -1\n    var\
    \ paren_end_index = -1\n    var paren_start_index = -1\n    var paren_end_index\
    \ = -1\n    var paren_start_index = -1\n    var paren_end_index = -1\n    var\
    \ paren_start_index = -1\n    var paren_end_index = -1\n    var paren_start_index\
    \ = -1\n    var paren_end_index = -1\n    var paren_start_index = -1\n    var\
    \ paren_end_index = -1\n    var paren_start_index = -1\n    var paren_end_index\
    \ = -1\n    var paren_start_index = -1\n    var paren_end_index = -1\n    var\
    \ paren_start_index = -1\n    var paren_end_index = -1\n    var paren_start_index\
    \ = -1\n    var paren_end_index = -1\n    var paren_start_index = -1\n    var\
    \ paren_end_index = -1\n    var paren_start_index = -1\n    var paren_end_index\
    \ = -1\n    var paren_start_index = -1\n    var paren_end_index = -1\n    var\
    \ paren_start_index = -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp032qmjxv.swift:13:9: error: invalid redeclaration of 'paren_start_index'\n\
    \    var paren_start_index = -1\n        ^\n/tmp/tmp032qmjxv.swift:11:9: note:\
    \ 'paren_start_index' previously declared here\n    var paren_start_index = -1\n\
    \        ^\n/tmp/tmp032qmjxv.swift:14:9: error: invalid redeclaration of 'paren_end_index'\n\
    \    var paren_end_index = -1\n        ^\n/tmp/tmp032qmjxv.swift:12:9: note: 'paren_end_index'\
    \ previously declared here\n    var paren_end_index = -1\n        ^\n/tmp/tmp032qmjxv.swift:15:9:\
    \ error: invalid redeclaration of 'paren_start_index'\n    var paren_start_index\
    \ = -1\n        ^\n/tmp/tmp032qmjxv.swift:11:9: note: 'paren_start_index' previously\
    \ declared here\n    var paren_start_index = -1\n        ^\n/tmp/tmp032qmjxv.swift:16:9:\
    \ error: invalid redeclaration of 'paren_end_index'\n    var paren_end_index =\
    \ -1\n        ^\n/tmp/tmp032qmjxv.swift:12:9: note: 'paren_end_index' previously\
    \ declared here\n    var paren_end_index = -1\n        ^\n/tmp/tmp032qmjxv.swift:17:9:\
    \ error: invalid redeclaration of 'paren_start_index'\n    var paren_start_index\
    \ = -1\n        ^\n/tmp/tmp032qmjxv.swift:11:9: note: 'paren_start_index' previously\
    \ declared here\n    var paren_start_index = -1\n        ^\n/tmp/tmp032qmjxv.swift:18:9:\
    \ error: invalid redeclaration of 'paren_end_index'\n    var paren_end_index =\
    \ -1\n        ^\n/tmp/tmp032qmjxv.swift:12:9: note: 'paren_end_index' previously\
    \ declared here\n    var paren_end_index = -1\n        ^\n/tmp/tmp032qmjxv.swift:19:9:\
    \ error: invalid redeclaration of 'paren_start_index'\n    var paren_start_index\
    \ = -1\n        ^\n/tmp/tmp032qmjxv.swift:11:9: note: 'paren_start_index' previously\
    \ declared here\n    var paren_start_index = -1\n        ^\n/tmp/tmp032qmjxv.swift:20:9:\
    \ error: invalid redeclaration of 'paren_end_index'\n    var paren_end_index =\
    \ -1\n        ^\n/tmp/tmp032qmjxv.swift:12:9: note: 'paren_end_index' previously\
    \ declared here\n    var paren_end_index = -1\n        ^\n/tmp/tmp032qmjxv.swift:21:9:\
    \ error: invalid redeclaration of 'paren_start_index'\n    var paren_start_index\
    \ = -1\n        ^\n/tmp/tmp032qmj"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens = 0\n\
    \    var parens_level = 0\n    for c in paren_string.unicodeScalars {\n      \
    \  if parens_level == 0 {\n            parens_level = 1\n        }\n        if\
    \ parens_level == 1 && c == '(' {\n            parens += 1\n            levels.append(level)\n\
    \            level = 0\n            parens_level = 0\n        } else if parens_level\
    \ == 1 && c == ')' {\n            parens -= 1\n            levels.append(level)\n\
    \            level = 0\n            parens_level = 0\n        } else if parens_level\
    \ == 1 && c == ' ' {\n            level = 0\n            parens_level = 0\n  \
    \      } else {\n            level += 1\n            parens_level += 1\n     \
    \   }\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmplcbxzy6o.swift:14:38: error: single-quoted string literal found,\
    \ use '\"'\n        if parens_level == 1 && c == '(' {\n                     \
    \                ^~~\n                                     \"(\"\n/tmp/tmplcbxzy6o.swift:19:45:\
    \ error: single-quoted string literal found, use '\"'\n        } else if parens_level\
    \ == 1 && c == ')' {\n                                            ^~~\n      \
    \                                      \")\"\n/tmp/tmplcbxzy6o.swift:24:45: error:\
    \ single-quoted string literal found, use '\"'\n        } else if parens_level\
    \ == 1 && c == ' ' {\n                                            ^~~\n      \
    \                                      \" \"\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var paren_level = 0\n    var paren_nesting\
    \ = 0\n    var paren_nesting_level = 0\n    var paren_nesting_nesting = 0\n  \
    \  var paren_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_level = 0\n    var paren_nesting_level =\
    \ 0\n    var paren_nesting = 0\n    var paren_level = 0\n    var paren_nesting_level\
    \ = 0\n    var paren_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_level\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpe11w2l1r.swift:17:9: error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_level'\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpe11w2l1r.swift:15:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_level' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpe11w2l1r.swift:18:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_nesting'\n\
    \    var paren_nesting_nesting_nesting_nesting_nesting = 0\n        ^\n/tmp/tmpe11w2l1r.swift:16:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_nesting' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nesting_nesting = 0\n        ^\n/tmp/tmpe11w2l1r.swift:19:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_level'\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpe11w2l1r.swift:15:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_level' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpe11w2l1r.swift:20:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_nesting'\n\
    \    var paren_nesting_nesting_nesting_nesting_nesting = 0\n        ^\n/tmp/tmpe11w2l1r.swift:16:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_nesting' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nesting_nesting = 0\n        ^\n/tmp/tmpe11w2l1r.swift:21:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_level'\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpe11w2l1r.swift:15:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_level' previously declared here\n\
    \    var paren_nesting_nesting_nesting_nesting_level = 0\n        ^\n/tmp/tmpe11w2l1r.swift:22:9:\
    \ error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_nesting'\n\
    \    var paren_nesting_nesting_nesting_nesting_nesting = 0\n        ^\n/tmp/tmpe11w2l1r.swift:16:9:\
    \ note: 'paren_nesting_nesting_nesting_nesting_nesting' previously declared here\n\
    \    var paren_nesting_"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    for c in paren_string.unicodeScalars {\n        if paren_count == 0 {\n \
    \           paren_start = c\n        }\n        if paren_count == 0 {\n      \
    \      paren_end = c\n        }\n        if paren_count == 0 {\n            paren_count\
    \ = 1\n        }\n        if paren_count == 1 {\n            levels.append(level)\n\
    \            paren_count = 0\n        }\n        if paren_count == 2 {\n     \
    \       levels.append(level)\n            level = 0\n            paren_count =\
    \ 0\n        }\n        if paren_count == 3 {\n            levels.append(level)\n\
    \            level = 0\n            paren_count = 0\n        }\n        if paren_count\
    \ == 4 {\n            levels.append(level)\n            level = 0\n          \
    \  paren_count = 0\n        }\n        if paren_count == 5 {\n            levels.append(level)\n\
    \            level = 0\n            paren_count = 0\n        }\n        if paren_count\
    \ == 6 {\n            levels.append(level)\n            level = 0\n          \
    \  paren_count = 0\n        }\n        if paren_count == 7 {\n            levels.append(level)\n\
    \            level = 0\n            paren_count = 0\n        }\n        if paren_count\
    \ == 8 {\n            levels.append(level)\n            level = 0\n          \
    \  paren_count = 0\n        }\n        if paren_count == 9 {\n            levels.append(level)\n\
    \            level = 0\n            paren_count = 0\n        }\n        if paren_count\
    \ == 10 {\n            levels.append(level)\n            level = 0\n         \
    \   paren_count = 0\n        }\n        if paren_count == 11 {\n            levels.append(level)\n\
    \            level = 0\n            paren_count = 0\n        }\n        if paren_count\
    \ == 12 {\n            levels.append(level)\n            level = 0\n         \
    \   paren_count = 0\n        }\n        if paren_count == 13 {\n            levels.append(level)\n\
    \            level = 0\n            paren_count = 0\n        }\n        if paren_count\
    \ == 14 {\n            levels.append(level)\n            level = 0\n         \
    \   paren_count = 0\n        }\n        if paren_count == 15 {\n            levels.append(level)\n\
    \            level = 0\n            paren_count = 0\n        }\n        if paren_count\
    \ == 16 {\n            levels.append(level)\n            level = 0\n         \
    \   paren_count = 0\n        }\n        if paren_count == 17 {\n            levels.append(level)\n\
    \            level = 0\n            paren_count = 0\n        }\n        if paren_count\
    \ == 18 {\n            levels.append(level)\n            level = 0\n         \
    \   paren_count = 0\n        }\n        if paren_count == 19 {\n            levels.append(level)\n\
    \            level = 0\n            paren_count = 0\n        }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp7aw57ng_.swift:133:67: error: expected '}' at end of brace statement\n\
    assert(parse_nested_parens(paren_string: \"(()(())((())))\") == [4])\n       \
    \                                                           ^\n/tmp/tmp7aw57ng_.swift:5:57:\
    \ note: to match this opening '{'\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n                                                        ^\n/tmp/tmp7aw57ng_.swift:14:27:\
    \ error: cannot assign value of type 'Unicode.Scalar' to type 'Int'\n        \
    \    paren_start = c\n                          ^\n/tmp/tmp7aw57ng_.swift:17:25:\
    \ error: cannot assign value of type 'Unicode.Scalar' to type 'Int'\n        \
    \    paren_end = c\n                        ^\n/tmp/tmp7aw57ng_.swift:119:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var max_level = 0\n    var levels = [Int]()\n    for paren in\
    \ paren_string.characters {\n        switch paren {\n        case ')':\n     \
    \       levels[max_level] = levels[max_level] - 1\n            if levels[max_level]\
    \ == 0 {\n                max_level = max_level - 1\n            }\n        case\
    \ ')':\n            levels[max_level] = levels[max_level] + 1\n            if\
    \ levels[max_level] > max_level {\n                max_level = levels[max_level]\n\
    \            }\n        }\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp_vd8a0r_.swift:10:14: error: single-quoted string literal found,\
    \ use '\"'\n        case ')':\n             ^~~\n             \")\"\n/tmp/tmp_vd8a0r_.swift:15:14:\
    \ error: single-quoted string literal found, use '\"'\n        case ')':\n   \
    \          ^~~\n             \")\"\n/tmp/tmp_vd8a0r_.swift:8:31: error: 'characters'\
    \ is unavailable: Please use String directly\n    for paren in paren_string.characters\
    \ {\n                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp_vd8a0r_.swift:15:14: warning: literal value is already\
    \ handled by previous pattern; consider removing it\n        case ')':\n     \
    \        ^~~\n/tmp/tmp_vd8a0r_.swift:10:14: note: first occurrence of identical\
    \ literal pattern is here\n        case ')':\n             ^~~\n/tmp/tmp_vd8a0r_.swift:9:9:\
    \ error: switch must be exhaustive\n        switch paren {\n        ^\n/tmp/tmp_vd8a0r_.swift:9:9:\
    \ note: do you want to add a default clause?\n        switch paren {\n       \
    \ ^\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens = 0\n\
    \    for c in paren_string.characters {\n        if c == '(' {\n            levels[level]\
    \ = parens\n            parens += 1\n        } else if c == ')' {\n          \
    \  levels[level] = parens\n            parens -= 1\n            if parens == 0\
    \ {\n                levels[level] = parens\n                level += 1\n    \
    \        }\n        }\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmphfobnkmb.swift:10:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmphfobnkmb.swift:13:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmphfobnkmb.swift:9:27: error: 'characters' is unavailable:\
    \ Please use String directly\n    for c in paren_string.characters {\n       \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_char = 0\n    var paren_char_count\
    \ = 0\n    var paren_char_level = 0\n    var paren_char_char = 0\n    var paren_char_char_count\
    \ = 0\n    var paren_char_char_level = 0\n    var paren_char_char_char = 0\n \
    \   var paren_char_char_char_count = 0\n    var paren_char_char_char_level = 0\n\
    \    var paren_char_char_char_char = 0\n    var paren_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_level = 0\n    var paren_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_count = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_count = 0\n\
    \    var paren_char_char_char_char_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_count =\
    \ 0\n    var paren_char_char_char_char_char_char_char_char_char_level = 0\n  \
    \  var paren_char_char_char_char_char_char_char_char_char_char_char = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_char_char_char_count = 0\n   \
    \ var paren_char_char_char_char_char_char_char_char_char_char_level = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_char_char_char\
    \ = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp0t1dom88.swift:33:9: error: invalid redeclaration of 'paren_char_char_char_char_char_char_char_level'\n\
    \    var paren_char_char_char_char_char_char_char_level = 0\n        ^\n/tmp/tmp0t1dom88.swift:30:9:\
    \ note: 'paren_char_char_char_char_char_char_char_level' previously declared here\n\
    \    var paren_char_char_char_char_char_char_char_level = 0\n        ^\n/tmp/tmp0t1dom88.swift:35:9:\
    \ error: invalid redeclaration of 'paren_char_char_char_char_char_char_char_char_count'\n\
    \    var paren_char_char_char_char_char_char_char_char_count = 0\n        ^\n\
    /tmp/tmp0t1dom88.swift:32:9: note: 'paren_char_char_char_char_char_char_char_char_count'\
    \ previously declared here\n    var paren_char_char_char_char_char_char_char_char_count\
    \ = 0\n        ^\n/tmp/tmp0t1dom88.swift:37:9: error: invalid redeclaration of\
    \ 'paren_char_char_char_char_char_char_char_char_char'\n    var paren_char_char_char_char_char_char_char_char_char\
    \ = 0\n        ^\n/tmp/tmp0t1dom88.swift:34:9: note: 'paren_char_char_char_char_char_char_char_char_char'\
    \ previously declared here\n    var paren_char_char_char_char_char_char_char_char_char\
    \ = 0\n        ^\n/tmp/tmp0t1dom88.swift:39:9: error: invalid redeclaration of\
    \ 'paren_char_char_char_char_char_char_char_char_level'\n    var paren_char_char_char_char_char_char_char_char_level\
    \ = 0\n        ^\n/tmp/tmp0t1dom88.swift:36:9: note: 'paren_char_char_char_char_char_char_char_char_level'\
    \ previously declared here\n    var paren_char_char_char_char_char_char_char_char_level\
    \ = 0\n        ^\n/tmp/tmp0t1dom88.swift:46:9: error: invalid redeclaration of\
    \ 'paren_char_char_char_char_char_char_char_char_char_char_char'\n    var paren_char_char_char_char_char_char_char_char_char_char_char\
    \ = 0\n        ^\n/tmp/tmp0t1dom88.swift:43:9: note: 'paren_char_char_char_char_char_char_char_char_char_char_char'\
    \ previously declared here\n    var paren_char_char_char_char_char_char_char_char_char_char_char\
    \ = 0\n        ^\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    for ch in\
    \ paren_string {\n        if ch == '(' {\n            paren_count += 1\n     \
    \   } else if ch == ')' {\n            paren_count -= 1\n            if paren_count\
    \ == 0 {\n                levels.append(paren_count)\n            }\n        }\n\
    \    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpobi3ejek.swift:9:18: error: single-quoted string literal found,\
    \ use '\"'\n        if ch == '(' {\n                 ^~~\n                 \"\
    (\"\n/tmp/tmpobi3ejek.swift:11:25: error: single-quoted string literal found,\
    \ use '\"'\n        } else if ch == ')' {\n                        ^~~\n     \
    \                   \")\"\n"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    for c in paren_string.characters {\n        if c == '(' {\n       \
    \     paren_count += 1\n            levels.append(paren_level)\n            paren_level\
    \ = 0\n        } else if c == ')' {\n            paren_count -= 1\n          \
    \  if paren_count == 0 {\n                levels.append(paren_level)\n       \
    \     }\n            paren_level = 0\n        } else {\n            paren_level\
    \ += 1\n        }\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpeu11fuib.swift:10:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmpeu11fuib.swift:14:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmpeu11fuib.swift:9:27: error: 'characters' is unavailable:\
    \ Please use String directly\n    for c in paren_string.characters {\n       \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var paren_level =\
    \ 0\n    var paren_max_level = 0\n    var paren_levels = [Int]()\n    var paren_max_levels\
    \ = [Int]()\n    var paren_levels_string = \"\"\n    var paren_max_levels_string\
    \ = \"\"\n    var paren_levels_string_index = 0\n    var paren_max_levels_string_index\
    \ = 0\n    var paren_levels_string_indexes = [Int]()\n    var paren_max_levels_string_indexes\
    \ = [Int]()\n    var paren_levels_string_indexes_count = 0\n    var paren_max_levels_string_indexes_count\
    \ = 0\n    var paren_levels_string_indexes_counts = [Int]()\n    var paren_max_levels_string_indexes_counts\
    \ = [Int]()\n    var paren_levels_string_indexes_counts_count = 0\n    var paren_max_levels_string_indexes_counts_count\
    \ = 0\n    var paren_levels_string_indexes_counts_index = 0\n    var paren_max_levels_string_indexes_counts_index\
    \ = 0\n    var paren_levels_string_indexes_counts_index_count = 0\n    var paren_max_levels_string_indexes_counts_index_count\
    \ = 0\n    var paren_levels_string_indexes_counts_index_count_index = 0\n    var\
    \ paren_max_levels_string_indexes_counts_index_count_index = 0\n    var paren_levels_string_indexes_counts_index_count_index_count\
    \ = 0\n    var paren_max_levels_string_indexes_counts_index_count_index_count\
    \ = 0\n    var paren_levels_string_indexes_counts_index_count_index_count_index\
    \ = 0\n    var paren_max_levels_string_indexes_counts_index_count_index_count_index\
    \ = 0\n    var paren_levels_string_indexes_counts_index_count_index_count_index_count\
    \ = 0\n    var paren_max_levels_string_indexes_counts_index_count_index_count_index_count\
    \ = 0\n    var paren_levels_string_indexes_counts_index_count_index_count_index_count_index\
    \ = 0\n    var paren_max_levels_string_indexes_counts_index_count_index_count_index_count_index\
    \ = 0\n    var paren_levels_string_indexes_counts_index_count_index_count_index_count_index_count\
    \ = 0\n    var paren_max_levels_string_indexes_counts_index_count_index_count_index_count_index_count\
    \ = 0\n    var paren_levels_string_indexes_counts_index_count_index_count_index_count_index_count_index\
    \ = 0\n    var paren_max_levels_string_indexes_counts_index_count_index_count_index_count_index_count_index\
    \ = 0\n    var paren_levels_string_indexes_counts_index_count_index_count_index_count_index_count_index_count\
    \ = 0\n    var paren_max_level\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpyp2sae34.swift:43:9: error: type annotation missing in pattern\n\
    \    var paren_max_level\n        ^\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_levels_count = 0\n    var\
    \ paren_levels_count_max = 0\n    var paren_levels_count_max_index = 0\n    var\
    \ paren_levels_count_min = 0\n    var paren_levels_count_min_index = 0\n    var\
    \ paren_levels_count_max2 = 0\n    var paren_levels_count_max2_index = 0\n   \
    \ var paren_levels_count_min2 = 0\n    var paren_levels_count_min2_index = 0\n\
    \    var paren_levels_count_max3 = 0\n    var paren_levels_count_max3_index =\
    \ 0\n    var paren_levels_count_min3 = 0\n    var paren_levels_count_min3_index\
    \ = 0\n    var paren_levels_count_max4 = 0\n    var paren_levels_count_max4_index\
    \ = 0\n    var paren_levels_count_min4 = 0\n    var paren_levels_count_min4_index\
    \ = 0\n    var paren_levels_count_max5 = 0\n    var paren_levels_count_max5_index\
    \ = 0\n    var paren_levels_count_min5 = 0\n    var paren_levels_count_min5_index\
    \ = 0\n    var paren_levels_count_max6 = 0\n    var paren_levels_count_max6_index\
    \ = 0\n    var paren_levels_count_min6 = 0\n    var paren_levels_count_min6_index\
    \ = 0\n    var paren_levels_count_max7 = 0\n    var paren_levels_count_max7_index\
    \ = 0\n    var paren_levels_count_min7 = 0\n    var paren_levels_count_min7_index\
    \ = 0\n    var paren_levels_count_max8 = 0\n    var paren_levels_count_max8_index\
    \ = 0\n    var paren_levels_count_min8 = 0\n    var paren_levels_count_min8_index\
    \ = 0\n    var paren_levels_count_max9 = 0\n    var paren_levels_count_max9_index\
    \ = 0\n    var paren_levels_count_min9 = 0\n    var paren_levels_count_min9_index\
    \ = 0\n    var paren_levels_count_max10 = 0\n    var paren_levels_count_max10_index\
    \ = 0\n    var paren_levels_count_min10 = 0\n    var paren_levels_count_min10_index\
    \ = 0\n    var paren_levels_count_max11 = 0\n    var paren_levels_count_max11_index\
    \ = 0\n    var paren_levels_count_min11 = 0\n    var paren_levels_count_min11_index\
    \ = 0\n    var paren_levels_count_max12 = 0\n    var paren_levels_count_max12_index\
    \ = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpt_p9voni.swift:6:9: warning: initialization of variable 'level'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var level = 0\n    ~~~~^~~~~\n    _\n/tmp/tmpt_p9voni.swift:7:9: warning:\
    \ initialization of variable 'levels' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var levels = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n/tmp/tmpt_p9voni.swift:8:9: warning: initialization of variable 'paren_level'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_level = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpt_p9voni.swift:9:9:\
    \ warning: initialization of variable 'paren_levels' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_levels = [Int]()\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpt_p9voni.swift:10:9: warning: initialization\
    \ of variable 'paren_levels_count' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var paren_levels_count = 0\n    ~~~~^~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpt_p9voni.swift:11:9: warning: initialization of variable 'paren_levels_count_max'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_levels_count_max = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpt_p9voni.swift:12:9:\
    \ warning: initialization of variable 'paren_levels_count_max_index' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var paren_levels_count_max_index\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpt_p9voni.swift:13:9:\
    \ warning: initialization of variable 'paren_levels_count_min' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var paren_levels_count_min\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpt_p9voni.swift:14:9: warning:\
    \ initialization of variable 'paren_levels_count_min_index' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_levels_count_min_index\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpt_p9voni.swift:15:9:\
    \ warning: initialization of variabl"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_level = 0\n    var paren_nesting\
    \ = 0\n    var paren_nesting_count = 0\n    var paren_nesting_limit = 2\n    var\
    \ paren_nesting_limit_count = 0\n    var paren_nesting_limit_index = 0\n    var\
    \ paren_nesting_limit_index2 = 0\n    var paren_nesting_limit_index3 = 0\n   \
    \ var paren_nesting_limit_index4 = 0\n    var paren_nesting_limit_index5 = 0\n\
    \    var paren_nesting_limit_index6 = 0\n    var paren_nesting_limit_index7 =\
    \ 0\n    var paren_nesting_limit_index8 = 0\n    var paren_nesting_limit_index9\
    \ = 0\n    var paren_nesting_limit_index10 = 0\n    var paren_nesting_limit_index11\
    \ = 0\n    var paren_nesting_limit_index12 = 0\n    var paren_nesting_limit_index13\
    \ = 0\n    var paren_nesting_limit_index14 = 0\n    var paren_nesting_limit_index15\
    \ = 0\n    var paren_nesting_limit_index16 = 0\n    var paren_nesting_limit_index17\
    \ = 0\n    var paren_nesting_limit_index18 = 0\n    var paren_nesting_limit_index19\
    \ = 0\n    var paren_nesting_limit_index20 = 0\n    var paren_nesting_limit_index21\
    \ = 0\n    var paren_nesting_limit_index22 = 0\n    var paren_nesting_limit_index23\
    \ = 0\n    var paren_nesting_limit_index24 = 0\n    var paren_nesting_limit_index25\
    \ = 0\n    var paren_nesting_limit_index26 = 0\n    var paren_nesting_limit_index27\
    \ = 0\n    var paren_nesting_limit_index28 = 0\n    var paren_nesting_limit_index29\
    \ = 0\n    var paren_nesting_limit_index30 = 0\n    var paren_nesting_limit_index31\
    \ = 0\n    var paren_nesting_limit_index32 = 0\n    var paren_nesting_limit_index33\
    \ = 0\n    var paren_nesting_limit_index34 = 0\n    var paren_nesting_limit_index35\
    \ = 0\n    var paren_nesting_limit_index36 = 0\n    var paren_nesting_limit_index37\
    \ = 0\n    var paren_nesting_limit_index38 = 0\n    var paren_nesting_limit_index39\
    \ = 0\n    var paren_nesting_limit_index40 = 0\n    var paren_nesting_limit_index41\
    \ = 0\n    var paren_nesting_limit_index42 = 0\n    var paren_nesting_limit_index43\
    \ = 0\n    var paren_nesting_limit_index44 = 0\n    var paren_nesting_limit_index45\
    \ = 0\n    var paren_nesting_limit_index46 = 0\n    var paren_nesting_limit_index47\
    \ = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp0oerffin.swift:6:9: warning: initialization of variable 'levels'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var levels = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmp0oerffin.swift:7:9: warning:\
    \ initialization of variable 'paren_level' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var paren_level = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp0oerffin.swift:8:9: warning: initialization of variable 'paren_nesting'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_nesting = 0\n    ~~~~^~~~~~~~~~~~~\n    _\n/tmp/tmp0oerffin.swift:9:9:\
    \ warning: initialization of variable 'paren_nesting_count' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_nesting_count\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp0oerffin.swift:10:9: warning:\
    \ initialization of variable 'paren_nesting_limit' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var paren_nesting_limit = 2\n   \
    \ ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp0oerffin.swift:11:9: warning: initialization\
    \ of variable 'paren_nesting_limit_count' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var paren_nesting_limit_count = 0\n  \
    \  ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp0oerffin.swift:12:9: warning:\
    \ initialization of variable 'paren_nesting_limit_index' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_nesting_limit_index\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp0oerffin.swift:13:9:\
    \ warning: initialization of variable 'paren_nesting_limit_index2' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var paren_nesting_limit_index2\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp0oerffin.swift:14:9:\
    \ warning: initialization of variable 'paren_nesting_limit_index3' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var paren_nesting_limit_index3\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp0oerffi"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var paren_level =\
    \ 0\n    var paren_max_level = 0\n    var paren_stack = [Int]()\n    var paren_stack_count\
    \ = 0\n    var paren_stack_max_count = 0\n    var paren_stack_max_level = 0\n\
    \    var paren_stack_level = 0\n    var paren_stack_max_level_count = 0\n    var\
    \ paren_stack_max_level_level = 0\n    var paren_stack_level_level = 0\n    var\
    \ paren_stack_level_max_count = 0\n    var paren_stack_level_max_level = 0\n \
    \   var paren_stack_level_level_level = 0\n    var paren_stack_level_level_max_count\
    \ = 0\n    var paren_stack_level_level_max_level = 0\n    var paren_stack_level_level_level_level\
    \ = 0\n    var paren_stack_level_level_level_max_count = 0\n    var paren_stack_level_level_level_max_level\
    \ = 0\n    var paren_stack_level_level_level_level_level = 0\n    var paren_stack_level_level_level_level_max_count\
    \ = 0\n    var paren_stack_level_level_level_max_level = 0\n    var paren_stack_level_level_level_level_level\
    \ = 0\n    var paren_stack_level_level_level_level_max_count = 0\n    var paren_stack_level_level_level_level_max_level\
    \ = 0\n    var paren_stack_level_level_level_level_level_level = 0\n    var paren_stack_level_level_level_level_level_max_count\
    \ = 0\n    var paren_stack_level_level_level_level_level_max_level = 0\n    var\
    \ paren_stack_level_level_level_level_level_level_level = 0\n    var paren_stack_level_level_level_level_level_level_max_count\
    \ = 0\n    var paren_stack_level_level_level_level_level_max_level = 0\n    var\
    \ paren_stack_level_level_level_level_level_level_level = 0\n    var paren_stack_level_level_level_level_level_level_max_count\
    \ = 0\n    var paren_stack_level_level_level_level_level_level_max_level = 0\n\
    \    var paren_stack_level_level_level_level_level_level_level = 0\n    var paren_stack_level_level_level_level_level_level_level_max_count\
    \ = 0\n    var paren_stack_level_level_level_level_level_level_max_level = 0\n\
    \    var paren_stack_level_level_level_level_level_level_level = 0\n    var paren_stack_level_level_level_level_level_level_max_count\
    \ = 0\n    var paren_stack_level_level_level_level_level_level_max_level = 0\n\
    \    var paren_stack_level_level_level_level_level_level_level = 0\n    var paren_stack_level_level_level_level_level_level_level_max_count\
    \ = 0\n    var paren_stack_level_level_level_level_level_level_max_level = 0\n\
    \    var paren_stack_level_level_level_level_level_level_level_level = 0\n   \
    \ var paren_stack_level_level_level_level_level_level_level_level_max_count =\
    \ 0\n    var paren_stack_level_level_level_level_level_level_max_level = 0\n \
    \   var paren_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpcga05lbv.swift:28:9: error: invalid redeclaration of 'paren_stack_level_level_level_max_level'\n\
    \    var paren_stack_level_level_level_max_level = 0\n        ^\n/tmp/tmpcga05lbv.swift:25:9:\
    \ note: 'paren_stack_level_level_level_max_level' previously declared here\n \
    \   var paren_stack_level_level_level_max_level = 0\n        ^\n/tmp/tmpcga05lbv.swift:29:9:\
    \ error: invalid redeclaration of 'paren_stack_level_level_level_level_level'\n\
    \    var paren_stack_level_level_level_level_level = 0\n        ^\n/tmp/tmpcga05lbv.swift:26:9:\
    \ note: 'paren_stack_level_level_level_level_level' previously declared here\n\
    \    var paren_stack_level_level_level_level_level = 0\n        ^\n/tmp/tmpcga05lbv.swift:30:9:\
    \ error: invalid redeclaration of 'paren_stack_level_level_level_level_max_count'\n\
    \    var paren_stack_level_level_level_level_max_count = 0\n        ^\n/tmp/tmpcga05lbv.swift:27:9:\
    \ note: 'paren_stack_level_level_level_level_max_count' previously declared here\n\
    \    var paren_stack_level_level_level_level_max_count = 0\n        ^\n/tmp/tmpcga05lbv.swift:37:9:\
    \ error: invalid redeclaration of 'paren_stack_level_level_level_level_level_max_level'\n\
    \    var paren_stack_level_level_level_level_level_max_level = 0\n        ^\n\
    /tmp/tmpcga05lbv.swift:34:9: note: 'paren_stack_level_level_level_level_level_max_level'\
    \ previously declared here\n    var paren_stack_level_level_level_level_level_max_level\
    \ = 0\n        ^\n/tmp/tmpcga05lbv.swift:38:9: error: invalid redeclaration of\
    \ 'paren_stack_level_level_level_level_level_level_level'\n    var paren_stack_level_level_level_level_level_level_level\
    \ = 0\n        ^\n/tmp/tmpcga05lbv.swift:35:9: note: 'paren_stack_level_level_level_level_level_level_level'\
    \ previously declared here\n    var paren_stack_level_level_level_level_level_level_level\
    \ = 0\n        ^\n/tmp/tmpcga05lbv.swift:39:9: error: invalid redeclaration of\
    \ 'paren_stack_level_level_level_level_level_level_max_count'\n    var paren_stack_level_level_level_level_level_level_max_count\
    \ = 0\n        ^\n/tmp/tmpcga05lbv.swift:36:9: note: 'paren_stack_level_level_level_"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_start\
    \ = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpbyoklpki.swift:12:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmpbyoklpki.swift:8:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmpbyoklpki.swift:13:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmpbyoklpki.swift:9:9: note: 'paren_start' previously declared here\n\
    \    var paren_start = 0\n        ^\n/tmp/tmpbyoklpki.swift:14:9: error: invalid\
    \ redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmpbyoklpki.swift:10:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmpbyoklpki.swift:15:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmpbyoklpki.swift:11:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmpbyoklpki.swift:16:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmpbyoklpki.swift:8:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmpbyoklpki.swift:17:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var paren_start = 0\n   \
    \     ^\n/tmp/tmpbyoklpki.swift:9:9: note: 'paren_start' previously declared here\n\
    \    var paren_start = 0\n        ^\n/tmp/tmpbyoklpki.swift:18:9: error: invalid\
    \ redeclaration of 'paren_end'\n    var paren_end = 0\n        ^\n/tmp/tmpbyoklpki.swift:10:9:\
    \ note: 'paren_end' previously declared here\n    var paren_end = 0\n        ^\n\
    /tmp/tmpbyoklpki.swift:19:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmpbyoklpki.swift:11:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmpbyoklpki.swift:20:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmpbyoklpki.swift:8:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmpbyoklpki.swift:21:9:\
    \ error: invalid redeclaration of 'paren_start'\n    var p"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_level = 0\n    var paren_nesting\
    \ = 0\n    for c in paren_string.unicodeScalars {\n        if paren_nesting ==\
    \ 0 {\n            if c == '(' {\n                paren_nesting += 1\n       \
    \     }\n            if c == ')' {\n                paren_nesting -= 1\n     \
    \       }\n        } else {\n            if c == '(' {\n                paren_nesting\
    \ += 1\n            }\n            if c == ')' {\n                paren_nesting\
    \ -= 1\n            }\n            if paren_nesting == 0 {\n                levels.append(paren_level)\n\
    \                paren_level = 0\n            }\n        }\n        paren_level\
    \ += (c >= '(' && c <= ')') ? 1 : 0\n    }\n    levels.append(paren_level)\n \
    \   return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpf1uvt1rw.swift:11:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c == '(' {\n                    ^~~\n             \
    \       \"(\"\n/tmp/tmpf1uvt1rw.swift:14:21: error: single-quoted string literal\
    \ found, use '\"'\n            if c == ')' {\n                    ^~~\n      \
    \              \")\"\n/tmp/tmpf1uvt1rw.swift:18:21: error: single-quoted string\
    \ literal found, use '\"'\n            if c == '(' {\n                    ^~~\n\
    \                    \"(\"\n/tmp/tmpf1uvt1rw.swift:21:21: error: single-quoted\
    \ string literal found, use '\"'\n            if c == ')' {\n                \
    \    ^~~\n                    \")\"\n/tmp/tmpf1uvt1rw.swift:29:30: error: single-quoted\
    \ string literal found, use '\"'\n        paren_level += (c >= '(' && c <= ')')\
    \ ? 1 : 0\n                             ^~~\n                             \"(\"\
    \n/tmp/tmpf1uvt1rw.swift:29:42: error: single-quoted string literal found, use\
    \ '\"'\n        paren_level += (c >= '(' && c <= ')') ? 1 : 0\n              \
    \                           ^~~\n                                         \")\"\
    \n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_levels_len = 0\n    var paren_levels_lens = [Int]()\n\
    \    var paren_levels_lens_len = 0\n    var paren_levels_lens_lens = [Int]()\n\
    \    var paren_levels_lens_lens_len = 0\n    var paren_levels_lens_lens_lens =\
    \ [Int]()\n    var paren_levels_lens_lens_lens_len = 0\n    var paren_levels_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_len = 0\n    var paren_levels_lens_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_len = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_lens_len = 0\n    var\
    \ paren_levels_lens_lens_lens_lens_lens_lens_lens = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_len\
    \ = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens = [Int]()\n\
    \    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_len = 0\n    var\
    \ paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens = [Int]()\n    var\
    \ paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_len = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\
    \ = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\
    \ = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpdkhjhsvp.swift:32:84: error: expected member name or constructor\
    \ call after type name\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int]\n                                                                  \
    \                 ^\n/tmp/tmpdkhjhsvp.swift:32:88: note: add arguments after the\
    \ type to construct a value of the type\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int]\n                                                                  \
    \                     ^\n                                                    \
    \                                    ()\n/tmp/tmpdkhjhsvp.swift:32:88: note: use\
    \ '.self' to reference the type object\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int]\n                                                                  \
    \                     ^\n                                                    \
    \                                    .self\n/tmp/tmpdkhjhsvp.swift:6:9: warning:\
    \ initialization of variable 'levels' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var levels = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n/tmp/tmpdkhjhsvp.swift:7:9: warning: initialization of variable 'paren_level'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_level = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpdkhjhsvp.swift:8:9:\
    \ warning: initialization of variable 'paren_levels' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_levels = [Int]()\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpdkhjhsvp.swift:9:9: warning: initialization\
    \ of variable 'paren_levels_len' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var paren_levels_len = 0\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpdkhjhsvp.swift:10:9: warning: initialization of variable 'paren_levels_lens'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_levels_lens = [Int]()\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpdkhjhsvp.sw"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_levels_count = 0\n    var\
    \ paren_levels_count_max = 0\n    var paren_levels_count_max_index = 0\n    var\
    \ paren_levels_count_min = 0\n    var paren_levels_count_min_index = 0\n    var\
    \ paren_levels_count_max = 0\n    var paren_levels_count_max_index = 0\n    var\
    \ paren_levels_count_min = 0\n    var paren_levels_count_min_index = 0\n    var\
    \ paren_levels_count_max = 0\n    var paren_levels_count_max_index = 0\n    var\
    \ paren_levels_count_min = 0\n    var paren_levels_count_min_index = 0\n    var\
    \ paren_levels_count_max = 0\n    var paren_levels_count_max_index = 0\n    var\
    \ paren_levels_count_min = 0\n    var paren_levels_count_min_index = 0\n    var\
    \ paren_levels_count_max = 0\n    var paren_levels_count_max_index = 0\n    var\
    \ paren_levels_count_min = 0\n    var paren_levels_count_min_index = 0\n    var\
    \ paren_levels_count_max = 0\n    var paren_levels_count_max_index = 0\n    var\
    \ paren_levels_count_min = 0\n    var paren_levels_count_min_index = 0\n    var\
    \ paren_levels_count_max = 0\n    var paren_levels_count_max_index = 0\n    var\
    \ paren_levels_count_min = 0\n    var paren_levels_count_min_index = 0\n    var\
    \ paren_levels_count_max = 0\n    var paren_levels_count_max_index = 0\n    var\
    \ paren_levels_count_min = 0\n    var paren_levels_count_min_index = 0\n    var\
    \ paren_levels_count_max = 0\n    var paren_levels_count_max_index = 0\n    var\
    \ paren_levels_count_min = 0\n    var paren_levels_count_min_index = 0\n    var\
    \ paren_levels_count_max = 0\n    var paren_levels_count_max_index = 0\n    var\
    \ paren_levels_count_min = 0\n    var paren_levels_count_min_index = 0\n    var\
    \ paren_levels_count_max = 0\n    var paren_levels_count_max_index = 0\n    var\
    \ paren_levels_count_min = 0\n    var paren_levels_count_min_index = 0\n    var\
    \ paren_levels_count_max = 0\n    var paren_levels_count_max_index = 0\n    var\
    \ paren_levels_count_min = 0\n    var paren_levels_count_min_index = 0\n    var\
    \ paren_levels_count_max = 0\n    var paren_levels_count_max_index = 0\n    var\
    \ paren_level\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpq9mx0c9d.swift:15:9: error: invalid redeclaration of 'paren_levels_count_max'\n\
    \    var paren_levels_count_max = 0\n        ^\n/tmp/tmpq9mx0c9d.swift:11:9: note:\
    \ 'paren_levels_count_max' previously declared here\n    var paren_levels_count_max\
    \ = 0\n        ^\n/tmp/tmpq9mx0c9d.swift:16:9: error: invalid redeclaration of\
    \ 'paren_levels_count_max_index'\n    var paren_levels_count_max_index = 0\n \
    \       ^\n/tmp/tmpq9mx0c9d.swift:12:9: note: 'paren_levels_count_max_index' previously\
    \ declared here\n    var paren_levels_count_max_index = 0\n        ^\n/tmp/tmpq9mx0c9d.swift:17:9:\
    \ error: invalid redeclaration of 'paren_levels_count_min'\n    var paren_levels_count_min\
    \ = 0\n        ^\n/tmp/tmpq9mx0c9d.swift:13:9: note: 'paren_levels_count_min'\
    \ previously declared here\n    var paren_levels_count_min = 0\n        ^\n/tmp/tmpq9mx0c9d.swift:18:9:\
    \ error: invalid redeclaration of 'paren_levels_count_min_index'\n    var paren_levels_count_min_index\
    \ = 0\n        ^\n/tmp/tmpq9mx0c9d.swift:14:9: note: 'paren_levels_count_min_index'\
    \ previously declared here\n    var paren_levels_count_min_index = 0\n       \
    \ ^\n/tmp/tmpq9mx0c9d.swift:19:9: error: invalid redeclaration of 'paren_levels_count_max'\n\
    \    var paren_levels_count_max = 0\n        ^\n/tmp/tmpq9mx0c9d.swift:11:9: note:\
    \ 'paren_levels_count_max' previously declared here\n    var paren_levels_count_max\
    \ = 0\n        ^\n/tmp/tmpq9mx0c9d.swift:20:9: error: invalid redeclaration of\
    \ 'paren_levels_count_max_index'\n    var paren_levels_count_max_index = 0\n \
    \       ^\n/tmp/tmpq9mx0c9d.swift:12:9: note: 'paren_levels_count_max_index' previously\
    \ declared here\n    var paren_levels_count_max_index = 0\n        ^\n/tmp/tmpq9mx0c9d.swift:21:9:\
    \ error: invalid redeclaration of 'paren_levels_count_min'\n    var paren_levels_count_min\
    \ = 0\n        ^\n/tmp/tmpq9mx0c9d.swift:13:9: note: 'paren_levels_count_min'\
    \ previously declared here\n    var paren_levels_count_min = 0\n        ^\n/tmp/tmpq9mx0c9d.swift:22:9:\
    \ error: invalid redeclaration of 'paren_levels_count_min_index'\n    var paren_levels_count_min_index\
    \ = 0\n        ^\n/tmp/t"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_char = 0\n    var paren_char_next = 0\n    var paren_char_prev\
    \ = 0\n    var paren_char_prev2 = 0\n    var paren_char_next2 = 0\n    var paren_char_prev3\
    \ = 0\n    var paren_char_next3 = 0\n    var paren_char_prev4 = 0\n    var paren_char_next4\
    \ = 0\n    var paren_char_prev5 = 0\n    var paren_char_next5 = 0\n    var paren_char_prev6\
    \ = 0\n    var paren_char_next6 = 0\n    var paren_char_prev7 = 0\n    var paren_char_next7\
    \ = 0\n    var paren_char_prev8 = 0\n    var paren_char_next8 = 0\n    var paren_char_prev9\
    \ = 0\n    var paren_char_next9 = 0\n    var paren_char_prev10 = 0\n    var paren_char_next10\
    \ = 0\n    var paren_char_prev11 = 0\n    var paren_char_next11 = 0\n    var paren_char_prev12\
    \ = 0\n    var paren_char_next12 = 0\n    var paren_char_prev13 = 0\n    var paren_char_next13\
    \ = 0\n    var paren_char_prev14 = 0\n    var paren_char_next14 = 0\n    var paren_char_prev15\
    \ = 0\n    var paren_char_next15 = 0\n    var paren_char_prev16 = 0\n    var paren_char_next16\
    \ = 0\n    var paren_char_prev17 = 0\n    var paren_char_next17 = 0\n    var paren_char_prev18\
    \ = 0\n    var paren_char_next18 = 0\n    var paren_char_prev19 = 0\n    var paren_char_next19\
    \ = 0\n    var paren_char_prev20 = 0\n    var paren_char_next20 = 0\n    var paren_char_prev21\
    \ = 0\n    var paren_char_next21 = 0\n    var paren_char_prev22 = 0\n    var paren_char_next22\
    \ = 0\n    var paren_char_prev23 = 0\n    var paren_char_next23 = 0\n    var paren_char_prev24\
    \ = 0\n    var paren_char_next24 = 0\n    var paren_char_prev25 = 0\n    var paren_char_next25\
    \ = 0\n    var paren_char_prev26 = 0\n    var paren_char_next26 = 0\n    var paren_char_prev27\
    \ = 0\n    var paren_char_next27 = 0\n    var paren_char_prev28 = 0\n    var paren_char_next28\
    \ = 0\n    var paren_char_prev29 = 0\n    var paren_char_next29 = 0\n    var paren_char_prev30\
    \ = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpbg9l01z4.swift:72:9: error: type annotation missing in pattern\n\
    \    var paren\n        ^\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens = 0\n\
    \    for c in paren_string.unicodeScalars {\n        if parens == 0 {\n      \
    \      levels.append(level)\n        }\n        switch c {\n        case .OpenSquareBracket,\
    \ .CloseSquareBracket:\n            parens += 1\n        case .OpenParen, .CloseParen:\n\
    \            parens -= 1\n        }\n        level += 1\n    }\n    return levels\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmptzqsnaxv.swift:14:15: error: type 'Unicode.Scalar' has no member\
    \ 'OpenSquareBracket'\n        case .OpenSquareBracket, .CloseSquareBracket:\n\
    \             ~^~~~~~~~~~~~~~~~~\n/tmp/tmptzqsnaxv.swift:14:35: error: type 'Unicode.Scalar'\
    \ has no member 'CloseSquareBracket'\n        case .OpenSquareBracket, .CloseSquareBracket:\n\
    \                                 ~^~~~~~~~~~~~~~~~~~\n/tmp/tmptzqsnaxv.swift:16:15:\
    \ error: type 'Unicode.Scalar' has no member 'OpenParen'\n        case .OpenParen,\
    \ .CloseParen:\n             ~^~~~~~~~~\n/tmp/tmptzqsnaxv.swift:16:27: error:\
    \ type 'Unicode.Scalar' has no member 'CloseParen'\n        case .OpenParen, .CloseParen:\n\
    \                         ~^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    for c in paren_string.unicodeScalars {\n        if c == '(' {\n   \
    \         paren_count += 1\n        } else if c == ')' {\n            paren_count\
    \ -= 1\n            if paren_count == 0 {\n                levels.append(level)\n\
    \                level = 0\n            }\n        }\n        level += 1\n   \
    \ }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp93xbzybu.swift:10:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmp93xbzybu.swift:12:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var levels = [Int]()\n    var paren_count\
    \ = 0\n    for c in paren_string {\n        if c == '(' {\n            paren_count\
    \ += 1\n            levels.append(level)\n            level = 0\n        } else\
    \ if c == ')' {\n            levels[level] = levels[level] - 1\n            if\
    \ levels[level] == 0 {\n                levels[level] = level\n            }\n\
    \            level -= 1\n        }\n    }\n    return levels\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpbnmvwz92.swift:10:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmpbnmvwz92.swift:14:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens = 0\n\
    \    for c in paren_string.unicodeScalars {\n        if c == '(' {\n         \
    \   levels[level] = parens\n            parens += 1\n        } else if c == ')'\
    \ {\n            levels[level] = parens\n            parens -= 1\n        } else\
    \ {\n            levels[level] += 1\n        }\n        level += 1\n    }\n  \
    \  return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpembeixmm.swift:10:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmpembeixmm.swift:13:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_char = 0\n    var paren_char_next = 0\n    var paren_char_prev\
    \ = 0\n    var paren_char_prev2 = 0\n    var paren_char_next2 = 0\n    var paren_char_next3\
    \ = 0\n    var paren_char_next4 = 0\n    var paren_char_next5 = 0\n    var paren_char_next6\
    \ = 0\n    var paren_char_next7 = 0\n    var paren_char_next8 = 0\n    var paren_char_next9\
    \ = 0\n    var paren_char_next10 = 0\n    var paren_char_next11 = 0\n    var paren_char_next12\
    \ = 0\n    var paren_char_next13 = 0\n    var paren_char_next14 = 0\n    var paren_char_next15\
    \ = 0\n    var paren_char_next16 = 0\n    var paren_char_next17 = 0\n    var paren_char_next18\
    \ = 0\n    var paren_char_next19 = 0\n    var paren_char_next20 = 0\n    var paren_char_next21\
    \ = 0\n    var paren_char_next22 = 0\n    var paren_char_next23 = 0\n    var paren_char_next24\
    \ = 0\n    var paren_char_next25 = 0\n    var paren_char_next26 = 0\n    var paren_char_next27\
    \ = 0\n    var paren_char_next28 = 0\n    var paren_char_next29 = 0\n    var paren_char_next30\
    \ = 0\n    var paren_char_next31 = 0\n    var paren_char_next32 = 0\n    var paren_char_next33\
    \ = 0\n    var paren_char_next34 = 0\n    var paren_char_next35 = 0\n    var paren_char_next36\
    \ = 0\n    var paren_char_next37 = 0\n    var paren_char_next38 = 0\n    var paren_char_next39\
    \ = 0\n    var paren_char_next40 = 0\n    var paren_char_next41 = 0\n    var paren_char_next42\
    \ = 0\n    var paren_char_next43 = 0\n    var paren_char_next44 = 0\n    var paren_char_next45\
    \ = 0\n    var paren_char_next46 = 0\n    var paren_char_next47 = 0\n    var paren_char_next48\
    \ = 0\n    var paren_char_next49 = 0\n    var paren_char_next50 = 0\n    var paren_char_next51\
    \ = 0\n    var paren_char_next52 = 0\n    var paren_char_next53 = 0\n    var paren_char_next54\
    \ = 0\n    var paren_char_next55 = 0\n    var paren_char_next56 = 0\n    var paren_char_next57\
    \ = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpqblc9e_n.swift:72:9: error: type annotation missing in pattern\n\
    \    var paren\n        ^\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    for c in paren_string.characters {\n        if c == '(' {\n       \
    \     paren_count += 1\n            levels.append(level)\n        } else if c\
    \ == ')' {\n            levels[level] = levels[level] - 1\n            if levels[level]\
    \ == 0 {\n                levels[level] = level + 1\n            }\n         \
    \   paren_count -= 1\n        }\n        level += 1\n    }\n    return levels\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp8cdx0vw1.swift:10:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmp8cdx0vw1.swift:13:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmp8cdx0vw1.swift:9:27: error: 'characters' is unavailable:\
    \ Please use String directly\n    for c in paren_string.characters {\n       \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_paren\
    \ = 0\n    var paren_level = 0\n    var paren_level_paren = 0\n    var paren_level_stack\
    \ = [Int]()\n    var paren_level_stack_paren = [Int]()\n    var paren_level_stack_paren_stack\
    \ = [Int]()\n    var paren_level_stack_paren_stack_stack = [Int]()\n    var paren_level_stack_paren_stack_stack_stack\
    \ = [Int]()\n    var paren_level_stack_paren_stack_stack_stack_stack = [Int]()\n\
    \    var paren_level_stack_paren_stack_stack_stack_stack_stack = [Int]()\n   \
    \ var paren_level_stack_paren_stack_stack_stack_stack_stack_stack = [Int]()\n\
    \    var paren_level_stack_paren_stack_stack_stack_stack_stack_stack_stack = [Int]()\n\
    \    var paren_level_stack_paren_stack_stack_stack_stack_stack_stack_stack_stack\
    \ = [Int]()\n    var paren_level_stack_paren_stack_stack_stack_stack_stack_stack_stack_stack_stack\
    \ = [Int]()\n    var paren_level_stack_paren_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack\
    \ = [Int]()\n    var paren_level_stack_paren_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack\
    \ = [Int]()\n    var paren_level_stack_paren_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack\
    \ = [Int]()\n    var paren_level_stack_paren_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack\
    \ = [Int]()\n    var paren_level_stack_paren_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack\
    \ = [Int]()\n    var paren_level_stack_paren_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack\
    \ = [Int]()\n    var paren_level_stack_paren_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack\
    \ = [Int]()\n    var paren_level_stack_paren_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack\
    \ = [Int]()\n    var paren_level_stack_paren_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack\
    \ = [Int]()\n    var paren_level_stack_paren_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack\
    \ = [Int]()\n    var paren_level_stack_paren_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack\
    \ = [Int]()\n    var paren_level_stack_paren_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpb_tax252.swift:27:9: error: invalid redeclaration of 'paren_level_stack_paren_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack'\n\
    \    var paren_level_stack_paren_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack\
    \ = [Int]()\n        ^\n/tmp/tmpb_tax252.swift:26:9: note: 'paren_level_stack_paren_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack'\
    \ previously declared here\n    var paren_level_stack_paren_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack\
    \ = [Int]()\n        ^\n/tmp/tmpb_tax252.swift:31:9: error: invalid redeclaration\
    \ of 'paren_level_stack_paren_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack'\n\
    \    var paren_level_stack_paren_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack\
    \ = [Int]()\n        ^\n/tmp/tmpb_tax252.swift:30:9: note: 'paren_level_stack_paren_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack'\
    \ previously declared here\n    var paren_level_stack_paren_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack\
    \ = [Int]()\n        ^\n/tmp/tmpb_tax252.swift:33:9: error: type annotation missing\
    \ in pattern\n    var paren_level_stack_paren_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_stack_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_char = 0\n    var paren_char_count = 0\n    var paren_char_level\
    \ = 0\n    var paren_char_start = 0\n    var paren_char_end = 0\n    var paren_char_char\
    \ = 0\n    var paren_char_char_count = 0\n    var paren_char_char_level = 0\n\
    \    var paren_char_char_start = 0\n    var paren_char_char_end = 0\n    var paren_char_char_char\
    \ = 0\n    var paren_char_char_char_count = 0\n    var paren_char_char_char_level\
    \ = 0\n    var paren_char_char_char_start = 0\n    var paren_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char = 0\n    var paren_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_level = 0\n    var paren_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_end = 0\n    var paren_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_level = 0\n    var paren_char_char_char_char_char_char_start\
    \ = 0\n    var paren_char_char_char_char_char_char_end = 0\n    var paren_char_char_char_char_char_char_char\
    \ = 0\n    var paren_char_char_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char = 0\n    var paren_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_level = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_start = 0\n    var paren_char_char_char_char_char_char_char_char_end\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char = 0\n    var\
    \ paren_char_char_char_char_char_char_char_char_char_char_count = 0\n    var paren_char_char_char_char_char_char_char_char_char_level\
    \ = 0\n    var paren_char_char_char_char_char_char_char_char_char_start = 0\n\
    \    var paren_char_char_char_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpdxi2onuc.swift:56:9: error: type annotation missing in pattern\n\
    \    var paren_char_char_char_\n        ^\n"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_level = 0\n    var paren_parens = 0\n    var paren_level_string\
    \ = \"\"\n    var paren_parens_string = \"\"\n    var paren_level_strings = [String]()\n\
    \    var paren_parens_strings = [String]()\n    var paren_level_strings_len =\
    \ 0\n    var paren_parens_strings_len = 0\n    var paren_level_strings_lens =\
    \ [Int]()\n    var paren_parens_strings_lens = [Int]()\n    var paren_level_strings_lens_len\
    \ = 0\n    var paren_parens_strings_lens_len = 0\n    var paren_level_strings_lens_lens\
    \ = [Int]()\n    var paren_parens_strings_lens_lens = [Int]()\n    var paren_level_strings_lens_lens_len\
    \ = 0\n    var paren_parens_strings_lens_lens_len = 0\n    var paren_level_strings_lens_lens_lens\
    \ = [Int]()\n    var paren_parens_strings_lens_lens_lens = [Int]()\n    var paren_level_strings_lens_lens_lens_len\
    \ = 0\n    var paren_parens_strings_lens_lens_lens_len = 0\n    var paren_level_strings_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_parens_strings_lens_lens_lens_lens = [Int]()\n    var\
    \ paren_level_strings_lens_lens_lens_lens_len = 0\n    var paren_parens_strings_lens_lens_lens_lens_len\
    \ = 0\n    var paren_level_strings_lens_lens_lens_lens_lens = [Int]()\n    var\
    \ paren_parens_strings_lens_lens_lens_lens_lens = [Int]()\n    var paren_level_strings_lens_lens_lens_lens_lens_len\
    \ = 0\n    var paren_parens_strings_lens_lens_lens_lens_lens_len = 0\n    var\
    \ paren_level_strings_lens_lens_lens_lens_lens_lens = [Int]()\n    var paren_parens_strings_lens_lens_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_level_strings_lens_lens_lens_lens_lens_lens_len = 0\n\
    \    var paren_parens_strings_lens_lens_lens_lens_lens_lens_len = 0\n    var paren_level_strings_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp55y6gtaz.swift:41:66: error: expected member name or constructor\
    \ call after type name\n    var paren_level_strings_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int]\n                                                                 ^\n\
    /tmp/tmp55y6gtaz.swift:41:70: note: add arguments after the type to construct\
    \ a value of the type\n    var paren_level_strings_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int]\n                                                                  \
    \   ^\n                                                                      ()\n\
    /tmp/tmp55y6gtaz.swift:41:70: note: use '.self' to reference the type object\n\
    \    var paren_level_strings_lens_lens_lens_lens_lens_lens_lens = [Int]\n    \
    \                                                                 ^\n        \
    \                                                              .self\n/tmp/tmp55y6gtaz.swift:6:9:\
    \ warning: initialization of variable 'level' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var level = 0\n    ~~~~^~~~~\n  \
    \  _\n/tmp/tmp55y6gtaz.swift:7:9: warning: initialization of variable 'max_level'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var max_level = 0\n    ~~~~^~~~~~~~~\n    _\n/tmp/tmp55y6gtaz.swift:8:9: warning:\
    \ initialization of variable 'max_level_parens' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var max_level_parens = 0\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp55y6gtaz.swift:9:9: warning: initialization of variable 'paren_level'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_level = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp55y6gtaz.swift:10:9:\
    \ warning: initialization of variable 'paren_parens' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_parens = 0\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp55y6gtaz.swift:11:9: warning: initialization\
    \ of variable 'paren_level_string' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var paren_level_string = \"\"\n    ~~~~^~~~~~~~~"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    for ch in\
    \ paren_string.unicodeScalars {\n        if ch == '(' {\n            paren_count\
    \ += 1\n        } else if ch == ')' {\n            paren_count -= 1\n        \
    \    if paren_count == 0 {\n                levels.append(paren_count)\n     \
    \       }\n        }\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmplaqush6o.swift:9:18: error: single-quoted string literal found,\
    \ use '\"'\n        if ch == '(' {\n                 ^~~\n                 \"\
    (\"\n/tmp/tmplaqush6o.swift:11:25: error: single-quoted string literal found,\
    \ use '\"'\n        } else if ch == ')' {\n                        ^~~\n     \
    \                   \")\"\n"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens = 0\n\
    \    var parens_level = 0\n    var parens_count = 0\n    var parens_string = \"\
    \"\n    for c in paren_string.unicodeScalars {\n        if parens_level == 0 {\n\
    \            if parens_count == 0 {\n                parens_string = String(c.value)\n\
    \            } else {\n                parens_string = parens_string + String(c.value)\n\
    \            }\n        } else {\n            if parens_count == 0 {\n       \
    \         parens_string = parens_string + String(c.value)\n            } else\
    \ {\n                parens_string = parens_string + String(c.value)\n       \
    \     }\n        }\n        parens_count += 1\n        if parens_count == 2 {\n\
    \            parens_level = 1\n            parens_count = 0\n        }\n     \
    \   if parens_count == 3 {\n            parens_level = 2\n            parens_count\
    \ = 0\n        }\n        if parens_count == 4 {\n            parens_level = 3\n\
    \            parens_count = 0\n        }\n        if parens_count == 5 {\n   \
    \         parens_level = 4\n            parens_count = 0\n        }\n        if\
    \ parens_count == 6 {\n            parens_level = 5\n            parens_count\
    \ = 0\n        }\n        if parens_count == 7 {\n            parens_level = 6\n\
    \            parens_count = 0\n        }\n        if parens_count == 8 {\n   \
    \         parens_level = 7\n            parens_count = 0\n        }\n        if\
    \ parens_count == 9 {\n            parens_level = 8\n            parens_count\
    \ = 0\n        }\n        if parens_count == 10 {\n            parens_level =\
    \ 9\n            parens_count = 0\n        }\n        if parens_count == 11 {\n\
    \            parens_level = 10\n            parens_count = 0\n        }\n    \
    \    if parens_count == 12 {\n            parens_level = 11\n            parens_count\
    \ = 0\n        }\n        if parens_count == 13 {\n            parens_level =\
    \ 12\n            parens_count = 0\n        }\n        if parens_count == 14 {\n\
    \            parens_level = 13\n            parens_count = 0\n        }\n    \
    \    if parens_count == 15 {\n            parens_level = 14\n            parens_count\
    \ = 0\n        }\n        if parens_count == 16 {\n            parens_level =\
    \ 15\n            parens_count = 0\n        }\n        if parens_count == 17 {\n\
    \            parens_level = 16\n            parens_count = 0\n        }\n    \
    \    if parens_count == 18 {\n            parens_level = 17\n            parens_count\
    \ = 0\n        }\n        if parens_count == 19 {\n            parens_level =\
    \ 18\n            parens_count = 0\n        }\n        if parens_count == 20 {\n\
    \            parens_level = 19\n            parens_count = 0\n        }\n    \
    \    if parens_count == 21 {\n            parens_level = 20\n            \n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp2n1wczfv.swift:123:67: error: expected '}' at end of brace statement\n\
    assert(parse_nested_parens(paren_string: \"(()(())((())))\") == [4])\n       \
    \                                                           ^\n/tmp/tmp2n1wczfv.swift:12:42:\
    \ note: to match this opening '{'\n    for c in paren_string.unicodeScalars {\n\
    \                                         ^\n/tmp/tmp2n1wczfv.swift:123:67: error:\
    \ expected '}' at end of brace statement\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])\n                                              \
    \                    ^\n/tmp/tmp2n1wczfv.swift:5:57: note: to match this opening\
    \ '{'\nfunc parse_nested_parens(paren_string: String) -> [Int] {\n           \
    \                                             ^\n/tmp/tmp2n1wczfv.swift:109:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmp2n1wczfv.swift:6:9:\
    \ warning: initialization of variable 'levels' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var levels = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n/tmp/tmp2n1wczfv.swift:7:9: warning: initialization of variable 'level'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var level = 0\n    ~~~~^~~~~\n    _\n/tmp/tmp2n1wczfv.swift:8:9: warning:\
    \ initialization of variable 'parens' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var parens = 0\n    ~~~~^~~~~~\n    _\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_levels_count = 0\n    var\
    \ paren_levels_count_max = 0\n    var paren_levels_count_min = 0\n    var paren_levels_count_max2\
    \ = 0\n    var paren_levels_count_min2 = 0\n    var paren_levels_count_max3 =\
    \ 0\n    var paren_levels_count_min3 = 0\n    var paren_levels_count_max4 = 0\n\
    \    var paren_levels_count_min4 = 0\n    var paren_levels_count_max5 = 0\n  \
    \  var paren_levels_count_min5 = 0\n    var paren_levels_count_max6 = 0\n    var\
    \ paren_levels_count_min6 = 0\n    var paren_levels_count_max7 = 0\n    var paren_levels_count_min7\
    \ = 0\n    var paren_levels_count_max8 = 0\n    var paren_levels_count_min8 =\
    \ 0\n    var paren_levels_count_max9 = 0\n    var paren_levels_count_min9 = 0\n\
    \    var paren_levels_count_max10 = 0\n    var paren_levels_count_min10 = 0\n\
    \    var paren_levels_count_max11 = 0\n    var paren_levels_count_min11 = 0\n\
    \    var paren_levels_count_max12 = 0\n    var paren_levels_count_min12 = 0\n\
    \    var paren_levels_count_max13 = 0\n    var paren_levels_count_min13 = 0\n\
    \    var paren_levels_count_max14 = 0\n    var paren_levels_count_min14 = 0\n\
    \    var paren_levels_count_max15 = 0\n    var paren_levels_count_min15 = 0\n\
    \    var paren_levels_count_max16 = 0\n    var paren_levels_count_min16 = 0\n\
    \    var paren_levels_count_max17 = 0\n    var paren_levels_count_min17 = 0\n\
    \    var paren_levels_count_max18 = 0\n    var paren_levels_count_min18 = 0\n\
    \    var paren_levels_count_max19 = 0\n    var paren_levels_count_min19 = 0\n\
    \    var paren_levels_count_max20 = 0\n    var paren_levels_count_min20 = 0\n\
    \    var paren_levels_count_max21 = 0\n    var paren_levels_count_min21 = 0\n\
    \    var paren_levels_count_max22 = 0\n    var paren_levels_count_min22 = 0\n\
    \    var paren_levels_count_max23 = 0\n    var paren_levels_count_min23 = 0\n\
    \    var paren_levels_count_max24 = 0\n    var paren_levels_count_min24 = 0\n\
    \    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpqqr_q4tq.swift:59:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpqqr_q4tq.swift:6:9: warning: initialization of variable 'level' was\
    \ never used; consider replacing with assignment to '_' or removing it\n    var\
    \ level = 0\n    ~~~~^~~~~\n    _\n/tmp/tmpqqr_q4tq.swift:7:9: warning: initialization\
    \ of variable 'levels' was never used; consider replacing with assignment to '_'\
    \ or removing it\n    var levels = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmpqqr_q4tq.swift:8:9:\
    \ warning: initialization of variable 'paren_level' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var paren_level = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpqqr_q4tq.swift:9:9: warning: initialization of variable 'paren_levels'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_levels = [Int]()\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpqqr_q4tq.swift:10:9:\
    \ warning: initialization of variable 'paren_levels_count' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_levels_count\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpqqr_q4tq.swift:11:9: warning:\
    \ initialization of variable 'paren_levels_count_max' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_levels_count_max\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpqqr_q4tq.swift:12:9: warning:\
    \ initialization of variable 'paren_levels_count_min' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_levels_count_min\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpqqr_q4tq.swift:13:9: warning:\
    \ initialization of variable 'paren_levels_count_max2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_levels_count_max2\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpqqr_q4tq.swift:14:9: warning:\
    \ initialization of variable 'paren_levels_count_min2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_levels_count_min2\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpqqr_q4tq.swift"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    for c in paren_string.unicodeScalars {\n \
    \       if c == '(' {\n            paren_count += 1\n            paren_level +=\
    \ 1\n        } else if c == ')' {\n            paren_count -= 1\n            if\
    \ paren_count < 0 {\n                levels.append(level)\n            }\n   \
    \         level -= 1\n        }\n    }\n    return levels\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmprn6m8l6q.swift:11:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmprn6m8l6q.swift:14:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var paren_level = [Int]()\n    var paren_level_stack\
    \ = [Int]()\n    var paren_level_stack_index = 0\n    var paren_level_stack_size\
    \ = paren_level_stack.count\n    var paren_level_stack_max_size = paren_level_stack_size\n\
    \    var paren_level_stack_max_index = paren_level_stack_size\n    var paren_level_stack_max_value\
    \ = paren_level_stack_size\n    var paren_level_stack_max_value_pos = 0\n    var\
    \ paren_level_stack_max_value_neg = 0\n    var paren_level_stack_max_value_neg_index\
    \ = 0\n    var paren_level_stack_max_value_neg_size = paren_level_stack_max_size\n\
    \    var paren_level_stack_max_value_neg_pos = 0\n    var paren_level_stack_max_value_neg_neg\
    \ = 0\n    var paren_level_stack_max_value_neg_neg_index = 0\n    var paren_level_stack_max_value_neg_neg_size\
    \ = paren_level_stack_max_size\n    var paren_level_stack_max_value_neg_neg_pos\
    \ = 0\n    var paren_level_stack_max_value_neg_neg_neg = 0\n    var paren_level_stack_max_value_neg_neg_neg_index\
    \ = 0\n    var paren_level_stack_max_value_neg_neg_neg_size = paren_level_stack_max_size\n\
    \    var paren_level_stack_max_value_neg_neg_neg_pos = 0\n    var paren_level_stack_max_value_neg_neg_neg_neg\
    \ = 0\n    var paren_level_stack_max_value_neg_neg_neg_neg_index = 0\n    var\
    \ paren_level_stack_max_value_neg_neg_neg_neg_size = paren_level_stack_max_size\n\
    \    var paren_level_stack_max_value_neg_neg_neg_neg_pos = 0\n    var paren_level_stack_max_value_neg_neg_neg_neg_neg\
    \ = 0\n    var paren_level_stack_max_value_neg_neg_neg_neg_neg_index = 0\n   \
    \ var paren_level_stack_max_value_neg_neg_neg_neg_neg_size = paren_level_stack_max_size\n\
    \    var paren_level_stack_max_value_neg_neg_neg_neg_neg_pos = 0\n    var paren_level_stack_max_value_neg_neg_neg_neg_neg_neg\
    \ = 0\n    var paren_level_stack_max_value_neg_neg_neg_neg_neg_neg_index = 0\n\
    \    var paren_level_stack_max_value_neg_neg_neg_neg_neg_neg_neg_size = 0\n  \
    \  var paren_level_stack_max_value_neg_neg_neg_neg_neg_neg_pos = 0\n    var paren_level_stack_max_value_neg_neg_neg_neg_neg_neg_neg\
    \ = 0\n    var paren_level_stack_max_value_neg_neg_neg_neg_neg_neg_neg_index =\
    \ 0\n    var paren_level_stack_max_value_neg_neg_neg_neg_neg_neg_neg_size = 0\n\
    \    var paren_level_stack_max_value_neg_neg_neg_neg_neg_neg_neg_pos = 0\n   \
    \ var paren_level_stack_max_value_neg_neg_\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpqcg_2jjk.swift:41:9: error: invalid redeclaration of 'paren_level_stack_max_value_neg_neg_neg_neg_neg_neg_neg_size'\n\
    \    var paren_level_stack_max_value_neg_neg_neg_neg_neg_neg_neg_size = 0\n  \
    \      ^\n/tmp/tmpqcg_2jjk.swift:37:9: note: 'paren_level_stack_max_value_neg_neg_neg_neg_neg_neg_neg_size'\
    \ previously declared here\n    var paren_level_stack_max_value_neg_neg_neg_neg_neg_neg_neg_size\
    \ = 0\n        ^\n/tmp/tmpqcg_2jjk.swift:43:9: error: type annotation missing\
    \ in pattern\n    var paren_level_stack_max_value_neg_neg_\n        ^\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var max_level = 0\n    var level = 0\n    var paren_level =\
    \ 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_levels = [Int]()\n\
    \    var paren_levels_string = \"\"\n    for c in paren_string.unicodeScalars\
    \ {\n        if c == paren_end {\n            paren_levels[paren_level] = level\n\
    \            paren_levels_string += String(paren_level)\n            paren_levels_string\
    \ += \" \"\n            paren_levels_string += String(level)\n            paren_levels_string\
    \ += \" \"\n            paren_levels_string += String(paren_start)\n         \
    \   paren_levels_string += \" \"\n            paren_levels_string += String(paren_end)\n\
    \            paren_levels_string += \" \"\n            paren_levels_string +=\
    \ String(paren_levels[paren_level])\n            paren_levels_string += \" \"\n\
    \            paren_levels_string += String(paren_levels[paren_level] + 1)\n  \
    \          paren_levels_string += \" \"\n            paren_levels_string += String(paren_levels[paren_level]\
    \ + 2)\n            paren_levels_string += \" \"\n            paren_levels_string\
    \ += String(paren_levels[paren_level] + 3)\n            paren_levels_string +=\
    \ \" \"\n            paren_levels_string += String(paren_levels[paren_level] +\
    \ 4)\n            paren_levels_string += \" \"\n            paren_levels_string\
    \ += String(paren_levels[paren_level] + 5)\n            paren_levels_string +=\
    \ \" \"\n            paren_levels_string += String(paren_levels[paren_level] +\
    \ 6)\n            paren_levels_string += \" \"\n            paren_levels_string\
    \ += String(paren_levels[paren_level] + 7)\n            paren_levels_string +=\
    \ \" \"\n            paren_levels_string += String(paren_levels[paren_level] +\
    \ 8)\n            paren_levels_string += \" \"\n            paren_levels_string\
    \ += String(paren_levels[paren_level] + 9)\n            paren_levels_string +=\
    \ \" \"\n            paren_levels_string += String(paren_levels[paren_level] +\
    \ 10)\n            paren_levels_string += \" \"\n            paren_levels_string\
    \ += String(paren_levels[paren_level] + 11)\n            paren_levels_string +=\
    \ \" \"\n            paren_levels_string += String(paren_levels[paren_level] +\
    \ 12)\n            paren_levels_string += \" \"\n            paren_levels_string\
    \ += String(paren\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpjsccy9o4.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpjsccy9o4.swift:50:42: note: to match this opening '('\n           \
    \ paren_levels_string += String(paren\n                                      \
    \   ^\n/tmp/tmpjsccy9o4.swift:68:67: error: expected '}' at end of brace statement\n\
    assert(parse_nested_parens(paren_string: \"(()(())((())))\") == [4])\n       \
    \                                                           ^\n/tmp/tmpjsccy9o4.swift:13:42:\
    \ note: to match this opening '{'\n    for c in paren_string.unicodeScalars {\n\
    \                                         ^\n/tmp/tmpjsccy9o4.swift:68:67: error:\
    \ expected '}' at end of brace statement\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])\n                                              \
    \                    ^\n/tmp/tmpjsccy9o4.swift:5:57: note: to match this opening\
    \ '{'\nfunc parse_nested_parens(paren_string: String) -> [Int] {\n           \
    \                                             ^\n/tmp/tmpjsccy9o4.swift:14:14:\
    \ error: referencing operator function '==' on 'BinaryInteger' requires that 'Unicode.Scalar'\
    \ conform to 'BinaryInteger'\n        if c == paren_end {\n             ^\nSwift.BinaryInteger:1:11:\
    \ note: where 'Self' = 'Unicode.Scalar'\nextension BinaryInteger {\n         \
    \ ^\n/tmp/tmpjsccy9o4.swift:50:43: error: cannot find 'paren' in scope\n     \
    \       paren_levels_string += String(paren\n                                \
    \          ^~~~~\n/tmp/tmpjsccy9o4.swift:54:6: error: operator functions can only\
    \ be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var paren_level = 0\n    var paren_nesting\
    \ = 0\n    var paren_nesting_max = 0\n    var paren_nesting_max_index = 0\n  \
    \  var paren_nesting_max_index2 = 0\n    var paren_nesting_max_index3 = 0\n  \
    \  var paren_nesting_max_index4 = 0\n    var paren_nesting_max_index5 = 0\n  \
    \  var paren_nesting_max_index6 = 0\n    var paren_nesting_max_index7 = 0\n  \
    \  var paren_nesting_max_index8 = 0\n    var paren_nesting_max_index9 = 0\n  \
    \  var paren_nesting_max_index10 = 0\n    var paren_nesting_max_index11 = 0\n\
    \    var paren_nesting_max_index12 = 0\n    var paren_nesting_max_index13 = 0\n\
    \    var paren_nesting_max_index14 = 0\n    var paren_nesting_max_index15 = 0\n\
    \    var paren_nesting_max_index16 = 0\n    var paren_nesting_max_index17 = 0\n\
    \    var paren_nesting_max_index18 = 0\n    var paren_nesting_max_index19 = 0\n\
    \    var paren_nesting_max_index20 = 0\n    var paren_nesting_max_index21 = 0\n\
    \    var paren_nesting_max_index22 = 0\n    var paren_nesting_max_index23 = 0\n\
    \    var paren_nesting_max_index24 = 0\n    var paren_nesting_max_index25 = 0\n\
    \    var paren_nesting_max_index26 = 0\n    var paren_nesting_max_index27 = 0\n\
    \    var paren_nesting_max_index28 = 0\n    var paren_nesting_max_index29 = 0\n\
    \    var paren_nesting_max_index30 = 0\n    var paren_nesting_max_index31 = 0\n\
    \    var paren_nesting_max_index32 = 0\n    var paren_nesting_max_index33 = 0\n\
    \    var paren_nesting_max_index34 = 0\n    var paren_nesting_max_index35 = 0\n\
    \    var paren_nesting_max_index36 = 0\n    var paren_nesting_max_index37 = 0\n\
    \    var paren_nesting_max_index38 = 0\n    var paren_nesting_max_index39 = 0\n\
    \    var paren_nesting_max_index40 = 0\n    var paren_nesting_max_index41 = 0\n\
    \    var paren_nesting_max_index42 = 0\n    var paren_nesting_max_index43 = 0\n\
    \    var paren_nesting_max_index44 = 0\n    var paren_nesting_max_index45 = 0\n\
    \    var paren_nesting_max_index46 = 0\n    var paren_nesting_max_index47 = 0\n\
    \    var paren_nesting_max_index48 = 0\n    var paren_nesting_max_index49\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp7ceqizob.swift:58:9: error: type annotation missing in pattern\n\
    \    var paren_nesting_max_index49\n        ^\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    for c in paren_string.characters {\n     \
    \   if c == '(' {\n            paren_count += 1\n            levels.append(paren_level)\n\
    \            paren_level = 0\n            paren_start = c\n        } else if c\
    \ == ')' {\n            paren_count -= 1\n            levels.append(paren_level)\n\
    \            if paren_count == 0 {\n                levels.append(paren_level)\n\
    \            }\n            paren_level = 0\n            paren_start = c\n   \
    \     } else {\n            paren_level += (c - paren_start)\n        }\n    }\n\
    \    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpt6t2tqxk.swift:11:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmpt6t2tqxk.swift:16:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmpt6t2tqxk.swift:10:27: error: 'characters' is unavailable:\
    \ Please use String directly\n    for c in paren_string.characters {\n       \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpt6t2tqxk.swift:15:27: error: cannot assign value of type 'Character'\
    \ to type 'Int'\n            paren_start = c\n                          ^\n/tmp/tmpt6t2tqxk.swift:23:27:\
    \ error: cannot assign value of type 'Character' to type 'Int'\n            paren_start\
    \ = c\n                          ^\n/tmp/tmpt6t2tqxk.swift:25:29: error: cannot\
    \ convert value of type 'Character' to expected argument type 'Int'\n        \
    \    paren_level += (c - paren_start)\n                            ^\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var max_level = 0\n    var level = 0\n    var paren_level =\
    \ 0\n    var paren_levels = [Int]()\n    var paren_levels_string = \"\"\n    var\
    \ paren_levels_string_index = 0\n    var paren_levels_string_size = 0\n    var\
    \ paren_levels_string_size_index = 0\n    var paren_levels_string_size_max = 0\n\
    \    var paren_levels_string_size_max_index = 0\n    var paren_levels_string_size_max_index\
    \ = 0\n    var paren_levels_string_size_max_index = 0\n    var paren_levels_string_size_max_index\
    \ = 0\n    var paren_levels_string_size_max_index = 0\n    var paren_levels_string_size_max_index\
    \ = 0\n    var paren_levels_string_size_max_index = 0\n    var paren_levels_string_size_max_index\
    \ = 0\n    var paren_levels_string_size_max_index = 0\n    var paren_levels_string_size_max_index\
    \ = 0\n    var paren_levels_string_size_max_index = 0\n    var paren_levels_string_size_max_index\
    \ = 0\n    var paren_levels_string_size_max_index = 0\n    var paren_levels_string_size_max_index\
    \ = 0\n    var paren_levels_string_size_max_index = 0\n    var paren_levels_string_size_max_index\
    \ = 0\n    var paren_levels_string_size_max_index = 0\n    var paren_levels_string_size_max_index\
    \ = 0\n    var paren_levels_string_size_max_index = 0\n    var paren_levels_string_size_max_index\
    \ = 0\n    var paren_levels_string_size_max_index = 0\n    var paren_levels_string_size_max_index\
    \ = 0\n    var paren_levels_string_size_max_index = 0\n    var paren_levels_string_size_max_index\
    \ = 0\n    var paren_levels_string_size_max_index = 0\n    var paren_levels_string_size_max_index\
    \ = 0\n    var paren_levels_string_size_max_index = 0\n    var paren_levels_string_size_max_index\
    \ = 0\n    var paren_levels_string_size_max_index = 0\n    var paren_levels_string_size_max_index\
    \ = 0\n    var paren_levels_string_size_max_index = 0\n    var paren_levels_string_size_max_index\
    \ = 0\n    var paren_levels_string_size_max_index = 0\n    var paren_levels_string_size_max_index\
    \ = 0\n    var paren_levels_string_size_max_index = 0\n    var paren_levels_string_size_max_index\
    \ = 0\n    var paren_levels_string_size_max_index = 0\n    var paren_levels_string_size_max_index\
    \ = 0\n    var paren_levels_string_size_max_index = 0\n    var paren_levels_string_size_max_index\
    \ = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpgznhroz8.swift:16:9: error: invalid redeclaration of 'paren_levels_string_size_max_index'\n\
    \    var paren_levels_string_size_max_index = 0\n        ^\n/tmp/tmpgznhroz8.swift:15:9:\
    \ note: 'paren_levels_string_size_max_index' previously declared here\n    var\
    \ paren_levels_string_size_max_index = 0\n        ^\n/tmp/tmpgznhroz8.swift:17:9:\
    \ error: invalid redeclaration of 'paren_levels_string_size_max_index'\n    var\
    \ paren_levels_string_size_max_index = 0\n        ^\n/tmp/tmpgznhroz8.swift:15:9:\
    \ note: 'paren_levels_string_size_max_index' previously declared here\n    var\
    \ paren_levels_string_size_max_index = 0\n        ^\n/tmp/tmpgznhroz8.swift:18:9:\
    \ error: invalid redeclaration of 'paren_levels_string_size_max_index'\n    var\
    \ paren_levels_string_size_max_index = 0\n        ^\n/tmp/tmpgznhroz8.swift:15:9:\
    \ note: 'paren_levels_string_size_max_index' previously declared here\n    var\
    \ paren_levels_string_size_max_index = 0\n        ^\n/tmp/tmpgznhroz8.swift:19:9:\
    \ error: invalid redeclaration of 'paren_levels_string_size_max_index'\n    var\
    \ paren_levels_string_size_max_index = 0\n        ^\n/tmp/tmpgznhroz8.swift:15:9:\
    \ note: 'paren_levels_string_size_max_index' previously declared here\n    var\
    \ paren_levels_string_size_max_index = 0\n        ^\n/tmp/tmpgznhroz8.swift:20:9:\
    \ error: invalid redeclaration of 'paren_levels_string_size_max_index'\n    var\
    \ paren_levels_string_size_max_index = 0\n        ^\n/tmp/tmpgznhroz8.swift:15:9:\
    \ note: 'paren_levels_string_size_max_index' previously declared here\n    var\
    \ paren_levels_string_size_max_index = 0\n        ^\n/tmp/tmpgznhroz8.swift:21:9:\
    \ error: invalid redeclaration of 'paren_levels_string_size_max_index'\n    var\
    \ paren_levels_string_size_max_index = 0\n        ^\n/tmp/tmpgznhroz8.swift:15:9:\
    \ note: 'paren_levels_string_size_max_index' previously declared here\n    var\
    \ paren_levels_string_size_max_index = 0\n        ^\n/tmp/tmpgznhroz8.swift:22:9:\
    \ error: invalid redeclaration of 'paren_levels_string_size_max_index'\n    var\
    \ paren_levels_string_size_max_index = 0\n        ^\n/tmp/tmpgznhroz8.swift:15:9:\
    \ note: 'par"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    for ch in paren_string.characters {\n        if ch == '(' {\n     \
    \       paren_count += 1\n        } else if ch == ')' {\n            paren_count\
    \ -= 1\n            if paren_count == 0 {\n                levels.append(level)\n\
    \                level = 0\n            }\n        }\n        level += 1\n   \
    \ }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpud6y6r33.swift:10:18: error: single-quoted string literal found,\
    \ use '\"'\n        if ch == '(' {\n                 ^~~\n                 \"\
    (\"\n/tmp/tmpud6y6r33.swift:12:25: error: single-quoted string literal found,\
    \ use '\"'\n        } else if ch == ')' {\n                        ^~~\n     \
    \                   \")\"\n/tmp/tmpud6y6r33.swift:9:28: error: 'characters' is\
    \ unavailable: Please use String directly\n    for ch in paren_string.characters\
    \ {\n                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var max_level = 0\n    var level = 0\n    var paren_level =\
    \ 0\n    var paren_level_stack = [Int]()\n    var paren_level_stack_index = 0\n\
    \    var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n   \
    \ var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n    var\
    \ paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n    var paren_level_stack_size\
    \ = 0\n    var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n\
    \    var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n   \
    \ var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n    var\
    \ paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n    var paren_level_stack_index\
    \ = 0\n    var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n\
    \    var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n   \
    \ var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n    var\
    \ paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n    var paren_level_stack_size\
    \ = 0\n    var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n\
    \    var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n   \
    \ var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n    var\
    \ paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n    var paren_level_stack_index\
    \ = 0\n    var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n\
    \    var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n   \
    \ var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n    var\
    \ paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n    var paren_level_stack_size\
    \ = 0\n    var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n\
    \    var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n   \
    \ var paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n    var\
    \ paren_level_stack_index = 0\n    var paren_level_stack_size = 0\n    var paren_level_stack_index\
    \ = 0\n    var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n\
    \    var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n   \
    \ var paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n    var\
    \ paren_level_stack_size = 0\n    var paren_level_stack_index = 0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpokw9tj8e.swift:12:9: error: invalid redeclaration of 'paren_level_stack_index'\n\
    \    var paren_level_stack_index = 0\n        ^\n/tmp/tmpokw9tj8e.swift:10:9:\
    \ note: 'paren_level_stack_index' previously declared here\n    var paren_level_stack_index\
    \ = 0\n        ^\n/tmp/tmpokw9tj8e.swift:13:9: error: invalid redeclaration of\
    \ 'paren_level_stack_size'\n    var paren_level_stack_size = 0\n        ^\n/tmp/tmpokw9tj8e.swift:11:9:\
    \ note: 'paren_level_stack_size' previously declared here\n    var paren_level_stack_size\
    \ = 0\n        ^\n/tmp/tmpokw9tj8e.swift:14:9: error: invalid redeclaration of\
    \ 'paren_level_stack_index'\n    var paren_level_stack_index = 0\n        ^\n\
    /tmp/tmpokw9tj8e.swift:10:9: note: 'paren_level_stack_index' previously declared\
    \ here\n    var paren_level_stack_index = 0\n        ^\n/tmp/tmpokw9tj8e.swift:15:9:\
    \ error: invalid redeclaration of 'paren_level_stack_size'\n    var paren_level_stack_size\
    \ = 0\n        ^\n/tmp/tmpokw9tj8e.swift:11:9: note: 'paren_level_stack_size'\
    \ previously declared here\n    var paren_level_stack_size = 0\n        ^\n/tmp/tmpokw9tj8e.swift:16:9:\
    \ error: invalid redeclaration of 'paren_level_stack_index'\n    var paren_level_stack_index\
    \ = 0\n        ^\n/tmp/tmpokw9tj8e.swift:10:9: note: 'paren_level_stack_index'\
    \ previously declared here\n    var paren_level_stack_index = 0\n        ^\n/tmp/tmpokw9tj8e.swift:17:9:\
    \ error: invalid redeclaration of 'paren_level_stack_size'\n    var paren_level_stack_size\
    \ = 0\n        ^\n/tmp/tmpokw9tj8e.swift:11:9: note: 'paren_level_stack_size'\
    \ previously declared here\n    var paren_level_stack_size = 0\n        ^\n/tmp/tmpokw9tj8e.swift:18:9:\
    \ error: invalid redeclaration of 'paren_level_stack_index'\n    var paren_level_stack_index\
    \ = 0\n        ^\n/tmp/tmpokw9tj8e.swift:10:9: note: 'paren_level_stack_index'\
    \ previously declared here\n    var paren_level_stack_index = 0\n        ^\n/tmp/tmpokw9tj8e.swift:19:9:\
    \ error: invalid redeclaration of 'paren_level_stack_size'\n    var paren_level_stack_size\
    \ = 0\n        ^\n/tmp/tmpokw9tj8e.swift:11:9: note: 'paren_level_stack_size'\
    \ previously dec"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    var paren_start_index = 0\n    var paren_end_index = 0\n    var paren_start_char\
    \ = 0\n    var paren_end_char = 0\n    var paren_start_char_index = 0\n    var\
    \ paren_end_char_index = 0\n    var paren_start_char_length = 0\n    var paren_end_char_length\
    \ = 0\n    var paren_start_char_length_index = 0\n    var paren_end_char_length_index\
    \ = 0\n    var paren_start_char_length_index = 0\n    var paren_end_char_length_index\
    \ = 0\n    var paren_start_char_length_index = 0\n    var paren_end_char_length_index\
    \ = 0\n    var paren_start_char_length_index = 0\n    var paren_end_char_length_index\
    \ = 0\n    var paren_start_char_length_index = 0\n    var paren_end_char_length_index\
    \ = 0\n    var paren_start_char_length_index = 0\n    var paren_end_char_length_index\
    \ = 0\n    var paren_start_char_length_index = 0\n    var paren_end_char_length_index\
    \ = 0\n    var paren_start_char_length_index = 0\n    var paren_end_char_length_index\
    \ = 0\n    var paren_start_char_length_index = 0\n    var paren_end_char_length_index\
    \ = 0\n    var paren_start_char_length_index = 0\n    var paren_end_char_length_index\
    \ = 0\n    var paren_start_char_length_index = 0\n    var paren_end_char_length_index\
    \ = 0\n    var paren_start_char_length_index = 0\n    var paren_end_char_length_index\
    \ = 0\n    var paren_start_char_length_index = 0\n    var paren_end_char_length_index\
    \ = 0\n    var paren_start_char_length_index = 0\n    var paren_end_char_length_index\
    \ = 0\n    var paren_start_char_length_index = 0\n    var paren_end_char_length_index\
    \ = 0\n    var paren_start_char_length_index = 0\n    var paren_end_char_length_index\
    \ = 0\n    var paren_start_char_length_index = 0\n    var paren_end_char_length_index\
    \ = 0\n    var paren_start_char_length_index = 0\n    var paren_end_char_length_index\
    \ = 0\n    var paren_start_char_length_index = 0\n    var paren_end_char_length_index\
    \ = 0\n    var paren_start_char_length_index = 0\n    var paren_end_char_length_index\
    \ = 0\n    var paren_start_char_length_index = 0\n    var paren_end_char_length_index\
    \ = 0\n    var paren_start_char_length_index = 0\n    var paren_end_char_length_index\
    \ = 0\n    var paren_start_char_length_index = 0\n    var paren_end_char_length_index\
    \ = 0\n    var paren_start_char_length_index = 0\n    var paren_end_char_length_index\
    \ = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmph__hm0cl.swift:19:9: error: invalid redeclaration of 'paren_start_char_length_index'\n\
    \    var paren_start_char_length_index = 0\n        ^\n/tmp/tmph__hm0cl.swift:17:9:\
    \ note: 'paren_start_char_length_index' previously declared here\n    var paren_start_char_length_index\
    \ = 0\n        ^\n/tmp/tmph__hm0cl.swift:20:9: error: invalid redeclaration of\
    \ 'paren_end_char_length_index'\n    var paren_end_char_length_index = 0\n   \
    \     ^\n/tmp/tmph__hm0cl.swift:18:9: note: 'paren_end_char_length_index' previously\
    \ declared here\n    var paren_end_char_length_index = 0\n        ^\n/tmp/tmph__hm0cl.swift:21:9:\
    \ error: invalid redeclaration of 'paren_start_char_length_index'\n    var paren_start_char_length_index\
    \ = 0\n        ^\n/tmp/tmph__hm0cl.swift:17:9: note: 'paren_start_char_length_index'\
    \ previously declared here\n    var paren_start_char_length_index = 0\n      \
    \  ^\n/tmp/tmph__hm0cl.swift:22:9: error: invalid redeclaration of 'paren_end_char_length_index'\n\
    \    var paren_end_char_length_index = 0\n        ^\n/tmp/tmph__hm0cl.swift:18:9:\
    \ note: 'paren_end_char_length_index' previously declared here\n    var paren_end_char_length_index\
    \ = 0\n        ^\n/tmp/tmph__hm0cl.swift:23:9: error: invalid redeclaration of\
    \ 'paren_start_char_length_index'\n    var paren_start_char_length_index = 0\n\
    \        ^\n/tmp/tmph__hm0cl.swift:17:9: note: 'paren_start_char_length_index'\
    \ previously declared here\n    var paren_start_char_length_index = 0\n      \
    \  ^\n/tmp/tmph__hm0cl.swift:24:9: error: invalid redeclaration of 'paren_end_char_length_index'\n\
    \    var paren_end_char_length_index = 0\n        ^\n/tmp/tmph__hm0cl.swift:18:9:\
    \ note: 'paren_end_char_length_index' previously declared here\n    var paren_end_char_length_index\
    \ = 0\n        ^\n/tmp/tmph__hm0cl.swift:25:9: error: invalid redeclaration of\
    \ 'paren_start_char_length_index'\n    var paren_start_char_length_index = 0\n\
    \        ^\n/tmp/tmph__hm0cl.swift:17:9: note: 'paren_start_char_length_index'\
    \ previously declared here\n    var paren_start_char_length_index = 0\n      \
    \  ^\n/tmp/tmph__hm0cl.swift:26:9: error: invalid redec"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var paren_level = 0\n    var paren_nesting\
    \ = 0\n    var paren_nesting_level = 0\n    var paren_nesting_nesting = 0\n  \
    \  var paren_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_nesting_level = 0\n    var\
    \ paren_nesting_nesting_nesting_nesting_nesting_nesting = 0\n    var paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_nesting_nesting_level = 0\n\
    \    var paren_nesting_nesting_nesting_nesting_nesting_nesting_level = 0\n   \
    \ var paren_nesting_nesting_nesting_nesting_nesting_nesting_level = 0\n    var\
    \ paren_nesting_nesting_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_nesting_nesting_level = 0\n\
    \    var paren_nesting_nesting_nesting_nesting_nesting_nesting_level = 0\n   \
    \ var paren_nesting_nesting_nesting_nesting_nesting_nesting_level = 0\n    var\
    \ paren_nesting_nesting_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_nesting_nesting_level = 0\n\
    \    var paren_nesting_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_level = 0\n    var paren_nesting_level =\
    \ 0\n    var paren_level = 0\n    var paren_nesting_level = 0\n    var paren_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpea6l2sfg.swift:19:9: error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_nesting_level'\n\
    \    var paren_nesting_nesting_nesting_nesting_nesting_level = 0\n        ^\n\
    /tmp/tmpea6l2sfg.swift:17:9: note: 'paren_nesting_nesting_nesting_nesting_nesting_level'\
    \ previously declared here\n    var paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n        ^\n/tmp/tmpea6l2sfg.swift:21:9: error: invalid redeclaration of\
    \ 'paren_nesting_nesting_nesting_nesting_nesting_nesting_level'\n    var paren_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n        ^\n/tmp/tmpea6l2sfg.swift:20:9: note: 'paren_nesting_nesting_nesting_nesting_nesting_nesting_level'\
    \ previously declared here\n    var paren_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n        ^\n/tmp/tmpea6l2sfg.swift:22:9: error: invalid redeclaration of\
    \ 'paren_nesting_nesting_nesting_nesting_nesting_nesting_level'\n    var paren_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n        ^\n/tmp/tmpea6l2sfg.swift:20:9: note: 'paren_nesting_nesting_nesting_nesting_nesting_nesting_level'\
    \ previously declared here\n    var paren_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n        ^\n/tmp/tmpea6l2sfg.swift:23:9: error: invalid redeclaration of\
    \ 'paren_nesting_nesting_nesting_nesting_nesting_nesting_level'\n    var paren_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n        ^\n/tmp/tmpea6l2sfg.swift:20:9: note: 'paren_nesting_nesting_nesting_nesting_nesting_nesting_level'\
    \ previously declared here\n    var paren_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n        ^\n/tmp/tmpea6l2sfg.swift:24:9: error: invalid redeclaration of\
    \ 'paren_nesting_nesting_nesting_nesting_nesting_nesting_level'\n    var paren_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n        ^\n/tmp/tmpea6l2sfg.swift:20:9: note: 'paren_nesting_nesting_nesting_nesting_nesting_nesting_level'\
    \ previously declared here\n    var paren_nesting_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n        ^\n/tmp/tmpea6l2sfg.swift:25:9: error:"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    for c in paren_string.unicodeScalars {\n        switch c {\n      \
    \  case .OpenSquareBracket:\n            paren_count += 1\n            levels[level]\
    \ = paren_count\n        case .CloseSquareBracket:\n            levels[level]\
    \ = paren_count\n            level -= 1\n            if level < 0 {\n        \
    \        level = 0\n            }\n        case .OpenParenthesis:\n          \
    \  levels[level] = paren_count\n        case .CloseParenthesis:\n            levels[level]\
    \ = paren_count\n            level -= 1\n            if level < 0 {\n        \
    \        level = 0\n            }\n        }\n    }\n    return levels\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp5n_dgakp.swift:11:15: error: type 'Unicode.Scalar' has no member\
    \ 'OpenSquareBracket'\n        case .OpenSquareBracket:\n             ~^~~~~~~~~~~~~~~~~\n\
    /tmp/tmp5n_dgakp.swift:14:15: error: type 'Unicode.Scalar' has no member 'CloseSquareBracket'\n\
    \        case .CloseSquareBracket:\n             ~^~~~~~~~~~~~~~~~~~\n/tmp/tmp5n_dgakp.swift:20:15:\
    \ error: type 'Unicode.Scalar' has no member 'OpenParenthesis'\n        case .OpenParenthesis:\n\
    \             ~^~~~~~~~~~~~~~~\n/tmp/tmp5n_dgakp.swift:22:15: error: type 'Unicode.Scalar'\
    \ has no member 'CloseParenthesis'\n        case .CloseParenthesis:\n        \
    \     ~^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n \
    \   var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n \
    \   var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n \
    \   var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n \
    \   var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n \
    \   var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n \
    \   var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n \
    \   var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_level = 0\n    var paren_levels = [Int]()\n    var\
    \ paren_level = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n \
    \   var paren_levels = [Int]()\n    var paren_level = 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmppw6ryzgo.swift:10:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmppw6ryzgo.swift:8:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmppw6ryzgo.swift:11:9:\
    \ error: invalid redeclaration of 'paren_levels'\n    var paren_levels = [Int]()\n\
    \        ^\n/tmp/tmppw6ryzgo.swift:9:9: note: 'paren_levels' previously declared\
    \ here\n    var paren_levels = [Int]()\n        ^\n/tmp/tmppw6ryzgo.swift:12:9:\
    \ error: invalid redeclaration of 'paren_level'\n    var paren_level = 0\n   \
    \     ^\n/tmp/tmppw6ryzgo.swift:8:9: note: 'paren_level' previously declared here\n\
    \    var paren_level = 0\n        ^\n/tmp/tmppw6ryzgo.swift:13:9: error: invalid\
    \ redeclaration of 'paren_levels'\n    var paren_levels = [Int]()\n        ^\n\
    /tmp/tmppw6ryzgo.swift:9:9: note: 'paren_levels' previously declared here\n  \
    \  var paren_levels = [Int]()\n        ^\n/tmp/tmppw6ryzgo.swift:14:9: error:\
    \ invalid redeclaration of 'paren_level'\n    var paren_level = 0\n        ^\n\
    /tmp/tmppw6ryzgo.swift:8:9: note: 'paren_level' previously declared here\n   \
    \ var paren_level = 0\n        ^\n/tmp/tmppw6ryzgo.swift:15:9: error: invalid\
    \ redeclaration of 'paren_levels'\n    var paren_levels = [Int]()\n        ^\n\
    /tmp/tmppw6ryzgo.swift:9:9: note: 'paren_levels' previously declared here\n  \
    \  var paren_levels = [Int]()\n        ^\n/tmp/tmppw6ryzgo.swift:16:9: error:\
    \ invalid redeclaration of 'paren_level'\n    var paren_level = 0\n        ^\n\
    /tmp/tmppw6ryzgo.swift:8:9: note: 'paren_level' previously declared here\n   \
    \ var paren_level = 0\n        ^\n/tmp/tmppw6ryzgo.swift:17:9: error: invalid\
    \ redeclaration of 'paren_levels'\n    var paren_levels = [Int]()\n        ^\n\
    /tmp/tmppw6ryzgo.swift:9:9: note: 'paren_levels' previously declared here\n  \
    \  var paren_levels = [Int]()\n        ^\n/tmp/tmppw6ryzgo.swift:18:9: error:\
    \ invalid redeclaration of 'paren_level'\n    var paren_level = 0\n        ^\n\
    /tmp/tmppw6ryzgo.swift:8:9: note: 'paren_level' previously declared here\n   \
    \ var paren_level = 0\n        ^\n/tmp/tmppw6ryzgo.swift:19:9: error: inva"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    for ch in\
    \ paren_string.unicodeScalars {\n        if ch == '(' {\n            paren_count\
    \ += 1\n        } else if ch == ')' {\n            paren_count -= 1\n        \
    \    if paren_count == 0 {\n                levels.append(paren_count)\n     \
    \       }\n        }\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmplaqush6o.swift:9:18: error: single-quoted string literal found,\
    \ use '\"'\n        if ch == '(' {\n                 ^~~\n                 \"\
    (\"\n/tmp/tmplaqush6o.swift:11:25: error: single-quoted string literal found,\
    \ use '\"'\n        } else if ch == ')' {\n                        ^~~\n     \
    \                   \")\"\n"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_length =\
    \ 0\n    var paren_char = 0\n    var paren_char_count = 0\n    var paren_char_count_max\
    \ = 0\n    var paren_char_count_max_index = 0\n    var paren_char_count_max_index2\
    \ = 0\n    var paren_char_count_max_index3 = 0\n    var paren_char_count_max_index4\
    \ = 0\n    var paren_char_count_max_index5 = 0\n    var paren_char_count_max_index6\
    \ = 0\n    var paren_char_count_max_index7 = 0\n    var paren_char_count_max_index8\
    \ = 0\n    var paren_char_count_max_index9 = 0\n    var paren_char_count_max_index10\
    \ = 0\n    var paren_char_count_max_index11 = 0\n    var paren_char_count_max_index12\
    \ = 0\n    var paren_char_count_max_index13 = 0\n    var paren_char_count_max_index14\
    \ = 0\n    var paren_char_count_max_index15 = 0\n    var paren_char_count_max_index16\
    \ = 0\n    var paren_char_count_max_index17 = 0\n    var paren_char_count_max_index18\
    \ = 0\n    var paren_char_count_max_index19 = 0\n    var paren_char_count_max_index20\
    \ = 0\n    var paren_char_count_max_index21 = 0\n    var paren_char_count_max_index22\
    \ = 0\n    var paren_char_count_max_index23 = 0\n    var paren_char_count_max_index24\
    \ = 0\n    var paren_char_count_max_index25 = 0\n    var paren_char_count_max_index26\
    \ = 0\n    var paren_char_count_max_index27 = 0\n    var paren_char_count_max_index28\
    \ = 0\n    var paren_char_count_max_index29 = 0\n    var paren_char_count_max_index30\
    \ = 0\n    var paren_char_count_max_index31 = 0\n    var paren_char_count_max_index32\
    \ = 0\n    var paren_char_count_max_index33 = 0\n    var paren_char_count_max_index34\
    \ = 0\n    var paren_char_count_max_index35 = 0\n    var paren_char_count_max_index36\
    \ = 0\n    var paren_char_count_max_index37 = 0\n    var paren_char_count_max_index38\
    \ = 0\n    var paren_char_count_max_index39 = 0\n    var paren_char_count_max_index40\
    \ = 0\n    var paren_char_count_max_index41 = 0\n    var paren_char_count_max_index42\
    \ = 0\n    var paren_char_count_max_index43 = 0\n    var paren_char_count_max_index44\
    \ = 0\n    var paren_char_count_max_index45 = 0\n    var paren_char_count_max_index\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpoqhhw3ej.swift:60:9: error: type annotation missing in pattern\n\
    \    var paren_char_count_max_index\n        ^\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_levels_len = 0\n    var paren_levels_lens = [Int]()\n\
    \    var paren_levels_lens_len = 0\n    var paren_levels_lens_lens = [Int]()\n\
    \    var paren_levels_lens_lens_len = 0\n    var paren_levels_lens_lens_lens =\
    \ [Int]()\n    var paren_levels_lens_lens_lens_len = 0\n    var paren_levels_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_len = 0\n    var paren_levels_lens_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_len = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_lens_len = 0\n    var\
    \ paren_levels_lens_lens_lens_lens_lens_lens_lens = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_len\
    \ = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens = [Int]()\n\
    \    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_len = 0\n    var\
    \ paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens = [Int]()\n    var\
    \ paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_len = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\
    \ = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\
    \ = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpbzm8oufh.swift:32:9: error: type annotation missing in pattern\n\
    \    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_levels_string = \"\"\n    var paren_levels_string_index\
    \ = 0\n    var paren_levels_string_size = 0\n    var paren_levels_string_size_index\
    \ = 0\n    var paren_levels_string_size_max = 0\n    var paren_levels_string_size_max_index\
    \ = 0\n    var paren_levels_string_size_max_string = \"\"\n    var paren_levels_string_size_max_string_index\
    \ = 0\n    var paren_levels_string_size_max_string_size = 0\n    var paren_levels_string_size_max_string_size_index\
    \ = 0\n    var paren_levels_string_size_max_string_size_max = 0\n    var paren_levels_string_size_max_string_size_max_index\
    \ = 0\n    var paren_levels_string_size_max_string_size_max_string = \"\"\n  \
    \  var paren_levels_string_size_max_string_size_max_string_index = 0\n    var\
    \ paren_levels_string_size_max_string_size_max_string_size = 0\n    var paren_levels_string_size_max_string_size_max_string_size_index\
    \ = 0\n    var paren_levels_string_size_max_string_size_max_string_size_max =\
    \ 0\n    var paren_levels_string_size_max_string_size_max_string_size_max_index\
    \ = 0\n    var paren_levels_string_size_max_string_size_max_string_size_max_string\
    \ = \"\"\n    var paren_levels_string_size_max_string_size_max_string_size_max_string_index\
    \ = 0\n    var paren_levels_string_size_max_string_size_max_string_size_max_string_size\
    \ = 0\n    var paren_levels_string_size_max_string_size_max_string_size_max_string_size_index\
    \ = 0\n    var paren_levels_string_size_max_string_size_max_string_size_max_string_size_max\
    \ = 0\n    var paren_levels_string_size_max_string_size_max_string_size_max_string_size_max_index\
    \ = 0\n    var paren_levels_string_size_max_string_size_max_string_size_max_string_size_max_string\
    \ = \"\"\n    var paren_levels_string_size_max_string_size_max_string_size_max_string_size_max_string_index\
    \ = 0\n    var paren_levels_string_size_max_string_size_max_string_size_max_string_size_max_string_size\
    \ = 0\n    var paren_levels_string_size_max_string_size_max_string_size_max_string_size_max_string_size_index\
    \ = 0\n    var paren_levels_string_size_max_string_size_max_string_size_max_string_size_max_string_size_max\
    \ = 0\n    var paren_levels_string_size_max_string_size_max_string_size_max_string_size_max_string_size_max_index\
    \ = 0\n    var paren_levels_string_size_max_string_size_max_string_size_max_string_size_max_string_size_max_string\
    \ = \"\"\n    var paren_levels_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpmgzr48v6.swift:40:9: error: type annotation missing in pattern\n\
    \    var paren_levels_\n        ^\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var paren_stack = [Int]()\n    var paren_level\
    \ = [Int]()\n    var paren_level_count = [Int]()\n    var paren_level_max_count\
    \ = [Int]()\n    var paren_level_max_level = [Int]()\n    var paren_level_max_level_num\
    \ = [Int]()\n    var paren_level_max_level_num_index = [Int]()\n    var paren_level_max_level_num_index2\
    \ = [Int]()\n    var paren_level_max_level_num_index3 = [Int]()\n    var paren_level_max_level_num_index4\
    \ = [Int]()\n    var paren_level_max_level_num_index5 = [Int]()\n    var paren_level_max_level_num_index6\
    \ = [Int]()\n    var paren_level_max_level_num_index7 = [Int]()\n    var paren_level_max_level_num_index8\
    \ = [Int]()\n    var paren_level_max_level_num_index9 = [Int]()\n    var paren_level_max_level_num_index10\
    \ = [Int]()\n    var paren_level_max_level_num_index11 = [Int]()\n    var paren_level_max_level_num_index12\
    \ = [Int]()\n    var paren_level_max_level_num_index13 = [Int]()\n    var paren_level_max_level_num_index14\
    \ = [Int]()\n    var paren_level_max_level_num_index15 = [Int]()\n    var paren_level_max_level_num_index16\
    \ = [Int]()\n    var paren_level_max_level_num_index17 = [Int]()\n    var paren_level_max_level_num_index18\
    \ = [Int]()\n    var paren_level_max_level_num_index19 = [Int]()\n    var paren_level_max_level_num_index20\
    \ = [Int]()\n    var paren_level_max_level_num_index21 = [Int]()\n    var paren_level_max_level_num_index22\
    \ = [Int]()\n    var paren_level_max_level_num_index23 = [Int]()\n    var paren_level_max_level_num_index24\
    \ = [Int]()\n    var paren_level_max_level_num_index25 = [Int]()\n    var paren_level_max_level_num_index26\
    \ = [Int]()\n    var paren_level_max_level_num_index27 = [Int]()\n    var paren_level_max_level_num_index28\
    \ = [Int]()\n    var paren_level_max_level_num_index29 = [Int]()\n    var paren_level_max_level_num_index30\
    \ = [Int]()\n    var paren_level_max_level_num_index31 = [Int]()\n    var paren_level_max_level_num_index32\
    \ = [Int]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmppq10zdtk.swift:44:45: error: expected member name or constructor\
    \ call after type name\n    var paren_level_max_level_num_index32 = [Int]\n  \
    \                                          ^\n/tmp/tmppq10zdtk.swift:44:49: note:\
    \ add arguments after the type to construct a value of the type\n    var paren_level_max_level_num_index32\
    \ = [Int]\n                                                ^\n               \
    \                                  ()\n/tmp/tmppq10zdtk.swift:44:49: note: use\
    \ '.self' to reference the type object\n    var paren_level_max_level_num_index32\
    \ = [Int]\n                                                ^\n               \
    \                                  .self\n/tmp/tmppq10zdtk.swift:6:9: warning:\
    \ initialization of variable 'level' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var level = 0\n    ~~~~^~~~~\n    _\n/tmp/tmppq10zdtk.swift:7:9:\
    \ warning: initialization of variable 'paren_stack' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var paren_stack = [Int]()\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmppq10zdtk.swift:8:9: warning: initialization of variable 'paren_level'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_level = [Int]()\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmppq10zdtk.swift:9:9:\
    \ warning: initialization of variable 'paren_level_count' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_level_count =\
    \ [Int]()\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmppq10zdtk.swift:10:9: warning:\
    \ initialization of variable 'paren_level_max_count' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_level_max_count\
    \ = [Int]()\n    ~~~~^~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmppq10zdtk.swift:11:9:\
    \ warning: initialization of variable 'paren_level_max_level' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var paren_level_max_level\
    \ = [Int]()\n    ~~~~^~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmppq10zdtk.swift:12:9:\
    \ warning: initialization of variable 'paren_level_"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_levels_size = 0\n    var paren_levels_sizes = [Int]()\n\
    \    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_indexs = [Int]()\n\
    \    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_indexs = [Int]()\n\
    \    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_indexs = [Int]()\n\
    \    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_indexs = [Int]()\n\
    \    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_indexs = [Int]()\n\
    \    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_indexs = [Int]()\n\
    \    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_indexs = [Int]()\n\
    \    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_indexs = [Int]()\n\
    \    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_indexs = [Int]()\n\
    \    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_indexs = [Int]()\n\
    \    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_indexs = [Int]()\n\
    \    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_indexs = [Int]()\n\
    \    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_indexs = [Int]()\n\
    \    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_indexs = [Int]()\n\
    \    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_indexs = [Int]()\n\
    \    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_indexs = [Int]()\n\
    \    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_indexs = [Int]()\n\
    \    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_indexs = [Int]()\n\
    \    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_indexs = [Int]()\n\
    \    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_indexs = [Int]()\n\
    \    var paren_levels_sizes_index = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpvvffbldh.swift:52:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpvvffbldh.swift:13:9: error: invalid redeclaration of 'paren_levels_sizes_index'\n\
    \    var paren_levels_sizes_index = 0\n        ^\n/tmp/tmpvvffbldh.swift:11:9:\
    \ note: 'paren_levels_sizes_index' previously declared here\n    var paren_levels_sizes_index\
    \ = 0\n        ^\n/tmp/tmpvvffbldh.swift:14:9: error: invalid redeclaration of\
    \ 'paren_levels_sizes_indexs'\n    var paren_levels_sizes_indexs = [Int]()\n \
    \       ^\n/tmp/tmpvvffbldh.swift:12:9: note: 'paren_levels_sizes_indexs' previously\
    \ declared here\n    var paren_levels_sizes_indexs = [Int]()\n        ^\n/tmp/tmpvvffbldh.swift:15:9:\
    \ error: invalid redeclaration of 'paren_levels_sizes_index'\n    var paren_levels_sizes_index\
    \ = 0\n        ^\n/tmp/tmpvvffbldh.swift:11:9: note: 'paren_levels_sizes_index'\
    \ previously declared here\n    var paren_levels_sizes_index = 0\n        ^\n\
    /tmp/tmpvvffbldh.swift:16:9: error: invalid redeclaration of 'paren_levels_sizes_indexs'\n\
    \    var paren_levels_sizes_indexs = [Int]()\n        ^\n/tmp/tmpvvffbldh.swift:12:9:\
    \ note: 'paren_levels_sizes_indexs' previously declared here\n    var paren_levels_sizes_indexs\
    \ = [Int]()\n        ^\n/tmp/tmpvvffbldh.swift:17:9: error: invalid redeclaration\
    \ of 'paren_levels_sizes_index'\n    var paren_levels_sizes_index = 0\n      \
    \  ^\n/tmp/tmpvvffbldh.swift:11:9: note: 'paren_levels_sizes_index' previously\
    \ declared here\n    var paren_levels_sizes_index = 0\n        ^\n/tmp/tmpvvffbldh.swift:18:9:\
    \ error: invalid redeclaration of 'paren_levels_sizes_indexs'\n    var paren_levels_sizes_indexs\
    \ = [Int]()\n        ^\n/tmp/tmpvvffbldh.swift:12:9: note: 'paren_levels_sizes_indexs'\
    \ previously declared here\n    var paren_levels_sizes_indexs = [Int]()\n    \
    \    ^\n/tmp/tmpvvffbldh.swift:19:9: error: invalid redeclaration of 'paren_levels_sizes_index'\n\
    \    var paren_levels_sizes_index = 0\n        ^\n/tmp/tmpvvffbldh.swift:11:9:\
    \ note: 'paren_levels_sizes_index' previously declared here\n    var paren_levels_sizes_index\
    \ = 0\n        ^\n/tmp/tmpvvffbldh.swift:20:9: error: invalid re"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_levels_len = 0\n    var paren_levels_lens = [Int]()\n\
    \    var paren_levels_lens_len = 0\n    var paren_levels_lens_lens = [Int]()\n\
    \    var paren_levels_lens_lens_len = 0\n    var paren_levels_lens_lens_lens =\
    \ [Int]()\n    var paren_levels_lens_lens_lens_len = 0\n    var paren_levels_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_len = 0\n    var paren_levels_lens_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_len = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_lens_len = 0\n    var\
    \ paren_levels_lens_lens_lens_lens_lens_lens_lens = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_len\
    \ = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens = [Int]()\n\
    \    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_len = 0\n    var\
    \ paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens = [Int]()\n    var\
    \ paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_len = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\
    \ = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int]()\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\
    \ = 0\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpdkhjhsvp.swift:32:84: error: expected member name or constructor\
    \ call after type name\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int]\n                                                                  \
    \                 ^\n/tmp/tmpdkhjhsvp.swift:32:88: note: add arguments after the\
    \ type to construct a value of the type\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int]\n                                                                  \
    \                     ^\n                                                    \
    \                                    ()\n/tmp/tmpdkhjhsvp.swift:32:88: note: use\
    \ '.self' to reference the type object\n    var paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = [Int]\n                                                                  \
    \                     ^\n                                                    \
    \                                    .self\n/tmp/tmpdkhjhsvp.swift:6:9: warning:\
    \ initialization of variable 'levels' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var levels = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n/tmp/tmpdkhjhsvp.swift:7:9: warning: initialization of variable 'paren_level'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_level = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpdkhjhsvp.swift:8:9:\
    \ warning: initialization of variable 'paren_levels' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_levels = [Int]()\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpdkhjhsvp.swift:9:9: warning: initialization\
    \ of variable 'paren_levels_len' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var paren_levels_len = 0\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpdkhjhsvp.swift:10:9: warning: initialization of variable 'paren_levels_lens'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_levels_lens = [Int]()\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpdkhjhsvp.sw"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var paren_count = 0\n    var paren_groups = [String]()\n    var paren_group\
    \ = [String]()\n    var paren_group_level = 0\n    var paren_group_max_level =\
    \ 0\n    var paren_group_max_level_parens = 0\n    var paren_group_paren_count\
    \ = 0\n    var paren_group_paren_groups = [String]()\n    var paren_group_paren_group\
    \ = [String]()\n    var paren_group_paren_group_level = 0\n    var paren_group_paren_group_max_level\
    \ = 0\n    var paren_group_paren_group_max_level_parens = 0\n    var paren_group_paren_group_paren_count\
    \ = 0\n    var paren_group_paren_group_paren_groups = [String]()\n    var paren_group_paren_group_paren_group\
    \ = [String]()\n    var paren_group_paren_group_paren_group_level = 0\n    var\
    \ paren_group_paren_group_paren_group_max_level = 0\n    var paren_group_paren_group_paren_group_max_level_parens\
    \ = 0\n    var paren_group_paren_group_paren_group_paren_count = 0\n    var paren_group_paren_group_paren_group_paren_groups\
    \ = [String]()\n    var paren_group_paren_group_paren_group_paren_group = [String]()\n\
    \    var paren_group_paren_group_paren_group_paren_group_level = 0\n    var paren_group_paren_group_paren_group_paren_group_max_level\
    \ = 0\n    var paren_group_paren_group_paren_group_paren_group_max_level_parens\
    \ = 0\n    var paren_group_paren_group_paren_group_paren_group_paren_count = 0\n\
    \    var paren_group_paren_group_paren_group_paren_group_paren_groups = [String]()\n\
    \    var paren_group_paren_group_paren_group_paren_group_paren_group = [String]()\n\
    \    var paren_group_paren_group_paren_group_paren_group_paren_group_level = 0\n\
    \    var paren_group_paren_group_paren_group_paren_group_paren_group_max_level\
    \ = 0\n    var paren_group_paren_group_paren_group_paren_group_paren_group_max_level_parens\
    \ = 0\n    var paren_group_paren_group_paren_group_paren_group_paren_group_paren_count\
    \ = 0\n    var paren_group_paren_group_paren_group_paren_group_paren_group_paren_groups\
    \ = [String]()\n    var paren_group_paren_group_paren_group_paren_group_paren_group_paren_group\
    \ = [String]()\n    var paren_group_paren_group_paren_group_paren_group_paren\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp7uk9mzc7.swift:42:9: error: type annotation missing in pattern\n\
    \    var paren_group_paren_group_paren_group_paren_group_paren\n        ^\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_level = 0\n    var paren_nesting\
    \ = 0\n    var paren_nesting_max = -1\n    var paren_nesting_min = -1\n    var\
    \ paren_nesting_max_index = -1\n    var paren_nesting_min_index = -1\n    var\
    \ paren_nesting_max_count = 0\n    var paren_nesting_min_count = 0\n    var paren_nesting_max_count_index\
    \ = -1\n    var paren_nesting_min_count_index = -1\n    var paren_nesting_max_count_count\
    \ = 0\n    var paren_nesting_min_count_count = 0\n    var paren_nesting_max_count_index\
    \ = 0\n    var paren_nesting_min_count_index = 0\n    var paren_nesting_max_count_count_index\
    \ = -1\n    var paren_nesting_min_count_count_index = -1\n    var paren_nesting_max_count_count_count\
    \ = 0\n    var paren_nesting_min_count_count_count = 0\n    var paren_nesting_max_count_count_index\
    \ = 0\n    var paren_nesting_min_count_count_index = 0\n    var paren_nesting_max_count_count_count_index\
    \ = -1\n    var paren_nesting_min_count_count_count_index = -1\n    var paren_nesting_max_count_count_count_count\
    \ = 0\n    var paren_nesting_min_count_count_count_count = 0\n    var paren_nesting_max_count_count_count_index\
    \ = 0\n    var paren_nesting_min_count_count_count_index = 0\n    var paren_nesting_max_count_count_count_count_index\
    \ = -1\n    var paren_nesting_min_count_count_count_count_index = -1\n    var\
    \ paren_nesting_max_count_count_count_count_count = 0\n    var paren_nesting_min_count_count_count_count_count\
    \ = 0\n    var paren_nesting_max_count_count_count_count_index = 0\n    var paren_nesting_min_count_count_count_count_index\
    \ = 0\n    var paren_nesting_max_count_count_count_count_count_index = -1\n  \
    \  var paren_nesting_min_count_count_count_count_count_index = -1\n    var paren_nesting_max_count_count_count_count_count_count\
    \ = 0\n    var paren_nesting_min_count_count_count_count_count_count = 0\n   \
    \ var paren_nesting_max_count_count_count_count_count_index = 0\n    var paren_nesting_min_count_count_count_count_count_count_index\
    \ = 0\n    var paren_nesting_max_count_count_count_count_count_count_index = -1\n\
    \    var paren_nesting_min_count_count_count_count_count_count_index = -1\n  \
    \  var paren_nesting_max_count_count_count_count_count_count_count = 0\n    var\
    \ paren_nesting_min_count_count_count_count_count_count_count = 0\n    var paren_nesting_max_count_count_count_count_count_count_index\
    \ = 0\n    var paren_nesting_min_count_count_count_count_count_count_index = 0\n\
    \    var paren_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpdf1mrqvj.swift:19:9: error: invalid redeclaration of 'paren_nesting_max_count_index'\n\
    \    var paren_nesting_max_count_index = 0\n        ^\n/tmp/tmpdf1mrqvj.swift:15:9:\
    \ note: 'paren_nesting_max_count_index' previously declared here\n    var paren_nesting_max_count_index\
    \ = -1\n        ^\n/tmp/tmpdf1mrqvj.swift:20:9: error: invalid redeclaration of\
    \ 'paren_nesting_min_count_index'\n    var paren_nesting_min_count_index = 0\n\
    \        ^\n/tmp/tmpdf1mrqvj.swift:16:9: note: 'paren_nesting_min_count_index'\
    \ previously declared here\n    var paren_nesting_min_count_index = -1\n     \
    \   ^\n/tmp/tmpdf1mrqvj.swift:25:9: error: invalid redeclaration of 'paren_nesting_max_count_count_index'\n\
    \    var paren_nesting_max_count_count_index = 0\n        ^\n/tmp/tmpdf1mrqvj.swift:21:9:\
    \ note: 'paren_nesting_max_count_count_index' previously declared here\n    var\
    \ paren_nesting_max_count_count_index = -1\n        ^\n/tmp/tmpdf1mrqvj.swift:26:9:\
    \ error: invalid redeclaration of 'paren_nesting_min_count_count_index'\n    var\
    \ paren_nesting_min_count_count_index = 0\n        ^\n/tmp/tmpdf1mrqvj.swift:22:9:\
    \ note: 'paren_nesting_min_count_count_index' previously declared here\n    var\
    \ paren_nesting_min_count_count_index = -1\n        ^\n/tmp/tmpdf1mrqvj.swift:31:9:\
    \ error: invalid redeclaration of 'paren_nesting_max_count_count_count_index'\n\
    \    var paren_nesting_max_count_count_count_index = 0\n        ^\n/tmp/tmpdf1mrqvj.swift:27:9:\
    \ note: 'paren_nesting_max_count_count_count_index' previously declared here\n\
    \    var paren_nesting_max_count_count_count_index = -1\n        ^\n/tmp/tmpdf1mrqvj.swift:32:9:\
    \ error: invalid redeclaration of 'paren_nesting_min_count_count_count_index'\n\
    \    var paren_nesting_min_count_count_count_index = 0\n        ^\n/tmp/tmpdf1mrqvj.swift:28:9:\
    \ note: 'paren_nesting_min_count_count_count_index' previously declared here\n\
    \    var paren_nesting_min_count_count_count_index = -1\n        ^\n/tmp/tmpdf1mrqvj.swift:37:9:\
    \ error: invalid redeclaration of 'paren_nesting_max_count_count_count_count_index'\n\
    \    var paren_nesting_max_count_count_count_count_ind"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_levels_len = 0\n    var paren_levels_len2\
    \ = 0\n    var paren_levels_len3 = 0\n    var paren_levels_len4 = 0\n    var paren_levels_len5\
    \ = 0\n    var paren_levels_len6 = 0\n    var paren_levels_len7 = 0\n    var paren_levels_len8\
    \ = 0\n    var paren_levels_len9 = 0\n    var paren_levels_len10 = 0\n    var\
    \ paren_levels_len11 = 0\n    var paren_levels_len12 = 0\n    var paren_levels_len13\
    \ = 0\n    var paren_levels_len14 = 0\n    var paren_levels_len15 = 0\n    var\
    \ paren_levels_len16 = 0\n    var paren_levels_len17 = 0\n    var paren_levels_len18\
    \ = 0\n    var paren_levels_len19 = 0\n    var paren_levels_len20 = 0\n    var\
    \ paren_levels_len21 = 0\n    var paren_levels_len22 = 0\n    var paren_levels_len23\
    \ = 0\n    var paren_levels_len24 = 0\n    var paren_levels_len25 = 0\n    var\
    \ paren_levels_len26 = 0\n    var paren_levels_len27 = 0\n    var paren_levels_len28\
    \ = 0\n    var paren_levels_len29 = 0\n    var paren_levels_len30 = 0\n    var\
    \ paren_levels_len31 = 0\n    var paren_levels_len32 = 0\n    var paren_levels_len33\
    \ = 0\n    var paren_levels_len34 = 0\n    var paren_levels_len35 = 0\n    var\
    \ paren_levels_len36 = 0\n    var paren_levels_len37 = 0\n    var paren_levels_len38\
    \ = 0\n    var paren_levels_len39 = 0\n    var paren_levels_len40 = 0\n    var\
    \ paren_levels_len41 = 0\n    var paren_levels_len42 = 0\n    var paren_levels_len43\
    \ = 0\n    var paren_levels_len44 = 0\n    var paren_levels_len45 = 0\n    var\
    \ paren_levels_len46 = 0\n    var paren_levels_len47 = 0\n    var paren_levels_len48\
    \ = 0\n    var paren_levels_len49 = 0\n    var paren_levels_len50 = 0\n    var\
    \ paren_levels_len51 = 0\n    var paren_levels_len52 = 0\n    var paren_levels_len53\
    \ = 0\n    var paren_levels_len54 = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpseha7xq9.swift:64:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpseha7xq9.swift:6:9: warning: initialization of variable 'levels'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var levels = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmpseha7xq9.swift:7:9: warning:\
    \ initialization of variable 'level' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var level = 0\n    ~~~~^~~~~\n    _\n/tmp/tmpseha7xq9.swift:8:9:\
    \ warning: initialization of variable 'paren_level' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var paren_level = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpseha7xq9.swift:9:9: warning: initialization of variable 'paren_levels'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_levels = [Int]()\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpseha7xq9.swift:10:9:\
    \ warning: initialization of variable 'paren_levels_len' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_levels_len =\
    \ 0\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpseha7xq9.swift:11:9: warning: initialization\
    \ of variable 'paren_levels_len2' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var paren_levels_len2 = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpseha7xq9.swift:12:9: warning: initialization of variable 'paren_levels_len3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_levels_len3 = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpseha7xq9.swift:13:9:\
    \ warning: initialization of variable 'paren_levels_len4' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_levels_len4 =\
    \ 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpseha7xq9.swift:14:9: warning: initialization\
    \ of variable 'paren_levels_len5' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var paren_levels_len5 = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpseha7xq9.swift:15:9: warning: initialization of variable 'paren_levels_len6'\
    \ was never"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    for c in paren_string.unicodeScalars {\n        if c == parenthesisOpeningCharacter\
    \ {\n            paren_count++\n        } else if c == parenthesisClosingCharacter\
    \ {\n            paren_count--\n        }\n        if paren_count == 0 {\n   \
    \         levels.append(level)\n        }\n        level++\n    }\n    return\
    \ levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpnxt_zh4l.swift:10:17: error: cannot find 'parenthesisOpeningCharacter'\
    \ in scope\n        if c == parenthesisOpeningCharacter {\n                ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpnxt_zh4l.swift:11:24: error: cannot find operator '++' in scope; did you\
    \ mean '+= 1'?\n            paren_count++\n                       ^~\n/tmp/tmpnxt_zh4l.swift:12:24:\
    \ error: cannot find 'parenthesisClosingCharacter' in scope\n        } else if\
    \ c == parenthesisClosingCharacter {\n                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpnxt_zh4l.swift:13:24: error: cannot find operator '--' in scope; did you\
    \ mean '-= 1'?\n            paren_count--\n                       ^~\n/tmp/tmpnxt_zh4l.swift:18:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        level++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    for c in paren_string.characters {\n        if c == '(' {\n       \
    \     paren_count += 1\n        } else if c == ')' {\n            paren_count\
    \ -= 1\n        } else if paren_count == 0 {\n            levels.append(level)\n\
    \            level = 0\n        }\n        level += 1\n    }\n    return levels\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpzpe4r_ww.swift:10:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmpzpe4r_ww.swift:12:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmpzpe4r_ww.swift:9:27: error: 'characters' is unavailable:\
    \ Please use String directly\n    for c in paren_string.characters {\n       \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    for c in paren_string.characters {\n     \
    \   if c == '(' {\n            paren_count += 1\n            levels.append(paren_level)\n\
    \            paren_level = 0\n        } else if c == ')' {\n            paren_count\
    \ -= 1\n            if paren_count > 0 {\n                levels.append(paren_level)\n\
    \                paren_level = 0\n            } else {\n                levels.append(0)\n\
    \            }\n        } else {\n            paren_level += 1\n        }\n  \
    \  }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmppdzeh76m.swift:11:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmppdzeh76m.swift:15:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmppdzeh76m.swift:10:27: error: 'characters' is unavailable:\
    \ Please use String directly\n    for c in paren_string.characters {\n       \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmppdzeh76m.swift:7:9: warning: initialization of variable 'level' was\
    \ never used; consider replacing with assignment to '_' or removing it\n    var\
    \ level = 0\n    ~~~~^~~~~\n    _\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var paren_stack = [Int]()\n    var paren_level\
    \ = [Int]()\n    var paren_level_count = [Int]()\n    var paren_level_max_count\
    \ = [Int]()\n    var paren_level_max_count_index = 0\n    var paren_level_max_count_index\
    \ = 0\n    var paren_level_max_count_index2 = 0\n    var paren_level_max_count_index3\
    \ = 0\n    var paren_level_max_count_index4 = 0\n    var paren_level_max_count_index5\
    \ = 0\n    var paren_level_max_count_index6 = 0\n    var paren_level_max_count_index7\
    \ = 0\n    var paren_level_max_count_index8 = 0\n    var paren_level_max_count_index9\
    \ = 0\n    var paren_level_max_count_index10 = 0\n    var paren_level_max_count_index11\
    \ = 0\n    var paren_level_max_count_index12 = 0\n    var paren_level_max_count_index13\
    \ = 0\n    var paren_level_max_count_index14 = 0\n    var paren_level_max_count_index15\
    \ = 0\n    var paren_level_max_count_index16 = 0\n    var paren_level_max_count_index17\
    \ = 0\n    var paren_level_max_count_index18 = 0\n    var paren_level_max_count_index19\
    \ = 0\n    var paren_level_max_count_index20 = 0\n    var paren_level_max_count_index21\
    \ = 0\n    var paren_level_max_count_index22 = 0\n    var paren_level_max_count_index23\
    \ = 0\n    var paren_level_max_count_index24 = 0\n    var paren_level_max_count_index25\
    \ = 0\n    var paren_level_max_count_index26 = 0\n    var paren_level_max_count_index27\
    \ = 0\n    var paren_level_max_count_index28 = 0\n    var paren_level_max_count_index29\
    \ = 0\n    var paren_level_max_count_index30 = 0\n    var paren_level_max_count_index31\
    \ = 0\n    var paren_level_max_count_index32 = 0\n    var paren_level_max_count_index33\
    \ = 0\n    var paren_level_max_count_index34 = 0\n    var paren_level_max_count_index35\
    \ = 0\n    var paren_level_max_count_index36 = 0\n    var paren_level_max_count_index37\
    \ = 0\n    var paren_level_max_count_index38 = 0\n    var paren_level_max_count_index39\
    \ = 0\n    var paren_level_max_count_index40 = 0\n    var paren_level_max_count_index41\
    \ = 0\n    var paren_level_max_count_index42 = 0\n    var paren_level_max_count_index43\
    \ = 0\n    var paren_level_max_count_index44 = 0\n    var paren_level_max_count_index45\
    \ = 0\n    var paren_level_max_count_index46 = 0\n    var \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpngulkt5g.swift:58:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpngulkt5g.swift:12:9: error: invalid redeclaration of 'paren_level_max_count_index'\n\
    \    var paren_level_max_count_index = 0\n        ^\n/tmp/tmpngulkt5g.swift:11:9:\
    \ note: 'paren_level_max_count_index' previously declared here\n    var paren_level_max_count_index\
    \ = 0\n        ^\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    for c in paren_string.unicodeScalars {\n        if paren_count == 0\
    \ {\n            levels.append(level)\n            level++\n        }\n      \
    \  if c == '(' {\n            paren_count++\n        } else if c == ')' {\n  \
    \          paren_count--\n            if paren_count == 0 {\n                levels.append(level)\n\
    \                level++\n            }\n        }\n    }\n    return levels\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpznvtb7fj.swift:14:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmpznvtb7fj.swift:16:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmpznvtb7fj.swift:12:18: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            level++\n                 ^~\n/tmp/tmpznvtb7fj.swift:15:24:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  paren_count++\n                       ^~\n/tmp/tmpznvtb7fj.swift:17:24: error:\
    \ cannot find operator '--' in scope; did you mean '-= 1'?\n            paren_count--\n\
    \                       ^~\n/tmp/tmpznvtb7fj.swift:20:22: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n                level++\n             \
    \        ^~\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_level = 0\n    for ch in\
    \ paren_string.unicodeScalars {\n        switch ch {\n        case .LeftParenthesis:\n\
    \            paren_level++\n        case .RightParenthesis:\n            paren_level--\n\
    \        case .Space:\n            if paren_level == 0 {\n                levels.append(paren_level)\n\
    \            }\n        }\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpb2ccllj1.swift:10:15: error: type 'Unicode.Scalar' has no member\
    \ 'LeftParenthesis'\n        case .LeftParenthesis:\n             ~^~~~~~~~~~~~~~~\n\
    /tmp/tmpb2ccllj1.swift:12:15: error: type 'Unicode.Scalar' has no member 'RightParenthesis'\n\
    \        case .RightParenthesis:\n             ~^~~~~~~~~~~~~~~~\n/tmp/tmpb2ccllj1.swift:14:15:\
    \ error: type 'Unicode.Scalar' has no member 'Space'\n        case .Space:\n \
    \            ~^~~~~\n/tmp/tmpb2ccllj1.swift:11:24: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n            paren_level++\n           \
    \            ^~\n/tmp/tmpb2ccllj1.swift:13:24: error: cannot find operator '--'\
    \ in scope; did you mean '-= 1'?\n            paren_level--\n                \
    \       ^~\n"
  stdout: ''
  timestamp: 1660009377
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var paren_count =\
    \ 0\n    var paren_level = 0\n    var paren_max_level = 0\n    var paren_paren_count\
    \ = 0\n    var paren_paren_level = 0\n    var paren_paren_max_level = 0\n    var\
    \ paren_paren_paren_count = 0\n    var paren_paren_paren_level = 0\n    var paren_paren_paren_max_level\
    \ = 0\n    var paren_paren_paren_paren_count = 0\n    var paren_paren_paren_paren_level\
    \ = 0\n    var paren_paren_paren_paren_max_level = 0\n    var paren_paren_paren_paren_paren_count\
    \ = 0\n    var paren_paren_paren_paren_paren_level = 0\n    var paren_paren_paren_paren_paren_max_level\
    \ = 0\n    var paren_paren_paren_paren_paren_paren_count = 0\n    var paren_paren_paren_paren_paren_paren_level\
    \ = 0\n    var paren_paren_paren_paren_paren_paren_max_level = 0\n    var paren_paren_paren_paren_paren_paren_paren_count\
    \ = 0\n    var paren_paren_paren_paren_paren_paren_paren_level = 0\n    var paren_paren_paren_paren_paren_paren_paren_max_level\
    \ = 0\n    var paren_paren_paren_paren_paren_paren_paren_paren_count = 0\n   \
    \ var paren_paren_paren_paren_paren_paren_paren_paren_level = 0\n    var paren_paren_paren_paren_paren_paren_paren_paren_max_level\
    \ = 0\n    var paren_paren_paren_paren_paren_paren_paren_paren_paren_count = 0\n\
    \    var paren_paren_paren_paren_paren_paren_paren_paren_paren_level = 0\n   \
    \ var paren_paren_paren_paren_paren_paren_paren_paren_paren_max_level = 0\n  \
    \  var paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_count = 0\n\
    \    var paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level = 0\n\
    \    var paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_max_level\
    \ = 0\n    var paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_count\
    \ = 0\n    var paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_level\
    \ = 0\n    var paren\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp3hdzzkh8.swift:40:9: error: type annotation missing in pattern\n\
    \    var paren\n        ^\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_level_count = 0\n    var paren_level_char_count = 0\n   \
    \ var paren_level_char = 0\n    var paren_level_char_index = 0\n    var paren_level_char_length\
    \ = 0\n    var paren_level_char_length_index = 0\n    var paren_level_char_length_count\
    \ = 0\n    var paren_level_char_length = 0\n    var paren_level_char_length_index\
    \ = 0\n    var paren_level_char_length_count = 0\n    var paren_level_char_length\
    \ = 0\n    var paren_level_char_length_index = 0\n    var paren_level_char_length_count\
    \ = 0\n    var paren_level_char_length = 0\n    var paren_level_char_length_index\
    \ = 0\n    var paren_level_char_length_count = 0\n    var paren_level_char_length\
    \ = 0\n    var paren_level_char_length_index = 0\n    var paren_level_char_length_count\
    \ = 0\n    var paren_level_char_length = 0\n    var paren_level_char_length_index\
    \ = 0\n    var paren_level_char_length_count = 0\n    var paren_level_char_length\
    \ = 0\n    var paren_level_char_length_index = 0\n    var paren_level_char_length_count\
    \ = 0\n    var paren_level_char_length = 0\n    var paren_level_char_length_index\
    \ = 0\n    var paren_level_char_length_count = 0\n    var paren_level_char_length\
    \ = 0\n    var paren_level_char_length_index = 0\n    var paren_level_char_length_count\
    \ = 0\n    var paren_level_char_length = 0\n    var paren_level_char_length_index\
    \ = 0\n    var paren_level_char_length_count = 0\n    var paren_level_char_length\
    \ = 0\n    var paren_level_char_length_index = 0\n    var paren_level_char_length_count\
    \ = 0\n    var paren_level_char_length = 0\n    var paren_level_char_length_index\
    \ = 0\n    var paren_level_char_length_count = 0\n    var paren_level_char_length\
    \ = 0\n    var paren_level_char_length_index = 0\n    var paren_level_char_length_count\
    \ = 0\n    var paren_level_char_length = 0\n    var paren_level_char_length_index\
    \ = 0\n    var paren_level_char_length_count = 0\n    var paren_level_char_length\
    \ = 0\n    var paren_level_char_length_index = 0\n    var paren_level_char_length_count\
    \ = 0\n    var paren_level_char_length = 0\n    var paren_level_char_length_index\
    \ = 0\n    var paren_level_char_length_count = 0\n    var paren_level_char_length\
    \ = 0\n    var paren_level_char_length_index = 0\n    var paren_level_char_length_count\
    \ = 0\n    var paren_level_char_length = 0\n    var paren_level_char_length_index\
    \ = 0\n    var paren_level_char_length\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp7rqbpt71.swift:16:9: error: invalid redeclaration of 'paren_level_char_length'\n\
    \    var paren_level_char_length = 0\n        ^\n/tmp/tmp7rqbpt71.swift:13:9:\
    \ note: 'paren_level_char_length' previously declared here\n    var paren_level_char_length\
    \ = 0\n        ^\n/tmp/tmp7rqbpt71.swift:17:9: error: invalid redeclaration of\
    \ 'paren_level_char_length_index'\n    var paren_level_char_length_index = 0\n\
    \        ^\n/tmp/tmp7rqbpt71.swift:14:9: note: 'paren_level_char_length_index'\
    \ previously declared here\n    var paren_level_char_length_index = 0\n      \
    \  ^\n/tmp/tmp7rqbpt71.swift:18:9: error: invalid redeclaration of 'paren_level_char_length_count'\n\
    \    var paren_level_char_length_count = 0\n        ^\n/tmp/tmp7rqbpt71.swift:15:9:\
    \ note: 'paren_level_char_length_count' previously declared here\n    var paren_level_char_length_count\
    \ = 0\n        ^\n/tmp/tmp7rqbpt71.swift:19:9: error: invalid redeclaration of\
    \ 'paren_level_char_length'\n    var paren_level_char_length = 0\n        ^\n\
    /tmp/tmp7rqbpt71.swift:13:9: note: 'paren_level_char_length' previously declared\
    \ here\n    var paren_level_char_length = 0\n        ^\n/tmp/tmp7rqbpt71.swift:20:9:\
    \ error: invalid redeclaration of 'paren_level_char_length_index'\n    var paren_level_char_length_index\
    \ = 0\n        ^\n/tmp/tmp7rqbpt71.swift:14:9: note: 'paren_level_char_length_index'\
    \ previously declared here\n    var paren_level_char_length_index = 0\n      \
    \  ^\n/tmp/tmp7rqbpt71.swift:21:9: error: invalid redeclaration of 'paren_level_char_length_count'\n\
    \    var paren_level_char_length_count = 0\n        ^\n/tmp/tmp7rqbpt71.swift:15:9:\
    \ note: 'paren_level_char_length_count' previously declared here\n    var paren_level_char_length_count\
    \ = 0\n        ^\n/tmp/tmp7rqbpt71.swift:22:9: error: invalid redeclaration of\
    \ 'paren_level_char_length'\n    var paren_level_char_length = 0\n        ^\n\
    /tmp/tmp7rqbpt71.swift:13:9: note: 'paren_level_char_length' previously declared\
    \ here\n    var paren_level_char_length = 0\n        ^\n/tmp/tmp7rqbpt71.swift:23:9:\
    \ error: invalid redeclaration of 'paren_level_char_length_index'\n    "
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var paren_level = [Int]()\n    var paren_level_count\
    \ = [Int]()\n    var paren_level_stack = [Int]()\n    var paren_level_stack_count\
    \ = [Int]()\n    var paren_level_stack_pointer = [Int]()\n    var paren_level_stack_pointer_count\
    \ = [Int]()\n    var paren_level_stack_pointer_pointer = [Int]()\n    var paren_level_stack_pointer_pointer_count\
    \ = [Int]()\n    var paren_level_stack_pointer_pointer_pointer = [Int]()\n   \
    \ var paren_level_stack_pointer_pointer_pointer_count = [Int]()\n    var paren_level_stack_pointer_pointer_pointer_pointer\
    \ = [Int]()\n    var paren_level_stack_pointer_pointer_pointer_pointer_count =\
    \ [Int]()\n    var paren_level_stack_pointer_pointer_pointer_pointer_pointer =\
    \ [Int]()\n    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_count\
    \ = [Int]()\n    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = [Int]()\n    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_count\
    \ = [Int]()\n    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = [Int]()\n    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_count\
    \ = [Int]()\n    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = [Int]()\n    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_count\
    \ = [Int]()\n    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = [Int]()\n    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_count\
    \ = [Int]()\n    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = [Int]()\n    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_count\
    \ = [Int]()\n    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = [Int]()\n    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_count\
    \ = [Int\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpqj4vjoik.swift:32:127: error: expected ']' in container literal\
    \ expression\n    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_count\
    \ = [Int\n                                                                   \
    \                                                           ^\n/tmp/tmpqj4vjoik.swift:32:123:\
    \ note: to match this opening '['\n    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_count\
    \ = [Int\n                                                                   \
    \                                                       ^\n/tmp/tmpqj4vjoik.swift:30:9:\
    \ error: invalid redeclaration of 'paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_count'\n\
    \    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_count\
    \ = [Int]()\n        ^\n/tmp/tmpqj4vjoik.swift:28:9: note: 'paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_count'\
    \ previously declared here\n    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_count\
    \ = [Int]()\n        ^\n/tmp/tmpqj4vjoik.swift:32:123: error: expected member\
    \ name or constructor call after type name\n    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_count\
    \ = [Int\n                                                                   \
    \                                                       ^\n/tmp/tmpqj4vjoik.swift:32:124:\
    \ note: add arguments after the type to construct a value of the type\n    var\
    \ paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_count\
    \ = [Int\n                                                                   \
    \                                                        ^\n                 \
    \                                                                            \
    \                                 ()\n/tmp/"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    var paren_end = 0\n    var paren_level_count\
    \ = 0\n    var paren_level_start = 0\n    var paren_level_end = 0\n    var paren_level_char_count\
    \ = 0\n    var paren_level_char_start = 0\n    var paren_level_char_end = 0\n\
    \    var paren_level_char_char_start = 0\n    var paren_level_char_char_end =\
    \ 0\n    var paren_level_char_char_char_start = 0\n    var paren_level_char_char_char_end\
    \ = 0\n    var paren_level_char_char_char_char_start = 0\n    var paren_level_char_char_char_char_end\
    \ = 0\n    var paren_level_char_char_char_char_char_start = 0\n    var paren_level_char_char_char_char_char_end\
    \ = 0\n    var paren_level_char_char_char_char_char_char_start = 0\n    var paren_level_char_char_char_char_char_char_end\
    \ = 0\n    var paren_level_char_char_char_char_char_char_char_start = 0\n    var\
    \ paren_level_char_char_char_char_char_char_char_end = 0\n    var paren_level_char_char_char_char_char_char_char_char_start\
    \ = 0\n    var paren_level_char_char_char_char_char_char_char_char_end = 0\n \
    \   var paren_level_char_char_char_char_char_char_char_char_char_start = 0\n \
    \   var paren_level_char_char_char_char_char_char_char_char_char_end = 0\n   \
    \ var paren_level_char_char_char_char_char_char_char_char_char_char_start = 0\n\
    \    var paren_level_char_char_char_char_char_char_char_char_char_char_end = 0\n\
    \    var paren_level_char_char_char_char_char_char_char_char_char_char_char_start\
    \ = 0\n    var paren_level_char_char_char_char_char_char_char_char_char_char_char_end\
    \ = 0\n    var paren_level_char_char_char_char_char_char_char_char_char_char_char_char_char_start\
    \ = 0\n    var paren_level_char_char_char_char_char_char_char_char_char_char_char_char_char_end\
    \ = 0\n    var paren_level_char_char_char_char_char_char_char_char_char_char_char_char_char_char_start\
    \ = 0\n    var paren_level_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_end\
    \ = 0\n    var paren_level_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_start\
    \ = 0\n    var paren_level_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpnagbzqx7.swift:42:9: error: type annotation missing in pattern\n\
    \    var paren_level_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_start = 0\n    var paren_end = 0\n\
    \    var paren_start_idx = 0\n    var paren_end_idx = 0\n    var paren_start_idx2\
    \ = 0\n    var paren_end_idx2 = 0\n    var paren_start_idx3 = 0\n    var paren_end_idx3\
    \ = 0\n    var paren_start_idx4 = 0\n    var paren_end_idx4 = 0\n    var paren_start_idx5\
    \ = 0\n    var paren_end_idx5 = 0\n    var paren_start_idx6 = 0\n    var paren_end_idx6\
    \ = 0\n    var paren_start_idx7 = 0\n    var paren_end_idx7 = 0\n    var paren_start_idx8\
    \ = 0\n    var paren_end_idx8 = 0\n    var paren_start_idx9 = 0\n    var paren_end_idx9\
    \ = 0\n    var paren_start_idx10 = 0\n    var paren_end_idx10 = 0\n    var paren_start_idx11\
    \ = 0\n    var paren_end_idx11 = 0\n    var paren_start_idx12 = 0\n    var paren_end_idx12\
    \ = 0\n    var paren_start_idx13 = 0\n    var paren_end_idx13 = 0\n    var paren_start_idx14\
    \ = 0\n    var paren_end_idx14 = 0\n    var paren_start_idx15 = 0\n    var paren_end_idx15\
    \ = 0\n    var paren_start_idx16 = 0\n    var paren_end_idx16 = 0\n    var paren_start_idx17\
    \ = 0\n    var paren_end_idx17 = 0\n    var paren_start_idx18 = 0\n    var paren_end_idx18\
    \ = 0\n    var paren_start_idx19 = 0\n    var paren_end_idx19 = 0\n    var paren_start_idx20\
    \ = 0\n    var paren_end_idx20 = 0\n    var paren_start_idx21 = 0\n    var paren_end_idx21\
    \ = 0\n    var paren_start_idx22 = 0\n    var paren_end_idx22 = 0\n    var paren_start_idx23\
    \ = 0\n    var paren_end_idx23 = 0\n    var paren_start_idx24 = 0\n    var paren_end_idx24\
    \ = 0\n    var paren_start_idx25 = 0\n    var paren_end_idx25 = 0\n    var paren_start_idx26\
    \ = 0\n    var paren_end_idx26 = 0\n    var paren_start_idx27 = 0\n    var paren_end_idx27\
    \ = 0\n    var paren_start_idx28 = 0\n    var paren_end_idx28 = 0\n    var paren_start_idx29\
    \ = 0\n    var paren_end_idx29 = 0\n    var paren_start_idx30 = 0\n    var paren_end_idx30\
    \ = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp1aaujmnc.swift:6:9: warning: initialization of variable 'levels'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var levels = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmp1aaujmnc.swift:7:9: warning:\
    \ initialization of variable 'level' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var level = 0\n    ~~~~^~~~~\n    _\n/tmp/tmp1aaujmnc.swift:8:9:\
    \ warning: initialization of variable 'paren_count' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var paren_count = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp1aaujmnc.swift:9:9: warning: initialization of variable 'paren_level'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_level = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp1aaujmnc.swift:10:9:\
    \ warning: initialization of variable 'paren_start' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var paren_start = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp1aaujmnc.swift:11:9: warning: initialization of variable 'paren_end'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_end = 0\n    ~~~~^~~~~~~~~\n    _\n/tmp/tmp1aaujmnc.swift:12:9:\
    \ warning: initialization of variable 'paren_start_idx' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_start_idx = 0\n\
    \    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmp1aaujmnc.swift:13:9: warning: initialization\
    \ of variable 'paren_end_idx' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var paren_end_idx = 0\n    ~~~~^~~~~~~~~~~~~\n  \
    \  _\n/tmp/tmp1aaujmnc.swift:14:9: warning: initialization of variable 'paren_start_idx2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_start_idx2 = 0\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp1aaujmnc.swift:15:9:\
    \ warning: initialization of variable 'paren_end_idx2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_end_idx2 = 0\n\
    \    ~~~~^~~~~~~~~~~~~~\n    _\n/tmp/tmp1aaujmnc.swift:"
  stdout: ''
  timestamp: 1660009379
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var paren_level =\
    \ 0\n    var paren_max_level = 0\n    var paren_levels = [Int]()\n    var paren_max_levels\
    \ = [Int]()\n    var paren_levels_str = [String]()\n    var paren_max_levels_str\
    \ = [String]()\n    var paren_levels_str_len = 0\n    var paren_max_levels_str_len\
    \ = 0\n    var paren_levels_str_lens = [Int]()\n    var paren_max_levels_str_lens\
    \ = [Int]()\n    var paren_levels_str_lens_len = 0\n    var paren_max_levels_str_lens_len\
    \ = 0\n    var paren_levels_str_lens_lens = [Int]()\n    var paren_max_levels_str_lens_len\
    \ = 0\n    var paren_levels_str_lens_lens = [Int]()\n    var paren_max_levels_str_lens_len\
    \ = 0\n    var paren_levels_str_lens_lens = [Int]()\n    var paren_max_levels_str_lens_len\
    \ = 0\n    var paren_levels_str_lens_lens = [Int]()\n    var paren_max_levels_str_lens_len\
    \ = 0\n    var paren_levels_str_lens_lens = [Int]()\n    var paren_max_levels_str_lens_len\
    \ = 0\n    var paren_levels_str_lens_lens = [Int]()\n    var paren_max_levels_str_lens_len\
    \ = 0\n    var paren_levels_str_lens_lens = [Int]()\n    var paren_max_levels_str_lens_len\
    \ = 0\n    var paren_levels_str_lens_lens = [Int]()\n    var paren_max_levels_str_lens_len\
    \ = 0\n    var paren_levels_str_lens_lens = [Int]()\n    var paren_max_levels_str_lens_len\
    \ = 0\n    var paren_levels_str_lens_lens = [Int]()\n    var paren_max_levels_str_lens_len\
    \ = 0\n    var paren_levels_str_lens_lens = [Int]()\n    var paren_max_levels_str_lens_len\
    \ = 0\n    var paren_levels_str_lens_lens = [Int]()\n    var paren_max_levels_str_lens_len\
    \ = 0\n    var paren_levels_str_lens_lens = [Int]()\n    var paren_max_levels_str_lens_len\
    \ = 0\n    var paren_levels_str_lens_lens = [Int]()\n    var paren_max_levels_str_lens_len\
    \ = 0\n    var paren_levels_str_lens_lens = [Int]()\n    var paren_\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp8tza4aml.swift:21:9: error: invalid redeclaration of 'paren_max_levels_str_lens_len'\n\
    \    var paren_max_levels_str_lens_len = 0\n        ^\n/tmp/tmp8tza4aml.swift:19:9:\
    \ note: 'paren_max_levels_str_lens_len' previously declared here\n    var paren_max_levels_str_lens_len\
    \ = 0\n        ^\n/tmp/tmp8tza4aml.swift:22:9: error: invalid redeclaration of\
    \ 'paren_levels_str_lens_lens'\n    var paren_levels_str_lens_lens = [Int]()\n\
    \        ^\n/tmp/tmp8tza4aml.swift:20:9: note: 'paren_levels_str_lens_lens' previously\
    \ declared here\n    var paren_levels_str_lens_lens = [Int]()\n        ^\n/tmp/tmp8tza4aml.swift:23:9:\
    \ error: invalid redeclaration of 'paren_max_levels_str_lens_len'\n    var paren_max_levels_str_lens_len\
    \ = 0\n        ^\n/tmp/tmp8tza4aml.swift:19:9: note: 'paren_max_levels_str_lens_len'\
    \ previously declared here\n    var paren_max_levels_str_lens_len = 0\n      \
    \  ^\n/tmp/tmp8tza4aml.swift:24:9: error: invalid redeclaration of 'paren_levels_str_lens_lens'\n\
    \    var paren_levels_str_lens_lens = [Int]()\n        ^\n/tmp/tmp8tza4aml.swift:20:9:\
    \ note: 'paren_levels_str_lens_lens' previously declared here\n    var paren_levels_str_lens_lens\
    \ = [Int]()\n        ^\n/tmp/tmp8tza4aml.swift:25:9: error: invalid redeclaration\
    \ of 'paren_max_levels_str_lens_len'\n    var paren_max_levels_str_lens_len =\
    \ 0\n        ^\n/tmp/tmp8tza4aml.swift:19:9: note: 'paren_max_levels_str_lens_len'\
    \ previously declared here\n    var paren_max_levels_str_lens_len = 0\n      \
    \  ^\n/tmp/tmp8tza4aml.swift:26:9: error: invalid redeclaration of 'paren_levels_str_lens_lens'\n\
    \    var paren_levels_str_lens_lens = [Int]()\n        ^\n/tmp/tmp8tza4aml.swift:20:9:\
    \ note: 'paren_levels_str_lens_lens' previously declared here\n    var paren_levels_str_lens_lens\
    \ = [Int]()\n        ^\n/tmp/tmp8tza4aml.swift:27:9: error: invalid redeclaration\
    \ of 'paren_max_levels_str_lens_len'\n    var paren_max_levels_str_lens_len =\
    \ 0\n        ^\n/tmp/tmp8tza4aml.swift:19:9: note: 'paren_max_levels_str_lens_len'\
    \ previously declared here\n    var paren_max_levels_str_lens_len = 0\n      \
    \  ^\n/tmp/tmp8tza4aml.swift:28"
  stdout: ''
  timestamp: 1660009379
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens = 0\n\
    \    for c in paren_string.unicodeScalars {\n        if c == '(' {\n         \
    \   levels[level] = parens\n            level++\n            parens++\n      \
    \  } else if c == ')' {\n            levels[level] = parens\n            level--\n\
    \            parens--\n        }\n    }\n    return levels\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpp2xt9v8k.swift:10:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmpp2xt9v8k.swift:14:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmpp2xt9v8k.swift:12:18: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            level++\n                 ^~\n/tmp/tmpp2xt9v8k.swift:13:19:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  parens++\n                  ^~\n/tmp/tmpp2xt9v8k.swift:16:18: error: cannot\
    \ find operator '--' in scope; did you mean '-= 1'?\n            level--\n   \
    \              ^~\n/tmp/tmpp2xt9v8k.swift:17:19: error: cannot find operator '--'\
    \ in scope; did you mean '-= 1'?\n            parens--\n                  ^~\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var max_level_parens\
    \ = 0\n    var max_level_parens_count = 0\n    var paren_groups: [String] = []\n\
    \    var paren_groups_count: [Int] = []\n    var paren_groups_strings: [String]\
    \ = []\n    var paren_groups_strings_count: [Int] = []\n    var paren_groups_strings_strings:\
    \ [String] = []\n    var paren_groups_strings_strings_count: [Int] = []\n    var\
    \ paren_groups_strings_strings_strings: [String] = []\n    var paren_groups_strings_strings_strings_count:\
    \ [Int] = []\n    var paren_groups_strings_strings_strings_strings: [String] =\
    \ []\n    var paren_groups_strings_strings_strings_strings_count: [Int] = []\n\
    \    var paren_groups_strings_strings_strings_strings_strings: [String] = []\n\
    \    var paren_groups_strings_strings_strings_strings_strings_count: [Int] = []\n\
    \    var paren_groups_strings_strings_strings_strings_strings_strings: [String]\
    \ = []\n    var paren_groups_strings_strings_strings_strings_strings_strings_count:\
    \ [Int] = []\n    var paren_groups_strings_strings_strings_strings_strings_strings_strings:\
    \ [String] = []\n    var paren_groups_strings_strings_strings_strings_strings_strings_strings_count:\
    \ [Int] = []\n    var paren_groups_strings_strings_strings_strings_strings_strings_strings_strings:\
    \ [String] = []\n    var paren_groups_strings_strings_strings_strings_strings_strings_strings_strings_count:\
    \ [Int] = []\n    var paren_groups_strings_strings_strings_strings_strings_strings_strings_strings_strings:\
    \ [String] = []\n    var paren_groups_strings_strings_strings_strings_strings_strings_strings_strings_strings_count:\
    \ [Int] = []\n    var paren_groups_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings:\
    \ [String] = []\n    var paren_groups_strings_strings_strings_strings_strings_strings_strings_strings_strings_count:\
    \ [Int] = []\n    var paren_groups_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings:\
    \ [String] = []\n    var paren_groups_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_count:\
    \ [Int] = []\n    var paren_groups_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings:\
    \ [String] = []\n    var paren_groups_strings_strings_strings_strings_strings_strings_strings_strings_string\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpqz_56ls4.swift:31:9: error: invalid redeclaration of 'paren_groups_strings_strings_strings_strings_strings_strings_strings_strings_strings_count'\n\
    \    var paren_groups_strings_strings_strings_strings_strings_strings_strings_strings_strings_count:\
    \ [Int] = []\n        ^\n/tmp/tmpqz_56ls4.swift:29:9: note: 'paren_groups_strings_strings_strings_strings_strings_strings_strings_strings_strings_count'\
    \ previously declared here\n    var paren_groups_strings_strings_strings_strings_strings_strings_strings_strings_strings_count:\
    \ [Int] = []\n        ^\n/tmp/tmpqz_56ls4.swift:32:9: error: invalid redeclaration\
    \ of 'paren_groups_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings'\n\
    \    var paren_groups_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings:\
    \ [String] = []\n        ^\n/tmp/tmpqz_56ls4.swift:30:9: note: 'paren_groups_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings'\
    \ previously declared here\n    var paren_groups_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings:\
    \ [String] = []\n        ^\n/tmp/tmpqz_56ls4.swift:35:9: error: type annotation\
    \ missing in pattern\n    var paren_groups_strings_strings_strings_strings_strings_strings_strings_strings_string\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    for c in paren_string.unicodeScalars {\n \
    \       if paren_count == 0 {\n            levels.append(level)\n        }\n \
    \       if paren_count == 1 {\n            level = 0\n        }\n        if c\
    \ == paren_char {\n            paren_count += 1\n            if paren_count ==\
    \ 2 {\n                levels.append(level)\n                level = 0\n     \
    \           paren_count = 0\n            }\n        } else {\n            paren_count\
    \ = 0\n            level += 1\n        }\n    }\n    return levels\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpvtqp609g.swift:17:17: error: cannot find 'paren_char' in scope\n\
    \        if c == paren_char {\n                ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009379
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_level = 0\n    var paren_nesting\
    \ = 0\n    var paren_nesting_level = 0\n    var paren_nesting_nesting = 0\n  \
    \  var paren_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_nesting_level = 0\n    var\
    \ paren_nesting_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_nesting_level = 0\n    var\
    \ paren_nesting_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_nesting_level = 0\n    var\
    \ paren_nesting_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_nesting_level = 0\n    var\
    \ paren_nesting_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_nesting_level = 0\n    var\
    \ paren_nesting_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_nesting_level = 0\n    var\
    \ paren_nesting_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n    var paren_nesting_nesting_nesting_nesting_level = 0\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpcvf5kmzg.swift:18:9: error: invalid redeclaration of 'paren_nesting_nesting_nesting_nesting_nesting_level'\n\
    \    var paren_nesting_nesting_nesting_nesting_nesting_level = 0\n        ^\n\
    /tmp/tmpcvf5kmzg.swift:17:9: note: 'paren_nesting_nesting_nesting_nesting_nesting_level'\
    \ previously declared here\n    var paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n        ^\n/tmp/tmpcvf5kmzg.swift:19:9: error: invalid redeclaration of\
    \ 'paren_nesting_nesting_nesting_nesting_nesting_level'\n    var paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n        ^\n/tmp/tmpcvf5kmzg.swift:17:9: note: 'paren_nesting_nesting_nesting_nesting_nesting_level'\
    \ previously declared here\n    var paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n        ^\n/tmp/tmpcvf5kmzg.swift:20:9: error: invalid redeclaration of\
    \ 'paren_nesting_nesting_nesting_nesting_nesting_level'\n    var paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n        ^\n/tmp/tmpcvf5kmzg.swift:17:9: note: 'paren_nesting_nesting_nesting_nesting_nesting_level'\
    \ previously declared here\n    var paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n        ^\n/tmp/tmpcvf5kmzg.swift:21:9: error: invalid redeclaration of\
    \ 'paren_nesting_nesting_nesting_nesting_nesting_level'\n    var paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n        ^\n/tmp/tmpcvf5kmzg.swift:17:9: note: 'paren_nesting_nesting_nesting_nesting_nesting_level'\
    \ previously declared here\n    var paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n        ^\n/tmp/tmpcvf5kmzg.swift:22:9: error: invalid redeclaration of\
    \ 'paren_nesting_nesting_nesting_nesting_nesting_level'\n    var paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n        ^\n/tmp/tmpcvf5kmzg.swift:17:9: note: 'paren_nesting_nesting_nesting_nesting_nesting_level'\
    \ previously declared here\n    var paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n        ^\n/tmp/tmpcvf5kmzg.swift:23:9: error: invalid redeclaration of\
    \ 'paren_nesting_nesting_nesting_nesting_nesting_level'\n    var paren_nesting_nesting_nesting_nesting_ne"
  stdout: ''
  timestamp: 1660009379
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    for c in paren_string.unicodeScalars {\n \
    \       if paren_count > 0 {\n            levels[paren_level] = paren_count -\
    \ 1\n            paren_count = 0\n            paren_level++\n        }\n     \
    \   if paren_level == 0 {\n            paren_start = c\n        }\n        if\
    \ paren_level == 1 && c == paren_start {\n            paren_count++\n        }\n\
    \    }\n    levels[paren_level] = paren_count - 1\n    return levels\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmprdc52lbk.swift:14:24: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            paren_level++\n                       ^~\n\
    /tmp/tmprdc52lbk.swift:17:27: error: cannot assign value of type 'Unicode.Scalar'\
    \ to type 'Int'\n            paren_start = c\n                          ^\n/tmp/tmprdc52lbk.swift:19:34:\
    \ error: referencing operator function '==' on 'BinaryInteger' requires that 'Unicode.Scalar'\
    \ conform to 'BinaryInteger'\n        if paren_level == 1 && c == paren_start\
    \ {\n                                 ^\nSwift.BinaryInteger:1:11: note: where\
    \ 'Self' = 'Unicode.Scalar'\nextension BinaryInteger {\n          ^\n/tmp/tmprdc52lbk.swift:20:24:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  paren_count++\n                       ^~\n"
  stdout: ''
  timestamp: 1660009379
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_levels_size = 0\n    var paren_levels_sizes = [Int]()\n\
    \    var paren_levels_sizes_size = 0\n    var paren_levels_sizes_sizes = [Int]()\n\
    \    var paren_levels_sizes_sizes_size = 0\n    var paren_levels_sizes_sizes_sizes\
    \ = [Int]()\n    var paren_levels_sizes_sizes_sizes_size = 0\n    var paren_levels_sizes_sizes_sizes_sizes\
    \ = [Int]()\n    var paren_levels_sizes_sizes_sizes_sizes_size = 0\n    var paren_levels_sizes_sizes_sizes_sizes_sizes\
    \ = [Int]()\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_size = 0\n   \
    \ var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes = [Int]()\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_size\
    \ = 0\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes = [Int]()\n\
    \    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_size = 0\n   \
    \ var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes = [Int]()\n\
    \    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_size = 0\n\
    \    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes =\
    \ [Int]()\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_size\
    \ = 0\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = [Int]()\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_size\
    \ = 0\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = [Int]()\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_size\
    \ = 0\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = [Int]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpkc3i2r9u.swift:32:96: error: expected member name or constructor\
    \ call after type name\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = [Int]\n                                                                  \
    \                             ^\n/tmp/tmpkc3i2r9u.swift:32:100: note: add arguments\
    \ after the type to construct a value of the type\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = [Int]\n                                                                  \
    \                                 ^\n                                        \
    \                                                            ()\n/tmp/tmpkc3i2r9u.swift:32:100:\
    \ note: use '.self' to reference the type object\n    var paren_levels_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = [Int]\n                                                                  \
    \                                 ^\n                                        \
    \                                                            .self\n/tmp/tmpkc3i2r9u.swift:6:9:\
    \ warning: initialization of variable 'levels' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var levels = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n/tmp/tmpkc3i2r9u.swift:7:9: warning: initialization of variable 'paren_level'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var paren_level = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpkc3i2r9u.swift:8:9:\
    \ warning: initialization of variable 'paren_levels' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var paren_levels = [Int]()\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpkc3i2r9u.swift:9:9: warning: initialization\
    \ of variable 'paren_levels_size' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var paren_levels_size = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpkc3i2r9u.swift:10:9: warning: initialization of variable 'paren_levels_sizes'\
    \ was never used; consider replacing with assignment to '_' "
  stdout: ''
  timestamp: 1660009379
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_level\
    \ = 0\n    var paren_level_count = 0\n    var paren_level_max = 0\n    var paren_level_max_count\
    \ = 0\n    var paren_level_max_index = 0\n    var paren_level_max_count = 0\n\
    \    var paren_level_max_index = 0\n    var paren_level_max_count = 0\n    var\
    \ paren_level_max_index = 0\n    var paren_level_max_count = 0\n    var paren_level_max_index\
    \ = 0\n    var paren_level_max_count = 0\n    var paren_level_max_index = 0\n\
    \    var paren_level_max_count = 0\n    var paren_level_max_index = 0\n    var\
    \ paren_level_max_count = 0\n    var paren_level_max_index = 0\n    var paren_level_max_count\
    \ = 0\n    var paren_level_max_index = 0\n    var paren_level_max_count = 0\n\
    \    var paren_level_max_index = 0\n    var paren_level_max_count = 0\n    var\
    \ paren_level_max_index = 0\n    var paren_level_max_count = 0\n    var paren_level_max_index\
    \ = 0\n    var paren_level_max_count = 0\n    var paren_level_max_index = 0\n\
    \    var paren_level_max_count = 0\n    var paren_level_max_index = 0\n    var\
    \ paren_level_max_count = 0\n    var paren_level_max_index = 0\n    var paren_level_max_count\
    \ = 0\n    var paren_level_max_index = 0\n    var paren_level_max_count = 0\n\
    \    var paren_level_max_index = 0\n    var paren_level_max_count = 0\n    var\
    \ paren_level_max_index = 0\n    var paren_level_max_count = 0\n    var paren_level_max_index\
    \ = 0\n    var paren_level_max_count = 0\n    var paren_level_max_index = 0\n\
    \    var paren_level_max_count = 0\n    var paren_level_max_index = 0\n    var\
    \ paren_level_max_count = 0\n    var paren_level_max_index = 0\n    var paren_level_max_count\
    \ = 0\n    var paren_level_max_index = 0\n    var paren_level_max_count = 0\n\
    \    var paren_level_max_index = 0\n    var paren_level_max_count = 0\n    var\
    \ paren_level_max_index = 0\n    var paren_level_max_count = 0\n    var paren_level_max_index\
    \ = 0\n    var paren_level_max_count = 0\n    var paren_level_max_index = 0\n\
    \    var paren_level_max_count = 0\n    var paren_level_max_index = 0\n    var\
    \ paren_level_max_count = 0\n    var paren_level_max_index = 0\n    var paren_level_max_count\
    \ = 0\n    var paren_level_max_index = 0\n    var paren_level_max_count = 0\n\
    \    var paren_level_max_index = 0\n    var paren_level_max_count = 0\n    var\
    \ paren_level_max_index = 0\n    var paren_level_max_count = 0\n    var paren_level_max_index\
    \ = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpa_23cppg.swift:75:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpa_23cppg.swift:13:9: error: invalid redeclaration of 'paren_level_max_count'\n\
    \    var paren_level_max_count = 0\n        ^\n/tmp/tmpa_23cppg.swift:11:9: note:\
    \ 'paren_level_max_count' previously declared here\n    var paren_level_max_count\
    \ = 0\n        ^\n/tmp/tmpa_23cppg.swift:14:9: error: invalid redeclaration of\
    \ 'paren_level_max_index'\n    var paren_level_max_index = 0\n        ^\n/tmp/tmpa_23cppg.swift:12:9:\
    \ note: 'paren_level_max_index' previously declared here\n    var paren_level_max_index\
    \ = 0\n        ^\n/tmp/tmpa_23cppg.swift:15:9: error: invalid redeclaration of\
    \ 'paren_level_max_count'\n    var paren_level_max_count = 0\n        ^\n/tmp/tmpa_23cppg.swift:11:9:\
    \ note: 'paren_level_max_count' previously declared here\n    var paren_level_max_count\
    \ = 0\n        ^\n/tmp/tmpa_23cppg.swift:16:9: error: invalid redeclaration of\
    \ 'paren_level_max_index'\n    var paren_level_max_index = 0\n        ^\n/tmp/tmpa_23cppg.swift:12:9:\
    \ note: 'paren_level_max_index' previously declared here\n    var paren_level_max_index\
    \ = 0\n        ^\n/tmp/tmpa_23cppg.swift:17:9: error: invalid redeclaration of\
    \ 'paren_level_max_count'\n    var paren_level_max_count = 0\n        ^\n/tmp/tmpa_23cppg.swift:11:9:\
    \ note: 'paren_level_max_count' previously declared here\n    var paren_level_max_count\
    \ = 0\n        ^\n/tmp/tmpa_23cppg.swift:18:9: error: invalid redeclaration of\
    \ 'paren_level_max_index'\n    var paren_level_max_index = 0\n        ^\n/tmp/tmpa_23cppg.swift:12:9:\
    \ note: 'paren_level_max_index' previously declared here\n    var paren_level_max_index\
    \ = 0\n        ^\n/tmp/tmpa_23cppg.swift:19:9: error: invalid redeclaration of\
    \ 'paren_level_max_count'\n    var paren_level_max_count = 0\n        ^\n/tmp/tmpa_23cppg.swift:11:9:\
    \ note: 'paren_level_max_count' previously declared here\n    var paren_level_max_count\
    \ = 0\n        ^\n/tmp/tmpa_23cppg.swift:20:9: error: invalid redeclaration of\
    \ 'paren_level_max_index'\n    var paren_level_max_index = 0\n        ^\n/tmp/tmpa_23cppg.swift:12:9:\
    \ note: 'paren_level_m"
  stdout: ''
  timestamp: 1660009379
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var max_level = 0\n    var level = 0\n    var levels = [Int]()\n\
    \    for c in paren_string.characters {\n        if c == '(' {\n            level++\n\
    \            if level > max_level {\n                max_level = level\n     \
    \       }\n        } else if c == ')' {\n            level--\n            if level\
    \ < 0 {\n                level = 0\n            }\n        } else {\n        \
    \    level = 0\n        }\n        levels.append(level)\n    }\n    return levels\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpsli2smy1.swift:10:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmpsli2smy1.swift:15:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmpsli2smy1.swift:9:27: error: 'characters' is unavailable:\
    \ Please use String directly\n    for c in paren_string.characters {\n       \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpsli2smy1.swift:11:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            level++\n                 ^~\n/tmp/tmpsli2smy1.swift:16:18:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \  level--\n                 ^~\n"
  stdout: ''
  timestamp: 1660009379
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_levels_size = 0\n    var paren_levels_sizes = [Int]()\n\
    \    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_indexs = [Int]()\n\
    \    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_indexs = [Int]()\n\
    \    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_indexs = [Int]()\n\
    \    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_indexs = [Int]()\n\
    \    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_indexs = [Int]()\n\
    \    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_indexs = [Int]()\n\
    \    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_indexs = [Int]()\n\
    \    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_indexs = [Int]()\n\
    \    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_indexs = [Int]()\n\
    \    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_indexs = [Int]()\n\
    \    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_indexs = [Int]()\n\
    \    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_indexs = [Int]()\n\
    \    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_indexs = [Int]()\n\
    \    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_indexs = [Int]()\n\
    \    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_indexs = [Int]()\n\
    \    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_indexs = [Int]()\n\
    \    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_indexs = [Int]()\n\
    \    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_indexs = [Int]()\n\
    \    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_indexs = [Int]()\n\
    \    var paren_levels_sizes_index = 0\n    var paren_levels_sizes_indexs = [Int]()\n\
    \    var paren_levels_sizes_index = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpvvffbldh.swift:52:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpvvffbldh.swift:13:9: error: invalid redeclaration of 'paren_levels_sizes_index'\n\
    \    var paren_levels_sizes_index = 0\n        ^\n/tmp/tmpvvffbldh.swift:11:9:\
    \ note: 'paren_levels_sizes_index' previously declared here\n    var paren_levels_sizes_index\
    \ = 0\n        ^\n/tmp/tmpvvffbldh.swift:14:9: error: invalid redeclaration of\
    \ 'paren_levels_sizes_indexs'\n    var paren_levels_sizes_indexs = [Int]()\n \
    \       ^\n/tmp/tmpvvffbldh.swift:12:9: note: 'paren_levels_sizes_indexs' previously\
    \ declared here\n    var paren_levels_sizes_indexs = [Int]()\n        ^\n/tmp/tmpvvffbldh.swift:15:9:\
    \ error: invalid redeclaration of 'paren_levels_sizes_index'\n    var paren_levels_sizes_index\
    \ = 0\n        ^\n/tmp/tmpvvffbldh.swift:11:9: note: 'paren_levels_sizes_index'\
    \ previously declared here\n    var paren_levels_sizes_index = 0\n        ^\n\
    /tmp/tmpvvffbldh.swift:16:9: error: invalid redeclaration of 'paren_levels_sizes_indexs'\n\
    \    var paren_levels_sizes_indexs = [Int]()\n        ^\n/tmp/tmpvvffbldh.swift:12:9:\
    \ note: 'paren_levels_sizes_indexs' previously declared here\n    var paren_levels_sizes_indexs\
    \ = [Int]()\n        ^\n/tmp/tmpvvffbldh.swift:17:9: error: invalid redeclaration\
    \ of 'paren_levels_sizes_index'\n    var paren_levels_sizes_index = 0\n      \
    \  ^\n/tmp/tmpvvffbldh.swift:11:9: note: 'paren_levels_sizes_index' previously\
    \ declared here\n    var paren_levels_sizes_index = 0\n        ^\n/tmp/tmpvvffbldh.swift:18:9:\
    \ error: invalid redeclaration of 'paren_levels_sizes_indexs'\n    var paren_levels_sizes_indexs\
    \ = [Int]()\n        ^\n/tmp/tmpvvffbldh.swift:12:9: note: 'paren_levels_sizes_indexs'\
    \ previously declared here\n    var paren_levels_sizes_indexs = [Int]()\n    \
    \    ^\n/tmp/tmpvvffbldh.swift:19:9: error: invalid redeclaration of 'paren_levels_sizes_index'\n\
    \    var paren_levels_sizes_index = 0\n        ^\n/tmp/tmpvvffbldh.swift:11:9:\
    \ note: 'paren_levels_sizes_index' previously declared here\n    var paren_levels_sizes_index\
    \ = 0\n        ^\n/tmp/tmpvvffbldh.swift:20:9: error: invalid re"
  stdout: ''
  timestamp: 1660009378
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_level = 0\n    var paren_levels\
    \ = [Int]()\n    var paren_levels_count = 0\n    var paren_levels_count_max =\
    \ 0\n    var paren_levels_count_min = 0\n    var paren_levels_count_max = 0\n\
    \    var paren_levels_count_min = 0\n    var paren_levels_count_max = 0\n    var\
    \ paren_levels_count_min = 0\n    var paren_levels_count_max = 0\n    var paren_levels_count_min\
    \ = 0\n    var paren_levels_count_max = 0\n    var paren_levels_count_min = 0\n\
    \    var paren_levels_count_max = 0\n    var paren_levels_count_min = 0\n    var\
    \ paren_levels_count_max = 0\n    var paren_levels_count_min = 0\n    var paren_levels_count_max\
    \ = 0\n    var paren_levels_count_min = 0\n    var paren_levels_count_max = 0\n\
    \    var paren_levels_count_min = 0\n    var paren_levels_count_max = 0\n    var\
    \ paren_levels_count_min = 0\n    var paren_levels_count_max = 0\n    var paren_levels_count_min\
    \ = 0\n    var paren_levels_count_max = 0\n    var paren_levels_count_min = 0\n\
    \    var paren_levels_count_max = 0\n    var paren_levels_count_min = 0\n    var\
    \ paren_levels_count_max = 0\n    var paren_levels_count_min = 0\n    var paren_levels_count_max\
    \ = 0\n    var paren_levels_count_min = 0\n    var paren_levels_count_max = 0\n\
    \    var paren_levels_count_min = 0\n    var paren_levels_count_max = 0\n    var\
    \ paren_levels_count_min = 0\n    var paren_levels_count_max = 0\n    var paren_levels_count_min\
    \ = 0\n    var paren_levels_count_max = 0\n    var paren_levels_count_min = 0\n\
    \    var paren_levels_count_max = 0\n    var paren_levels_count_min = 0\n    var\
    \ paren_levels_count_max = 0\n    var paren_levels_count_min = 0\n    var paren_levels_count_max\
    \ = 0\n    var paren_levels_count_min = 0\n    var paren_levels_count_max = 0\n\
    \    var paren_levels_count_min = 0\n    var paren_levels_count_max = 0\n    var\
    \ paren_levels_count_min = 0\n    var paren_levels_count_max = 0\n    var paren_levels_count_min\
    \ = 0\n    var paren_levels_count_max = 0\n    var paren_levels_count_min = 0\n\
    \    var paren_levels_count_max = 0\n    var paren_levels_count_\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp2j8oqmy4.swift:12:9: error: invalid redeclaration of 'paren_levels_count_max'\n\
    \    var paren_levels_count_max = 0\n        ^\n/tmp/tmp2j8oqmy4.swift:10:9: note:\
    \ 'paren_levels_count_max' previously declared here\n    var paren_levels_count_max\
    \ = 0\n        ^\n/tmp/tmp2j8oqmy4.swift:13:9: error: invalid redeclaration of\
    \ 'paren_levels_count_min'\n    var paren_levels_count_min = 0\n        ^\n/tmp/tmp2j8oqmy4.swift:11:9:\
    \ note: 'paren_levels_count_min' previously declared here\n    var paren_levels_count_min\
    \ = 0\n        ^\n/tmp/tmp2j8oqmy4.swift:14:9: error: invalid redeclaration of\
    \ 'paren_levels_count_max'\n    var paren_levels_count_max = 0\n        ^\n/tmp/tmp2j8oqmy4.swift:10:9:\
    \ note: 'paren_levels_count_max' previously declared here\n    var paren_levels_count_max\
    \ = 0\n        ^\n/tmp/tmp2j8oqmy4.swift:15:9: error: invalid redeclaration of\
    \ 'paren_levels_count_min'\n    var paren_levels_count_min = 0\n        ^\n/tmp/tmp2j8oqmy4.swift:11:9:\
    \ note: 'paren_levels_count_min' previously declared here\n    var paren_levels_count_min\
    \ = 0\n        ^\n/tmp/tmp2j8oqmy4.swift:16:9: error: invalid redeclaration of\
    \ 'paren_levels_count_max'\n    var paren_levels_count_max = 0\n        ^\n/tmp/tmp2j8oqmy4.swift:10:9:\
    \ note: 'paren_levels_count_max' previously declared here\n    var paren_levels_count_max\
    \ = 0\n        ^\n/tmp/tmp2j8oqmy4.swift:17:9: error: invalid redeclaration of\
    \ 'paren_levels_count_min'\n    var paren_levels_count_min = 0\n        ^\n/tmp/tmp2j8oqmy4.swift:11:9:\
    \ note: 'paren_levels_count_min' previously declared here\n    var paren_levels_count_min\
    \ = 0\n        ^\n/tmp/tmp2j8oqmy4.swift:18:9: error: invalid redeclaration of\
    \ 'paren_levels_count_max'\n    var paren_levels_count_max = 0\n        ^\n/tmp/tmp2j8oqmy4.swift:10:9:\
    \ note: 'paren_levels_count_max' previously declared here\n    var paren_levels_count_max\
    \ = 0\n        ^\n/tmp/tmp2j8oqmy4.swift:19:9: error: invalid redeclaration of\
    \ 'paren_levels_count_min'\n    var paren_levels_count_min = 0\n        ^\n/tmp/tmp2j8oqmy4.swift:11:9:\
    \ note: 'paren_levels_count_min' previously declared here\n    v"
  stdout: ''
  timestamp: 1660009379
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var paren_stack = [Int]()\n    var paren_level\
    \ = [Int]()\n    var paren_level_count = [Int]()\n    var paren_level_total =\
    \ 0\n    var paren_level_max_count = 0\n    var paren_level_max_total = 0\n  \
    \  var paren_level_max_index = 0\n    var paren_level_max_string = \"\"\n    var\
    \ paren_level_max_string_index = 0\n    var paren_level_max_string_index2 = 0\n\
    \    var paren_level_max_string_index3 = 0\n    var paren_level_max_string_index4\
    \ = 0\n    var paren_level_max_string_index5 = 0\n    var paren_level_max_string_index6\
    \ = 0\n    var paren_level_max_string_index7 = 0\n    var paren_level_max_string_index8\
    \ = 0\n    var paren_level_max_string_index9 = 0\n    var paren_level_max_string_index10\
    \ = 0\n    var paren_level_max_string_index11 = 0\n    var paren_level_max_string_index12\
    \ = 0\n    var paren_level_max_string_index13 = 0\n    var paren_level_max_string_index14\
    \ = 0\n    var paren_level_max_string_index15 = 0\n    var paren_level_max_string_index16\
    \ = 0\n    var paren_level_max_string_index17 = 0\n    var paren_level_max_string_index18\
    \ = 0\n    var paren_level_max_string_index19 = 0\n    var paren_level_max_string_index20\
    \ = 0\n    var paren_level_max_string_index21 = 0\n    var paren_level_max_string_index22\
    \ = 0\n    var paren_level_max_string_index23 = 0\n    var paren_level_max_string_index24\
    \ = 0\n    var paren_level_max_string_index25 = 0\n    var paren_level_max_string_index26\
    \ = 0\n    var paren_level_max_string_index27 = 0\n    var paren_level_max_string_index28\
    \ = 0\n    var paren_level_max_string_index29 = 0\n    var paren_level_max_string_index30\
    \ = 0\n    var paren_level_max_string_index31 = 0\n    var paren_level_max_string_index32\
    \ = 0\n    var paren_level_max_string_index33 = 0\n    var paren_level_max_string_index34\
    \ = 0\n    var paren_level_max_string_index35 = 0\n    var paren_level_max_string_index36\
    \ = 0\n    var paren_level_max_string_index37 = 0\n    var paren_level_max_string_index38\
    \ = 0\n    var paren_level_max_string_index39 = 0\n    var paren_level_max_string_index40\
    \ = 0\n    var paren_level_max_string_index41 = 0\n    var paren_level_max_string_index42\
    \ = 0\n    var paren_level_max_string_index43 = 0\n    var paren_level_max_string_index44\
    \ = 0\n    var paren_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpgx6_zp4a.swift:59:9: error: type annotation missing in pattern\n\
    \    var paren_\n        ^\n"
  stdout: ''
  timestamp: 1660009379
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var parens = 0\n\
    \    var parens_count = 0\n    var parens_level = 0\n    var parens_level_count\
    \ = 0\n    var parens_level_max = 0\n    var parens_level_max_count = 0\n    var\
    \ parens_level_max_index = 0\n    var parens_level_max_count = 0\n    var parens_level_max_index\
    \ = 0\n    var parens_level_max_count = 0\n    var parens_level_max_index = 0\n\
    \    var parens_level_max_count = 0\n    var parens_level_max_index = 0\n    var\
    \ parens_level_max_count = 0\n    var parens_level_max_index = 0\n    var parens_level_max_count\
    \ = 0\n    var parens_level_max_index = 0\n    var parens_level_max_count = 0\n\
    \    var parens_level_max_index = 0\n    var parens_level_max_count = 0\n    var\
    \ parens_level_max_index = 0\n    var parens_level_max_count = 0\n    var parens_level_max_index\
    \ = 0\n    var parens_level_max_count = 0\n    var parens_level_max_index = 0\n\
    \    var parens_level_max_count = 0\n    var parens_level_max_index = 0\n    var\
    \ parens_level_max_count = 0\n    var parens_level_max_index = 0\n    var parens_level_max_count\
    \ = 0\n    var parens_level_max_index = 0\n    var parens_level_max_count = 0\n\
    \    var parens_level_max_index = 0\n    var parens_level_max_count = 0\n    var\
    \ parens_level_max_index = 0\n    var parens_level_max_count = 0\n    var parens_level_max_index\
    \ = 0\n    var parens_level_max_count = 0\n    var parens_level_max_index = 0\n\
    \    var parens_level_max_count = 0\n    var parens_level_max_index = 0\n    var\
    \ parens_level_max_count = 0\n    var parens_level_max_index = 0\n    var parens_level_max_count\
    \ = 0\n    var parens_level_max_index = 0\n    var parens_level_max_count = 0\n\
    \    var parens_level_max_index = 0\n    var parens_level_max_count = 0\n    var\
    \ parens_level_max_index = 0\n    var parens_level_max_count = 0\n    var parens_level_max_index\
    \ = 0\n    var parens_level_max_count = 0\n    var parens_level_max_index = 0\n\
    \    var parens_level_max_count = 0\n    var parens_level_max_index = 0\n    var\
    \ parens_level_max_count = 0\n    var parens_level_max_index = 0\n    var parens_level_max_count\
    \ = 0\n    var parens_level_max_index = 0\n    var parens_level_max_count = 0\n\
    \    var parens_level_max_index = 0\n    var parens_level_max_count = 0\n    var\
    \ parens_level_max_index = 0\n    var parens_level_max_count = 0\n    var parens_level_max_index\
    \ = 0\n    var parens_level_max_count = 0\n    var parens_level_max_index = 0\n\
    \    var parens_level_max_count = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpk40zcr8i.swift:15:9: error: invalid redeclaration of 'parens_level_max_count'\n\
    \    var parens_level_max_count = 0\n        ^\n/tmp/tmpk40zcr8i.swift:13:9: note:\
    \ 'parens_level_max_count' previously declared here\n    var parens_level_max_count\
    \ = 0\n        ^\n/tmp/tmpk40zcr8i.swift:16:9: error: invalid redeclaration of\
    \ 'parens_level_max_index'\n    var parens_level_max_index = 0\n        ^\n/tmp/tmpk40zcr8i.swift:14:9:\
    \ note: 'parens_level_max_index' previously declared here\n    var parens_level_max_index\
    \ = 0\n        ^\n/tmp/tmpk40zcr8i.swift:17:9: error: invalid redeclaration of\
    \ 'parens_level_max_count'\n    var parens_level_max_count = 0\n        ^\n/tmp/tmpk40zcr8i.swift:13:9:\
    \ note: 'parens_level_max_count' previously declared here\n    var parens_level_max_count\
    \ = 0\n        ^\n/tmp/tmpk40zcr8i.swift:18:9: error: invalid redeclaration of\
    \ 'parens_level_max_index'\n    var parens_level_max_index = 0\n        ^\n/tmp/tmpk40zcr8i.swift:14:9:\
    \ note: 'parens_level_max_index' previously declared here\n    var parens_level_max_index\
    \ = 0\n        ^\n/tmp/tmpk40zcr8i.swift:19:9: error: invalid redeclaration of\
    \ 'parens_level_max_count'\n    var parens_level_max_count = 0\n        ^\n/tmp/tmpk40zcr8i.swift:13:9:\
    \ note: 'parens_level_max_count' previously declared here\n    var parens_level_max_count\
    \ = 0\n        ^\n/tmp/tmpk40zcr8i.swift:20:9: error: invalid redeclaration of\
    \ 'parens_level_max_index'\n    var parens_level_max_index = 0\n        ^\n/tmp/tmpk40zcr8i.swift:14:9:\
    \ note: 'parens_level_max_index' previously declared here\n    var parens_level_max_index\
    \ = 0\n        ^\n/tmp/tmpk40zcr8i.swift:21:9: error: invalid redeclaration of\
    \ 'parens_level_max_count'\n    var parens_level_max_count = 0\n        ^\n/tmp/tmpk40zcr8i.swift:13:9:\
    \ note: 'parens_level_max_count' previously declared here\n    var parens_level_max_count\
    \ = 0\n        ^\n/tmp/tmpk40zcr8i.swift:22:9: error: invalid redeclaration of\
    \ 'parens_level_max_index'\n    var parens_level_max_index = 0\n        ^\n/tmp/tmpk40zcr8i.swift:14:9:\
    \ note: 'parens_level_max_index' previously declared here\n    v"
  stdout: ''
  timestamp: 1660009379
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_level = 0\n    var paren_open\
    \ = 0\n    var paren_close = 0\n    var paren_level_count = 0\n    var paren_open_count\
    \ = 0\n    var paren_close_count = 0\n    var paren_level_count2 = 0\n    var\
    \ paren_open_count2 = 0\n    var paren_close_count2 = 0\n    var paren_level_count3\
    \ = 0\n    var paren_open_count3 = 0\n    var paren_close_count3 = 0\n    var\
    \ paren_level_count4 = 0\n    var paren_open_count4 = 0\n    var paren_close_count4\
    \ = 0\n    var paren_level_count5 = 0\n    var paren_open_count5 = 0\n    var\
    \ paren_close_count5 = 0\n    var paren_level_count6 = 0\n    var paren_open_count6\
    \ = 0\n    var paren_close_count6 = 0\n    var paren_level_count7 = 0\n    var\
    \ paren_open_count7 = 0\n    var paren_close_count7 = 0\n    var paren_level_count8\
    \ = 0\n    var paren_open_count8 = 0\n    var paren_close_count8 = 0\n    var\
    \ paren_level_count9 = 0\n    var paren_open_count9 = 0\n    var paren_close_count9\
    \ = 0\n    var paren_level_count10 = 0\n    var paren_open_count10 = 0\n    var\
    \ paren_close_count10 = 0\n    var paren_level_count11 = 0\n    var paren_open_count11\
    \ = 0\n    var paren_close_count11 = 0\n    var paren_level_count12 = 0\n    var\
    \ paren_open_count12 = 0\n    var paren_close_count12 = 0\n    var paren_level_count13\
    \ = 0\n    var paren_open_count13 = 0\n    var paren_close_count13 = 0\n    var\
    \ paren_level_count14 = 0\n    var paren_open_count14 = 0\n    var paren_close_count14\
    \ = 0\n    var paren_level_count15 = 0\n    var paren_open_count15 = 0\n    var\
    \ paren_close_count15 = 0\n    var paren_level_count16 = 0\n    var paren_open_count16\
    \ = 0\n    var paren_close_count16 = 0\n    var paren_level_count17 = 0\n    var\
    \ paren_open_count17 = 0\n    var paren_close_count17 = 0\n    var paren_level_count18\
    \ = 0\n    var paren_open_count18 = 0\n    var paren_close_count18 = 0\n    var\
    \ paren_level_count19 = 0\n    var paren_open_count19 = 0\n    var paren_close_count19\
    \ = 0\n    var paren_level_count20 = 0\n    var paren_open_count20 = 0\n    var\
    \ paren_close_count20 = 0\n    var paren_level_count21 = 0\n    var paren_\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpawsqxdcr.swift:71:9: error: type annotation missing in pattern\n\
    \    var paren_\n        ^\n"
  stdout: ''
  timestamp: 1660009379
- exit_code: -4
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    for c in paren_string.unicodeScalars {\n        if paren_count == 0\
    \ {\n            levels.append(level)\n        }\n        level += c.value ==\
    \ 0x28 ? 1 : 2\n        paren_count += c.value == 0x28 ? 1 : 2\n    }\n    return\
    \ levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: Exception
  stderr: 'tmpjjjegfgp/tmpjjjegfgp.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b357b51cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b357b213b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b357b213988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b357b2127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjjegfgp                        0x00005645e0bf86ae <unavailable> + 5806

    5    libc.so.6                          0x00002b357b708460 __libc_start_main +
    245

    6    tmpjjjegfgp                        0x00005645e0bf82c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660009379
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_level = 0\n    var paren_open\
    \ = 0\n    var paren_close = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_open = 0\n    var paren_close = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_open = 0\n    var paren_close\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_open\
    \ = 0\n    var paren_close = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_open = 0\n    var paren_close = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_open = 0\n    var paren_close\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_open\
    \ = 0\n    var paren_close = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_open = 0\n    var paren_close = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_open = 0\n    var paren_close\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_open\
    \ = 0\n    var paren_close = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_open = 0\n    var paren_close = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_open = 0\n    var paren_close\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_open\
    \ = 0\n    var paren_close = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_open = 0\n    var paren_close = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_open = 0\n    var paren_close\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_open\
    \ = 0\n    var paren_close = 0\n    var paren_levels = [Int]()\n    var paren_level\
    \ = 0\n    var paren_open = 0\n    var paren_close = 0\n    var paren_levels =\
    \ [Int]()\n    var paren_level = 0\n    var paren_open = 0\n    var paren_close\
    \ = 0\n    var paren_levels = [Int]()\n    var paren_level = 0\n    var paren_open\
    \ = 0\n    var paren_close = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\") == [2,\
    \ 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp4nj5o2qi.swift:82:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp4nj5o2qi.swift:11:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp4nj5o2qi.swift:7:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp4nj5o2qi.swift:12:9:\
    \ error: invalid redeclaration of 'paren_open'\n    var paren_open = 0\n     \
    \   ^\n/tmp/tmp4nj5o2qi.swift:8:9: note: 'paren_open' previously declared here\n\
    \    var paren_open = 0\n        ^\n/tmp/tmp4nj5o2qi.swift:13:9: error: invalid\
    \ redeclaration of 'paren_close'\n    var paren_close = 0\n        ^\n/tmp/tmp4nj5o2qi.swift:9:9:\
    \ note: 'paren_close' previously declared here\n    var paren_close = 0\n    \
    \    ^\n/tmp/tmp4nj5o2qi.swift:14:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmp4nj5o2qi.swift:10:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp4nj5o2qi.swift:15:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp4nj5o2qi.swift:7:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tmp4nj5o2qi.swift:16:9:\
    \ error: invalid redeclaration of 'paren_open'\n    var paren_open = 0\n     \
    \   ^\n/tmp/tmp4nj5o2qi.swift:8:9: note: 'paren_open' previously declared here\n\
    \    var paren_open = 0\n        ^\n/tmp/tmp4nj5o2qi.swift:17:9: error: invalid\
    \ redeclaration of 'paren_close'\n    var paren_close = 0\n        ^\n/tmp/tmp4nj5o2qi.swift:9:9:\
    \ note: 'paren_close' previously declared here\n    var paren_close = 0\n    \
    \    ^\n/tmp/tmp4nj5o2qi.swift:18:9: error: invalid redeclaration of 'paren_levels'\n\
    \    var paren_levels = [Int]()\n        ^\n/tmp/tmp4nj5o2qi.swift:10:9: note:\
    \ 'paren_levels' previously declared here\n    var paren_levels = [Int]()\n  \
    \      ^\n/tmp/tmp4nj5o2qi.swift:19:9: error: invalid redeclaration of 'paren_level'\n\
    \    var paren_level = 0\n        ^\n/tmp/tmp4nj5o2qi.swift:7:9: note: 'paren_level'\
    \ previously declared here\n    var paren_level = 0\n        ^\n/tmp/tm"
  stdout: ''
  timestamp: 1660009379
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var paren_stack = [Int]()\n    var paren_level\
    \ = [Int]()\n    var paren_level_count = [Int]()\n    var paren_level_max = [Int]()\n\
    \    var paren_level_max_count = 0\n    var paren_level_max_index = 0\n    var\
    \ paren_level_max_value = 0\n    var paren_level_max_count = 0\n    var paren_level_max_index\
    \ = 0\n    var paren_level_max_value = 0\n    var paren_level_max_count = 0\n\
    \    var paren_level_max_index = 0\n    var paren_level_max_value = 0\n    var\
    \ paren_level_max_count = 0\n    var paren_level_max_index = 0\n    var paren_level_max_value\
    \ = 0\n    var paren_level_max_count = 0\n    var paren_level_max_index = 0\n\
    \    var paren_level_max_value = 0\n    var paren_level_max_count = 0\n    var\
    \ paren_level_max_index = 0\n    var paren_level_max_value = 0\n    var paren_level_max_count\
    \ = 0\n    var paren_level_max_index = 0\n    var paren_level_max_value = 0\n\
    \    var paren_level_max_count = 0\n    var paren_level_max_index = 0\n    var\
    \ paren_level_max_value = 0\n    var paren_level_max_count = 0\n    var paren_level_max_index\
    \ = 0\n    var paren_level_max_value = 0\n    var paren_level_max_count = 0\n\
    \    var paren_level_max_index = 0\n    var paren_level_max_value = 0\n    var\
    \ paren_level_max_count = 0\n    var paren_level_max_index = 0\n    var paren_level_max_value\
    \ = 0\n    var paren_level_max_count = 0\n    var paren_level_max_index = 0\n\
    \    var paren_level_max_value = 0\n    var paren_level_max_count = 0\n    var\
    \ paren_level_max_index = 0\n    var paren_level_max_value = 0\n    var paren_level_max_count\
    \ = 0\n    var paren_level_max_index = 0\n    var paren_level_max_value = 0\n\
    \    var paren_level_max_count = 0\n    var paren_level_max_index = 0\n    var\
    \ paren_level_max_value = 0\n    var paren_level_max_count = 0\n    var paren_level_max_index\
    \ = 0\n    var paren_level_max_value = 0\n    var paren_level_max_count = 0\n\
    \    var paren_level_max_index = 0\n    var paren_level_max_value = 0\n    var\
    \ paren_level_max_count = 0\n    var paren_level_max_index = 0\n    var paren_level_max_value\
    \ = 0\n    var paren_level_max_count = 0\n    var paren_level_max_index = 0\n\
    \    var paren_level_max_value = 0\n    var paren_level_max_count = 0\n    var\
    \ paren_level_max_index = 0\n    var paren_level_max_value = 0\n    var paren_level_max_count\
    \ = 0\n    var paren_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpv_el7z6e.swift:14:9: error: invalid redeclaration of 'paren_level_max_count'\n\
    \    var paren_level_max_count = 0\n        ^\n/tmp/tmpv_el7z6e.swift:11:9: note:\
    \ 'paren_level_max_count' previously declared here\n    var paren_level_max_count\
    \ = 0\n        ^\n/tmp/tmpv_el7z6e.swift:15:9: error: invalid redeclaration of\
    \ 'paren_level_max_index'\n    var paren_level_max_index = 0\n        ^\n/tmp/tmpv_el7z6e.swift:12:9:\
    \ note: 'paren_level_max_index' previously declared here\n    var paren_level_max_index\
    \ = 0\n        ^\n/tmp/tmpv_el7z6e.swift:16:9: error: invalid redeclaration of\
    \ 'paren_level_max_value'\n    var paren_level_max_value = 0\n        ^\n/tmp/tmpv_el7z6e.swift:13:9:\
    \ note: 'paren_level_max_value' previously declared here\n    var paren_level_max_value\
    \ = 0\n        ^\n/tmp/tmpv_el7z6e.swift:17:9: error: invalid redeclaration of\
    \ 'paren_level_max_count'\n    var paren_level_max_count = 0\n        ^\n/tmp/tmpv_el7z6e.swift:11:9:\
    \ note: 'paren_level_max_count' previously declared here\n    var paren_level_max_count\
    \ = 0\n        ^\n/tmp/tmpv_el7z6e.swift:18:9: error: invalid redeclaration of\
    \ 'paren_level_max_index'\n    var paren_level_max_index = 0\n        ^\n/tmp/tmpv_el7z6e.swift:12:9:\
    \ note: 'paren_level_max_index' previously declared here\n    var paren_level_max_index\
    \ = 0\n        ^\n/tmp/tmpv_el7z6e.swift:19:9: error: invalid redeclaration of\
    \ 'paren_level_max_value'\n    var paren_level_max_value = 0\n        ^\n/tmp/tmpv_el7z6e.swift:13:9:\
    \ note: 'paren_level_max_value' previously declared here\n    var paren_level_max_value\
    \ = 0\n        ^\n/tmp/tmpv_el7z6e.swift:20:9: error: invalid redeclaration of\
    \ 'paren_level_max_count'\n    var paren_level_max_count = 0\n        ^\n/tmp/tmpv_el7z6e.swift:11:9:\
    \ note: 'paren_level_max_count' previously declared here\n    var paren_level_max_count\
    \ = 0\n        ^\n/tmp/tmpv_el7z6e.swift:21:9: error: invalid redeclaration of\
    \ 'paren_level_max_index'\n    var paren_level_max_index = 0\n        ^\n/tmp/tmpv_el7z6e.swift:12:9:\
    \ note: 'paren_level_max_index' previously declared here\n    var paren_level_max_index\
    \ = 0\n  "
  stdout: ''
  timestamp: 1660009379
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var max_level = 0\n    var levels = [Int]()\n    for paren in\
    \ paren_string.characters {\n        if paren == '(' {\n            levels.append(0)\n\
    \        } else if paren == ')' {\n            levels[levels.count - 1] += 1\n\
    \            if levels[levels.count - 1] > max_level {\n                max_level\
    \ = levels[levels.count - 1]\n            }\n        }\n    }\n    return levels\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp4_6tmb0n.swift:9:21: error: single-quoted string literal found,\
    \ use '\"'\n        if paren == '(' {\n                    ^~~\n             \
    \       \"(\"\n/tmp/tmp4_6tmb0n.swift:11:28: error: single-quoted string literal\
    \ found, use '\"'\n        } else if paren == ')' {\n                        \
    \   ^~~\n                           \")\"\n/tmp/tmp4_6tmb0n.swift:8:31: error:\
    \ 'characters' is unavailable: Please use String directly\n    for paren in paren_string.characters\
    \ {\n                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660009379
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    for c in paren_string.unicodeScalars {\n        if c == parenthesisOpeningBracket.unicodeScalar.value\
    \ {\n            paren_count++\n        } else if c == parenthesisClosingBracket.unicodeScalar.value\
    \ {\n            paren_count--\n        }\n        if paren_count == 0 {\n   \
    \         levels.append(level)\n        }\n        level++\n    }\n    return\
    \ levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp1fwmx1ss.swift:10:17: error: cannot find 'parenthesisOpeningBracket'\
    \ in scope\n        if c == parenthesisOpeningBracket.unicodeScalar.value {\n\
    \                ^~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1fwmx1ss.swift:11:24: error:\
    \ cannot find operator '++' in scope; did you mean '+= 1'?\n            paren_count++\n\
    \                       ^~\n/tmp/tmp1fwmx1ss.swift:12:24: error: cannot find 'parenthesisClosingBracket'\
    \ in scope\n        } else if c == parenthesisClosingBracket.unicodeScalar.value\
    \ {\n                       ^~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1fwmx1ss.swift:13:24:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \  paren_count--\n                       ^~\n/tmp/tmp1fwmx1ss.swift:18:14: error:\
    \ cannot find operator '++' in scope; did you mean '+= 1'?\n        level++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1660009379
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    var paren_start = 0\n    for c in paren_string.unicodeScalars {\n \
    \       if paren_count > 0 {\n            levels[paren_level] = paren_count -\
    \ 1\n        }\n        if paren_count == 0 {\n            paren_start = c\n \
    \       }\n        paren_count += 1\n        if paren_count == 1 {\n         \
    \   paren_level++\n        }\n    }\n    if paren_count > 0 {\n        levels[paren_level]\
    \ = paren_count - 1\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string: \"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string: \"(()(())((())))\"\
    ) == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpb7q5r4dd.swift:15:27: error: cannot assign value of type 'Unicode.Scalar'\
    \ to type 'Int'\n            paren_start = c\n                          ^\n/tmp/tmpb7q5r4dd.swift:19:24:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  paren_level++\n                       ^~\n"
  stdout: ''
  timestamp: 1660009379
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var level = 0\n    var max_level = 0\n    var paren_level =\
    \ 0\n    var paren_max_level = 0\n    var paren_stack = [Int]()\n    var paren_stack_pointer\
    \ = 0\n    var paren_stack_pointer_max = paren_stack.count\n    var paren_stack_pointer_max_max\
    \ = paren_stack_pointer_max\n    var paren_stack_pointer_max_min = paren_stack_pointer_max\n\
    \    var paren_stack_pointer_max_min_max = paren_stack_pointer_max\n    var paren_stack_pointer_max_min_max_max\
    \ = paren_stack_pointer_max\n    var paren_stack_pointer_max_min_max_max_max =\
    \ paren_stack_pointer_max\n    var paren_stack_pointer_max_min_max_max_max_max\
    \ = paren_stack_pointer_max\n    var paren_stack_pointer_max_min_max_max_max_max_max\
    \ = paren_stack_pointer_max\n    var paren_stack_pointer_max_min_max_max_max_max_max_max\
    \ = paren_stack_pointer_max\n    var paren_stack_pointer_max_min_max_max_max_max_max_max_max\
    \ = paren_stack_pointer_max\n    var paren_stack_pointer_max_min_max_max_max_max_max_max_max_max\
    \ = paren_stack_pointer_max\n    var paren_stack_pointer_max_min_max_max_max_max_max_max_max_max_max\
    \ = paren_stack_pointer_max\n    var paren_stack_pointer_max_min_max_max_max_max_max_max_max_max_max_max\
    \ = paren_stack_pointer_max\n    var paren_stack_pointer_max_min_max_max_max_max_max_max_max_max_max_max_max\
    \ = paren_stack_pointer_max\n    var paren_stack_pointer_max_min_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = paren_stack_pointer_max\n    var paren_stack_pointer_max_min_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = paren_stack_pointer_max\n    var paren_stack_pointer_max_min_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = paren_stack_pointer_max\n    var paren_stack_pointer_max_min_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = paren_stack_pointer_max\n    var paren_stack_pointer_max_min_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = paren_stack_pointer_max\n    var paren_stack_pointer_max_min_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = paren_stack_pointer_max\n    var paren_stack_pointer_max_min_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmp8z7g4v0j.swift:32:9: error: type annotation missing in pattern\n\
    \    var paren_stack_pointer_max_min_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660009379
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var level = 0\n    var paren_count\
    \ = 0\n    var paren_level = 0\n    var paren_char_count = 0\n    for c in paren_string.unicodeScalars\
    \ {\n        if paren_char_count == 0 {\n            if paren_count == 0 {\n \
    \               levels.append(level)\n                paren_count = 1\n      \
    \          paren_level = 0\n            } else {\n                levels.append(level)\n\
    \                paren_count = 1\n                paren_level = 0\n          \
    \  }\n            level++\n            paren_char_count = 1\n        } else {\n\
    \            paren_char_count++\n            if c == paren_chars.back() {\n  \
    \              paren_count--\n                if paren_count == 0 {\n        \
    \            levels.append(level)\n                    paren_count = 1\n     \
    \               paren_level = 0\n                }\n                level--\n\
    \                paren_char_count = 1\n            } else {\n                paren_count++\n\
    \                paren_level++\n            }\n        }\n    }\n    return levels\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmpz20s9hqo.swift:22:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            level++\n                 ^~\n/tmp/tmpz20s9hqo.swift:25:29:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  paren_char_count++\n                            ^~\n/tmp/tmpz20s9hqo.swift:26:21:\
    \ error: cannot find 'paren_chars' in scope\n            if c == paren_chars.back()\
    \ {\n                    ^~~~~~~~~~~\n/tmp/tmpz20s9hqo.swift:27:28: error: cannot\
    \ find operator '--' in scope; did you mean '-= 1'?\n                paren_count--\n\
    \                           ^~\n/tmp/tmpz20s9hqo.swift:33:22: error: cannot find\
    \ operator '--' in scope; did you mean '-= 1'?\n                level--\n    \
    \                 ^~\n/tmp/tmpz20s9hqo.swift:36:28: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n                paren_count++\n       \
    \                    ^~\n/tmp/tmpz20s9hqo.swift:37:28: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n                paren_level++\n       \
    \                    ^~\n"
  stdout: ''
  timestamp: 1660009379
- exit_code: 1
  program: "\n/// Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n/// For each of the group, output the\
    \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string: String)\
    \ -> [Int] {\n    var levels = [Int]()\n    var paren_count = 0\n    var paren_level\
    \ = 0\n    for c in paren_string.unicodeScalars {\n        if c == '(' {\n   \
    \         paren_count += 1\n        } else if c == ')' {\n            paren_count\
    \ -= 1\n            if paren_count == 0 {\n                levels.append(paren_level)\n\
    \            }\n        }\n        paren_level += c == '(' ? 1 : -1\n    }\n \
    \   return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_nested_parens(paren_string:\
    \ \"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
    \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
    \ \"(()(())((())))\") == [4])"
  status: SyntaxError
  stderr: "/tmp/tmphyq00r5o.swift:10:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmphyq00r5o.swift:12:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmphyq00r5o.swift:18:29: error: single-quoted string literal\
    \ found, use '\"'\n        paren_level += c == '(' ? 1 : -1\n                \
    \            ^~~\n                            \"(\"\n"
  stdout: ''
  timestamp: 1660009379
