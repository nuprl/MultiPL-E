name: HumanEval_18_how_many_times
language: swift
prompt: "\n/// Find how many times a given substring can be found in the original\
  \ string. Count overlaping cases.\nfunc how_many_times(string: String, substring:\
  \ String) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(how_many_times(string: \"\", substring:\
  \ \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") ==\
  \ 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
  \ \"john doe\", substring: \"john\") == 1)"
completions: ["    var count = 0\n    for char in string.characters {\n        if\
    \ char == substring {\n            count += 1\n        }\n    }\n    return count",
  "    var count = 0\n    for c in string.unicodeScalars {\n        if c == substring\
    \ {\n            count += 1\n        }\n    }\n    return count", "    var count\
    \ = 0\n    for char in string {\n        if char == substring {\n            count\
    \ += 1\n        }\n    }\n    return count", "    var count = 0\n    for char\
    \ in string {\n        if char == substring {\n            count += 1\n      \
    \  }\n    }\n    return count", "    var count = 0\n    for char in string {\n\
    \        if char == substring {\n            count += 1\n        }\n    }\n  \
    \  return count", "    var count = 0\n    var last = 0\n    for index in string.indices(in:\
    \ string) {\n        if string.substring(from: index).lowercased() == substring.lowercased()\
    \ {\n            count += 1\n        } else {\n            if count > 0 {\n  \
    \              count -= 1\n            }\n            last = index\n        }\n\
    \    }\n    return count + last", "    var count = 0\n    for char in string.characters\
    \ {\n        if char == substring {\n            count += 1\n        }\n    }\n\
    \    return count", "    var count = 0\n    for char in string.unicodeScalars\
    \ {\n        if char.value == substring.unicodeScalars.first?.value {\n      \
    \      count += 1\n        }\n    }\n    return count", "    var count = 0\n \
    \   for char in string {\n        if char == substring {\n            count +=\
    \ 1\n        }\n    }\n    return count", "    var count = 0\n    var startIndex\
    \ = 0\n    var endIndex = 0\n    while startIndex < string.count {\n        endIndex\
    \ = string.index(substring, startIndex)\n        if endIndex == startIndex {\n\
    \            count += 1\n        } else {\n            count += endIndex - startIndex\n\
    \            startIndex = endIndex + 1\n        }\n    }\n    return count", " \
    \   var count = 0\n    for char in string.characters {\n        if char == substring\
    \ {\n            count += 1\n        }\n    }\n    return count", "    var count\
    \ = 0\n    for char in string.unicodeScalars {\n        if char == substring {\n\
    \            count += 1\n        }\n    }\n    return count", "    var count =\
    \ 0\n    for char in string.characters.reverse() {\n        if char == substring\
    \ {\n            count += 1\n        }\n    }\n    return count", "    var count\
    \ = 0\n    for char in string.characters {\n        if char == substring {\n \
    \           count += 1\n        }\n    }\n    return count", "    var count =\
    \ 0\n    for char in string.characters {\n        if char == substring.characters[0]\
    \ {\n            count += 1\n            if char == substring.characters[1] {\n\
    \                count += 1\n                if char == substring.characters[2]\
    \ {\n                    count += 1\n                }\n            }\n      \
    \  }\n    }\n    return count", "    var count = 0\n    for char in string {\n\
    \        if char == substring {\n            count += 1\n        }\n    }\n  \
    \  return count", "    var count = 0\n    for char in string.characters.reversed()\
    \ {\n        if char == substring {\n            count += 1\n        }\n    }\n\
    \    return count", "    var count = 0\n    var lastIndex = string.startIndex\n\
    \    while lastIndex != string.endIndex {\n        if string.substring(lastIndex,\
    \ string.endIndex) == substring {\n            count += 1\n        }\n       \
    \ lastIndex = string.index(lastIndex, offsetBy: 1)\n    }\n    return count",
  "    var count = 0\n    for c in string.unicodeScalars {\n        if c == substring\
    \ {\n            count += 1\n        }\n    }\n    return count", "    var count\
    \ = 0\n    for char in string.characters {\n        if char == substring {\n \
    \           count += 1\n        }\n    }\n    return count", "    var count =\
    \ 0\n    for char in string {\n        if char == substring {\n            count\
    \ += 1\n        }\n    }\n    return count", "    var count = 0\n    for char\
    \ in string.characters.reverse() {\n        if char == substring {\n         \
    \   count += 1\n        }\n    }\n    return count", "    var count = 0\n    for\
    \ char in string.characters.reverse() {\n        if char == substring {\n    \
    \        count += 1\n        }\n    }\n    return count", "    var count = 0\n\
    \    var i = 0\n    var j = string.characters.count\n    var k = substring.characters.count\n\
    \    while i < j {\n        if string[i] == substring[k] {\n            count\
    \ += 1\n            i += 1\n            k += 1\n        } else if string[i] ==\
    \ substring[k] && k < substring.characters.count {\n            i += 1\n     \
    \       k += 1\n        } else {\n            i += 1\n        }\n    }\n    return\
    \ count", "    var count = 0\n    for char in string.characters {\n        if\
    \ char == substring {\n            count += 1\n        }\n    }\n    return count",
  "    var count = 0\n    var start = 0\n    var end = string.characters.count\n \
    \   while start < end {\n        let index = string.characters.index(of: substring,\
    \ options: .caseInsensitive)\n        if index == nil {\n            break\n \
    \       }\n        count += 1\n        start = index! + 1\n    }\n    return count",
  "    var count = 0\n    var lastIndex = string.startIndex\n    while lastIndex <\
    \ string.endIndex {\n        let range = string.range(of: substring, options:\
    \ .caseInsensitive)\n        if range.lowerBound != lastIndex { // If substring\
    \ is not found at current position\n            count += 1\n        }\n      \
    \  lastIndex = range.upperBound\n    }\n    return count", "    var count = 0\n\
    \    for c in string.unicodeScalars {\n        if c == substring {\n         \
    \   count += 1\n        }\n    }\n    return count", "    var count = 0\n    for\
    \ char in string {\n        if char == substring {\n            count += 1\n \
    \       }\n    }\n    return count", "    var count = 0\n    for char in string.characters\
    \ {\n        if char == substring {\n            count += 1\n        }\n    }\n\
    \    return count", "    var count = 0\n    for char in string.unicodeScalars\
    \ {\n        if char == substring {\n            count += 1\n        }\n    }\n\
    \    return count", "    var count = 0\n    for char in string.unicodeScalars\
    \ {\n        if char == substring {\n            count += 1\n        }\n    }\n\
    \    return count", "    var count = 0\n    for char in string.unicodeScalars\
    \ {\n        if char == substring {\n            count += 1\n        }\n    }\n\
    \    return count", "    var count = 0\n    for char in string {\n        if char\
    \ == substring {\n            count += 1\n        }\n    }\n    return count",
  "    var count = 0\n    for char in string {\n        if char == substring {\n \
    \           count += 1\n        }\n    }\n    return count", "    var count =\
    \ 0\n    for char in string {\n        if char == substring {\n            count\
    \ += 1\n        }\n    }\n    return count", "    var count = 0\n    for char\
    \ in string.characters.reversed() {\n        if char == substring {\n        \
    \    count += 1\n        } else if string.hasPrefix(char) {\n            count\
    \ += 1\n        }\n    }\n    return count", "    var count = 0\n    for char\
    \ in string {\n        if char == substring {\n            count += 1\n      \
    \  }\n    }\n    return count", "    var count = 0\n    var i = 0\n    var j =\
    \ 0\n    while i < string.count {\n        if string[i] == substring {\n     \
    \       count += 1\n            i += 1\n            j = i\n            while i\
    \ < string.count && string[i] == substring {\n                i += 1\n       \
    \     }\n            j = i\n        } else {\n            if j > 0 {\n       \
    \         count += j - i\n            }\n            i = 0\n            j = i\n\
    \        }\n    }\n    return count", "    var count = 0\n    for char in string\
    \ {\n        if char == substring {\n            count += 1\n        }\n    }\n\
    \    return count", "    var count = 0\n    for char in string.characters {\n\
    \        if char == substring.first {\n            count += 1\n            if\
    \ char == substring.last {\n                count += 1\n            }\n      \
    \  }\n    }\n    return count", "    var count = 0\n    var startIndex = 0\n \
    \   var endIndex = 0\n    while startIndex < string.count {\n        endIndex\
    \ = string.index(substring, startIndex)\n        if endIndex == startIndex {\n\
    \            count += 1\n            startIndex = string.index(substring, startIndex)\
    \ + 1\n        } else {\n            count = 0\n        }\n    }\n    return count",
  "    var count = 0\n    for char in string.unicodeScalars {\n        if char ==\
    \ substring {\n            count += 1\n        }\n    }\n    return count", " \
    \   var count = 0\n    for char in string {\n        if char == substring {\n\
    \            count += 1\n        }\n    }\n    return count", "    var count =\
    \ 0\n    for char in string.characters.reverse() {\n        if char == substring\
    \ {\n            count += 1\n        }\n    }\n    return count", "    var count\
    \ = 0\n    for char in string {\n        if char == substring {\n            count\
    \ += 1\n        }\n    }\n    return count", "    var count = 0\n    for char\
    \ in string {\n        if char == substring {\n            count += 1\n      \
    \  }\n    }\n    return count", "    var count = 0\n    for char in string.unicodeScalars\
    \ {\n        if char == substring {\n            count += 1\n        }\n    }\n\
    \    return count", "    var count = 0\n    var start = 0\n    var end = string.count\n\
    \n    while start < end {\n        let index = string.index(start, offsetBy: substring.count)\n\
    \        if index == nil {\n            break\n        }\n        start = index!\n\
    \        count += 1\n    }\n    return count", "    var count = 0\n    var i =\
    \ 0\n    while i < string.count {\n        if string.substring(i, i+substring.length)\
    \ == substring {\n            count += 1\n            i += substring.length -\
    \ 1\n        } else {\n            i += 1\n        }\n    }\n    return count",
  "    var count = 0\n    for char in string.characters {\n        if char == substring.characters[0]\
    \ {\n            count += 1\n            if char == substring.characters[1] {\n\
    \                count += 1\n                if char == substring.characters[2]\
    \ {\n                    count += 1\n                }\n            }\n      \
    \  }\n    }\n    return count", "    var count = 0\n    var start = 0\n    var\
    \ end = string.characters.count\n    while start < end {\n        let index =\
    \ string.index(string.startIndex, offsetBy: start)\n        let substringIndex\
    \ = string.index(index, offsetBy: substring.characters.count)\n        if substringIndex\
    \ < index {\n            count += 1\n            start = substringIndex + 1\n\
    \        } else {\n            start = index + 1\n        }\n    }\n    return\
    \ count", "    var count = 0\n    for c in string.unicodeScalars {\n        if\
    \ c == substring {\n            count += 1\n        }\n    }\n    return count",
  "    var count = 0\n    for char in string.characters {\n        if char == substring\
    \ {\n            count += 1\n        }\n    }\n    return count", "    var count\
    \ = 0\n    for char in string.characters.reverse() {\n        if char == substring\
    \ {\n            count += 1\n        }\n    }\n    return count", "    var count\
    \ = 0\n    for char in string {\n        if char == substring {\n            count\
    \ += 1\n        }\n    }\n    return count", "    var count = 0\n    var i = 0\n\
    \    while i < string.count {\n        if string.substring(i, i + substring.length)\
    \ == substring {\n            count += 1\n            i += substring.length\n\
    \        } else {\n            i += 1\n        }\n    }\n    return count", " \
    \   var count = 0\n    for char in string {\n        if char == substring {\n\
    \            count += 1\n        }\n    }\n    return count", "    var count =\
    \ 0\n    for char in string.characters {\n        if char == substring {\n   \
    \         count += 1\n        }\n    }\n    return count", "    var count = 0\n\
    \    for c in string.unicodeScalars {\n        if c == substring {\n         \
    \   count += 1\n        }\n    }\n    return count", "    var count = 0\n    for\
    \ char in string {\n        if char == substring {\n            count += 1\n \
    \       }\n    }\n    return count", "    var count = 0\n    for char in string\
    \ {\n        if char == substring {\n            count += 1\n        }\n    }\n\
    \    return count", "    var count = 0\n    for char in string.characters {\n\
    \        if char == substring {\n            count += 1\n        }\n    }\n  \
    \  return count", "    var count = 0\n    for c in string.unicodeScalars {\n \
    \       if c == substring {\n            count += 1\n        } else if string.unicodeScalars.contains(substring)\
    \ {\n            count += 2\n        }\n    }\n    return count", "    var count\
    \ = 0\n    for c in string.unicodeScalars {\n        if substring.unicodeScalars.contains(c)\
    \ {\n            count += 1\n        }\n    }\n    return count", "    var count\
    \ = 0\n    for char in string.characters {\n        if char == substring.characters[0]\
    \ {\n            count += 1\n        }\n        if char == substring.characters[len(substring.characters)-1]\
    \ {\n            count += 1\n        }\n    }\n    return count", "    var count\
    \ = 0\n    var index = string.startIndex\n    while index != string.endIndex {\n\
    \        index = string.index(substring, startIndex: index + 1)\n        if index\
    \ != string.endIndex {\n            count += 1\n        }\n    }\n    return count",
  "    var count = 0\n    for char in string.characters {\n        if char == substring.first\
    \ {\n            count += 1\n        }\n        if char == substring.last {\n\
    \            count += 1\n        }\n    }\n    return count", "    var count =\
    \ 0\n    for char in string {\n        if char == substring {\n            count\
    \ += 1\n        }\n    }\n    return count", "    var count = 0\n    for char\
    \ in string.characters {\n        if char == substring {\n            count +=\
    \ 1\n        }\n    }\n    return count", "    var count = 0\n    for c in string.unicodeScalars\
    \ {\n        if c == substring {\n            count += 1\n        }\n    }\n \
    \   return count", "    var count = 0\n    for char in string {\n        if char\
    \ == substring {\n            count += 1\n        }\n    }\n    return count",
  "    var count = 0\n    for char in string.characters.reversed() {\n        if char\
    \ == substring {\n            count += 1\n        } else if string.hasPrefix(char)\
    \ {\n            count += how_many_times(string.substring(char), substring)\n\
    \        }\n    }\n    return count", "    var count = 0\n    for char in string.unicodeScalars\
    \ {\n        if char == substring {\n            count += 1\n        }\n    }\n\
    \    return count", "    var count = 0\n    var index = string.startIndex\n  \
    \  while index != string.endIndex {\n        index = string.index(substring, startIndex:\
    \ index + 1)\n        if index != string.endIndex {\n            count += 1\n\
    \        }\n    }\n    return count", "    var count = 0\n    var last = 0\n \
    \   for index in string.indices(of: substring) {\n        guard let start = string.index(index,\
    \ offsetBy: 0) else {\n            return count\n        }\n        guard let\
    \ end = string.index(index, offsetBy: substring.length) else {\n            return\
    \ count\n        }\n        if start < last {\n            count += 1\n      \
    \  }\n        last = end\n    }\n    return count", "    var count = 0\n    for\
    \ char in string {\n        if char == substring {\n            count += 1\n \
    \       }\n    }\n    return count", "    var count = 0\n    for char in string\
    \ {\n        if char == substring {\n            count += 1\n        }\n    }\n\
    \    return count", "    var count = 0\n    var last = 0\n    for index in 0..<string.characters.count\
    \ {\n        let start = string.index(string.startIndex, offsetBy: index)\n  \
    \      let end = string.index(start, offsetBy: substring.characters.count)\n \
    \       if string.substring(with: start..<end) == substring {\n            count\
    \ += 1\n            last = index\n        }\n    }\n    return count", "    var\
    \ count = 0\n    for char in string.characters {\n        if char == substring\
    \ {\n            count += 1\n        }\n    }\n    return count", "    var count\
    \ = 0\n    for char in string {\n        if char == substring {\n            count\
    \ += 1\n        }\n    }\n    return count", "    var count = 0\n    for char\
    \ in string.unicodeScalars {\n        if char == substring {\n            count\
    \ += 1\n        }\n    }\n    return count", "    var count = 0\n    for char\
    \ in string.characters {\n        if char == substring.first {\n            count\
    \ += 1\n        }\n        if char == substring.last {\n            count += 1\n\
    \        }\n    }\n    return count", "    var count = 0\n    for char in string.characters\
    \ {\n        if char == substring {\n            count += 1\n        }\n    }\n\
    \    return count", "    var count = 0\n    for char in string.unicodeScalars\
    \ {\n        if char == substring {\n            count += 1\n        }\n    }\n\
    \    return count", "    var count = 0\n    for char in string {\n        if char\
    \ == substring {\n            count += 1\n        }\n    }\n    return count",
  "    var count = 0\n    for char in string.unicodeScalars {\n        if char ==\
    \ substring {\n            count += 1\n        }\n    }\n    return count", " \
    \   var count = 0\n    for char in string {\n        if char == substring {\n\
    \            count += 1\n        }\n    }\n    return count", "    var count =\
    \ 0\n    for char in string.characters {\n        if char == substring {\n   \
    \         count += 1\n        }\n    }\n    return count", "    var count = 0\n\
    \    var i = 0\n    var j = string.characters.count\n    while i < j {\n     \
    \   if string.characters.contains(substring) {\n            count += 1\n     \
    \   }\n        i += 1\n    }\n    return count", "    var count = 0\n    var start\
    \ = 0\n    var end = string.count\n\n    while start < end {\n        let index\
    \ = string.index(start, offsetBy: substring.count)\n        if index == nil {\n\
    \            break\n        }\n        start = index! + substring.count\n    \
    \    count += 1\n    }\n    return count", "    var count = 0\n    for char in\
    \ string.unicodeScalars {\n        if char == substring {\n            count +=\
    \ 1\n        }\n    }\n    return count", "    var count = 0\n    var index =\
    \ string.startIndex\n    while index != string.endIndex {\n        if string.substring(index,\
    \ string.endIndex) == substring {\n            count += 1\n        }\n       \
    \ index = string.index(index, offsetBy: 1)\n    }\n    return count", "    var\
    \ count = 0\n    for char in string.characters {\n        if char == substring\
    \ {\n            count += 1\n        }\n    }\n    return count", "    var count\
    \ = 0\n    for char in string {\n        if char == substring {\n            count\
    \ += 1\n        }\n    }\n    return count", "    var count = 0\n    for c in\
    \ string.unicodeScalars {\n        if c == substring {\n            count += 1\n\
    \        } else if string.unicodeScalars.contains(substring) {\n            count\
    \ += 1\n        }\n    }\n    return count", "    var count = 0\n    for char\
    \ in string.characters {\n        if char == substring {\n            count +=\
    \ 1\n        }\n    }\n    return count", "    var count = 0\n    var index =\
    \ string.startIndex\n    while index != string.endIndex {\n        index = string.index(substring,\
    \ startIndex: index + 1)\n        if index != string.endIndex {\n            count\
    \ += 1\n        }\n    }\n    return count", "    var count = 0\n    var i = 0\n\
    \    var j = string.count\n    while i < j {\n        if string[i] == substring\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else {\n            i += 1\n        }\n    }\n    return count", "    var count\
    \ = 0\n    for char in string.characters.reverse() {\n        if char == substring.characters.first\
    \ {\n            count += 1\n        }\n        if char == substring.characters.last\
    \ {\n            count += 1\n        }\n    }\n    return count", "    var count\
    \ = 0\n    for char in string.characters {\n        if char == substring {\n \
    \           count += 1\n        }\n    }\n    return count", "    var count =\
    \ 0\n    for char in string.characters.reverse() {\n        if char == substring\
    \ {\n            count += 1\n        }\n    }\n    return count", "    var count\
    \ = 0\n    for char in string {\n        if char == substring {\n            count\
    \ += 1\n        }\n    }\n    return count", "    var count = 0\n    for char\
    \ in string.unicodeScalars {\n        if char.value == substring.unicodeScalars.first\
    \ {\n            count += 1\n        }\n    }\n    return count", "    var count\
    \ = 0\n    for char in string {\n        if char == substring {\n            count\
    \ += 1\n        }\n    }\n    return count", "    var count = 0\n    for char\
    \ in string.characters {\n        if char == substring.characters[0] {\n     \
    \       count += 1\n            if char == substring.characters[1] {\n       \
    \         count += 1\n            }\n        }\n    }\n    return count", "  \
    \  var count = 0\n    for char in string.unicodeScalars {\n        if char.value\
    \ == substring.unicodeScalars.first?.value {\n            count += 1\n       \
    \ }\n    }\n    return count", "    var count = 0\n    for char in string.characters\
    \ {\n        if char == substring {\n            count += 1\n        }\n    }\n\
    \    return count", "    var count = 0\n    for char in string.characters {\n\
    \        if char == substring {\n            count += 1\n        }\n    }\n  \
    \  return count", "    var count = 0\n    for char in string {\n        if char\
    \ == substring {\n            count += 1\n        }\n    }\n    return count",
  "    var count = 0\n    for char in string.unicodeScalars {\n        if char ==\
    \ substring {\n            count += 1\n        }\n    }\n    return count", " \
    \   var count = 0\n    for char in string.characters {\n        if char == substring.characters[0]\
    \ {\n            count += how_many_times(string.substringWithRange(string[string.startIndex.advancedBy(count)..<string.endIndex]),\
    \ substring)\n        } else {\n            count += how_many_times(string.substringWithRange(string[string.startIndex.advancedBy(count)..<string.endIndex]),\
    \ substring)\n        }\n    }\n    return count", "    var count = 0\n    for\
    \ char in string {\n        if char == substring {\n            count += 1\n \
    \       }\n    }\n    return count", "    var count = 0\n    for char in string\
    \ {\n        if char == substring {\n            count += 1\n        }\n    }\n\
    \    return count", "    var count = 0\n    for char in string.characters.reverse()\
    \ {\n        if char == substring.characters.first {\n            count += 1\n\
    \        }\n        if char == substring.characters.last {\n            count\
    \ += 1\n        }\n    }\n    return count", "    var count = 0\n    var index\
    \ = string.startIndex\n    while index != string.endIndex {\n        index = string.index(substring,\
    \ startIndex: index + 1)\n        if index != string.endIndex {\n            count\
    \ += 1\n        }\n    }\n    return count", "    var count = 0\n    for char\
    \ in string.characters {\n        if char == substring.first {\n            count\
    \ += substring.length\n        }\n        if char == substring.last {\n      \
    \      count += substring.length\n        }\n    }\n    return count", "    var\
    \ count = 0\n    for char in string.characters {\n        if char == substring\
    \ {\n            count += 1\n        }\n    }\n    return count", "    var count\
    \ = 0\n    for char in string.characters.reversed() {\n        if char == substring\
    \ {\n            count += 1\n        }\n    }\n    return count", "    var count\
    \ = 0\n    for char in string.characters {\n        if char == substring {\n \
    \           count += 1\n        }\n    }\n    return count", "    var count =\
    \ 0\n    for char in string.unicodeScalars {\n        if char == substring {\n\
    \            count += 1\n        }\n    }\n    return count", "    var count =\
    \ 0\n    var start = 0\n    var end = string.count\n    while start < end {\n\
    \        let middle = start + (end - start) / 2\n        if string.index(of: substring,\
    \ range: NSRange(location: middle, length: substring.length)) != nil {\n     \
    \       count += 1\n        }\n        start = middle\n        end = middle\n\
    \    }\n    return count", "    var count = 0\n    for char in string.characters\
    \ {\n        if char == substring {\n            count += 1\n        }\n    }\n\
    \    return count", "    var count = 0\n    for char in string.characters.reversed()\
    \ {\n        if char == substring {\n            count += 1\n        } else if\
    \ string.hasPrefix(char) {\n            count += 1\n        }\n    }\n    return\
    \ count", "    var count = 0\n    for char in string.unicodeScalars {\n      \
    \  if char == substring {\n            count += 1\n        }\n    }\n    return\
    \ count", "    var count = 0\n    var i = 0\n    var j = string.count\n    while\
    \ i < j {\n        if string[i] == substring {\n            count += 1\n     \
    \       i += substring.length - 1\n        } else {\n            i += 1\n    \
    \    }\n    }\n    return count", "    var count = 0\n    for char in string.characters\
    \ {\n        if char == substring {\n            count += 1\n        }\n    }\n\
    \    return count", "    var count = 0\n    for char in string.characters {\n\
    \        if char == substring {\n            count += 1\n        }\n    }\n  \
    \  return count", "    var count = 0\n    for char in string {\n        if char\
    \ == substring {\n            count += 1\n        }\n    }\n    return count",
  "    var count = 0\n    for c in string.unicodeScalars {\n        if c == substring\
    \ {\n            count += 1\n        }\n    }\n    return count", "    var count\
    \ = 0\n    for char in string.characters {\n        if char == substring.first\
    \ {\n            count += 1\n            if char == substring.last {\n       \
    \         count += 1\n            }\n        }\n    }\n    return count", "  \
    \  var count = 0\n    for c in string.unicodeScalars {\n        if c == substring\
    \ {\n            count += 1\n        }\n    }\n    return count", "    var count\
    \ = 0\n    for char in string.unicodeScalars {\n        if char.value == substring.unicodeScalars.first?.value\
    \ {\n            count += 1\n        }\n    }\n    return count", "    var count\
    \ = 0\n    for char in string {\n        if char == substring {\n            count\
    \ += 1\n        }\n    }\n    return count", "    var count = 0\n    var startIndex\
    \ = string.startIndex\n    var endIndex = string.endIndex\n    while startIndex\
    \ < endIndex {\n        let range = Range(startIndex, endIndex)\n        if string.range(of:\
    \ substring, options: .caseInsensitive) != nil {\n            count += 1\n   \
    \     }\n        startIndex = range.lowerBound\n        endIndex = range.upperBound\n\
    \    }\n    return count", "    var count = 0\n    for char in string {\n    \
    \    if char == substring {\n            count += 1\n        }\n    }\n    return\
    \ count", "    var count = 0\n    for char in string.unicodeScalars {\n      \
    \  if char.value == substring.unicodeScalars.first?.value {\n            count\
    \ += 1\n            if char.value == substring.unicodeScalars.last?.value {\n\
    \                count += 1\n            }\n        }\n    }\n    return count",
  "    var count = 0\n    for char in string {\n        if char == substring {\n \
    \           count += 1\n        }\n    }\n    return count", "    var count =\
    \ 0\n    for char in string {\n        if char == substring {\n            count\
    \ += 1\n        }\n    }\n    return count", "    var count = 0\n    var start\
    \ = 0\n    var end = string.count\n    while start < end {\n        let index\
    \ = string.index(start, offsetBy: substring.count)\n        if index == nil {\n\
    \            return count\n        }\n        if let index = index {\n       \
    \     start = index\n        } else {\n            count += 1\n        }\n   \
    \ }\n    return count", "    var count = 0\n    for char in string.characters.reversed()\
    \ {\n        if char == substring {\n            count += 1\n        } else if\
    \ char == substring.reversed() {\n            count -= 1\n        }\n    }\n \
    \   return count", "    var count = 0\n    for char in string.characters {\n \
    \       if char == substring.characters[0] {\n            count += how_many_times(string.substringWithRange(string[string.startIndex.advancedBy(count)..<string.endIndex]),\
    \ substring)\n        } else {\n            count += how_many_times(string.substringWithRange(string[string.startIndex.advancedBy(count)..<string.endIndex]),\
    \ substring)\n        }\n    }\n    return count", "    var count = 0\n    for\
    \ char in string.characters {\n        if char == substring {\n            count\
    \ += 1\n        }\n    }\n    return count", "    var count = 0\n    for char\
    \ in string.characters {\n        if char == substring {\n            count +=\
    \ 1\n        }\n    }\n    return count", "    var count = 0\n    for char in\
    \ string {\n        if char == substring {\n            count += 1\n        }\n\
    \    }\n    return count", "    var count = 0\n    for char in string.unicodeScalars\
    \ {\n        if char.value == substring.unicodeScalars.first {\n            count\
    \ += 1\n        }\n    }\n    return count", "    var count = 0\n    for char\
    \ in string.characters {\n        if char == substring.characters[0] {\n     \
    \       count += how_many_times(string.substringWithRange(NSMakeRange(0, char)),\
    \ substring)\n        } else {\n            count += how_many_times(string.substringWithRange(NSMakeRange(char,\
    \ 1)), substring)\n        }\n    }\n    return count", "    var count = 0\n \
    \   for char in string.unicodeScalars {\n        if char == substring {\n    \
    \        count += 1\n        }\n    }\n    return count", "    var count = 0\n\
    \    for char in string.characters {\n        if char == substring {\n       \
    \     count += 1\n        }\n    }\n    return count", "    var count = 0\n  \
    \  for c in string.unicodeScalars {\n        if c == substring {\n           \
    \ count += 1\n        }\n    }\n    return count", "    var count = 0\n    for\
    \ char in string.unicodeScalars {\n        if char == substring {\n          \
    \  count += 1\n        }\n    }\n    return count", "    var count = 0\n    for\
    \ char in string.characters {\n        if char == substring.characters[0] {\n\
    \            count += how_many_times(string.substringWithRange(NSMakeRange(0,\
    \ char)), substring)\n        } else {\n            count += how_many_times(string.substringWithRange(NSMakeRange(char,\
    \ 1)), substring)\n        }\n    }\n    return count", "    var count = 0\n \
    \   for c in string.unicodeScalars {\n        if c == substring {\n          \
    \  count += 1\n        }\n    }\n    return count", "    var count = 0\n    for\
    \ char in string {\n        if char == substring {\n            count += 1\n \
    \       }\n    }\n    return count", "    var count = 0\n    for char in string.characters.reversed()\
    \ {\n        if char == substring {\n            count += 1\n        }\n    }\n\
    \    return count", "    var count = 0\n    for char in string {\n        if char\
    \ == substring {\n            count += 1\n        }\n    }\n    return count",
  "    var count = 0\n    for char in string {\n        if char == substring {\n \
    \           count += 1\n        }\n    }\n    return count", "    var count =\
    \ 0\n    for char in string.characters.reversed() {\n        if char == substring\
    \ {\n            count += 1\n        }\n    }\n    return count", "    var count\
    \ = 0\n    for char in string {\n        if char == substring {\n            count\
    \ += 1\n        }\n    }\n    return count", "    var count = 0\n    for char\
    \ in string.characters {\n        if char == substring {\n            count +=\
    \ 1\n        }\n    }\n    return count", "    var count = 0\n    for char in\
    \ string {\n        if char == substring {\n            count += 1\n        }\n\
    \    }\n    return count", "    var count = 0\n    var startIndex = 0\n    var\
    \ endIndex = 0\n    while startIndex < string.count {\n        endIndex = string.index(substring,\
    \ startIndex)\n        if endIndex == startIndex {\n            count += 1\n \
    \       } else {\n            count += 1\n            startIndex = endIndex +\
    \ 1\n        }\n    }\n    return count", "    var count = 0\n    var startIndex\
    \ = 0\n    var endIndex = 0\n    while startIndex < string.count {\n        endIndex\
    \ = string.index(substring, startIndex)\n        if endIndex == startIndex {\n\
    \            count += 1\n        } else {\n            count += endIndex - startIndex\n\
    \        }\n        startIndex = endIndex + 1\n    }\n    return count", "   \
    \ var count = 0\n    for char in string {\n        if char == substring {\n  \
    \          count += 1\n        }\n    }\n    return count", "    var count = 0\n\
    \    for char in string.characters {\n        if char == substring {\n       \
    \     count += 1\n        }\n    }\n    return count", "    var count = 0\n  \
    \  for char in string {\n        if char == substring {\n            count +=\
    \ 1\n        }\n    }\n    return count", "    var count = 0\n    for char in\
    \ string.characters {\n        if char == substring {\n            count += 1\n\
    \        }\n    }\n    return count", "    var count = 0\n    for char in string.unicodeScalars\
    \ {\n        if char.value == substring.unicodeScalars.first {\n            count\
    \ += 1\n        }\n    }\n    return count", "    var count = 0\n    for char\
    \ in string.unicodeScalars {\n        if char == substring {\n            count\
    \ += 1\n        }\n    }\n    return count", "    var count = 0\n    for char\
    \ in string.characters {\n        if char == substring.first {\n            count\
    \ += 1\n            if char == substring.last {\n                count += 1\n\
    \            }\n        }\n    }\n    return count", "    var count = 0\n    for\
    \ c in string.unicodeScalars {\n        if c == substring {\n            count\
    \ += 1\n        }\n    }\n    return count", "    var count = 0\n    for char\
    \ in string.characters {\n        if char == substring.first {\n            count\
    \ += 1\n            if char == substring.last {\n                count += 1\n\
    \            }\n        }\n    }\n    return count", "    var count = 0\n    for\
    \ c in string.unicodeScalars {\n        if c == substring {\n            count\
    \ += 1\n        }\n    }\n    return count", "    var count = 0\n    for char\
    \ in string.characters {\n        if char == substring {\n            count +=\
    \ 1\n        }\n    }\n    return count", "    var count = 0\n    for c in string.unicodeScalars\
    \ {\n        if c == substring {\n            count += 1\n        }\n    }\n \
    \   return count", "    var count = 0\n    for c in string.unicodeScalars {\n\
    \        if c == substring {\n            count += 1\n        }\n    }\n    return\
    \ count", "    var count = 0\n    for c in string.unicodeScalars {\n        if\
    \ c == substring {\n            count += 1\n        }\n    }\n    return count",
  "    var count = 0\n    for char in string.characters {\n        if char == substring\
    \ {\n            count += 1\n        }\n    }\n    return count", "    var count\
    \ = 0\n    for char in string {\n        if char == substring {\n            count\
    \ += 1\n        }\n    }\n    return count", "    var count = 0\n    for c in\
    \ string.unicodeScalars {\n        if c == substring {\n            count += 1\n\
    \        }\n    }\n    return count", "    var count = 0\n    for char in string.unicodeScalars\
    \ {\n        if char.value == substring.unicodeScalars.first {\n            count\
    \ += 1\n        }\n    }\n    return count", "    var count = 0\n    for c in\
    \ string.unicodeScalars {\n        if substring.unicodeScalars.contains(c) {\n\
    \            count += 1\n        }\n    }\n    return count", "    var count =\
    \ 0\n    for char in string {\n        if char == substring {\n            count\
    \ += 1\n        }\n    }\n    return count", "    var count = 0\n    for char\
    \ in string.characters {\n        if char == substring.characters[0] {\n     \
    \       count += how_many_times(string.substringWithRange(string[string.startIndex.advancedBy(count)..<string.endIndex]),\
    \ substring)\n        } else {\n            count += how_many_times(string.substringWithRange(string[string.startIndex.advancedBy(count)..<string.endIndex]),\
    \ substring)\n        }\n    }\n    return count", "    var count = 0\n    for\
    \ c in string.unicodeScalars {\n        if c == substring {\n            count\
    \ += 1\n        }\n    }\n    return count", "    var count = 0\n    for char\
    \ in string.unicodeScalars {\n        if char == substring {\n            count\
    \ += 1\n        }\n    }\n    return count", "    var count = 0\n    var start\
    \ = 0\n    var end = string.count\n    while start < end {\n        let index\
    \ = string.index(start, offsetBy: substring.count)\n        if index == nil {\n\
    \            return count\n        }\n        start = index!.advanced(by: substring.count)\n\
    \        count += 1\n    }\n    return count", "    var count = 0\n    for char\
    \ in string.characters {\n        if char == substring.characters[0] {\n     \
    \       count += 1\n        }\n        if char == substring.characters[substring.characters.count\
    \ - 1] {\n            count += 1\n        }\n    }\n    return count", "    var\
    \ count = 0\n    for char in string.unicodeScalars {\n        if char == substring\
    \ {\n            count += 1\n        }\n    }\n    return count", "    var count\
    \ = 0\n    var i = 0\n    var j = 0\n    while i < string.count {\n        j =\
    \ string.index(substring, i)\n        if j == nil {\n            break\n     \
    \   }\n        count = count + 1\n        i = j!.advanced(by: 1)\n    }\n    return\
    \ count", "    var count = 0\n    for char in string.characters {\n        if\
    \ char == substring {\n            count += 1\n        }\n    }\n    return count",
  "    var count = 0\n    for char in string {\n        if char == substring {\n \
    \           count += 1\n        }\n    }\n    return count", "    var count =\
    \ 0\n    for char in string {\n        if char == substring {\n            count\
    \ += 1\n        }\n    }\n    return count", "    var count = 0\n    for char\
    \ in string {\n        if char == substring {\n            count += 1\n      \
    \  }\n    }\n    return count", "    var count = 0\n    for char in string {\n\
    \        if char == substring {\n            count += 1\n        }\n    }\n  \
    \  return count", "    var count = 0\n    for char in string.characters {\n  \
    \      if char == substring.first {\n            count += 1\n            if char\
    \ == substring.last {\n                count += 1\n            }\n        }\n\
    \    }\n    return count", "    var count = 0\n    for char in string {\n    \
    \    if char == substring {\n            count += 1\n        }\n    }\n    return\
    \ count", "    var count = 0\n    var start = string.startIndex\n    var end =\
    \ string.endIndex\n    while start < end {\n        start = string.index(start,\
    \ offsetBy: substring.startIndex, limitedBy: end) ?? end\n        end = string.index(end,\
    \ offsetBy: substring.endIndex, limitedBy: start) ?? start\n        if start <\
    \ end {\n            count += 1\n        }\n    }\n    return count", "    var\
    \ count = 0\n    var start = 0\n    var end = string.count\n\n    while start\
    \ < end {\n        let index = string.index(start, offsetBy: substring.count)\n\
    \        if index == nil {\n            break\n        }\n        start = index!\n\
    \        count += 1\n    }\n    return count", "    var count = 0\n    for char\
    \ in string.characters {\n        if char == substring {\n            count +=\
    \ 1\n        }\n    }\n    return count"]
stop_tokens:
- "\n}"
