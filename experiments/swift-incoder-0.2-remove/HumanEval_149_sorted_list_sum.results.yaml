language: swift
name: HumanEval_149_sorted_list_sum
results:
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let result\
    \ = lst.filter{ $0.count % 2 == 1 }\n    let sortedResult = result.sorted(by:\
    \ { $0.count < $1.count })\n    return sortedResult\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpr75lmaqc/tmpr75lmaqc.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b6258cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b62283b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b62283988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b622827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr75lmaqc                        0x0000562244474766 <unavailable> + 5990

    5    libc.so.6                          0x00002b8b62778460 __libc_start_main +
    245

    6    tmpr75lmaqc                        0x00005622444742e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659979965
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpw1_ey2yk/tmpw1_ey2yk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4eb23e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4eb20deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4eb20de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4eb20dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw1_ey2yk                        0x000056485e159546 <unavailable> + 5446

    5    libc.so.6                          0x00002b4eb25d3460 __libc_start_main +
    245

    6    tmpw1_ey2yk                        0x000056485e1590c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659979965
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res: [String]\
    \ = []\n    for word in lst {\n        if res.contains(word) {\n            continue\n\
    \        }\n        res.append(word)\n    }\n    res.sort()\n    return res\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpg6vl_y5s/tmpg6vl_y5s.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b38007c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b37cfeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b37cfe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b37cfd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg6vl_y5s                        0x000055c732f3b896 <unavailable> + 6294

    5    libc.so.6                          0x00002b7b381f3460 __libc_start_main +
    245

    6    tmpg6vl_y5s                        0x000055c732f3b419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979965
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    var i = 0\n    for word in lst {\n        if i % 2 == 0 {\n\
    \            result.append(word)\n        }\n        i += 1\n    }\n    result.sort()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpk011ribr/tmpk011ribr.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1735f2ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1735c25b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1735c25988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1735c247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk011ribr                        0x0000563bd53f9916 <unavailable> + 6422

    5    libc.so.6                          0x00002b173611a460 __libc_start_main +
    245

    6    tmpk011ribr                        0x0000563bd53f9499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979965
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res: [String]\
    \ = []\n    for str in lst {\n        if res.contains(str) {\n            continue\n\
    \        }\n        res.append(str)\n    }\n    res.sortInPlace()\n    return\
    \ res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpkpqu5__g.swift:21:9: error: value of type '[String]' has no member\
    \ 'sortInPlace'\n    res.sortInPlace()\n    ~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979965
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.count < 2 {\n       \
    \     result.append(word)\n        } else if result.count == 2 {\n           \
    \ if word.length > result[0].count {\n                result[0] = word\n     \
    \       } else {\n                result[1] = word\n            }\n        } else\
    \ {\n            if word.length > result[0].count {\n                result[0]\
    \ = word\n            } else {\n                if word.length > result[1].count\
    \ {\n                    result[1] = word\n                } else {\n        \
    \            result[2] = word\n                }\n            }\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpoaxa0pme.swift:19:21: error: value of type 'String' has no member\
    \ 'length'\n            if word.length > result[0].count {\n               ~~~~\
    \ ^~~~~~\n/tmp/tmpoaxa0pme.swift:25:21: error: value of type 'String' has no member\
    \ 'length'\n            if word.length > result[0].count {\n               ~~~~\
    \ ^~~~~~\n/tmp/tmpoaxa0pme.swift:28:25: error: value of type 'String' has no member\
    \ 'length'\n                if word.length > result[1].count {\n             \
    \      ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659979965
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.contains(word) {\n  \
    \          continue\n        }\n        result.append(word)\n    }\n    for word\
    \ in result {\n        if word.characters.count % 2 == 1 {\n            result.remove(word)\n\
    \        }\n    }\n    result.sortInPlace({ $0.characters.count < $1.characters.count\
    \ })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp7g_c14ck.swift:22:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp7g_c14ck.swift:23:20:\
    \ error: no exact matches in call to instance method 'remove'\n            result.remove(word)\n\
    \                   ^\n/tmp/tmp7g_c14ck.swift:23:20: note: candidate expects value\
    \ of type 'Int' for parameter #1 (got 'String')\n            result.remove(word)\n\
    \                   ^\n/tmp/tmp7g_c14ck.swift:23:20: note: candidate expects value\
    \ of type 'Array<String>.Index' (aka 'Int') for parameter #1 (got 'String')\n\
    \            result.remove(word)\n                   ^\n/tmp/tmp7g_c14ck.swift:26:12:\
    \ error: value of type '[String]' has no member 'sortInPlace'\n    result.sortInPlace({\
    \ $0.characters.count < $1.characters.count })\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979965
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.count < 2 {\n       \
    \     result.append(word)\n        } else if word.count > result.last {\n    \
    \        result.append(word)\n        } else if word.count < result.last {\n \
    \           var i = result.last\n            while i < word.count {\n        \
    \        result.removeAtIndex(i)\n                i += 1\n            }\n    \
    \        result.append(word)\n        }\n    }\n    return result.sorted(by: {\
    \ (word1, word2) -> Bool in\n        return word1.count < word2.count\n    })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp_4886_6s.swift:18:30: error: type '((String) throws -> Bool) throws\
    \ -> String?' cannot conform to 'BinaryInteger'\n        } else if word.count\
    \ > result.last {\n                             ^\n/tmp/tmp_4886_6s.swift:18:30:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ protocols\n        } else if word.count > result.last {\n                  \
    \           ^\n/tmp/tmp_4886_6s.swift:18:30: note: required by operator function\
    \ '>' where 'Other' = '((String) throws -> Bool) throws -> String?'\n        }\
    \ else if word.count > result.last {\n                             ^\n/tmp/tmp_4886_6s.swift:20:30:\
    \ error: type '((String) throws -> Bool) throws -> String?' cannot conform to\
    \ 'BinaryInteger'\n        } else if word.count < result.last {\n            \
    \                 ^\n/tmp/tmp_4886_6s.swift:20:30: note: only concrete types such\
    \ as structs, enums and classes can conform to protocols\n        } else if word.count\
    \ < result.last {\n                             ^\n/tmp/tmp_4886_6s.swift:20:30:\
    \ note: required by operator function '<' where 'Other' = '((String) throws ->\
    \ Bool) throws -> String?'\n        } else if word.count < result.last {\n   \
    \                          ^\n/tmp/tmp_4886_6s.swift:22:19: error: cannot convert\
    \ value of type 'String?' to expected argument type 'Int'\n            while i\
    \ < word.count {\n                  ^\n/tmp/tmp_4886_6s.swift:23:24: error: value\
    \ of type '[String]' has no member 'removeAtIndex'\n                result.removeAtIndex(i)\n\
    \                ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmp_4886_6s.swift:24:19: error: binary\
    \ operator '+=' cannot be applied to operands of type 'String?' and 'Int'\n  \
    \              i += 1\n                ~ ^  ~\n"
  stdout: ''
  timestamp: 1659979965
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.contains(word) {\n  \
    \          continue\n        }\n        if word.characters.count % 2 == 1 {\n\
    \            result.insert(word, at: 0)\n        } else {\n            result.insert(word,\
    \ at: result.count)\n        }\n    }\n    return result.sorted(by: { (word1,\
    \ word2) -> Bool in\n        return word1.characters.count < word2.characters.count\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpz33bcesv.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpz33bcesv.swift:26:22:\
    \ error: 'characters' is unavailable: Please use String directly\n        return\
    \ word1.characters.count < word2.characters.count\n                     ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpz33bcesv.swift:26:47:\
    \ error: 'characters' is unavailable: Please use String directly\n        return\
    \ word1.characters.count < word2.characters.count\n                          \
    \                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659979965
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.count < 2 {\n       \
    \     result.append(word)\n        } else if result.count > 2 {\n            if\
    \ word.count < result[0].count {\n                result.append(word)\n      \
    \      } else {\n                if word.count > result[1].count {\n         \
    \           result.append(word)\n                } else {\n                  \
    \  result[0] = word\n                }\n            }\n        } else {\n    \
    \        if word.count < result[0].count {\n                result.append(word)\n\
    \            } else {\n                result[0] = word\n            }\n     \
    \   }\n    }\n    return result.sorted(by: {$0.count > $1.count})\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpo9sx1f49/tmpo9sx1f49.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba155bc9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba1558c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba1558c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba1558bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9sx1f49                        0x0000561d4e039926 <unavailable> + 6438

    5    libc.so.6                          0x00002ba155db5460 __libc_start_main +
    245

    6    tmpo9sx1f49                        0x0000561d4e0394a9 <unavailable> + 5289

    '
  stdout: ''
  timestamp: 1659979965
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst2 =\
    \ lst\n    lst2.sort { ($0.length < $1.length) ? true : false }\n    return lst2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpjhjcdprg.swift:15:21: error: value of type 'String' has no member\
    \ 'length'\n    lst2.sort { ($0.length < $1.length) ? true : false }\n       \
    \          ~~ ^~~~~~\n/tmp/tmpjhjcdprg.swift:15:33: error: value of type 'String'\
    \ has no member 'length'\n    lst2.sort { ($0.length < $1.length) ? true : false\
    \ }\n                             ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659979965
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst2 =\
    \ []\n    for word in lst {\n        if lst2.contains(word) {\n            lst2.remove(word)\n\
    \        } else {\n            lst2.append(word)\n        }\n    }\n    lst2.sort()\n\
    \    return lst2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpxhovtx67.swift:14:16: error: empty collection literal requires\
    \ an explicit type\n    var lst2 = []\n               ^~\n/tmp/tmpxhovtx67.swift:16:26:\
    \ error: missing argument label 'where:' in call\n        if lst2.contains(word)\
    \ {\n                         ^\n                         where: \n/tmp/tmpxhovtx67.swift:16:26:\
    \ error: cannot convert value of type 'String' to expected argument type '(Any)\
    \ throws -> Bool'\n        if lst2.contains(word) {\n                        \
    \ ^\n/tmp/tmpxhovtx67.swift:17:18: error: no exact matches in call to instance\
    \ method 'remove'\n            lst2.remove(word)\n                 ^\n/tmp/tmpxhovtx67.swift:17:18:\
    \ note: candidate expects value of type 'Int' for parameter #1 (got 'String')\n\
    \            lst2.remove(word)\n                 ^\n/tmp/tmpxhovtx67.swift:17:18:\
    \ note: candidate expects value of type 'Array<Any>.Index' (aka 'Int') for parameter\
    \ #1 (got 'String')\n            lst2.remove(word)\n                 ^\n/tmp/tmpxhovtx67.swift:22:5:\
    \ error: type 'Any' cannot conform to 'Comparable'\n    lst2.sort()\n    ^\n/tmp/tmpxhovtx67.swift:22:5:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ protocols\n    lst2.sort()\n    ^\n/tmp/tmpxhovtx67.swift:22:5: note: required\
    \ by referencing instance method 'sort()' on 'MutableCollection' where 'Self.Element'\
    \ = 'Any'\n    lst2.sort()\n    ^\n/tmp/tmpxhovtx67.swift:23:12: error: cannot\
    \ convert return expression of type '[Any]' to return type '[String]'\n    return\
    \ lst2\n           ^\n/tmp/tmpxhovtx67.swift:23:12: note: arguments to generic\
    \ parameter 'Element' ('Any' and 'String') are expected to be equal\n    return\
    \ lst2\n           ^\n"
  stdout: ''
  timestamp: 1659979965
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.count < 2 {\n       \
    \     result.append(word)\n        } else {\n            if word.count < result[0].count\
    \ {\n                result[0] = word\n            } else {\n                if\
    \ word.count > result[1].count {\n                    result[1] = word\n     \
    \           }\n            }\n        }\n    }\n    return result.sorted(by: {\
    \ (word1, word2) -> Bool in\n        return word1.count < word2.count\n    })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp3duexeri/tmp3duexeri.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3916763c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b391645ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b391645a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39164597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3duexeri                        0x00005604d17b2926 <unavailable> + 6438

    5    libc.so.6                          0x00002b391694f460 __libc_start_main +
    245

    6    tmp3duexeri                        0x00005604d17b24a9 <unavailable> + 5289

    '
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res: [String]\
    \ = []\n    for str in lst {\n        if res.contains(str) {\n            continue\n\
    \        }\n        res.append(str)\n    }\n    res.sort { (lhs, rhs) -> Bool\
    \ in\n        if lhs.count < rhs.count {\n            return true\n        }\n\
    \        if lhs.count == rhs.count {\n            return lhs.localizedCompare(rhs)\
    \ == .orderedAscending\n        }\n        return false\n    }\n    return res\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpnay0my8b.swift:26:24: error: value of type 'String' has no member\
    \ 'localizedCompare'\n            return lhs.localizedCompare(rhs) == .orderedAscending\n\
    \                   ~~~ ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979965
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst2 =\
    \ lst\n    lst2.sort { ($0.length, $1.length) }\n    lst2.sort { ($0 < $1) }\n\
    \    return lst2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpoa9wf2o7.swift:15:17: error: cannot convert value of type '(_,\
    \ _)' to closure result type 'Bool'\n    lst2.sort { ($0.length, $1.length) }\n\
    \                ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpoa9wf2o7.swift:15:21: error:\
    \ value of type 'String' has no member 'length'\n    lst2.sort { ($0.length, $1.length)\
    \ }\n                 ~~ ^~~~~~\n/tmp/tmpoa9wf2o7.swift:15:32: error: value of\
    \ type 'String' has no member 'length'\n    lst2.sort { ($0.length, $1.length)\
    \ }\n                            ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659979965
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.count < 2 {\n       \
    \     result.append(word)\n        } else if result.count == 2 {\n           \
    \ if word.count < result[0].count {\n                result[0] = word\n      \
    \      } else {\n                result[1] = word\n            }\n        } else\
    \ {\n            if word.count < result[0].count {\n                result[0]\
    \ = word\n            } else {\n                result[1] = word\n           \
    \ }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpcd89h7te/tmpcd89h7te.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a6e32dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a6e024b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2a6e024988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2a6e0237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcd89h7te                        0x000055cb9ce0f8b6 <unavailable> + 6326

    5    libc.so.6                          0x00002b2a6e519460 __libc_start_main +
    245

    6    tmpcd89h7te                        0x000055cb9ce0f439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.count < 2 {\n       \
    \     result.append(word)\n        } else if word.count > result.last {\n    \
    \        result.append(word)\n        } else if word.count < result.last {\n \
    \           for (index, word2) in result.enumerated() {\n                if word2.count\
    \ > word.count {\n                    result.remove(at: index)\n             \
    \       break\n                }\n            }\n        }\n    }\n    return\
    \ result.sorted(by: { $0.count > $1.count })\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmpaqo6ejfy.swift:18:30: error: type '((String) throws -> Bool) throws\
    \ -> String?' cannot conform to 'BinaryInteger'\n        } else if word.count\
    \ > result.last {\n                             ^\n/tmp/tmpaqo6ejfy.swift:18:30:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ protocols\n        } else if word.count > result.last {\n                  \
    \           ^\n/tmp/tmpaqo6ejfy.swift:18:30: note: required by operator function\
    \ '>' where 'Other' = '((String) throws -> Bool) throws -> String?'\n        }\
    \ else if word.count > result.last {\n                             ^\n/tmp/tmpaqo6ejfy.swift:20:30:\
    \ error: type '((String) throws -> Bool) throws -> String?' cannot conform to\
    \ 'BinaryInteger'\n        } else if word.count < result.last {\n            \
    \                 ^\n/tmp/tmpaqo6ejfy.swift:20:30: note: only concrete types such\
    \ as structs, enums and classes can conform to protocols\n        } else if word.count\
    \ < result.last {\n                             ^\n/tmp/tmpaqo6ejfy.swift:20:30:\
    \ note: required by operator function '<' where 'Other' = '((String) throws ->\
    \ Bool) throws -> String?'\n        } else if word.count < result.last {\n   \
    \                          ^\n"
  stdout: ''
  timestamp: 1659979965
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.contains(word) {\n  \
    \          continue\n        }\n        result.append(word)\n    }\n    result.sort\
    \ { $0.count < $1.count }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp9k19sbzs/tmp9k19sbzs.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b140eb35c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b140e82cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b140e82c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b140e82b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9k19sbzs                        0x000055bb1a790896 <unavailable> + 6294

    5    libc.so.6                          0x00002b140ed21460 __libc_start_main +
    245

    6    tmp9k19sbzs                        0x000055bb1a790419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979965
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpw1_ey2yk/tmpw1_ey2yk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4eb23e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4eb20deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4eb20de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4eb20dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw1_ey2yk                        0x000056485e159546 <unavailable> + 5446

    5    libc.so.6                          0x00002b4eb25d3460 __libc_start_main +
    245

    6    tmpw1_ey2yk                        0x000056485e1590c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659979965
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.contains(word) {\n  \
    \          continue\n        }\n        result.append(word)\n    }\n    result.sort\
    \ { $0.count < $1.count }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp9k19sbzs/tmp9k19sbzs.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b140eb35c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b140e82cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b140e82c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b140e82b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9k19sbzs                        0x000055bb1a790896 <unavailable> + 6294

    5    libc.so.6                          0x00002b140ed21460 __libc_start_main +
    245

    6    tmp9k19sbzs                        0x000055bb1a790419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979965
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst2 =\
    \ lst\n    for x in lst2 {\n        if lst2.count % 2 == 1 {\n            lst2.remove(x)\n\
    \        }\n    }\n    return lst2.sorted(by: {$0.count < $1.count})\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp420p0k5z.swift:17:18: error: no exact matches in call to instance\
    \ method 'remove'\n            lst2.remove(x)\n                 ^\n/tmp/tmp420p0k5z.swift:17:18:\
    \ note: candidate expects value of type 'Int' for parameter #1 (got 'String')\n\
    \            lst2.remove(x)\n                 ^\n/tmp/tmp420p0k5z.swift:17:18:\
    \ note: candidate expects value of type 'Array<String>.Index' (aka 'Int') for\
    \ parameter #1 (got 'String')\n            lst2.remove(x)\n                 ^\n"
  stdout: ''
  timestamp: 1659979965
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst2 =\
    \ lst\n    for x in lst2 {\n        if lst2.count > 1 {\n            for y in\
    \ lst2 {\n                if lst2.count > 2 {\n                    for z in lst2\
    \ {\n                        if lst2.count > 3 {\n                           \
    \ for w in lst2 {\n                                if lst2.count > 4 {\n     \
    \                               for v in lst2 {\n                            \
    \            if lst2.count > 5 {\n                                           \
    \ for u in lst2 {\n                                                if lst2.count\
    \ > 6 {\n                                                    for t in lst2 {\n\
    \                                                        if lst2.count > 7 {\n\
    \                                                            for s in lst2 {\n\
    \                                                                if lst2.count\
    \ > 8 {\n                                                                    for\
    \ r in lst2 {\n                                                              \
    \          if lst2.count > 9 {\n                                             \
    \                               for p in lst2 {\n                            \
    \                                                    if lst2.count > 10 {\n  \
    \                                                                            \
    \      for o in lst2 {\n                                                     \
    \                                   if lst2.count > 11 {\n                   \
    \                                                                         for\
    \ g in lst2 {\n                                                              \
    \                                  if lst2.count > 12 {\n                    \
    \                                                                            \
    \    for d in lst2 {\n                                                       \
    \                                                 if lst2.count > 13 {\n     \
    \                                                                            \
    \                           for c in lst2 {\n                                \
    \                                                                            \
    \    if lst2.count > 14 {\n                                                  \
    \                                                                  for b in lst2\
    \ {\n                                                                        \
    \                                                if lst2.count > 15 {\n      \
    \                                                                            \
    \                                          for a in lst2 {\n                 \
    \                                                                            \
    \                                                   if lst2.count > 16 {\n   \
    \                                                                            \
    \                                                     for n in lst2 {\n      \
    \                                                                            \
    \                                                      if lst2.count > 17 {\n\
    \                                                                            \
    \                                                                for m in lst2\
    \ {\n                                                                        \
    \                                                                        if lst2.count\
    \ > 18 {\n                                                                   \
    \                                                                            \
    \     for i in lst2 {\n                                                      \
    \                                                                            \
    \                      if lst2.count > 19 {\n                                \
    \                                                                            \
    \                                                for j in lst2 {\n           \
    \                                                                            \
    \                                                                         if lst2.count\
    \ > 20 {\n                                                                   \
    \                                                                            \
    \                     for h in lst2 {\n                                      \
    \                                                                            \
    \                                                      if lst2.count > 21 {\n\
    \                                                                            \
    \                                                                            \
    \                    for j in lst2 {\n                                       \
    \                                                                            \
    \                                                             if lst2.count >\
    \ 22 {\n                                                                     \
    \                                                                            \
    \                                   for j in lst2 {\n                        \
    \                                                                            \
    \                                                                            \
    \        if lst2.count > 23 {\n                                              \
    \                                                                            \
    \                                                                  for j in lst2\
    \ {\n                                                                        \
    \                                                                            \
    \                                                            if lst2.count > 24\
    \ {\n                                                                        \
    \                                                                            \
    \                                                for j in lst2 {\n           \
    \                                                                            \
    \                                                                            \
    \                                     if lst2.count > 25 {\n                 \
    \                                                                            \
    \                                                                            \
    \                                   for j in lst2 {\n                        \
    \                                                                            \
    \                                                                            \
    \                                if lst2.count > 26 {\n                      \
    \                                                                            \
    \                                                                            \
    \                      for j in lst2 {\n                                     \
    \                                                                            \
    \                                                                            \
    \                           if lst2.count > 27 {\n                           \
    \                                                                            \
    \                                                                            \
    \                     for j in lst2 {\n                                      \
    \                                                                            \
    \                                                                            \
    \                              if lst2.count > 28 {\n                        \
    \                                                                            \
    \                                                                            \
    \                                                for j in lst2 {\n           \
    \                                                                            \
    \                                                                            \
    \                                                                 if lst2.count\
    \ > 29 {\n                                                                   \
    \                                                                            \
    \                                                                            \
    \             for j in lst2 {\n                                              \
    \                                                                            \
    \                                                                            \
    \                                      if lst2.count > 30 \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp4ffk3ko8.swift:74:255: error: expected '{' after 'if' condition\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \        if lst2.count > 30 \n                                               \
    \                                                                            \
    \                                                                            \
    \                                                       ^\n/tmp/tmp4ffk3ko8.swift:96:91:\
    \ error: expected '}' at end of brace statement\nassert(sorted_list_sum(lst: [\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    \                                                                            \
    \              ^\n/tmp/tmp4ffk3ko8.swift:72:248: note: to match this opening '{'\n\
    \                                                                            \
    \                                                                            \
    \                                                                            if\
    \ lst2.count > 29 {\n                                                        \
    \                                                                            \
    \                                                                            \
    \                                       ^\n/tmp/tmp4ffk3ko8.swift:96:91: error:\
    \ expected '}' at end of brace statement\nassert(sorted_list_sum(lst: [\"aaaa\"\
    , \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n      \
    \                                                                            \
    \        ^\n/tmp/tmp4ffk3ko8.swift:71:239: note: to match this opening '{'\n \
    \                                                                            \
    \                                                                            \
    \                                                                       for j\
    \ in lst2 {\n                                                                \
    \                  "
  stdout: ''
  timestamp: 1659979965
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var newlst\
    \ = [String]()\n    for word in lst {\n        if newlst.count < 2 {\n       \
    \     newlst.append(word)\n        } else if newlst.count > 2 {\n            if\
    \ newlst[newlst.count - 1].length < word.length {\n                newlst.append(word)\n\
    \            } else {\n                newlst[newlst.count - 1] = word\n     \
    \       }\n        } else {\n            if newlst[newlst.count - 1].length <\
    \ word.length {\n                newlst.append(word)\n            }\n        }\n\
    \    }\n    return newlst.sorted(by: {$0.length < $1.length})\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpwqxgjp2l.swift:19:55: error: value of type 'String' has no member\
    \ 'length'\n            if newlst[newlst.count - 1].length < word.length {\n \
    \                                                ~~~~ ^~~~~~\n/tmp/tmpwqxgjp2l.swift:19:41:\
    \ error: value of type 'String' has no member 'length'\n            if newlst[newlst.count\
    \ - 1].length < word.length {\n               ~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~\n\
    /tmp/tmpwqxgjp2l.swift:25:55: error: value of type 'String' has no member 'length'\n\
    \            if newlst[newlst.count - 1].length < word.length {\n            \
    \                                     ~~~~ ^~~~~~\n/tmp/tmpwqxgjp2l.swift:25:41:\
    \ error: value of type 'String' has no member 'length'\n            if newlst[newlst.count\
    \ - 1].length < word.length {\n               ~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~\n\
    /tmp/tmpwqxgjp2l.swift:30:34: error: value of type 'String' has no member 'length'\n\
    \    return newlst.sorted(by: {$0.length < $1.length})\n                     \
    \         ~~ ^~~~~~\n/tmp/tmpwqxgjp2l.swift:30:46: error: value of type 'String'\
    \ has no member 'length'\n    return newlst.sorted(by: {$0.length < $1.length})\n\
    \                                          ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659979965
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.count < 2 {\n       \
    \     result.append(word)\n        } else {\n            if word.count > result[0].count\
    \ {\n                result.append(word)\n            } else {\n             \
    \   if word.count < result[1].count {\n                    result[0] = word\n\
    \                } else {\n                    result[1] = word\n            \
    \    }\n            }\n        }\n    }\n    return result.sorted(by: { (word1,\
    \ word2) -> Bool in\n        return word1.count < word2.count\n    })\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpacsx6h6m/tmpacsx6h6m.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b62c6b06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b62c67fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b62c67fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62c67fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpacsx6h6m                        0x0000556727d69926 <unavailable> + 6438

    5    libc.so.6                          0x00002b62c6cf2460 __libc_start_main +
    245

    6    tmpacsx6h6m                        0x0000556727d694a9 <unavailable> + 5289

    '
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.contains(word) {\n  \
    \          continue\n        }\n        result.append(word)\n    }\n    result.sort(by:\
    \ { (word1, word2) -> Bool in\n        let word1Len = word1.characters.count\n\
    \        let word2Len = word2.characters.count\n        return word1Len < word2Len\n\
    \    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpugnmqvj9.swift:22:30: error: 'characters' is unavailable: Please\
    \ use String directly\n        let word1Len = word1.characters.count\n       \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpugnmqvj9.swift:23:30: error: 'characters' is unavailable: Please\
    \ use String directly\n        let word2Len = word2.characters.count\n       \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659979965
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.count < 2 {\n       \
    \     result.append(word)\n        } else if word.count > result.last {\n    \
    \        result.append(word)\n        } else if word.count < result.last {\n \
    \           if word.count < result.last {\n                result.removeLast()\n\
    \            }\n            result.insert(word.count, word)\n        }\n    }\n\
    \    return result.sorted(by: {$0.count > $1.count})\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpb4wdx2bt.swift:18:30: error: type '((String) throws -> Bool) throws\
    \ -> String?' cannot conform to 'BinaryInteger'\n        } else if word.count\
    \ > result.last {\n                             ^\n/tmp/tmpb4wdx2bt.swift:18:30:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ protocols\n        } else if word.count > result.last {\n                  \
    \           ^\n/tmp/tmpb4wdx2bt.swift:18:30: note: required by operator function\
    \ '>' where 'Other' = '((String) throws -> Bool) throws -> String?'\n        }\
    \ else if word.count > result.last {\n                             ^\n/tmp/tmpb4wdx2bt.swift:20:30:\
    \ error: type '((String) throws -> Bool) throws -> String?' cannot conform to\
    \ 'BinaryInteger'\n        } else if word.count < result.last {\n            \
    \                 ^\n/tmp/tmpb4wdx2bt.swift:20:30: note: only concrete types such\
    \ as structs, enums and classes can conform to protocols\n        } else if word.count\
    \ < result.last {\n                             ^\n/tmp/tmpb4wdx2bt.swift:20:30:\
    \ note: required by operator function '<' where 'Other' = '((String) throws ->\
    \ Bool) throws -> String?'\n        } else if word.count < result.last {\n   \
    \                          ^\n/tmp/tmpb4wdx2bt.swift:21:27: error: type '((String)\
    \ throws -> Bool) throws -> String?' cannot conform to 'BinaryInteger'\n     \
    \       if word.count < result.last {\n                          ^\n/tmp/tmpb4wdx2bt.swift:21:27:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ protocols\n            if word.count < result.last {\n                     \
    \     ^\n/tmp/tmpb4wdx2bt.swift:21:27: note: required by operator function '<'\
    \ where 'Other' = '((String) throws -> Bool) throws -> String?'\n            if\
    \ word.count < result.last {\n                          ^\n/tmp/tmpb4wdx2bt.swift:24:26:\
    \ error: missing argument labels 'contentsOf:at:' in call\n            result.insert(word.count,\
    \ word)\n                         ^\n                          contentsOf: at:\
    \ \n"
  stdout: ''
  timestamp: 1659979966
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst2 =\
    \ lst\n    lst2.sort { $0.count < $1.count }\n    lst2.sort { $0 < $1 }\n    return\
    \ lst2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpptkygisp/tmpptkygisp.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e7ab7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e7a872b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6e7a872988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6e7a8717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpptkygisp                        0x0000558bd314d676 <unavailable> + 5750

    5    libc.so.6                          0x00002b6e7ad67460 __libc_start_main +
    245

    6    tmpptkygisp                        0x0000558bd314d1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979966
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = lst\n    for i in 0..<result.count {\n        for j in i+1..<result.count\
    \ {\n            if result[i].count > result[j].count {\n                let temp\
    \ = result[i]\n                result[i] = result[j]\n                result[j]\
    \ = temp\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp_ngu0vor/tmp_ngu0vor.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b081d150c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b081ce47b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b081ce47988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b081ce467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_ngu0vor                        0x00005643c1c9d826 <unavailable> + 6182

    5    libc.so.6                          0x00002b081d33c460 __libc_start_main +
    245

    6    tmp_ngu0vor                        0x00005643c1c9d3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.count < 2 {\n       \
    \     result.append(word)\n        } else if word.count > result.last {\n    \
    \        result.append(word)\n        } else {\n            var found = false\n\
    \            for (index, word2) in result.enumerated() {\n                if word2.count\
    \ == word.count {\n                    result.remove(at: index)\n            \
    \        result.append(word)\n                    found = true\n             \
    \       break\n                }\n            }\n            if !found {\n   \
    \             result.append(word)\n            }\n        }\n    }\n    return\
    \ result.sorted(by: { $0.count < $1.count })\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3t0iqjr3.swift:18:30: error: type '((String) throws -> Bool) throws\
    \ -> String?' cannot conform to 'BinaryInteger'\n        } else if word.count\
    \ > result.last {\n                             ^\n/tmp/tmp3t0iqjr3.swift:18:30:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ protocols\n        } else if word.count > result.last {\n                  \
    \           ^\n/tmp/tmp3t0iqjr3.swift:18:30: note: required by operator function\
    \ '>' where 'Other' = '((String) throws -> Bool) throws -> String?'\n        }\
    \ else if word.count > result.last {\n                             ^\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var new_lst\
    \ = [String]()\n    for word in lst {\n        if new_lst.contains(word) {\n \
    \           continue\n        }\n        let count = new_lst.filter{$0.contains(word)}.count\n\
    \        if count % 2 == 0 {\n            new_lst.append(word)\n        } else\
    \ {\n            new_lst = sorted(new_lst)\n        }\n    }\n    return sorted(new_lst)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpyct_soij.swift:23:23: error: cannot find 'sorted' in scope\n  \
    \          new_lst = sorted(new_lst)\n                      ^~~~~~\n/tmp/tmpyct_soij.swift:26:12:\
    \ error: cannot find 'sorted' in scope\n    return sorted(new_lst)\n         \
    \  ^~~~~~\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res: [String]\
    \ = []\n    for word in lst {\n        if res.contains(word) {\n            continue\n\
    \        }\n        res.append(word)\n    }\n    res.sort { $0.count < $1.count\
    \ }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpk5qxl6cd/tmpk5qxl6cd.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b02c3a3fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02c3736b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02c3736988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02c37357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk5qxl6cd                        0x000055c64ec05846 <unavailable> + 6214

    5    libc.so.6                          0x00002b02c3c2b460 __libc_start_main +
    245

    6    tmpk5qxl6cd                        0x000055c64ec053c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659979966
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpw1_ey2yk/tmpw1_ey2yk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4eb23e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4eb20deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4eb20de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4eb20dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw1_ey2yk                        0x000056485e159546 <unavailable> + 5446

    5    libc.so.6                          0x00002b4eb25d3460 __libc_start_main +
    245

    6    tmpw1_ey2yk                        0x000056485e1590c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659979965
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.contains(word) {\n  \
    \          continue\n        }\n        let length = word.characters.count\n \
    \       if length % 2 == 1 {\n            result.insert(word, at: 0)\n       \
    \ } else {\n            result.insert(word, at: result.count - 1)\n        }\n\
    \    }\n    return result.sorted(by: { $0.characters.count < $1.characters.count\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\"\
    , \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp2e_xl5ia.swift:19:27: error: 'characters' is unavailable: Please\
    \ use String directly\n        let length = word.characters.count\n          \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp2e_xl5ia.swift:26:35: error: 'characters' is unavailable: Please\
    \ use String directly\n    return result.sorted(by: { $0.characters.count < $1.characters.count\
    \ })\n                                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp2e_xl5ia.swift:26:57: error: 'characters' is unavailable:\
    \ Please use String directly\n    return result.sorted(by: { $0.characters.count\
    \ < $1.characters.count })\n                                                 \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let sortedList\
    \ = lst.sorted(by: { (word1, word2) -> Bool in\n        let word1Length = word1.count\n\
    \        let word2Length = word2.count\n        return word1Length < word2Length\n\
    \    })\n    return sortedList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp7jnt28lx/tmp7jnt28lx.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5701103c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5700dfab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5700dfa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5700df97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7jnt28lx                        0x0000563664f79606 <unavailable> + 5638

    5    libc.so.6                          0x00002b57012ef460 __libc_start_main +
    245

    6    tmp7jnt28lx                        0x0000563664f79189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res = lst\n\
    \    for i in 0..<res.count {\n        if res[i].count % 2 == 1 {\n          \
    \  res[i] = res[i] + res[i]\n            res.removeAtIndex(i)\n        }\n   \
    \ }\n    return res.sorted(by: { $0.count < $1.count })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp1f0objnw.swift:18:17: error: value of type '[String]' has no member\
    \ 'removeAtIndex'\n            res.removeAtIndex(i)\n            ~~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var newList\
    \ = lst\n    newList.sort { $0.count < $1.count }\n    newList.sort { $0 < $1\
    \ }\n    return newList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp7cxj7k2l/tmp7cxj7k2l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b71642efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7163fe6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7163fe6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7163fe57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7cxj7k2l                        0x000056245d87f676 <unavailable> + 5750

    5    libc.so.6                          0x00002b71644db460 __libc_start_main +
    245

    6    tmp7cxj7k2l                        0x000056245d87f1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.count < 2 {\n       \
    \     result.append(word)\n        } else {\n            if word.count > result[result.count\
    \ - 1].count {\n                result.append(word)\n            } else {\n  \
    \              let index = result.index(of: word)\n                result.remove(at:\
    \ index)\n                result.append(word)\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp_62ws3nj.swift:22:36: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n                let index = result.index(of: word)\n \
    \                                  ^\n/tmp/tmp_62ws3nj.swift:22:36: note: use\
    \ 'firstIndex(of:)' instead\n                let index = result.index(of: word)\n\
    \                                   ^~~~~\n                                  \
    \ firstIndex\n/tmp/tmp_62ws3nj.swift:23:35: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n                result.remove(at: index)\n                    \
    \              ^\n/tmp/tmp_62ws3nj.swift:22:21: note: short-circuit using 'guard'\
    \ to exit this function early if the optional value contains 'nil'\n         \
    \       let index = result.index(of: word)\n                    ^\n          \
    \      guard                              else { return <#default value#> }\n\
    /tmp/tmp_62ws3nj.swift:22:36: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n                let index = result.index(of:\
    \ word)\n                                   ^\n                              \
    \                     ?? <#default value#>\n/tmp/tmp_62ws3nj.swift:22:36: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \                let index = result.index(of: word)\n                        \
    \           ^\n                                                  !\n/tmp/tmp_62ws3nj.swift:23:35:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                        ?? <#default value#>\n/tmp/tmp_62ws3nj.swift:23:35:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                       !\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res: [String]\
    \ = []\n    for str in lst {\n        if res.contains(str) {\n            continue\n\
    \        }\n        let len = str.count\n        if len % 2 == 1 {\n         \
    \   res.append(str)\n            continue\n        }\n        let mid = len /\
    \ 2\n        let left = str.prefix(mid)\n        let right = str.suffix(mid)\n\
    \        if left < right {\n            res.append(left)\n        } else {\n \
    \           res.append(right)\n        }\n    }\n    res.sort()\n    return res\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpsw4ydztu.swift:28:17: error: no exact matches in call to instance\
    \ method 'append'\n            res.append(left)\n                ^\nSwift.Array:6:37:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'String.SubSequence'\
    \ (aka 'Substring'))\n    @inlinable public mutating func append(_ newElement:\
    \ __owned Element)\n                                    ^\nSwift.RangeReplaceableCollection:4:37:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'String.SubSequence'\
    \ (aka 'Substring'))\n    @inlinable public mutating func append(_ newElement:\
    \ __owned Self.Element)\n                                    ^\n/tmp/tmpsw4ydztu.swift:28:17:\
    \ note: found candidate with type '(__owned String.SubSequence) -> ()' (aka '(__owned\
    \ Substring) -> ()')\n            res.append(left)\n                ^\n/tmp/tmpsw4ydztu.swift:30:17:\
    \ error: no exact matches in call to instance method 'append'\n            res.append(right)\n\
    \                ^\nSwift.Array:6:37: note: candidate expects value of type 'String'\
    \ for parameter #1 (got 'String.SubSequence' (aka 'Substring'))\n    @inlinable\
    \ public mutating func append(_ newElement: __owned Element)\n               \
    \                     ^\nSwift.RangeReplaceableCollection:4:37: note: candidate\
    \ expects value of type 'String' for parameter #1 (got 'String.SubSequence' (aka\
    \ 'Substring'))\n    @inlinable public mutating func append(_ newElement: __owned\
    \ Self.Element)\n                                    ^\n/tmp/tmpsw4ydztu.swift:30:17:\
    \ note: found candidate with type '(__owned String.SubSequence) -> ()' (aka '(__owned\
    \ Substring) -> ()')\n            res.append(right)\n                ^\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.count < 2 {\n       \
    \     result.append(word)\n        } else {\n            if word.count > result[result.count\
    \ - 1].count {\n                result.append(word)\n            } else {\n  \
    \              let index = result.index(of: word)\n                result.remove(at:\
    \ index)\n                result.append(word)\n            }\n        }\n    }\n\
    \    return result.sorted(by: { (word1, word2) -> Bool in\n        return word1.count\
    \ < word2.count\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmph8x50d6d.swift:22:36: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n                let index = result.index(of: word)\n \
    \                                  ^\n/tmp/tmph8x50d6d.swift:22:36: note: use\
    \ 'firstIndex(of:)' instead\n                let index = result.index(of: word)\n\
    \                                   ^~~~~\n                                  \
    \ firstIndex\n/tmp/tmph8x50d6d.swift:23:35: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n                result.remove(at: index)\n                    \
    \              ^\n/tmp/tmph8x50d6d.swift:22:21: note: short-circuit using 'guard'\
    \ to exit this function early if the optional value contains 'nil'\n         \
    \       let index = result.index(of: word)\n                    ^\n          \
    \      guard                              else { return <#default value#> }\n\
    /tmp/tmph8x50d6d.swift:22:36: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n                let index = result.index(of:\
    \ word)\n                                   ^\n                              \
    \                     ?? <#default value#>\n/tmp/tmph8x50d6d.swift:22:36: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \                let index = result.index(of: word)\n                        \
    \           ^\n                                                  !\n/tmp/tmph8x50d6d.swift:23:35:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                        ?? <#default value#>\n/tmp/tmph8x50d6d.swift:23:35:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                       !\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var new_lst\
    \ = [String]()\n    for str in lst {\n        if new_lst.contains(str) {\n   \
    \         continue\n        }\n        new_lst.insert(str, at: 0)\n    }\n   \
    \ new_lst.sort { $0.count < $1.count }\n    return new_lst\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpko38iafn/tmpko38iafn.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ea00a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e9fd98b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e9fd98988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e9fd977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko38iafn                        0x000055fd0fc83896 <unavailable> + 6294

    5    libc.so.6                          0x00002b3ea028d460 __libc_start_main +
    245

    6    tmpko38iafn                        0x000055fd0fc83419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.contains(word) {\n  \
    \          continue\n        }\n        if result.count % 2 == 0 {\n         \
    \   result.append(word)\n            continue\n        }\n        if word.count\
    \ % 2 == 0 {\n            result.append(word)\n            continue\n        }\n\
    \        if word.count % 3 == 0 {\n            result.append(word)\n         \
    \   continue\n        }\n        if word.count % 5 == 0 {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count % 7 == 0 {\n         \
    \   result.append(word)\n            continue\n        }\n        if word.count\
    \ % 11 == 0 {\n            result.append(word)\n            continue\n       \
    \ }\n        if word.count % 13 == 0 {\n            result.append(word)\n    \
    \        continue\n        }\n        if word.count % 17 == 0 {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count % 19 == 0 {\n        \
    \    result.append(word)\n            continue\n        }\n        if word.count\
    \ % 23 == 0 {\n            result.append(word)\n            continue\n       \
    \ }\n        if word.count % 25 == 0 {\n            result.append(word)\n    \
    \        continue\n        }\n        if word.count % 29 == 0 {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count % 31 == 0 {\n        \
    \    result.append(word)\n            continue\n        }\n        if word.count\
    \ % 33 == 0 {\n            result.append(word)\n            continue\n       \
    \ }\n        if word.count % 35 == 0 {\n            result.append(word)\n    \
    \        continue\n        }\n        if word.count % 37 == 0 {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count % 39 == 0 {\n        \
    \    result.append(word)\n            continue\n        }\n        if word.count\
    \ % 41 == 0 {\n            result.append(word)\n            continue\n       \
    \ }\n        if word.count % 43 == 0 {\n            result.append(word)\n    \
    \        continue\n        }\n        if word.count % 45 == 0 {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count % 47 == 0 {\n        \
    \    result.append(word)\n            continue\n        }\n        if word.count\
    \ % 49 == 0 {\n            result.append(word)\n            continue\n       \
    \ }\n        if word.count % 51 == 0 {\n            result.append(word)\n    \
    \        continue\n        }\n        if word.count % 53 == 0 {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count % 55 == 0 {\n        \
    \    result.append(word)\n            continue\n        }\n        if word.count\
    \ % 57 == 0 {\n            result.append(word)\n            continue\n       \
    \ }\n        if word.count % 59 == 0 {\n            result.append(word)\n    \
    \        continue\n        }\n        if word.count % 61 == 0 {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count % 63 == 0 {\n        \
    \    result.append(word)\n            continue\n        }\n        if word.count\
    \ % 65 == 0 {\n            result.append(word)\n            continue\n       \
    \ }\n        if word.count % 67 == 0 {\n            result.append(word)\n\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmplyfue8hq.swift:163:91: error: expected '}' at end of brace statement\n\
    assert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\",\
    \ \"dd\", \"aaaa\", \"bbbb\"])\n                                             \
    \                                             ^\n/tmp/tmplyfue8hq.swift:15:21:\
    \ note: to match this opening '{'\n    for word in lst {\n                   \
    \ ^\n/tmp/tmplyfue8hq.swift:163:91: error: expected '}' at end of brace statement\n\
    assert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\",\
    \ \"dd\", \"aaaa\", \"bbbb\"])\n                                             \
    \                                             ^\n/tmp/tmplyfue8hq.swift:13:49:\
    \ note: to match this opening '{'\nfunc sorted_list_sum(lst: [String]) -> [String]\
    \ {\n                                                ^\n/tmp/tmplyfue8hq.swift:145:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.contains(word) {\n  \
    \          continue\n        }\n        let length = word.characters.count\n \
    \       if length % 2 == 1 {\n            result.insert(word, at: 0)\n       \
    \ } else {\n            result.insert(word, at: result.count - 1)\n        }\n\
    \    }\n    return result.sorted(by: { (word1, word2) -> Bool in\n        let\
    \ length1 = word1.characters.count\n        let length2 = word2.characters.count\n\
    \        return length1 < length2\n    })\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmpjjji1hw1.swift:19:27: error: 'characters' is unavailable: Please\
    \ use String directly\n        let length = word.characters.count\n          \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpjjji1hw1.swift:27:29: error: 'characters' is unavailable: Please\
    \ use String directly\n        let length1 = word1.characters.count\n        \
    \                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpjjji1hw1.swift:28:29: error: 'characters' is unavailable: Please\
    \ use String directly\n        let length2 = word2.characters.count\n        \
    \                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.count < 2 {\n       \
    \     result.append(word)\n        } else {\n            if word.count > result[0].count\
    \ {\n                result.append(word)\n            } else {\n             \
    \   if word.count < result[1].count {\n                    result[0] = word\n\
    \                } else {\n                    result[1] = word\n            \
    \    }\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmprrof9o9y/tmprrof9o9y.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a00e47c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a00b3eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a00b3e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a00b3d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprrof9o9y                        0x000055656f4648b6 <unavailable> + 6326

    5    libc.so.6                          0x00002b6a01033460 __libc_start_main +
    245

    6    tmprrof9o9y                        0x000055656f464439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.count < 2 {\n       \
    \     result.append(word)\n        } else if word.count > result.last {\n    \
    \        result.append(word)\n        } else if word.count < result.last {\n \
    \           for index in 0..<result.last {\n                if word.count < result[index].count\
    \ {\n                    result[index] = word\n                    break\n   \
    \             }\n            }\n        }\n    }\n    return result.sorted(by:\
    \ { $0.count > $1.count })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp1rpuhw2n.swift:18:30: error: type '((String) throws -> Bool) throws\
    \ -> String?' cannot conform to 'BinaryInteger'\n        } else if word.count\
    \ > result.last {\n                             ^\n/tmp/tmp1rpuhw2n.swift:18:30:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ protocols\n        } else if word.count > result.last {\n                  \
    \           ^\n/tmp/tmp1rpuhw2n.swift:18:30: note: required by operator function\
    \ '>' where 'Other' = '((String) throws -> Bool) throws -> String?'\n        }\
    \ else if word.count > result.last {\n                             ^\n/tmp/tmp1rpuhw2n.swift:20:30:\
    \ error: type '((String) throws -> Bool) throws -> String?' cannot conform to\
    \ 'BinaryInteger'\n        } else if word.count < result.last {\n            \
    \                 ^\n/tmp/tmp1rpuhw2n.swift:20:30: note: only concrete types such\
    \ as structs, enums and classes can conform to protocols\n        } else if word.count\
    \ < result.last {\n                             ^\n/tmp/tmp1rpuhw2n.swift:20:30:\
    \ note: required by operator function '<' where 'Other' = '((String) throws ->\
    \ Bool) throws -> String?'\n        } else if word.count < result.last {\n   \
    \                          ^\n/tmp/tmp1rpuhw2n.swift:21:37: error: cannot convert\
    \ value of type 'String?' to expected argument type 'Int'\n            for index\
    \ in 0..<result.last {\n                                    ^\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.contains(word) {\n  \
    \          continue\n        }\n        let length = word.characters.count\n \
    \       if length % 2 == 1 {\n            result.append(word)\n            continue\n\
    \        }\n        let index = lst.index(of: word)\n        let word1 = lst[index!]\n\
    \        let word2 = lst[index! + 1]\n        let length = word1.characters.count\n\
    \        if length % 2 == 1 {\n            result.append(word1)\n            result.append(word2)\n\
    \            continue\n        }\n        if word1 < word2 {\n            result.append(word1)\n\
    \        } else {\n            result.append(word2)\n        }\n    }\n    return\
    \ result.sorted(by: { $0.characters.count < $1.characters.count })\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp4mkc5m3p.swift:19:27: error: 'characters' is unavailable: Please\
    \ use String directly\n        let length = word.characters.count\n          \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp4mkc5m3p.swift:24:25: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        let index = lst.index(of: word)\n            \
    \            ^\n/tmp/tmp4mkc5m3p.swift:24:25: note: use 'firstIndex(of:)' instead\n\
    \        let index = lst.index(of: word)\n                        ^~~~~\n    \
    \                    firstIndex\n/tmp/tmp4mkc5m3p.swift:27:28: error: 'characters'\
    \ is unavailable: Please use String directly\n        let length = word1.characters.count\n\
    \                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp4mkc5m3p.swift:27:13: error: invalid redeclaration\
    \ of 'length'\n        let length = word1.characters.count\n            ^\n/tmp/tmp4mkc5m3p.swift:19:13:\
    \ note: 'length' previously declared here\n        let length = word.characters.count\n\
    \            ^\n/tmp/tmp4mkc5m3p.swift:39:35: error: 'characters' is unavailable:\
    \ Please use String directly\n    return result.sorted(by: { $0.characters.count\
    \ < $1.characters.count })\n                                  ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp4mkc5m3p.swift:39:57: error: 'characters'\
    \ is unavailable: Please use String directly\n    return result.sorted(by: { $0.characters.count\
    \ < $1.characters.count })\n                                                 \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpw1_ey2yk/tmpw1_ey2yk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4eb23e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4eb20deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4eb20de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4eb20dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw1_ey2yk                        0x000056485e159546 <unavailable> + 5446

    5    libc.so.6                          0x00002b4eb25d3460 __libc_start_main +
    245

    6    tmpw1_ey2yk                        0x000056485e1590c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659979965
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for str in lst {\n        if result.contains(str) {\n    \
    \        continue\n        }\n        result.append(str)\n    }\n    for str in\
    \ result {\n        if str.count % 2 == 1 {\n            result.removeAll({ $0\
    \ == str })\n        }\n    }\n    return result.sorted(by: { (a, b) -> Bool in\n\
    \        if a.count > b.count {\n            return true\n        }\n        if\
    \ a.count < b.count {\n            return false\n        }\n        return a.compare(to:\
    \ b) == .orderedAscending\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp6j1z4gj1.swift:23:20: error: no exact matches in call to instance\
    \ method 'removeAll'\n            result.removeAll({ $0 == str })\n          \
    \         ^\nSwift.RangeReplaceableCollection:2:37: note: incorrect labels for\
    \ candidate (have: '(_:)', expected: '(where:)')\n    @inlinable public mutating\
    \ func removeAll(where shouldBeRemoved: (Self.Element) throws -> Bool) rethrows\n\
    \                                    ^\nSwift.RangeReplaceableCollection:2:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(where:)')\n\
    \    @inlinable public mutating func removeAll(where shouldBeRemoved: (Self.Element)\
    \ throws -> Bool) rethrows\n                                    ^\n/tmp/tmp6j1z4gj1.swift:33:18:\
    \ error: value of type 'String' has no member 'compare'\n        return a.compare(to:\
    \ b) == .orderedAscending\n               ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.count < 2 {\n       \
    \     result.append(word)\n            continue\n        }\n        if word.count\
    \ > result.last {\n            result.append(word)\n            continue\n   \
    \     }\n        if word.count < result.last {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count > result.last {\n    \
    \        result.append(word)\n            continue\n        }\n        if word.count\
    \ < result.last {\n            result.append(word)\n            continue\n   \
    \     }\n        if word.count > result.last {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count < result.last {\n    \
    \        result.append(word)\n            continue\n        }\n        if word.count\
    \ > result.last {\n            result.append(word)\n            continue\n   \
    \     }\n        if word.count < result.last {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count > result.last {\n    \
    \        result.append(word)\n            continue\n        }\n        if word.count\
    \ < result.last {\n            result.append(word)\n            continue\n   \
    \     }\n        if word.count > result.last {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count < result.last {\n    \
    \        result.append(word)\n            continue\n        }\n        if word.count\
    \ > result.last {\n            result.append(word)\n            continue\n   \
    \     }\n        if word.count < result.last {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count > result.last {\n    \
    \        result.append(word)\n            continue\n        }\n        if word.count\
    \ < result.last {\n            result.append(word)\n            continue\n   \
    \     }\n        if word.count > result.last {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count < result.last {\n    \
    \        result.append(word)\n            continue\n        }\n        if word.count\
    \ > result.last {\n            result.append(word)\n            continue\n   \
    \     }\n        if word.count < result.last {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count > result.last {\n    \
    \        result.append(word)\n            continue\n        }\n        if word.count\
    \ < result.last {\n            result.append(word)\n            continue\n   \
    \     }\n        if word.count > result.last {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count < result.last {\n    \
    \        result.append(word)\n            continue\n        }\n        if word.count\
    \ > result.last {\n            result.append(word)\n            continue\n   \
    \     }\n        if word.count < result.last {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count > result.last {\n    \
    \        result.append(word)\n            continue\n        }\n        if word.count\
    \ < result.last {\n            result.append(word)\n            continue\n   \
    \     }\n        if word.count > result.last {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count < result.last {\n    \
    \        result.append(word)\n            continue\n        }\n        if word.count\
    \ > result.\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmppbleetwk.swift:140:31: error: expected member name following '.'\n\
    \        if word.count > result.\n                              ^\n/tmp/tmppbleetwk.swift:140:32:\
    \ error: expected '{' after 'if' condition\n        if word.count > result.\n\
    \                               ^\n/tmp/tmppbleetwk.swift:162:91: error: expected\
    \ '}' at end of brace statement\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n                \
    \                                                                          ^\n\
    /tmp/tmppbleetwk.swift:13:49: note: to match this opening '{'\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n                                                ^\n\
    /tmp/tmppbleetwk.swift:20:23: error: type '((String) throws -> Bool) throws ->\
    \ String?' cannot conform to 'BinaryInteger'\n        if word.count > result.last\
    \ {\n                      ^\n/tmp/tmppbleetwk.swift:20:23: note: only concrete\
    \ types such as structs, enums and classes can conform to protocols\n        if\
    \ word.count > result.last {\n                      ^\n/tmp/tmppbleetwk.swift:20:23:\
    \ note: required by operator function '>' where 'Other' = '((String) throws ->\
    \ Bool) throws -> String?'\n        if word.count > result.last {\n          \
    \            ^\n/tmp/tmppbleetwk.swift:24:23: error: type '((String) throws ->\
    \ Bool) throws -> String?' cannot conform to 'BinaryInteger'\n        if word.count\
    \ < result.last {\n                      ^\n/tmp/tmppbleetwk.swift:24:23: note:\
    \ only concrete types such as structs, enums and classes can conform to protocols\n\
    \        if word.count < result.last {\n                      ^\n/tmp/tmppbleetwk.swift:24:23:\
    \ note: required by operator function '<' where 'Other' = '((String) throws ->\
    \ Bool) throws -> String?'\n        if word.count < result.last {\n          \
    \            ^\n/tmp/tmppbleetwk.swift:28:23: error: type '((String) throws ->\
    \ Bool) throws -> String?' cannot conform to 'BinaryInteger'\n        if word.count\
    \ > result.last {\n                      ^\n/tmp/tmppbleetwk.swift:28:23: note:\
    \ only concrete types "
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.count < 2 {\n       \
    \     result.append(word)\n        } else if word.count > result.last {\n    \
    \        result.append(word)\n        } else if word.count < result.last {\n \
    \           if word.count < result.last {\n                result.removeLast()\n\
    \            }\n            result.append(word)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpsbiy9wqf.swift:18:30: error: type '((String) throws -> Bool) throws\
    \ -> String?' cannot conform to 'BinaryInteger'\n        } else if word.count\
    \ > result.last {\n                             ^\n/tmp/tmpsbiy9wqf.swift:18:30:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ protocols\n        } else if word.count > result.last {\n                  \
    \           ^\n/tmp/tmpsbiy9wqf.swift:18:30: note: required by operator function\
    \ '>' where 'Other' = '((String) throws -> Bool) throws -> String?'\n        }\
    \ else if word.count > result.last {\n                             ^\n/tmp/tmpsbiy9wqf.swift:20:30:\
    \ error: type '((String) throws -> Bool) throws -> String?' cannot conform to\
    \ 'BinaryInteger'\n        } else if word.count < result.last {\n            \
    \                 ^\n/tmp/tmpsbiy9wqf.swift:20:30: note: only concrete types such\
    \ as structs, enums and classes can conform to protocols\n        } else if word.count\
    \ < result.last {\n                             ^\n/tmp/tmpsbiy9wqf.swift:20:30:\
    \ note: required by operator function '<' where 'Other' = '((String) throws ->\
    \ Bool) throws -> String?'\n        } else if word.count < result.last {\n   \
    \                          ^\n/tmp/tmpsbiy9wqf.swift:21:27: error: type '((String)\
    \ throws -> Bool) throws -> String?' cannot conform to 'BinaryInteger'\n     \
    \       if word.count < result.last {\n                          ^\n/tmp/tmpsbiy9wqf.swift:21:27:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ protocols\n            if word.count < result.last {\n                     \
    \     ^\n/tmp/tmpsbiy9wqf.swift:21:27: note: required by operator function '<'\
    \ where 'Other' = '((String) throws -> Bool) throws -> String?'\n            if\
    \ word.count < result.last {\n                          ^\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var newList\
    \ = lst\n    newList.sort { $0.count < $1.count }\n    newList.sort { $0 < $1\
    \ }\n    return newList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp7cxj7k2l/tmp7cxj7k2l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b71642efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7163fe6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7163fe6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7163fe57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7cxj7k2l                        0x000056245d87f676 <unavailable> + 5750

    5    libc.so.6                          0x00002b71644db460 __libc_start_main +
    245

    6    tmp7cxj7k2l                        0x000056245d87f1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res = lst\n\
    \    for i in 0..<res.count {\n        for j in i+1..<res.count {\n          \
    \  if res[i].characters.count == res[j].characters.count {\n                if\
    \ res[i].characters.count > res[j].characters.count {\n                    res[i],\
    \ res[j] = res[j], res[i]\n                }\n            }\n        }\n    }\n\
    \    return res.sorted(by: { $0.characters.count < $1.characters.count })\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpo8sfh9mu.swift:19:27: error: consecutive statements on a line must\
    \ be separated by ';'\n                    res[i], res[j] = res[j], res[i]\n \
    \                         ^\n                          ;\n/tmp/tmpo8sfh9mu.swift:19:27:\
    \ error: expected expression\n                    res[i], res[j] = res[j], res[i]\n\
    \                          ^\n/tmp/tmpo8sfh9mu.swift:17:23: error: 'characters'\
    \ is unavailable: Please use String directly\n            if res[i].characters.count\
    \ == res[j].characters.count {\n                      ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpo8sfh9mu.swift:17:50: error: 'characters'\
    \ is unavailable: Please use String directly\n            if res[i].characters.count\
    \ == res[j].characters.count {\n                                             \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpo8sfh9mu.swift:18:27:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \     if res[i].characters.count > res[j].characters.count {\n               \
    \           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpo8sfh9mu.swift:18:53: error: 'characters' is unavailable: Please use String\
    \ directly\n                if res[i].characters.count > res[j].characters.count\
    \ {\n                                                    ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpo8sfh9mu.swift:19:24: warning: subscript\
    \ is accessed but result is unused\n                    res[i], res[j] = res[j],\
    \ res[i]\n                    ~~~^~~\n/tmp/tmpo8sfh9mu.swift:24:32: error: 'characters'\
    \ is unavailable: Please use String directly\n    return res.sorted(by: { $0.characters.count\
    \ < $1.characters.count })\n                          "
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res = lst\n\
    \    for str in lst {\n        if str.count % 2 == 1 {\n            res.remove(at:\
    \ res.index(of: str))\n        }\n    }\n    res.sort()\n    return res\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp3mfo95t1.swift:17:32: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n            res.remove(at: res.index(of: str))\n              \
    \                 ^\n/tmp/tmp3mfo95t1.swift:17:32: note: coalesce using '??' to\
    \ provide a default when the optional value contains 'nil'\n            res.remove(at:\
    \ res.index(of: str))\n                               ^\n                    \
    \                          ?? <#default value#>\n/tmp/tmp3mfo95t1.swift:17:32:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            res.remove(at: res.index(of: str))\n                    \
    \           ^\n                                             !\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res = lst\n\
    \    for i in 0..<(res.count-1) {\n        let j = i+1\n        for j in 0..<(res.count-1)\
    \ {\n            if res[i].characters.count == res[j].characters.count {\n   \
    \             if res[i].characters.count > res[j].characters.count {\n       \
    \             res[i] = res[j]\n                    res[j] = res[i]\n         \
    \       }\n            }\n        }\n    }\n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpvtae1ttp.swift:18:23: error: 'characters' is unavailable: Please\
    \ use String directly\n            if res[i].characters.count == res[j].characters.count\
    \ {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpvtae1ttp.swift:18:50: error: 'characters' is unavailable:\
    \ Please use String directly\n            if res[i].characters.count == res[j].characters.count\
    \ {\n                                                 ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpvtae1ttp.swift:19:27: error: 'characters'\
    \ is unavailable: Please use String directly\n                if res[i].characters.count\
    \ > res[j].characters.count {\n                          ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpvtae1ttp.swift:19:53: error: 'characters'\
    \ is unavailable: Please use String directly\n                if res[i].characters.count\
    \ > res[j].characters.count {\n                                              \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpvtae1ttp.swift:16:13:\
    \ warning: initialization of immutable value 'j' was never used; consider replacing\
    \ with assignment to '_' or removing it\n        let j = i+1\n        ~~~~^\n\
    \        _\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res = lst\n\
    \    for word in lst {\n        if word.characters.count % 2 == 1 {\n        \
    \    res.remove(at: res.index(of: word))\n        }\n    }\n    return res.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp_1k5_1oy.swift:16:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp_1k5_1oy.swift:17:32:\
    \ error: value of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<String>.Index' (aka 'Int')\n        \
    \    res.remove(at: res.index(of: word))\n                               ^\n/tmp/tmp_1k5_1oy.swift:17:32:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            res.remove(at: res.index(of: word))\n                   \
    \            ^\n                                               ?? <#default value#>\n\
    /tmp/tmp_1k5_1oy.swift:17:32: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n            res.remove(at: res.index(of:\
    \ word))\n                               ^\n                                 \
    \             !\n/tmp/tmp_1k5_1oy.swift:20:32: error: 'characters' is unavailable:\
    \ Please use String directly\n    return res.sorted(by: { $0.characters.count\
    \ > $1.characters.count })\n                               ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp_1k5_1oy.swift:20:54: error: 'characters'\
    \ is unavailable: Please use String directly\n    return res.sorted(by: { $0.characters.count\
    \ > $1.characters.count })\n                                                 \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.count < 2 {\n       \
    \     result.append(word)\n        } else if word.count > result.last {\n    \
    \        result.append(word)\n        } else if word.count < result.last {\n \
    \           var last = result.last\n            for index in 0..<(word.count -\
    \ 1) {\n                if result[index].count < result[index + 1].count {\n \
    \                   last = index\n                }\n            }\n         \
    \   result[last] = word\n        }\n    }\n    result.sort { $0.count > $1.count\
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp0p8gt84n.swift:18:30: error: type '((String) throws -> Bool) throws\
    \ -> String?' cannot conform to 'BinaryInteger'\n        } else if word.count\
    \ > result.last {\n                             ^\n/tmp/tmp0p8gt84n.swift:18:30:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ protocols\n        } else if word.count > result.last {\n                  \
    \           ^\n/tmp/tmp0p8gt84n.swift:18:30: note: required by operator function\
    \ '>' where 'Other' = '((String) throws -> Bool) throws -> String?'\n        }\
    \ else if word.count > result.last {\n                             ^\n/tmp/tmp0p8gt84n.swift:20:30:\
    \ error: type '((String) throws -> Bool) throws -> String?' cannot conform to\
    \ 'BinaryInteger'\n        } else if word.count < result.last {\n            \
    \                 ^\n/tmp/tmp0p8gt84n.swift:20:30: note: only concrete types such\
    \ as structs, enums and classes can conform to protocols\n        } else if word.count\
    \ < result.last {\n                             ^\n/tmp/tmp0p8gt84n.swift:20:30:\
    \ note: required by operator function '<' where 'Other' = '((String) throws ->\
    \ Bool) throws -> String?'\n        } else if word.count < result.last {\n   \
    \                          ^\n/tmp/tmp0p8gt84n.swift:24:26: error: cannot assign\
    \ value of type 'Int' to type 'String?'\n                    last = index\n  \
    \                       ^\n/tmp/tmp0p8gt84n.swift:27:20: error: cannot convert\
    \ value of type 'String?' to expected argument type 'Int'\n            result[last]\
    \ = word\n                   ^\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = lst\n    for index in 0..<result.count {\n        if result[index].count %\
    \ 2 == 1 {\n            result.remove(at: index)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6a11ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6a0ec3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad6a0ec3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad6a0ec313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad6a0ec2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad6a0cc2fc3 <unavailable> + 188355

    6    tmpnb3lr0ix                        0x0000558e8129770c <unavailable> + 9996

    7    tmpnb3lr0ix                        0x0000558e8129672d <unavailable> + 5933

    8    libc.so.6                          0x00002ad6a13b8460 __libc_start_main +
    245

    9    tmpnb3lr0ix                        0x0000558e812963a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659979966
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res: [String]\
    \ = []\n    for str in lst {\n        if res.contains(str) {\n            continue\n\
    \        }\n        res.append(str)\n    }\n    res.sort()\n    return res\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpum417t3g/tmpum417t3g.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c165bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c162b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c162b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c162b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpum417t3g                        0x000055d7d91a9896 <unavailable> + 6294

    5    libc.so.6                          0x00002b1c167a9460 __libc_start_main +
    245

    6    tmpum417t3g                        0x000055d7d91a9419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979966
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.count < 2 {\n       \
    \     result.append(word)\n        } else if result.count == 2 {\n           \
    \ if word.count > result[0].count {\n                result[0] = word\n      \
    \      } else {\n                result[1] = word\n            }\n        } else\
    \ {\n            if word.count > result[0].count {\n                result[0]\
    \ = word\n            } else {\n                result[1] = word\n           \
    \ }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpczqr_u24/tmpczqr_u24.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeeb3f7ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeeb3c71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeeb3c71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeeb3c707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpczqr_u24                        0x0000556bb35178b6 <unavailable> + 6326

    5    libc.so.6                          0x00002aeeb4166460 __libc_start_main +
    245

    6    tmpczqr_u24                        0x0000556bb3517439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1659979966
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.count < 2 {\n       \
    \     result.append(word)\n        } else if result.count == 2 {\n           \
    \ if word.count < result[0].count {\n                result.append(word)\n   \
    \         } else {\n                result[0] = word\n            }\n        }\
    \ else {\n            if word.count < result[0].count {\n                result[0]\
    \ = word\n            } else {\n                result[1] = word\n           \
    \ }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpp4nabu9w/tmpp4nabu9w.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b77dbcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b77ab3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b77ab3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b77ab27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp4nabu9w                        0x000055dd288b38b6 <unavailable> + 6326

    5    libc.so.6                          0x00002b4b77fa8460 __libc_start_main +
    245

    6    tmpp4nabu9w                        0x000055dd288b3439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst2 =\
    \ lst\n    for word in lst2 {\n        if word.characters.count % 2 == 1 {\n \
    \           lst2.remove(word)\n        }\n    }\n    return lst2.sorted(by: {\
    \ (word1, word2) -> Bool in\n        let word1Length = word1.characters.count\n\
    \        let word2Length = word2.characters.count\n        return word1Length\
    \ < word2Length\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp_8o4tghh.swift:16:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp_8o4tghh.swift:17:18:\
    \ error: no exact matches in call to instance method 'remove'\n            lst2.remove(word)\n\
    \                 ^\n/tmp/tmp_8o4tghh.swift:17:18: note: candidate expects value\
    \ of type 'Int' for parameter #1 (got 'String')\n            lst2.remove(word)\n\
    \                 ^\n/tmp/tmp_8o4tghh.swift:17:18: note: candidate expects value\
    \ of type 'Array<String>.Index' (aka 'Int') for parameter #1 (got 'String')\n\
    \            lst2.remove(word)\n                 ^\n/tmp/tmp_8o4tghh.swift:21:33:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ word1Length = word1.characters.count\n                                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp_8o4tghh.swift:22:33:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ word2Length = word2.characters.count\n                                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.contains(word) {\n  \
    \          continue\n        }\n        result.append(word)\n    }\n    result.sort(by:\
    \ { (word1, word2) -> Bool in\n        if word1.count < word2.count {\n      \
    \      return true\n        }\n        if word1.count > word2.count {\n      \
    \      return false\n        }\n        return word1 < word2\n    })\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmplqaz3trn/tmplqaz3trn.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2195c93c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b219598ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b219598a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21959897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplqaz3trn                        0x0000564bebee58e6 <unavailable> + 6374

    5    libc.so.6                          0x00002b2195e7f460 __libc_start_main +
    245

    6    tmplqaz3trn                        0x0000564bebee5469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659979966
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res: [String]\
    \ = []\n    for str in lst {\n        if res.contains(str) {\n            continue\n\
    \        }\n        res.append(str)\n    }\n    res.sort { $0.count < $1.count\
    \ }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp_hlrxaac/tmp_hlrxaac.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec1a693c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec1a38ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec1a38a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec1a3897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_hlrxaac                        0x0000563e9341a846 <unavailable> + 6214

    5    libc.so.6                          0x00002aec1a87f460 __libc_start_main +
    245

    6    tmp_hlrxaac                        0x0000563e9341a3c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let sorted\
    \ = lst.sorted()\n    var sum = 0\n    for str in sorted {\n        sum += str.characters.count\n\
    \    }\n    var result = [String]()\n    for str in sorted {\n        if str.characters.count\
    \ % 2 == 1 {\n            result.append(str)\n        }\n    }\n    for str in\
    \ result {\n        str.characters.removeLast()\n    }\n    for str in result\
    \ {\n        str.characters.sort()\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpy4yv3rxu.swift:17:20: error: 'characters' is unavailable: Please\
    \ use String directly\n        sum += str.characters.count\n                 \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpy4yv3rxu.swift:21:16:\
    \ error: 'characters' is unavailable: Please use String directly\n        if str.characters.count\
    \ % 2 == 1 {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpy4yv3rxu.swift:26:24: error: cannot use mutating member\
    \ on immutable value: 'str' is a 'let' constant\n        str.characters.removeLast()\n\
    \        ~~~            ^\n/tmp/tmpy4yv3rxu.swift:29:24: error: value of type\
    \ 'String' has no member 'sort'\n        str.characters.sort()\n        ~~~~~~~~~~~~~~\
    \ ^~~~\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpw1_ey2yk/tmpw1_ey2yk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4eb23e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4eb20deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4eb20de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4eb20dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw1_ey2yk                        0x000056485e159546 <unavailable> + 5446

    5    libc.so.6                          0x00002b4eb25d3460 __libc_start_main +
    245

    6    tmpw1_ey2yk                        0x000056485e1590c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659979965
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res: [String]\
    \ = []\n    for word in lst {\n        if res.contains(word) {\n            continue\n\
    \        }\n        res.append(word)\n    }\n    res.sort()\n    return res\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpg6vl_y5s/tmpg6vl_y5s.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b38007c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b37cfeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b37cfe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b37cfd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg6vl_y5s                        0x000055c732f3b896 <unavailable> + 6294

    5    libc.so.6                          0x00002b7b381f3460 __libc_start_main +
    245

    6    tmpg6vl_y5s                        0x000055c732f3b419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979965
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res = lst\n\
    \    for str in lst {\n        if str.count % 2 == 1 {\n            res[res.index(of:\
    \ str)!] = str\n        }\n    }\n    return res.sorted(by: { (lhs, rhs) -> Bool\
    \ in\n        if lhs.count < rhs.count {\n            return true\n        }\n\
    \        return false\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpupalzecz/tmpupalzecz.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22b735ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22b7055b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22b7055988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22b70547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpupalzecz                        0x000055ff02be08c6 <unavailable> + 6342

    5    libc.so.6                          0x00002b22b754a460 __libc_start_main +
    245

    6    tmpupalzecz                        0x000055ff02be0449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659979966
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.count < 2 {\n       \
    \     result.append(word)\n        } else {\n            if word.count > result[0].count\
    \ {\n                result[0] = word\n            } else {\n                if\
    \ word.count < result[1].count {\n                    result[1] = word\n     \
    \           }\n            }\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpu1bfxk7k/tmpu1bfxk7k.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad92c24ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad92bf41b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad92bf41988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad92bf407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu1bfxk7k                        0x000055684b06e8b6 <unavailable> + 6326

    5    libc.so.6                          0x00002ad92c436460 __libc_start_main +
    245

    6    tmpu1bfxk7k                        0x000055684b06e439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst2 =\
    \ lst\n    for word in lst2 {\n        if lst2.contains(word) {\n            lst2.remove(word)\n\
    \        }\n    }\n    lst2.sort()\n    return lst2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpxwqovuig.swift:17:18: error: no exact matches in call to instance\
    \ method 'remove'\n            lst2.remove(word)\n                 ^\n/tmp/tmpxwqovuig.swift:17:18:\
    \ note: candidate expects value of type 'Int' for parameter #1 (got 'String')\n\
    \            lst2.remove(word)\n                 ^\n/tmp/tmpxwqovuig.swift:17:18:\
    \ note: candidate expects value of type 'Array<String>.Index' (aka 'Int') for\
    \ parameter #1 (got 'String')\n            lst2.remove(word)\n               \
    \  ^\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.contains(word) {\n  \
    \          continue\n        }\n        if word.characters.count % 2 == 1 {\n\
    \            result.append(word)\n            continue\n        }\n        let\
    \ index = result.index(of: word)\n        result.remove(at: index)\n    }\n  \
    \  return result.sorted(by: { (word1, word2) -> Bool in\n        return word1.characters.count\
    \ < word2.characters.count\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmpyzmecumh.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpyzmecumh.swift:23:28:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ index = result.index(of: word)\n                           ^\n/tmp/tmpyzmecumh.swift:23:28:\
    \ note: use 'firstIndex(of:)' instead\n        let index = result.index(of: word)\n\
    \                           ^~~~~\n                           firstIndex\n/tmp/tmpyzmecumh.swift:24:27:\
    \ error: value of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<String>.Index' (aka 'Int')\n        result.remove(at:\
    \ index)\n                          ^\n/tmp/tmpyzmecumh.swift:23:13: note: short-circuit\
    \ using 'guard' to exit this function early if the optional value contains 'nil'\n\
    \        let index = result.index(of: word)\n            ^\n        guard    \
    \                          else { return <#default value#> }\n/tmp/tmpyzmecumh.swift:23:28:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        let index = result.index(of: word)\n                        \
    \   ^\n                                           ?? <#default value#>\n/tmp/tmpyzmecumh.swift:23:28:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        let index = result.index(of: word)\n                        \
    \   ^\n                                          !\n/tmp/tmpyzmecumh.swift:24:27:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        result.remove(at: index)\n                          ^\n     \
    \                           ?? <#default value#>\n/tmp/tmpyzmecumh.swift:24:27:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        result.remove(at: index)\n                          ^\n     \
    \              "
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.contains(word) {\n  \
    \          continue\n        }\n        if word.characters.count % 2 == 1 {\n\
    \            result.append(word)\n            continue\n        }\n        let\
    \ index = result.index(of: word)\n        result.remove(at: index)\n        result.append(word)\n\
    \    }\n    return result.sorted(by: { (word1, word2) -> Bool in\n        return\
    \ word1.characters.count < word2.characters.count\n    })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp7l8d7as1.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp7l8d7as1.swift:23:28:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ index = result.index(of: word)\n                           ^\n/tmp/tmp7l8d7as1.swift:23:28:\
    \ note: use 'firstIndex(of:)' instead\n        let index = result.index(of: word)\n\
    \                           ^~~~~\n                           firstIndex\n/tmp/tmp7l8d7as1.swift:24:27:\
    \ error: value of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<String>.Index' (aka 'Int')\n        result.remove(at:\
    \ index)\n                          ^\n/tmp/tmp7l8d7as1.swift:23:13: note: short-circuit\
    \ using 'guard' to exit this function early if the optional value contains 'nil'\n\
    \        let index = result.index(of: word)\n            ^\n        guard    \
    \                          else { return <#default value#> }\n/tmp/tmp7l8d7as1.swift:23:28:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        let index = result.index(of: word)\n                        \
    \   ^\n                                           ?? <#default value#>\n/tmp/tmp7l8d7as1.swift:23:28:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        let index = result.index(of: word)\n                        \
    \   ^\n                                          !\n/tmp/tmp7l8d7as1.swift:24:27:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        result.remove(at: index)\n                          ^\n     \
    \                           ?? <#default value#>\n/tmp/tmp7l8d7as1.swift:24:27:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        result.remove(at: index)\n                          ^\n     \
    \              "
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let result\
    \ = lst.filter({ (word) -> Bool in\n        return word.characters.count % 2 ==\
    \ 0\n    })\n    return result.sorted(by: { (word1, word2) -> Bool in\n      \
    \  return word1.characters.count < word2.characters.count\n    })\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpobcegdxb.swift:15:21: error: 'characters' is unavailable: Please\
    \ use String directly\n        return word.characters.count % 2 == 0\n       \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpobcegdxb.swift:18:22: error: 'characters' is unavailable: Please\
    \ use String directly\n        return word1.characters.count < word2.characters.count\n\
    \                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpobcegdxb.swift:18:47: error: 'characters' is unavailable: Please\
    \ use String directly\n        return word1.characters.count < word2.characters.count\n\
    \                                              ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.count < 2 {\n       \
    \     result.append(word)\n        } else if word.count > result.last {\n    \
    \        result.append(word)\n        } else if word.count < result.last {\n \
    \           for index in 0..<result.count {\n                if word.count < result[index].count\
    \ {\n                    result.remove(at: index)\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result.sorted(by:\
    \ { (word1, word2) -> Bool in\n        if word1.count > word2.count {\n      \
    \      return true\n        } else if word1.count < word2.count {\n          \
    \  return false\n        } else {\n            return word1 < word2\n        }\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmppsmu7f0z.swift:18:30: error: type '((String) throws -> Bool) throws\
    \ -> String?' cannot conform to 'BinaryInteger'\n        } else if word.count\
    \ > result.last {\n                             ^\n/tmp/tmppsmu7f0z.swift:18:30:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ protocols\n        } else if word.count > result.last {\n                  \
    \           ^\n/tmp/tmppsmu7f0z.swift:18:30: note: required by operator function\
    \ '>' where 'Other' = '((String) throws -> Bool) throws -> String?'\n        }\
    \ else if word.count > result.last {\n                             ^\n/tmp/tmppsmu7f0z.swift:20:30:\
    \ error: type '((String) throws -> Bool) throws -> String?' cannot conform to\
    \ 'BinaryInteger'\n        } else if word.count < result.last {\n            \
    \                 ^\n/tmp/tmppsmu7f0z.swift:20:30: note: only concrete types such\
    \ as structs, enums and classes can conform to protocols\n        } else if word.count\
    \ < result.last {\n                             ^\n/tmp/tmppsmu7f0z.swift:20:30:\
    \ note: required by operator function '<' where 'Other' = '((String) throws ->\
    \ Bool) throws -> String?'\n        } else if word.count < result.last {\n   \
    \                          ^\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.count < 2 {\n       \
    \     result.append(word)\n        } else if result.count > 2 {\n            if\
    \ word.count < result[1].count {\n                result.append(word)\n      \
    \      } else {\n                result.insert(result[1].count, word)\n      \
    \      }\n        } else {\n            if word.count < result[0].count {\n  \
    \              result.append(word)\n            } else {\n                result.insert(result[0].count,\
    \ word)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpjmor4fbq.swift:22:17: error: instance method 'insert(contentsOf:at:)'\
    \ requires that 'Int' conform to 'Collection'\n                result.insert(result[1].count,\
    \ word)\n                ^\nSwift.RangeReplaceableCollection:7:37: note: where\
    \ 'C' = 'Int'\n    @inlinable public mutating func insert<C>(contentsOf newElements:\
    \ __owned C, at i: Self.Index) where C : Collection, Self.Element == C.Element\n\
    \                                    ^\n/tmp/tmpjmor4fbq.swift:22:30: error: missing\
    \ argument labels 'contentsOf:at:' in call\n                result.insert(result[1].count,\
    \ word)\n                             ^\n                              contentsOf:\
    \      at: \n/tmp/tmpjmor4fbq.swift:22:48: error: cannot convert value of type\
    \ 'String' to expected argument type 'Array<String>.Index' (aka 'Int')\n     \
    \           result.insert(result[1].count, word)\n                           \
    \                    ^\n/tmp/tmpjmor4fbq.swift:28:30: error: missing argument\
    \ labels 'contentsOf:at:' in call\n                result.insert(result[0].count,\
    \ word)\n                             ^\n                              contentsOf:\
    \      at: \n/tmp/tmpjmor4fbq.swift:28:48: error: cannot convert value of type\
    \ 'String' to expected argument type 'Array<String>.Index' (aka 'Int')\n     \
    \           result.insert(result[0].count, word)\n                           \
    \                    ^\n/tmp/tmpjmor4fbq.swift:28:17: error: instance method 'insert(contentsOf:at:)'\
    \ requires that 'Int' conform to 'Collection'\n                result.insert(result[0].count,\
    \ word)\n                ^\nSwift.RangeReplaceableCollection:7:37: note: where\
    \ 'C' = 'Int'\n    @inlinable public mutating func insert<C>(contentsOf newElements:\
    \ __owned C, at i: Self.Index) where C : Collection, Self.Element == C.Element\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for str in lst {\n        if result.count < 2 {\n        \
    \    result.append(str)\n        } else {\n            if str.count > result[0].count\
    \ {\n                result.append(str)\n            } else {\n              \
    \  if str.count < result[1].count {\n                    result[0] = str\n   \
    \             } else {\n                    result[1] = str\n                }\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpw1wo3w1p/tmpw1wo3w1p.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5b5d47bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5b5d172b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5b5d172988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5b5d1717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw1wo3w1p                        0x000055cad682d8b6 <unavailable> + 6326

    5    libc.so.6                          0x00002b5b5d667460 __libc_start_main +
    245

    6    tmpw1wo3w1p                        0x000055cad682d439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for str in lst {\n        if result.contains(str) {\n    \
    \        continue\n        }\n        let count = result.count\n        if count\
    \ % 2 == 0 {\n            result.append(str)\n        } else {\n            result.sort(by:\
    \ { (a, b) -> Bool in\n                let aLen = a.count\n                let\
    \ bLen = b.count\n                if aLen > bLen {\n                    return\
    \ true\n                } else if aLen < bLen {\n                    return false\n\
    \                } else {\n                    return a.compare(b) == .orderedAscending\n\
    \                }\n            })\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp8h404cz6.swift:31:30: error: value of type 'String' has no member\
    \ 'compare'\n                    return a.compare(b) == .orderedAscending\n  \
    \                         ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for str in lst {\n        if result.count < 2 {\n        \
    \    result.append(str)\n            continue\n        }\n        if str.count\
    \ < result[0].count {\n            result[0] = str\n            continue\n   \
    \     }\n        if str.count > result[0].count {\n            result.append(str)\n\
    \            continue\n        }\n        if str.count == result[0].count {\n\
    \            result[0] = str\n            continue\n        }\n        if str.count\
    \ < result[1].count {\n            result[1] = str\n            continue\n   \
    \     }\n        if str.count > result[1].count {\n            result.append(str)\n\
    \            continue\n        }\n        if str.count < result[2].count {\n \
    \           result[2] = str\n            continue\n        }\n        if str.count\
    \ > result[2].count {\n            result.append(str)\n            continue\n\
    \        }\n        if str.count < result[3].count {\n            result[3] =\
    \ str\n            continue\n        }\n        if str.count > result[3].count\
    \ {\n            result.append(str)\n            continue\n        }\n       \
    \ if str.count < result[4].count {\n            result[4] = str\n            continue\n\
    \        }\n        if str.count > result[4].count {\n            result.append(str)\n\
    \            continue\n        }\n        if str.count < result[5].count {\n \
    \           result[5] = str\n            continue\n        }\n        if str.count\
    \ > result[5].count {\n            result.append(str)\n            continue\n\
    \        }\n        if str.count < result[6].count {\n            result[6] =\
    \ str\n            continue\n        }\n        if str.count > result[6].count\
    \ {\n            result.append(str)\n            continue\n        }\n       \
    \ if str.count < result[7].count {\n            result[7] = str\n            continue\n\
    \        }\n        if str.count > result[7].count {\n            result.append(str)\n\
    \            continue\n        }\n        if str.count < result[8].count {\n \
    \           result[8] = str\n            continue\n        }\n        if str.count\
    \ > result[8].count {\n            result.append(str)\n            continue\n\
    \        }\n        if str.count < result[9].count {\n            result[9] =\
    \ str\n            continue\n        }\n        if str.count > result[9].count\
    \ {\n            result.append(str)\n            continue\n        }\n       \
    \ if str.count < result[10].count {\n            result[10] = str\n          \
    \  continue\n        }\n        if str.count > result[10].count {\n          \
    \  result.append(str)\n            continue\n        }\n        if str.count <\
    \ result[11].count {\n            result[11] = str\n            continue\n   \
    \     }\n        if str.count > result[11].count {\n            result.append(str)\n\
    \            continue\n        }\n        if str.count < result[12].count {\n\
    \            result[12] = str\n            continue\n        }\n        if str.count\
    \ > result[12].count {\n            result.append(str)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpnf3lkz0f.swift:147:91: error: expected '}' at end of brace statement\n\
    assert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\",\
    \ \"dd\", \"aaaa\", \"bbbb\"])\n                                             \
    \                                             ^\n/tmp/tmpnf3lkz0f.swift:15:20:\
    \ note: to match this opening '{'\n    for str in lst {\n                   ^\n\
    /tmp/tmpnf3lkz0f.swift:147:91: error: expected '}' at end of brace statement\n\
    assert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\",\
    \ \"dd\", \"aaaa\", \"bbbb\"])\n                                             \
    \                                             ^\n/tmp/tmpnf3lkz0f.swift:13:49:\
    \ note: to match this opening '{'\nfunc sorted_list_sum(lst: [String]) -> [String]\
    \ {\n                                                ^\n/tmp/tmpnf3lkz0f.swift:129:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res = lst\n\
    \    for word in lst {\n        if word.characters.count % 2 == 1 {\n        \
    \    res.remove(at: res.index(of: word))\n        }\n    }\n    return res.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp_1k5_1oy.swift:16:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp_1k5_1oy.swift:17:32:\
    \ error: value of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<String>.Index' (aka 'Int')\n        \
    \    res.remove(at: res.index(of: word))\n                               ^\n/tmp/tmp_1k5_1oy.swift:17:32:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            res.remove(at: res.index(of: word))\n                   \
    \            ^\n                                               ?? <#default value#>\n\
    /tmp/tmp_1k5_1oy.swift:17:32: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n            res.remove(at: res.index(of:\
    \ word))\n                               ^\n                                 \
    \             !\n/tmp/tmp_1k5_1oy.swift:20:32: error: 'characters' is unavailable:\
    \ Please use String directly\n    return res.sorted(by: { $0.characters.count\
    \ > $1.characters.count })\n                               ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp_1k5_1oy.swift:20:54: error: 'characters'\
    \ is unavailable: Please use String directly\n    return res.sorted(by: { $0.characters.count\
    \ > $1.characters.count })\n                                                 \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res: [String]\
    \ = []\n    for str in lst {\n        if res.contains(str) {\n            continue\n\
    \        }\n        let len = str.count\n        if len % 2 == 1 {\n         \
    \   res.append(str)\n            continue\n        }\n        let mid = len /\
    \ 2\n        let left = str.prefix(mid)\n        let right = str.suffix(mid)\n\
    \        let leftLen = left.count\n        let rightLen = right.count\n      \
    \  if leftLen > rightLen {\n            res.append(left)\n        } else {\n \
    \           res.append(right)\n        }\n    }\n    res.sort()\n    return res\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpyo4p2qcl.swift:30:17: error: no exact matches in call to instance\
    \ method 'append'\n            res.append(left)\n                ^\nSwift.Array:6:37:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'String.SubSequence'\
    \ (aka 'Substring'))\n    @inlinable public mutating func append(_ newElement:\
    \ __owned Element)\n                                    ^\nSwift.RangeReplaceableCollection:4:37:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'String.SubSequence'\
    \ (aka 'Substring'))\n    @inlinable public mutating func append(_ newElement:\
    \ __owned Self.Element)\n                                    ^\n/tmp/tmpyo4p2qcl.swift:30:17:\
    \ note: found candidate with type '(__owned String.SubSequence) -> ()' (aka '(__owned\
    \ Substring) -> ()')\n            res.append(left)\n                ^\n/tmp/tmpyo4p2qcl.swift:32:17:\
    \ error: no exact matches in call to instance method 'append'\n            res.append(right)\n\
    \                ^\nSwift.Array:6:37: note: candidate expects value of type 'String'\
    \ for parameter #1 (got 'String.SubSequence' (aka 'Substring'))\n    @inlinable\
    \ public mutating func append(_ newElement: __owned Element)\n               \
    \                     ^\nSwift.RangeReplaceableCollection:4:37: note: candidate\
    \ expects value of type 'String' for parameter #1 (got 'String.SubSequence' (aka\
    \ 'Substring'))\n    @inlinable public mutating func append(_ newElement: __owned\
    \ Self.Element)\n                                    ^\n/tmp/tmpyo4p2qcl.swift:32:17:\
    \ note: found candidate with type '(__owned String.SubSequence) -> ()' (aka '(__owned\
    \ Substring) -> ()')\n            res.append(right)\n                ^\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.contains(word) {\n  \
    \          continue\n        }\n        if result.count > 0 {\n            result.sort()\n\
    \        }\n        result.append(word)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp9tgpsh2b/tmp9tgpsh2b.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84496cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84493c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84493c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84493c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9tgpsh2b                        0x0000557201f80946 <unavailable> + 6470

    5    libc.so.6                          0x00002b84498b7460 __libc_start_main +
    245

    6    tmp9tgpsh2b                        0x0000557201f804c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979966
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for str in lst {\n        if result.count < 2 {\n        \
    \    result.append(str)\n        } else {\n            if str.count > result[0].count\
    \ {\n                result.append(str)\n            } else {\n              \
    \  if str.count < result[1].count {\n                    result[1] = str\n   \
    \             }\n            }\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpvvy1gsox/tmpvvy1gsox.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8df0be9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8df08e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8df08e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8df08df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvvy1gsox                        0x0000562028f1c8b6 <unavailable> + 6326

    5    libc.so.6                          0x00002b8df0dd5460 __libc_start_main +
    245

    6    tmpvvy1gsox                        0x0000562028f1c439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var new_lst\
    \ = [String]()\n    for word in lst {\n        if new_lst.contains(word) {\n \
    \           continue\n        }\n        let new_word = word.characters.reduce(\"\
    \") {\n            $0 + String($1) + String($2)\n        }\n        if new_word.characters.count\
    \ % 2 == 1 {\n            new_lst.append(new_word)\n        }\n    }\n    new_lst.sortInPlace({\
    \ $0.characters.count < $1.characters.count })\n    return new_lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp8dbxqjr5.swift:19:51: error: contextual closure type '(String,\
    \ String.Element) throws -> String' (aka '(String, Character) throws -> String')\
    \ expects 2 arguments, but 3 were used in closure body\n        let new_word =\
    \ word.characters.reduce(\"\") {\n                                           \
    \       ^\n/tmp/tmp8dbxqjr5.swift:26:13: error: value of type '[String]' has no\
    \ member 'sortInPlace'\n    new_lst.sortInPlace({ $0.characters.count < $1.characters.count\
    \ })\n    ~~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979997
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = lst\n    for word in lst {\n        if word.count % 2 == 1 {\n           \
    \ result.remove(at: result.index(of: word))\n        }\n    }\n    return result.sorted(by:\
    \ { $0.count > $1.count })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp058hxxdx.swift:17:38: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n            result.remove(at: result.index(of: word))\n       \
    \                              ^\n/tmp/tmp058hxxdx.swift:17:38: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \         result.remove(at: result.index(of: word))\n                        \
    \             ^\n                                                     ?? <#default\
    \ value#>\n/tmp/tmp058hxxdx.swift:17:38: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n            result.remove(at:\
    \ result.index(of: word))\n                                     ^\n          \
    \                                          !\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for str in lst {\n        if result.contains(str) {\n    \
    \        continue\n        }\n        result.append(str)\n    }\n    result.sort(by:\
    \ { (lhs, rhs) -> Bool in\n        if lhs.count > rhs.count {\n            return\
    \ true\n        }\n        if lhs.count == rhs.count {\n            return lhs.lowercased().compare(rhs.lowercased())\
    \ == .orderedAscending\n        }\n        return false\n    })\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpusx4j2of.swift:26:37: error: value of type 'String' has no member\
    \ 'compare'\n            return lhs.lowercased().compare(rhs.lowercased()) ==\
    \ .orderedAscending\n                   ~~~~~~~~~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res: [String]\
    \ = []\n    for str in lst {\n        if res.contains(str) {\n            continue\n\
    \        }\n        res.append(str)\n    }\n    res.sort { $0.count < $1.count\
    \ }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp_hlrxaac/tmp_hlrxaac.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec1a693c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec1a38ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec1a38a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec1a3897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_hlrxaac                        0x0000563e9341a846 <unavailable> + 6214

    5    libc.so.6                          0x00002aec1a87f460 __libc_start_main +
    245

    6    tmp_hlrxaac                        0x0000563e9341a3c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst2 =\
    \ lst\n    lst2.sort(by: { (s1: String, s2: String) -> Bool in\n        if s1.characters.count\
    \ == s2.characters.count {\n            return s1.characters.compare(s2.characters,\
    \ options: .numeric) == .orderedAscending\n        } else {\n            return\
    \ s1.characters.count < s2.characters.count\n        }\n    })\n    return lst2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpieytyo4i.swift:17:34: error: value of type 'String' has no member\
    \ 'compare'\n            return s1.characters.compare(s2.characters, options:\
    \ .numeric) == .orderedAscending\n                   ~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmpieytyo4i.swift:17:67:\
    \ error: cannot infer contextual base in reference to member 'numeric'\n     \
    \       return s1.characters.compare(s2.characters, options: .numeric) == .orderedAscending\n\
    \                                                                 ~^~~~~~~\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.count < 2 {\n       \
    \     result.append(word)\n            continue\n        }\n        if word.count\
    \ > result[result.count - 1].count {\n            result.append(word)\n      \
    \      continue\n        }\n        if word.count < result[result.count - 1].count\
    \ {\n            result[result.count - 1] = word\n            continue\n     \
    \   }\n        if word.count > result[result.count - 2].count {\n            result[result.count\
    \ - 2] = word\n            continue\n        }\n        if word.count < result[result.count\
    \ - 2].count {\n            result[result.count - 2] = word\n            continue\n\
    \        }\n        if word.count > result[result.count - 3].count {\n       \
    \     result[result.count - 3] = word\n            continue\n        }\n     \
    \   if word.count < result[result.count - 3].count {\n            result[result.count\
    \ - 3] = word\n            continue\n        }\n        if word.count > result[result.count\
    \ - 4].count {\n            result[result.count - 4] = word\n            continue\n\
    \        }\n        if word.count < result[result.count - 4].count {\n       \
    \     result[result.count - 4] = word\n            continue\n        }\n     \
    \   if word.count > result[result.count - 5].count {\n            result[result.count\
    \ - 5] = word\n            continue\n        }\n        if word.count < result[result.count\
    \ - 5].count {\n            result[result.count - 5] = word\n            continue\n\
    \        }\n        if word.count > result[result.count - 6].count {\n       \
    \     result[result.count - 6] = word\n            continue\n        }\n     \
    \   if word.count < result[result.count - 6].count {\n            result[result.count\
    \ - 6] = word\n            continue\n        }\n        if word.count > result[result.count\
    \ - 7].count {\n            result[result.count - 7] = word\n            continue\n\
    \        }\n        if word.count < result[result.count - 7].count {\n       \
    \     result[result.count - 7] = word\n            continue\n        }\n     \
    \   if word.count > result[result.count - 8].count {\n            result[result.count\
    \ - 8] = word\n            continue\n        }\n        if word.count < result[result.count\
    \ - 8].count {\n            result[result.count - 8] = word\n            continue\n\
    \        }\n        if word.count > result[result.count - 9].count {\n       \
    \     result[result.count - 9] = word\n            continue\n        }\n     \
    \   if word.count < result[result.count - 9].count {\n            result[result.count\
    \ - 9] = word\n            continue\n        }\n        if word.count > result[result.count\
    \ - 10].count {\n            result[result.count - 10] = word\n            continue\n\
    \        }\n        if word.count < result[\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbj59an9p.swift:97:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmpbj59an9p.swift:118:91: error: expected '}' at end of brace statement\n\
    assert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\",\
    \ \"dd\", \"aaaa\", \"bbbb\"])\n                                             \
    \                                             ^\n/tmp/tmpbj59an9p.swift:13:49:\
    \ note: to match this opening '{'\nfunc sorted_list_sum(lst: [String]) -> [String]\
    \ {\n                                                ^\n/tmp/tmpbj59an9p.swift:96:31:\
    \ error: missing argument for parameter #1 in call\n        if word.count < result[\n\
    \                              ^\n                              <#Int#>\nSwift.Array:16:23:\
    \ note: 'subscript(_:)' declared here\n    @inlinable public subscript(index:\
    \ Int) -> Element { get set }\n                      ^\n/tmp/tmpbj59an9p.swift:96:23:\
    \ error: binary operator '<' cannot be applied to operands of type 'Int' and 'String'\n\
    \        if word.count < result[\n           ~~~~~~~~~~ ^ ~~~~~~~\n/tmp/tmpbj59an9p.swift:96:23:\
    \ note: overloads for '<' exist with these partially matching parameter lists:\
    \ (Int, Int), (String, String)\n        if word.count < result[\n            \
    \          ^\n/tmp/tmpbj59an9p.swift:100:6: error: operator functions can only\
    \ be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.contains(word) {\n  \
    \          continue\n        }\n        if result.count % 2 == 0 {\n         \
    \   result.append(word)\n            continue\n        }\n        if word.count\
    \ % 2 == 0 {\n            result.append(word)\n            continue\n        }\n\
    \        if word.count % 3 == 0 {\n            result.append(word)\n         \
    \   continue\n        }\n        if word.count % 5 == 0 {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count % 7 == 0 {\n         \
    \   result.append(word)\n            continue\n        }\n        if word.count\
    \ % 11 == 0 {\n            result.append(word)\n            continue\n       \
    \ }\n        if word.count % 13 == 0 {\n            result.append(word)\n    \
    \        continue\n        }\n        if word.count % 17 == 0 {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count % 19 == 0 {\n        \
    \    result.append(word)\n            continue\n        }\n        if word.count\
    \ % 23 == 0 {\n            result.append(word)\n            continue\n       \
    \ }\n        if word.count % 29 == 0 {\n            result.append(word)\n    \
    \        continue\n        }\n        if word.count % 37 == 0 {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count % 47 == 0 {\n        \
    \    result.append(word)\n            continue\n        }\n        if word.count\
    \ % 59 == 0 {\n            result.append(word)\n            continue\n       \
    \ }\n        if word.count % 67 == 0 {\n            result.append(word)\n    \
    \        continue\n        }\n        if word.count % 79 == 0 {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count % 89 == 0 {\n        \
    \    result.append(word)\n            continue\n        }\n        if word.count\
    \ % 99 == 0 {\n            result.append(word)\n            continue\n       \
    \ }\n        if word.count % 119 == 0 {\n            result.append(word)\n   \
    \         continue\n        }\n        if word.count % 131 == 0 {\n          \
    \  result.append(word)\n            continue\n        }\n        if word.count\
    \ % 153 == 0 {\n            result.append(word)\n            continue\n      \
    \  }\n        if word.count % 173 == 0 {\n            result.append(word)\n  \
    \          continue\n        }\n        if word.count % 193 == 0 {\n         \
    \   result.append(word)\n            continue\n        }\n        if word.count\
    \ % 213 == 0 {\n            result.append(word)\n            continue\n      \
    \  }\n        if word.count % 237 == 0 {\n            result.append(word)\n  \
    \          continue\n        }\n        if word.count % 251 == 0 {\n         \
    \   result.append(word)\n            continue\n        }\n        if word.count\
    \ % 273 == 0 {\n            result.append(word)\n            continue\n      \
    \  }\n        if word.count % 293 == 0 {\n            result.append(word)\n  \
    \          continue\n        }\n        if word.count % 313 == 0 {\n         \
    \   result.append(word)\n            continue\n        }\n        if word.count\
    \ % 333 == 0 {\n            result.append(word)\n            continue\n      \
    \  }\n        if word.count % 353 == 0 {\n            result.append(word)\n\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpnuwbzv6h.swift:163:91: error: expected '}' at end of brace statement\n\
    assert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\",\
    \ \"dd\", \"aaaa\", \"bbbb\"])\n                                             \
    \                                             ^\n/tmp/tmpnuwbzv6h.swift:15:21:\
    \ note: to match this opening '{'\n    for word in lst {\n                   \
    \ ^\n/tmp/tmpnuwbzv6h.swift:163:91: error: expected '}' at end of brace statement\n\
    assert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\",\
    \ \"dd\", \"aaaa\", \"bbbb\"])\n                                             \
    \                                             ^\n/tmp/tmpnuwbzv6h.swift:13:49:\
    \ note: to match this opening '{'\nfunc sorted_list_sum(lst: [String]) -> [String]\
    \ {\n                                                ^\n/tmp/tmpnuwbzv6h.swift:145:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.count < 2 {\n       \
    \     result.append(word)\n        } else {\n            if word.count < result[0].count\
    \ {\n                result[0] = word\n            } else {\n                if\
    \ word.count > result[1].count {\n                    result[1] = word\n     \
    \           }\n            }\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmputhqfi9r/tmputhqfi9r.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8db89d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8db86c9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8db86c9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8db86c87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmputhqfi9r                        0x000055d44b61f8b6 <unavailable> + 6326

    5    libc.so.6                          0x00002b8db8bbe460 __libc_start_main +
    245

    6    tmputhqfi9r                        0x000055d44b61f439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.count < 2 {\n       \
    \     result.append(word)\n        } else if word.count > result.last {\n    \
    \        result.append(word)\n        } else if word.count < result.last {\n \
    \           for index in 0..<result.count {\n                if word.count < result[index].count\
    \ {\n                    result.remove(at: index)\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpaknp6uz2.swift:18:30: error: type '((String) throws -> Bool) throws\
    \ -> String?' cannot conform to 'BinaryInteger'\n        } else if word.count\
    \ > result.last {\n                             ^\n/tmp/tmpaknp6uz2.swift:18:30:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ protocols\n        } else if word.count > result.last {\n                  \
    \           ^\n/tmp/tmpaknp6uz2.swift:18:30: note: required by operator function\
    \ '>' where 'Other' = '((String) throws -> Bool) throws -> String?'\n        }\
    \ else if word.count > result.last {\n                             ^\n/tmp/tmpaknp6uz2.swift:20:30:\
    \ error: type '((String) throws -> Bool) throws -> String?' cannot conform to\
    \ 'BinaryInteger'\n        } else if word.count < result.last {\n            \
    \                 ^\n/tmp/tmpaknp6uz2.swift:20:30: note: only concrete types such\
    \ as structs, enums and classes can conform to protocols\n        } else if word.count\
    \ < result.last {\n                             ^\n/tmp/tmpaknp6uz2.swift:20:30:\
    \ note: required by operator function '<' where 'Other' = '((String) throws ->\
    \ Bool) throws -> String?'\n        } else if word.count < result.last {\n   \
    \                          ^\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpw1_ey2yk/tmpw1_ey2yk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4eb23e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4eb20deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4eb20de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4eb20dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw1_ey2yk                        0x000056485e159546 <unavailable> + 5446

    5    libc.so.6                          0x00002b4eb25d3460 __libc_start_main +
    245

    6    tmpw1_ey2yk                        0x000056485e1590c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659979965
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst2 =\
    \ lst\n    lst2.sort { ($0.length < $1.length) ? true : false }\n    lst2.sort\
    \ { ($0 < $1) }\n    return lst2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpvylxvtzr.swift:15:21: error: value of type 'String' has no member\
    \ 'length'\n    lst2.sort { ($0.length < $1.length) ? true : false }\n       \
    \          ~~ ^~~~~~\n/tmp/tmpvylxvtzr.swift:15:33: error: value of type 'String'\
    \ has no member 'length'\n    lst2.sort { ($0.length < $1.length) ? true : false\
    \ }\n                             ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst2 =\
    \ lst\n    for x in lst2 {\n        if lst2.count > 1 {\n            for y in\
    \ lst2 {\n                if x.count > y.count {\n                    lst2.remove(y)\n\
    \                }\n            }\n        }\n    }\n    return lst2\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp9up4kz4h.swift:19:26: error: no exact matches in call to instance\
    \ method 'remove'\n                    lst2.remove(y)\n                      \
    \   ^\n/tmp/tmp9up4kz4h.swift:19:26: note: candidate expects value of type 'Int'\
    \ for parameter #1 (got 'String')\n                    lst2.remove(y)\n      \
    \                   ^\n/tmp/tmp9up4kz4h.swift:19:26: note: candidate expects value\
    \ of type 'Array<String>.Index' (aka 'Int') for parameter #1 (got 'String')\n\
    \                    lst2.remove(y)\n                         ^\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst2 =\
    \ []\n    for word in lst {\n        if lst2.contains(word) {\n            continue\n\
    \        }\n        lst2.append(word)\n    }\n    lst2.sort()\n    return lst2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpckmqy17i.swift:14:16: error: empty collection literal requires\
    \ an explicit type\n    var lst2 = []\n               ^~\n/tmp/tmpckmqy17i.swift:16:26:\
    \ error: missing argument label 'where:' in call\n        if lst2.contains(word)\
    \ {\n                         ^\n                         where: \n/tmp/tmpckmqy17i.swift:16:26:\
    \ error: cannot convert value of type 'String' to expected argument type '(Any)\
    \ throws -> Bool'\n        if lst2.contains(word) {\n                        \
    \ ^\n/tmp/tmpckmqy17i.swift:21:5: error: type 'Any' cannot conform to 'Comparable'\n\
    \    lst2.sort()\n    ^\n/tmp/tmpckmqy17i.swift:21:5: note: only concrete types\
    \ such as structs, enums and classes can conform to protocols\n    lst2.sort()\n\
    \    ^\n/tmp/tmpckmqy17i.swift:21:5: note: required by referencing instance method\
    \ 'sort()' on 'MutableCollection' where 'Self.Element' = 'Any'\n    lst2.sort()\n\
    \    ^\n/tmp/tmpckmqy17i.swift:22:12: error: cannot convert return expression\
    \ of type '[Any]' to return type '[String]'\n    return lst2\n           ^\n/tmp/tmpckmqy17i.swift:22:12:\
    \ note: arguments to generic parameter 'Element' ('Any' and 'String') are expected\
    \ to be equal\n    return lst2\n           ^\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.contains(word) {\n  \
    \          continue\n        }\n        result.append(word)\n    }\n    result.sortInPlace({\
    \ $0.length < $1.length })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmp96zmettf.swift:21:12: error: value of type '[String]' has no member\
    \ 'sortInPlace'\n    result.sortInPlace({ $0.length < $1.length })\n    ~~~~~~\
    \ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.contains(word) {\n  \
    \          continue\n        }\n        if word.characters.count % 2 == 1 {\n\
    \            result.insert(word, at: 0)\n        } else {\n            result.insert(word,\
    \ at: result.count)\n        }\n    }\n    return result.sorted(by: { (word1,\
    \ word2) -> Bool in\n        return word1.characters.count < word2.characters.count\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpz33bcesv.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpz33bcesv.swift:26:22:\
    \ error: 'characters' is unavailable: Please use String directly\n        return\
    \ word1.characters.count < word2.characters.count\n                     ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpz33bcesv.swift:26:47:\
    \ error: 'characters' is unavailable: Please use String directly\n        return\
    \ word1.characters.count < word2.characters.count\n                          \
    \                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659979965
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res: [String]\
    \ = []\n    for word in lst {\n        if res.contains(word) {\n            continue\n\
    \        }\n        res.append(word)\n    }\n    res.sort {\n        if $0.count\
    \ < $1.count {\n            return true\n        }\n        if $0.count == $1.count\
    \ {\n            return $0 < $1\n        }\n        return false\n    }\n    return\
    \ res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt289jtkh/tmpt289jtkh.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5582754c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b558244bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b558244b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b558244a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt289jtkh                        0x000055e435f7b896 <unavailable> + 6294

    5    libc.so.6                          0x00002b5582940460 __libc_start_main +
    245

    6    tmpt289jtkh                        0x000055e435f7b419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979966
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.count < 2 {\n       \
    \     result.append(word)\n        } else if result.count == 2 {\n           \
    \ if word.count < result[0].count {\n                result[0] = word\n      \
    \      } else {\n                result[1] = word\n            }\n        } else\
    \ {\n            if word.count < result[0].count {\n                result[0]\
    \ = word\n            } else {\n                result[1] = word\n           \
    \ }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpcd89h7te/tmpcd89h7te.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a6e32dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a6e024b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2a6e024988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2a6e0237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcd89h7te                        0x000055cb9ce0f8b6 <unavailable> + 6326

    5    libc.so.6                          0x00002b2a6e519460 __libc_start_main +
    245

    6    tmpcd89h7te                        0x000055cb9ce0f439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res = lst\n\
    \    for str in lst {\n        if str.characters.count % 2 == 1 {\n          \
    \  res.remove(at: res.index(of: str))\n        }\n    }\n    return res.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmps0nk6qzb.swift:16:16: error: 'characters' is unavailable: Please\
    \ use String directly\n        if str.characters.count % 2 == 1 {\n          \
    \     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmps0nk6qzb.swift:17:32:\
    \ error: value of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<String>.Index' (aka 'Int')\n        \
    \    res.remove(at: res.index(of: str))\n                               ^\n/tmp/tmps0nk6qzb.swift:17:32:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            res.remove(at: res.index(of: str))\n                    \
    \           ^\n                                              ?? <#default value#>\n\
    /tmp/tmps0nk6qzb.swift:17:32: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n            res.remove(at: res.index(of:\
    \ str))\n                               ^\n                                  \
    \           !\n/tmp/tmps0nk6qzb.swift:20:32: error: 'characters' is unavailable:\
    \ Please use String directly\n    return res.sorted(by: { $0.characters.count\
    \ > $1.characters.count })\n                               ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmps0nk6qzb.swift:20:54: error: 'characters'\
    \ is unavailable: Please use String directly\n    return res.sorted(by: { $0.characters.count\
    \ > $1.characters.count })\n                                                 \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.contains(word) {\n  \
    \          continue\n        }\n        result.append(word)\n    }\n    result.sortInPlace({\
    \ $0.count > $1.count })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_myfuoda.swift:21:12: error: value of type '[String]' has no member\
    \ 'sortInPlace'\n    result.sortInPlace({ $0.count > $1.count })\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.contains(word) {\n  \
    \          continue\n        }\n        result.append(word)\n    }\n    result.sort(byLength)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpzlgzju66.swift:21:17: error: cannot find 'byLength' in scope\n\
    \    result.sort(byLength)\n                ^~~~~~~~\n/tmp/tmpzlgzju66.swift:21:17:\
    \ error: missing argument label 'by:' in call\n    result.sort(byLength)\n   \
    \             ^\n                by: \n/tmp/tmpzlgzju66.swift:21:17: error: converting\
    \ non-escaping value to '(String, String) throws -> Bool' may allow it to escape\n\
    \    result.sort(byLength)\n                ^\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.count < 2 {\n       \
    \     result.append(word)\n        } else {\n            if word.characters.count\
    \ < result[0].characters.count {\n                result.append(word)\n      \
    \      } else {\n                if word.characters.count > result[0].characters.count\
    \ {\n                    result[0] = word\n                }\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkii9p1e9.swift:19:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if word.characters.count < result[0].characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpkii9p1e9.swift:19:50: error: 'characters' is unavailable:\
    \ Please use String directly\n            if word.characters.count < result[0].characters.count\
    \ {\n                                                 ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpkii9p1e9.swift:22:25: error: 'characters'\
    \ is unavailable: Please use String directly\n                if word.characters.count\
    \ > result[0].characters.count {\n                        ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpkii9p1e9.swift:22:54: error: 'characters'\
    \ is unavailable: Please use String directly\n                if word.characters.count\
    \ > result[0].characters.count {\n                                           \
    \          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.count > 0 {\n       \
    \     if word.count > result[result.count - 1].count {\n                result.append(word)\n\
    \            } else {\n                for i in 0..<result.count {\n         \
    \           if word.count > result[i].count {\n                        result.removeAtIndex(i)\n\
    \                        break\n                    }\n                }\n   \
    \             result.append(word)\n            }\n        } else {\n         \
    \   result.append(word)\n        }\n    }\n    return result.sorted(by: { (word1,\
    \ word2) -> Bool in\n        return word1.count < word2.count\n    })\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpo6udoj9u.swift:22:32: error: value of type '[String]' has no member\
    \ 'removeAtIndex'\n                        result.removeAtIndex(i)\n         \
    \               ~~~~~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst2 =\
    \ lst\n    for word in lst2 {\n        if lst2.contains(word) {\n            lst2.remove(word)\n\
    \        }\n    }\n    lst2.sort()\n    return lst2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpxwqovuig.swift:17:18: error: no exact matches in call to instance\
    \ method 'remove'\n            lst2.remove(word)\n                 ^\n/tmp/tmpxwqovuig.swift:17:18:\
    \ note: candidate expects value of type 'Int' for parameter #1 (got 'String')\n\
    \            lst2.remove(word)\n                 ^\n/tmp/tmpxwqovuig.swift:17:18:\
    \ note: candidate expects value of type 'Array<String>.Index' (aka 'Int') for\
    \ parameter #1 (got 'String')\n            lst2.remove(word)\n               \
    \  ^\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var new_lst\
    \ = [String]()\n    for word in lst {\n        if word.characters.count % 2 ==\
    \ 1 {\n            new_lst.append(word)\n        }\n    }\n    new_lst.sort()\n\
    \    return new_lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpjsgqt6pb.swift:16:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.contains(word) {\n  \
    \          continue\n        }\n        if word.characters.count % 2 == 1 {\n\
    \            result.append(word)\n            continue\n        }\n        let\
    \ index = result.index(of: word)\n        result.remove(at: index)\n    }\n  \
    \  return result.sorted(by: { (word1, word2) -> Bool in\n        if word1.characters.count\
    \ < word2.characters.count {\n            return true\n        }\n        return\
    \ false\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpqik_jarh.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpqik_jarh.swift:23:28:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ index = result.index(of: word)\n                           ^\n/tmp/tmpqik_jarh.swift:23:28:\
    \ note: use 'firstIndex(of:)' instead\n        let index = result.index(of: word)\n\
    \                           ^~~~~\n                           firstIndex\n/tmp/tmpqik_jarh.swift:24:27:\
    \ error: value of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<String>.Index' (aka 'Int')\n        result.remove(at:\
    \ index)\n                          ^\n/tmp/tmpqik_jarh.swift:23:13: note: short-circuit\
    \ using 'guard' to exit this function early if the optional value contains 'nil'\n\
    \        let index = result.index(of: word)\n            ^\n        guard    \
    \                          else { return <#default value#> }\n/tmp/tmpqik_jarh.swift:23:28:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        let index = result.index(of: word)\n                        \
    \   ^\n                                           ?? <#default value#>\n/tmp/tmpqik_jarh.swift:23:28:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        let index = result.index(of: word)\n                        \
    \   ^\n                                          !\n/tmp/tmpqik_jarh.swift:24:27:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        result.remove(at: index)\n                          ^\n     \
    \                           ?? <#default value#>\n/tmp/tmpqik_jarh.swift:24:27:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        result.remove(at: index)\n                          ^\n     \
    \              "
  stdout: ''
  timestamp: 1659979966
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.count < 2 {\n       \
    \     result.append(word)\n        } else {\n            if word.count > result[0].count\
    \ {\n                result.append(word)\n            } else {\n             \
    \   if word.count < result[1].count {\n                    result[1] = word\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp8kg_y2xh/tmp8kg_y2xh.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1885b03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18857fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b18857fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18857f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8kg_y2xh                        0x0000561e5e9e68b6 <unavailable> + 6326

    5    libc.so.6                          0x00002b1885cef460 __libc_start_main +
    245

    6    tmp8kg_y2xh                        0x0000561e5e9e6439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1659979966
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst2 =\
    \ lst\n    for i in 0..<lst2.count {\n        for j in 0..<lst2.count {\n    \
    \        if i != j {\n                if lst2[i].count < lst2[j].count {\n   \
    \                 lst2.remove(at: j)\n                } else {\n             \
    \       lst2.remove(at: i)\n                }\n            }\n        }\n    }\n\
    \    return lst2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8705675c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b870536c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b870536c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b870536c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b870536bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b870516bfc3 <unavailable> + 188355

    6    tmp9gl4k8i9                        0x000056176721f8c9 <unavailable> + 10441

    7    tmp9gl4k8i9                        0x000056176721e72d <unavailable> + 5933

    8    libc.so.6                          0x00002b8705861460 __libc_start_main +
    245

    9    tmp9gl4k8i9                        0x000056176721e3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659979966
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.count < 2 {\n       \
    \     result.append(word)\n        } else {\n            if word.count > result[result.count\
    \ - 1].count {\n                result.append(word)\n            } else {\n  \
    \              if word.count < result[result.count - 1].count {\n            \
    \        result.append(word)\n                }\n            }\n        }\n  \
    \  }\n    return result.sorted(by: { (word1, word2) -> Bool in\n        return\
    \ word1.count < word2.count\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp9kvuzmj0/tmp9kvuzmj0.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad607d3ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad607a35b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad607a35988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad607a347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kvuzmj0                        0x000055af49a898c6 <unavailable> + 6342

    5    libc.so.6                          0x00002ad607f2a460 __libc_start_main +
    245

    6    tmp9kvuzmj0                        0x000055af49a89449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659979967
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpw1_ey2yk/tmpw1_ey2yk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4eb23e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4eb20deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4eb20de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4eb20dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw1_ey2yk                        0x000056485e159546 <unavailable> + 5446

    5    libc.so.6                          0x00002b4eb25d3460 __libc_start_main +
    245

    6    tmpw1_ey2yk                        0x000056485e1590c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659979965
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.contains(word) {\n  \
    \          continue\n        }\n        result.append(word)\n    }\n    result.sort(by:\
    \ { (word1, word2) -> Bool in\n        if word1.count > word2.count {\n      \
    \      return true\n        }\n        return false\n    })\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpr6vvytot/tmpr6vvytot.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4fe7e1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4fe7b16b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4fe7b16988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4fe7b157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr6vvytot                        0x0000558611809896 <unavailable> + 6294

    5    libc.so.6                          0x00002b4fe800b460 __libc_start_main +
    245

    6    tmpr6vvytot                        0x0000558611809419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var new_lst\
    \ = [String]()\n    for word in lst {\n        if new_lst.count < 2 {\n      \
    \      new_lst.append(word)\n            continue\n        }\n        if word.count\
    \ > new_lst[1].count {\n            new_lst.append(word)\n            continue\n\
    \        }\n        if word.count < new_lst[0].count {\n            new_lst =\
    \ [word]\n            continue\n        }\n        if word.count > new_lst[0].count\
    \ {\n            new_lst = [word]\n            continue\n        }\n        if\
    \ word.count < new_lst[1].count {\n            new_lst = [word]\n            continue\n\
    \        }\n        if word.count > new_lst[1].count {\n            new_lst =\
    \ [word]\n            continue\n        }\n        if word.count < new_lst[0].count\
    \ {\n            new_lst = [word]\n            continue\n        }\n        if\
    \ word.count > new_lst[0].count {\n            new_lst = [word]\n            continue\n\
    \        }\n        if word.count < new_lst[1].count {\n            new_lst =\
    \ [word]\n            continue\n        }\n        if word.count > new_lst[1].count\
    \ {\n            new_lst = [word]\n            continue\n        }\n        if\
    \ word.count < new_lst[0].count {\n            new_lst = [word]\n            continue\n\
    \        }\n        if word.count > new_lst[0].count {\n            new_lst =\
    \ [word]\n            continue\n        }\n        if word.count < new_lst[1].count\
    \ {\n            new_lst = [word]\n            continue\n        }\n        if\
    \ word.count > new_lst[1].count {\n            new_lst = [word]\n            continue\n\
    \        }\n        if word.count < new_lst[0].count {\n            new_lst =\
    \ [word]\n            continue\n        }\n        if word.count > new_lst[0].count\
    \ {\n            new_lst = [word]\n            continue\n        }\n        if\
    \ word.count < new_lst[1].count {\n            new_lst = [word]\n            continue\n\
    \        }\n        if word.count > new_lst[1].count {\n            new_lst =\
    \ [word]\n            continue\n        }\n        if word.count < new_lst[0].count\
    \ {\n            new_lst = [word]\n            continue\n        }\n        if\
    \ word.count > new_lst[0].count {\n            new_lst = [word]\n            continue\n\
    \        }\n        if word.count < new_lst[1].count {\n            new_lst =\
    \ [word]\n            continue\n        }\n        if word.count > new_lst[1].count\
    \ {\n            new_lst = [word]\n            continue\n        }\n        if\
    \ word.count < new_lst[0].count {\n            new_lst = [word]\n            continue\n\
    \        }\n        if word.count > new_lst[0].count {\n            new_lst =\
    \ [word]\n            continue\n        }\n        if word.count < new_lst[1].count\
    \ {\n            new_lst = [word]\n            continue\n        }\n        if\
    \ word.\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpb3h_rouq.swift:116:16: error: expected member name following '.'\n\
    \        if word.\n               ^\n/tmp/tmpb3h_rouq.swift:116:17: error: expected\
    \ '{' after 'if' condition\n        if word.\n                ^\n/tmp/tmpb3h_rouq.swift:138:91:\
    \ error: expected '}' at end of brace statement\nassert(sorted_list_sum(lst: [\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    \                                                                            \
    \              ^\n/tmp/tmpb3h_rouq.swift:13:49: note: to match this opening '{'\n\
    func sorted_list_sum(lst: [String]) -> [String] {\n                          \
    \                      ^\n/tmp/tmpb3h_rouq.swift:120:6: error: operator functions\
    \ can only be declared at global or in type scope\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.count < 2 {\n       \
    \     result.append(word)\n        } else if word.count > result.last {\n    \
    \        result.append(word)\n        } else if word.count < result.last {\n \
    \           if word.count < result.last {\n                result.removeLast()\n\
    \            }\n            result.append(word)\n        }\n    }\n    result.sortInPlace()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpwo8hp2mh.swift:18:30: error: type '((String) throws -> Bool) throws\
    \ -> String?' cannot conform to 'BinaryInteger'\n        } else if word.count\
    \ > result.last {\n                             ^\n/tmp/tmpwo8hp2mh.swift:18:30:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ protocols\n        } else if word.count > result.last {\n                  \
    \           ^\n/tmp/tmpwo8hp2mh.swift:18:30: note: required by operator function\
    \ '>' where 'Other' = '((String) throws -> Bool) throws -> String?'\n        }\
    \ else if word.count > result.last {\n                             ^\n/tmp/tmpwo8hp2mh.swift:20:30:\
    \ error: type '((String) throws -> Bool) throws -> String?' cannot conform to\
    \ 'BinaryInteger'\n        } else if word.count < result.last {\n            \
    \                 ^\n/tmp/tmpwo8hp2mh.swift:20:30: note: only concrete types such\
    \ as structs, enums and classes can conform to protocols\n        } else if word.count\
    \ < result.last {\n                             ^\n/tmp/tmpwo8hp2mh.swift:20:30:\
    \ note: required by operator function '<' where 'Other' = '((String) throws ->\
    \ Bool) throws -> String?'\n        } else if word.count < result.last {\n   \
    \                          ^\n/tmp/tmpwo8hp2mh.swift:21:27: error: type '((String)\
    \ throws -> Bool) throws -> String?' cannot conform to 'BinaryInteger'\n     \
    \       if word.count < result.last {\n                          ^\n/tmp/tmpwo8hp2mh.swift:21:27:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ protocols\n            if word.count < result.last {\n                     \
    \     ^\n/tmp/tmpwo8hp2mh.swift:21:27: note: required by operator function '<'\
    \ where 'Other' = '((String) throws -> Bool) throws -> String?'\n            if\
    \ word.count < result.last {\n                          ^\n/tmp/tmpwo8hp2mh.swift:27:12:\
    \ error: value of type '[String]' has no member 'sortInPlace'\n    result.sortInPlace()\n\
    \    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.contains(word) {\n  \
    \          continue\n        }\n        result.append(word)\n    }\n    result.sort\
    \ { $0.count < $1.count }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp9k19sbzs/tmp9k19sbzs.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b140eb35c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b140e82cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b140e82c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b140e82b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9k19sbzs                        0x000055bb1a790896 <unavailable> + 6294

    5    libc.so.6                          0x00002b140ed21460 __libc_start_main +
    245

    6    tmp9k19sbzs                        0x000055bb1a790419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979965
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.contains(word) {\n  \
    \          continue\n        }\n        if result.count % 2 == 0 {\n         \
    \   result.append(word)\n            continue\n        }\n        if word.characters.count\
    \ > result.last {\n            result.append(word)\n            continue\n   \
    \     }\n        if word.characters.count < result.last {\n            result.append(word)\n\
    \            continue\n        }\n        if word.characters.count == result.last\
    \ {\n            if word.characters.lowercased() < result.last {\n           \
    \     result.append(word)\n                continue\n            }\n         \
    \   if word.characters.lowercased() > result.last {\n                result.append(word)\n\
    \                continue\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmppr3olhrb.swift:23:34: error: type '((String) throws -> Bool) throws\
    \ -> String?' cannot conform to 'BinaryInteger'\n        if word.characters.count\
    \ > result.last {\n                                 ^\n/tmp/tmppr3olhrb.swift:23:34:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ protocols\n        if word.characters.count > result.last {\n              \
    \                   ^\n/tmp/tmppr3olhrb.swift:23:34: note: required by operator\
    \ function '>' where 'Other' = '((String) throws -> Bool) throws -> String?'\n\
    \        if word.characters.count > result.last {\n                          \
    \       ^\n/tmp/tmppr3olhrb.swift:27:34: error: type '((String) throws -> Bool)\
    \ throws -> String?' cannot conform to 'BinaryInteger'\n        if word.characters.count\
    \ < result.last {\n                                 ^\n/tmp/tmppr3olhrb.swift:27:34:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ protocols\n        if word.characters.count < result.last {\n              \
    \                   ^\n/tmp/tmppr3olhrb.swift:27:34: note: required by operator\
    \ function '<' where 'Other' = '((String) throws -> Bool) throws -> String?'\n\
    \        if word.characters.count < result.last {\n                          \
    \       ^\n/tmp/tmppr3olhrb.swift:31:34: error: type '((String) throws -> Bool)\
    \ throws -> String?' cannot conform to 'BinaryInteger'\n        if word.characters.count\
    \ == result.last {\n                                 ^\n/tmp/tmppr3olhrb.swift:31:34:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ protocols\n        if word.characters.count == result.last {\n             \
    \                    ^\n/tmp/tmppr3olhrb.swift:31:34: note: required by operator\
    \ function '==' where 'Other' = '((String) throws -> Bool) throws -> String?'\n\
    \        if word.characters.count == result.last {\n                         \
    \        ^\n/tmp/tmppr3olhrb.swift:32:54: error: value of optional type 'String?'\
    \ must be unwrapped to a value of type 'String'\n            if word.characters.lowercased()\
    \ < result.last {\n  "
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst2 =\
    \ lst\n    lst2.sort(by: { (s1: String, s2: String) -> Bool in\n        return\
    \ s1.characters.count < s2.characters.count\n    })\n    return lst2\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp3i1u8k6v.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n        return s1.characters.count < s2.characters.count\n\
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp3i1u8k6v.swift:16:41: error: 'characters' is unavailable: Please\
    \ use String directly\n        return s1.characters.count < s2.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res: [String]\
    \ = []\n    for str in lst {\n        if res.contains(str) {\n            continue\n\
    \        }\n        res.append(str)\n    }\n    res.sort(by: { (s1, s2) -> Bool\
    \ in\n        let len1 = s1.count\n        let len2 = s2.count\n        return\
    \ len1 < len2\n    })\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpreej458x/tmpreej458x.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b01ea5c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01ea2bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01ea2bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01ea2be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpreej458x                        0x00005590aa70d846 <unavailable> + 6214

    5    libc.so.6                          0x00002b01ea7b4460 __libc_start_main +
    245

    6    tmpreej458x                        0x00005590aa70d3c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659979967
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var newList\
    \ = lst\n    for str in newList {\n        if str.characters.count % 2 == 1 {\n\
    \            newList.remove(at: newList.index(of: str))\n        }\n    }\n  \
    \  newList.sort()\n    return newList\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmprkhej5s4.swift:16:16: error: 'characters' is unavailable: Please\
    \ use String directly\n        if str.characters.count % 2 == 1 {\n          \
    \     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmprkhej5s4.swift:17:40:\
    \ error: value of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<String>.Index' (aka 'Int')\n        \
    \    newList.remove(at: newList.index(of: str))\n                            \
    \           ^\n/tmp/tmprkhej5s4.swift:17:40: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n            newList.remove(at:\
    \ newList.index(of: str))\n                                       ^\n        \
    \                                              ?? <#default value#>\n/tmp/tmprkhej5s4.swift:17:40:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            newList.remove(at: newList.index(of: str))\n            \
    \                           ^\n                                              \
    \       !\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res: [String]\
    \ = []\n    for str in lst {\n        if res.contains(str) {\n            continue\n\
    \        }\n        res.append(str)\n    }\n    res.sort { $0.count < $1.count\
    \ }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp_hlrxaac/tmp_hlrxaac.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec1a693c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec1a38ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec1a38a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec1a3897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_hlrxaac                        0x0000563e9341a846 <unavailable> + 6214

    5    libc.so.6                          0x00002aec1a87f460 __libc_start_main +
    245

    6    tmp_hlrxaac                        0x0000563e9341a3c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.count < 2 {\n       \
    \     result.append(word)\n        } else {\n            if word.characters.count\
    \ < result[0].characters.count {\n                result.append(word)\n      \
    \      } else {\n                if word.characters.count > result[0].characters.count\
    \ {\n                    result[0] = word\n                }\n            }\n\
    \        }\n    }\n    return result.sorted(by: { (word1, word2) -> Bool in\n\
    \        return word1.characters.count < word2.characters.count\n    })\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp2nokawq9.swift:19:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if word.characters.count < result[0].characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmp2nokawq9.swift:19:50: error: 'characters' is unavailable:\
    \ Please use String directly\n            if word.characters.count < result[0].characters.count\
    \ {\n                                                 ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp2nokawq9.swift:22:25: error: 'characters'\
    \ is unavailable: Please use String directly\n                if word.characters.count\
    \ > result[0].characters.count {\n                        ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp2nokawq9.swift:22:54: error: 'characters'\
    \ is unavailable: Please use String directly\n                if word.characters.count\
    \ > result[0].characters.count {\n                                           \
    \          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmp2nokawq9.swift:29:22: error: 'characters' is unavailable: Please use String\
    \ directly\n        return word1.characters.count < word2.characters.count\n \
    \                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp2nokawq9.swift:29:47: error: 'characters' is unavailable: Please\
    \ use String directly\n        return word1.characters.count < word2.characters.count\n\
    \                                              ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for str in lst {\n        if result.contains(str) {\n    \
    \        continue\n        }\n        let len = str.characters.count\n       \
    \ if len % 2 == 1 {\n            result.append(str)\n            continue\n  \
    \      }\n        let index = str.index(str.startIndex, offsetBy: len / 2)\n \
    \       result.append(str.substring(to: index))\n    }\n    return result.sorted(by:\
    \ { $0.characters.count < $1.characters.count })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpst94sruq.swift:19:23: error: 'characters' is unavailable: Please\
    \ use String directly\n        let len = str.characters.count\n              \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpst94sruq.swift:25:27:\
    \ error: value of type 'String' has no member 'substring'\n        result.append(str.substring(to:\
    \ index))\n                      ~~~ ^~~~~~~~~\n/tmp/tmpst94sruq.swift:27:35:\
    \ error: 'characters' is unavailable: Please use String directly\n    return result.sorted(by:\
    \ { $0.characters.count < $1.characters.count })\n                           \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpst94sruq.swift:27:57:\
    \ error: 'characters' is unavailable: Please use String directly\n    return result.sorted(by:\
    \ { $0.characters.count < $1.characters.count })\n                           \
    \                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.count < 2 {\n       \
    \     result.append(word)\n        } else {\n            if word.count > result[result.count\
    \ - 1].count {\n                result.append(word)\n            } else {\n  \
    \              if word.count < result[result.count - 1].count {\n            \
    \        result.append(word)\n                }\n            }\n        }\n  \
    \  }\n    return result.sorted(by: { (word1, word2) -> Bool in\n        if word1.count\
    \ > word2.count {\n            return true\n        } else if word1.count < word2.count\
    \ {\n            return false\n        } else {\n            return word1 < word2\n\
    \        }\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmprl_8zfbm/tmprl_8zfbm.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002accc8c2dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002accc8924b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002accc8924988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002accc89237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprl_8zfbm                        0x00005628a6b20926 <unavailable> + 6438

    5    libc.so.6                          0x00002accc8e19460 __libc_start_main +
    245

    6    tmprl_8zfbm                        0x00005628a6b204a9 <unavailable> + 5289

    '
  stdout: ''
  timestamp: 1659979967
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = lst\n    for word in result {\n        if word.characters.count % 2 == 1 {\n\
    \            result.sort(by: {$0.characters.count > $1.characters.count})\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmp43h3cfip.swift:16:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp43h3cfip.swift:17:33:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ result.sort(by: {$0.characters.count > $1.characters.count})\n             \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp43h3cfip.swift:17:55: error: 'characters' is unavailable: Please\
    \ use String directly\n            result.sort(by: {$0.characters.count > $1.characters.count})\n\
    \                                                      ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res = lst\n\
    \    for str in lst {\n        if str.count % 2 == 1 {\n            str.removeLast()\n\
    \        }\n    }\n    return res.sorted(by: { $0.count < $1.count })\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpd57jm3qz.swift:17:17: error: cannot use mutating member on immutable\
    \ value: 'str' is a 'let' constant\n            str.removeLast()\n           \
    \ ~~~ ^\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.count < 2 {\n       \
    \     result.append(word)\n        } else if word.count > result.last {\n    \
    \        result.append(word)\n        } else if word.count < result.last {\n \
    \           var last = 0\n            for index in 0..<result.count {\n      \
    \          if word.count < result[index].count {\n                    last = index\n\
    \                    break\n                }\n            }\n            result.removeRange(last,\
    \ result.count)\n            result.append(word)\n        }\n    }\n    return\
    \ result.sorted(by: { (word1, word2) -> Bool in\n        return word1.count <\
    \ word2.count\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpbhvf_tv2.swift:18:30: error: type '((String) throws -> Bool) throws\
    \ -> String?' cannot conform to 'BinaryInteger'\n        } else if word.count\
    \ > result.last {\n                             ^\n/tmp/tmpbhvf_tv2.swift:18:30:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ protocols\n        } else if word.count > result.last {\n                  \
    \           ^\n/tmp/tmpbhvf_tv2.swift:18:30: note: required by operator function\
    \ '>' where 'Other' = '((String) throws -> Bool) throws -> String?'\n        }\
    \ else if word.count > result.last {\n                             ^\n/tmp/tmpbhvf_tv2.swift:20:30:\
    \ error: type '((String) throws -> Bool) throws -> String?' cannot conform to\
    \ 'BinaryInteger'\n        } else if word.count < result.last {\n            \
    \                 ^\n/tmp/tmpbhvf_tv2.swift:20:30: note: only concrete types such\
    \ as structs, enums and classes can conform to protocols\n        } else if word.count\
    \ < result.last {\n                             ^\n/tmp/tmpbhvf_tv2.swift:20:30:\
    \ note: required by operator function '<' where 'Other' = '((String) throws ->\
    \ Bool) throws -> String?'\n        } else if word.count < result.last {\n   \
    \                          ^\n/tmp/tmpbhvf_tv2.swift:28:20: error: value of type\
    \ '[String]' has no member 'removeRange'\n            result.removeRange(last,\
    \ result.count)\n            ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst2 =\
    \ lst\n    for index in lst.indices {\n        if lst2.count - index > 1 {\n \
    \           lst2.remove(at: index)\n        }\n    }\n    return lst2.sorted(by:\
    \ { (word1, word2) -> Bool in\n        return word1.count < word2.count\n    })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpg4o_6te3/tmpg4o_6te3.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7e4befc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7e48e6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7e48e6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7e48e57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg4o_6te3                        0x000055da429b5836 <unavailable> + 6198

    5    libc.so.6                          0x00002ac7e4ddb460 __libc_start_main +
    245

    6    tmpg4o_6te3                        0x000055da429b53b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659979967
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst2 =\
    \ lst\n    lst2.sort(by: { (s1: String, s2: String) -> Bool in\n        return\
    \ s1.characters.count < s2.characters.count\n    })\n    return lst2\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp3i1u8k6v.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n        return s1.characters.count < s2.characters.count\n\
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp3i1u8k6v.swift:16:41: error: 'characters' is unavailable: Please\
    \ use String directly\n        return s1.characters.count < s2.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst2 =\
    \ lst\n    lst2.sort(by: { (word1, word2) -> Bool in\n        let word1Len = word1.characters.count\n\
    \        let word2Len = word2.characters.count\n        if word1Len > word2Len\
    \ {\n            return true\n        } else if word1Len < word2Len {\n      \
    \      return false\n        } else {\n            return word1 < word2\n    \
    \    }\n    })\n    return lst2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp0g20tlmi.swift:16:30: error: 'characters' is unavailable: Please\
    \ use String directly\n        let word1Len = word1.characters.count\n       \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp0g20tlmi.swift:17:30: error: 'characters' is unavailable: Please\
    \ use String directly\n        let word2Len = word2.characters.count\n       \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    var index = 0\n    for word in lst {\n        if word.characters.count\
    \ % 2 == 1 {\n            result.append(word)\n        } else {\n            index\
    \ = result.index(of: word)\n            result.remove(at: index)\n           \
    \ result.insert(word, at: index)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpsa002t1w.swift:17:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpsa002t1w.swift:20:28:\
    \ error: value of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<String>.Index' (aka 'Int')\n        \
    \    index = result.index(of: word)\n                           ^\n/tmp/tmpsa002t1w.swift:20:28:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            index = result.index(of: word)\n                        \
    \   ^\n                                           ?? <#default value#>\n/tmp/tmpsa002t1w.swift:20:28:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            index = result.index(of: word)\n                        \
    \   ^\n                                          !\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let result\
    \ = lst.filter{ $0.characters.count % 2 == 1 }\n    let sortedResult = result.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n    return sortedResult\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp2tv3ggrt.swift:14:33: error: 'characters' is unavailable: Please\
    \ use String directly\n    let result = lst.filter{ $0.characters.count % 2 ==\
    \ 1 }\n                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp2tv3ggrt.swift:15:47: error: 'characters' is unavailable:\
    \ Please use String directly\n    let sortedResult = result.sorted(by: { $0.characters.count\
    \ > $1.characters.count })\n                                              ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp2tv3ggrt.swift:15:69:\
    \ error: 'characters' is unavailable: Please use String directly\n    let sortedResult\
    \ = result.sorted(by: { $0.characters.count > $1.characters.count })\n       \
    \                                                             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst2 =\
    \ lst\n    lst2.sort(by: { (s1: String, s2: String) -> Bool in\n        let len1\
    \ = s1.count\n        let len2 = s2.count\n        return len1 < len2\n    })\n\
    \    return lst2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpxhuve0bt/tmpxhuve0bt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b52b536ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b52b5061b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b52b5061988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b52b50607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxhuve0bt                        0x0000558d7f1c6616 <unavailable> + 5654

    5    libc.so.6                          0x00002b52b5556460 __libc_start_main +
    245

    6    tmpxhuve0bt                        0x0000558d7f1c6199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659979967
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res: [String]\
    \ = []\n    for word in lst {\n        if res.count < 2 {\n            res.append(word)\n\
    \        } else {\n            if word.count > res[0].count {\n              \
    \  res[0] = word\n            } else {\n                res[1] = word\n      \
    \      }\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp4_uc8g0r/tmp4_uc8g0r.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ebac85c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9eba97cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9eba97c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9eba97b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4_uc8g0r                        0x0000560059d45856 <unavailable> + 6230

    5    libc.so.6                          0x00002b9ebae71460 __libc_start_main +
    245

    6    tmp4_uc8g0r                        0x0000560059d453d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979967
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var new_lst\
    \ = [String]()\n    for word in lst {\n        if word.count % 2 == 1 {\n    \
    \        new_lst.append(word)\n        }\n    }\n    new_lst.sortInPlace({ $0.count\
    \ < $1.count })\n    return new_lst\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmpopjb7o8n.swift:20:13: error: value of type '[String]' has no member\
    \ 'sortInPlace'\n    new_lst.sortInPlace({ $0.count < $1.count })\n    ~~~~~~~\
    \ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979967
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.count < 2 {\n       \
    \     result.append(word)\n        } else {\n            if word.count > result[0].count\
    \ {\n                result[0] = word\n            } else {\n                if\
    \ word.count < result[1].count {\n                    result[1] = word\n     \
    \           }\n            }\n        }\n    }\n    return result.sorted(by: {$0.count\
    \ > $1.count})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpo85k3t30/tmpo85k3t30.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4000c88c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b400097fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b400097f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b400097e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo85k3t30                        0x000055837aabf926 <unavailable> + 6438

    5    libc.so.6                          0x00002b4000e74460 __libc_start_main +
    245

    6    tmpo85k3t30                        0x000055837aabf4a9 <unavailable> + 5289

    '
  stdout: ''
  timestamp: 1659979967
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst2 =\
    \ lst\n    lst2.sort(by: { (s1, s2) -> Bool in\n        let len1 = s1.characters.count\n\
    \        let len2 = s2.characters.count\n        return len1 < len2\n    })\n\
    \    return lst2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp_0ipisb1.swift:16:23: error: 'characters' is unavailable: Please\
    \ use String directly\n        let len1 = s1.characters.count\n              \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp_0ipisb1.swift:17:23:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ len2 = s2.characters.count\n                      ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979967
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.contains(word) {\n  \
    \          continue\n        }\n        if word.characters.count % 2 == 1 {\n\
    \            result.append(word)\n            continue\n        }\n        if\
    \ let index = result.index(of: word) {\n            result[index] = word\n   \
    \         continue\n        }\n        result.append(word)\n    }\n    return\
    \ result.sorted(by: { (word1, word2) -> Bool in\n        if word1.characters.count\
    \ < word2.characters.count {\n            return true\n        }\n        if word1.characters.count\
    \ > word2.characters.count {\n            return false\n        }\n        return\
    \ word1 < word2\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpjcnczij3.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpjcnczij3.swift:23:31:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        if\
    \ let index = result.index(of: word) {\n                              ^\n/tmp/tmpjcnczij3.swift:23:31:\
    \ note: use 'firstIndex(of:)' instead\n        if let index = result.index(of:\
    \ word) {\n                              ^~~~~\n                             \
    \ firstIndex\n/tmp/tmpjcnczij3.swift:30:18: error: 'characters' is unavailable:\
    \ Please use String directly\n        if word1.characters.count < word2.characters.count\
    \ {\n                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpjcnczij3.swift:30:43: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word1.characters.count < word2.characters.count\
    \ {\n                                          ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpjcnczij3.swift:33:18: error: 'characters'\
    \ is unavailable: Please use String directly\n        if word1.characters.count\
    \ > word2.characters.count {\n                 ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpjcnczij3.swift:33:43: error: 'characters'\
    \ is unavailable: Please use String directly\n        if word1.characters.count\
    \ > word2.characters.count {\n                                          ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979967
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.contains(word) {\n  \
    \          continue\n        }\n        result.append(word)\n    }\n    result.sort()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp35u4eg66/tmp35u4eg66.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae33c241c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae33bf38b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae33bf38988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae33bf377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35u4eg66                        0x000055625d1758e6 <unavailable> + 6374

    5    libc.so.6                          0x00002ae33c42d460 __libc_start_main +
    245

    6    tmp35u4eg66                        0x000055625d175469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659979967
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res: [String]\
    \ = []\n    for str in lst {\n        if res.count < res.count {\n           \
    \ res.append(str)\n        } else {\n            if str.count > res[0].count {\n\
    \                res[0] = str\n            } else {\n                res.sortInPlace({\
    \ $0.count < $1.count })\n            }\n        }\n    }\n    return res\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp8nj777_3.swift:22:21: error: value of type '[String]' has no member\
    \ 'sortInPlace'\n                res.sortInPlace({ $0.count < $1.count })\n  \
    \              ~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979967
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for str in lst {\n        if result.count < 2 {\n        \
    \    result.append(str)\n        } else {\n            if str.count < result[0].count\
    \ {\n                result[0] = str\n            } else {\n                if\
    \ str.count > result[1].count {\n                    result[1] = str\n       \
    \         }\n            }\n        }\n    }\n    return result.sorted(by: {$0.count\
    \ < $1.count})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpdejqywbv/tmpdejqywbv.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad73b313c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad73b00ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad73b00a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad73b0097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdejqywbv                        0x000055a631248926 <unavailable> + 6438

    5    libc.so.6                          0x00002ad73b4ff460 __libc_start_main +
    245

    6    tmpdejqywbv                        0x000055a6312484a9 <unavailable> + 5289

    '
  stdout: ''
  timestamp: 1659979967
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for str in lst {\n        if result.count < 2 {\n        \
    \    result.append(str)\n        } else {\n            if str.count < result[0].count\
    \ {\n                result[0] = str\n            } else {\n                if\
    \ str.count > result[1].count {\n                    result[1] = str\n       \
    \         }\n            }\n        }\n    }\n    return result.sorted(by: { (lhs,\
    \ rhs) -> Bool in\n        if lhs.count < rhs.count {\n            return true\n\
    \        } else if lhs.count == rhs.count {\n            return lhs.count < rhs.count\n\
    \        } else {\n            return lhs.count > rhs.count\n        }\n    })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp60qcizs6/tmp60qcizs6.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b200a0aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2009da1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2009da1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2009da07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp60qcizs6                        0x000055893b849926 <unavailable> + 6438

    5    libc.so.6                          0x00002b200a296460 __libc_start_main +
    245

    6    tmp60qcizs6                        0x000055893b8494a9 <unavailable> + 5289

    '
  stdout: ''
  timestamp: 1659979967
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var newlst\
    \ = [String]()\n    for word in lst {\n        if newlst.count < 2 {\n       \
    \     newlst.append(word)\n        } else {\n            if word.characters.count\
    \ < newlst[0].characters.count {\n                newlst.append(word)\n      \
    \      } else {\n                if word.characters.count == newlst[0].characters.count\
    \ {\n                    newlst.append(word)\n                }\n            }\n\
    \        }\n    }\n    return newlst.sorted(by: {$0.characters.count > $1.characters.count})\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpczpjikxl.swift:19:21: error: 'characters' is unavailable: Please\
    \ use String directly\n            if word.characters.count < newlst[0].characters.count\
    \ {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpczpjikxl.swift:19:50: error: 'characters' is unavailable:\
    \ Please use String directly\n            if word.characters.count < newlst[0].characters.count\
    \ {\n                                                 ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpczpjikxl.swift:22:25: error: 'characters'\
    \ is unavailable: Please use String directly\n                if word.characters.count\
    \ == newlst[0].characters.count {\n                        ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpczpjikxl.swift:22:55: error: 'characters'\
    \ is unavailable: Please use String directly\n                if word.characters.count\
    \ == newlst[0].characters.count {\n                                          \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpczpjikxl.swift:28:34: error: 'characters' is unavailable: Please use String\
    \ directly\n    return newlst.sorted(by: {$0.characters.count > $1.characters.count})\n\
    \                                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpczpjikxl.swift:28:56: error: 'characters' is unavailable:\
    \ Please use String directly\n    return newlst.sorted(by: {$0.characters.count\
    \ > $1.characters.count})\n                                                  \
    \     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n        "
  stdout: ''
  timestamp: 1659979967
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst2 =\
    \ lst\n    for word in lst2 {\n        if lst2.count > 1 {\n            for word2\
    \ in lst2 {\n                if word < word2 {\n                    lst2.remove(word2)\n\
    \                }\n            }\n        }\n    }\n    return lst2.sorted(by:\
    \ {$0.count > $1.count})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp8vdhn4s8.swift:19:26: error: no exact matches in call to instance\
    \ method 'remove'\n                    lst2.remove(word2)\n                  \
    \       ^\n/tmp/tmp8vdhn4s8.swift:19:26: note: candidate expects value of type\
    \ 'Int' for parameter #1 (got 'String')\n                    lst2.remove(word2)\n\
    \                         ^\n/tmp/tmp8vdhn4s8.swift:19:26: note: candidate expects\
    \ value of type 'Array<String>.Index' (aka 'Int') for parameter #1 (got 'String')\n\
    \                    lst2.remove(word2)\n                         ^\n"
  stdout: ''
  timestamp: 1659979967
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res: [String]\
    \ = []\n    for str in lst {\n        if res.contains(str) {\n            continue\n\
    \        }\n        res.append(str)\n    }\n    res.sort { $0.count < $1.count\
    \ }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp_hlrxaac/tmp_hlrxaac.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec1a693c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec1a38ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec1a38a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec1a3897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_hlrxaac                        0x0000563e9341a846 <unavailable> + 6214

    5    libc.so.6                          0x00002aec1a87f460 __libc_start_main +
    245

    6    tmp_hlrxaac                        0x0000563e9341a3c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659979966
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpw1_ey2yk/tmpw1_ey2yk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4eb23e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4eb20deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4eb20de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4eb20dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw1_ey2yk                        0x000056485e159546 <unavailable> + 5446

    5    libc.so.6                          0x00002b4eb25d3460 __libc_start_main +
    245

    6    tmpw1_ey2yk                        0x000056485e1590c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659979965
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res = lst\n\
    \    for word in lst {\n        if word.count % 2 == 1 {\n            res.remove(at:\
    \ res.index(of: word))\n        }\n    }\n    return res.sorted(by: { $0.count\
    \ < $1.count })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpi7iqpkes.swift:17:32: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n            res.remove(at: res.index(of: word))\n             \
    \                  ^\n/tmp/tmpi7iqpkes.swift:17:32: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n            res.remove(at:\
    \ res.index(of: word))\n                               ^\n                   \
    \                            ?? <#default value#>\n/tmp/tmpi7iqpkes.swift:17:32:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            res.remove(at: res.index(of: word))\n                   \
    \            ^\n                                              !\n"
  stdout: ''
  timestamp: 1659979967
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = lst\n    for word in result {\n        if word.characters.count % 2 == 1 {\n\
    \            result.remove(word)\n        }\n    }\n    return result.sorted(by:\
    \ { (word1, word2) -> Bool in\n        return word1.characters.count < word2.characters.count\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp1qf3g2jq.swift:16:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp1qf3g2jq.swift:17:20:\
    \ error: no exact matches in call to instance method 'remove'\n            result.remove(word)\n\
    \                   ^\n/tmp/tmp1qf3g2jq.swift:17:20: note: candidate expects value\
    \ of type 'Int' for parameter #1 (got 'String')\n            result.remove(word)\n\
    \                   ^\n/tmp/tmp1qf3g2jq.swift:17:20: note: candidate expects value\
    \ of type 'Array<String>.Index' (aka 'Int') for parameter #1 (got 'String')\n\
    \            result.remove(word)\n                   ^\n/tmp/tmp1qf3g2jq.swift:21:22:\
    \ error: 'characters' is unavailable: Please use String directly\n        return\
    \ word1.characters.count < word2.characters.count\n                     ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp1qf3g2jq.swift:21:47:\
    \ error: 'characters' is unavailable: Please use String directly\n        return\
    \ word1.characters.count < word2.characters.count\n                          \
    \                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659979967
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst2 =\
    \ lst\n    for index in 0..<lst2.count {\n        if lst2[index].count % 2 ==\
    \ 1 {\n            lst2.remove(at: index)\n        }\n    }\n    return lst2.sorted(by:\
    \ { (first, second) -> Bool in\n        return first.count < second.count\n  \
    \  })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b25188cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25185c6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b25185c6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b25185c613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b25185c5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b25183c5fc3 <unavailable> + 188355

    6    tmpuimc2jki                        0x0000565040d1f79e <unavailable> + 10142

    7    tmpuimc2jki                        0x0000565040d1e79d <unavailable> + 6045

    8    libc.so.6                          0x00002b2518abb460 __libc_start_main +
    245

    9    tmpuimc2jki                        0x0000565040d1e419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979967
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst2 =\
    \ lst\n    for index in 0..<lst2.count {\n        if lst2[index].characters.count\
    \ % 2 == 1 {\n            lst2.remove(at: index)\n        }\n    }\n    return\
    \ lst2.sorted(by: { $0.characters.count > $1.characters.count })\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp8gpeql_6.swift:16:24: error: 'characters' is unavailable: Please\
    \ use String directly\n        if lst2[index].characters.count % 2 == 1 {\n  \
    \                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp8gpeql_6.swift:20:33: error: 'characters' is unavailable: Please\
    \ use String directly\n    return lst2.sorted(by: { $0.characters.count > $1.characters.count\
    \ })\n                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp8gpeql_6.swift:20:55: error: 'characters' is unavailable:\
    \ Please use String directly\n    return lst2.sorted(by: { $0.characters.count\
    \ > $1.characters.count })\n                                                 \
    \     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979967
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst2 =\
    \ lst\n    for index in lst.indices {\n        if lst2.count - index > 1 {\n \
    \           lst2.remove(at: index)\n        }\n    }\n    lst2.sort()\n    return\
    \ lst2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpneh4a75z/tmpneh4a75z.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b7c5e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b7c2e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b7c2e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b7c2df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpneh4a75z                        0x000055e2770d3896 <unavailable> + 6294

    5    libc.so.6                          0x00002b6b7c7d5460 __libc_start_main +
    245

    6    tmpneh4a75z                        0x000055e2770d3419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979967
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.contains(word) {\n  \
    \          continue\n        }\n        result.append(word)\n    }\n    result.sort(by:\
    \ { (word1, word2) -> Bool in\n        return word1.count < word2.count\n    })\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpstru0ly4/tmpstru0ly4.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc9a75fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc9a456b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc9a456988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc9a4557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpstru0ly4                        0x000055817c278896 <unavailable> + 6294

    5    libc.so.6                          0x00002afc9a94b460 __libc_start_main +
    245

    6    tmpstru0ly4                        0x000055817c278419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979967
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpw1_ey2yk/tmpw1_ey2yk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4eb23e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4eb20deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4eb20de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4eb20dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw1_ey2yk                        0x000056485e159546 <unavailable> + 5446

    5    libc.so.6                          0x00002b4eb25d3460 __libc_start_main +
    245

    6    tmpw1_ey2yk                        0x000056485e1590c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659979965
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for str in lst {\n        if result.contains(str) {\n    \
    \        continue\n        }\n        let count = result.count\n        if count\
    \ % 2 == 0 {\n            result.append(str)\n            continue\n        }\n\
    \        let index = result.index(of: str)!\n        let tmp = result[index..<result.count]\n\
    \        result.removeSubrange(index..<index)\n        result.append(str)\n  \
    \      result.removeSubrange(index..<index)\n        result.append(contentsOf:\
    \ tmp)\n    }\n    return result.sorted(by: { (a, b) -> Bool in\n        let aLength\
    \ = (a as NSString).length\n        let bLength = (b as NSString).length\n   \
    \     if aLength == bLength {\n            return a.compare(b) == .orderedAscending\n\
    \        }\n        return aLength < bLength\n    })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpih8o_b54.swift:24:28: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        let index = result.index(of: str)!\n         \
    \                  ^\n/tmp/tmpih8o_b54.swift:24:28: note: use 'firstIndex(of:)'\
    \ instead\n        let index = result.index(of: str)!\n                      \
    \     ^~~~~\n                           firstIndex\n/tmp/tmpih8o_b54.swift:32:29:\
    \ error: cannot find type 'NSString' in scope\n        let aLength = (a as NSString).length\n\
    \                            ^~~~~~~~\n/tmp/tmpih8o_b54.swift:32:39: error: value\
    \ of type 'String' has no member 'length'\n        let aLength = (a as NSString).length\n\
    \                      ~~~~~~~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659979967
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = lst\n    for str in lst {\n        if str.characters.count % 2 == 1 {\n  \
    \          result.remove(at: result.index(of: str))\n        }\n    }\n    return\
    \ result.sorted(by: { $0.characters.count > $1.characters.count })\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp59otseit.swift:16:16: error: 'characters' is unavailable: Please\
    \ use String directly\n        if str.characters.count % 2 == 1 {\n          \
    \     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp59otseit.swift:17:38:\
    \ error: value of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<String>.Index' (aka 'Int')\n        \
    \    result.remove(at: result.index(of: str))\n                              \
    \       ^\n/tmp/tmp59otseit.swift:17:38: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n            result.remove(at:\
    \ result.index(of: str))\n                                     ^\n           \
    \                                         ?? <#default value#>\n/tmp/tmp59otseit.swift:17:38:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            result.remove(at: result.index(of: str))\n              \
    \                       ^\n                                                  \
    \ !\n/tmp/tmp59otseit.swift:20:35: error: 'characters' is unavailable: Please\
    \ use String directly\n    return result.sorted(by: { $0.characters.count > $1.characters.count\
    \ })\n                                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp59otseit.swift:20:57: error: 'characters' is unavailable:\
    \ Please use String directly\n    return result.sorted(by: { $0.characters.count\
    \ > $1.characters.count })\n                                                 \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979967
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    var i = 0\n    for word in lst {\n        if i % 2 == 0 {\n\
    \            result.append(word)\n        }\n        i += 1\n    }\n    result.sort()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpk011ribr/tmpk011ribr.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1735f2ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1735c25b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1735c25988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1735c247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk011ribr                        0x0000563bd53f9916 <unavailable> + 6422

    5    libc.so.6                          0x00002b173611a460 __libc_start_main +
    245

    6    tmpk011ribr                        0x0000563bd53f9499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979965
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst2 =\
    \ lst\n    for index in 0..<lst2.count {\n        if lst2[index].characters.count\
    \ % 2 == 1 {\n            lst2.remove(at: index)\n        }\n    }\n    return\
    \ lst2.sorted(by: { (word1, word2) -> Bool in\n        return word1.characters.count\
    \ < word2.characters.count\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmpyw9jr64e.swift:16:24: error: 'characters' is unavailable: Please\
    \ use String directly\n        if lst2[index].characters.count % 2 == 1 {\n  \
    \                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpyw9jr64e.swift:21:22: error: 'characters' is unavailable: Please\
    \ use String directly\n        return word1.characters.count < word2.characters.count\n\
    \                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpyw9jr64e.swift:21:47: error: 'characters' is unavailable: Please\
    \ use String directly\n        return word1.characters.count < word2.characters.count\n\
    \                                              ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979967
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.count < 2 {\n       \
    \     result.append(word)\n        } else if word.count > result.last {\n    \
    \        result.append(word)\n        } else if word.count < result.last {\n \
    \           if word.count < result.last {\n                result.insert(result.last,\
    \ word)\n            } else {\n                result.insert(result.last - 1,\
    \ word)\n            }\n        }\n    }\n    return result.sorted(by: { (word1,\
    \ word2) -> Bool in\n        if word1.count > word2.count {\n            return\
    \ true\n        } else if word1.count < word2.count {\n            return false\n\
    \        } else {\n            return word1 < word2\n        }\n    })\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpyq91d_nf.swift:18:30: error: type '((String) throws -> Bool) throws\
    \ -> String?' cannot conform to 'BinaryInteger'\n        } else if word.count\
    \ > result.last {\n                             ^\n/tmp/tmpyq91d_nf.swift:18:30:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ protocols\n        } else if word.count > result.last {\n                  \
    \           ^\n/tmp/tmpyq91d_nf.swift:18:30: note: required by operator function\
    \ '>' where 'Other' = '((String) throws -> Bool) throws -> String?'\n        }\
    \ else if word.count > result.last {\n                             ^\n/tmp/tmpyq91d_nf.swift:20:30:\
    \ error: type '((String) throws -> Bool) throws -> String?' cannot conform to\
    \ 'BinaryInteger'\n        } else if word.count < result.last {\n            \
    \                 ^\n/tmp/tmpyq91d_nf.swift:20:30: note: only concrete types such\
    \ as structs, enums and classes can conform to protocols\n        } else if word.count\
    \ < result.last {\n                             ^\n/tmp/tmpyq91d_nf.swift:20:30:\
    \ note: required by operator function '<' where 'Other' = '((String) throws ->\
    \ Bool) throws -> String?'\n        } else if word.count < result.last {\n   \
    \                          ^\n/tmp/tmpyq91d_nf.swift:21:27: error: type '((String)\
    \ throws -> Bool) throws -> String?' cannot conform to 'BinaryInteger'\n     \
    \       if word.count < result.last {\n                          ^\n/tmp/tmpyq91d_nf.swift:21:27:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ protocols\n            if word.count < result.last {\n                     \
    \     ^\n/tmp/tmpyq91d_nf.swift:21:27: note: required by operator function '<'\
    \ where 'Other' = '((String) throws -> Bool) throws -> String?'\n            if\
    \ word.count < result.last {\n                          ^\n/tmp/tmpyq91d_nf.swift:22:24:\
    \ error: no exact matches in call to instance method 'insert'\n              \
    \  result.insert(result.last, word)\n                       ^\n/tmp/tmpyq91d_nf.swift:22:24:\
    \ note: candidate has partially matching parameter list (__owned String, at: Int"
  stdout: ''
  timestamp: 1659979967
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.count < 2 {\n       \
    \     result.append(word)\n        } else if word.count > result.last {\n    \
    \        result.append(word)\n        } else if word.count < result.last {\n \
    \           var lastIndex = result.last\n            for index in 0..<word.count\
    \ {\n                if result[index].count < result[lastIndex].count {\n    \
    \                lastIndex = index\n                }\n            }\n       \
    \     result[lastIndex] = word\n        }\n    }\n    result.sort { $0.count <\
    \ $1.count }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpti8ihqgk.swift:18:30: error: type '((String) throws -> Bool) throws\
    \ -> String?' cannot conform to 'BinaryInteger'\n        } else if word.count\
    \ > result.last {\n                             ^\n/tmp/tmpti8ihqgk.swift:18:30:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ protocols\n        } else if word.count > result.last {\n                  \
    \           ^\n/tmp/tmpti8ihqgk.swift:18:30: note: required by operator function\
    \ '>' where 'Other' = '((String) throws -> Bool) throws -> String?'\n        }\
    \ else if word.count > result.last {\n                             ^\n/tmp/tmpti8ihqgk.swift:20:30:\
    \ error: type '((String) throws -> Bool) throws -> String?' cannot conform to\
    \ 'BinaryInteger'\n        } else if word.count < result.last {\n            \
    \                 ^\n/tmp/tmpti8ihqgk.swift:20:30: note: only concrete types such\
    \ as structs, enums and classes can conform to protocols\n        } else if word.count\
    \ < result.last {\n                             ^\n/tmp/tmpti8ihqgk.swift:20:30:\
    \ note: required by operator function '<' where 'Other' = '((String) throws ->\
    \ Bool) throws -> String?'\n        } else if word.count < result.last {\n   \
    \                          ^\n/tmp/tmpti8ihqgk.swift:23:48: error: no exact matches\
    \ in call to subscript \n                if result[index].count < result[lastIndex].count\
    \ {\n                                               ^\nSwift.Array:16:23: note:\
    \ candidate expects value of type 'Int' for parameter #1 (got 'String?')\n   \
    \ @inlinable public subscript(index: Int) -> Element { get set }\n           \
    \           ^\nSwift.Array:17:23: note: candidate expects value of type 'Range<Int>'\
    \ for parameter #1 (got 'String?')\n    @inlinable public subscript(bounds: Range<Int>)\
    \ -> ArraySlice<Element> { get set }\n                      ^\nSwift.Collection:3:23:\
    \ note: candidate expects value of type '(UnboundedRange_) -> ()' for parameter\
    \ #1 (got 'String?')\n    @inlinable public subscript(x: (UnboundedRange_) ->\
    \ ()) -> Self.SubSequence { get }\n                      ^\nSwift.MutableCollection:3:2"
  stdout: ''
  timestamp: 1659979967
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.contains(word) {\n  \
    \          continue\n        }\n        let index = result.index(of: word)\n \
    \       if index != nil {\n            result[index] = word\n        } else {\n\
    \            result.append(word)\n        }\n    }\n    result.sort { $0.count\
    \ < $1.count }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpdmpp3d8r.swift:19:28: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        let index = result.index(of: word)\n         \
    \                  ^\n/tmp/tmpdmpp3d8r.swift:19:28: note: use 'firstIndex(of:)'\
    \ instead\n        let index = result.index(of: word)\n                      \
    \     ^~~~~\n                           firstIndex\n/tmp/tmpdmpp3d8r.swift:21:20:\
    \ error: value of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<String>.Index' (aka 'Int')\n        \
    \    result[index] = word\n                   ^\n/tmp/tmpdmpp3d8r.swift:21:20:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            result[index] = word\n                   ^\n            \
    \             ?? <#default value#>\n/tmp/tmpdmpp3d8r.swift:21:20: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        \
    \    result[index] = word\n                   ^\n                        !\n"
  stdout: ''
  timestamp: 1659979967
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.count < 2 {\n       \
    \     result.append(word)\n        } else if result.count > 2 {\n            if\
    \ word.count < result[0].count {\n                result.removeFirst()\n     \
    \           result.append(word)\n            } else if word.count > result[0].count\
    \ {\n                result.removeLast()\n                result.append(word)\n\
    \            } else {\n                if word.count < result[1].count {\n   \
    \                 result.removeFirst()\n                    result.removeLast()\n\
    \                    result.append(word)\n                } else {\n         \
    \           result.removeFirst()\n                    result.removeLast()\n  \
    \                  result.removeFirst()\n                    result.append(word)\n\
    \                }\n            }\n        } else {\n            if word.count\
    \ < result[0].count {\n                result.removeFirst()\n                result.append(word)\n\
    \            } else {\n                result.removeLast()\n                result.append(word)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp0yirioyh/tmp0yirioyh.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a94ceec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a949e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a949e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a949e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0yirioyh                        0x0000563760d529a6 <unavailable> + 6566

    5    libc.so.6                          0x00002b8a94eda460 __libc_start_main +
    245

    6    tmp0yirioyh                        0x0000563760d52529 <unavailable> + 5417

    '
  stdout: ''
  timestamp: 1659979967
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res = lst\n\
    \    for word in lst {\n        if word.characters.count % 2 == 1 {\n        \
    \    res.remove(at: res.index(of: word))\n        }\n    }\n    return res.sorted(by:\
    \ { $0.characters.count > $1.characters.count })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp_1k5_1oy.swift:16:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp_1k5_1oy.swift:17:32:\
    \ error: value of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<String>.Index' (aka 'Int')\n        \
    \    res.remove(at: res.index(of: word))\n                               ^\n/tmp/tmp_1k5_1oy.swift:17:32:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            res.remove(at: res.index(of: word))\n                   \
    \            ^\n                                               ?? <#default value#>\n\
    /tmp/tmp_1k5_1oy.swift:17:32: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n            res.remove(at: res.index(of:\
    \ word))\n                               ^\n                                 \
    \             !\n/tmp/tmp_1k5_1oy.swift:20:32: error: 'characters' is unavailable:\
    \ Please use String directly\n    return res.sorted(by: { $0.characters.count\
    \ > $1.characters.count })\n                               ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp_1k5_1oy.swift:20:54: error: 'characters'\
    \ is unavailable: Please use String directly\n    return res.sorted(by: { $0.characters.count\
    \ > $1.characters.count })\n                                                 \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.contains(word) {\n  \
    \          continue\n        }\n        result.append(word)\n    }\n    result.sort(byLength)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpzlgzju66.swift:21:17: error: cannot find 'byLength' in scope\n\
    \    result.sort(byLength)\n                ^~~~~~~~\n/tmp/tmpzlgzju66.swift:21:17:\
    \ error: missing argument label 'by:' in call\n    result.sort(byLength)\n   \
    \             ^\n                by: \n/tmp/tmpzlgzju66.swift:21:17: error: converting\
    \ non-escaping value to '(String, String) throws -> Bool' may allow it to escape\n\
    \    result.sort(byLength)\n                ^\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpw1_ey2yk/tmpw1_ey2yk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4eb23e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4eb20deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4eb20de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4eb20dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw1_ey2yk                        0x000056485e159546 <unavailable> + 5446

    5    libc.so.6                          0x00002b4eb25d3460 __libc_start_main +
    245

    6    tmpw1_ey2yk                        0x000056485e1590c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659979965
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.contains(word) {\n  \
    \          continue\n        }\n        result.append(word)\n    }\n    result.sort\
    \ { $0.count < $1.count }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp9k19sbzs/tmp9k19sbzs.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b140eb35c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b140e82cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b140e82c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b140e82b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9k19sbzs                        0x000055bb1a790896 <unavailable> + 6294

    5    libc.so.6                          0x00002b140ed21460 __libc_start_main +
    245

    6    tmp9k19sbzs                        0x000055bb1a790419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979965
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.count < 2 {\n       \
    \     result.append(word)\n        } else {\n            if word.count < result[0].count\
    \ {\n                result.append(word)\n            } else {\n             \
    \   if word.count > result[0].count {\n                    result[0] = word\n\
    \                }\n            }\n        }\n    }\n    return result.sorted(by:\
    \ { (word1, word2) -> Bool in\n        return word1.count < word2.count\n    })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpeyvsnspf/tmpeyvsnspf.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba0a3f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba0a0ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba0a0eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba0a0ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeyvsnspf                        0x0000555c54e73926 <unavailable> + 6438

    5    libc.so.6                          0x00002aba0a5e0460 __libc_start_main +
    245

    6    tmpeyvsnspf                        0x0000555c54e734a9 <unavailable> + 5289

    '
  stdout: ''
  timestamp: 1659979967
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return lst\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpw1_ey2yk/tmpw1_ey2yk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4eb23e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4eb20deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4eb20de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4eb20dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw1_ey2yk                        0x000056485e159546 <unavailable> + 5446

    5    libc.so.6                          0x00002b4eb25d3460 __libc_start_main +
    245

    6    tmpw1_ey2yk                        0x000056485e1590c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659979965
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    var i = 0\n    for word in lst {\n        if i % 2 == 0 {\n\
    \            result.append(word)\n        }\n        i += 1\n    }\n    result.sort()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpk011ribr/tmpk011ribr.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1735f2ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1735c25b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1735c25988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1735c247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk011ribr                        0x0000563bd53f9916 <unavailable> + 6422

    5    libc.so.6                          0x00002b173611a460 __libc_start_main +
    245

    6    tmpk011ribr                        0x0000563bd53f9499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979965
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst2 =\
    \ lst\n    lst2.sort(by: { (a, b) -> Bool in\n        if a.count > b.count {\n\
    \            return true\n        }\n        if a.count < b.count {\n        \
    \    return false\n        }\n        return a.compare(b) == .orderedAscending\n\
    \    })\n    return lst2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpiruqsae7.swift:22:18: error: value of type 'String' has no member\
    \ 'compare'\n        return a.compare(b) == .orderedAscending\n              \
    \ ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659979967
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = lst\n    for i in lst.indices {\n        if lst[i].count % 2 == 1 {\n    \
    \        result.remove(at: i)\n        }\n    }\n    return result.sorted(by:\
    \ { $0.count > $1.count })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'Swift/Array.swift:1331: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b55ff5b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55ff2b0561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b55ff2b0286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b55ff2b013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b55ff2afbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b55ff29d018 <unavailable> + 1355800

    6    tmp6_f6j6vn                        0x00005566b431a876 <unavailable> + 10358

    7    tmp6_f6j6vn                        0x00005566b43197cd <unavailable> + 6093

    8    libc.so.6                          0x00002b55ff7a5460 __libc_start_main +
    245

    9    tmp6_f6j6vn                        0x00005566b4319449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659979967
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for str in lst {\n        if result.count < 2 {\n        \
    \    result.append(str)\n        } else if result.count > 2 {\n            if\
    \ str.count < result[0].count {\n                result.removeFirst()\n      \
    \          result.append(str)\n            } else {\n                result.removeLast()\n\
    \                result.append(str)\n            }\n        } else {\n       \
    \     if str.count < result[0].count {\n                result.removeFirst()\n\
    \                result.append(str)\n            } else {\n                result.removeLast()\n\
    \                result.append(str)\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpphi97mj1/tmpphi97mj1.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b068dbaec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b068d8a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b068d8a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b068d8a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpphi97mj1                        0x0000557c3f6479a6 <unavailable> + 6566

    5    libc.so.6                          0x00002b068dd9a460 __libc_start_main +
    245

    6    tmpphi97mj1                        0x0000557c3f647529 <unavailable> + 5417

    '
  stdout: ''
  timestamp: 1659979967
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.contains(word) {\n  \
    \          continue\n        }\n        if word.characters.count % 2 == 1 {\n\
    \            result.insert(word, at: 0)\n        } else {\n            result.insert(word,\
    \ at: result.count)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpktrcbt7a.swift:19:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979967
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst2 =\
    \ lst\n    for index in lst.indices {\n        if lst[index].count % 2 == 1 {\n\
    \            lst2.remove(at: index)\n        }\n    }\n    return lst2.sorted(by:\
    \ { $0.count < $1.count })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'Swift/Array.swift:1331: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b35dfedac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b35dfbd1561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b35dfbd1286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b35dfbd113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b35dfbd0bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b35dfbbe018 <unavailable> + 1355800

    6    tmpeokh2b0p                        0x000055685a4c5876 <unavailable> + 10358

    7    tmpeokh2b0p                        0x000055685a4c47cd <unavailable> + 6093

    8    libc.so.6                          0x00002b35e00c6460 __libc_start_main +
    245

    9    tmpeokh2b0p                        0x000055685a4c4449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659979967
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var new_lst\
    \ = [String]()\n    for word in lst {\n        if word.characters.count % 2 ==\
    \ 1 {\n            new_lst.append(word)\n        }\n    }\n    new_lst.sortInPlace({\
    \ $0.characters.count > $1.characters.count })\n    return new_lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpbqxbimij.swift:16:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpbqxbimij.swift:20:13:\
    \ error: value of type '[String]' has no member 'sortInPlace'\n    new_lst.sortInPlace({\
    \ $0.characters.count > $1.characters.count })\n    ~~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979967
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var new_lst\
    \ = [String]()\n    for word in lst {\n        if new_lst.contains(word) {\n \
    \           continue\n        }\n        new_lst.insert(word, at: 0)\n    }\n\
    \    new_lst.sort { $0.count < $1.count }\n    return new_lst\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp3mgj57hs/tmp3mgj57hs.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc4fde3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc4fadab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc4fada988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc4fad97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3mgj57hs                        0x0000556cbce8c896 <unavailable> + 6294

    5    libc.so.6                          0x00002acc4ffcf460 __libc_start_main +
    245

    6    tmp3mgj57hs                        0x0000556cbce8c419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979967
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.contains(word) {\n  \
    \          continue\n        }\n        if result.count % 2 == 0 {\n         \
    \   result.append(word)\n            continue\n        }\n        if word.count\
    \ % 2 == 0 {\n            result.append(word)\n            continue\n        }\n\
    \        if word.count % 3 == 0 {\n            result.append(word)\n         \
    \   continue\n        }\n        if word.count % 5 == 0 {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count % 7 == 0 {\n         \
    \   result.append(word)\n            continue\n        }\n        if word.count\
    \ % 11 == 0 {\n            result.append(word)\n            continue\n       \
    \ }\n        if word.count % 13 == 0 {\n            result.append(word)\n    \
    \        continue\n        }\n        if word.count % 17 == 0 {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count % 19 == 0 {\n        \
    \    result.append(word)\n            continue\n        }\n        if word.count\
    \ % 23 == 0 {\n            result.append(word)\n            continue\n       \
    \ }\n        if word.count % 29 == 0 {\n            result.append(word)\n    \
    \        continue\n        }\n        if word.count % 37 == 0 {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count % 43 == 0 {\n        \
    \    result.append(word)\n            continue\n        }\n        if word.count\
    \ % 49 == 0 {\n            result.append(word)\n            continue\n       \
    \ }\n        if word.count % 63 == 0 {\n            result.append(word)\n    \
    \        continue\n        }\n        if word.count % 79 == 0 {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count % 95 == 0 {\n        \
    \    result.append(word)\n            continue\n        }\n        if word.count\
    \ % 123 == 0 {\n            result.append(word)\n            continue\n      \
    \  }\n        if word.count % 127 == 0 {\n            result.append(word)\n  \
    \          continue\n        }\n        if word.count % 131 == 0 {\n         \
    \   result.append(word)\n            continue\n        }\n        if word.count\
    \ % 137 == 0 {\n            result.append(word)\n            continue\n      \
    \  }\n        if word.count % 143 == 0 {\n            result.append(word)\n  \
    \          continue\n        }\n        if word.count % 149 == 0 {\n         \
    \   result.append(word)\n            continue\n        }\n        if word.count\
    \ % 155 == 0 {\n            result.append(word)\n            continue\n      \
    \  }\n        if word.count % 161 == 0 {\n            result.append(word)\n  \
    \          continue\n        }\n        if word.count % 167 == 0 {\n         \
    \   result.append(word)\n            continue\n        }\n        if word.count\
    \ % 173 == 0 {\n            result.append(word)\n            continue\n      \
    \  }\n        if word.count % 179 == 0 {\n            result.append(word)\n  \
    \          continue\n        }\n        if word.count % 185 == 0 {\n         \
    \   result.append(word)\n            continue\n        }\n        if word.count\
    \ % 191 == 0 {\n            result.append(word)\n            continue\n      \
    \  }\n        if word.count % 197 == 0 {\n            result.append(word)\n\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpspe6g7a8.swift:163:91: error: expected '}' at end of brace statement\n\
    assert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\",\
    \ \"dd\", \"aaaa\", \"bbbb\"])\n                                             \
    \                                             ^\n/tmp/tmpspe6g7a8.swift:15:21:\
    \ note: to match this opening '{'\n    for word in lst {\n                   \
    \ ^\n/tmp/tmpspe6g7a8.swift:163:91: error: expected '}' at end of brace statement\n\
    assert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\",\
    \ \"dd\", \"aaaa\", \"bbbb\"])\n                                             \
    \                                             ^\n/tmp/tmpspe6g7a8.swift:13:49:\
    \ note: to match this opening '{'\nfunc sorted_list_sum(lst: [String]) -> [String]\
    \ {\n                                                ^\n/tmp/tmpspe6g7a8.swift:145:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979967
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst2 =\
    \ lst\n    for index in 0..<lst2.count {\n        if lst2[index].count % 2 ==\
    \ 1 {\n            lst2.remove(at: index)\n        }\n    }\n    return lst2.sorted(by:\
    \ { (word1, word2) -> Bool in\n        return word1.count < word2.count\n    })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b9fb7570c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9fb7267561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9fb7267286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9fb726713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9fb7266bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b9fb7066fc3 <unavailable> + 188355

    6    tmpt5_i8263                        0x000055dc3441779e <unavailable> + 10142

    7    tmpt5_i8263                        0x000055dc3441679d <unavailable> + 6045

    8    libc.so.6                          0x00002b9fb775c460 __libc_start_main +
    245

    9    tmpt5_i8263                        0x000055dc34416419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979967
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var newlst\
    \ = [String]()\n    for str in lst {\n        if newlst.count < 1 {\n        \
    \    newlst.append(str)\n        } else {\n            if str.count < newlst[0].count\
    \ {\n                newlst.append(str)\n            } else {\n              \
    \  if str.count > newlst[0].count {\n                    newlst[0] = str\n   \
    \             }\n            }\n        }\n    }\n    return newlst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp13q8_jpo/tmp13q8_jpo.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaadacb5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaada9acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaada9ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaada9ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp13q8_jpo                        0x0000559ae08b38b6 <unavailable> + 6326

    5    libc.so.6                          0x00002aaadaea1460 __libc_start_main +
    245

    6    tmp13q8_jpo                        0x0000559ae08b3439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1659979967
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.count < 2 {\n       \
    \     result.append(word)\n        } else {\n            if word.count > result[0].count\
    \ {\n                result.append(word)\n            } else {\n             \
    \   if word.count < result[1].count {\n                    result[0] = word\n\
    \                } else {\n                    result[1] = word\n            \
    \    }\n            }\n        }\n    }\n    return result.sorted(by: { (word1,\
    \ word2) -> Bool in\n        if word1.count > word2.count {\n            return\
    \ true\n        } else if word1.count < word2.count {\n            return false\n\
    \        } else {\n            return word1 < word2\n        }\n    })\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp_4py2c2d/tmp_4py2c2d.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada11306c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada10ffdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada10ffd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada10ffc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_4py2c2d                        0x0000563e1fd27976 <unavailable> + 6518

    5    libc.so.6                          0x00002ada114f2460 __libc_start_main +
    245

    6    tmp_4py2c2d                        0x0000563e1fd274f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1659979967
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let sortedList\
    \ = lst.sorted(by: { (word1, word2) -> Bool in\n        let length1 = word1.count\n\
    \        let length2 = word2.count\n        return length1 < length2\n    })\n\
    \    return sortedList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpzz7dbtcn/tmpzz7dbtcn.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6457011c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6456d08b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6456d08988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6456d077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzz7dbtcn                        0x0000558d895b8606 <unavailable> + 5638

    5    libc.so.6                          0x00002b64571fd460 __libc_start_main +
    245

    6    tmpzz7dbtcn                        0x0000558d895b8189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659979967
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res = lst\n\
    \    for str in lst {\n        if str.characters.count % 2 == 1 {\n          \
    \  res.removeFirst()\n        }\n    }\n    return res.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpsxsfgxiz.swift:16:16: error: 'characters' is unavailable: Please\
    \ use String directly\n        if str.characters.count % 2 == 1 {\n          \
    \     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979967
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.count < 2 {\n       \
    \     result.append(word)\n        } else {\n            if word.count > result[0].count\
    \ {\n                result.append(word)\n            } else {\n             \
    \   if word.count < result[1].count {\n                    result[1] = word\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp8kg_y2xh/tmp8kg_y2xh.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1885b03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18857fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b18857fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18857f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8kg_y2xh                        0x0000561e5e9e68b6 <unavailable> + 6326

    5    libc.so.6                          0x00002b1885cef460 __libc_start_main +
    245

    6    tmp8kg_y2xh                        0x0000561e5e9e6439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let result\
    \ = lst.filter { (word: String) -> Bool in\n        return word.characters.count\
    \ % 2 == 0\n    }\n    let sortedResult = result.sorted(by: { (word1: String,\
    \ word2: String) -> Bool in\n        return word1.characters.count < word2.characters.count\n\
    \    })\n    return sortedResult\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp_a0ydi_y.swift:15:21: error: 'characters' is unavailable: Please\
    \ use String directly\n        return word.characters.count % 2 == 0\n       \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp_a0ydi_y.swift:18:22: error: 'characters' is unavailable: Please\
    \ use String directly\n        return word1.characters.count < word2.characters.count\n\
    \                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp_a0ydi_y.swift:18:47: error: 'characters' is unavailable: Please\
    \ use String directly\n        return word1.characters.count < word2.characters.count\n\
    \                                              ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979967
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.count < 2 {\n       \
    \     result.append(word)\n        } else {\n            if word.count > result[result.count\
    \ - 1].count {\n                result.append(word)\n            } else {\n  \
    \              let index = result.index(of: word)\n                result.remove(at:\
    \ index)\n                result.append(word)\n            }\n        }\n    }\n\
    \    return result.sorted(by: { (word1, word2) -> Bool in\n        return word1.count\
    \ < word2.count\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmph8x50d6d.swift:22:36: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n                let index = result.index(of: word)\n \
    \                                  ^\n/tmp/tmph8x50d6d.swift:22:36: note: use\
    \ 'firstIndex(of:)' instead\n                let index = result.index(of: word)\n\
    \                                   ^~~~~\n                                  \
    \ firstIndex\n/tmp/tmph8x50d6d.swift:23:35: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n                result.remove(at: index)\n                    \
    \              ^\n/tmp/tmph8x50d6d.swift:22:21: note: short-circuit using 'guard'\
    \ to exit this function early if the optional value contains 'nil'\n         \
    \       let index = result.index(of: word)\n                    ^\n          \
    \      guard                              else { return <#default value#> }\n\
    /tmp/tmph8x50d6d.swift:22:36: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n                let index = result.index(of:\
    \ word)\n                                   ^\n                              \
    \                     ?? <#default value#>\n/tmp/tmph8x50d6d.swift:22:36: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \                let index = result.index(of: word)\n                        \
    \           ^\n                                                  !\n/tmp/tmph8x50d6d.swift:23:35:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                        ?? <#default value#>\n/tmp/tmph8x50d6d.swift:23:35:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n                result.remove(at: index)\n                          \
    \        ^\n                                       !\n"
  stdout: ''
  timestamp: 1659979966
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res: [String]\
    \ = []\n    for str in lst {\n        if res.contains(str) {\n            continue\n\
    \        }\n        res.append(str)\n    }\n    res.sort()\n    return res\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpum417t3g/tmpum417t3g.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c165bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c162b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c162b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c162b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpum417t3g                        0x000055d7d91a9896 <unavailable> + 6294

    5    libc.so.6                          0x00002b1c167a9460 __libc_start_main +
    245

    6    tmpum417t3g                        0x000055d7d91a9419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979966
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst2 =\
    \ lst\n    for x in lst2 {\n        if lst2.count > 1 {\n            for y in\
    \ lst2 {\n                if x.count > y.count {\n                    lst2.remove(at:\
    \ lst2.index(of: y)!)\n                }\n            }\n        }\n    }\n  \
    \  return lst2.sorted(by: { $0.count > $1.count })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp3_7imozu/tmp3_7imozu.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af963605c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9632fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9632fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9632fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3_7imozu                        0x000055bd73c12926 <unavailable> + 6438

    5    libc.so.6                          0x00002af9637f1460 __libc_start_main +
    245

    6    tmp3_7imozu                        0x000055bd73c124a9 <unavailable> + 5289

    '
  stdout: ''
  timestamp: 1659979967
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.contains(word) {\n  \
    \          continue\n        }\n        result.append(word)\n    }\n    result.sortInPlace({\
    \ $0.count < $1.count })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmplqrp2kl1.swift:21:12: error: value of type '[String]' has no member\
    \ 'sortInPlace'\n    result.sortInPlace({ $0.count < $1.count })\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979967
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.count < 2 {\n       \
    \     result.append(word)\n        } else {\n            if word.count > result[0].count\
    \ {\n                result.append(word)\n            } else {\n             \
    \   if word.count < result[1].count {\n                    result[1] = word\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp8kg_y2xh/tmp8kg_y2xh.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1885b03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18857fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b18857fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18857f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8kg_y2xh                        0x0000561e5e9e68b6 <unavailable> + 6326

    5    libc.so.6                          0x00002b1885cef460 __libc_start_main +
    245

    6    tmp8kg_y2xh                        0x0000561e5e9e6439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.contains(word) {\n  \
    \          continue\n        }\n        result.append(word)\n    }\n    result.sort(by:\
    \ { (word1, word2) -> Bool in\n        let word1Len = word1.characters.count\n\
    \        let word2Len = word2.characters.count\n        return word1Len < word2Len\n\
    \    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpugnmqvj9.swift:22:30: error: 'characters' is unavailable: Please\
    \ use String directly\n        let word1Len = word1.characters.count\n       \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpugnmqvj9.swift:23:30: error: 'characters' is unavailable: Please\
    \ use String directly\n        let word2Len = word2.characters.count\n       \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659979965
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res: [String]\
    \ = []\n    for str in lst {\n        if res.contains(str) {\n            continue\n\
    \        }\n        res.append(str)\n    }\n    res.sort { $0.count < $1.count\
    \ }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp_hlrxaac/tmp_hlrxaac.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec1a693c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec1a38ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec1a38a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec1a3897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_hlrxaac                        0x0000563e9341a846 <unavailable> + 6214

    5    libc.so.6                          0x00002aec1a87f460 __libc_start_main +
    245

    6    tmp_hlrxaac                        0x0000563e9341a3c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.count < 2 {\n       \
    \     result.append(word)\n            continue\n        }\n        if word.count\
    \ > result[result.count - 1].count {\n            result.append(word)\n      \
    \      continue\n        }\n        if word.count < result[result.count - 2].count\
    \ {\n            result.append(word)\n            continue\n        }\n      \
    \  if word.count > result[result.count - 3].count {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count < result[result.count\
    \ - 4].count {\n            result.append(word)\n            continue\n      \
    \  }\n        if word.count > result[result.count - 5].count {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count < result[result.count\
    \ - 6].count {\n            result.append(word)\n            continue\n      \
    \  }\n        if word.count > result[result.count - 7].count {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count < result[result.count\
    \ - 8].count {\n            result.append(word)\n            continue\n      \
    \  }\n        if word.count > result[result.count - 9].count {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count < result[result.count\
    \ - 10].count {\n            result.append(word)\n            continue\n     \
    \   }\n        if word.count > result[result.count - 11].count {\n           \
    \ result.append(word)\n            continue\n        }\n        if word.count\
    \ < result[result.count - 12].count {\n            result.append(word)\n     \
    \       continue\n        }\n        if word.count > result[result.count - 13].count\
    \ {\n            result.append(word)\n            continue\n        }\n      \
    \  if word.count < result[result.count - 14].count {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count > result[result.count\
    \ - 15].count {\n            result.append(word)\n            continue\n     \
    \   }\n        if word.count < result[result.count - 16].count {\n           \
    \ result.append(word)\n            continue\n        }\n        if word.count\
    \ > result[result.count - 17].count {\n            result.append(word)\n     \
    \       continue\n        }\n        if word.count < result[result.count - 18].count\
    \ {\n            result.append(word)\n            continue\n        }\n      \
    \  if word.count > result[result.count - 19].count {\n            result.append(word)\n\
    \            continue\n        }\n        if word.count < result[result.count\
    \ - 20].count {\n            result.append(word)\n            continue\n     \
    \   }\n        if word.count > result[result.count - 21].count {\n           \
    \ result.append(word)\n            continue\n        }\n        if word.count\
    \ < result[result.count - 22].count {\n            result.append(word)\n     \
    \       continue\n        }\n        if word.count > result[result.count - 23].count\
    \ {\n            result.append(word)\n            continue\n        }\n      \
    \  if word.count < \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpp_l0pind.swift:113:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmpp_l0pind.swift:134:91: error: expected '}' at end of brace statement\n\
    assert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\",\
    \ \"dd\", \"aaaa\", \"bbbb\"])\n                                             \
    \                                             ^\n/tmp/tmpp_l0pind.swift:13:49:\
    \ note: to match this opening '{'\nfunc sorted_list_sum(lst: [String]) -> [String]\
    \ {\n                                                ^\n/tmp/tmpp_l0pind.swift:116:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979967
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var res = lst\n\
    \    for i in 0..<res.count {\n        if res[i].characters.count % 2 == 1 {\n\
    \            res[i] = res[i].characters.sorted(by: {$0 < $1}).joined(separator:\
    \ \"\")\n        }\n    }\n    return res.sorted(by: {$0.characters.count > $1.characters.count}).joined(separator:\
    \ \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpwaqibiw1.swift:16:19: error: 'characters' is unavailable: Please\
    \ use String directly\n        if res[i].characters.count % 2 == 1 {\n       \
    \           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpwaqibiw1.swift:17:25: error: no exact matches in call to subscript \n\
    \            res[i] = res[i].characters.sorted(by: {$0 < $1}).joined(separator:\
    \ \"\")\n                        ^\n/tmp/tmpwaqibiw1.swift:17:25: note: found\
    \ candidate with type '(Range<Int>) -> @lvalue ArraySlice<String>'\n         \
    \   res[i] = res[i].characters.sorted(by: {$0 < $1}).joined(separator: \"\")\n\
    \                        ^\n/tmp/tmpwaqibiw1.swift:17:25: note: found candidate\
    \ with type '((UnboundedRange_) -> ()) -> ArraySlice<String>'\n            res[i]\
    \ = res[i].characters.sorted(by: {$0 < $1}).joined(separator: \"\")\n        \
    \                ^\n/tmp/tmpwaqibiw1.swift:17:25: note: found candidate with type\
    \ '((UnboundedRange_) -> ()) -> @lvalue ArraySlice<String>'\n            res[i]\
    \ = res[i].characters.sorted(by: {$0 < $1}).joined(separator: \"\")\n        \
    \                ^\n/tmp/tmpwaqibiw1.swift:17:29: error: reference to member 'characters'\
    \ cannot be resolved without a contextual type\n            res[i] = res[i].characters.sorted(by:\
    \ {$0 < $1}).joined(separator: \"\")\n                            ^\n/tmp/tmpwaqibiw1.swift:20:72:\
    \ error: cannot convert return expression of type 'String' to return type '[String]'\n\
    \    return res.sorted(by: {$0.characters.count > $1.characters.count}).joined(separator:\
    \ \"\")\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979967
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.count < 2 {\n       \
    \     result.append(word)\n        } else if result.count > 2 {\n            if\
    \ word.count < result[0].count {\n                result.removeFirst()\n     \
    \           result.append(word)\n            } else {\n                if word.count\
    \ > result[1].count {\n                    result.removeLast()\n             \
    \       result.append(word)\n                } else {\n                    result.removeLast()\n\
    \                    result.removeFirst()\n                    result.append(word)\n\
    \                }\n            }\n        } else {\n            if word.count\
    \ < result[0].count {\n                result.removeFirst()\n                result.append(word)\n\
    \            } else {\n                result.removeLast()\n                result.removeFirst()\n\
    \                result.append(word)\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp3e_acqo3/tmp3e_acqo3.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba99036ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba990065b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba990065988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba9900647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3e_acqo3                        0x000055a45ba0c9a6 <unavailable> + 6566

    5    libc.so.6                          0x00002ba99055a460 __libc_start_main +
    245

    6    tmp3e_acqo3                        0x000055a45ba0c529 <unavailable> + 5417

    '
  stdout: ''
  timestamp: 1659979967
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for str in lst {\n        if result.count < 2 {\n        \
    \    result.append(str)\n            continue\n        }\n        if str.count\
    \ > result[result.count - 1].count {\n            result.append(str)\n       \
    \     continue\n        }\n        if str.count < result[result.count - 2].count\
    \ {\n            result.append(str)\n            continue\n        }\n       \
    \ if str.count > result[result.count - 3].count {\n            result.append(str)\n\
    \            continue\n        }\n        if str.count < result[result.count -\
    \ 4].count {\n            result.append(str)\n            continue\n        }\n\
    \        if str.count > result[result.count - 5].count {\n            result.append(str)\n\
    \            continue\n        }\n        if str.count < result[result.count -\
    \ 6].count {\n            result.append(str)\n            continue\n        }\n\
    \        if str.count > result[result.count - 7].count {\n            result.append(str)\n\
    \            continue\n        }\n        if str.count < result[result.count -\
    \ 8].count {\n            result.append(str)\n            continue\n        }\n\
    \        if str.count > result[result.count - 9].count {\n            result.append(str)\n\
    \            continue\n        }\n        if str.count < result[result.count -\
    \ 10].count {\n            result.append(str)\n            continue\n        }\n\
    \        if str.count > result[result.count - 11].count {\n            result.append(str)\n\
    \            continue\n        }\n        if str.count < result[result.count -\
    \ 12].count {\n            result.append(str)\n            continue\n        }\n\
    \        if str.count > result[result.count - 13].count {\n            result.append(str)\n\
    \            continue\n        }\n        if str.count < result[result.count -\
    \ 14].count {\n            result.append(str)\n            continue\n        }\n\
    \        if str.count > result[result.count - 15].count {\n            result.append(str)\n\
    \            continue\n        }\n        if str.count < result[result.count -\
    \ 16].count {\n            result.append(str)\n            continue\n        }\n\
    \        if str.count > result[result.count - 17].count {\n            result.append(str)\n\
    \            continue\n        }\n        if str.count < result[result.count -\
    \ 18].count {\n            result.append(str)\n            continue\n        }\n\
    \        if str.count > result[result.count - 19].count {\n            result.append(str)\n\
    \            continue\n        }\n        if str.count < result[result.count -\
    \ 20].count {\n            result.append(str)\n            continue\n        }\n\
    \        if str.count > result[result.count - 21].count {\n            result.append(str)\n\
    \            continue\n        }\n        if str.count < result[result.count -\
    \ 22].count {\n            result.append(str)\n            continue\n        }\n\
    \        if str.count > result[result.count - 23].count {\n            result.append(str)\n\
    \            continue\n        }\n        if str.count \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpladt0j63.swift:112:21: error: expected '{' after 'if' condition\n\
    \        if str.count \n                    ^\n/tmp/tmpladt0j63.swift:134:91:\
    \ error: expected '}' at end of brace statement\nassert(sorted_list_sum(lst: [\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    \                                                                            \
    \              ^\n/tmp/tmpladt0j63.swift:13:49: note: to match this opening '{'\n\
    func sorted_list_sum(lst: [String]) -> [String] {\n                          \
    \                      ^\n/tmp/tmpladt0j63.swift:112:16: error: type 'Int' cannot\
    \ be used as a boolean; test for '!= 0' instead\n        if str.count \n     \
    \          ^\n           (         != 0)\n/tmp/tmpladt0j63.swift:116:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979967
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst2 =\
    \ lst\n    lst2.sort(by: { (s1, s2) -> Bool in\n        let len1 = s1.count\n\
    \        let len2 = s2.count\n        return len1 < len2\n    })\n    return lst2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpila4rrjq/tmpila4rrjq.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba20a6b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba20a3adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba20a3ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba20a3ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpila4rrjq                        0x000055bb42dc9616 <unavailable> + 5654

    5    libc.so.6                          0x00002ba20a8a2460 __libc_start_main +
    245

    6    tmpila4rrjq                        0x000055bb42dc9199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659979967
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.contains(word) {\n  \
    \          continue\n        }\n        result.append(word)\n    }\n    result.sort\
    \ { (word1, word2) -> Bool in\n        return word1.characters.count < word2.characters.count\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpcqrgsaxa.swift:22:22: error: 'characters' is unavailable: Please\
    \ use String directly\n        return word1.characters.count < word2.characters.count\n\
    \                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpcqrgsaxa.swift:22:47: error: 'characters' is unavailable: Please\
    \ use String directly\n        return word1.characters.count < word2.characters.count\n\
    \                                              ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979967
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var new_lst\
    \ = [String]()\n    for str in lst {\n        if new_lst.contains(str) {\n   \
    \         continue\n        }\n        new_lst.insert(str, at: 0)\n    }\n   \
    \ new_lst.sort { $0.count < $1.count }\n    return new_lst\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpko38iafn/tmpko38iafn.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ea00a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e9fd98b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e9fd98988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e9fd977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko38iafn                        0x000055fd0fc83896 <unavailable> + 6294

    5    libc.so.6                          0x00002b3ea028d460 __libc_start_main +
    245

    6    tmpko38iafn                        0x000055fd0fc83419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = lst\n    for word in lst {\n        if word.characters.count % 2 == 1 {\n\
    \            result.remove(at: result.index(of: word))\n        }\n    }\n   \
    \ return result.sorted(by: { (word1, word2) -> Bool in\n        return word1.characters.count\
    \ < word2.characters.count\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: SyntaxError
  stderr: "/tmp/tmpaevdhvw6.swift:16:17: error: 'characters' is unavailable: Please\
    \ use String directly\n        if word.characters.count % 2 == 1 {\n         \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpaevdhvw6.swift:17:38:\
    \ error: value of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<String>.Index' (aka 'Int')\n        \
    \    result.remove(at: result.index(of: word))\n                             \
    \        ^\n/tmp/tmpaevdhvw6.swift:17:38: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n            result.remove(at:\
    \ result.index(of: word))\n                                     ^\n          \
    \                                           ?? <#default value#>\n/tmp/tmpaevdhvw6.swift:17:38:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            result.remove(at: result.index(of: word))\n             \
    \                        ^\n                                                 \
    \   !\n/tmp/tmpaevdhvw6.swift:21:22: error: 'characters' is unavailable: Please\
    \ use String directly\n        return word1.characters.count < word2.characters.count\n\
    \                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpaevdhvw6.swift:21:47: error: 'characters' is unavailable: Please\
    \ use String directly\n        return word1.characters.count < word2.characters.count\n\
    \                                              ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979967
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.count < 2 {\n       \
    \     result.append(word)\n        } else {\n            if word.count > result[0].count\
    \ {\n                result.append(word)\n            } else {\n             \
    \   if word.count < result[1].count {\n                    result[0] = word\n\
    \                } else {\n                    result[1] = word\n            \
    \    }\n            }\n        }\n    }\n    return result.sorted(by: { (word1,\
    \ word2) -> Bool in\n        return word1.count < word2.count\n    })\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpacsx6h6m/tmpacsx6h6m.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b62c6b06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b62c67fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b62c67fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62c67fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpacsx6h6m                        0x0000556727d69926 <unavailable> + 6438

    5    libc.so.6                          0x00002b62c6cf2460 __libc_start_main +
    245

    6    tmpacsx6h6m                        0x0000556727d694a9 <unavailable> + 5289

    '
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst2 =\
    \ lst\n    lst2.sort(by: { (s1: String, s2: String) -> Bool in\n        let len1\
    \ = s1.count\n        let len2 = s2.count\n        if len1 > len2 {\n        \
    \    return true\n        } else if len1 < len2 {\n            return false\n\
    \        } else {\n            return s1.localizedStandardCompare(s2) < 0\n  \
    \      }\n    })\n    return lst2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpjs4wwiyh.swift:23:23: error: value of type 'String' has no member\
    \ 'localizedStandardCompare'\n            return s1.localizedStandardCompare(s2)\
    \ < 0\n                   ~~ ^~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979967
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.contains(word) {\n  \
    \          continue\n        }\n        result.append(word)\n    }\n    result.sort(by:\
    \ { (word1, word2) -> Bool in\n        if word1.count > word2.count {\n      \
    \      return true\n        }\n        if word1.count < word2.count {\n      \
    \      return false\n        }\n        return word1 < word2\n    })\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmptgsqdy27/tmptgsqdy27.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb0553fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb05236b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb05236988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb052357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptgsqdy27                        0x0000556a7730f8e6 <unavailable> + 6374

    5    libc.so.6                          0x00002abb0572b460 __libc_start_main +
    245

    6    tmptgsqdy27                        0x0000556a7730f469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659979967
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result\
    \ = [String]()\n    for word in lst {\n        if result.contains(word) {\n  \
    \          continue\n        }\n        let length = word.characters.count\n \
    \       if length % 2 == 1 {\n            result.insert(word, at: 0)\n       \
    \     continue\n        }\n        let index = result.index(of: word)\n      \
    \  if index != nil {\n            result.remove(at: index!)\n        }\n    }\n\
    \    return result.sorted(by: { $0.characters.count < $1.characters.count })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpqic8asu8.swift:19:27: error: 'characters' is unavailable: Please\
    \ use String directly\n        let length = word.characters.count\n          \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpqic8asu8.swift:24:28: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        let index = result.index(of: word)\n         \
    \                  ^\n/tmp/tmpqic8asu8.swift:24:28: note: use 'firstIndex(of:)'\
    \ instead\n        let index = result.index(of: word)\n                      \
    \     ^~~~~\n                           firstIndex\n/tmp/tmpqic8asu8.swift:29:35:\
    \ error: 'characters' is unavailable: Please use String directly\n    return result.sorted(by:\
    \ { $0.characters.count < $1.characters.count })\n                           \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpqic8asu8.swift:29:57:\
    \ error: 'characters' is unavailable: Please use String directly\n    return result.sorted(by:\
    \ { $0.characters.count < $1.characters.count })\n                           \
    \                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659979967
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var lst2 =\
    \ lst\n    lst2.sort { $0.count < $1.count }\n    lst2.sort { $0 < $1 }\n    return\
    \ lst2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpptkygisp/tmpptkygisp.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e7ab7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e7a872b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6e7a872988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6e7a8717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpptkygisp                        0x0000558bd314d676 <unavailable> + 5750

    5    libc.so.6                          0x00002b6e7ad67460 __libc_start_main +
    245

    6    tmpptkygisp                        0x0000558bd314d1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979966
