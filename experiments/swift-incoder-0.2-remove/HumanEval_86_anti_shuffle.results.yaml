language: swift
name: HumanEval_86_anti_shuffle
results:
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if c == \" \" {\n            if word\
    \ != \"\" {\n                result += word\n                word = \"\"\n   \
    \         }\n        } else {\n            word += String(c)\n        }\n    }\n\
    \    if word != \"\" {\n        result += word\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp7aisietg.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp7aisietg.swift:11:9:\
    \ warning: initialization of variable 'i' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var i = 0\n    ~~~~^\n    _\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var words = s.split(separator:\
    \ \" \")\n    for word in words {\n        let chars = word.characters.sorted()\n\
    \        let newWord = String(chars)\n        result += newWord\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpqmb6wgi9.swift:12:26: error: 'characters' is unavailable: Please\
    \ use Substring directly\n        let chars = word.characters.sorted()\n     \
    \                    ^~~~~~~~~~\nSwift.Substring:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: Substring { get set }\n \
    \              ^\n/tmp/tmpqmb6wgi9.swift:10:9: warning: variable 'words' was never\
    \ mutated; consider changing to 'let' constant\n    var words = s.split(separator:\
    \ \" \")\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    for c in\
    \ s.characters {\n        if c == \" \" {\n            if word != \"\" {\n   \
    \             result += word\n                word = \"\"\n            }\n   \
    \     } else {\n            word += String(c)\n        }\n    }\n    if word !=\
    \ \"\" {\n        result += word\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpsgk4uf8x.swift:11:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if c == \" \" {\n            if word\
    \ != \"\" {\n                result += word\n                word = \"\"\n   \
    \         }\n        } else {\n            word += String(c)\n        }\n    }\n\
    \    if word != \"\" {\n        result += word\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp7aisietg.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp7aisietg.swift:11:9:\
    \ warning: initialization of variable 'i' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var i = 0\n    ~~~~^\n    _\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    for word in s.split(\" \") {\n\
    \        var newWord = \"\"\n        for char in word {\n            newWord +=\
    \ String(Int(char.asciiValue))\n        }\n        result += newWord\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmppglifrdn.swift:10:19: error: no exact matches in call to instance\
    \ method 'split'\n    for word in s.split(\" \") {\n                  ^\nSwift.Sequence:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var isSpace\
    \ = false\n    for c in s.characters {\n        if isSpace {\n            result\
    \ += word\n            word = \"\"\n            isSpace = false\n        }\n \
    \       if c == \" \" {\n            isSpace = true\n        } else {\n      \
    \      word += String(c)\n        }\n    }\n    result += word\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpgt1l3zb7.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var s = s\n    var result = \"\"\n    var i = 0\n \
    \   var j = 0\n    var k = 0\n    var l = s.count\n    while i < l {\n       \
    \ if s[i] == \" \" {\n            j = i\n            k = i\n            while\
    \ j < l {\n                if s[j] != \" \" {\n                    k = j\n   \
    \                 break\n                }\n                j += 1\n         \
    \   }\n            if k == i {\n                result += \" \"\n            }\
    \ else {\n                result += s[i : k]\n            }\n            i = k\
    \ + 1\n        } else {\n            result += s[i]\n            i += 1\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp7u1qd1hz.swift:16:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s[i] ==\
    \ \" \" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmp7u1qd1hz.swift:20:20: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \                if s[j] != \" \" {\n                   ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp7u1qd1hz.swift:29:28:\
    \ error: no exact matches in call to subscript \n                result += s[i\
    \ : k]\n                           ^\n/tmp/tmp7u1qd1hz.swift:29:28: note: candidate\
    \ expects value of type 'Range<String.Index>' for parameter #1 (got '@lvalue Int')\n\
    \                result += s[i : k]\n                           ^\n/tmp/tmp7u1qd1hz.swift:29:28:\
    \ note: candidate expects value of type '(UnboundedRange_) -> ()' for parameter\
    \ #1 (got '@lvalue Int')\n                result += s[i : k]\n               \
    \            ^\n/tmp/tmp7u1qd1hz.swift:33:24: error: no exact matches in call\
    \ to subscript \n            result += s[i]\n                       ^\nSwift.String:3:12:\
    \ note: candidate expects value of type 'Range<String.Index>' for parameter #1\
    \ (got 'Int')\n    public subscript(r: Range<String.Index>) -> Substring { get\
    \ }\n           ^\nSwift.Collection:3:23: note: candidate expects value of type\
    \ '(UnboundedRange_) -> ()' for parameter #1 (got 'Int')\n    @inlinable public\
    \ subscript(x: (UnboundedRange_) -> ()) -> Self.SubSequence { get }\n        \
    \              ^\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if c == ' ' {\n            if word !=\
    \ \"\" {\n                result += word\n                word = \"\"\n      \
    \      }\n        } else {\n            word += String(c)\n        }\n    }\n\
    \    if word != \"\" {\n        result += word\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmprtuzzxof.swift:13:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == ' ' {\n                ^~~\n                \" \"\n\
    /tmp/tmprtuzzxof.swift:12:16: error: 'characters' is unavailable: Please use String\
    \ directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmprtuzzxof.swift:11:9: warning: initialization\
    \ of variable 'i' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    var i = 0\n    ~~~~^\n    _\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if c == \" \" {\n            result\
    \ += word\n            word = \"\"\n        } else {\n            word += String(c)\n\
    \        }\n    }\n    result += word\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpxdryi0l7.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpxdryi0l7.swift:11:9:\
    \ warning: initialization of variable 'i' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var i = 0\n    ~~~~^\n    _\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    for c in\
    \ s.characters {\n        switch c {\n        case \" \":\n            result\
    \ += word\n            word = \"\"\n        case \".\":\n            result +=\
    \ word\n            word = \"\"\n        default:\n            word += String(c)\n\
    \        }\n    }\n    result += word\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp5e4hpy76.swift:11:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var words = s.split(separator:\
    \ \" \")\n    var sortedWords = words.sorted(by: { $0.compare($1) == .orderedAscending\
    \ })\n    for word in sortedWords {\n        result += String(word)\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpmi2zujpa.swift:11:45: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    var sortedWords = words.sorted(by:\
    \ { $0.compare($1) == .orderedAscending })\n                                 \
    \        ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var i =\
    \ 0\n    for c in s {\n        if c.isWhitespace {\n            result += word\n\
    \            word = \"\"\n        } else {\n            word += c\n        }\n\
    \    }\n    result += word\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpvba59gjg.swift:17:21: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            word += c\n                \
    \    ^\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var newString = \"\"\n    var wordArray = s.split(separator:\
    \ \" \")\n    for word in wordArray {\n        var newWord = \"\"\n        for\
    \ char in word {\n            newWord += String(UnicodeScalar(Int(char.value)!))\n\
    \        }\n        newString += newWord\n    }\n    return newString\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpuyig0p2a.swift:14:31: error: value of optional type 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>') must be unwrapped to a value of type 'UnicodeScalar'\
    \ (aka 'Unicode.Scalar')\n            newWord += String(UnicodeScalar(Int(char.value)!))\n\
    \                              ^\n/tmp/tmpuyig0p2a.swift:14:31: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \         newWord += String(UnicodeScalar(Int(char.value)!))\n               \
    \               ^\n                                                          \
    \    ?? <#default value#>\n/tmp/tmpuyig0p2a.swift:14:31: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n            newWord\
    \ += String(UnicodeScalar(Int(char.value)!))\n                              ^\n\
    \                                                             !\n/tmp/tmpuyig0p2a.swift:14:54:\
    \ error: value of type 'Character' has no member 'value'\n            newWord\
    \ += String(UnicodeScalar(Int(char.value)!))\n                               \
    \                 ~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var words = s.split(separator:\
    \ \" \")\n    for word in words {\n        var newWord = \"\"\n        for char\
    \ in word {\n            newWord += String(char.asciiValue)\n        }\n     \
    \   result += newWord\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp5zlnxzjr.swift:14:24: error: no exact matches in call to initializer\
    \ \n            newWord += String(char.asciiValue)\n                       ^\n\
    Swift.String:4:23: note: found candidate with type 'UInt8?'\n    @inlinable public\
    \ init<T>(_ value: T) where T : LosslessStringConvertible\n                  \
    \    ^\nSwift.String:2:12: note: found candidate with type 'UInt8?'\n    public\
    \ init<T>(_ value: T, radix: Int = 10, uppercase: Bool = false) where T : BinaryInteger\n\
    \           ^\nSwift.String:2:12: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(describing:)')\n    public init<Subject>(describing instance:\
    \ Subject)\n           ^\nSwift.String:6:12: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(reflecting:)')\n    public init<Subject>(reflecting\
    \ subject: Subject)\n           ^\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var words = s.split(separator:\
    \ \" \")\n    for word in words {\n        let chars = word.characters\n     \
    \   var sortedChars = chars.sorted()\n        var newWord = \"\"\n        for\
    \ char in sortedChars {\n            newWord += String(char)\n        }\n    \
    \    result += newWord\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpeqtmcwbl.swift:12:26: error: 'characters' is unavailable: Please\
    \ use Substring directly\n        let chars = word.characters\n              \
    \           ^~~~~~~~~~\nSwift.Substring:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: Substring { get set }\n           \
    \    ^\n/tmp/tmpeqtmcwbl.swift:10:9: warning: variable 'words' was never mutated;\
    \ consider changing to 'let' constant\n    var words = s.split(separator: \" \"\
    )\n    ~~~ ^\n    let\n/tmp/tmpeqtmcwbl.swift:13:13: warning: variable 'sortedChars'\
    \ was never mutated; consider changing to 'let' constant\n        var sortedChars\
    \ = chars.sorted()\n        ~~~ ^\n        let\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var i = 0\n    for c in s.characters\
    \ {\n        if c.isASCII {\n            result += String(c.asciiValue)\n    \
    \    } else {\n            result += c.character\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpikzem64n.swift:11:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpikzem64n.swift:13:23:\
    \ error: no exact matches in call to initializer \n            result += String(c.asciiValue)\n\
    \                      ^\nSwift.String:4:23: note: found candidate with type 'UInt8?'\n\
    \    @inlinable public init<T>(_ value: T) where T : LosslessStringConvertible\n\
    \                      ^\nSwift.String:2:12: note: found candidate with type 'UInt8?'\n\
    \    public init<T>(_ value: T, radix: Int = 10, uppercase: Bool = false) where\
    \ T : BinaryInteger\n           ^\nSwift.String:2:12: note: incorrect labels for\
    \ candidate (have: '(_:)', expected: '(describing:)')\n    public init<Subject>(describing\
    \ instance: Subject)\n           ^\nSwift.String:6:12: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(reflecting:)')\n    public init<Subject>(reflecting\
    \ subject: Subject)\n           ^\n/tmp/tmpikzem64n.swift:15:25: error: value\
    \ of type 'Character' has no member 'character'\n            result += c.character\n\
    \                      ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var lastWord = \"\"\n    var\
    \ lastChar = \"\"\n    var lastAsciiValue = 0\n    for c in s.characters {\n \
    \       let asciiValue = Int(c)\n        if lastAsciiValue > asciiValue {\n  \
    \          result += lastWord\n            lastWord = \"\"\n            lastChar\
    \ = \"\"\n            lastAsciiValue = 0\n        }\n        lastAsciiValue =\
    \ asciiValue\n        lastWord += String(UnicodeScalar(asciiValue))\n    }\n \
    \   result += lastWord\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp6wafya05.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp6wafya05.swift:14:26:\
    \ error: no exact matches in call to initializer \n        let asciiValue = Int(c)\n\
    \                         ^\nSwift.Int:7:12: note: candidate expects value of\
    \ type 'Float16' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value of type\
    \ 'Float' for parameter #1 (got 'Character')\n    public init(_ source: Float)\n\
    \           ^\nSwift.Int:12:12: note: candidate expects value of type 'Double'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Double)\n    \
    \       ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Float80)\n       \
    \    ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\nSwift.FixedWidthInteger:3:23: note: candidate expects value of type\
    \ 'String' for parameter #1 (got 'Character')\n    @inlinable public init?(_ description:\
    \ String)\n                      ^\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var i = 0\n    while i < s.count\
    \ {\n        var j = i + 1\n        while j < s.count {\n            if s.substring(i,\
    \ j).isEmpty {\n                result += s.substring(i, j)\n                j++\n\
    \            } else {\n                var c = s.substring(i, j).unicodeScalars\n\
    \                var min = c.min()!\n                var max = c.max()!\n    \
    \            var index = c.index(min, max) + 1\n                result += String(UnicodeScalar(index))\n\
    \                i = j\n            }\n        }\n        i += 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpzg2eett8.swift:14:18: error: value of type 'String' has no member\
    \ 'substring'\n            if s.substring(i, j).isEmpty {\n               ~ ^~~~~~~~~\n\
    /tmp/tmpzg2eett8.swift:15:29: error: value of type 'String' has no member 'substring'\n\
    \                result += s.substring(i, j)\n                          ~ ^~~~~~~~~\n\
    /tmp/tmpzg2eett8.swift:16:18: error: cannot find operator '++' in scope; did you\
    \ mean '+= 1'?\n                j++\n                 ^~\n/tmp/tmpzg2eett8.swift:18:27:\
    \ error: value of type 'String' has no member 'substring'\n                var\
    \ c = s.substring(i, j).unicodeScalars\n                        ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var newString = \"\"\n    var word = \"\"\n    var\
    \ lastChar = \"\"\n    var lastCharAsciiValue = 0\n    var isFirst = true\n  \
    \  for c in s.characters {\n        if isFirst {\n            isFirst = false\n\
    \            lastCharAsciiValue = c.asciiValue\n            lastChar = c.unicodeScalars.first!.unicodeScalars.first!\n\
    \        } else {\n            if lastCharAsciiValue < c.asciiValue {\n      \
    \          newString += lastChar\n                lastChar = c.unicodeScalars.first!.unicodeScalars.first!\n\
    \                lastCharAsciiValue = c.asciiValue\n            } else {\n   \
    \             newString += c.unicodeScalars.first!.unicodeScalars.first!\n   \
    \             lastChar = c.unicodeScalars.first!.unicodeScalars.first!\n     \
    \           lastCharAsciiValue = c.asciiValue\n            }\n        }\n    }\n\
    \    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp942qk21_.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp942qk21_.swift:17:36:\
    \ error: cannot assign value of type 'UInt8?' to type 'Int'\n            lastCharAsciiValue\
    \ = c.asciiValue\n                                 ~~^~~~~~~~~~\n/tmp/tmp942qk21_.swift:18:48:\
    \ error: value of type 'Unicode.Scalar' has no member 'unicodeScalars'\n     \
    \       lastChar = c.unicodeScalars.first!.unicodeScalars.first!\n           \
    \            ~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmp942qk21_.swift:20:39:\
    \ error: value of optional type 'UInt8?' must be unwrapped to a value of type\
    \ 'UInt8'\n            if lastCharAsciiValue < c.asciiValue {\n              \
    \                        ^\n/tmp/tmp942qk21_.swift:20:39: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n         \
    \   if lastCharAsciiValue < c.asciiValue {\n                                 \
    \     ^\n                                                 ?? <#default value#>\n\
    /tmp/tmp942qk21_.swift:20:39: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n            if lastCharAsciiValue < c.asciiValue\
    \ {\n                                      ^\n                               \
    \                 !\n/tmp/tmp942qk21_.swift:22:52: error: value of type 'Unicode.Scalar'\
    \ has no member 'unicodeScalars'\n                lastChar = c.unicodeScalars.first!.unicodeScalars.first!\n\
    \                           ~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmp942qk21_.swift:23:40:\
    \ error: cannot assign value of type 'UInt8?' to type 'Int'\n                lastCharAsciiValue\
    \ = c.asciiValue\n                                     ~~^~~~~~~~~~\n/tmp/tmp942qk21_.swift:25:54:\
    \ error: value of type 'Unicode.Scalar' has no member 'unicodeScalars'\n     \
    \           newString += c.unicodeScalars.first!.unicodeScalars.first!\n     \
    \                    "
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if c.isLetter {\n            word +=\
    \ c\n        } else {\n            if word != \"\" {\n                result +=\
    \ word\n                word = \"\"\n            }\n            result += c\n\
    \        }\n    }\n    if word != \"\" {\n        result += word\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmprvo26ihf.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmprvo26ihf.swift:14:21:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            word += c\n                    ^\n/tmp/tmprvo26ihf.swift:20:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var s = s\n    var newString = \"\"\n    var i = 0\n\
    \    var j = 0\n    var k = 0\n    var l = s.count\n    var newStringArray = [String]()\n\
    \    var newStringArray2 = []\n    var newStringArray3 = [String]()\n    var newStringArray4\
    \ = [String]()\n    var newStringArray5 = [String]()\n    var newStringArray6\
    \ = [String]()\n    var newStringArray7 = [String]()\n    var newStringArray8\
    \ = [String]()\n    var newStringArray9 = [String]()\n    var newStringArray10\
    \ = [String]()\n    var newStringArray11 = [String]()\n    var newStringArray12\
    \ = [String]()\n    var newStringArray13 = [String]()\n    var newStringArray14\
    \ = [String]()\n    var newStringArray15 = [String]()\n    var newStringArray16\
    \ = [String]()\n    var newStringArray17 = [String]()\n    var newStringArray18\
    \ = [String]()\n    var newStringArray19 = [String]()\n    var newStringArray20\
    \ = [String]()\n    var newStringArray21 = [String]()\n    var newStringArray22\
    \ = [String]()\n    var newStringArray23 = [String]()\n    var newStringArray24\
    \ = [String]()\n    var newStringArray25 = [String]()\n    var newStringArray26\
    \ = [String]()\n    var newStringArray27 = [String]()\n    var newStringArray28\
    \ = [String]()\n    var newStringArray29 = [String]()\n    var newStringArray30\
    \ = [String]()\n    var newStringArray31 = [String]()\n    var newStringArray32\
    \ = [String]()\n    var newStringArray33 = [String]()\n    var newStringArray34\
    \ = [String]()\n    var newStringArray35 = [String]()\n    var newStringArray36\
    \ = [String]()\n    var newStringArray37 = [String]()\n    var newStringArray38\
    \ = [String]()\n    var newStringArray39 = [String]()\n    var newStringArray40\
    \ = [String]()\n    var newStringArray41 = [String]()\n    var newStringArray42\
    \ = [String]()\n    var newStringArray43 = [String]()\n    var newStringArray44\
    \ = [String]()\n    var newStringArray45 = [String]()\n    var newStringArray46\
    \ = [String]()\n    var newStringArray47 = [String]()\n    var newStringArray48\
    \ = [String]()\n    var newStringArray49 = [String]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmptrry54wt.swift:16:27: error: empty collection literal requires\
    \ an explicit type\n    var newStringArray2 = []\n                          ^~\n\
    /tmp/tmptrry54wt.swift:63:28: error: expected member name or constructor call\
    \ after type name\n    var newStringArray49 = [String]\n                     \
    \      ^\n/tmp/tmptrry54wt.swift:63:35: note: add arguments after the type to\
    \ construct a value of the type\n    var newStringArray49 = [String]\n       \
    \                           ^\n                                   ()\n/tmp/tmptrry54wt.swift:63:35:\
    \ note: use '.self' to reference the type object\n    var newStringArray49 = [String]\n\
    \                                  ^\n                                   .self\n\
    /tmp/tmptrry54wt.swift:9:9: warning: variable 's' was never mutated; consider\
    \ changing to 'let' constant\n    var s = s\n    ~~~ ^\n    let\n/tmp/tmptrry54wt.swift:10:9:\
    \ warning: initialization of variable 'newString' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var newString = \"\"\n    ~~~~^~~~~~~~~\n\
    \    _\n/tmp/tmptrry54wt.swift:11:9: warning: initialization of variable 'i' was\
    \ never used; consider replacing with assignment to '_' or removing it\n    var\
    \ i = 0\n    ~~~~^\n    _\n/tmp/tmptrry54wt.swift:12:9: warning: initialization\
    \ of variable 'j' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    var j = 0\n    ~~~~^\n    _\n/tmp/tmptrry54wt.swift:13:9: warning:\
    \ initialization of variable 'k' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var k = 0\n    ~~~~^\n    _\n/tmp/tmptrry54wt.swift:14:9:\
    \ warning: initialization of variable 'l' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var l = s.count\n    ~~~~^\n    _\n/tmp/tmptrry54wt.swift:15:9:\
    \ warning: initialization of variable 'newStringArray' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var newStringArray = [String]()\n\
    \    ~~~~^~~~~~~~~~~~~~\n    _\n/tmp/tmptrry54wt.swift:16:9: warning: initialization\
    \ of variable 'newStringArray2' was never used"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var isSpace\
    \ = false\n    for c in s.characters {\n        if isSpace {\n            result\
    \ += word\n            word = \"\"\n            isSpace = false\n        }\n \
    \       if c == \" \" {\n            isSpace = true\n        } else {\n      \
    \      word += String(c)\n        }\n    }\n    result += word\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpgt1l3zb7.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    for c in\
    \ s.characters {\n        if c == \" \" {\n            if word != \"\" {\n   \
    \             result += word\n                word = \"\"\n            }\n   \
    \     } else {\n            word += String(c)\n        }\n    }\n    if word !=\
    \ \"\" {\n        result += word\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpsgk4uf8x.swift:11:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var i = 0\n    for c in s.characters\
    \ {\n        if i == 0 {\n            result += c\n        }\n        \n     \
    \   if c == \" \" {\n            result += \" \"\n            i += 1\n       \
    \ } else {\n            result += String(Int(c) + Int(result[i-1])!)\n       \
    \     i += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp32tpq965.swift:11:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp32tpq965.swift:13:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmp32tpq965.swift:20:49:\
    \ error: no exact matches in call to subscript \n            result += String(Int(c)\
    \ + Int(result[i-1])!)\n                                                ^\n/tmp/tmp32tpq965.swift:20:49:\
    \ note: candidate expects value of type 'Range<String.Index>' for parameter #1\
    \ (got 'Character')\n            result += String(Int(c) + Int(result[i-1])!)\n\
    \                                                ^\n/tmp/tmp32tpq965.swift:20:49:\
    \ note: candidate expects value of type '(UnboundedRange_) -> ()' for parameter\
    \ #1 (got 'Character')\n            result += String(Int(c) + Int(result[i-1])!)\n\
    \                                                ^\n/tmp/tmp32tpq965.swift:20:30:\
    \ error: no exact matches in call to initializer \n            result += String(Int(c)\
    \ + Int(result[i-1])!)\n                             ^\n/tmp/tmp32tpq965.swift:20:30:\
    \ note: candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \            result += String(Int(c) + Int(result[i-1])!)\n                  \
    \           ^\n/tmp/tmp32tpq965.swift:20:30: note: candidate expects value of\
    \ type 'Float' for parameter #1 (got 'Character')\n            result += String(Int(c)\
    \ + Int(result[i-1])!)\n                             ^\n/tmp/tmp32tpq965.swift:20:30:\
    \ note: candidate expects value of type 'Double' for parameter #1 (got 'Character')\n\
    \            result += String(Int(c) + Int(result[i-1])!)\n                  \
    \           ^\n/tmp/tmp32tpq965.swift:20:30: note: candidate expects value of\
    \ type 'Float80' for parameter #1 (got 'Character')\n            result += String(Int(c)\
    \ + Int(result[i-1])!)\n                         "
  stdout: ''
  timestamp: 1660014089
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var s = \"\"\n    var i = 0\n    var j = 0\n    var\
    \ k = 0\n    var l = s.count\n    var m = \"\"\n    var n = \"\"\n    var o =\
    \ \"\"\n    var p = 0\n    var q = 0\n    var r = \"\"\n    var s = \"\"\n   \
    \ var t = \"\"\n    var u = \"\"\n    var v = \"\"\n    var w = \"\"\n    var\
    \ x = \"\"\n    var y = \"\"\n    var z = \"\"\n    var a = \"\"\n    var b =\
    \ \"\"\n    var c = \"\"\n    var d = \"\"\n    var e = \"\"\n    var f = \"\"\
    \n    var g = \"\"\n    var h = \"\"\n    var i = \"\"\n    var j = \"\"\n   \
    \ var k = \"\"\n    var l = \"\"\n    var m = \"\"\n    var n = \"\"\n    var\
    \ o = \"\"\n    var p = 0\n    var q = 0\n    var r = \"\"\n    var s = \"\"\n\
    \    var t = \"\"\n    var u = \"\"\n    var v = \"\"\n    var w = \"\"\n    var\
    \ x = \"\"\n    var y = \"\"\n    var z = \"\"\n    var a = \"\"\n    var b =\
    \ \"\"\n    var c = \"\"\n    var d = \"\"\n    var e = \"\"\n    var f = \"\"\
    \n    var g = \"\"\n    var h = \"\"\n    var i = \"\"\n    var j = \"\"\n   \
    \ var k = \"\"\n    var l = \"\"\n    var m = \"\"\n    var n = \"\"\n    var\
    \ o = \"\"\n    var p = 0\n    var q = 0\n    var r = \"\"\n    var s = \"\"\n\
    \    var t = \"\"\n    var u = \"\"\n    var v = \"\"\n    var w = \"\"\n    var\
    \ x = \"\"\n    var y = \"\"\n    var z = \"\"\n    var a = \"\"\n    var b =\
    \ \"\"\n    var c = \"\"\n    var d = \"\"\n    var e = \"\"\n    var f = \"\"\
    \n    var g = \"\"\n    var h = \"\"\n    var i = \"\"\n    var j = \"\"\n   \
    \ var k = \"\"\n    var l = \"\"\n    var m = \"\"\n    var n = \"\"\n    var\
    \ o = \"\"\n    var p = 0\n    var q = 0\n    var r = \"\"\n    var s = \"\"\n\
    \    var t = \"\"\n    var u = \"\"\n    var v = \"\"\n    var w = \"\"\n    var\
    \ x = \"\"\n    var y = \"\"\n    var z = \"\"\n    var a = \"\"\n    var b =\
    \ \"\"\n    var c = \"\"\n    var d = \"\"\n    var e = \"\"\n    var f = \"\"\
    \n    var g = \"\"\n    var h = \"\"\n    var i = \"\"\n    var j = \"\"\n   \
    \ var k = \"\"\n    var l = \"\"\n    var m = \"\"\n    var n = \"\"\n    var\
    \ o = \"\"\n    var p = 0\n    var q = 0\n    var r = \"\"\n    var s = \"\"\n\
    \    var t = \"\"\n    var u = \"\"\n    var v = \"\"\n    var w = \"\"\n    var\
    \ x = \"\"\n    var y = \"\"\n    var z = \"\"\n    var a = \"\"\n    var b =\
    \ \"\"\n    var c = \"\"\n    var d = \"\"\n    var e = \"\"\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpi2_n2xag.swift:20:9: error: invalid redeclaration of 's'\n    var\
    \ s = \"\"\n        ^\n/tmp/tmpi2_n2xag.swift:9:9: note: 's' previously declared\
    \ here\n    var s = \"\"\n        ^\n/tmp/tmpi2_n2xag.swift:36:9: error: invalid\
    \ redeclaration of 'i'\n    var i = \"\"\n        ^\n/tmp/tmpi2_n2xag.swift:10:9:\
    \ note: 'i' previously declared here\n    var i = 0\n        ^\n/tmp/tmpi2_n2xag.swift:37:9:\
    \ error: invalid redeclaration of 'j'\n    var j = \"\"\n        ^\n/tmp/tmpi2_n2xag.swift:11:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmpi2_n2xag.swift:38:9:\
    \ error: invalid redeclaration of 'k'\n    var k = \"\"\n        ^\n/tmp/tmpi2_n2xag.swift:12:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmpi2_n2xag.swift:39:9:\
    \ error: invalid redeclaration of 'l'\n    var l = \"\"\n        ^\n/tmp/tmpi2_n2xag.swift:13:9:\
    \ note: 'l' previously declared here\n    var l = s.count\n        ^\n/tmp/tmpi2_n2xag.swift:40:9:\
    \ error: invalid redeclaration of 'm'\n    var m = \"\"\n        ^\n/tmp/tmpi2_n2xag.swift:14:9:\
    \ note: 'm' previously declared here\n    var m = \"\"\n        ^\n/tmp/tmpi2_n2xag.swift:41:9:\
    \ error: invalid redeclaration of 'n'\n    var n = \"\"\n        ^\n/tmp/tmpi2_n2xag.swift:15:9:\
    \ note: 'n' previously declared here\n    var n = \"\"\n        ^\n/tmp/tmpi2_n2xag.swift:42:9:\
    \ error: invalid redeclaration of 'o'\n    var o = \"\"\n        ^\n/tmp/tmpi2_n2xag.swift:16:9:\
    \ note: 'o' previously declared here\n    var o = \"\"\n        ^\n/tmp/tmpi2_n2xag.swift:43:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmpi2_n2xag.swift:17:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmpi2_n2xag.swift:44:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmpi2_n2xag.swift:18:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmpi2_n2xag.swift:45:9:\
    \ error: invalid redeclaration of 'r'\n    var r = \"\"\n        ^\n/tmp/tmpi2_n2xag.swift:19:9:\
    \ note: 'r' previously declared here\n    var r = \"\"\n        ^\n/tmp/tmpi2_n2xag.swift:46:9:\
    \ error: invalid redeclaration of 's'\n    var s = \"\"\n  "
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    for c in\
    \ s.characters {\n        if c.isWhitespace {\n            result += word\n  \
    \          word = \"\"\n        } else {\n            word += c.asciiValue\n \
    \       }\n    }\n    result += word\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp5xjta3ok.swift:11:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp5xjta3ok.swift:16:23:\
    \ error: cannot convert value of type 'UInt8?' to expected argument type 'String'\n\
    \            word += c.asciiValue\n                      ^\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        switch c {\n        case \" \":\n  \
    \          result += word\n            word = \"\"\n        case \".\":\n    \
    \        result += word\n            word = \"\"\n        default:\n         \
    \   word += String(c)\n        }\n    }\n    result += word\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpd669aplw.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpd669aplw.swift:11:9:\
    \ warning: initialization of variable 'i' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var i = 0\n    ~~~~^\n    _\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    for c in\
    \ s.characters {\n        if let _ = c {\n            word += String(c)\n    \
    \    } else {\n            result += word\n            word = \"\"\n        }\n\
    \    }\n    result += word\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpw5g7c28h.swift:11:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpw5g7c28h.swift:12:12:\
    \ error: initializer for conditional binding must have Optional type, not 'Character'\n\
    \        if let _ = c {\n           ^       ~\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var i = 0\n    while i < s.count\
    \ {\n        var j = i + 1\n        while j < s.count {\n            if s[i] ==\
    \ s[j] {\n                i += 1\n                j += 1\n            } else {\n\
    \                result += String(s[j])\n                j += 1\n            }\n\
    \        }\n        result += String(s[i])\n        i += 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpgw7jfc7h.swift:14:16: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n            if s[i]\
    \ == s[j] {\n               ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpgw7jfc7h.swift:14:24: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            if s[i] == s[j] {\n                       ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpgw7jfc7h.swift:18:34:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n                result += String(s[j])\n      \
    \                           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpgw7jfc7h.swift:22:26: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        result += String(s[i])\n                         ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    for c in\
    \ s.characters {\n        switch c {\n        case \" \":\n            result\
    \ += word\n            word = \"\"\n        case \".\":\n            result +=\
    \ word\n            word = \"\"\n        default:\n            word += String(c)\n\
    \        }\n    }\n    result += word\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp5e4hpy76.swift:11:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var newString = \"\"\n    var word = \"\"\n    var\
    \ newWord = \"\"\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = s.count\n\
    \    for (i = 0; i < l; i = i + 1) {\n        word = s.substringWithRange(i..<i\
    \ + 1)\n        newWord = String(word.characters.sorted())\n        newString\
    \ = newString + newWord\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp86lurqun.swift:16:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for (i = 0; i < l; i = i + 1) {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var words = s.split(separator:\
    \ \" \")\n    for word in words {\n        let chars = word.characters\n     \
    \   let sortedChars = chars.sorted()\n        let newWord = String(sortedChars)\n\
    \        result += newWord\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp3djv7q0d.swift:12:26: error: 'characters' is unavailable: Please\
    \ use Substring directly\n        let chars = word.characters\n              \
    \           ^~~~~~~~~~\nSwift.Substring:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: Substring { get set }\n           \
    \    ^\n/tmp/tmp3djv7q0d.swift:10:9: warning: variable 'words' was never mutated;\
    \ consider changing to 'let' constant\n    var words = s.split(separator: \" \"\
    )\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    for c in\
    \ s.characters {\n        if c == ' ' {\n            result += word\n        \
    \    word = \"\"\n        } else {\n            word += String(c)\n        }\n\
    \    }\n    result += word\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpy1su95g8.swift:12:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == ' ' {\n                ^~~\n                \" \"\n\
    /tmp/tmpy1su95g8.swift:11:16: error: 'characters' is unavailable: Please use String\
    \ directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var isSpace\
    \ = false\n    for c in s {\n        if isSpace {\n            result += word\n\
    \            word = \"\"\n            isSpace = false\n        }\n        if c\
    \ == \" \" {\n            isSpace = true\n        } else {\n            word +=\
    \ c\n        }\n    }\n    result += word\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmppx3ox7tt.swift:21:21: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            word += c\n                \
    \    ^\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var words = s.split(separator:\
    \ \" \")\n    for word in words {\n        let chars = word.characters.map { String($0)\
    \ }\n        let sortedChars = chars.sorted(by: { $0.asciiValue < $1.asciiValue\
    \ })\n        let newWord = String(sortedChars)\n        result += newWord + \"\
    \ \"\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpc99than0.swift:12:26: error: 'characters' is unavailable: Please\
    \ use Substring directly\n        let chars = word.characters.map { String($0)\
    \ }\n                         ^~~~~~~~~~\nSwift.Substring:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: Substring { get set }\n\
    \               ^\n/tmp/tmpc99than0.swift:13:49: error: value of type 'String'\
    \ has no member 'asciiValue'\n        let sortedChars = chars.sorted(by: { $0.asciiValue\
    \ < $1.asciiValue })\n                                             ~~ ^~~~~~~~~~\n\
    /tmp/tmpc99than0.swift:13:65: error: value of type 'String' has no member 'asciiValue'\n\
    \        let sortedChars = chars.sorted(by: { $0.asciiValue < $1.asciiValue })\n\
    \                                                             ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    for c in\
    \ s.characters {\n        if c.isLetter {\n            word += c.asciiValue\n\
    \        } else {\n            if word != \"\" {\n                result += String(word)\n\
    \                word = \"\"\n            }\n            result += c.asciiValue\n\
    \        }\n    }\n    if word != \"\" {\n        result += String(word)\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpi3x2hb2i.swift:11:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpi3x2hb2i.swift:13:23:\
    \ error: cannot convert value of type 'UInt8?' to expected argument type 'String'\n\
    \            word += c.asciiValue\n                      ^\n/tmp/tmpi3x2hb2i.swift:19:25:\
    \ error: cannot convert value of type 'UInt8?' to expected argument type 'String'\n\
    \            result += c.asciiValue\n                        ^\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if c == \" \" {\n            result\
    \ += word\n            word = \"\"\n        } else {\n            word += String(c)\n\
    \        }\n    }\n    result += word\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpxdryi0l7.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpxdryi0l7.swift:11:9:\
    \ warning: initialization of variable 'i' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var i = 0\n    ~~~~^\n    _\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    for c in s.characters {\n  \
    \      let ascii = Int(c)\n        if ascii < 97 {\n            result += String(Int(c)\
    \ + 1)\n        } else {\n            result += String(Int(c) - 97)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpltavnldh.swift:10:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpltavnldh.swift:11:21:\
    \ error: no exact matches in call to initializer \n        let ascii = Int(c)\n\
    \                    ^\nSwift.Int:7:12: note: candidate expects value of type\
    \ 'Float16' for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float)\n     \
    \      ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Double)\n        \
    \   ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Character')\n    public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12:\
    \ note: candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'Character')\n\
    \    @inlinable public init?(_ description: String)\n                      ^\n\
    /tmp/tmpltavnldh.swift:13:30: error: no exact matches in call to initializer \n\
    \            result += String(Int(c) + 1)\n                             ^\nSwift.Int:7:12:\
    \ note: candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate\
    \ expects value of type 'Float' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'Character')\n    public init(_\
    \ so"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var newString = \"\"\n    for char in s.characters\
    \ {\n        let ascii = Int(char)\n        if ascii < 97 {\n            newString\
    \ += \"a\"\n        } else if ascii < 123 {\n            newString += \"b\"\n\
    \        } else if ascii < 127 {\n            newString += \"c\"\n        } else\
    \ {\n            newString += \"d\"\n        }\n    }\n    return newString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp2qrgdb9q.swift:10:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp2qrgdb9q.swift:11:21:\
    \ error: no exact matches in call to initializer \n        let ascii = Int(char)\n\
    \                    ^\nSwift.Int:7:12: note: candidate expects value of type\
    \ 'Float16' for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float)\n     \
    \      ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Double)\n        \
    \   ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Character')\n    public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12:\
    \ note: candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'Character')\n\
    \    @inlinable public init?(_ description: String)\n                      ^\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var isSpace\
    \ = false\n    for c in s.characters {\n        if isSpace {\n            result\
    \ += word\n            word = \"\"\n            isSpace = false\n        }\n \
    \       if c == \" \" {\n            isSpace = true\n        } else {\n      \
    \      word += String(c)\n        }\n    }\n    result += word\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpgt1l3zb7.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    for char in s.characters {\n\
    \        let ascii = Int(char)\n        if ascii < 97 || ascii > 122 {\n     \
    \       result += String(char)\n        } else {\n            result += String(UnicodeScalar(ascii).value)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpwyg36olx.swift:10:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpwyg36olx.swift:11:21:\
    \ error: no exact matches in call to initializer \n        let ascii = Int(char)\n\
    \                    ^\nSwift.Int:7:12: note: candidate expects value of type\
    \ 'Float16' for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float)\n     \
    \      ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Double)\n        \
    \   ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Character')\n    public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12:\
    \ note: candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'Character')\n\
    \    @inlinable public init?(_ description: String)\n                      ^\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if c == \" \" {\n            result\
    \ += word\n            word = \"\"\n        } else {\n            word += String(c)\n\
    \        }\n    }\n    result += word\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpxdryi0l7.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpxdryi0l7.swift:11:9:\
    \ warning: initialization of variable 'i' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var i = 0\n    ~~~~^\n    _\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var words = s.split(separator:\
    \ \" \")\n    for word in words {\n        var newWord = \"\"\n        for char\
    \ in word {\n            newWord += String(UnicodeScalar(Int(char.value)!))\n\
    \        }\n        result += newWord\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpj9l1s6_k.swift:14:31: error: value of optional type 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>') must be unwrapped to a value of type 'UnicodeScalar'\
    \ (aka 'Unicode.Scalar')\n            newWord += String(UnicodeScalar(Int(char.value)!))\n\
    \                              ^\n/tmp/tmpj9l1s6_k.swift:14:31: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \         newWord += String(UnicodeScalar(Int(char.value)!))\n               \
    \               ^\n                                                          \
    \    ?? <#default value#>\n/tmp/tmpj9l1s6_k.swift:14:31: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n            newWord\
    \ += String(UnicodeScalar(Int(char.value)!))\n                              ^\n\
    \                                                             !\n/tmp/tmpj9l1s6_k.swift:14:54:\
    \ error: value of type 'Character' has no member 'value'\n            newWord\
    \ += String(UnicodeScalar(Int(char.value)!))\n                               \
    \                 ~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var s = s\n    var result = [String]()\n    var lastWord\
    \ = \"\"\n    var lastChar = \"\"\n    var lastAsciiValue = 0\n    var lastAsciiValueIndex\
    \ = 0\n    var lastAsciiValueIndex2 = 0\n    var lastAsciiValueIndex3 = 0\n  \
    \  var lastAsciiValueIndex4 = 0\n    var lastAsciiValueIndex5 = 0\n    var lastAsciiValueIndex6\
    \ = 0\n    var lastAsciiValueIndex7 = 0\n    var lastAsciiValueIndex8 = 0\n  \
    \  var lastAsciiValueIndex9 = 0\n    var lastAsciiValueIndex10 = 0\n    var lastAsciiValueIndex11\
    \ = 0\n    var lastAsciiValueIndex12 = 0\n    var lastAsciiValueIndex13 = 0\n\
    \    var lastAsciiValueIndex14 = 0\n    var lastAsciiValueIndex15 = 0\n    var\
    \ lastAsciiValueIndex16 = 0\n    var lastAsciiValueIndex17 = 0\n    var lastAsciiValueIndex18\
    \ = 0\n    var lastAsciiValueIndex19 = 0\n    var lastAsciiValueIndex20 = 0\n\
    \    var lastAsciiValueIndex21 = 0\n    var lastAsciiValueIndex22 = 0\n    var\
    \ lastAsciiValueIndex23 = 0\n    var lastAsciiValueIndex24 = 0\n    var lastAsciiValueIndex25\
    \ = 0\n    var lastAsciiValueIndex26 = 0\n    var lastAsciiValueIndex27 = 0\n\
    \    var lastAsciiValueIndex28 = 0\n    var lastAsciiValueIndex29 = 0\n    var\
    \ lastAsciiValueIndex30 = 0\n    var lastAsciiValueIndex31 = 0\n    var lastAsciiValueIndex32\
    \ = 0\n    var lastAsciiValueIndex33 = 0\n    var lastAsciiValueIndex34 = 0\n\
    \    var lastAsciiValueIndex35 = 0\n    var lastAsciiValueIndex36 = 0\n    var\
    \ lastAsciiValueIndex37 = 0\n    var lastAsciiValueIndex38 = 0\n    var lastAsciiValueIndex39\
    \ = 0\n    var lastAsciiValueIndex40 = 0\n    var lastAsciiValueIndex41 = 0\n\
    \    var lastAsciiValueIndex42 = 0\n    var lastAsciiValueIndex43 = 0\n    var\
    \ lastAsciiValueIndex44 = 0\n    var lastAsciiValueIndex45 = 0\n    var lastAsciiValueIndex46\
    \ = 0\n    var lastAsciiValueIndex47 = 0\n    var lastAsciiValueIndex48 = 0\n\
    \    var lastAsci\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpopvbzvzp.swift:62:9: error: type annotation missing in pattern\n\
    \    var lastAsci\n        ^\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    for c in\
    \ s.characters {\n        if c.isLetter {\n            word += c\n        } else\
    \ {\n            if word != \"\" {\n                result += word\n         \
    \       word = \"\"\n            }\n            result += c\n        }\n    }\n\
    \    if word != \"\" {\n        result += word\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpqbdsdlmj.swift:11:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpqbdsdlmj.swift:13:21:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            word += c\n                    ^\n/tmp/tmpqbdsdlmj.swift:19:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    for c in\
    \ s.characters {\n        switch c {\n        case \" \":\n            result\
    \ += word\n            word = \"\"\n        case \".\":\n            result +=\
    \ word\n            word = \"\"\n        default:\n            word += String(c)\n\
    \        }\n    }\n    result += word\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp5e4hpy76.swift:11:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var lastWord = \"\"\n    for\
    \ char in s.characters {\n        let asciiValue = Int(char)\n        if asciiValue\
    \ > 96 {\n            result += String(lastWord)\n            lastWord = \"\"\n\
    \        } else {\n            lastWord += String(char)\n        }\n    }\n  \
    \  result += String(lastWord)\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpmtpz2qo4.swift:11:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpmtpz2qo4.swift:12:26:\
    \ error: no exact matches in call to initializer \n        let asciiValue = Int(char)\n\
    \                         ^\nSwift.Int:7:12: note: candidate expects value of\
    \ type 'Float16' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value of type\
    \ 'Float' for parameter #1 (got 'Character')\n    public init(_ source: Float)\n\
    \           ^\nSwift.Int:12:12: note: candidate expects value of type 'Double'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Double)\n    \
    \       ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Float80)\n       \
    \    ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\nSwift.FixedWidthInteger:3:23: note: candidate expects value of type\
    \ 'String' for parameter #1 (got 'Character')\n    @inlinable public init?(_ description:\
    \ String)\n                      ^\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var index\
    \ = 0\n    for c in s.characters {\n        if c == \" \" {\n            if word\
    \ != \"\" {\n                result += word\n                word = \"\"\n   \
    \         }\n        } else {\n            word += String(c)\n        }\n    }\n\
    \    if word != \"\" {\n        result += word\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmppjtp6wee.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmppjtp6wee.swift:11:9:\
    \ warning: initialization of variable 'index' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var index = 0\n    ~~~~^~~~~\n  \
    \  _\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    for word in s.split(\" \") {\n\
    \        let chars = word.characters\n        let sortedChars = chars.sorted()\n\
    \        let newWord = String(sortedChars)\n        result += newWord + \" \"\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpy_h5i6lh.swift:10:19: error: no exact matches in call to instance\
    \ method 'split'\n    for word in s.split(\" \") {\n                  ^\nSwift.Sequence:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var words = s.split(separator:\
    \ \" \")\n    for word in words {\n        let chars = word.characters\n     \
    \   var sortedChars = chars.sorted()\n        for char in sortedChars {\n    \
    \        result += String(char)\n        }\n        result += \" \"\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpbaduojt2.swift:12:26: error: 'characters' is unavailable: Please\
    \ use Substring directly\n        let chars = word.characters\n              \
    \           ^~~~~~~~~~\nSwift.Substring:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: Substring { get set }\n           \
    \    ^\n/tmp/tmpbaduojt2.swift:10:9: warning: variable 'words' was never mutated;\
    \ consider changing to 'let' constant\n    var words = s.split(separator: \" \"\
    )\n    ~~~ ^\n    let\n/tmp/tmpbaduojt2.swift:13:13: warning: variable 'sortedChars'\
    \ was never mutated; consider changing to 'let' constant\n        var sortedChars\
    \ = chars.sorted()\n        ~~~ ^\n        let\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var s = s\n    var result = \"\"\n    var i = 0\n \
    \   var j = 0\n    var k = 0\n    var l = s.count\n    while i < l {\n       \
    \ if s[i] == \" \" {\n            j = i\n            while j < l && s[j] == \"\
    \ \" {\n                j += 1\n            }\n            k = j\n           \
    \ while k < l && s[k] == \" \" {\n                k += 1\n            }\n    \
    \        if k > j {\n                result += String(s[j])\n                j\
    \ = k\n                while j < l && s[j] == \" \" {\n                    j +=\
    \ 1\n                }\n                k = j\n                while k < l &&\
    \ s[k] == \" \" {\n                    k += 1\n                }\n           \
    \ }\n            else {\n                result += String(s[i])\n            \
    \    i += 1\n            }\n        }\n        else {\n            result += String(s[i])\n\
    \            i += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpv1ssw5j_.swift:16:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s[i] ==\
    \ \" \" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpv1ssw5j_.swift:18:28: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            while j < l && s[j] == \" \" {\n                           ^~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpv1ssw5j_.swift:22:28:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            while k < l && s[k] == \" \" {\n  \
    \                         ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpv1ssw5j_.swift:26:34: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \                result += String(s[j])\n                                 ^~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpv1ssw5j_.swift:28:32:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n                while j < l && s[j] == \" \" {\n\
    \                               ^~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpv1ssw5j_.swift:32:32: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \                while k < l && s[k] == \" \" {\n                            \
    \   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked\
    \ unavailabl"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var words = s.split(separator:\
    \ \" \")\n    for word in words {\n        var newWord = \"\"\n        for char\
    \ in word {\n            newWord += String(UnicodeScalar(Int(char.value)!))\n\
    \        }\n        result += newWord\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpj9l1s6_k.swift:14:31: error: value of optional type 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>') must be unwrapped to a value of type 'UnicodeScalar'\
    \ (aka 'Unicode.Scalar')\n            newWord += String(UnicodeScalar(Int(char.value)!))\n\
    \                              ^\n/tmp/tmpj9l1s6_k.swift:14:31: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \         newWord += String(UnicodeScalar(Int(char.value)!))\n               \
    \               ^\n                                                          \
    \    ?? <#default value#>\n/tmp/tmpj9l1s6_k.swift:14:31: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n            newWord\
    \ += String(UnicodeScalar(Int(char.value)!))\n                              ^\n\
    \                                                             !\n/tmp/tmpj9l1s6_k.swift:14:54:\
    \ error: value of type 'Character' has no member 'value'\n            newWord\
    \ += String(UnicodeScalar(Int(char.value)!))\n                               \
    \                 ~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    for word in s.split(\" \") {\n\
    \        let chars = word.characters\n        let sortedChars = chars.sorted()\n\
    \        let sortedString = String(sortedChars)\n        result += sortedString\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpnbi6d17v.swift:10:19: error: no exact matches in call to instance\
    \ method 'split'\n    for word in s.split(\" \") {\n                  ^\nSwift.Sequence:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if c == \" \" {\n            if word\
    \ != \"\" {\n                result += word\n                word = \"\"\n   \
    \         }\n        } else {\n            word += String(c)\n        }\n    }\n\
    \    if word != \"\" {\n        result += word\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp7aisietg.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp7aisietg.swift:11:9:\
    \ warning: initialization of variable 'i' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var i = 0\n    ~~~~^\n    _\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var newString = \"\"\n    var word = \"\"\n    var\
    \ isSpace = false\n    for c in s.characters {\n        if isSpace {\n       \
    \     newString += c\n            isSpace = false\n        } else {\n        \
    \    if c == \" \" {\n                isSpace = true\n            } else {\n \
    \               newString += c\n            }\n        }\n    }\n    return newString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpsrgwkm3d.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsrgwkm3d.swift:14:26:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            newString += c\n                         ^\n/tmp/tmpsrgwkm3d.swift:20:30:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                newString += c\n                             ^\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var lastWord = \"\"\n    for\
    \ char in s.characters {\n        if char == \" \" {\n            if lastWord\
    \ != \"\" {\n                result += lastWord\n                lastWord = \"\
    \"\n            }\n        } else {\n            lastWord += String(char)\n  \
    \      }\n    }\n    if lastWord != \"\" {\n        result += lastWord\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp6yd0qsti.swift:11:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if c == \" \" {\n            result\
    \ += word\n            word = \"\"\n        } else {\n            word += String(c)\n\
    \        }\n    }\n    result += word\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpxdryi0l7.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpxdryi0l7.swift:11:9:\
    \ warning: initialization of variable 'i' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var i = 0\n    ~~~~^\n    _\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var isSpace\
    \ = false\n    for c in s.characters {\n        if isSpace {\n            result\
    \ += word\n            word = \"\"\n            isSpace = false\n        }\n \
    \       if c == \" \" {\n            isSpace = true\n        } else {\n      \
    \      word += String(c)\n        }\n    }\n    result += word\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpgt1l3zb7.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var newString = \"\"\n    var words = s.split(separator:\
    \ \" \")\n    var sortedWords = words.sorted(by: {$0.compare($1) == .orderedAscending})\n\
    \    for word in sortedWords {\n        newString += String(word.unicodeScalars.first!)\n\
    \    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp2gqrzt_c.swift:11:44: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    var sortedWords = words.sorted(by:\
    \ {$0.compare($1) == .orderedAscending})\n                                   \
    \     ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    for c in s.characters {\n  \
    \      let value = Int(c) ?? 0\n        let newValue = value + Int(arc4random_uniform(UInt32(value)))\n\
    \        let newChar = UnicodeScalar(newValue)\n        result += String(newChar)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp03qdzbum.swift:10:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp03qdzbum.swift:11:25:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        let value = Int(c) ?? 0\n                        ^\n/tmp/tmp03qdzbum.swift:12:36:\
    \ error: cannot find 'arc4random_uniform' in scope\n        let newValue = value\
    \ + Int(arc4random_uniform(UInt32(value)))\n                                 \
    \  ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var isSpace\
    \ = false\n    for c in s.characters {\n        if isSpace {\n            result\
    \ += word\n            word = \"\"\n            isSpace = false\n        }\n \
    \       if c == \" \" {\n            isSpace = true\n        } else {\n      \
    \      word += String(c)\n        }\n    }\n    result += word\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpgt1l3zb7.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    for word in s.split(separator:\
    \ \" \") {\n        let chars = word.characters\n        var sortedChars = chars.sorted()\n\
    \        for char in sortedChars {\n            result += String(char)\n     \
    \   }\n        result += \" \"\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpy7umihf8.swift:11:26: error: 'characters' is unavailable: Please\
    \ use Substring directly\n        let chars = word.characters\n              \
    \           ^~~~~~~~~~\nSwift.Substring:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: Substring { get set }\n           \
    \    ^\n/tmp/tmpy7umihf8.swift:12:13: warning: variable 'sortedChars' was never\
    \ mutated; consider changing to 'let' constant\n        var sortedChars = chars.sorted()\n\
    \        ~~~ ^\n        let\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var s = \"\"\n    var i = 0\n    for c in s.characters\
    \ {\n        if c.isWhitespace {\n            s += \" \"\n        } else {\n \
    \           s += c.asciiValue\n        }\n    }\n    return s\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp4ixwj0bm.swift:11:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp4ixwj0bm.swift:15:20:\
    \ error: cannot convert value of type 'UInt8?' to expected argument type 'String'\n\
    \            s += c.asciiValue\n                   ^\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    for c in\
    \ s.characters {\n        switch c {\n        case \" \":\n            if word\
    \ != \"\" {\n                result += word\n                word = \"\"\n   \
    \         }\n        case \".\":\n            result += \"!\"\n        default:\n\
    \            word += String(c)\n        }\n    }\n    if word != \"\" {\n    \
    \    result += word\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp1chn_xyg.swift:11:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var isSpace\
    \ = false\n    for c in s.characters {\n        if isSpace {\n            result\
    \ += word\n            word = \"\"\n            isSpace = false\n        }\n \
    \       if c == \" \" {\n            isSpace = true\n        } else {\n      \
    \      word += String(c)\n        }\n    }\n    result += word\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpgt1l3zb7.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var words = s.split(separator:\
    \ \" \")\n    var sortedWords = words.sorted(by: { $0.compare($1) == .orderedAscending\
    \ })\n    for word in sortedWords {\n        result += String(word.unicodeScalars.map\
    \ { $0.value })\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpk1n094sf.swift:11:45: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    var sortedWords = words.sorted(by:\
    \ { $0.compare($1) == .orderedAscending })\n                                 \
    \        ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    for char in s.characters {\n\
    \        let asciiValue = Int(char)\n        if asciiValue > 96 {\n          \
    \  result += String(UnicodeScalar(asciiValue - 96))\n        } else {\n      \
    \      result += String(UnicodeScalar(asciiValue))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp_nyhsx7h.swift:10:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp_nyhsx7h.swift:11:26:\
    \ error: no exact matches in call to initializer \n        let asciiValue = Int(char)\n\
    \                         ^\nSwift.Int:7:12: note: candidate expects value of\
    \ type 'Float16' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value of type\
    \ 'Float' for parameter #1 (got 'Character')\n    public init(_ source: Float)\n\
    \           ^\nSwift.Int:12:12: note: candidate expects value of type 'Double'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Double)\n    \
    \       ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Float80)\n       \
    \    ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\nSwift.FixedWidthInteger:3:23: note: candidate expects value of type\
    \ 'String' for parameter #1 (got 'Character')\n    @inlinable public init?(_ description:\
    \ String)\n                      ^\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var i = 0\n    for c in s.characters\
    \ {\n        if c == ' ' {\n            result += \" \"\n        } else {\n  \
    \          result += String(UnicodeScalar(c).value)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpsk60fu7g.swift:12:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == ' ' {\n                ^~~\n                \" \"\n\
    /tmp/tmpsk60fu7g.swift:11:16: error: 'characters' is unavailable: Please use String\
    \ directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpsk60fu7g.swift:15:30: error: no exact\
    \ matches in call to initializer \n            result += String(UnicodeScalar(c).value)\n\
    \                             ^\nSwift.Unicode.Scalar:7:23: note: candidate expects\
    \ value of type 'UInt8' for parameter #1 (got 'Character')\n    @inlinable public\
    \ init(_ v: UInt8)\n                      ^\nSwift.Unicode.Scalar:8:23: note:\
    \ candidate expects value of type 'Unicode.Scalar' for parameter #1 (got 'Character')\n\
    \    @inlinable public init(_ v: Unicode.Scalar)\n                      ^\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var newString = \"\"\n    var newWord = \"\"\n    var\
    \ newSpace = \"\"\n    var newWordArray = [String]()\n    var newSpaceArray =\
    \ [String]()\n    var newStringArray = [String]()\n    var newStringArray2 = []\n\
    \    var newStringArray3 = [String]()\n    var newStringArray4 = [String]()\n\
    \    var newStringArray5 = [String]()\n    var newStringArray6 = [String]()\n\
    \    var newStringArray7 = [String]()\n    var newStringArray8 = [String]()\n\
    \    var newStringArray9 = [String]()\n    var newStringArray10 = [String]()\n\
    \    var newStringArray11 = [String]()\n    var newStringArray12 = [String]()\n\
    \    var newStringArray13 = [String]()\n    var newStringArray14 = [String]()\n\
    \    var newStringArray15 = [String]()\n    var newStringArray16 = [String]()\n\
    \    var newStringArray17 = [String]()\n    var newStringArray18 = [String]()\n\
    \    var newStringArray19 = [String]()\n    var newStringArray20 = [String]()\n\
    \    var newStringArray21 = [String]()\n    var newStringArray22 = [String]()\n\
    \    var newStringArray23 = [String]()\n    var newStringArray24 = [String]()\n\
    \    var newStringArray25 = [String]()\n    var newStringArray26 = [String]()\n\
    \    var newStringArray27 = [String]()\n    var newStringArray28 = [String]()\n\
    \    var newStringArray29 = [String]()\n    var newStringArray30 = [String]()\n\
    \    var newStringArray31 = [String]()\n    var newStringArray32 = [String]()\n\
    \    var newStringArray33 = [String]()\n    var newStringArray34 = [String]()\n\
    \    var newStringArray35 = [String]()\n    var newStringArray36 = [String]()\n\
    \    var newStringArray37 = [String]()\n    var newStringArray38 = [String]()\n\
    \    var newStringArray39 = [String]()\n    var newStringArray40 = [String]()\n\
    \    var newStringArray41 = [String]()\n    var newStringArray42 = [String]()\n\
    \    var newStringArray43 = [String]()\n    var newStringArray44 = [String]()\n\
    \    var newStringArray45 = [String]()\n    var newStringArray46 = [String]()\n\
    \    var newStringArray47 = [String]()\n    var newStringArray48 = [String]()\n\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpef5r20gs.swift:15:27: error: empty collection literal requires\
    \ an explicit type\n    var newStringArray2 = []\n                          ^~\n\
    /tmp/tmpef5r20gs.swift:9:9: warning: initialization of variable 'newString' was\
    \ never used; consider replacing with assignment to '_' or removing it\n    var\
    \ newString = \"\"\n    ~~~~^~~~~~~~~\n    _\n/tmp/tmpef5r20gs.swift:10:9: warning:\
    \ initialization of variable 'newWord' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var newWord = \"\"\n    ~~~~^~~~~~~\n\
    \    _\n/tmp/tmpef5r20gs.swift:11:9: warning: initialization of variable 'newSpace'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var newSpace = \"\"\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpef5r20gs.swift:12:9:\
    \ warning: initialization of variable 'newWordArray' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var newWordArray = [String]()\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpef5r20gs.swift:13:9: warning: initialization\
    \ of variable 'newSpaceArray' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var newSpaceArray = [String]()\n    ~~~~^~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpef5r20gs.swift:14:9: warning: initialization of variable 'newStringArray'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var newStringArray = [String]()\n    ~~~~^~~~~~~~~~~~~~\n    _\n/tmp/tmpef5r20gs.swift:15:9:\
    \ warning: initialization of variable 'newStringArray2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var newStringArray2 = []\n\
    \    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpef5r20gs.swift:16:9: warning: initialization\
    \ of variable 'newStringArray3' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var newStringArray3 = [String]()\n    ~~~~^~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpef5r20gs.swift:17:9: warning: initialization of variable 'newStringArray4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var newStringArray4 = [String]()\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpe"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var words = s.split(separator:\
    \ \" \")\n    for word in words {\n        let chars = word.characters.sorted()\n\
    \        let charsString = String(chars)\n        let newWord = charsString.replacingOccurrences(of:\
    \ \" \", with: \"\")\n        let newWordString = newWord.characters.sorted().joined(separator:\
    \ \"\")\n        result += newWordString\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp0rkn0a5j.swift:12:26: error: 'characters' is unavailable: Please\
    \ use Substring directly\n        let chars = word.characters.sorted()\n     \
    \                    ^~~~~~~~~~\nSwift.Substring:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: Substring { get set }\n \
    \              ^\n/tmp/tmp0rkn0a5j.swift:14:35: error: value of type 'String'\
    \ has no member 'replacingOccurrences'\n        let newWord = charsString.replacingOccurrences(of:\
    \ \" \", with: \"\")\n                      ~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    for c in\
    \ s.characters {\n        if c.isLetter {\n            word += c.asciiValue\n\
    \        } else {\n            if word != \"\" {\n                result += String(word)\n\
    \                word = \"\"\n            }\n            result += String(c.asciiValue)\n\
    \        }\n    }\n    if word != \"\" {\n        result += String(word)\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpwor0bqao.swift:11:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpwor0bqao.swift:13:23:\
    \ error: cannot convert value of type 'UInt8?' to expected argument type 'String'\n\
    \            word += c.asciiValue\n                      ^\n/tmp/tmpwor0bqao.swift:19:23:\
    \ error: no exact matches in call to initializer \n            result += String(c.asciiValue)\n\
    \                      ^\nSwift.String:4:23: note: found candidate with type 'UInt8?'\n\
    \    @inlinable public init<T>(_ value: T) where T : LosslessStringConvertible\n\
    \                      ^\nSwift.String:2:12: note: found candidate with type 'UInt8?'\n\
    \    public init<T>(_ value: T, radix: Int = 10, uppercase: Bool = false) where\
    \ T : BinaryInteger\n           ^\nSwift.String:2:12: note: incorrect labels for\
    \ candidate (have: '(_:)', expected: '(describing:)')\n    public init<Subject>(describing\
    \ instance: Subject)\n           ^\nSwift.String:6:12: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(reflecting:)')\n    public init<Subject>(reflecting\
    \ subject: Subject)\n           ^\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var words = s.split(separator:\
    \ \" \")\n    for word in words {\n        let chars = word.characters\n     \
    \   var newWord = \"\"\n        for char in chars {\n            let ascii = char.asciiValue\n\
    \            if ascii < 65 {\n                newWord += \"A\"\n            }\
    \ else if ascii < 66 {\n                newWord += \"B\"\n            } else if\
    \ ascii < 67 {\n                newWord += \"C\"\n            } else if ascii\
    \ < 68 {\n                newWord += \"D\"\n            } else if ascii < 69 {\n\
    \                newWord += \"E\"\n            } else if ascii < 70 {\n      \
    \          newWord += \"F\"\n            } else if ascii < 71 {\n            \
    \    newWord += \"G\"\n            } else if ascii < 72 {\n                newWord\
    \ += \"H\"\n            } else if ascii < 73 {\n                newWord += \"\
    I\"\n            } else if ascii < 74 {\n                newWord += \"J\"\n  \
    \          } else if ascii < 75 {\n                newWord += \"K\"\n        \
    \    } else if ascii < 76 {\n                newWord += \"L\"\n            } else\
    \ if ascii < 77 {\n                newWord += \"M\"\n            } else if ascii\
    \ < 78 {\n                newWord += \"N\"\n            } else if ascii < 79 {\n\
    \                newWord += \"O\"\n            } else if ascii < 80 {\n      \
    \          newWord += \"P\"\n            } else if ascii < 81 {\n            \
    \    newWord += \"Q\"\n            } else if ascii < 82 {\n                newWord\
    \ += \"R\"\n            } else if ascii < 83 {\n                newWord += \"\
    S\"\n            } else if ascii < 84 {\n                newWord += \"T\"\n  \
    \          } else if ascii < 85 {\n                newWord += \"U\"\n        \
    \    } else if ascii < 86 {\n                newWord += \"V\"\n            } else\
    \ if ascii < 87 {\n                newWord += \"W\"\n            } else if ascii\
    \ < 88 {\n                newWord += \"X\"\n            } else if ascii < 89 {\n\
    \                newWord += \"Y\"\n            } else if ascii < 90 {\n      \
    \          newWord += \"Z\"\n            } else {\n                newWord +=\
    \ \"_\"\n            }\n        }\n        result += newWord\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpssv3drem.swift:12:26: error: 'characters' is unavailable: Please\
    \ use Substring directly\n        let chars = word.characters\n              \
    \           ^~~~~~~~~~\nSwift.Substring:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: Substring { get set }\n           \
    \    ^\n/tmp/tmpssv3drem.swift:16:16: error: value of optional type 'UInt8?' must\
    \ be unwrapped to a value of type 'UInt8'\n            if ascii < 65 {\n     \
    \          ^\n/tmp/tmpssv3drem.swift:16:16: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n            if ascii < 65\
    \ {\n               ^\n                     ?? <#default value#>\n/tmp/tmpssv3drem.swift:16:16:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            if ascii < 65 {\n               ^\n                    !\n\
    /tmp/tmpssv3drem.swift:18:23: error: value of optional type 'UInt8?' must be unwrapped\
    \ to a value of type 'UInt8'\n            } else if ascii < 66 {\n           \
    \           ^\n/tmp/tmpssv3drem.swift:18:23: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n            } else if ascii\
    \ < 66 {\n                      ^\n                            ?? <#default value#>\n\
    /tmp/tmpssv3drem.swift:18:23: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n            } else if ascii < 66 {\n \
    \                     ^\n                           !\n/tmp/tmpssv3drem.swift:20:23:\
    \ error: value of optional type 'UInt8?' must be unwrapped to a value of type\
    \ 'UInt8'\n            } else if ascii < 67 {\n                      ^\n/tmp/tmpssv3drem.swift:20:23:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            } else if ascii < 67 {\n                      ^\n       \
    \                     ?? <#default value#>\n/tmp/tmpssv3drem.swift:20:23: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \            } else if ascii < 67 {\n                      ^\n               \
    \            !\n/t"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var words = s.split(separator:\
    \ \" \")\n    for word in words {\n        var chars = word.characters\n     \
    \   for char in chars {\n            var ascii = char.asciiValue\n           \
    \ if ascii < 65 {\n                ascii -= 65\n            }\n            if\
    \ ascii > 122 {\n                ascii -= 32\n            }\n            char.asciiValue\
    \ = ascii\n        }\n        result += String(chars)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpuuhj80gu.swift:12:26: error: 'characters' is unavailable: Please\
    \ use Substring directly\n        var chars = word.characters\n              \
    \           ^~~~~~~~~~\nSwift.Substring:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: Substring { get set }\n           \
    \    ^\n/tmp/tmpuuhj80gu.swift:15:16: error: value of optional type 'UInt8?' must\
    \ be unwrapped to a value of type 'UInt8'\n            if ascii < 65 {\n     \
    \          ^\n/tmp/tmpuuhj80gu.swift:15:16: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n            if ascii < 65\
    \ {\n               ^\n                     ?? <#default value#>\n/tmp/tmpuuhj80gu.swift:15:16:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            if ascii < 65 {\n               ^\n                    !\n\
    /tmp/tmpuuhj80gu.swift:16:17: error: value of optional type 'UInt8?' must be unwrapped\
    \ to a value of type 'UInt8'\n                ascii -= 65\n                ^\n\
    /tmp/tmpuuhj80gu.swift:16:17: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n                ascii -= 65\n        \
    \        ^\n                     !\n/tmp/tmpuuhj80gu.swift:18:16: error: value\
    \ of optional type 'UInt8?' must be unwrapped to a value of type 'UInt8'\n   \
    \         if ascii > 122 {\n               ^\n/tmp/tmpuuhj80gu.swift:18:16: note:\
    \ coalesce using '??' to provide a default when the optional value contains 'nil'\n\
    \            if ascii > 122 {\n               ^\n                     ?? <#default\
    \ value#>\n/tmp/tmpuuhj80gu.swift:18:16: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n            if ascii > 122 {\n\
    \               ^\n                    !\n/tmp/tmpuuhj80gu.swift:19:17: error:\
    \ value of optional type 'UInt8?' must be unwrapped to a value of type 'UInt8'\n\
    \                ascii -= 32\n                ^\n/tmp/tmpuuhj80gu.swift:19:17:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n                ascii -= 32\n        "
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var s = s\n    var newString = \"\"\n    var lastChar\
    \ = \"\"\n    var lastCharAsciiValue = 0\n    var lastWord = \"\"\n    var lastWordAsciiValue\
    \ = 0\n    var lastWordLength = 0\n    var lastWordLengthAsciiValue = 0\n    var\
    \ lastWordLengthAsciiValueAscending = 0\n    var lastWordLengthAsciiValueDescending\
    \ = 0\n    var lastWordLengthAsciiValueAscendingDescending = 0\n    var lastWordLengthAsciiValueDescendingAscending\
    \ = 0\n    var lastWordLengthAsciiValueAscendingAscending = 0\n    var lastWordLengthAsciiValueAscendingDescending\
    \ = 0\n    var lastWordLengthAsciiValueDescendingDescending = 0\n    var lastWordLengthAsciiValueDescendingAscending\
    \ = 0\n    var lastWordLengthAsciiValueAscendingAscending = 0\n    var lastWordLengthAsciiValueAscendingDescending\
    \ = 0\n    var lastWordLengthAsciiValueDescendingDescending = 0\n    var lastWordLengthAsciiValueAscendingAscending\
    \ = 0\n    var lastWordLengthAsciiValueAscendingDescending = 0\n    var lastWordLengthAsciiValueDescendingAscending\
    \ = 0\n    var lastWordLengthAsciiValueDescendingDescending = 0\n    var lastWordLengthAsciiValueAscendingAscending\
    \ = 0\n    var lastWordLengthAsciiValueAscendingDescending = 0\n    var lastWordLengthAsciiValueDescendingAscending\
    \ = 0\n    var lastWordLengthAsciiValueDescendingDescending = 0\n    var lastWordLengthAsciiValueAscendingAscending\
    \ = 0\n    var lastWordLengthAsciiValueAscendingDescending = 0\n    var lastWordLengthAsciiValueDescendingAscending\
    \ = 0\n    var lastWordLengthAsciiValueDescendingDescending = 0\n    var lastWordLengthAsciiValueAscendingAscending\
    \ = 0\n    var lastWordLengthAsciiValueAscendingDescending = 0\n    var lastWordLengthAsciiValueDescendingAscending\
    \ = 0\n    var lastWordLengthAsciiValueDescendingDescending = 0\n    var lastWordLengthAsciiValueAscendingAscending\
    \ = 0\n    var lastWordLengthAsciiValueAscendingDescending = 0\n    var lastWordLengthAsciiValueDescendingAscending\
    \ = 0\n    var lastWordLengthAsciiValueDescendingDescending = 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpvfsm0f_t.swift:22:9: error: invalid redeclaration of 'lastWordLengthAsciiValueAscendingDescending'\n\
    \    var lastWordLengthAsciiValueAscendingDescending = 0\n        ^\n/tmp/tmpvfsm0f_t.swift:19:9:\
    \ note: 'lastWordLengthAsciiValueAscendingDescending' previously declared here\n\
    \    var lastWordLengthAsciiValueAscendingDescending = 0\n        ^\n/tmp/tmpvfsm0f_t.swift:24:9:\
    \ error: invalid redeclaration of 'lastWordLengthAsciiValueDescendingAscending'\n\
    \    var lastWordLengthAsciiValueDescendingAscending = 0\n        ^\n/tmp/tmpvfsm0f_t.swift:20:9:\
    \ note: 'lastWordLengthAsciiValueDescendingAscending' previously declared here\n\
    \    var lastWordLengthAsciiValueDescendingAscending = 0\n        ^\n/tmp/tmpvfsm0f_t.swift:25:9:\
    \ error: invalid redeclaration of 'lastWordLengthAsciiValueAscendingAscending'\n\
    \    var lastWordLengthAsciiValueAscendingAscending = 0\n        ^\n/tmp/tmpvfsm0f_t.swift:21:9:\
    \ note: 'lastWordLengthAsciiValueAscendingAscending' previously declared here\n\
    \    var lastWordLengthAsciiValueAscendingAscending = 0\n        ^\n/tmp/tmpvfsm0f_t.swift:26:9:\
    \ error: invalid redeclaration of 'lastWordLengthAsciiValueAscendingDescending'\n\
    \    var lastWordLengthAsciiValueAscendingDescending = 0\n        ^\n/tmp/tmpvfsm0f_t.swift:19:9:\
    \ note: 'lastWordLengthAsciiValueAscendingDescending' previously declared here\n\
    \    var lastWordLengthAsciiValueAscendingDescending = 0\n        ^\n/tmp/tmpvfsm0f_t.swift:27:9:\
    \ error: invalid redeclaration of 'lastWordLengthAsciiValueDescendingDescending'\n\
    \    var lastWordLengthAsciiValueDescendingDescending = 0\n        ^\n/tmp/tmpvfsm0f_t.swift:23:9:\
    \ note: 'lastWordLengthAsciiValueDescendingDescending' previously declared here\n\
    \    var lastWordLengthAsciiValueDescendingDescending = 0\n        ^\n/tmp/tmpvfsm0f_t.swift:28:9:\
    \ error: invalid redeclaration of 'lastWordLengthAsciiValueAscendingAscending'\n\
    \    var lastWordLengthAsciiValueAscendingAscending = 0\n        ^\n/tmp/tmpvfsm0f_t.swift:21:9:\
    \ note: 'lastWordLengthAsciiValueAscendingAscending' previously declared here\n\
    \    var lastWordLengthAsciiValueAscendingAscend"
  stdout: ''
  timestamp: 1660014084
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var words = s.split(separator:\
    \ \" \")\n    for word in words {\n        var newWord = \"\"\n        for char\
    \ in word {\n            if char.isUppercase {\n                newWord += \"\
    Z\"\n            } else {\n                newWord += \"A\"\n            }\n \
    \       }\n        result += newWord\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: Exception
  stderr: 'tmpw3iioa2v/tmpw3iioa2v.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b08c0ca3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b08c099ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b08c099a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b08c09997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw3iioa2v                        0x000055c2992fc7d7 <unavailable> + 6103

    5    libc.so.6                          0x00002b08c0e8f460 __libc_start_main +
    245

    6    tmpw3iioa2v                        0x000055c2992fc419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var s = \"\"\n    var i = 0\n    for c in s.characters\
    \ {\n        if c == \" \" {\n            s += \" \"\n        } else {\n     \
    \       s += String(UnicodeScalar(UInt32(c)))\n        }\n    }\n    return s\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpgss30wy2.swift:11:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpgss30wy2.swift:15:39:\
    \ error: no exact matches in call to initializer \n            s += String(UnicodeScalar(UInt32(c)))\n\
    \                                      ^\n/tmp/tmpgss30wy2.swift:15:39: note:\
    \ candidate expects value of type 'Float16' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            s += String(UnicodeScalar(UInt32(c)))\n\
    \                                      ^\n/tmp/tmpgss30wy2.swift:15:39: note:\
    \ candidate expects value of type 'Float' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            s += String(UnicodeScalar(UInt32(c)))\n\
    \                                      ^\n/tmp/tmpgss30wy2.swift:15:39: note:\
    \ candidate expects value of type 'Double' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            s += String(UnicodeScalar(UInt32(c)))\n\
    \                                      ^\n/tmp/tmpgss30wy2.swift:15:39: note:\
    \ candidate expects value of type 'Float80' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            s += String(UnicodeScalar(UInt32(c)))\n\
    \                                      ^\n/tmp/tmpgss30wy2.swift:15:39: note:\
    \ candidate expects value of type 'Builtin.Int32' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            s += String(UnicodeScalar(UInt32(c)))\n\
    \                                      ^\n/tmp/tmpgss30wy2.swift:15:39: note:\
    \ candidate expects value of type 'Unicode.Scalar' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            s += String(UnicodeScalar(UInt32(c)))\n\
    \                                      ^\n/tmp/tmpgss30wy2.swift:15:25: error:\
    \ value of optional type 'UnicodeScalar?' (aka 'Optional<Unicode.Scalar>') must\
    \ be unwrapped to a value of type 'U"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if c == \" \" {\n            if word\
    \ != \"\" {\n                result += word\n                word = \"\"\n   \
    \         }\n        } else {\n            word += String(c)\n        }\n    }\n\
    \    if word != \"\" {\n        result += word\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp7aisietg.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp7aisietg.swift:11:9:\
    \ warning: initialization of variable 'i' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var i = 0\n    ~~~~^\n    _\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if c == \" \" {\n            if word\
    \ != \"\" {\n                result += word\n                word = \"\"\n   \
    \         }\n        } else {\n            word += String(c)\n        }\n    }\n\
    \    if word != \"\" {\n        result += word\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp7aisietg.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp7aisietg.swift:11:9:\
    \ warning: initialization of variable 'i' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var i = 0\n    ~~~~^\n    _\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    for c in\
    \ s.characters {\n        switch c {\n        case \" \":\n            result\
    \ += word\n            word = \"\"\n        case \".\":\n            word += c\n\
    \        default:\n            word += String(c)\n        }\n    }\n    result\
    \ += word\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp5uglv9dx.swift:11:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp5uglv9dx.swift:17:21:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            word += c\n                    ^\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var words = s.split(separator:\
    \ \" \")\n    var sortedWords = words.sorted(by: { $0.compare($1) == .orderedAscending\
    \ })\n    for word in sortedWords {\n        result += String(word.unicodeScalars.map\
    \ { $0.value })\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpk1n094sf.swift:11:45: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    var sortedWords = words.sorted(by:\
    \ { $0.compare($1) == .orderedAscending })\n                                 \
    \        ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var s = s\n    var newString = \"\"\n    var newWord\
    \ = \"\"\n    var word = \"\"\n    var i = 0\n    var j = 0\n    var k = 0\n \
    \   var l = s.count\n    var m = s.count\n    var n = s.count\n    var o = s.count\n\
    \    var p = s.count\n    var q = s.count\n    var r = s.count\n    var s = s.count\n\
    \    var t = s.count\n    var u = s.count\n    var v = s.count\n    var w = s.count\n\
    \    var x = s.count\n    var y = s.count\n    var z = s.count\n    var a = s.count\n\
    \    var b = s.count\n    var c = s.count\n    var d = s.count\n    var e = s.count\n\
    \    var f = s.count\n    var g = s.count\n    var h = s.count\n    var i = s.count\n\
    \    var j = s.count\n    var k = s.count\n    var l = s.count\n    var m = s.count\n\
    \    var n = s.count\n    var o = s.count\n    var p = s.count\n    var q = s.count\n\
    \    var r = s.count\n    var s = s.count\n    var t = s.count\n    var u = s.count\n\
    \    var v = s.count\n    var w = s.count\n    var x = s.count\n    var y = s.count\n\
    \    var z = s.count\n    var a = s.count\n    var b = s.count\n    var c = s.count\n\
    \    var d = s.count\n    var e = s.count\n    var f = s.count\n    var g = s.count\n\
    \    var h = s.count\n    var i = s.count\n    var j = s.count\n    var k = s.count\n\
    \    var l = s.count\n    var m = s.count\n    var n = s.count\n    var o = s.count\n\
    \    var p = s.count\n    var q = s.count\n    var r = s.count\n    var s = s.count\n\
    \    var t = s.count\n    var u = s.count\n    var v = s.count\n    var w = s.count\n\
    \    var x = s.count\n    var y = s.count\n    var z = s.count\n    var a = s.count\n\
    \    var b = s.count\n    var c = s.count\n    var d = s.count\n    var e = s.count\n\
    \    var f = s.count\n    var g = s.count\n    var h = s.count\n    var i = s.count\n\
    \    var j = s.count\n    var k = s.count\n    var l = s.count\n    var m = s.count\n\
    \    var n = s.count\n    var o = s.count\n    var p = s.count\n    var q = s.count\n\
    \    var r = s.count\n    var s = s.count\n    var t = s.count\n    var u = s.count\n\
    \    var v = s.count\n    var w = s.count\n    var x = s.count\n    var y = s.count\n\
    \    var z = s.count\n    var a = s.count\n    var b = s.count\n    var c = s.count\n\
    \    var d = s.\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpvrne3bm3.swift:112:14: error: expected member name following '.'\n\
    \    var d = s.\n             ^\n/tmp/tmpvrne3bm3.swift:23:9: error: invalid redeclaration\
    \ of 's'\n    var s = s.count\n        ^\n/tmp/tmpvrne3bm3.swift:9:9: note: 's'\
    \ previously declared here\n    var s = s\n        ^\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var isSpace\
    \ = false\n    for c in s.characters {\n        if isSpace {\n            result\
    \ += word\n            word = \"\"\n            isSpace = false\n        }\n \
    \       if c == \" \" {\n            isSpace = true\n        } else {\n      \
    \      word += String(c)\n        }\n    }\n    result += word\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpgt1l3zb7.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    for c in\
    \ s.characters {\n        switch c {\n        case \" \":\n            if word\
    \ != \"\" {\n                result += word\n                word = \"\"\n   \
    \         }\n        case \"\\n\":\n            if word != \"\" {\n          \
    \      result += word\n                word = \"\"\n            }\n        default:\n\
    \            word += String(c)\n        }\n    }\n    if word != \"\" {\n    \
    \    result += word\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp85gi1f9g.swift:11:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    for word in s.split(\" \") {\n\
    \        let charArr = word.characters\n        let sortedCharArr = charArr.sorted\
    \ { $0.asciiValue < $1.asciiValue }\n        let newWord = String(sortedCharArr)\n\
    \        result += newWord\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp6e4jzx4y.swift:10:19: error: no exact matches in call to instance\
    \ method 'split'\n    for word in s.split(\" \") {\n                  ^\nSwift.Sequence:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var lastChar\
    \ = \"\"\n    for char in s.characters {\n        if char == \" \" {\n       \
    \     if word != \"\" {\n                result += word\n                word\
    \ = \"\"\n            }\n        } else {\n            word += String(char)\n\
    \        }\n    }\n    if word != \"\" {\n        result += word\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmppoti_bb5.swift:12:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmppoti_bb5.swift:11:9:\
    \ warning: initialization of variable 'lastChar' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var lastChar = \"\"\n    ~~~~^~~~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    for c in\
    \ s.characters {\n        if c == \" \" {\n            result += word\n      \
    \      word = \"\"\n        } else {\n            word += String(c)\n        }\n\
    \    }\n    result += word\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpggunqsu3.swift:11:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    for char in s.characters {\n\
    \        let ascii = Int(char)\n        if ascii < 97 || ascii > 122 {\n     \
    \       result += String(char)\n        } else {\n            result += String(UnicodeScalar(ascii).value)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpwyg36olx.swift:10:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpwyg36olx.swift:11:21:\
    \ error: no exact matches in call to initializer \n        let ascii = Int(char)\n\
    \                    ^\nSwift.Int:7:12: note: candidate expects value of type\
    \ 'Float16' for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float)\n     \
    \      ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Double)\n        \
    \   ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Character')\n    public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12:\
    \ note: candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'Character')\n\
    \    @inlinable public init?(_ description: String)\n                      ^\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var words = s.split(separator:\
    \ \" \")\n    for word in words {\n        let chars = word.characters\n     \
    \   let sortedChars = chars.sorted()\n        let sortedString = String(sortedChars)\n\
    \        result += sortedString\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpxdtfl1hh.swift:12:26: error: 'characters' is unavailable: Please\
    \ use Substring directly\n        let chars = word.characters\n              \
    \           ^~~~~~~~~~\nSwift.Substring:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: Substring { get set }\n           \
    \    ^\n/tmp/tmpxdtfl1hh.swift:10:9: warning: variable 'words' was never mutated;\
    \ consider changing to 'let' constant\n    var words = s.split(separator: \" \"\
    )\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    for c in\
    \ s.characters {\n        switch c {\n        case \" \":\n            result\
    \ += word\n            word = \"\"\n        case \".\":\n            result +=\
    \ word\n            word = \"\"\n        default:\n            word += String(c)\n\
    \        }\n    }\n    result += word\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp5e4hpy76.swift:11:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var isSpace\
    \ = false\n    for c in s.characters {\n        if c == \" \" {\n            isSpace\
    \ = true\n            result += word\n            word = \"\"\n        } else\
    \ {\n            if isSpace {\n                word += c\n            } else {\n\
    \                word += String(UnicodeScalar(c))\n            }\n        }\n\
    \    }\n    result += word\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmph8_w1a8i.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmph8_w1a8i.swift:19:25:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                word += c\n                        ^\n/tmp/tmph8_w1a8i.swift:21:32:\
    \ error: no exact matches in call to initializer \n                word += String(UnicodeScalar(c))\n\
    \                               ^\nSwift.Unicode.Scalar:7:23: note: candidate\
    \ expects value of type 'UInt8' for parameter #1 (got 'Character')\n    @inlinable\
    \ public init(_ v: UInt8)\n                      ^\nSwift.Unicode.Scalar:8:23:\
    \ note: candidate expects value of type 'Unicode.Scalar' for parameter #1 (got\
    \ 'Character')\n    @inlinable public init(_ v: Unicode.Scalar)\n            \
    \          ^\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var s = \"\"\n    for char in s.characters {\n    \
    \    if char == \" \" {\n            s += \"-\"\n        } else {\n          \
    \  s += String(char)\n        }\n    }\n    return s\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp95c2hv8h.swift:10:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var words = s.split(separator:\
    \ \" \")\n    for word in words {\n        var newWord = \"\"\n        for char\
    \ in word {\n            if char.isUppercase {\n                newWord += \"\
    Z\"\n            } else {\n                newWord += \"A\"\n            }\n \
    \       }\n        result += newWord\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: Exception
  stderr: 'tmpw3iioa2v/tmpw3iioa2v.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b08c0ca3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b08c099ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b08c099a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b08c09997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw3iioa2v                        0x000055c2992fc7d7 <unavailable> + 6103

    5    libc.so.6                          0x00002b08c0e8f460 __libc_start_main +
    245

    6    tmpw3iioa2v                        0x000055c2992fc419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var words = s.split(separator:\
    \ \" \")\n    for word in words {\n        let chars = word.characters\n     \
    \   var charsSorted = chars.sorted()\n        for char in charsSorted {\n    \
    \        result += String(char)\n        }\n        result += \" \"\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpjsoue8os.swift:12:26: error: 'characters' is unavailable: Please\
    \ use Substring directly\n        let chars = word.characters\n              \
    \           ^~~~~~~~~~\nSwift.Substring:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: Substring { get set }\n           \
    \    ^\n/tmp/tmpjsoue8os.swift:10:9: warning: variable 'words' was never mutated;\
    \ consider changing to 'let' constant\n    var words = s.split(separator: \" \"\
    )\n    ~~~ ^\n    let\n/tmp/tmpjsoue8os.swift:13:13: warning: variable 'charsSorted'\
    \ was never mutated; consider changing to 'let' constant\n        var charsSorted\
    \ = chars.sorted()\n        ~~~ ^\n        let\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    for word in s.split(\" \") {\n\
    \        let charArr = word.characters\n        let sortedCharArr = charArr.sorted()\n\
    \        let sortedString = String(sortedCharArr)\n        result += sortedString\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp3pbgrie1.swift:10:19: error: no exact matches in call to instance\
    \ method 'split'\n    for word in s.split(\" \") {\n                  ^\nSwift.Sequence:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var words = s.split(separator:\
    \ \" \")\n    for word in words {\n        var chars = word.characters\n     \
    \   for char in chars {\n            var ascii = char.asciiValue\n           \
    \ if ascii < 65 {\n                ascii += 26\n            }\n            char.asciiValue\
    \ = ascii\n        }\n        result += String(chars)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp0unnad7c.swift:12:26: error: 'characters' is unavailable: Please\
    \ use Substring directly\n        var chars = word.characters\n              \
    \           ^~~~~~~~~~\nSwift.Substring:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: Substring { get set }\n           \
    \    ^\n/tmp/tmp0unnad7c.swift:15:16: error: value of optional type 'UInt8?' must\
    \ be unwrapped to a value of type 'UInt8'\n            if ascii < 65 {\n     \
    \          ^\n/tmp/tmp0unnad7c.swift:15:16: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n            if ascii < 65\
    \ {\n               ^\n                     ?? <#default value#>\n/tmp/tmp0unnad7c.swift:15:16:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            if ascii < 65 {\n               ^\n                    !\n\
    /tmp/tmp0unnad7c.swift:16:17: error: value of optional type 'UInt8?' must be unwrapped\
    \ to a value of type 'UInt8'\n                ascii += 26\n                ^\n\
    /tmp/tmp0unnad7c.swift:16:17: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n                ascii += 26\n        \
    \        ^\n                     !\n/tmp/tmp0unnad7c.swift:18:18: error: cannot\
    \ assign to property: 'asciiValue' is a get-only property\n            char.asciiValue\
    \ = ascii\n            ~~~~~^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var words = s.split(separator:\
    \ \" \")\n    for word in words {\n        let chars = word.characters\n     \
    \   var newChars = chars.map { String($0) }\n        newChars.sort { $0.asciiValue\
    \ < $1.asciiValue }\n        result = result + String(newChars.joined(separator:\
    \ \"\"))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp2kis_q6w.swift:12:26: error: 'characters' is unavailable: Please\
    \ use Substring directly\n        let chars = word.characters\n              \
    \           ^~~~~~~~~~\nSwift.Substring:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: Substring { get set }\n           \
    \    ^\n/tmp/tmp2kis_q6w.swift:14:28: error: value of type 'String' has no member\
    \ 'asciiValue'\n        newChars.sort { $0.asciiValue < $1.asciiValue }\n    \
    \                    ~~ ^~~~~~~~~~\n/tmp/tmp2kis_q6w.swift:14:44: error: value\
    \ of type 'String' has no member 'asciiValue'\n        newChars.sort { $0.asciiValue\
    \ < $1.asciiValue }\n                                        ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var words = s.split(separator:\
    \ \" \")\n    for word in words {\n        let chars = word.characters\n     \
    \   var charsSorted = chars.sorted()\n        for char in charsSorted {\n    \
    \        result += String(char)\n        }\n        result += \" \"\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpjsoue8os.swift:12:26: error: 'characters' is unavailable: Please\
    \ use Substring directly\n        let chars = word.characters\n              \
    \           ^~~~~~~~~~\nSwift.Substring:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: Substring { get set }\n           \
    \    ^\n/tmp/tmpjsoue8os.swift:10:9: warning: variable 'words' was never mutated;\
    \ consider changing to 'let' constant\n    var words = s.split(separator: \" \"\
    )\n    ~~~ ^\n    let\n/tmp/tmpjsoue8os.swift:13:13: warning: variable 'charsSorted'\
    \ was never mutated; consider changing to 'let' constant\n        var charsSorted\
    \ = chars.sorted()\n        ~~~ ^\n        let\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var s = \"\"\n    for c in s.characters {\n       \
    \ if c.isLetter {\n            s += c.lowercaseString\n        } else {\n    \
    \        s += c.uppercaseString\n        }\n    }\n    return s\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpa4jzi_zc.swift:10:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpa4jzi_zc.swift:12:20:\
    \ error: value of type 'Character' has no member 'lowercaseString'\n         \
    \   s += c.lowercaseString\n                 ~ ^~~~~~~~~~~~~~~\n/tmp/tmpa4jzi_zc.swift:14:20:\
    \ error: value of type 'Character' has no member 'uppercaseString'\n         \
    \   s += c.uppercaseString\n                 ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var isSpace\
    \ = false\n    for c in s.characters {\n        if isSpace {\n            result\
    \ += c\n            isSpace = false\n        } else {\n            if let _ =\
    \ c {\n                isSpace = true\n            } else {\n                word\
    \ += c\n            }\n        }\n    }\n    for c in word.characters {\n    \
    \    if let _ = c {\n            result += c\n        } else {\n            result\
    \ += \" \"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpo9vsqsb1.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpo9vsqsb1.swift:14:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n/tmp/tmpo9vsqsb1.swift:20:25:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                word += c\n                        ^\n/tmp/tmpo9vsqsb1.swift:17:16:\
    \ error: initializer for conditional binding must have Optional type, not 'Character'\n\
    \            if let _ = c {\n               ^       ~\n/tmp/tmpo9vsqsb1.swift:24:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpo9vsqsb1.swift:26:23: error: cannot convert value of\
    \ type 'Character' to expected argument type 'String'\n            result += c\n\
    \                      ^\n/tmp/tmpo9vsqsb1.swift:25:12: error: initializer for\
    \ conditional binding must have Optional type, not 'Character'\n        if let\
    \ _ = c {\n           ^       ~\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var lastChar = \"\"\n    var\
    \ lastWord = \"\"\n    for c in s.characters {\n        if c == \" \" {\n    \
    \        if lastWord != \"\" {\n                result += lastWord\n         \
    \       lastWord = \"\"\n            }\n        } else {\n            lastWord\
    \ += String(c)\n        }\n    }\n    if lastWord != \"\" {\n        result +=\
    \ lastWord\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpfh5cvzn5.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpfh5cvzn5.swift:10:9:\
    \ warning: initialization of variable 'lastChar' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var lastChar = \"\"\n    ~~~~^~~~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    for c in s.characters {\n  \
    \      let value = Int(c) ?? 0\n        if value > 122 {\n            result +=\
    \ String(c)\n        } else {\n            result += String(value - 122)\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpgk8x5f0s.swift:10:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpgk8x5f0s.swift:11:25:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        let value = Int(c) ?? 0\n                        ^\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if c == \" \" {\n            if word\
    \ != \"\" {\n                result += word\n                word = \"\"\n   \
    \         }\n        } else {\n            word += String(c)\n        }\n    }\n\
    \    if word != \"\" {\n        result += word\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp7aisietg.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp7aisietg.swift:11:9:\
    \ warning: initialization of variable 'i' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var i = 0\n    ~~~~^\n    _\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var words = s.split(separator:\
    \ \" \")\n    var sortedWords = words.sorted(by: { $0.compare($1) == .orderedAscending\
    \ })\n    for word in sortedWords {\n        result += String(word)\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpmi2zujpa.swift:11:45: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    var sortedWords = words.sorted(by:\
    \ { $0.compare($1) == .orderedAscending })\n                                 \
    \        ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var lastWord = \"\"\n    for\
    \ c in s.characters {\n        let ascii = Int(c)\n        if ascii < 97 {\n \
    \           result += String(c)\n        } else if ascii < 123 {\n           \
    \ result += String(ascii).uppercaseString\n        } else {\n            if lastWord\
    \ != \"\" {\n                result += \" \"\n            }\n            result\
    \ += String(ascii).lowercaseString\n            lastWord = String(ascii).lowercaseString\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp8m86o3x7.swift:11:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp8m86o3x7.swift:12:21:\
    \ error: no exact matches in call to initializer \n        let ascii = Int(c)\n\
    \                    ^\nSwift.Int:7:12: note: candidate expects value of type\
    \ 'Float16' for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float)\n     \
    \      ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Double)\n        \
    \   ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Character')\n    public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12:\
    \ note: candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'Character')\n\
    \    @inlinable public init?(_ description: String)\n                      ^\n\
    /tmp/tmp8m86o3x7.swift:16:37: error: reference to member 'uppercaseString' cannot\
    \ be resolved without a contextual type\n            result += String(ascii).uppercaseString\n\
    \                                    ^\n/tmp/tmp8m86o3x7.swift:21:37: error: reference\
    \ to member 'lowercaseString' cannot be resolved without a contextual type\n \
    \           result += String(ascii).lowercaseString\n                        \
    \            ^\n/tmp/tmp8m86o3x7.swift:22:38: error: reference to member 'lowercaseString'\
    \ cannot be resolved without a contextual type\n            lastWord"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var newString = \"\"\n    var word = \"\"\n    var\
    \ i = 0\n    for c in s.characters {\n        switch c {\n        case \" \":\n\
    \            if word != \"\" {\n                newString += word\n          \
    \      word = \"\"\n            }\n        case \".\":\n            if word !=\
    \ \"\" {\n                newString += word\n                word = \"\"\n   \
    \         }\n        default:\n            word += String(c)\n        }\n    }\n\
    \    if word != \"\" {\n        newString += word\n    }\n    return newString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpq9t55eho.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpq9t55eho.swift:11:9:\
    \ warning: initialization of variable 'i' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var i = 0\n    ~~~~^\n    _\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var lastChar\
    \ = \"\"\n    for char in s.characters {\n        if char == \" \" {\n       \
    \     result += word\n            word = \"\"\n        } else {\n            word\
    \ += String(char)\n        }\n    }\n    result += word\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpphv410hr.swift:12:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpphv410hr.swift:11:9:\
    \ warning: initialization of variable 'lastChar' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var lastChar = \"\"\n    ~~~~^~~~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var i = 0\n    var j = 0\n \
    \   var k = 0\n    var l = s.characters.count\n    var m = s.characters.count\n\
    \    var n = s.characters.count\n    var o = 0\n    var p = 0\n    var q = 0\n\
    \    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n \
    \   var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n  \
    \  var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n   \
    \ var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var\
    \ l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q\
    \ = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v =\
    \ 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n\
    \    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n \
    \   var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n  \
    \  var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n   \
    \ var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var\
    \ v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a\
    \ = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f =\
    \ 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n\
    \    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n \
    \   var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n  \
    \  var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n   \
    \ var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var\
    \ f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k\
    \ = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p =\
    \ 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n\
    \    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n \
    \   var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n  \
    \  var f = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp30oggs0t.swift:13:15: error: 'characters' is unavailable: Please\
    \ use String directly\n    var l = s.characters.count\n              ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp30oggs0t.swift:14:15:\
    \ error: 'characters' is unavailable: Please use String directly\n    var m =\
    \ s.characters.count\n              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp30oggs0t.swift:15:15: error: 'characters' is unavailable:\
    \ Please use String directly\n    var n = s.characters.count\n              ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp30oggs0t.swift:36:9:\
    \ error: invalid redeclaration of 'i'\n    var i = 0\n        ^\n/tmp/tmp30oggs0t.swift:10:9:\
    \ note: 'i' previously declared here\n    var i = 0\n        ^\n/tmp/tmp30oggs0t.swift:37:9:\
    \ error: invalid redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmp30oggs0t.swift:11:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmp30oggs0t.swift:38:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmp30oggs0t.swift:12:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmp30oggs0t.swift:39:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmp30oggs0t.swift:13:9:\
    \ note: 'l' previously declared here\n    var l = s.characters.count\n       \
    \ ^\n/tmp/tmp30oggs0t.swift:40:9: error: invalid redeclaration of 'm'\n    var\
    \ m = 0\n        ^\n/tmp/tmp30oggs0t.swift:14:9: note: 'm' previously declared\
    \ here\n    var m = s.characters.count\n        ^\n/tmp/tmp30oggs0t.swift:41:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmp30oggs0t.swift:15:9:\
    \ note: 'n' previously declared here\n    var n = s.characters.count\n       \
    \ ^\n/tmp/tmp30oggs0t.swift:42:9: error: invalid redeclaration of 'o'\n    var\
    \ o = 0\n        ^\n/tmp/tmp30oggs0"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var newString = \"\"\n    var newWord = \"\"\n    var\
    \ newSpace = \"\"\n    var newChar = \"\"\n    var newAsciiValue = 0\n    var\
    \ newAsciiValue2 = 0\n    var newAsciiValue3 = 0\n    var newAsciiValue4 = 0\n\
    \    var newAsciiValue5 = 0\n    var newAsciiValue6 = 0\n    var newAsciiValue7\
    \ = 0\n    var newAsciiValue8 = 0\n    var newAsciiValue9 = 0\n    var newAsciiValue10\
    \ = 0\n    var newAsciiValue11 = 0\n    var newAsciiValue12 = 0\n    var newAsciiValue13\
    \ = 0\n    var newAsciiValue14 = 0\n    var newAsciiValue15 = 0\n    var newAsciiValue16\
    \ = 0\n    var newAsciiValue17 = 0\n    var newAsciiValue18 = 0\n    var newAsciiValue19\
    \ = 0\n    var newAsciiValue20 = 0\n    var newAsciiValue21 = 0\n    var newAsciiValue22\
    \ = 0\n    var newAsciiValue23 = 0\n    var newAsciiValue24 = 0\n    var newAsciiValue25\
    \ = 0\n    var newAsciiValue26 = 0\n    var newAsciiValue27 = 0\n    var newAsciiValue28\
    \ = 0\n    var newAsciiValue29 = 0\n    var newAsciiValue30 = 0\n    var newAsciiValue31\
    \ = 0\n    var newAsciiValue32 = 0\n    var newAsciiValue33 = 0\n    var newAsciiValue34\
    \ = 0\n    var newAsciiValue35 = 0\n    var newAsciiValue36 = 0\n    var newAsciiValue37\
    \ = 0\n    var newAsciiValue38 = 0\n    var newAsciiValue39 = 0\n    var newAsciiValue40\
    \ = 0\n    var newAsciiValue41 = 0\n    var newAsciiValue42 = 0\n    var newAsciiValue43\
    \ = 0\n    var newAsciiValue44 = 0\n    var newAsciiValue45 = 0\n    var newAsciiValue46\
    \ = 0\n    var newAsciiValue47 = 0\n    var newAsciiValue48 = 0\n    var newAsciiValue49\
    \ = 0\n    var newAsciiValue50 = 0\n    var newAsciiValue51 = 0\n    var newAsciiValue52\
    \ = 0\n    var newAsciiValue53 = 0\n    var newAsciiValue54 = 0\n    var newAsciiValue55\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmphzr64cgg.swift:67:9: error: type annotation missing in pattern\n\
    \    var newAsciiValue55\n        ^\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var isSpace\
    \ = false\n    for c in s.characters {\n        if isSpace {\n            result\
    \ += word\n            word = \"\"\n            isSpace = false\n        }\n \
    \       if c == \" \" {\n            isSpace = true\n        } else {\n      \
    \      word += String(c)\n        }\n    }\n    result += word\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpgt1l3zb7.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var isSpace\
    \ = false\n    for c in s.characters {\n        if isSpace {\n            result\
    \ += word\n            word = \"\"\n            isSpace = false\n        }\n \
    \       if c == \" \" {\n            isSpace = true\n        } else {\n      \
    \      word += String(c)\n        }\n    }\n    result += word\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpgt1l3zb7.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var words = s.split(separator:\
    \ \" \")\n    for word in words {\n        let chars = word.characters\n     \
    \   var charsSorted = chars.sorted()\n        for char in charsSorted {\n    \
    \        result += String(char)\n        }\n        result += \" \"\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpjsoue8os.swift:12:26: error: 'characters' is unavailable: Please\
    \ use Substring directly\n        let chars = word.characters\n              \
    \           ^~~~~~~~~~\nSwift.Substring:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: Substring { get set }\n           \
    \    ^\n/tmp/tmpjsoue8os.swift:10:9: warning: variable 'words' was never mutated;\
    \ consider changing to 'let' constant\n    var words = s.split(separator: \" \"\
    )\n    ~~~ ^\n    let\n/tmp/tmpjsoue8os.swift:13:13: warning: variable 'charsSorted'\
    \ was never mutated; consider changing to 'let' constant\n        var charsSorted\
    \ = chars.sorted()\n        ~~~ ^\n        let\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var isSpace\
    \ = false\n    for c in s.characters {\n        if isSpace {\n            result\
    \ += word\n            word = \"\"\n            isSpace = false\n        }\n \
    \       if c == \" \" {\n            isSpace = true\n        } else {\n      \
    \      word += String(c)\n        }\n    }\n    result += word\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpgt1l3zb7.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var words = s.split(separator:\
    \ \" \")\n    for word in words {\n        var newWord = \"\"\n        for char\
    \ in word {\n            let asciiValue = Int(char)\n            if asciiValue\
    \ > 96 {\n                newWord += \"z\"\n            } else if asciiValue >\
    \ 64 {\n                newWord += \"y\"\n            } else if asciiValue > 48\
    \ {\n                newWord += \"x\"\n            } else {\n                newWord\
    \ += String(char)\n            }\n        }\n        result += newWord\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpmf9gcdgj.swift:14:30: error: no exact matches in call to initializer\
    \ \n            let asciiValue = Int(char)\n                             ^\nSwift.Int:7:12:\
    \ note: candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate\
    \ expects value of type 'Float' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Double)\n           ^\nSwift.Int:14:12: note: candidate expects value\
    \ of type 'Float80' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value of type\
    \ 'Builtin.Int64' for parameter #1 (got 'Character')\n    public init(_ _value:\
    \ Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate expects value\
    \ of type 'Builtin.Word' for parameter #1 (got 'Character')\n    public init(_\
    \ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23: note: candidate\
    \ expects value of type 'String' for parameter #1 (got 'Character')\n    @inlinable\
    \ public init?(_ description: String)\n                      ^\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var isSpace\
    \ = false\n    for c in s.characters {\n        if isSpace {\n            result\
    \ += word\n            word = \"\"\n            isSpace = false\n        }\n \
    \       if c == \" \" {\n            isSpace = true\n        } else {\n      \
    \      word += String(c)\n        }\n    }\n    result += word\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpgt1l3zb7.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var words = s.split(separator:\
    \ \" \")\n    for word in words {\n        let chars = word.characters.sorted()\n\
    \        var newWord = \"\"\n        for char in chars {\n            newWord\
    \ += String(char)\n        }\n        result += newWord\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpxi31wuwn.swift:12:26: error: 'characters' is unavailable: Please\
    \ use Substring directly\n        let chars = word.characters.sorted()\n     \
    \                    ^~~~~~~~~~\nSwift.Substring:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: Substring { get set }\n \
    \              ^\n/tmp/tmpxi31wuwn.swift:10:9: warning: variable 'words' was never\
    \ mutated; consider changing to 'let' constant\n    var words = s.split(separator:\
    \ \" \")\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    for c in\
    \ s.characters {\n        if !isSpace(c) {\n            word += String(UnicodeScalar(c))\n\
    \        } else {\n            result += word\n            word = \"\"\n     \
    \   }\n    }\n    result += word\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpzo30jmc7.swift:11:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpzo30jmc7.swift:12:13:\
    \ error: cannot find 'isSpace' in scope\n        if !isSpace(c) {\n          \
    \  ^~~~~~~\n/tmp/tmpzo30jmc7.swift:13:28: error: no exact matches in call to initializer\
    \ \n            word += String(UnicodeScalar(c))\n                           ^\n\
    Swift.Unicode.Scalar:7:23: note: candidate expects value of type 'UInt8' for parameter\
    \ #1 (got 'Character')\n    @inlinable public init(_ v: UInt8)\n             \
    \         ^\nSwift.Unicode.Scalar:8:23: note: candidate expects value of type\
    \ 'Unicode.Scalar' for parameter #1 (got 'Character')\n    @inlinable public init(_\
    \ v: Unicode.Scalar)\n                      ^\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var s = s\n    var newString = \"\"\n    var word =\
    \ \"\"\n    var newWord = \"\"\n    var i = 0\n    var j = 0\n    var k = 0\n\
    \    var l = s.count\n    for (i; i < l; i += 1) {\n        word = s.substringWithRange(i..<(i\
    \ + 1))\n        newWord = String(word.characters.map {\n            String($0\
    \ as! UInt8)\n        })\n        newString += newWord\n    }\n    return newString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpsv01hwf4.swift:17:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for (i; i < l; i += 1) {\n    ^   ~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var s = \"\"\n    var i = 0\n    var j = 0\n    var\
    \ k = 0\n    for c in s.characters {\n        if c == \" \" {\n            j =\
    \ i\n            i = k\n            k = j\n        }\n        s += String(c)\n\
    \    }\n    var result = \"\"\n    for j = i; j < k; j++ {\n        result +=\
    \ String(s.characters[j])\n    }\n    for i = k; i < j; i++ {\n        result\
    \ += String(s.characters[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpsoaz8egy.swift:22:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for j = i; j < k; j++ {\n    ^   ~~~~~~~~~~~~~~~~~\n/tmp/tmpsoaz8egy.swift:25:5:\
    \ error: C-style for statement has been removed in Swift 3\n    for i = k; i <\
    \ j; i++ {\n    ^   ~~~~~~~~~~~~~~~~~\n/tmp/tmpsoaz8egy.swift:13:16: error: 'characters'\
    \ is unavailable: Please use String directly\n    for c in s.characters {\n  \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    for c in s.characters {\n  \
    \      switch c {\n        case \" \":\n            result += \" \"\n        case\
    \ \".\":\n            result += \".\"\n        default:\n            result +=\
    \ String(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmppb8v25v3.swift:10:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var isSpace\
    \ = false\n    for c in s.characters {\n        if isSpace {\n            result\
    \ += word\n            isSpace = false\n            word = \"\"\n        }\n \
    \       if c == \" \" {\n            isSpace = true\n        } else {\n      \
    \      word += String(c)\n        }\n    }\n    result += word\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpw6kqnpzb.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var words = s.split(separator:\
    \ \" \")\n    for word in words {\n        var chars = word.characters\n     \
    \   var sortedChars = chars.sorted()\n        var newWord = \"\"\n        for\
    \ char in sortedChars {\n            newWord += String(char)\n        }\n    \
    \    result += newWord\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpbs92wo63.swift:12:26: error: 'characters' is unavailable: Please\
    \ use Substring directly\n        var chars = word.characters\n              \
    \           ^~~~~~~~~~\nSwift.Substring:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: Substring { get set }\n           \
    \    ^\n/tmp/tmpbs92wo63.swift:10:9: warning: variable 'words' was never mutated;\
    \ consider changing to 'let' constant\n    var words = s.split(separator: \" \"\
    )\n    ~~~ ^\n    let\n/tmp/tmpbs92wo63.swift:12:13: warning: variable 'chars'\
    \ was never mutated; consider changing to 'let' constant\n        var chars =\
    \ word.characters\n        ~~~ ^\n        let\n/tmp/tmpbs92wo63.swift:13:13: warning:\
    \ variable 'sortedChars' was never mutated; consider changing to 'let' constant\n\
    \        var sortedChars = chars.sorted()\n        ~~~ ^\n        let\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if c.isLetter {\n            word +=\
    \ c.asciiValue\n        } else {\n            if word != \"\" {\n            \
    \    result += String(word)\n                word = \"\"\n            }\n    \
    \        result += c.asciiValue\n        }\n    }\n    if word != \"\" {\n   \
    \     result += String(word)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpf2sfg4fa.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpf2sfg4fa.swift:14:23:\
    \ error: cannot convert value of type 'UInt8?' to expected argument type 'String'\n\
    \            word += c.asciiValue\n                      ^\n/tmp/tmpf2sfg4fa.swift:20:25:\
    \ error: cannot convert value of type 'UInt8?' to expected argument type 'String'\n\
    \            result += c.asciiValue\n                        ^\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var i =\
    \ 0\n    var j = 0\n    for c in s.characters {\n        if c == \" \" {\n   \
    \         if word != \"\" {\n                result += word\n                word\
    \ = \"\"\n            }\n        } else {\n            word += String(c)\n   \
    \     }\n    }\n    if word != \"\" {\n        result += word\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp1kuwb0ns.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp1kuwb0ns.swift:11:9:\
    \ warning: initialization of variable 'i' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var i = 0\n    ~~~~^\n    _\n/tmp/tmp1kuwb0ns.swift:12:9:\
    \ warning: initialization of variable 'j' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var j = 0\n    ~~~~^\n    _\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var isSpace\
    \ = false\n    for c in s.characters {\n        if isSpace {\n            result\
    \ += word\n            word = \"\"\n            isSpace = false\n        }\n \
    \       if c == \" \" {\n            isSpace = true\n        } else {\n      \
    \      word += String(c)\n        }\n    }\n    result += word\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpgt1l3zb7.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if c == \" \" {\n            result\
    \ += word\n            word = \"\"\n        } else {\n            word += String(c)\n\
    \        }\n    }\n    result += word\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpxdryi0l7.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpxdryi0l7.swift:11:9:\
    \ warning: initialization of variable 'i' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var i = 0\n    ~~~~^\n    _\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var i = 0\n    var j = 0\n \
    \   var k = 0\n    var l = s.count\n    while i < l {\n        var j = i\n   \
    \     while j > 0 && s[j].isWhiteSpace {\n            j = j - 1\n        }\n \
    \       if j > 0 {\n            var k = j\n            while k < l && s[k].isWhiteSpace\
    \ {\n                k = k + 1\n            }\n            if k < l {\n      \
    \          var m = k\n                while m < l && s[m].isWhiteSpace {\n   \
    \                 m = m + 1\n                }\n                if m < l {\n \
    \                   var n = m\n                    while n < l && s[n].isWhiteSpace\
    \ {\n                        n = n + 1\n                    }\n              \
    \      if n < l {\n                        var o = n\n                       \
    \ while o < l && s[o].isWhiteSpace {\n                            o = o + 1\n\
    \                        }\n                        if o < l {\n             \
    \               var p = o\n                            while p < l && s[p].isWhiteSpace\
    \ {\n                                p = p + 1\n                            }\n\
    \                            if p < l {\n                                var q\
    \ = p\n                                while q < l && s[q].isWhiteSpace {\n  \
    \                                  q = q + 1\n                               \
    \ }\n                                if q < l {\n                            \
    \        var r = q\n                                    while r < l && s[r].isWhiteSpace\
    \ {\n                                        r = r + 1\n                     \
    \               }\n                                    if r < l {\n          \
    \                              var s = r\n                                   \
    \     while s < l && s[s].isWhiteSpace {\n                                   \
    \         s = s + 1\n                                        }\n             \
    \                           if s < l {\n                                     \
    \       var t = s\n                                            while t < l &&\
    \ s[t].isWhiteSpace {\n                                                t = t +\
    \ 1\n                                            }\n                         \
    \                   if t < l {\n                                             \
    \   result = result + s[t]\n                                                i\
    \ = i + 1\n                                            }\n                   \
    \                     }\n                                    }\n             \
    \                   }\n                            }\n                       \
    \ }\n                    }\n                }\n            }\n        }\n    \
    \    result = result + s[i]\n        i = i + 1\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpzyuii9fk.swift:16:29: error: value of type 'Character' has no member\
    \ 'isWhiteSpace'\n        while j > 0 && s[j].isWhiteSpace {\n               \
    \        ~~~~ ^~~~~~~~~~~~\n/tmp/tmpzyuii9fk.swift:21:33: error: value of type\
    \ 'Character' has no member 'isWhiteSpace'\n            while k < l && s[k].isWhiteSpace\
    \ {\n                           ~~~~ ^~~~~~~~~~~~\n/tmp/tmpzyuii9fk.swift:26:37:\
    \ error: value of type 'Character' has no member 'isWhiteSpace'\n            \
    \    while m < l && s[m].isWhiteSpace {\n                               ~~~~ ^~~~~~~~~~~~\n\
    /tmp/tmpzyuii9fk.swift:31:41: error: value of type 'Character' has no member 'isWhiteSpace'\n\
    \                    while n < l && s[n].isWhiteSpace {\n                    \
    \               ~~~~ ^~~~~~~~~~~~\n/tmp/tmpzyuii9fk.swift:36:45: error: value\
    \ of type 'Character' has no member 'isWhiteSpace'\n                        while\
    \ o < l && s[o].isWhiteSpace {\n                                       ~~~~ ^~~~~~~~~~~~\n\
    /tmp/tmpzyuii9fk.swift:41:49: error: value of type 'Character' has no member 'isWhiteSpace'\n\
    \                            while p < l && s[p].isWhiteSpace {\n            \
    \                               ~~~~ ^~~~~~~~~~~~\n/tmp/tmpzyuii9fk.swift:46:53:\
    \ error: value of type 'Character' has no member 'isWhiteSpace'\n            \
    \                    while q < l && s[q].isWhiteSpace {\n                    \
    \                           ~~~~ ^~~~~~~~~~~~\n/tmp/tmpzyuii9fk.swift:51:57: error:\
    \ value of type 'Character' has no member 'isWhiteSpace'\n                   \
    \                 while r < l && s[r].isWhiteSpace {\n                       \
    \                            ~~~~ ^~~~~~~~~~~~\n/tmp/tmpzyuii9fk.swift:56:57:\
    \ error: value of type 'Int' has no subscripts\n                             \
    \           while s < l && s[s].isWhiteSpace {\n                             \
    \                          ~^\n/tmp/tmpzyuii9fk.swift:61:61: error: value of type\
    \ 'Int' has no subscripts\n                                            while t\
    \ < l && s[t].isWhiteSpace {\n                                               \
    \       "
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var i =\
    \ 0\n    var j = 0\n    var k = 0\n    for k in s.characters {\n        j = k\n\
    \        word = s.substringWithRange(Range<String.Index>(start: i, end: j))\n\
    \        result += word\n        i = j + 1\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp2062j174.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for k in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp2062j174.swift:15:13:\
    \ error: cannot assign value of type 'Character' to type 'Int'\n        j = k\n\
    \            ^\n/tmp/tmp2062j174.swift:16:18: error: value of type 'String' has\
    \ no member 'substringWithRange'\n        word = s.substringWithRange(Range<String.Index>(start:\
    \ i, end: j))\n               ~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmp2062j174.swift:16:37:\
    \ error: referencing initializer 'init(_:)' on 'Range' requires that 'String.Index'\
    \ conform to 'Strideable'\n        word = s.substringWithRange(Range<String.Index>(start:\
    \ i, end: j))\n                                    ^\nSwift.Range:1:11: note:\
    \ where 'Bound' = 'String.Index'\nextension Range where Bound : Strideable, Bound.Stride\
    \ : SignedInteger {\n          ^\n/tmp/tmp2062j174.swift:16:72: error: extra argument\
    \ 'end' in call\n        word = s.substringWithRange(Range<String.Index>(start:\
    \ i, end: j))\n                                                       ~~~~~~~~~~~~~~~~^~\n\
    /tmp/tmp2062j174.swift:16:64: error: cannot convert value of type 'Int' to expected\
    \ argument type 'ClosedRange<String.Index>'\n        word = s.substringWithRange(Range<String.Index>(start:\
    \ i, end: j))\n                                                              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var isSpace\
    \ = false\n    for c in s.characters {\n        if isSpace {\n            result\
    \ += word\n            word = \"\"\n            isSpace = false\n        }\n \
    \       if c == \" \" {\n            isSpace = true\n        } else {\n      \
    \      word += String(c)\n        }\n    }\n    result += word\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpgt1l3zb7.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    for c in\
    \ s.characters {\n        switch c {\n        case \" \":\n            if word\
    \ != \"\" {\n                result += word\n                word = \"\"\n   \
    \         }\n        case \"\\n\":\n            if word != \"\" {\n          \
    \      result += word\n                word = \"\"\n            }\n        default:\n\
    \            word += String(c)\n        }\n    }\n    if word != \"\" {\n    \
    \    result += word\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp85gi1f9g.swift:11:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var words = s.split(separator:\
    \ \" \")\n    for word in words {\n        let chars = word.characters.sorted()\n\
    \        let newWord = String(chars)\n        result += newWord + \" \"\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp5ii7mzmk.swift:12:26: error: 'characters' is unavailable: Please\
    \ use Substring directly\n        let chars = word.characters.sorted()\n     \
    \                    ^~~~~~~~~~\nSwift.Substring:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: Substring { get set }\n \
    \              ^\n/tmp/tmp5ii7mzmk.swift:10:9: warning: variable 'words' was never\
    \ mutated; consider changing to 'let' constant\n    var words = s.split(separator:\
    \ \" \")\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var newString = \"\"\n    var wordArray = s.split(separator:\
    \ \" \")\n    var sortedWordArray = wordArray.sorted(by: { $0.compare($1) == .orderedAscending\
    \ })\n    for word in sortedWordArray {\n        newString += String(word.unicodeScalars.first!)\n\
    \    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpxr_66gnd.swift:11:53: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    var sortedWordArray = wordArray.sorted(by:\
    \ { $0.compare($1) == .orderedAscending })\n                                 \
    \                ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if c == \" \" {\n            if word\
    \ != \"\" {\n                result += word\n                word = \"\"\n   \
    \         }\n        } else {\n            word += String(c)\n        }\n    }\n\
    \    if word != \"\" {\n        result += word\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp7aisietg.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp7aisietg.swift:11:9:\
    \ warning: initialization of variable 'i' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var i = 0\n    ~~~~^\n    _\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if c == \" \" {\n            result\
    \ += word\n            word = \"\"\n        } else {\n            word += String(c)\n\
    \        }\n    }\n    result += word\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpxdryi0l7.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpxdryi0l7.swift:11:9:\
    \ warning: initialization of variable 'i' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var i = 0\n    ~~~~^\n    _\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    for c in s.characters {\n  \
    \      switch c {\n        case \" \":\n            result += \" \"\n        case\
    \ \".\":\n            result += \"!\"\n        default:\n            result +=\
    \ String(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp2igmwbri.swift:10:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var words = s.split(separator:\
    \ \" \")\n    for word in words {\n        let chars = word.characters\n     \
    \   var charsArray = [Character]()\n        for char in chars {\n            charsArray.append(char)\n\
    \        }\n        charsArray.sort(by: { (c1, c2) -> Bool in\n            return\
    \ c1.asciiValue < c2.asciiValue\n        })\n        let newWord = String(charsArray)\n\
    \        result += newWord + \" \"\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpb2or4n4d.swift:12:26: error: 'characters' is unavailable: Please\
    \ use Substring directly\n        let chars = word.characters\n              \
    \           ^~~~~~~~~~\nSwift.Substring:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: Substring { get set }\n           \
    \    ^\n/tmp/tmpb2or4n4d.swift:18:34: error: binary operator '<' cannot be applied\
    \ to two 'UInt8?' operands\n            return c1.asciiValue < c2.asciiValue\n\
    \                   ~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~\n/tmp/tmpb2or4n4d.swift:18:34:\
    \ note: overloads for '<' exist with these partially matching parameter lists:\
    \ (UInt8, UInt8)\n            return c1.asciiValue < c2.asciiValue\n         \
    \                        ^\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    for char in s.characters {\n\
    \        let ascii = Int(char)\n        if ascii < 97 {\n            result +=\
    \ String(char)\n        } else if ascii < 123 {\n            result += String(char.uppercase)\n\
    \        } else {\n            result += String(char.lowercase)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp33xmt3_h.swift:10:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp33xmt3_h.swift:11:21:\
    \ error: no exact matches in call to initializer \n        let ascii = Int(char)\n\
    \                    ^\nSwift.Int:7:12: note: candidate expects value of type\
    \ 'Float16' for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float)\n     \
    \      ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Double)\n        \
    \   ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Character')\n    public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12:\
    \ note: candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'Character')\n\
    \    @inlinable public init?(_ description: String)\n                      ^\n\
    /tmp/tmp33xmt3_h.swift:15:35: error: value of type 'Character' has no member 'uppercase'\n\
    \            result += String(char.uppercase)\n                             ~~~~\
    \ ^~~~~~~~~\n/tmp/tmp33xmt3_h.swift:17:35: error: value of type 'Character' has\
    \ no member 'lowercase'\n            result += String(char.lowercase)\n      \
    \                       ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var newString = \"\"\n    var word = \"\"\n    var\
    \ lastWord = \"\"\n    var lastChar = \"\"\n    var lastCharAsciiValue = 0\n \
    \   for char in s.characters {\n        lastCharAsciiValue = char.asciiValue\n\
    \        if lastCharAsciiValue > lastChar.asciiValue {\n            lastWord =\
    \ word\n            word = char\n        } else {\n            newString += lastWord\n\
    \            newString += char\n            lastWord = \"\"\n        }\n     \
    \   lastChar = char\n    }\n    newString += lastWord\n    return newString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpc5ps4m5w.swift:14:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpc5ps4m5w.swift:15:35:\
    \ error: cannot assign value of type 'UInt8?' to type 'Int'\n        lastCharAsciiValue\
    \ = char.asciiValue\n                             ~~~~~^~~~~~~~~~\n/tmp/tmpc5ps4m5w.swift:16:42:\
    \ error: value of type 'String' has no member 'asciiValue'\n        if lastCharAsciiValue\
    \ > lastChar.asciiValue {\n                                ~~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpc5ps4m5w.swift:18:20: error: cannot assign value of type 'Character' to\
    \ type 'String'\n            word = char\n                   ^~~~\n/tmp/tmpc5ps4m5w.swift:21:26:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            newString += char\n                         ^\n/tmp/tmpc5ps4m5w.swift:24:20:\
    \ error: cannot assign value of type 'Character' to type 'String'\n        lastChar\
    \ = char\n                   ^~~~\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var newString = \"\"\n    var word = \"\"\n    for\
    \ c in s.characters {\n        if c.isLetter {\n            word += c\n      \
    \  } else {\n            newString += word\n            word = \"\"\n        \
    \    newString += c\n        }\n    }\n    newString += word\n    return newString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpma1vefkg.swift:11:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpma1vefkg.swift:13:21:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            word += c\n                    ^\n/tmp/tmpma1vefkg.swift:17:26: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            newString += c\n                         ^\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var isSpace\
    \ = false\n    for c in s.characters {\n        if isSpace {\n            result\
    \ += word\n            word = \"\"\n            isSpace = false\n        }\n \
    \       if c == \" \" {\n            isSpace = true\n        } else {\n      \
    \      word += String(c)\n        }\n    }\n    result += word\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpgt1l3zb7.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var isSpace\
    \ = false\n    for c in s.characters {\n        if isSpace {\n            result\
    \ += word\n            word = \"\"\n            isSpace = false\n        }\n \
    \       if c == \" \" {\n            isSpace = true\n        } else {\n      \
    \      word += String(c)\n        }\n    }\n    result += word\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpgt1l3zb7.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var i =\
    \ 0\n    var j = 0\n    for c in s.characters {\n        if c == \" \" {\n   \
    \         result += word\n            word = \"\"\n        } else {\n        \
    \    word += String(c)\n        }\n    }\n    result += word\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpqw0z3md8.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpqw0z3md8.swift:11:9:\
    \ warning: initialization of variable 'i' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var i = 0\n    ~~~~^\n    _\n/tmp/tmpqw0z3md8.swift:12:9:\
    \ warning: initialization of variable 'j' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var j = 0\n    ~~~~^\n    _\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var s = s\n    var i = 0\n    var j = 0\n    var k\
    \ = 0\n    var l = 0\n    var m = \"\"\n    var n = \"\"\n    var o = \"\"\n \
    \   var p = \"\"\n    var q = \"\"\n    var r = \"\"\n    var s = \"\"\n    var\
    \ t = \"\"\n    var u = \"\"\n    var v = \"\"\n    var w = \"\"\n    var x =\
    \ \"\"\n    var y = \"\"\n    var z = \"\"\n    var a = \"\"\n    var b = \"\"\
    \n    var c = \"\"\n    var d = \"\"\n    var e = \"\"\n    var f = \"\"\n   \
    \ var g = \"\"\n    var h = \"\"\n    var i = \"\"\n    var j = \"\"\n    var\
    \ k = \"\"\n    var l = \"\"\n    var m = \"\"\n    var n = \"\"\n    var o =\
    \ \"\"\n    var p = \"\"\n    var q = \"\"\n    var r = \"\"\n    var s = \"\"\
    \n    var t = \"\"\n    var u = \"\"\n    var v = \"\"\n    var w = \"\"\n   \
    \ var x = \"\"\n    var y = \"\"\n    var z = \"\"\n    var a = \"\"\n    var\
    \ b = \"\"\n    var c = \"\"\n    var d = \"\"\n    var e = \"\"\n    var f =\
    \ \"\"\n    var g = \"\"\n    var h = \"\"\n    var i = \"\"\n    var j = \"\"\
    \n    var k = \"\"\n    var l = \"\"\n    var m = \"\"\n    var n = \"\"\n   \
    \ var o = \"\"\n    var p = \"\"\n    var q = \"\"\n    var r = \"\"\n    var\
    \ s = \"\"\n    var t = \"\"\n    var u = \"\"\n    var v = \"\"\n    var w =\
    \ \"\"\n    var x = \"\"\n    var y = \"\"\n    var z = \"\"\n    var a = \"\"\
    \n    var b = \"\"\n    var c = \"\"\n    var d = \"\"\n    var e = \"\"\n   \
    \ var f = \"\"\n    var g = \"\"\n    var h = \"\"\n    var i = \"\"\n    var\
    \ j = \"\"\n    var k = \"\"\n    var l = \"\"\n    var m = \"\"\n    var n =\
    \ \"\"\n    var o = \"\"\n    var p = \"\"\n    var q = \"\"\n    var r = \"\"\
    \n    var s = \"\"\n    var t = \"\"\n    var u = \"\"\n    var v = \"\"\n   \
    \ var w = \"\"\n    var x = \"\"\n    var y = \"\"\n    var z = \"\"\n    var\
    \ a = \"\"\n    var b = \"\"\n    var c = \"\"\n    var d = \"\"\n    var e =\
    \ \"\"\n    var f = \"\"\n    var g = \"\"\n    var h = \"\"\n    var i = \"\"\
    \n    var j = \"\"\n    var k = \"\"\n    var l = \"\"\n    var m = \"\"\n   \
    \ var n = \"\"\n    var o = \"\"\n    var p = \"\"\n    var q = \"\"\n    var\
    \ r = \"\"\n    var s = \"\"\n    var t = \"\"\n    var u = \"\"\n    var v =\
    \ \"\"\n    var w = \"\"\n    var x = \"\"\n    var y = \"\"\n    var z = \"\"\
    \n    var a = \"\"\n    var b = \"\"\n    var c = \"\"\n    var d = \"\"\n   \
    \ var e = \"\"\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp86eiqhnk.swift:137:8: error: expected pattern\n    var \n     \
    \  ^\n/tmp/tmp86eiqhnk.swift:20:9: error: invalid redeclaration of 's'\n    var\
    \ s = \"\"\n        ^\n/tmp/tmp86eiqhnk.swift:9:9: note: 's' previously declared\
    \ here\n    var s = s\n        ^\n/tmp/tmp86eiqhnk.swift:36:9: error: invalid\
    \ redeclaration of 'i'\n    var i = \"\"\n        ^\n/tmp/tmp86eiqhnk.swift:10:9:\
    \ note: 'i' previously declared here\n    var i = 0\n        ^\n/tmp/tmp86eiqhnk.swift:37:9:\
    \ error: invalid redeclaration of 'j'\n    var j = \"\"\n        ^\n/tmp/tmp86eiqhnk.swift:11:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmp86eiqhnk.swift:38:9:\
    \ error: invalid redeclaration of 'k'\n    var k = \"\"\n        ^\n/tmp/tmp86eiqhnk.swift:12:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmp86eiqhnk.swift:39:9:\
    \ error: invalid redeclaration of 'l'\n    var l = \"\"\n        ^\n/tmp/tmp86eiqhnk.swift:13:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmp86eiqhnk.swift:40:9:\
    \ error: invalid redeclaration of 'm'\n    var m = \"\"\n        ^\n/tmp/tmp86eiqhnk.swift:14:9:\
    \ note: 'm' previously declared here\n    var m = \"\"\n        ^\n/tmp/tmp86eiqhnk.swift:41:9:\
    \ error: invalid redeclaration of 'n'\n    var n = \"\"\n        ^\n/tmp/tmp86eiqhnk.swift:15:9:\
    \ note: 'n' previously declared here\n    var n = \"\"\n        ^\n/tmp/tmp86eiqhnk.swift:42:9:\
    \ error: invalid redeclaration of 'o'\n    var o = \"\"\n        ^\n/tmp/tmp86eiqhnk.swift:16:9:\
    \ note: 'o' previously declared here\n    var o = \"\"\n        ^\n/tmp/tmp86eiqhnk.swift:43:9:\
    \ error: invalid redeclaration of 'p'\n    var p = \"\"\n        ^\n/tmp/tmp86eiqhnk.swift:17:9:\
    \ note: 'p' previously declared here\n    var p = \"\"\n        ^\n/tmp/tmp86eiqhnk.swift:44:9:\
    \ error: invalid redeclaration of 'q'\n    var q = \"\"\n        ^\n/tmp/tmp86eiqhnk.swift:18:9:\
    \ note: 'q' previously declared here\n    var q = \"\"\n        ^\n/tmp/tmp86eiqhnk.swift:45:9:\
    \ error: invalid redeclaration of 'r'\n    var r = \"\"\n        ^\n/tmp/tmp86eiqhnk.swift:19:9:\
    \ note: 'r' previously declared here\n    var r = \"\"\n        ^\n/tmp/tmp86eiq"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var words = s.split(separator:\
    \ \" \")\n    for word in words {\n        let chars = word.characters\n     \
    \   var orderedChars = chars.sorted()\n        var newWord = \"\"\n        for\
    \ char in orderedChars {\n            newWord += String(char)\n        }\n   \
    \     result += newWord\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp47h8sxze.swift:12:26: error: 'characters' is unavailable: Please\
    \ use Substring directly\n        let chars = word.characters\n              \
    \           ^~~~~~~~~~\nSwift.Substring:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: Substring { get set }\n           \
    \    ^\n/tmp/tmp47h8sxze.swift:10:9: warning: variable 'words' was never mutated;\
    \ consider changing to 'let' constant\n    var words = s.split(separator: \" \"\
    )\n    ~~~ ^\n    let\n/tmp/tmp47h8sxze.swift:13:13: warning: variable 'orderedChars'\
    \ was never mutated; consider changing to 'let' constant\n        var orderedChars\
    \ = chars.sorted()\n        ~~~ ^\n        let\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var s = \"\"\n    var i = 0\n    var j = 0\n    var\
    \ k = 0\n    for _ in s.characters {\n        if s.characters[k] == \" \" {\n\
    \            s += \" \"\n            i += 1\n            j += 1\n            k\
    \ += 1\n        } else {\n            s += s.characters[i]\n            i += 1\n\
    \            j += 1\n            k += 1\n        }\n    }\n    return s\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpc5khj6u2.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for _ in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpc5khj6u2.swift:14:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s.characters[k] == \" \" {\n       \
    \    ^~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmpc5khj6u2.swift:14:14: error: 'characters' is unavailable:\
    \ Please use String directly\n        if s.characters[k] == \" \" {\n        \
    \     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpc5khj6u2.swift:20:30:\
    \ error: no exact matches in call to subscript \n            s += s.characters[i]\n\
    \                             ^\nSwift.String:3:12: note: candidate expects value\
    \ of type 'Range<String.Index>' for parameter #1 (got 'Int')\n    public subscript(r:\
    \ Range<String.Index>) -> Substring { get }\n           ^\nSwift.Collection:3:23:\
    \ note: candidate expects value of type '(UnboundedRange_) -> ()' for parameter\
    \ #1 (got 'Int')\n    @inlinable public subscript(x: (UnboundedRange_) -> ())\
    \ -> Self.SubSequence { get }\n                      ^\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var s = s\n    var newString = \"\"\n    var newStringArray\
    \ = [String]()\n    var newStringArrayIndex = 0\n    var newStringArrayIndex2\
    \ = 0\n    var newStringArrayIndex3 = 0\n    var newStringArrayIndex4 = 0\n  \
    \  var newStringArrayIndex5 = 0\n    var newStringArrayIndex6 = 0\n    var newStringArrayIndex7\
    \ = 0\n    var newStringArrayIndex8 = 0\n    var newStringArrayIndex9 = 0\n  \
    \  var newStringArrayIndex10 = 0\n    var newStringArrayIndex11 = 0\n    var newStringArrayIndex12\
    \ = 0\n    var newStringArrayIndex13 = 0\n    var newStringArrayIndex14 = 0\n\
    \    var newStringArrayIndex15 = 0\n    var newStringArrayIndex16 = 0\n    var\
    \ newStringArrayIndex17 = 0\n    var newStringArrayIndex18 = 0\n    var newStringArrayIndex19\
    \ = 0\n    var newStringArrayIndex20 = 0\n    var newStringArrayIndex21 = 0\n\
    \    var newStringArrayIndex22 = 0\n    var newStringArrayIndex23 = 0\n    var\
    \ newStringArrayIndex24 = 0\n    var newStringArrayIndex25 = 0\n    var newStringArrayIndex26\
    \ = 0\n    var newStringArrayIndex27 = 0\n    var newStringArrayIndex28 = 0\n\
    \    var newStringArrayIndex29 = 0\n    var newStringArrayIndex30 = 0\n    var\
    \ newStringArrayIndex31 = 0\n    var newStringArrayIndex32 = 0\n    var newStringArrayIndex33\
    \ = 0\n    var newStringArrayIndex34 = 0\n    var newStringArrayIndex35 = 0\n\
    \    var newStringArrayIndex36 = 0\n    var newStringArrayIndex37 = 0\n    var\
    \ newStringArrayIndex38 = 0\n    var newStringArrayIndex39 = 0\n    var newStringArrayIndex40\
    \ = 0\n    var newStringArrayIndex41 = 0\n    var newStringArrayIndex42 = 0\n\
    \    var newStringArrayIndex43 = 0\n    var newStringArrayIndex44 = 0\n    var\
    \ newStringArrayIndex45 = 0\n    var newStringArrayIndex46 = 0\n    var newStringArrayIndex47\
    \ = 0\n    var newStringArrayIndex48 = 0\n    var newStringArrayIndex49 = 0\n\
    \    var newStringArrayIndex50 = 0\n    var newStringArrayIndex51 = 0\n    var\
    \ newStringArrayIndex52 = 0\n    var newStringArrayIndex53 = 0\n    var newStringArrayIndex54\
    \ = 0\n    var newStringArrayIndex55 = 0\n    var newStringArrayIndex56 = 0\n\
    \    var newStringArrayIndex57 = 0\n    var newStringArrayIndex58 = 0\n    var\
    \ newStringArrayIndex59 = 0\n    var newStringArrayIndex60 = 0\n    var newStringArrayIndex61\
    \ = 0\n    var newStringArrayIndex62 = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpwtzndagq.swift:9:9: warning: initialization of variable 's' was\
    \ never used; consider replacing with assignment to '_' or removing it\n    var\
    \ s = s\n    ~~~~^\n    _\n/tmp/tmpwtzndagq.swift:10:9: warning: initialization\
    \ of variable 'newString' was never used; consider replacing with assignment to\
    \ '_' or removing it\n    var newString = \"\"\n    ~~~~^~~~~~~~~\n    _\n/tmp/tmpwtzndagq.swift:11:9:\
    \ warning: initialization of variable 'newStringArray' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var newStringArray = [String]()\n\
    \    ~~~~^~~~~~~~~~~~~~\n    _\n/tmp/tmpwtzndagq.swift:12:9: warning: initialization\
    \ of variable 'newStringArrayIndex' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var newStringArrayIndex = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpwtzndagq.swift:13:9: warning: initialization of variable 'newStringArrayIndex2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var newStringArrayIndex2 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpwtzndagq.swift:14:9:\
    \ warning: initialization of variable 'newStringArrayIndex3' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var newStringArrayIndex3\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpwtzndagq.swift:15:9: warning:\
    \ initialization of variable 'newStringArrayIndex4' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var newStringArrayIndex4 = 0\n  \
    \  ~~~~^~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpwtzndagq.swift:16:9: warning: initialization\
    \ of variable 'newStringArrayIndex5' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var newStringArrayIndex5 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpwtzndagq.swift:17:9: warning: initialization of variable 'newStringArrayIndex6'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var newStringArrayIndex6 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpwtzndagq.swift:18:9:\
    \ warning: initialization of variable 'newStringArrayIndex7' w"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var s = \"\"\n    var i = 0\n    for c in s.characters\
    \ {\n        if c == \" \" {\n            s += \" \"\n        } else {\n     \
    \       s += String(c)\n        }\n    }\n    for c in s.characters {\n      \
    \  if c != \" \" {\n            s += String(c)\n        }\n    }\n    return s\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpi_hwm3ym.swift:11:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpi_hwm3ym.swift:18:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpi_hwm3ym.swift:10:9: warning: initialization of variable\
    \ 'i' was never used; consider replacing with assignment to '_' or removing it\n\
    \    var i = 0\n    ~~~~^\n    _\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var words = s.split(separator:\
    \ \" \")\n    for word in words {\n        let chars = word.characters.sorted()\n\
    \        let charsString = String(chars)\n        let newChars = Array(charsString.unicodeScalars)\n\
    \        let newString = String(UnicodeScalar(newChars))\n        result += newString\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpw70ziyuk.swift:12:26: error: 'characters' is unavailable: Please\
    \ use Substring directly\n        let chars = word.characters.sorted()\n     \
    \                    ^~~~~~~~~~\nSwift.Substring:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: Substring { get set }\n \
    \              ^\n/tmp/tmpw70ziyuk.swift:15:32: error: no exact matches in call\
    \ to initializer \n        let newString = String(UnicodeScalar(newChars))\n \
    \                              ^\nSwift.Unicode.Scalar:7:23: note: candidate expects\
    \ value of type 'UInt8' for parameter #1 (got '[Unicode.Scalar]')\n    @inlinable\
    \ public init(_ v: UInt8)\n                      ^\nSwift.Unicode.Scalar:8:23:\
    \ note: candidate expects value of type 'Unicode.Scalar' for parameter #1 (got\
    \ '[Unicode.Scalar]')\n    @inlinable public init(_ v: Unicode.Scalar)\n     \
    \                 ^\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    for word in s.split(\" \") {\n\
    \        let chars = word.characters\n        var charsSorted = chars.sorted()\n\
    \        var newWord = \"\"\n        for char in charsSorted {\n            newWord\
    \ += String(char)\n        }\n        result += newWord + \" \" // space between\
    \ words\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp1723rt2e.swift:10:19: error: no exact matches in call to instance\
    \ method 'split'\n    for word in s.split(\" \") {\n                  ^\nSwift.Sequence:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var lastWord = \"\"\n    var\
    \ lastAsc = 0\n    for c in s.characters {\n        let ascii = Int(c)\n     \
    \   if ascii > lastAsc {\n            lastAsc = ascii\n            lastWord =\
    \ result\n        }\n        if ascii < lastAsc {\n            lastAsc = ascii\n\
    \            result = result + String(lastWord)\n        }\n        result = result\
    \ + String(lastWord) + String(lastAsc)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmptl4gbmz_.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmptl4gbmz_.swift:13:21:\
    \ error: no exact matches in call to initializer \n        let ascii = Int(c)\n\
    \                    ^\nSwift.Int:7:12: note: candidate expects value of type\
    \ 'Float16' for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float)\n     \
    \      ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Double)\n        \
    \   ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Character')\n    public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12:\
    \ note: candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'Character')\n\
    \    @inlinable public init?(_ description: String)\n                      ^\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var i =\
    \ 0\n    var j = 0\n    for c in s.characters {\n        if c == \" \" {\n   \
    \         if word != \"\" {\n                result += word\n                word\
    \ = \"\"\n            }\n        } else {\n            word += String(c)\n   \
    \     }\n    }\n    if word != \"\" {\n        result += word\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp1kuwb0ns.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp1kuwb0ns.swift:11:9:\
    \ warning: initialization of variable 'i' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var i = 0\n    ~~~~^\n    _\n/tmp/tmp1kuwb0ns.swift:12:9:\
    \ warning: initialization of variable 'j' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var j = 0\n    ~~~~^\n    _\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var newString = \"\"\n    var word = \"\"\n    var\
    \ index = 0\n    for char in s.characters {\n        if char == \" \" {\n    \
    \        newString += word\n            word = \"\"\n        } else {\n      \
    \      word += String(char)\n        }\n    }\n    newString += word\n    return\
    \ newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpvixp2rw2.swift:12:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpvixp2rw2.swift:11:9:\
    \ warning: initialization of variable 'index' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var index = 0\n    ~~~~^~~~~\n  \
    \  _\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var isSpace\
    \ = false\n    for c in s.characters {\n        if isSpace {\n            result\
    \ += word\n            word = \"\"\n            isSpace = false\n        }\n \
    \       if c == \" \" {\n            isSpace = true\n        } else {\n      \
    \      word += String(c)\n        }\n    }\n    result += word\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpgt1l3zb7.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if c == \" \" {\n            result\
    \ += word\n            word = \"\"\n        } else {\n            word += String(c)\n\
    \        }\n    }\n    result += word\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpxdryi0l7.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpxdryi0l7.swift:11:9:\
    \ warning: initialization of variable 'i' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var i = 0\n    ~~~~^\n    _\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    for c in\
    \ s.characters {\n        if c == \" \" {\n            if word != \"\" {\n   \
    \             result += word\n                word = \"\"\n            }\n   \
    \     } else {\n            word += String(c)\n        }\n    }\n    if word !=\
    \ \"\" {\n        result += word\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpsgk4uf8x.swift:11:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var i = 0\n    var j = 0\n \
    \   var k = 0\n    var l = s.count\n    for (i; i < l; i += 1) {\n        for\
    \ (j = i + 1; j < l; j += 1) {\n            for (k = j + 1; k < l; k += 1) {\n\
    \                let char1 = s[i]\n                let char2 = s[j]\n        \
    \        let char3 = s[k]\n                let char4 = s[l]\n                let\
    \ char5 = s[l]\n                let char6 = s[l]\n                let char7 =\
    \ s[l]\n                let char8 = s[l]\n                let char9 = s[l]\n \
    \               let char10 = s[l]\n                let char11 = s[l]\n       \
    \         let char12 = s[l]\n                let char13 = s[l]\n             \
    \   let char14 = s[l]\n                let char15 = s[l]\n                let\
    \ char16 = s[l]\n                let char17 = s[l]\n                let char18\
    \ = s[l]\n                let char19 = s[l]\n                let char20 = s[l]\n\
    \                let char21 = s[l]\n                let char22 = s[l]\n      \
    \          let char23 = s[l]\n                let char24 = s[l]\n            \
    \    let char25 = s[l]\n                let char26 = s[l]\n                let\
    \ char27 = s[l]\n                let char28 = s[l]\n                let char29\
    \ = s[l]\n                let char30 = s[l]\n                let char31 = s[l]\n\
    \                let char32 = s[l]\n                let char33 = s[l]\n      \
    \          let char34 = s[l]\n                let char35 = s[l]\n            \
    \    let char36 = s[l]\n                let char37 = s[l]\n                let\
    \ char38 = s[l]\n                let char39 = s[l]\n                let char40\
    \ = s[l]\n                let char41 = s[l]\n                let char42 = s[l]\n\
    \                let char43 = s[l]\n                let char44 = s[l]\n      \
    \          let char45 = s[l]\n                let char46 = s[l]\n            \
    \    let char47 = s[l]\n                let char48 = s[l]\n                let\
    \ char49 = s[l]\n                let char50 = s[l]\n                let char51\
    \ = s[l]\n                let char52 = s[l]\n                let char53 = s[l]\n\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpgl9yzfxn.swift:14:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for (i; i < l; i += 1) {\n    ^   ~~~~~~~~~~~~~~~~~~\n/tmp/tmpgl9yzfxn.swift:15:9:\
    \ error: C-style for statement has been removed in Swift 3\n        for (j = i\
    \ + 1; j < l; j += 1) {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpgl9yzfxn.swift:16:13:\
    \ error: C-style for statement has been removed in Swift 3\n            for (k\
    \ = j + 1; k < l; k += 1) {\n            ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpgl9yzfxn.swift:92:116:\
    \ error: expected '}' at end of brace statement\nassert(anti_shuffle(s: \"Hi.\
    \ My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\")\n                                                              \
    \                                                     ^\n/tmp/tmpgl9yzfxn.swift:15:40:\
    \ note: to match this opening '{'\n        for (j = i + 1; j < l; j += 1) {\n\
    \                                       ^\n/tmp/tmpgl9yzfxn.swift:92:116: error:\
    \ expected '}' at end of brace statement\nassert(anti_shuffle(s: \"Hi. My name\
    \ is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\
    )\n                                                                          \
    \                                         ^\n/tmp/tmpgl9yzfxn.swift:14:28: note:\
    \ to match this opening '{'\n    for (i; i < l; i += 1) {\n                  \
    \         ^\n/tmp/tmpgl9yzfxn.swift:92:116: error: expected '}' at end of brace\
    \ statement\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\"\
    ) == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\n                        \
    \                                                                            \
    \               ^\n/tmp/tmpgl9yzfxn.swift:8:40: note: to match this opening '{'\n\
    func anti_shuffle(s: String) -> String {\n                                   \
    \    ^\n/tmp/tmpgl9yzfxn.swift:17:29: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n                let\
    \ char1 = s[i]\n                            ^~~~\nSwift.String:3:12: note: 'su"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var words = s.split(separator:\
    \ \" \")\n    for word in words {\n        let chars = word.characters\n     \
    \   let charsSorted = chars.sorted()\n        let charsSortedString = String(charsSorted)\n\
    \        let charsSortedStringWithoutSpace = charsSortedString.replacingOccurrences(of:\
    \ \" \", with: \"\")\n        let charsSortedStringWithoutSpaceWithoutSpace =\
    \ charsSortedStringWithoutSpace.replacingOccurrences(of: \" \", with: \"\")\n\
    \        let charsSortedStringWithoutSpaceWithoutSpaceWithoutSpace = charsSortedStringWithoutSpaceWithoutSpace.replacingOccurrences(of:\
    \ \" \", with: \"\")\n        let charsSortedStringWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpace\
    \ = charsSortedStringWithoutSpaceWithoutSpaceWithoutSpace.replacingOccurrences(of:\
    \ \" \", with: \"\")\n        let charsSortedStringWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpace\
    \ = charsSortedStringWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpace.replacingOccurrences(of:\
    \ \" \", with: \"\")\n        let charsSortedStringWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpace\
    \ = charsSortedStringWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpace.replacingOccurrences(of:\
    \ \" \", with: \"\")\n        let charsSortedStringWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpace\
    \ = charsSortedStringWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpace.replacingOccurrences(of:\
    \ \" \", with: \"\")\n        let charsSortedStringWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpace\
    \ = charsSortedStringWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpace.replacingOccurrences(of:\
    \ \" \", with: \"\")\n        let charsSortedStringWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpace\
    \ = charsSortedStringWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpace.replacingOccurrences(of:\
    \ \" \", with: \"\")\n        let charsSortedStringWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpace\
    \ = charsSortedStringWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpace.replacingOccurrences(of:\
    \ \" \", with: \"\")\n        let charsSortedStringWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpace\
    \ = char\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpmb1cqlbg.swift:47:116: error: expected '}' at end of brace statement\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")\n                                 \
    \                                                                            \
    \      ^\n/tmp/tmpmb1cqlbg.swift:8:40: note: to match this opening '{'\nfunc anti_shuffle(s:\
    \ String) -> String {\n                                       ^\n/tmp/tmpmb1cqlbg.swift:12:26:\
    \ error: 'characters' is unavailable: Please use Substring directly\n        let\
    \ chars = word.characters\n                         ^~~~~~~~~~\nSwift.Substring:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: Substring\
    \ { get set }\n               ^\n/tmp/tmpmb1cqlbg.swift:15:63: error: value of\
    \ type 'String' has no member 'replacingOccurrences'\n        let charsSortedStringWithoutSpace\
    \ = charsSortedString.replacingOccurrences(of: \" \", with: \"\")\n          \
    \                                  ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmb1cqlbg.swift:25:165:\
    \ error: cannot find 'char' in scope\n        let charsSortedStringWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpace\
    \ = char\n                                                                   \
    \                                                                            \
    \                     ^~~~\n/tmp/tmpmb1cqlbg.swift:29:6: error: operator functions\
    \ can only be declared at global or in type scope\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    for c in\
    \ s.characters {\n        if c == \" \" {\n            result += word\n      \
    \      word = \"\"\n        } else {\n            word += String(c)\n        }\n\
    \    }\n    result += word\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpggunqsu3.swift:11:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if c.isWhitespace {\n            if\
    \ word != \"\" {\n                result += \" \" + word\n                word\
    \ = \"\"\n            }\n        } else {\n            word += c.asciiValue\n\
    \        }\n    }\n    if word != \"\" {\n        result += \" \" + word\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmprg4xzrjd.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmprg4xzrjd.swift:19:23:\
    \ error: cannot convert value of type 'UInt8?' to expected argument type 'String'\n\
    \            word += c.asciiValue\n                      ^\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var lastChar\
    \ = \"\"\n    for char in s.characters {\n        switch char {\n        case\
    \ \" \":\n            result += word\n            word = \"\"\n            lastChar\
    \ = \"\"\n        case \".\":\n            word += lastChar\n            lastChar\
    \ = \"\"\n        default:\n            word += char\n            lastChar = char\n\
    \        }\n    }\n    result += word\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpd11ab5y5.swift:12:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpd11ab5y5.swift:22:21:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            word += char\n                    ^\n/tmp/tmpd11ab5y5.swift:23:24:\
    \ error: cannot assign value of type 'Character' to type 'String'\n          \
    \  lastChar = char\n                       ^~~~\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var i = 0\n    for c in s.characters\
    \ {\n        if c != \" \" {\n            result += String(UnicodeScalar(UInt32(c)))\n\
    \        } else {\n            result += \" \"\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpt4w1oo6x.swift:11:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpt4w1oo6x.swift:13:44:\
    \ error: no exact matches in call to initializer \n            result += String(UnicodeScalar(UInt32(c)))\n\
    \                                           ^\n/tmp/tmpt4w1oo6x.swift:13:44: note:\
    \ candidate expects value of type 'Float16' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            result += String(UnicodeScalar(UInt32(c)))\n\
    \                                           ^\n/tmp/tmpt4w1oo6x.swift:13:44: note:\
    \ candidate expects value of type 'Float' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            result += String(UnicodeScalar(UInt32(c)))\n\
    \                                           ^\n/tmp/tmpt4w1oo6x.swift:13:44: note:\
    \ candidate expects value of type 'Double' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            result += String(UnicodeScalar(UInt32(c)))\n\
    \                                           ^\n/tmp/tmpt4w1oo6x.swift:13:44: note:\
    \ candidate expects value of type 'Float80' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            result += String(UnicodeScalar(UInt32(c)))\n\
    \                                           ^\n/tmp/tmpt4w1oo6x.swift:13:44: note:\
    \ candidate expects value of type 'Builtin.Int32' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            result += String(UnicodeScalar(UInt32(c)))\n\
    \                                           ^\n/tmp/tmpt4w1oo6x.swift:13:44: note:\
    \ candidate expects value of type 'Unicode.Scalar' for parameter #1 (got 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>'))\n            result += String(UnicodeScalar(UInt32(c)))\n\
    \                                           ^\n/tmp/tmpt4w1oo6x.swift:13:30: error:\
    \ value of optional type 'UnicodeScalar?' (a"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if c.isLetter {\n            word +=\
    \ c\n        } else {\n            if word != \"\" {\n                result +=\
    \ word\n                word = \"\"\n            }\n            result += c\n\
    \        }\n    }\n    if word != \"\" {\n        result += word\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmprvo26ihf.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmprvo26ihf.swift:14:21:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            word += c\n                    ^\n/tmp/tmprvo26ihf.swift:20:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += c\n                      ^\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    for word in s.split(\" \") {\n\
    \        var newWord = \"\"\n        for char in word {\n            newWord +=\
    \ String(Int(char.asciiValue)) + \" \"\n        }\n        result = newWord +\
    \ result\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp9vqynbqz.swift:10:19: error: no exact matches in call to instance\
    \ method 'split'\n    for word in s.split(\" \") {\n                  ^\nSwift.Sequence:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var newString = \"\"\n    var word = \"\"\n    for\
    \ c in s.characters {\n        if c.isLetter {\n            word += c\n      \
    \  } else {\n            newString += word\n            word = \"\"\n        \
    \    newString += c\n        }\n    }\n    newString += word\n    return newString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpma1vefkg.swift:11:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpma1vefkg.swift:13:21:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            word += c\n                    ^\n/tmp/tmpma1vefkg.swift:17:26: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            newString += c\n                         ^\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var isSpace\
    \ = false\n    for c in s.characters {\n        if isSpace {\n            result\
    \ += word\n            isSpace = false\n            word = \"\"\n        }\n \
    \       if c == \" \" {\n            isSpace = true\n        } else {\n      \
    \      word += String(c)\n        }\n    }\n    result += word\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpw6kqnpzb.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    for c in\
    \ s.characters {\n        if c.isLetter {\n            word += c.asciiValue\n\
    \        } else {\n            result += word\n            result += c.asciiValue\n\
    \            word = \"\"\n        }\n    }\n    result += word\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp5ktsnyxf.swift:11:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp5ktsnyxf.swift:13:23:\
    \ error: cannot convert value of type 'UInt8?' to expected argument type 'String'\n\
    \            word += c.asciiValue\n                      ^\n/tmp/tmp5ktsnyxf.swift:16:25:\
    \ error: cannot convert value of type 'UInt8?' to expected argument type 'String'\n\
    \            result += c.asciiValue\n                        ^\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var i = 0\n    for c in s.characters\
    \ {\n        if c.isWhitespace {\n            result += \" \"\n        } else\
    \ {\n            result += c.asciiValue\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpxaqvityo.swift:11:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpxaqvityo.swift:15:25:\
    \ error: cannot convert value of type 'UInt8?' to expected argument type 'String'\n\
    \            result += c.asciiValue\n                        ^\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var newString = \"\"\n    var wordArray = s.split(separator:\
    \ \" \")\n    for word in wordArray {\n        var newWord = \"\"\n        for\
    \ char in word {\n            newWord += String(UnicodeScalar(Int(char.value)!))\n\
    \        }\n        newString += newWord + \" \" // space after each word\n  \
    \  }\n    return newString.trimmingCharacters(in: .whitespacesAndNewlines)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpjlra30ro.swift:14:31: error: value of optional type 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>') must be unwrapped to a value of type 'UnicodeScalar'\
    \ (aka 'Unicode.Scalar')\n            newWord += String(UnicodeScalar(Int(char.value)!))\n\
    \                              ^\n/tmp/tmpjlra30ro.swift:14:31: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \         newWord += String(UnicodeScalar(Int(char.value)!))\n               \
    \               ^\n                                                          \
    \    ?? <#default value#>\n/tmp/tmpjlra30ro.swift:14:31: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n            newWord\
    \ += String(UnicodeScalar(Int(char.value)!))\n                              ^\n\
    \                                                             !\n/tmp/tmpjlra30ro.swift:14:54:\
    \ error: value of type 'Character' has no member 'value'\n            newWord\
    \ += String(UnicodeScalar(Int(char.value)!))\n                               \
    \                 ~~~~ ^~~~~\n/tmp/tmpjlra30ro.swift:18:22: error: value of type\
    \ 'String' has no member 'trimmingCharacters'\n    return newString.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n           ~~~~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpjlra30ro.swift:18:46:\
    \ error: cannot infer contextual base in reference to member 'whitespacesAndNewlines'\n\
    \    return newString.trimmingCharacters(in: .whitespacesAndNewlines)\n      \
    \                                      ~^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var isSpace\
    \ = false\n    for c in s.characters {\n        if isSpace {\n            result\
    \ += word\n            word = \"\"\n            isSpace = false\n        }\n \
    \       if c == \" \" {\n            isSpace = true\n        } else {\n      \
    \      word += String(c)\n        }\n    }\n    result += word\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpgt1l3zb7.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var s = s\n    var newString = \"\"\n    var i = 0\n\
    \    var j = 0\n    var k = 0\n    var l = s.characters.count\n    var newString\
    \ = \"\"\n    var newStringArray = [String]()\n    var newStringArray2 = []\n\
    \    var newStringArray3 = [String]()\n    var newStringArray4 = [String]()\n\
    \    var newStringArray5 = [String]()\n    var newStringArray6 = [String]()\n\
    \    var newStringArray7 = [String]()\n    var newStringArray8 = [String]()\n\
    \    var newStringArray9 = [String]()\n    var newStringArray10 = [String]()\n\
    \    var newStringArray11 = [String]()\n    var newStringArray12 = [String]()\n\
    \    var newStringArray13 = [String]()\n    var newStringArray14 = [String]()\n\
    \    var newStringArray15 = [String]()\n    var newStringArray16 = [String]()\n\
    \    var newStringArray17 = [String]()\n    var newStringArray18 = [String]()\n\
    \    var newStringArray19 = [String]()\n    var newStringArray20 = [String]()\n\
    \    var newStringArray21 = [String]()\n    var newStringArray22 = [String]()\n\
    \    var newStringArray23 = [String]()\n    var newStringArray24 = [String]()\n\
    \    var newStringArray25 = [String]()\n    var newStringArray26 = [String]()\n\
    \    var newStringArray27 = [String]()\n    var newStringArray28 = [String]()\n\
    \    var newStringArray29 = [String]()\n    var newStringArray30 = [String]()\n\
    \    var newStringArray31 = [String]()\n    var newStringArray32 = [String]()\n\
    \    var newStringArray33 = [String]()\n    var newStringArray34 = [String]()\n\
    \    var newStringArray35 = [String]()\n    var newStringArray36 = [String]()\n\
    \    var newStringArray37 = [String]()\n    var newStringArray38 = [String]()\n\
    \    var newStringArray39 = [String]()\n    var newStringArray40 = [String]()\n\
    \    var newStringArray41 = [String]()\n    var newStringArray42 = [String]()\n\
    \    var newStringArray43 = [String]()\n    var newStringArray44 = [String]()\n\
    \    var newStringArray45 = [String]()\n    var newStringArray46 = [String]()\n\
    \    var newStringArray47 = [String]()\n    var newStringArray48 = [String]()\n\
    \    var new\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpusgucvli.swift:14:15: error: 'characters' is unavailable: Please\
    \ use String directly\n    var l = s.characters.count\n              ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpusgucvli.swift:15:9:\
    \ error: invalid redeclaration of 'newString'\n    var newString = \"\"\n    \
    \    ^\n/tmp/tmpusgucvli.swift:10:9: note: 'newString' previously declared here\n\
    \    var newString = \"\"\n        ^\n/tmp/tmpusgucvli.swift:17:27: error: empty\
    \ collection literal requires an explicit type\n    var newStringArray2 = []\n\
    \                          ^~\n/tmp/tmpusgucvli.swift:64:9: error: type annotation\
    \ missing in pattern\n    var new\n        ^\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    for c in s.characters {\n  \
    \      if c.isLetter {\n            result += c.asciiValue\n        } else {\n\
    \            result += \"_\"\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmprdg4qmlm.swift:10:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmprdg4qmlm.swift:12:25:\
    \ error: cannot convert value of type 'UInt8?' to expected argument type 'String'\n\
    \            result += c.asciiValue\n                        ^\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var newString = \"\"\n    for char in s.characters\
    \ {\n        let asciiValue = Int(char)\n        newString += String(UnicodeScalar(asciiValue))\n\
    \    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpxg1yl8b1.swift:10:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpxg1yl8b1.swift:11:26:\
    \ error: no exact matches in call to initializer \n        let asciiValue = Int(char)\n\
    \                         ^\nSwift.Int:7:12: note: candidate expects value of\
    \ type 'Float16' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value of type\
    \ 'Float' for parameter #1 (got 'Character')\n    public init(_ source: Float)\n\
    \           ^\nSwift.Int:12:12: note: candidate expects value of type 'Double'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Double)\n    \
    \       ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Float80)\n       \
    \    ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\nSwift.FixedWidthInteger:3:23: note: candidate expects value of type\
    \ 'String' for parameter #1 (got 'Character')\n    @inlinable public init?(_ description:\
    \ String)\n                      ^\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    for c in s.characters {\n  \
    \      switch c {\n        case \" \":\n            result += \" \"\n        case\
    \ \".\":\n            result += \"!\"\n        default:\n            result +=\
    \ String(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp2igmwbri.swift:10:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var isSpace\
    \ = false\n    for c in s.characters {\n        if isSpace {\n            result\
    \ += word\n            word = \"\"\n            isSpace = false\n        }\n \
    \       if c == \" \" {\n            isSpace = true\n        } else {\n      \
    \      word += String(c)\n        }\n    }\n    result += word\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpgt1l3zb7.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var words = s.split(separator:\
    \ \" \")\n    var sortedWords = words.sorted(by: { $0.count > $1.count })\n  \
    \  for word in sortedWords {\n        result += String(word.characters.map { String($0)\
    \ }).sorted()\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpyj1lkbve.swift:13:19: error: no exact matches in call to initializer\
    \ \n        result += String(word.characters.map { String($0) }).sorted()\n  \
    \                ^\nSwift.String:4:12: note: candidate requires that the types\
    \ 'String' and 'Character' be equivalent (requirement specified as 'S.Element'\
    \ == 'Character')\n    public init<S>(_ characters: S) where S : Sequence, S.Element\
    \ == Character\n           ^\nSwift.RangeReplaceableCollection:3:23: note: candidate\
    \ requires that the types 'String.Element' (aka 'Character') and 'String' be equivalent\
    \ (requirement specified as 'Self.Element' == 'S.Element')\n    @inlinable public\
    \ init<S>(_ elements: S) where S : Sequence, Self.Element == S.Element\n     \
    \                 ^\nSwift.String:2:12: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(describing:)')\n    public init<Subject>(describing instance:\
    \ Subject)\n           ^\nSwift.String:3:23: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(describing:)')\n    @inlinable public init<Subject>(describing\
    \ instance: Subject) where Subject : CustomStringConvertible\n               \
    \       ^\nSwift.String:6:12: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(reflecting:)')\n    public init<Subject>(reflecting subject: Subject)\n\
    \           ^\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var words = s.split(separator:\
    \ \" \")\n    for word in words {\n        var chars = word.characters\n     \
    \   for char in chars {\n            var asciiValue = char.asciiValue\n      \
    \      if asciiValue > 64 {\n                asciiValue -= 64\n            }\n\
    \            char.asciiValue = asciiValue\n        }\n        result += String(chars)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp_pe4x2sl.swift:12:26: error: 'characters' is unavailable: Please\
    \ use Substring directly\n        var chars = word.characters\n              \
    \           ^~~~~~~~~~\nSwift.Substring:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: Substring { get set }\n           \
    \    ^\n/tmp/tmp_pe4x2sl.swift:15:16: error: value of optional type 'UInt8?' must\
    \ be unwrapped to a value of type 'UInt8'\n            if asciiValue > 64 {\n\
    \               ^\n/tmp/tmp_pe4x2sl.swift:15:16: note: coalesce using '??' to\
    \ provide a default when the optional value contains 'nil'\n            if asciiValue\
    \ > 64 {\n               ^\n                          ?? <#default value#>\n/tmp/tmp_pe4x2sl.swift:15:16:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            if asciiValue > 64 {\n               ^\n                \
    \         !\n/tmp/tmp_pe4x2sl.swift:16:17: error: value of optional type 'UInt8?'\
    \ must be unwrapped to a value of type 'UInt8'\n                asciiValue -=\
    \ 64\n                ^\n/tmp/tmp_pe4x2sl.swift:16:17: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n              \
    \  asciiValue -= 64\n                ^\n                          !\n/tmp/tmp_pe4x2sl.swift:18:18:\
    \ error: cannot assign to property: 'asciiValue' is a get-only property\n    \
    \        char.asciiValue = asciiValue\n            ~~~~~^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var isSpace\
    \ = false\n    for c in s.characters {\n        if isSpace {\n            result\
    \ += word\n            word = \"\"\n            isSpace = false\n        }\n \
    \       if c == \" \" {\n            isSpace = true\n        } else {\n      \
    \      word += String(c)\n        }\n    }\n    result += word\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpgt1l3zb7.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var i = 0\n    for c in s.characters\
    \ {\n        if c == \" \" {\n            result += \" \"\n        } else {\n\
    \            result += String(c)\n        }\n    }\n    for c in result.characters\
    \ {\n        if c != \" \" {\n            result += String(c)\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpsuneeu89.swift:11:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsuneeu89.swift:18:21:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ result.characters {\n                    ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpsuneeu89.swift:10:9: warning: initialization\
    \ of variable 'i' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    var i = 0\n    ~~~~^\n    _\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var s = \"\"\n    var i = 0\n    for c in s.characters\
    \ {\n        if c.isLetter {\n            s += c.asciiValue\n        } else {\n\
    \            s += \" \"\n        }\n    }\n    return s\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmptjhugnux.swift:11:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmptjhugnux.swift:13:20:\
    \ error: cannot convert value of type 'UInt8?' to expected argument type 'String'\n\
    \            s += c.asciiValue\n                   ^\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var words = s.split(separator:\
    \ \" \")\n    for word in words {\n        let chars = word.characters\n     \
    \   var charsSorted = chars.sorted()\n        var newWord = \"\"\n        for\
    \ char in charsSorted {\n            newWord += String(char)\n        }\n    \
    \    result += newWord + \" \" // add space after each word\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp7s5kg2mi.swift:12:26: error: 'characters' is unavailable: Please\
    \ use Substring directly\n        let chars = word.characters\n              \
    \           ^~~~~~~~~~\nSwift.Substring:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: Substring { get set }\n           \
    \    ^\n/tmp/tmp7s5kg2mi.swift:10:9: warning: variable 'words' was never mutated;\
    \ consider changing to 'let' constant\n    var words = s.split(separator: \" \"\
    )\n    ~~~ ^\n    let\n/tmp/tmp7s5kg2mi.swift:13:13: warning: variable 'charsSorted'\
    \ was never mutated; consider changing to 'let' constant\n        var charsSorted\
    \ = chars.sorted()\n        ~~~ ^\n        let\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var s = s\n    var newString = \"\"\n    var newStringArray:\
    \ [String] = []\n    var newStringArrayIndex = 0\n    var newStringArrayIndex2\
    \ = 0\n    var newStringArrayIndex3 = 0\n    var newStringArrayIndex4 = 0\n  \
    \  var newStringArrayIndex5 = 0\n    var newStringArrayIndex6 = 0\n    var newStringArrayIndex7\
    \ = 0\n    var newStringArrayIndex8 = 0\n    var newStringArrayIndex9 = 0\n  \
    \  var newStringArrayIndex10 = 0\n    var newStringArrayIndex11 = 0\n    var newStringArrayIndex12\
    \ = 0\n    var newStringArrayIndex13 = 0\n    var newStringArrayIndex14 = 0\n\
    \    var newStringArrayIndex15 = 0\n    var newStringArrayIndex16 = 0\n    var\
    \ newStringArrayIndex17 = 0\n    var newStringArrayIndex18 = 0\n    var newStringArrayIndex19\
    \ = 0\n    var newStringArrayIndex20 = 0\n    var newStringArrayIndex21 = 0\n\
    \    var newStringArrayIndex22 = 0\n    var newStringArrayIndex23 = 0\n    var\
    \ newStringArrayIndex24 = 0\n    var newStringArrayIndex25 = 0\n    var newStringArrayIndex26\
    \ = 0\n    var newStringArrayIndex27 = 0\n    var newStringArrayIndex28 = 0\n\
    \    var newStringArrayIndex29 = 0\n    var newStringArrayIndex30 = 0\n    var\
    \ newStringArrayIndex31 = 0\n    var newStringArrayIndex32 = 0\n    var newStringArrayIndex33\
    \ = 0\n    var newStringArrayIndex34 = 0\n    var newStringArrayIndex35 = 0\n\
    \    var newStringArrayIndex36 = 0\n    var newStringArrayIndex37 = 0\n    var\
    \ newStringArrayIndex38 = 0\n    var newStringArrayIndex39 = 0\n    var newStringArrayIndex40\
    \ = 0\n    var newStringArrayIndex41 = 0\n    var newStringArrayIndex42 = 0\n\
    \    var newStringArrayIndex43 = 0\n    var newStringArrayIndex44 = 0\n    var\
    \ newStringArrayIndex45 = 0\n    var newStringArrayIndex46 = 0\n    var newStringArrayIndex47\
    \ = 0\n    var newStringArrayIndex48 = 0\n    var newStringArrayIndex49 = 0\n\
    \    var newStringArrayIndex50 = 0\n    var newStringArrayIndex51 = 0\n    var\
    \ newStringArrayIndex52 = 0\n    var newStringArrayIndex53 = 0\n    var newStringArrayIndex54\
    \ = 0\n    var newStringArrayIndex55 = 0\n    var newStringArrayIndex56 = 0\n\
    \    var newStringArrayIndex57 = 0\n    var newStringArrayIndex58 = 0\n    var\
    \ newStringArrayIndex59 = 0\n    var newStringArrayIndex60 = 0\n    var newStringArrayIndex61\
    \ = 0\n    var newStringArrayIndex62 = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpfa41ykke.swift:9:9: warning: initialization of variable 's' was\
    \ never used; consider replacing with assignment to '_' or removing it\n    var\
    \ s = s\n    ~~~~^\n    _\n/tmp/tmpfa41ykke.swift:10:9: warning: initialization\
    \ of variable 'newString' was never used; consider replacing with assignment to\
    \ '_' or removing it\n    var newString = \"\"\n    ~~~~^~~~~~~~~\n    _\n/tmp/tmpfa41ykke.swift:11:9:\
    \ warning: variable 'newStringArray' was never used; consider replacing with '_'\
    \ or removing it\n    var newStringArray: [String] = []\n        ^~~~~~~~~~~~~~\n\
    \        _\n/tmp/tmpfa41ykke.swift:12:9: warning: initialization of variable 'newStringArrayIndex'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var newStringArrayIndex = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpfa41ykke.swift:13:9:\
    \ warning: initialization of variable 'newStringArrayIndex2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var newStringArrayIndex2\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpfa41ykke.swift:14:9: warning:\
    \ initialization of variable 'newStringArrayIndex3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var newStringArrayIndex3 = 0\n  \
    \  ~~~~^~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpfa41ykke.swift:15:9: warning: initialization\
    \ of variable 'newStringArrayIndex4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var newStringArrayIndex4 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpfa41ykke.swift:16:9: warning: initialization of variable 'newStringArrayIndex5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var newStringArrayIndex5 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpfa41ykke.swift:17:9:\
    \ warning: initialization of variable 'newStringArrayIndex6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var newStringArrayIndex6\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpfa41ykke.swift:18:9: warning:\
    \ initialization of variable 'newStringArrayIndex7' was never used; consider re"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var lastChar\
    \ = \"\"\n    var lastWord = \"\"\n    var lastWordChar = \"\"\n    var lastWordCharAsc\
    \ = 0\n    var lastWordCharDesc = 0\n    var lastWordAsc = 0\n    var lastWordDesc\
    \ = 0\n    var lastWordAscAsc = 0\n    var lastWordAscDesc = 0\n    var lastWordDescAsc\
    \ = 0\n    var lastWordDescDesc = 0\n    var lastWordAscAscAsc = 0\n    var lastWordAscAscDesc\
    \ = 0\n    var lastWordAscDescAsc = 0\n    var lastWordDescAscDesc = 0\n    var\
    \ lastWordDescDescAsc = 0\n    var lastWordDescDescDesc = 0\n    var lastWordAscAscAsc\
    \ = 0\n    var lastWordAscAscDesc = 0\n    var lastWordAscDescAsc = 0\n    var\
    \ lastWordAscDescDesc = 0\n    var lastWordDescAscAsc = 0\n    var lastWordDescAscDesc\
    \ = 0\n    var lastWordDescDescAsc = 0\n    var lastWordDescDescDesc = 0\n   \
    \ var lastWordAscAscAscAsc = 0\n    var lastWordAscAscAscDesc = 0\n    var lastWordAscAscDescAsc\
    \ = 0\n    var lastWordAscAscDescDesc = 0\n    var lastWordAscDescAsc = 0\n  \
    \  var lastWordAscDescDesc = 0\n    var lastWordAscDescAsc = 0\n    var lastWordAscDescDesc\
    \ = 0\n    var lastWordDescAscAscAsc = 0\n    var lastWordDescAscAscDesc = 0\n\
    \    var lastWordDescAscDescAsc = 0\n    var lastWordDescAscDescDesc = 0\n   \
    \ var lastWordDescDescAsc = 0\n    var lastWordDescDescAsc = 0\n    var lastWordDescDescDesc\
    \ = 0\n    var lastWordAscAscAscAsc = 0\n    var lastWordAscAscAscDesc = 0\n \
    \   var lastWordAscAscDescAsc = 0\n    var lastWordAscAscDescDesc = 0\n    var\
    \ lastWordAscDescAsc = 0\n    var lastWordAscDescDesc = 0\n    var lastWordAscDescAsc\
    \ = 0\n    var lastWordAscDescDesc = 0\n    var lastWordDescAscAscAsc = 0\n  \
    \  var lastWordDescAscAscDesc = 0\n    var lastWordDescAscDescAsc = 0\n    var\
    \ lastWordDescAscDescDesc = 0\n    var lastWordDescDescAsc = 0\n\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpvacftrzh.swift:28:9: error: invalid redeclaration of 'lastWordAscAscAsc'\n\
    \    var lastWordAscAscAsc = 0\n        ^\n/tmp/tmpvacftrzh.swift:22:9: note:\
    \ 'lastWordAscAscAsc' previously declared here\n    var lastWordAscAscAsc = 0\n\
    \        ^\n/tmp/tmpvacftrzh.swift:29:9: error: invalid redeclaration of 'lastWordAscAscDesc'\n\
    \    var lastWordAscAscDesc = 0\n        ^\n/tmp/tmpvacftrzh.swift:23:9: note:\
    \ 'lastWordAscAscDesc' previously declared here\n    var lastWordAscAscDesc =\
    \ 0\n        ^\n/tmp/tmpvacftrzh.swift:30:9: error: invalid redeclaration of 'lastWordAscDescAsc'\n\
    \    var lastWordAscDescAsc = 0\n        ^\n/tmp/tmpvacftrzh.swift:24:9: note:\
    \ 'lastWordAscDescAsc' previously declared here\n    var lastWordAscDescAsc =\
    \ 0\n        ^\n/tmp/tmpvacftrzh.swift:33:9: error: invalid redeclaration of 'lastWordDescAscDesc'\n\
    \    var lastWordDescAscDesc = 0\n        ^\n/tmp/tmpvacftrzh.swift:25:9: note:\
    \ 'lastWordDescAscDesc' previously declared here\n    var lastWordDescAscDesc\
    \ = 0\n        ^\n/tmp/tmpvacftrzh.swift:34:9: error: invalid redeclaration of\
    \ 'lastWordDescDescAsc'\n    var lastWordDescDescAsc = 0\n        ^\n/tmp/tmpvacftrzh.swift:26:9:\
    \ note: 'lastWordDescDescAsc' previously declared here\n    var lastWordDescDescAsc\
    \ = 0\n        ^\n/tmp/tmpvacftrzh.swift:35:9: error: invalid redeclaration of\
    \ 'lastWordDescDescDesc'\n    var lastWordDescDescDesc = 0\n        ^\n/tmp/tmpvacftrzh.swift:27:9:\
    \ note: 'lastWordDescDescDesc' previously declared here\n    var lastWordDescDescDesc\
    \ = 0\n        ^\n/tmp/tmpvacftrzh.swift:40:9: error: invalid redeclaration of\
    \ 'lastWordAscDescAsc'\n    var lastWordAscDescAsc = 0\n        ^\n/tmp/tmpvacftrzh.swift:24:9:\
    \ note: 'lastWordAscDescAsc' previously declared here\n    var lastWordAscDescAsc\
    \ = 0\n        ^\n/tmp/tmpvacftrzh.swift:41:9: error: invalid redeclaration of\
    \ 'lastWordAscDescDesc'\n    var lastWordAscDescDesc = 0\n        ^\n/tmp/tmpvacftrzh.swift:31:9:\
    \ note: 'lastWordAscDescDesc' previously declared here\n    var lastWordAscDescDesc\
    \ = 0\n        ^\n/tmp/tmpvacftrzh.swift:42:9: error: invalid redeclaration of\
    \ 'lastWordAs"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var newString = \"\"\n    var word = \"\"\n    for\
    \ c in s.characters {\n        switch c {\n        case \" \":\n            newString\
    \ += word\n            word = \"\"\n        case \".\":\n            newString\
    \ += word\n            word = \"\"\n        default:\n            word += String(c)\n\
    \        }\n    }\n    newString += word\n    return newString\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp3gkg41dh.swift:11:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var words = s.split(separator:\
    \ \" \")\n    for word in words {\n        var newWord = \"\"\n        for char\
    \ in word {\n            let asciiValue = Int(char.unicodeScalars.first!.value)\n\
    \            newWord = newWord.stringByAppendingString(String(asciiValue))\n \
    \       }\n        result = result.stringByAppendingString(newWord)\n        result\
    \ = result.stringByAppendingString(\" \")\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpz9y0u84j.swift:15:31: error: value of type 'String' has no member\
    \ 'stringByAppendingString'\n            newWord = newWord.stringByAppendingString(String(asciiValue))\n\
    \                      ~~~~~~~ ^~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpz9y0u84j.swift:17:25:\
    \ error: value of type 'String' has no member 'stringByAppendingString'\n    \
    \    result = result.stringByAppendingString(newWord)\n                 ~~~~~~\
    \ ^~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpz9y0u84j.swift:18:25: error: value of type\
    \ 'String' has no member 'stringByAppendingString'\n        result = result.stringByAppendingString(\"\
    \ \")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var s = s\n    var newString = \"\"\n    var lastChar\
    \ = \"\"\n    var lastCharAsciiValue = 0\n    var lastCharIndex = 0\n    var lastCharIndexAsciiValue\
    \ = 0\n    var lastCharIndexAsciiValueAsciiValue = 0\n    var lastCharIndexAsciiValueAsciiValueAsciiValue\
    \ = 0\n    var lastCharIndexAsciiValueAsciiValueAsciiValueAsciiValue = 0\n   \
    \ var lastCharIndexAsciiValueAsciiValueAsciiValueAsciiValueAsciiValue = 0\n  \
    \  var lastCharIndexAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValue\
    \ = 0\n    var lastCharIndexAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValue\
    \ = 0\n    var lastCharIndexAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValue\
    \ = 0\n    var lastCharIndexAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValue\
    \ = 0\n    var lastCharIndexAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValue\
    \ = 0\n    var lastCharIndexAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValue\
    \ = 0\n    var lastCharIndexAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValue\
    \ = 0\n    var lastCharIndexAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValue\
    \ = 0\n    var lastCharIndexAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValue\
    \ = 0\n    var lastCharIndexAscii\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp221odjee.swift:23:9: error: invalid redeclaration of 'lastCharIndexAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValue'\n\
    \    var lastCharIndexAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValue\
    \ = 0\n        ^\n/tmp/tmp221odjee.swift:22:9: note: 'lastCharIndexAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValue'\
    \ previously declared here\n    var lastCharIndexAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValue\
    \ = 0\n        ^\n/tmp/tmp221odjee.swift:26:9: error: invalid redeclaration of\
    \ 'lastCharIndexAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValue'\n\
    \    var lastCharIndexAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValue\
    \ = 0\n        ^\n/tmp/tmp221odjee.swift:25:9: note: 'lastCharIndexAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValue'\
    \ previously declared here\n    var lastCharIndexAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValueAsciiValue\
    \ = 0\n        ^\n/tmp/tmp221odjee.swift:28:9: error: type annotation missing\
    \ in pattern\n    var lastCharIndexAscii\n        ^\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var words = s.split(separator:\
    \ \" \")\n    for word in words {\n        let chars = word.characters\n     \
    \   var newWord = \"\"\n        for char in chars {\n            let ascii = char.asciiValue\n\
    \            if ascii < 65 {\n                newWord += \"A\"\n            }\
    \ else if ascii < 66 {\n                newWord += \"B\"\n            } else if\
    \ ascii < 67 {\n                newWord += \"C\"\n            } else if ascii\
    \ < 68 {\n                newWord += \"D\"\n            } else if ascii < 69 {\n\
    \                newWord += \"E\"\n            } else if ascii < 70 {\n      \
    \          newWord += \"F\"\n            } else if ascii < 71 {\n            \
    \    newWord += \"G\"\n            } else if ascii < 72 {\n                newWord\
    \ += \"H\"\n            } else if ascii < 73 {\n                newWord += \"\
    I\"\n            } else if ascii < 74 {\n                newWord += \"J\"\n  \
    \          } else if ascii < 75 {\n                newWord += \"K\"\n        \
    \    } else if ascii < 76 {\n                newWord += \"L\"\n            } else\
    \ if ascii < 77 {\n                newWord += \"M\"\n            } else if ascii\
    \ < 78 {\n                newWord += \"N\"\n            } else if ascii < 79 {\n\
    \                newWord += \"O\"\n            } else if ascii < 80 {\n      \
    \          newWord += \"P\"\n            } else if ascii < 81 {\n            \
    \    newWord += \"Q\"\n            } else if ascii < 82 {\n                newWord\
    \ += \"R\"\n            } else if ascii < 83 {\n                newWord += \"\
    S\"\n            } else if ascii < 84 {\n                newWord += \"T\"\n  \
    \          } else if ascii < 85 {\n                newWord += \"U\"\n        \
    \    } else if ascii < 86 {\n                newWord += \"V\"\n            } else\
    \ if ascii < 87 {\n                newWord += \"W\"\n            } else if ascii\
    \ < 88 {\n                newWord += \"X\"\n            } else if ascii < 89 {\n\
    \                newWord += \"Y\"\n            } else if ascii < 90 {\n      \
    \          newWord += \"Z\"\n            } else if ascii < 91 {\n            \
    \    newWord += \"0\"\n            } else if ascii < 92 {\n                newWord\
    \ += \"1\"\n            } else if ascii < 93 {\n                newWord += \"\
    2\"\n            } else if ascii < 94 {\n                newWord += \"3\"\n  \
    \          } else if ascii < 95 {\n                newWord += \"4\"\n        \
    \    } else if ascii < 96 {\n                newWord += \"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpl2d37op4.swift:79:28: error: unterminated string literal\n    \
    \            newWord += \"\n                           ^\n/tmp/tmpl2d37op4.swift:101:116:\
    \ error: expected '}' at end of brace statement\nassert(anti_shuffle(s: \"Hi.\
    \ My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\")\n                                                              \
    \                                                     ^\n/tmp/tmpl2d37op4.swift:14:27:\
    \ note: to match this opening '{'\n        for char in chars {\n             \
    \             ^\n/tmp/tmpl2d37op4.swift:101:116: error: expected '}' at end of\
    \ brace statement\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\n                \
    \                                                                            \
    \                       ^\n/tmp/tmpl2d37op4.swift:11:23: note: to match this opening\
    \ '{'\n    for word in words {\n                      ^\n/tmp/tmpl2d37op4.swift:101:116:\
    \ error: expected '}' at end of brace statement\nassert(anti_shuffle(s: \"Hi.\
    \ My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\")\n                                                              \
    \                                                     ^\n/tmp/tmpl2d37op4.swift:8:40:\
    \ note: to match this opening '{'\nfunc anti_shuffle(s: String) -> String {\n\
    \                                       ^\n/tmp/tmpl2d37op4.swift:12:26: error:\
    \ 'characters' is unavailable: Please use Substring directly\n        let chars\
    \ = word.characters\n                         ^~~~~~~~~~\nSwift.Substring:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: Substring\
    \ { get set }\n               ^\n/tmp/tmpl2d37op4.swift:16:16: error: value of\
    \ optional type 'UInt8?' must be unwrapped to a value of type 'UInt8'\n      \
    \      if ascii < 65 {\n               ^\n/tmp/tmpl2d37op4.swift:16:16: note:\
    \ coalesce using '??' to provide a default when the optional value contains 'nil'\n\
    \            if ascii < 65 {\n               ^"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var s = \"\"\n    for c in s.characters {\n       \
    \ if c.isLetter {\n            s += c.lowercaseString\n        } else {\n    \
    \        s += c.uppercaseString\n        }\n    }\n    return s\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpa4jzi_zc.swift:10:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpa4jzi_zc.swift:12:20:\
    \ error: value of type 'Character' has no member 'lowercaseString'\n         \
    \   s += c.lowercaseString\n                 ~ ^~~~~~~~~~~~~~~\n/tmp/tmpa4jzi_zc.swift:14:20:\
    \ error: value of type 'Character' has no member 'uppercaseString'\n         \
    \   s += c.uppercaseString\n                 ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    for c in\
    \ s.characters {\n        if c == \" \" {\n            result += word\n      \
    \      word = \"\"\n        } else {\n            word += String(c)\n        }\n\
    \    }\n    result += word\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpggunqsu3.swift:11:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var words = s.split(separator:\
    \ \" \")\n    for word in words {\n        var newWord = \"\"\n        for char\
    \ in word {\n            newWord += String(UnicodeScalar(Int(char.value)!))\n\
    \        }\n        result += newWord\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpj9l1s6_k.swift:14:31: error: value of optional type 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>') must be unwrapped to a value of type 'UnicodeScalar'\
    \ (aka 'Unicode.Scalar')\n            newWord += String(UnicodeScalar(Int(char.value)!))\n\
    \                              ^\n/tmp/tmpj9l1s6_k.swift:14:31: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \         newWord += String(UnicodeScalar(Int(char.value)!))\n               \
    \               ^\n                                                          \
    \    ?? <#default value#>\n/tmp/tmpj9l1s6_k.swift:14:31: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n            newWord\
    \ += String(UnicodeScalar(Int(char.value)!))\n                              ^\n\
    \                                                             !\n/tmp/tmpj9l1s6_k.swift:14:54:\
    \ error: value of type 'Character' has no member 'value'\n            newWord\
    \ += String(UnicodeScalar(Int(char.value)!))\n                               \
    \                 ~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    for c in\
    \ s.characters {\n        if c == \" \" {\n            if word != \"\" {\n   \
    \             result += word\n                word = \"\"\n            }\n   \
    \     } else {\n            word += String(c)\n        }\n    }\n    if word !=\
    \ \"\" {\n        result += word\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpsgk4uf8x.swift:11:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var isSpace\
    \ = false\n    for c in s.characters {\n        if isSpace {\n            result\
    \ += word\n            word = \"\"\n            isSpace = false\n        }\n \
    \       if c == \" \" {\n            isSpace = true\n        } else {\n      \
    \      word += String(c)\n        }\n    }\n    result += word\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpgt1l3zb7.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    for c in\
    \ s.characters {\n        if c == \" \" {\n            if word != \"\" {\n   \
    \             result += word\n                word = \"\"\n            }\n   \
    \     } else {\n            word += String(c)\n        }\n    }\n    if word !=\
    \ \"\" {\n        result += word\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpsgk4uf8x.swift:11:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var newString = \"\"\n    var word = \"\"\n    var\
    \ i = 0\n    var j = 0\n    for c in s.characters {\n        if c == \" \" {\n\
    \            if word != \"\" {\n                newString += word\n          \
    \      word = \"\"\n            }\n        } else {\n            word += String(c)\n\
    \        }\n    }\n    if word != \"\" {\n        newString += word\n    }\n \
    \   return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpz1o819n5.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpz1o819n5.swift:11:9:\
    \ warning: initialization of variable 'i' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var i = 0\n    ~~~~^\n    _\n/tmp/tmpz1o819n5.swift:12:9:\
    \ warning: initialization of variable 'j' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var j = 0\n    ~~~~^\n    _\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var newString = \"\"\n    var word = \"\"\n    var\
    \ i = 0\n    for c in s.characters {\n        if c == \" \" {\n            newString\
    \ += word\n            word = \"\"\n        } else {\n            word += String(c)\n\
    \        }\n    }\n    newString += word\n    return newString\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp81_xdkd2.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp81_xdkd2.swift:11:9:\
    \ warning: initialization of variable 'i' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var i = 0\n    ~~~~^\n    _\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var i =\
    \ 0\n    for c in s.characters {\n        if c == \" \" {\n            if word\
    \ != \"\" {\n                result += word\n                word = \"\"\n   \
    \         }\n        } else {\n            word += String(c)\n        }\n    }\n\
    \    if word != \"\" {\n        result += word\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp7aisietg.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp7aisietg.swift:11:9:\
    \ warning: initialization of variable 'i' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var i = 0\n    ~~~~^\n    _\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    for c in\
    \ s.characters {\n        if c == \" \" {\n            result += word\n      \
    \      word = \"\"\n        } else {\n            word += String(c)\n        }\n\
    \    }\n    result += word\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpggunqsu3.swift:11:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var lastChar\
    \ = \"\"\n    for char in s.characters {\n        if char == \" \" {\n       \
    \     if word != \"\" {\n                result += word\n                word\
    \ = \"\"\n            }\n        } else {\n            word += char\n        }\n\
    \    }\n    if word != \"\" {\n        result += word\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp85j09er2.swift:12:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp85j09er2.swift:19:21:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            word += char\n                    ^\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var newString = \"\"\n    var words = s.split(separator:\
    \ \" \")\n    var sortedWords = words.sorted(by: { $0.compare($1) == .orderedAscending\
    \ })\n    for word in sortedWords {\n        newString += String(word.unicodeScalars.first!)\n\
    \    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpt7e2nyw4.swift:11:45: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    var sortedWords = words.sorted(by:\
    \ { $0.compare($1) == .orderedAscending })\n                                 \
    \        ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var result = \"\"\n    var word = \"\"\n    var isSpace\
    \ = false\n    for c in s.characters {\n        if isSpace {\n            result\
    \ += word\n            word = \"\"\n            isSpace = false\n        }\n \
    \       if c == \" \" {\n            isSpace = true\n        } else {\n      \
    \      word += String(c)\n        }\n    }\n    result += word\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpgt1l3zb7.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014084
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var s = s\n    var newString = \"\"\n    var newStringArray\
    \ = [String]()\n    var newStringArrayIndex = 0\n    var newStringArrayIndex2\
    \ = 0\n    var newStringArrayIndex3 = 0\n    var newStringArrayIndex4 = 0\n  \
    \  var newStringArrayIndex5 = 0\n    var newStringArrayIndex6 = 0\n    var newStringArrayIndex7\
    \ = 0\n    var newStringArrayIndex8 = 0\n    var newStringArrayIndex9 = 0\n  \
    \  var newStringArrayIndex10 = 0\n    var newStringArrayIndex11 = 0\n    var newStringArrayIndex12\
    \ = 0\n    var newStringArrayIndex13 = 0\n    var newStringArrayIndex14 = 0\n\
    \    var newStringArrayIndex15 = 0\n    var newStringArrayIndex16 = 0\n    var\
    \ newStringArrayIndex17 = 0\n    var newStringArrayIndex18 = 0\n    var newStringArrayIndex19\
    \ = 0\n    var newStringArrayIndex20 = 0\n    var newStringArrayIndex21 = 0\n\
    \    var newStringArrayIndex22 = 0\n    var newStringArrayIndex23 = 0\n    var\
    \ newStringArrayIndex24 = 0\n    var newStringArrayIndex25 = 0\n    var newStringArrayIndex26\
    \ = 0\n    var newStringArrayIndex27 = 0\n    var newStringArrayIndex28 = 0\n\
    \    var newStringArrayIndex29 = 0\n    var newStringArrayIndex30 = 0\n    var\
    \ newStringArrayIndex31 = 0\n    var newStringArrayIndex32 = 0\n    var newStringArrayIndex33\
    \ = 0\n    var newStringArrayIndex34 = 0\n    var newStringArrayIndex35 = 0\n\
    \    var newStringArrayIndex36 = 0\n    var newStringArrayIndex37 = 0\n    var\
    \ newStringArrayIndex38 = 0\n    var newStringArrayIndex39 = 0\n    var newStringArrayIndex40\
    \ = 0\n    var newStringArrayIndex41 = 0\n    var newStringArrayIndex42 = 0\n\
    \    var newStringArrayIndex43 = 0\n    var newStringArrayIndex44 = 0\n    var\
    \ newStringArrayIndex45 = 0\n    var newStringArrayIndex46 = 0\n    var newStringArrayIndex47\
    \ = 0\n    var newStringArrayIndex48 = 0\n    var newStringArrayIndex49 = 0\n\
    \    var newStringArrayIndex50 = 0\n    var newStringArrayIndex51 = 0\n    var\
    \ newStringArrayIndex52 = 0\n    var newStringArrayIndex53 = 0\n    var newStringArrayIndex54\
    \ = 0\n    var newStringArrayIndex55 = 0\n    var newStringArrayIndex56 = 0\n\
    \    var newStringArrayIndex57 = 0\n    var newStringArrayIndex58 = 0\n    var\
    \ newStringArrayIndex59 = 0\n    var newStringArrayIndex60 = 0\n    var newStringArrayIndex61\
    \ = 0\n    var newStringArrayIndex62 = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpwtzndagq.swift:9:9: warning: initialization of variable 's' was\
    \ never used; consider replacing with assignment to '_' or removing it\n    var\
    \ s = s\n    ~~~~^\n    _\n/tmp/tmpwtzndagq.swift:10:9: warning: initialization\
    \ of variable 'newString' was never used; consider replacing with assignment to\
    \ '_' or removing it\n    var newString = \"\"\n    ~~~~^~~~~~~~~\n    _\n/tmp/tmpwtzndagq.swift:11:9:\
    \ warning: initialization of variable 'newStringArray' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var newStringArray = [String]()\n\
    \    ~~~~^~~~~~~~~~~~~~\n    _\n/tmp/tmpwtzndagq.swift:12:9: warning: initialization\
    \ of variable 'newStringArrayIndex' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var newStringArrayIndex = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpwtzndagq.swift:13:9: warning: initialization of variable 'newStringArrayIndex2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var newStringArrayIndex2 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpwtzndagq.swift:14:9:\
    \ warning: initialization of variable 'newStringArrayIndex3' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var newStringArrayIndex3\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpwtzndagq.swift:15:9: warning:\
    \ initialization of variable 'newStringArrayIndex4' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var newStringArrayIndex4 = 0\n  \
    \  ~~~~^~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpwtzndagq.swift:16:9: warning: initialization\
    \ of variable 'newStringArrayIndex5' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var newStringArrayIndex5 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpwtzndagq.swift:17:9: warning: initialization of variable 'newStringArrayIndex6'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var newStringArrayIndex6 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpwtzndagq.swift:18:9:\
    \ warning: initialization of variable 'newStringArrayIndex7' w"
  stdout: ''
  timestamp: 1660014085
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\nfunc anti_shuffle(s:\
    \ String) -> String {\n    var newString = \"\"\n    var word = \"\"\n    var\
    \ i = 0\n    for c in s.characters {\n        if c.isWhitespace {\n          \
    \  if word != \"\" {\n                newString += word\n                word\
    \ = \"\"\n            }\n        } else {\n            word += c.asciiValue\n\
    \        }\n    }\n    if word != \"\" {\n        newString += word\n    }\n \
    \   return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp3a8ul73u.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp3a8ul73u.swift:19:23:\
    \ error: cannot convert value of type 'UInt8?' to expected argument type 'String'\n\
    \            word += c.asciiValue\n                      ^\n"
  stdout: ''
  timestamp: 1660014085
