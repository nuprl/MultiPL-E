language: swift
name: HumanEval_27_flip_case
results:
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        if c.isUppercase {\n   \
    \         result += c.value\n        } else {\n            result += c.value.lowercase()\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6rk53mmv.swift:6:14: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if c.isUppercase {\n           ~ ^~~~~~~~~~~\n\
    /tmp/tmp6rk53mmv.swift:7:25: error: cannot convert value of type 'UInt32' to expected\
    \ argument type 'String'\n            result += c.value\n                    \
    \    ^\n/tmp/tmp6rk53mmv.swift:9:31: error: value of type 'UInt32' has no member\
    \ 'lowercase'\n            result += c.value.lowercase()\n                   \
    \   ~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        if c.isUppercase {\n   \
    \         result += c.value\n        } else {\n            result += c.value.lowercased()\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpnh5glmz0.swift:6:14: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if c.isUppercase {\n           ~ ^~~~~~~~~~~\n\
    /tmp/tmpnh5glmz0.swift:7:25: error: cannot convert value of type 'UInt32' to expected\
    \ argument type 'String'\n            result += c.value\n                    \
    \    ^\n/tmp/tmpnh5glmz0.swift:9:31: error: value of type 'UInt32' has no member\
    \ 'lowercased'\n            result += c.value.lowercased()\n                 \
    \     ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string {\n        switch char {\n        case 'a':\n \
    \           result += \"A\"\n        case 'b':\n            result += \"B\"\n\
    \        case 'c':\n            result += \"C\"\n        case 'd':\n         \
    \   result += \"D\"\n        case 'e':\n            result += \"E\"\n        case\
    \ 'f':\n            result += \"F\"\n        case 'g':\n            result +=\
    \ \"G\"\n        case 'h':\n            result += \"H\"\n        case 'i':\n \
    \           result += \"I\"\n        case 'j':\n            result += \"J\"\n\
    \        case 'k':\n            result += \"K\"\n        case 'l':\n         \
    \   result += \"L\"\n        case 'm':\n            result += \"M\"\n        case\
    \ 'n':\n            result += \"N\"\n        case 'o':\n            result +=\
    \ \"O\"\n        case 'p':\n            result += \"P\"\n        case 'q':\n \
    \           result += \"Q\"\n        case 'r':\n            result += \"R\"\n\
    \        case 's':\n            result += \"S\"\n        case 't':\n         \
    \   result += \"T\"\n        case 'u':\n            result += \"U\"\n        case\
    \ 'v':\n            result += \"V\"\n        case 'w':\n            result +=\
    \ \"W\"\n        case 'x':\n            result += \"X\"\n        case 'y':\n \
    \           result += \"Y\"\n        case 'z':\n            result += \"Z\"\n\
    \        default:\n            result += char\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp3o533b_w.swift:7:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp3o533b_w.swift:9:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp3o533b_w.swift:11:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp3o533b_w.swift:13:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp3o533b_w.swift:15:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp3o533b_w.swift:17:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp3o533b_w.swift:19:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp3o533b_w.swift:21:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp3o533b_w.swift:23:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp3o533b_w.swift:25:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp3o533b_w.swift:27:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp3o533b_w.swift:29:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp3o533b_w.swift:31:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp3o533b_w.swift:33:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp3o533b_w.swift:35:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp3o533b_w.swift:37:14: error: single-quoted stri"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        if c.isUppercase {\n   \
    \         result += c.value\n        } else {\n            result += c.value.lowercased()\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpnh5glmz0.swift:6:14: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if c.isUppercase {\n           ~ ^~~~~~~~~~~\n\
    /tmp/tmpnh5glmz0.swift:7:25: error: cannot convert value of type 'UInt32' to expected\
    \ argument type 'String'\n            result += c.value\n                    \
    \    ^\n/tmp/tmpnh5glmz0.swift:9:31: error: value of type 'UInt32' has no member\
    \ 'lowercased'\n            result += c.value.lowercased()\n                 \
    \     ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string {\n        switch char {\n        case 'a':\n \
    \       case 'b':\n        case 'c':\n        case 'd':\n        case 'e':\n \
    \       case 'f':\n        case 'g':\n        case 'h':\n        case 'i':\n \
    \       case 'j':\n        case 'k':\n        case 'l':\n        case 'm':\n \
    \       case 'n':\n        case 'o':\n        case 'p':\n        case 'q':\n \
    \       case 'r':\n        case 's':\n        case 't':\n        case 'u':\n \
    \       case 'v':\n        case 'w':\n        case 'x':\n        case 'y':\n \
    \       case 'z':\n            result = result + String(char.uppercase)\n    \
    \    default:\n            result = result + String(char)\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpuwocctdt.swift:7:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmpuwocctdt.swift:7:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case 'a':\n        ^~~~~~~~~\n                  break\n/tmp/tmpuwocctdt.swift:8:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmpuwocctdt.swift:8:9: error: 'case'\
    \ label in a 'switch' must have at least one executable statement\n        case\
    \ 'b':\n        ^~~~~~~~~\n                  break\n/tmp/tmpuwocctdt.swift:9:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'c':\n   \
    \          ^~~\n             \"c\"\n/tmp/tmpuwocctdt.swift:9:9: error: 'case'\
    \ label in a 'switch' must have at least one executable statement\n        case\
    \ 'c':\n        ^~~~~~~~~\n                  break\n/tmp/tmpuwocctdt.swift:10:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'd':\n   \
    \          ^~~\n             \"d\"\n/tmp/tmpuwocctdt.swift:10:9: error: 'case'\
    \ label in a 'switch' must have at least one executable statement\n        case\
    \ 'd':\n        ^~~~~~~~~\n                  break\n/tmp/tmpuwocctdt.swift:11:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmpuwocctdt.swift:11:9: error: 'case'\
    \ label in a 'switch' must have at least one executable statement\n        case\
    \ 'e':\n        ^~~~~~~~~\n                  break\n/tmp/tmpuwocctdt.swift:12:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'f':\n   \
    \          ^~~\n             \"f\"\n/tmp/tmpuwocctdt.swift:12:9: error: 'case'\
    \ label in a 'switch' must have at least one executable statement\n        case\
    \ 'f':\n        ^~~~~~~~~\n                  break\n/tmp/tmpuwocctdt.swift:13:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'g':\n   \
    \          ^~~\n             \"g\"\n/tmp/tmpuwocctdt.swift:13:9: error: 'case'\
    \ label in a 'switch' must have at least one executable statement\n        case\
    \ '"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c.value {\n     \
    \   case 0x41:\n            result += \"A\"\n        case 0x42:\n            result\
    \ += \"B\"\n        case 0x43:\n            result += \"C\"\n        case 0x44:\n\
    \            result += \"D\"\n        case 0x45:\n            result += \"E\"\n\
    \        case 0x46:\n            result += \"F\"\n        case 0x47:\n       \
    \     result += \"G\"\n        case 0x48:\n            result += \"H\"\n     \
    \   case 0x49:\n            result += \"I\"\n        case 0x4A:\n            result\
    \ += \"J\"\n        case 0x4B:\n            result += \"K\"\n        case 0x4C:\n\
    \            result += \"L\"\n        case 0x4D:\n            result += \"M\"\n\
    \        case 0x4E:\n            result += \"N\"\n        case 0x4F:\n       \
    \     result += \"O\"\n        case 0x50:\n            result += \"P\"\n     \
    \   case 0x51:\n            result += \"Q\"\n        case 0x52:\n            result\
    \ += \"R\"\n        case 0x53:\n            result += \"S\"\n        case 0x54:\n\
    \            result += \"T\"\n        case 0x55:\n            result += \"U\"\n\
    \        case 0x56:\n            result += \"V\"\n        case 0x57:\n       \
    \     result += \"W\"\n        case 0x58:\n            result += \"X\"\n     \
    \   case 0x59:\n            result += \"Y\"\n        case 0x5A:\n            result\
    \ += \"Z\"\n        case 0x5B:\n            result += \"a\"\n        case 0x5C:\n\
    \            result += \"b\"\n        case 0x5D:\n            result += \"c\"\n\
    \        case 0x5E:\n            result += \"d\"\n        case 0x5F:\n       \
    \     result += \"e\"\n        case 0x60:\n            result += \"f\"\n     \
    \   case 0x61:\n            result += \"g\"\n        case 0x62:\n            result\
    \ += \"h\"\n        case 0x63:\n            result += \"i\"\n        case 0x64:\n\
    \            result += \"j\"\n        case 0x65:\n            result += \"k\"\n\
    \        case 0x66:\n            result += \"l\"\n        case 0x67:\n       \
    \     result += \"m\"\n        case 0x68:\n            result += \"n\"\n     \
    \   case 0x69:\n            result += \"o\"\n        case 0x6A:\n            result\
    \ += \"p\"\n        case 0x6B:\n            result += \"q\"\n        case 0x6C:\n\
    \            result += \"r\"\n        case 0x6D:\n            result += \"s\"\n\
    \        case 0x6E:\n            \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpsep0reiq.swift:97:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case 0x6E:\n        ^~~~~~~~~~\n\
    \                   break\n/tmp/tmpsep0reiq.swift:116:116: error: expected '}'\
    \ at end of brace statement\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n    \
    \                                                                            \
    \                                   ^\n/tmp/tmpsep0reiq.swift:5:36: note: to match\
    \ this opening '{'\n    for c in string.unicodeScalars {\n                   \
    \                ^\n/tmp/tmpsep0reiq.swift:116:116: error: expected '}' at end\
    \ of brace statement\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n                 \
    \                                                                            \
    \                      ^\n/tmp/tmpsep0reiq.swift:3:42: note: to match this opening\
    \ '{'\nfunc flip_case(string: String) -> String {\n                          \
    \               ^\n/tmp/tmpsep0reiq.swift:6:9: error: switch must be exhaustive\n\
    \        switch c.value {\n        ^\n/tmp/tmpsep0reiq.swift:6:9: note: do you\
    \ want to add a default clause?\n        switch c.value {\n        ^\n/tmp/tmpsep0reiq.swift:102:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        if c.isUppercase {\n   \
    \         result += c.value\n        } else {\n            result += c.value.lowercased()\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpnh5glmz0.swift:6:14: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if c.isUppercase {\n           ~ ^~~~~~~~~~~\n\
    /tmp/tmpnh5glmz0.swift:7:25: error: cannot convert value of type 'UInt32' to expected\
    \ argument type 'String'\n            result += c.value\n                    \
    \    ^\n/tmp/tmpnh5glmz0.swift:9:31: error: value of type 'UInt32' has no member\
    \ 'lowercased'\n            result += c.value.lowercased()\n                 \
    \     ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += \"\\U\"\n        case .uppercase:\n     \
    \       result += \"\\L\"\n        default:\n            result += String(c)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpa11gvu6h.swift:8:25: error: invalid escape sequence in literal\n\
    \            result += \"\\U\"\n                        ^\n/tmp/tmpa11gvu6h.swift:10:25:\
    \ error: invalid escape sequence in literal\n            result += \"\\L\"\n \
    \                       ^\n/tmp/tmpa11gvu6h.swift:7:15: error: type 'Unicode.Scalar'\
    \ has no member 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n\
    /tmp/tmpa11gvu6h.swift:9:15: error: type 'Unicode.Scalar' has no member 'uppercase'\n\
    \        case .uppercase:\n             ~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        let upper = c.isUppercase\n\
    \        let lower = !upper\n        result += String(c.value)\n        if upper\
    \ != lower {\n            result += String(c.value)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(flip_case(string: \"\
    \") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmplcqkux5u.swift:6:23: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        let upper = c.isUppercase\n               \
    \     ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string {\n        switch char {\n        case 'a':\n \
    \           result += \"A\"\n        case 'b':\n            result += \"B\"\n\
    \        case 'c':\n            result += \"C\"\n        case 'd':\n         \
    \   result += \"D\"\n        case 'e':\n            result += \"E\"\n        case\
    \ 'f':\n            result += \"F\"\n        case 'g':\n            result +=\
    \ \"G\"\n        case 'h':\n            result += \"H\"\n        case 'i':\n \
    \           result += \"I\"\n        case 'j':\n            result += \"J\"\n\
    \        case 'k':\n            result += \"K\"\n        case 'l':\n         \
    \   result += \"L\"\n        case 'm':\n            result += \"M\"\n        case\
    \ 'n':\n            result += \"N\"\n        case 'o':\n            result +=\
    \ \"O\"\n        case 'p':\n            result += \"P\"\n        case 'q':\n \
    \           result += \"Q\"\n        case 'r':\n            result += \"R\"\n\
    \        case 's':\n            result += \"S\"\n        case 't':\n         \
    \   result += \"T\"\n        case 'u':\n            result += \"U\"\n        case\
    \ 'v':\n            result += \"V\"\n        case 'w':\n            result +=\
    \ \"W\"\n        case 'x':\n            result += \"X\"\n        case 'y':\n \
    \           result += \"Y\"\n        case 'z':\n            result += \"Z\"\n\
    \        default:\n            result += char\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp3o533b_w.swift:7:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp3o533b_w.swift:9:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp3o533b_w.swift:11:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp3o533b_w.swift:13:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp3o533b_w.swift:15:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp3o533b_w.swift:17:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp3o533b_w.swift:19:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp3o533b_w.swift:21:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp3o533b_w.swift:23:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp3o533b_w.swift:25:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp3o533b_w.swift:27:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp3o533b_w.swift:29:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp3o533b_w.swift:31:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp3o533b_w.swift:33:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp3o533b_w.swift:35:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp3o533b_w.swift:37:14: error: single-quoted stri"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        let upper = c.isUppercase\n\
    \        let lower = !upper\n        result += String(c.value)\n        if upper\
    \ != lower {\n            result += String(c.value)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(flip_case(string: \"\
    \") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmplcqkux5u.swift:6:23: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        let upper = c.isUppercase\n               \
    \     ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        default:\n            result += c\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpy1p33y2o.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpy1p33y2o.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpy1p33y2o.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpy1p33y2o.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpy1p33y2o.swift:12:20:\
    \ error: operator function '+=' requires that 'Unicode.Scalar' conform to 'Sequence'\n\
    \            result += c\n                   ^\nSwift.RangeReplaceableCollection:4:35:\
    \ note: where 'Other' = 'Unicode.Scalar'\n    @inlinable public static func +=\
    \ <Other>(lhs: inout Self, rhs: Other) where Other : Sequence, Self.Element ==\
    \ Other.Element\n                                  ^\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string {\n        switch char {\n        case \"a\":\n\
    \            result += \"A\"\n        case \"b\":\n            result += \"B\"\
    \n        case \"c\":\n            result += \"C\"\n        case \"d\":\n    \
    \        result += \"D\"\n        case \"e\":\n            result += \"E\"\n \
    \       case \"f\":\n            result += \"F\"\n        case \"g\":\n      \
    \      result += \"G\"\n        case \"h\":\n            result += \"H\"\n   \
    \     case \"i\":\n            result += \"I\"\n        case \"j\":\n        \
    \    result += \"J\"\n        case \"k\":\n            result += \"K\"\n     \
    \   case \"l\":\n            result += \"L\"\n        case \"m\":\n          \
    \  result += \"M\"\n        case \"n\":\n            result += \"N\"\n       \
    \ case \"o\":\n            result += \"O\"\n        case \"p\":\n            result\
    \ += \"P\"\n        case \"q\":\n            result += \"Q\"\n        case \"\
    r\":\n            result += \"R\"\n        case \"s\":\n            result +=\
    \ \"S\"\n        case \"t\":\n            result += \"T\"\n        case \"u\"\
    :\n            result += \"U\"\n        case \"v\":\n            result += \"\
    V\"\n        case \"w\":\n            result += \"W\"\n        case \"x\":\n \
    \           result += \"X\"\n        case \"y\":\n            result += \"Y\"\n\
    \        case \"z\":\n            result += \"Z\"\n        default:\n        \
    \    result += char\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpicsuxq3_.swift:60:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += char\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += \"\\U\"\n        case .uppercase:\n     \
    \       result += c.value\n        default:\n            result += c.value\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpg2ubat1t.swift:8:25: error: invalid escape sequence in literal\n\
    \            result += \"\\U\"\n                        ^\n/tmp/tmpg2ubat1t.swift:7:15:\
    \ error: type 'Unicode.Scalar' has no member 'lowercase'\n        case .lowercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpg2ubat1t.swift:9:15: error: type 'Unicode.Scalar'\
    \ has no member 'uppercase'\n        case .uppercase:\n             ~^~~~~~~~~\n\
    /tmp/tmpg2ubat1t.swift:10:25: error: cannot convert value of type 'UInt32' to\
    \ expected argument type 'String'\n            result += c.value\n           \
    \             ^\n/tmp/tmpg2ubat1t.swift:12:25: error: cannot convert value of\
    \ type 'UInt32' to expected argument type 'String'\n            result += c.value\n\
    \                        ^\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        if c.isUpper() {\n     \
    \       result += c.value\n        } else {\n            result += c.value.lowercased()\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpthzk1agu.swift:6:14: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUpper'\n        if c.isUpper() {\n           ~ ^~~~~~~\n/tmp/tmpthzk1agu.swift:7:25:\
    \ error: cannot convert value of type 'UInt32' to expected argument type 'String'\n\
    \            result += c.value\n                        ^\n/tmp/tmpthzk1agu.swift:9:31:\
    \ error: value of type 'UInt32' has no member 'lowercased'\n            result\
    \ += c.value.lowercased()\n                      ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        let upper = c.isUppercase\n\
    \        let lower = c.isLowercase\n        if upper {\n            result +=\
    \ c.value\n        } else {\n            result += c.value.lowercased()\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpjxpvmrgl.swift:6:23: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        let upper = c.isUppercase\n               \
    \     ~ ^~~~~~~~~~~\n/tmp/tmpjxpvmrgl.swift:7:23: error: value of type 'Unicode.Scalar'\
    \ has no member 'isLowercase'\n        let lower = c.isLowercase\n           \
    \         ~ ^~~~~~~~~~~\n/tmp/tmpjxpvmrgl.swift:9:25: error: cannot convert value\
    \ of type 'UInt32' to expected argument type 'String'\n            result += c.value\n\
    \                        ^\n/tmp/tmpjxpvmrgl.swift:11:31: error: value of type\
    \ 'UInt32' has no member 'lowercased'\n            result += c.value.lowercased()\n\
    \                      ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        let upper = c.isUppercase\n\
    \        let lower = !upper\n        result += String(c.value)\n        if upper\
    \ != lower {\n            result += \"_\"\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpq5as42v3.swift:6:23: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        let upper = c.isUppercase\n               \
    \     ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string {\n        switch char {\n        case \"a\":\n\
    \            result += \"A\"\n        case \"b\":\n            result += \"B\"\
    \n        case \"c\":\n            result += \"C\"\n        case \"d\":\n    \
    \        result += \"D\"\n        case \"e\":\n            result += \"E\"\n \
    \       case \"f\":\n            result += \"F\"\n        case \"g\":\n      \
    \      result += \"G\"\n        case \"h\":\n            result += \"H\"\n   \
    \     case \"i\":\n            result += \"I\"\n        case \"j\":\n        \
    \    result += \"J\"\n        case \"k\":\n            result += \"K\"\n     \
    \   case \"l\":\n            result += \"L\"\n        case \"m\":\n          \
    \  result += \"M\"\n        case \"n\":\n            result += \"N\"\n       \
    \ case \"o\":\n            result += \"O\"\n        case \"p\":\n            result\
    \ += \"P\"\n        case \"q\":\n            result += \"Q\"\n        case \"\
    r\":\n            result += \"R\"\n        case \"s\":\n            result +=\
    \ \"S\"\n        case \"t\":\n            result += \"T\"\n        case \"u\"\
    :\n            result += \"U\"\n        case \"v\":\n            result += \"\
    V\"\n        case \"w\":\n            result += \"W\"\n        case \"x\":\n \
    \           result += \"X\"\n        case \"y\":\n            result += \"Y\"\n\
    \        case \"z\":\n            result += \"Z\"\n        default:\n        \
    \    result += char\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpicsuxq3_.swift:60:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += char\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string {\n        switch char {\n        case 'a':\n \
    \           result += \"A\"\n        case 'b':\n            result += \"B\"\n\
    \        case 'c':\n            result += \"C\"\n        case 'd':\n         \
    \   result += \"D\"\n        case 'e':\n            result += \"E\"\n        case\
    \ 'f':\n            result += \"F\"\n        case 'g':\n            result +=\
    \ \"G\"\n        case 'h':\n            result += \"H\"\n        case 'i':\n \
    \           result += \"I\"\n        case 'j':\n            result += \"J\"\n\
    \        case 'k':\n            result += \"K\"\n        case 'l':\n         \
    \   result += \"L\"\n        case 'm':\n            result += \"M\"\n        case\
    \ 'n':\n            result += \"N\"\n        case 'o':\n            result +=\
    \ \"O\"\n        case 'p':\n            result += \"P\"\n        case 'q':\n \
    \           result += \"Q\"\n        case 'r':\n            result += \"R\"\n\
    \        case 's':\n            result += \"S\"\n        case 't':\n         \
    \   result += \"T\"\n        case 'u':\n            result += \"U\"\n        case\
    \ 'v':\n            result += \"V\"\n        case 'w':\n            result +=\
    \ \"W\"\n        case 'x':\n            result += \"X\"\n        case 'y':\n \
    \           result += \"Y\"\n        case 'z':\n            result += \"Z\"\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp99whtxy0.swift:7:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp99whtxy0.swift:9:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp99whtxy0.swift:11:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp99whtxy0.swift:13:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp99whtxy0.swift:15:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp99whtxy0.swift:17:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp99whtxy0.swift:19:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp99whtxy0.swift:21:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp99whtxy0.swift:23:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp99whtxy0.swift:25:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp99whtxy0.swift:27:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp99whtxy0.swift:29:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp99whtxy0.swift:31:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp99whtxy0.swift:33:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp99whtxy0.swift:35:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp99whtxy0.swift:37:14: error: single-quoted stri"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c.value {\n     \
    \   case 0x0041:\n            result += \"A\"\n        case 0x0042:\n        \
    \    result += \"B\"\n        case 0x0043:\n            result += \"C\"\n    \
    \    case 0x0044:\n            result += \"D\"\n        case 0x0045:\n       \
    \     result += \"E\"\n        case 0x0046:\n            result += \"F\"\n   \
    \     case 0x0047:\n            result += \"G\"\n        case 0x0048:\n      \
    \      result += \"H\"\n        case 0x0049:\n            result += \"I\"\n  \
    \      case 0x004A:\n            result += \"J\"\n        case 0x004B:\n     \
    \       result += \"K\"\n        case 0x004C:\n            result += \"L\"\n \
    \       case 0x004D:\n            result += \"M\"\n        case 0x004E:\n    \
    \        result += \"N\"\n        case 0x004F:\n            result += \"O\"\n\
    \        case 0x0050:\n            result += \"P\"\n        case 0x0051:\n   \
    \         result += \"Q\"\n        case 0x0052:\n            result += \"R\"\n\
    \        case 0x0053:\n            result += \"S\"\n        case 0x0054:\n   \
    \         result += \"T\"\n        case 0x0055:\n            result += \"U\"\n\
    \        case 0x0056:\n            result += \"V\"\n        case 0x0057:\n   \
    \         result += \"W\"\n        case 0x0058:\n            result += \"X\"\n\
    \        case 0x0059:\n            result += \"Y\"\n        case 0x005A:\n   \
    \         result += \"Z\"\n        case 0x005B:\n            result += \"[{\"\n\
    \        case 0x005C:\n            result += \"]}\"\n        case 0x005D:\n  \
    \          result += \"\\\\\"\n        case 0x005E:\n            result += \"\
    ^\"\n        case 0x005F:\n            result += \"_\"\n        case 0x0060:\n\
    \            result += \"`\"\n        case 0x0061:\n            result += \"a\"\
    \n        case 0x0062:\n            result += \"b\"\n        case 0x0063:\n  \
    \          result += \"c\"\n        case 0x0064:\n            result += \"d\"\n\
    \        case 0x0065:\n            result += \"e\"\n        case 0x0066:\n   \
    \         result += \"f\"\n        case 0x0067:\n            result += \"g\"\n\
    \        case 0x0068:\n            result += \"h\"\n        case 0x0069:\n   \
    \         result += \"i\"\n        case 0x006A:\n            result += \"j\"\n\
    \        case 0x006B:\n            result += \"k\"\n        case 0x006C:\n   \
    \         result += \"l\"\n        case 0x006D:\n            result += \"m\"\n\
    \        case 0x006E:\n            \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpmtzjtu6w.swift:97:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case 0x006E:\n        ^~~~~~~~~~~~\n\
    \                     break\n/tmp/tmpmtzjtu6w.swift:116:116: error: expected '}'\
    \ at end of brace statement\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n    \
    \                                                                            \
    \                                   ^\n/tmp/tmpmtzjtu6w.swift:5:36: note: to match\
    \ this opening '{'\n    for c in string.unicodeScalars {\n                   \
    \                ^\n/tmp/tmpmtzjtu6w.swift:116:116: error: expected '}' at end\
    \ of brace statement\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n                 \
    \                                                                            \
    \                      ^\n/tmp/tmpmtzjtu6w.swift:3:42: note: to match this opening\
    \ '{'\nfunc flip_case(string: String) -> String {\n                          \
    \               ^\n/tmp/tmpmtzjtu6w.swift:6:9: error: switch must be exhaustive\n\
    \        switch c.value {\n        ^\n/tmp/tmpmtzjtu6w.swift:6:9: note: do you\
    \ want to add a default clause?\n        switch c.value {\n        ^\n/tmp/tmpmtzjtu6w.swift:102:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        default:\n            result += c\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpy1p33y2o.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpy1p33y2o.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpy1p33y2o.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpy1p33y2o.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpy1p33y2o.swift:12:20:\
    \ error: operator function '+=' requires that 'Unicode.Scalar' conform to 'Sequence'\n\
    \            result += c\n                   ^\nSwift.RangeReplaceableCollection:4:35:\
    \ note: where 'Other' = 'Unicode.Scalar'\n    @inlinable public static func +=\
    \ <Other>(lhs: inout Self, rhs: Other) where Other : Sequence, Self.Element ==\
    \ Other.Element\n                                  ^\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string {\n        switch char {\n        case 'a':\n \
    \           result += \"A\"\n        case 'b':\n            result += \"B\"\n\
    \        case 'c':\n            result += \"C\"\n        case 'd':\n         \
    \   result += \"D\"\n        case 'e':\n            result += \"E\"\n        case\
    \ 'f':\n            result += \"F\"\n        case 'g':\n            result +=\
    \ \"G\"\n        case 'h':\n            result += \"H\"\n        case 'i':\n \
    \           result += \"I\"\n        case 'j':\n            result += \"J\"\n\
    \        case 'k':\n            result += \"K\"\n        case 'l':\n         \
    \   result += \"L\"\n        case 'm':\n            result += \"M\"\n        case\
    \ 'n':\n            result += \"N\"\n        case 'o':\n            result +=\
    \ \"O\"\n        case 'p':\n            result += \"P\"\n        case 'q':\n \
    \           result += \"Q\"\n        case 'r':\n            result += \"R\"\n\
    \        case 's':\n            result += \"S\"\n        case 't':\n         \
    \   result += \"T\"\n        case 'u':\n            result += \"U\"\n        case\
    \ 'v':\n            result += \"V\"\n        case 'w':\n            result +=\
    \ \"W\"\n        case 'x':\n            result += \"X\"\n        case 'y':\n \
    \           result += \"Y\"\n        case 'z':\n            result += \"Z\"\n\
    \        default:\n            result += char\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp3o533b_w.swift:7:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp3o533b_w.swift:9:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp3o533b_w.swift:11:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp3o533b_w.swift:13:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp3o533b_w.swift:15:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp3o533b_w.swift:17:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp3o533b_w.swift:19:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp3o533b_w.swift:21:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp3o533b_w.swift:23:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp3o533b_w.swift:25:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp3o533b_w.swift:27:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp3o533b_w.swift:29:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp3o533b_w.swift:31:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp3o533b_w.swift:33:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp3o533b_w.swift:35:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp3o533b_w.swift:37:14: error: single-quoted stri"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += \"\\U\"\n        case .uppercase:\n     \
    \       result += \"\\L\"\n        default:\n            result += String(c)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpa11gvu6h.swift:8:25: error: invalid escape sequence in literal\n\
    \            result += \"\\U\"\n                        ^\n/tmp/tmpa11gvu6h.swift:10:25:\
    \ error: invalid escape sequence in literal\n            result += \"\\L\"\n \
    \                       ^\n/tmp/tmpa11gvu6h.swift:7:15: error: type 'Unicode.Scalar'\
    \ has no member 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n\
    /tmp/tmpa11gvu6h.swift:9:15: error: type 'Unicode.Scalar' has no member 'uppercase'\n\
    \        case .uppercase:\n             ~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        if c.isUppercase {\n   \
    \         result += c.value\n        } else {\n            result += c.value.lowercased()\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpnh5glmz0.swift:6:14: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if c.isUppercase {\n           ~ ^~~~~~~~~~~\n\
    /tmp/tmpnh5glmz0.swift:7:25: error: cannot convert value of type 'UInt32' to expected\
    \ argument type 'String'\n            result += c.value\n                    \
    \    ^\n/tmp/tmpnh5glmz0.swift:9:31: error: value of type 'UInt32' has no member\
    \ 'lowercased'\n            result += c.value.lowercased()\n                 \
    \     ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        let upper = c.isUppercase\n\
    \        let lower = c.isLowercase\n        if upper && !lower {\n           \
    \ result += c.value\n        } else if lower && !upper {\n            result +=\
    \ c.value.lowercased()\n        } else {\n            result += c.value\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpgkgt713s.swift:6:23: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        let upper = c.isUppercase\n               \
    \     ~ ^~~~~~~~~~~\n/tmp/tmpgkgt713s.swift:7:23: error: value of type 'Unicode.Scalar'\
    \ has no member 'isLowercase'\n        let lower = c.isLowercase\n           \
    \         ~ ^~~~~~~~~~~\n/tmp/tmpgkgt713s.swift:9:25: error: cannot convert value\
    \ of type 'UInt32' to expected argument type 'String'\n            result += c.value\n\
    \                        ^\n/tmp/tmpgkgt713s.swift:11:31: error: value of type\
    \ 'UInt32' has no member 'lowercased'\n            result += c.value.lowercased()\n\
    \                      ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpgkgt713s.swift:13:25: error:\
    \ cannot convert value of type 'UInt32' to expected argument type 'String'\n \
    \           result += c.value\n                        ^\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string {\n        if char >= 'a' && char <= 'z' {\n  \
    \          result += char.uppercased()\n        } else {\n            result +=\
    \ char\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp2uz2t5s6.swift:6:20: error: single-quoted string literal found,\
    \ use '\"'\n        if char >= 'a' && char <= 'z' {\n                   ^~~\n\
    \                   \"a\"\n/tmp/tmp2uz2t5s6.swift:6:35: error: single-quoted string\
    \ literal found, use '\"'\n        if char >= 'a' && char <= 'z' {\n         \
    \                         ^~~\n                                  \"z\"\n/tmp/tmp2uz2t5s6.swift:9:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string {\n        switch char {\n        case \"A\":\n\
    \            result += \"a\"\n        case \"B\":\n            result += \"b\"\
    \n        case \"C\":\n            result += \"c\"\n        case \"D\":\n    \
    \        result += \"d\"\n        case \"E\":\n            result += \"e\"\n \
    \       case \"F\":\n            result += \"f\"\n        case \"G\":\n      \
    \      result += \"g\"\n        case \"H\":\n            result += \"h\"\n   \
    \     case \"I\":\n            result += \"i\"\n        case \"J\":\n        \
    \    result += \"j\"\n        case \"K\":\n            result += \"k\"\n     \
    \   case \"L\":\n            result += \"l\"\n        case \"M\":\n          \
    \  result += \"m\"\n        case \"N\":\n            result += \"n\"\n       \
    \ case \"O\":\n            result += \"o\"\n        case \"P\":\n            result\
    \ += \"p\"\n        case \"Q\":\n            result += \"q\"\n        case \"\
    R\":\n            result += \"r\"\n        case \"S\":\n            result +=\
    \ \"s\"\n        case \"T\":\n            result += \"t\"\n        case \"U\"\
    :\n            result += \"u\"\n        case \"V\":\n            result += \"\
    v\"\n        case \"W\":\n            result += \"w\"\n        case \"X\":\n \
    \           result += \"x\"\n        case \"Y\":\n            result += \"y\"\n\
    \        case \"Z\":\n            result += \"z\"\n        default:\n        \
    \    result += char\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp5xqx3lu3.swift:60:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += char\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        default:\n            result += c\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpy1p33y2o.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpy1p33y2o.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpy1p33y2o.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpy1p33y2o.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpy1p33y2o.swift:12:20:\
    \ error: operator function '+=' requires that 'Unicode.Scalar' conform to 'Sequence'\n\
    \            result += c\n                   ^\nSwift.RangeReplaceableCollection:4:35:\
    \ note: where 'Other' = 'Unicode.Scalar'\n    @inlinable public static func +=\
    \ <Other>(lhs: inout Self, rhs: Other) where Other : Sequence, Self.Element ==\
    \ Other.Element\n                                  ^\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        if let _ = c.isUppercase\
    \ {\n            result += c.value\n        } else {\n            result += c.value.lowercased()\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpxwkr5jp0.swift:6:22: error: type of expression is ambiguous without\
    \ more context\n        if let _ = c.isUppercase {\n                   ~~^~~~~~~~~~~\n\
    /tmp/tmpxwkr5jp0.swift:7:25: error: cannot convert value of type 'UInt32' to expected\
    \ argument type 'String'\n            result += c.value\n                    \
    \    ^\n/tmp/tmpxwkr5jp0.swift:9:31: error: value of type 'UInt32' has no member\
    \ 'lowercased'\n            result += c.value.lowercased()\n                 \
    \     ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        default:\n            result += c\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpy1p33y2o.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpy1p33y2o.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpy1p33y2o.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpy1p33y2o.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpy1p33y2o.swift:12:20:\
    \ error: operator function '+=' requires that 'Unicode.Scalar' conform to 'Sequence'\n\
    \            result += c\n                   ^\nSwift.RangeReplaceableCollection:4:35:\
    \ note: where 'Other' = 'Unicode.Scalar'\n    @inlinable public static func +=\
    \ <Other>(lhs: inout Self, rhs: Other) where Other : Sequence, Self.Element ==\
    \ Other.Element\n                                  ^\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += \"\\U\"\n        case .uppercase:\n     \
    \       result += \"\\L\"\n        default:\n            result += String(c)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpa11gvu6h.swift:8:25: error: invalid escape sequence in literal\n\
    \            result += \"\\U\"\n                        ^\n/tmp/tmpa11gvu6h.swift:10:25:\
    \ error: invalid escape sequence in literal\n            result += \"\\L\"\n \
    \                       ^\n/tmp/tmpa11gvu6h.swift:7:15: error: type 'Unicode.Scalar'\
    \ has no member 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n\
    /tmp/tmpa11gvu6h.swift:9:15: error: type 'Unicode.Scalar' has no member 'uppercase'\n\
    \        case .uppercase:\n             ~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        let uc = c.value\n     \
    \   if uc >= \"a\" && uc <= \"z\" {\n            result += String(uc - \"a\" +\
    \ \"A\")\n        } else {\n            result += String(c).lowercased()\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpu64ff9f_.swift:7:18: error: cannot convert value of type 'String'\
    \ to expected argument type 'UInt32'\n        if uc >= \"a\" && uc <= \"z\" {\n\
    \                 ^\n/tmp/tmpu64ff9f_.swift:7:31: error: cannot convert value\
    \ of type 'String' to expected argument type 'UInt32'\n        if uc >= \"a\"\
    \ && uc <= \"z\" {\n                              ^\n/tmp/tmpu64ff9f_.swift:8:39:\
    \ error: binary operator '+' cannot be applied to operands of type '_' and 'Unicode.Scalar'\n\
    \            result += String(uc - \"a\" + \"A\")\n                          \
    \   ~~~~~~~~ ^ ~~~\n"
  stdout: ''
  timestamp: 1659978992
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string {\n        switch char {\n        case 'a':\n \
    \           result += \"A\"\n        case 'b':\n            result += \"B\"\n\
    \        case 'c':\n            result += \"C\"\n        case 'd':\n         \
    \   result += \"D\"\n        case 'e':\n            result += \"E\"\n        case\
    \ 'f':\n            result += \"F\"\n        case 'g':\n            result +=\
    \ \"G\"\n        case 'h':\n            result += \"H\"\n        case 'i':\n \
    \           result += \"I\"\n        case 'j':\n            result += \"J\"\n\
    \        case 'k':\n            result += \"K\"\n        case 'l':\n         \
    \   result += \"L\"\n        case 'm':\n            result += \"M\"\n        case\
    \ 'n':\n            result += \"N\"\n        case 'o':\n            result +=\
    \ \"O\"\n        case 'p':\n            result += \"P\"\n        case 'q':\n \
    \           result += \"Q\"\n        case 'r':\n            result += \"R\"\n\
    \        case 's':\n            result += \"S\"\n        case 't':\n         \
    \   result += \"T\"\n        case 'u':\n            result += \"U\"\n        case\
    \ 'v':\n            result += \"V\"\n        case 'w':\n            result +=\
    \ \"W\"\n        case 'x':\n            result += \"X\"\n        case 'y':\n \
    \           result += \"Y\"\n        case 'z':\n            result += \"Z\"\n\
    \        default:\n            result += char\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp3o533b_w.swift:7:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp3o533b_w.swift:9:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp3o533b_w.swift:11:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp3o533b_w.swift:13:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp3o533b_w.swift:15:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp3o533b_w.swift:17:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp3o533b_w.swift:19:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp3o533b_w.swift:21:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp3o533b_w.swift:23:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp3o533b_w.swift:25:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp3o533b_w.swift:27:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp3o533b_w.swift:29:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp3o533b_w.swift:31:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp3o533b_w.swift:33:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp3o533b_w.swift:35:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp3o533b_w.swift:37:14: error: single-quoted stri"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string {\n        switch char {\n        case 'a':\n \
    \       case 'e':\n        case 'i':\n        case 'o':\n        case 'u':\n \
    \           result += \"A\"\n        default:\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp93uxmfht.swift:7:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp93uxmfht.swift:7:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case 'a':\n        ^~~~~~~~~\n                  break\n/tmp/tmp93uxmfht.swift:8:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp93uxmfht.swift:8:9: error: 'case'\
    \ label in a 'switch' must have at least one executable statement\n        case\
    \ 'e':\n        ^~~~~~~~~\n                  break\n/tmp/tmp93uxmfht.swift:9:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'i':\n   \
    \          ^~~\n             \"i\"\n/tmp/tmp93uxmfht.swift:9:9: error: 'case'\
    \ label in a 'switch' must have at least one executable statement\n        case\
    \ 'i':\n        ^~~~~~~~~\n                  break\n/tmp/tmp93uxmfht.swift:10:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'o':\n   \
    \          ^~~\n             \"o\"\n/tmp/tmp93uxmfht.swift:10:9: error: 'case'\
    \ label in a 'switch' must have at least one executable statement\n        case\
    \ 'o':\n        ^~~~~~~~~\n                  break\n/tmp/tmp93uxmfht.swift:11:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'u':\n   \
    \          ^~~\n             \"u\"\n/tmp/tmp93uxmfht.swift:14:23: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        default:\n            result += c\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpy1p33y2o.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpy1p33y2o.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpy1p33y2o.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpy1p33y2o.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpy1p33y2o.swift:12:20:\
    \ error: operator function '+=' requires that 'Unicode.Scalar' conform to 'Sequence'\n\
    \            result += c\n                   ^\nSwift.RangeReplaceableCollection:4:35:\
    \ note: where 'Other' = 'Unicode.Scalar'\n    @inlinable public static func +=\
    \ <Other>(lhs: inout Self, rhs: Other) where Other : Sequence, Self.Element ==\
    \ Other.Element\n                                  ^\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c.value {\n     \
    \   case .lowercase:\n            result += c.value\n        case .uppercase:\n\
    \            result += \"\\U\" + c.value\n        default:\n            result\
    \ += c.value\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpctwndqev.swift:10:25: error: invalid escape sequence in literal\n\
    \            result += \"\\U\" + c.value\n                        ^\n/tmp/tmpctwndqev.swift:7:15:\
    \ error: type 'UInt32' has no member 'lowercase'\n        case .lowercase:\n \
    \            ~^~~~~~~~~\n/tmp/tmpctwndqev.swift:9:15: error: type 'UInt32' has\
    \ no member 'uppercase'\n        case .uppercase:\n             ~^~~~~~~~~\n/tmp/tmpctwndqev.swift:8:25:\
    \ error: cannot convert value of type 'UInt32' to expected argument type 'String'\n\
    \            result += c.value\n                        ^\n/tmp/tmpctwndqev.swift:12:25:\
    \ error: cannot convert value of type 'UInt32' to expected argument type 'String'\n\
    \            result += c.value\n                        ^\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string {\n        switch char {\n        case \"a\":\n\
    \            result += \"A\"\n        case \"b\":\n            result += \"B\"\
    \n        case \"c\":\n            result += \"C\"\n        case \"d\":\n    \
    \        result += \"D\"\n        case \"e\":\n            result += \"E\"\n \
    \       case \"f\":\n            result += \"F\"\n        case \"g\":\n      \
    \      result += \"G\"\n        case \"h\":\n            result += \"H\"\n   \
    \     case \"i\":\n            result += \"I\"\n        case \"j\":\n        \
    \    result += \"J\"\n        case \"k\":\n            result += \"K\"\n     \
    \   case \"l\":\n            result += \"L\"\n        case \"m\":\n          \
    \  result += \"M\"\n        case \"n\":\n            result += \"N\"\n       \
    \ case \"o\":\n            result += \"O\"\n        case \"p\":\n            result\
    \ += \"P\"\n        case \"q\":\n            result += \"Q\"\n        case \"\
    r\":\n            result += \"R\"\n        case \"s\":\n            result +=\
    \ \"S\"\n        case \"t\":\n            result += \"T\"\n        case \"u\"\
    :\n            result += \"U\"\n        case \"v\":\n            result += \"\
    V\"\n        case \"w\":\n            result += \"W\"\n        case \"x\":\n \
    \           result += \"X\"\n        case \"y\":\n            result += \"Y\"\n\
    \        case \"z\":\n            result += \"Z\"\n        default:\n        \
    \    result += char\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpicsuxq3_.swift:60:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += char\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string {\n        switch char {\n        case 'a':\n \
    \           result += \"A\"\n        case 'b':\n            result += \"B\"\n\
    \        case 'c':\n            result += \"C\"\n        case 'd':\n         \
    \   result += \"D\"\n        case 'e':\n            result += \"E\"\n        case\
    \ 'f':\n            result += \"F\"\n        case 'g':\n            result +=\
    \ \"G\"\n        case 'h':\n            result += \"H\"\n        case 'i':\n \
    \           result += \"I\"\n        case 'j':\n            result += \"J\"\n\
    \        case 'k':\n            result += \"K\"\n        case 'l':\n         \
    \   result += \"L\"\n        case 'm':\n            result += \"M\"\n        case\
    \ 'n':\n            result += \"N\"\n        case 'o':\n            result +=\
    \ \"O\"\n        case 'p':\n            result += \"P\"\n        case 'q':\n \
    \           result += \"Q\"\n        case 'r':\n            result += \"R\"\n\
    \        case 's':\n            result += \"S\"\n        case 't':\n         \
    \   result += \"T\"\n        case 'u':\n            result += \"U\"\n        case\
    \ 'v':\n            result += \"V\"\n        case 'w':\n            result +=\
    \ \"W\"\n        case 'x':\n            result += \"X\"\n        case 'y':\n \
    \           result += \"Y\"\n        case 'z':\n            result += \"Z\"\n\
    \        default:\n            result += char\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp3o533b_w.swift:7:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp3o533b_w.swift:9:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp3o533b_w.swift:11:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp3o533b_w.swift:13:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp3o533b_w.swift:15:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp3o533b_w.swift:17:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp3o533b_w.swift:19:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp3o533b_w.swift:21:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp3o533b_w.swift:23:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp3o533b_w.swift:25:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp3o533b_w.swift:27:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp3o533b_w.swift:29:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp3o533b_w.swift:31:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp3o533b_w.swift:33:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp3o533b_w.swift:35:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp3o533b_w.swift:37:14: error: single-quoted stri"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        if c.isUppercase {\n   \
    \         result += c.value\n        } else {\n            result += c.value.lowercase()\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6rk53mmv.swift:6:14: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if c.isUppercase {\n           ~ ^~~~~~~~~~~\n\
    /tmp/tmp6rk53mmv.swift:7:25: error: cannot convert value of type 'UInt32' to expected\
    \ argument type 'String'\n            result += c.value\n                    \
    \    ^\n/tmp/tmp6rk53mmv.swift:9:31: error: value of type 'UInt32' has no member\
    \ 'lowercase'\n            result += c.value.lowercase()\n                   \
    \   ~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string {\n        switch char {\n        case 'a':\n \
    \           result += \"A\"\n        case 'b':\n            result += \"B\"\n\
    \        case 'c':\n            result += \"C\"\n        case 'd':\n         \
    \   result += \"D\"\n        case 'e':\n            result += \"E\"\n        case\
    \ 'f':\n            result += \"F\"\n        case 'g':\n            result +=\
    \ \"G\"\n        case 'h':\n            result += \"H\"\n        case 'i':\n \
    \           result += \"I\"\n        case 'j':\n            result += \"J\"\n\
    \        case 'k':\n            result += \"K\"\n        case 'l':\n         \
    \   result += \"L\"\n        case 'm':\n            result += \"M\"\n        case\
    \ 'n':\n            result += \"N\"\n        case 'o':\n            result +=\
    \ \"O\"\n        case 'p':\n            result += \"P\"\n        case 'q':\n \
    \           result += \"Q\"\n        case 'r':\n            result += \"R\"\n\
    \        case 's':\n            result += \"S\"\n        case 't':\n         \
    \   result += \"T\"\n        case 'u':\n            result += \"U\"\n        case\
    \ 'v':\n            result += \"V\"\n        case 'w':\n            result +=\
    \ \"W\"\n        case 'x':\n            result += \"X\"\n        case 'y':\n \
    \           result += \"Y\"\n        case 'z':\n            result += \"Z\"\n\
    \        default:\n            result += char\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp3o533b_w.swift:7:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp3o533b_w.swift:9:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp3o533b_w.swift:11:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp3o533b_w.swift:13:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp3o533b_w.swift:15:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp3o533b_w.swift:17:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp3o533b_w.swift:19:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp3o533b_w.swift:21:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp3o533b_w.swift:23:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp3o533b_w.swift:25:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp3o533b_w.swift:27:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp3o533b_w.swift:29:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp3o533b_w.swift:31:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp3o533b_w.swift:33:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp3o533b_w.swift:35:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp3o533b_w.swift:37:14: error: single-quoted stri"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string {\n        switch char {\n        case 'a':\n \
    \           result += \"A\"\n        case 'b':\n            result += \"B\"\n\
    \        case 'c':\n            result += \"C\"\n        case 'd':\n         \
    \   result += \"D\"\n        case 'e':\n            result += \"E\"\n        case\
    \ 'f':\n            result += \"F\"\n        case 'g':\n            result +=\
    \ \"G\"\n        case 'h':\n            result += \"H\"\n        case 'i':\n \
    \           result += \"I\"\n        case 'j':\n            result += \"J\"\n\
    \        case 'k':\n            result += \"K\"\n        case 'l':\n         \
    \   result += \"L\"\n        case 'm':\n            result += \"M\"\n        case\
    \ 'n':\n            result += \"N\"\n        case 'o':\n            result +=\
    \ \"O\"\n        case 'p':\n            result += \"P\"\n        case 'q':\n \
    \           result += \"Q\"\n        case 'r':\n            result += \"R\"\n\
    \        case 's':\n            result += \"S\"\n        case 't':\n         \
    \   result += \"T\"\n        case 'u':\n            result += \"U\"\n        case\
    \ 'v':\n            result += \"V\"\n        case 'w':\n            result +=\
    \ \"W\"\n        case 'x':\n            result += \"X\"\n        case 'y':\n \
    \           result += \"Y\"\n        case 'z':\n            result += \"Z\"\n\
    \        default:\n            result += char\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp3o533b_w.swift:7:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp3o533b_w.swift:9:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp3o533b_w.swift:11:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp3o533b_w.swift:13:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp3o533b_w.swift:15:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp3o533b_w.swift:17:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp3o533b_w.swift:19:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp3o533b_w.swift:21:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp3o533b_w.swift:23:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp3o533b_w.swift:25:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp3o533b_w.swift:27:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp3o533b_w.swift:29:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp3o533b_w.swift:31:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp3o533b_w.swift:33:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp3o533b_w.swift:35:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp3o533b_w.swift:37:14: error: single-quoted stri"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"[c]\n     \
    \   case .uppercase:\n            result += \"abcdefghijklmnopqrstuvwxyz\"[c]\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpcg4944u6.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpcg4944u6.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpcg4944u6.swift:8:51: error: subscript 'subscript(_:)'\
    \ requires that 'Unicode.Scalar' conform to 'RangeExpression'\n            result\
    \ += \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"[c]\n                                     \
    \             ^\nSwift.Collection:2:23: note: where 'R' = 'Unicode.Scalar'\n \
    \   @inlinable public subscript<R>(r: R) -> Self.SubSequence where R : RangeExpression,\
    \ Self.Index == R.Bound { get }\n                      ^\n/tmp/tmpcg4944u6.swift:10:51:\
    \ error: subscript 'subscript(_:)' requires that 'Unicode.Scalar' conform to 'RangeExpression'\n\
    \            result += \"abcdefghijklmnopqrstuvwxyz\"[c]\n                   \
    \                               ^\nSwift.Collection:2:23: note: where 'R' = 'Unicode.Scalar'\n\
    \    @inlinable public subscript<R>(r: R) -> Self.SubSequence where R : RangeExpression,\
    \ Self.Index == R.Bound { get }\n                      ^\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string {\n        switch char {\n        case 'a':\n \
    \           result += \"A\"\n        case 'b':\n            result += \"B\"\n\
    \        case 'c':\n            result += \"C\"\n        case 'd':\n         \
    \   result += \"D\"\n        case 'e':\n            result += \"E\"\n        case\
    \ 'f':\n            result += \"F\"\n        case 'g':\n            result +=\
    \ \"G\"\n        case 'h':\n            result += \"H\"\n        case 'i':\n \
    \           result += \"I\"\n        case 'j':\n            result += \"J\"\n\
    \        case 'k':\n            result += \"K\"\n        case 'l':\n         \
    \   result += \"L\"\n        case 'm':\n            result += \"M\"\n        case\
    \ 'n':\n            result += \"N\"\n        case 'o':\n            result +=\
    \ \"O\"\n        case 'p':\n            result += \"P\"\n        case 'q':\n \
    \           result += \"Q\"\n        case 'r':\n            result += \"R\"\n\
    \        case 's':\n            result += \"S\"\n        case 't':\n         \
    \   result += \"T\"\n        case 'u':\n            result += \"U\"\n        case\
    \ 'v':\n            result += \"V\"\n        case 'w':\n            result +=\
    \ \"W\"\n        case 'x':\n            result += \"X\"\n        case 'y':\n \
    \           result += \"Y\"\n        case 'z':\n            result += \"Z\"\n\
    \        default:\n            result += char\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp3o533b_w.swift:7:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp3o533b_w.swift:9:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp3o533b_w.swift:11:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp3o533b_w.swift:13:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp3o533b_w.swift:15:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp3o533b_w.swift:17:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp3o533b_w.swift:19:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp3o533b_w.swift:21:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp3o533b_w.swift:23:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp3o533b_w.swift:25:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp3o533b_w.swift:27:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp3o533b_w.swift:29:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp3o533b_w.swift:31:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp3o533b_w.swift:33:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp3o533b_w.swift:35:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp3o533b_w.swift:37:14: error: single-quoted stri"
  stdout: ''
  timestamp: 1659978991
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        if c.value > 128 {\n   \
    \         result += String(c.value - 32)\n        } else {\n            result\
    \ += String(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmpygde6b52/tmpygde6b52.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdf7837c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdf752eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdf752e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdf752d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpygde6b52                        0x0000555c20238775 <unavailable> + 6005

    5    libc.so.6                          0x00002afdf7a23460 __libc_start_main +
    245

    6    tmpygde6b52                        0x0000555c202382c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        default:\n            result += c\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpy1p33y2o.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpy1p33y2o.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpy1p33y2o.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpy1p33y2o.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpy1p33y2o.swift:12:20:\
    \ error: operator function '+=' requires that 'Unicode.Scalar' conform to 'Sequence'\n\
    \            result += c\n                   ^\nSwift.RangeReplaceableCollection:4:35:\
    \ note: where 'Other' = 'Unicode.Scalar'\n    @inlinable public static func +=\
    \ <Other>(lhs: inout Self, rhs: Other) where Other : Sequence, Self.Element ==\
    \ Other.Element\n                                  ^\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c.value {\n     \
    \   case 0x0041:\n            result += c.value\n        case 0x0042:\n      \
    \      result += c.value\n        case 0x0043:\n            result += c.value\n\
    \        case 0x0044:\n            result += c.value\n        case 0x0045:\n \
    \           result += c.value\n        case 0x0046:\n            result += c.value\n\
    \        case 0x0047:\n            result += c.value\n        case 0x0048:\n \
    \           result += c.value\n        case 0x0049:\n            result += c.value\n\
    \        case 0x004A:\n            result += c.value\n        case 0x004B:\n \
    \           result += c.value\n        case 0x004C:\n            result += c.value\n\
    \        case 0x004D:\n            result += c.value\n        case 0x004E:\n \
    \           result += c.value\n        case 0x004F:\n            result += c.value\n\
    \        case 0x0050:\n            result += c.value\n        case 0x0051:\n \
    \           result += c.value\n        case 0x0052:\n            result += c.value\n\
    \        case 0x0053:\n            result += c.value\n        case 0x0054:\n \
    \           result += c.value\n        case 0x0055:\n            result += c.value\n\
    \        case 0x0056:\n            result += c.value\n        case 0x0057:\n \
    \           result += c.value\n        case 0x0058:\n            result += c.value\n\
    \        case 0x0059:\n            result += c.value\n        case 0x005A:\n \
    \           result += c.value\n        case 0x005B:\n            result += c.value\n\
    \        case 0x005C:\n            result += c.value\n        case 0x005D:\n \
    \           result += c.value\n        case 0x005E:\n            result += c.value\n\
    \        case 0x005F:\n            result += c.value\n        case 0x0060:\n \
    \           result += c.value\n        case 0x0061:\n            result += c.value\n\
    \        case 0x0062:\n            result += c.value\n        case 0x0063:\n \
    \           result += c.value\n        case 0x0064:\n            result += c.value\n\
    \        case 0x0065:\n            result += c.value\n        case 0x0066:\n \
    \           result += c.value\n        case 0x0067:\n            result += c.value\n\
    \        case 0x0068:\n            result += c.value\n        case 0x0069:\n \
    \           result += c.value\n        case 0x006A:\n            result += c.value\n\
    \        case 0x006B:\n            result += c.value\n        case 0x006C:\n \
    \           result += c.value\n        case 0x006D:\n            result += c.value\n\
    \        case 0x006E:\n            result += c.value\n        case 0x006F:\n \
    \           result += c.value\n        case 0x0070:\n            result += c.value\n\
    \        case 0x0071:\n            result += c.value\n        case \n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpc6o69vi4.swift:105:13: error: expected pattern\n        case \n\
    \            ^\n/tmp/tmpc6o69vi4.swift:105:13: error: expected ':' after 'case'\n\
    \        case \n            ^\n/tmp/tmpc6o69vi4.swift:123:116: error: expected\
    \ '}' at end of brace statement\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n    \
    \                                                                            \
    \                                   ^\n/tmp/tmpc6o69vi4.swift:5:36: note: to match\
    \ this opening '{'\n    for c in string.unicodeScalars {\n                   \
    \                ^\n/tmp/tmpc6o69vi4.swift:123:116: error: expected '}' at end\
    \ of brace statement\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n                 \
    \                                                                            \
    \                      ^\n/tmp/tmpc6o69vi4.swift:3:42: note: to match this opening\
    \ '{'\nfunc flip_case(string: String) -> String {\n                          \
    \               ^\n/tmp/tmpc6o69vi4.swift:8:25: error: cannot convert value of\
    \ type 'UInt32' to expected argument type 'String'\n            result += c.value\n\
    \                        ^\n/tmp/tmpc6o69vi4.swift:10:25: error: cannot convert\
    \ value of type 'UInt32' to expected argument type 'String'\n            result\
    \ += c.value\n                        ^\n/tmp/tmpc6o69vi4.swift:12:25: error:\
    \ cannot convert value of type 'UInt32' to expected argument type 'String'\n \
    \           result += c.value\n                        ^\n/tmp/tmpc6o69vi4.swift:14:25:\
    \ error: cannot convert value of type 'UInt32' to expected argument type 'String'\n\
    \            result += c.value\n                        ^\n/tmp/tmpc6o69vi4.swift:16:25:\
    \ error: cannot convert value of type 'UInt32' to expected argument type 'String'\n\
    \            result += c.value\n                        ^\n/tmp/tmpc6o69vi4.swift:18:25:\
    \ error: cannot convert value of type 'UInt32' to expected argument type 'String'\n\
    \            result += c.value\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        if c.isUppercase {\n   \
    \         result += c.value\n        } else {\n            result += c.value.lowercased()\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpnh5glmz0.swift:6:14: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if c.isUppercase {\n           ~ ^~~~~~~~~~~\n\
    /tmp/tmpnh5glmz0.swift:7:25: error: cannot convert value of type 'UInt32' to expected\
    \ argument type 'String'\n            result += c.value\n                    \
    \    ^\n/tmp/tmpnh5glmz0.swift:9:31: error: value of type 'UInt32' has no member\
    \ 'lowercased'\n            result += c.value.lowercased()\n                 \
    \     ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c.value {\n     \
    \   case 0x41:\n            result += \"A\"\n        case 0x42:\n            result\
    \ += \"B\"\n        case 0x43:\n            result += \"C\"\n        case 0x44:\n\
    \            result += \"D\"\n        case 0x45:\n            result += \"E\"\n\
    \        case 0x46:\n            result += \"F\"\n        case 0x47:\n       \
    \     result += \"G\"\n        case 0x48:\n            result += \"H\"\n     \
    \   case 0x49:\n            result += \"I\"\n        case 0x4A:\n            result\
    \ += \"J\"\n        case 0x4B:\n            result += \"K\"\n        case 0x4C:\n\
    \            result += \"L\"\n        case 0x4D:\n            result += \"M\"\n\
    \        case 0x4E:\n            result += \"N\"\n        case 0x4F:\n       \
    \     result += \"O\"\n        case 0x50:\n            result += \"P\"\n     \
    \   case 0x51:\n            result += \"Q\"\n        case 0x52:\n            result\
    \ += \"R\"\n        case 0x53:\n            result += \"S\"\n        case 0x54:\n\
    \            result += \"T\"\n        case 0x55:\n            result += \"U\"\n\
    \        case 0x56:\n            result += \"V\"\n        case 0x57:\n       \
    \     result += \"W\"\n        case 0x58:\n            result += \"X\"\n     \
    \   case 0x59:\n            result += \"Y\"\n        case 0x5A:\n            result\
    \ += \"Z\"\n        case 0x5B:\n            result += \"a\"\n        case 0x5C:\n\
    \            result += \"b\"\n        case 0x5D:\n            result += \"c\"\n\
    \        case 0x5E:\n            result += \"d\"\n        case 0x5F:\n       \
    \     result += \"e\"\n        case 0x60:\n            result += \"f\"\n     \
    \   case 0x61:\n            result += \"g\"\n        case 0x62:\n            result\
    \ += \"h\"\n        case 0x63:\n            result += \"i\"\n        case 0x64:\n\
    \            result += \"j\"\n        case 0x65:\n            result += \"k\"\n\
    \        case 0x66:\n            result += \"l\"\n        case 0x67:\n       \
    \     result += \"m\"\n        case 0x68:\n            result += \"n\"\n     \
    \   case 0x69:\n            result += \"o\"\n        case 0x6A:\n            result\
    \ += \"p\"\n        case 0x6B:\n            result += \"q\"\n        case 0x6C:\n\
    \            result += \"r\"\n        case 0x6D:\n            result += \"s\"\n\
    \        case 0x6E:\n            \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpsep0reiq.swift:97:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case 0x6E:\n        ^~~~~~~~~~\n\
    \                   break\n/tmp/tmpsep0reiq.swift:116:116: error: expected '}'\
    \ at end of brace statement\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n    \
    \                                                                            \
    \                                   ^\n/tmp/tmpsep0reiq.swift:5:36: note: to match\
    \ this opening '{'\n    for c in string.unicodeScalars {\n                   \
    \                ^\n/tmp/tmpsep0reiq.swift:116:116: error: expected '}' at end\
    \ of brace statement\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n                 \
    \                                                                            \
    \                      ^\n/tmp/tmpsep0reiq.swift:3:42: note: to match this opening\
    \ '{'\nfunc flip_case(string: String) -> String {\n                          \
    \               ^\n/tmp/tmpsep0reiq.swift:6:9: error: switch must be exhaustive\n\
    \        switch c.value {\n        ^\n/tmp/tmpsep0reiq.swift:6:9: note: do you\
    \ want to add a default clause?\n        switch c.value {\n        ^\n/tmp/tmpsep0reiq.swift:102:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string {\n        switch char {\n        case 'a':\n \
    \           result += \"A\"\n        case 'b':\n            result += \"B\"\n\
    \        case 'c':\n            result += \"C\"\n        case 'd':\n         \
    \   result += \"D\"\n        case 'e':\n            result += \"E\"\n        case\
    \ 'f':\n            result += \"F\"\n        case 'g':\n            result +=\
    \ \"G\"\n        case 'h':\n            result += \"H\"\n        case 'i':\n \
    \           result += \"I\"\n        case 'j':\n            result += \"J\"\n\
    \        case 'k':\n            result += \"K\"\n        case 'l':\n         \
    \   result += \"L\"\n        case 'm':\n            result += \"M\"\n        case\
    \ 'n':\n            result += \"N\"\n        case 'o':\n            result +=\
    \ \"O\"\n        case 'p':\n            result += \"P\"\n        case 'q':\n \
    \           result += \"Q\"\n        case 'r':\n            result += \"R\"\n\
    \        case 's':\n            result += \"S\"\n        case 't':\n         \
    \   result += \"T\"\n        case 'u':\n            result += \"U\"\n        case\
    \ 'v':\n            result += \"V\"\n        case 'w':\n            result +=\
    \ \"W\"\n        case 'x':\n            result += \"X\"\n        case 'y':\n \
    \           result += \"Y\"\n        case 'z':\n            result += \"Z\"\n\
    \        default:\n            result += char\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp3o533b_w.swift:7:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp3o533b_w.swift:9:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp3o533b_w.swift:11:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp3o533b_w.swift:13:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp3o533b_w.swift:15:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp3o533b_w.swift:17:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp3o533b_w.swift:19:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp3o533b_w.swift:21:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp3o533b_w.swift:23:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp3o533b_w.swift:25:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp3o533b_w.swift:27:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp3o533b_w.swift:29:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp3o533b_w.swift:31:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp3o533b_w.swift:33:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp3o533b_w.swift:35:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp3o533b_w.swift:37:14: error: single-quoted stri"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        default:\n            result += c\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpy1p33y2o.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpy1p33y2o.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpy1p33y2o.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpy1p33y2o.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpy1p33y2o.swift:12:20:\
    \ error: operator function '+=' requires that 'Unicode.Scalar' conform to 'Sequence'\n\
    \            result += c\n                   ^\nSwift.RangeReplaceableCollection:4:35:\
    \ note: where 'Other' = 'Unicode.Scalar'\n    @inlinable public static func +=\
    \ <Other>(lhs: inout Self, rhs: Other) where Other : Sequence, Self.Element ==\
    \ Other.Element\n                                  ^\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string {\n        switch char {\n        case \"A\":\n\
    \            result += \"a\"\n        case \"B\":\n            result += \"b\"\
    \n        case \"C\":\n            result += \"c\"\n        case \"D\":\n    \
    \        result += \"d\"\n        case \"E\":\n            result += \"e\"\n \
    \       case \"F\":\n            result += \"f\"\n        case \"G\":\n      \
    \      result += \"g\"\n        case \"H\":\n            result += \"h\"\n   \
    \     case \"I\":\n            result += \"i\"\n        case \"J\":\n        \
    \    result += \"j\"\n        case \"K\":\n            result += \"k\"\n     \
    \   case \"L\":\n            result += \"l\"\n        case \"M\":\n          \
    \  result += \"m\"\n        case \"N\":\n            result += \"n\"\n       \
    \ case \"O\":\n            result += \"o\"\n        case \"P\":\n            result\
    \ += \"p\"\n        case \"Q\":\n            result += \"q\"\n        case \"\
    R\":\n            result += \"r\"\n        case \"S\":\n            result +=\
    \ \"s\"\n        case \"T\":\n            result += \"t\"\n        case \"U\"\
    :\n            result += \"u\"\n        case \"V\":\n            result += \"\
    v\"\n        case \"W\":\n            result += \"w\"\n        case \"X\":\n \
    \           result += \"x\"\n        case \"Y\":\n            result += \"y\"\n\
    \        case \"Z\":\n            result += \"z\"\n        default:\n        \
    \    result += char\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp5xqx3lu3.swift:60:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += char\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        if c.isUppercase {\n   \
    \         result += c.value\n        } else {\n            result += c.value.lowercased()\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpnh5glmz0.swift:6:14: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if c.isUppercase {\n           ~ ^~~~~~~~~~~\n\
    /tmp/tmpnh5glmz0.swift:7:25: error: cannot convert value of type 'UInt32' to expected\
    \ argument type 'String'\n            result += c.value\n                    \
    \    ^\n/tmp/tmpnh5glmz0.swift:9:31: error: value of type 'UInt32' has no member\
    \ 'lowercased'\n            result += c.value.lowercased()\n                 \
    \     ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        if c.isUppercase {\n   \
    \         result += c.value\n        } else {\n            result += c.value.lowercase()\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6rk53mmv.swift:6:14: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if c.isUppercase {\n           ~ ^~~~~~~~~~~\n\
    /tmp/tmp6rk53mmv.swift:7:25: error: cannot convert value of type 'UInt32' to expected\
    \ argument type 'String'\n            result += c.value\n                    \
    \    ^\n/tmp/tmp6rk53mmv.swift:9:31: error: value of type 'UInt32' has no member\
    \ 'lowercase'\n            result += c.value.lowercase()\n                   \
    \   ~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string {\n        switch char {\n        case \"a\":\n\
    \            result += \"A\"\n        case \"b\":\n            result += \"B\"\
    \n        case \"c\":\n            result += \"C\"\n        case \"d\":\n    \
    \        result += \"D\"\n        case \"e\":\n            result += \"E\"\n \
    \       case \"f\":\n            result += \"F\"\n        case \"g\":\n      \
    \      result += \"G\"\n        case \"h\":\n            result += \"H\"\n   \
    \     case \"i\":\n            result += \"I\"\n        case \"j\":\n        \
    \    result += \"J\"\n        case \"k\":\n            result += \"K\"\n     \
    \   case \"l\":\n            result += \"L\"\n        case \"m\":\n          \
    \  result += \"M\"\n        case \"n\":\n            result += \"N\"\n       \
    \ case \"o\":\n            result += \"O\"\n        case \"p\":\n            result\
    \ += \"P\"\n        case \"q\":\n            result += \"Q\"\n        case \"\
    r\":\n            result += \"R\"\n        case \"s\":\n            result +=\
    \ \"S\"\n        case \"t\":\n            result += \"T\"\n        case \"u\"\
    :\n            result += \"U\"\n        case \"v\":\n            result += \"\
    V\"\n        case \"w\":\n            result += \"W\"\n        case \"x\":\n \
    \           result += \"X\"\n        case \"y\":\n            result += \"Y\"\n\
    \        case \"z\":\n            result += \"Z\"\n        default:\n        \
    \    result += char\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpicsuxq3_.swift:60:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += char\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        let upper = c.isUppercase\n\
    \        let lower = !upper\n        result += String(c.value)\n        if upper\
    \ != lower {\n            result += String(UnicodeScalar(UnicodeScalar(c.value).value).value)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpivvxub1f.swift:6:23: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        let upper = c.isUppercase\n               \
    \     ~ ^~~~~~~~~~~\n/tmp/tmpivvxub1f.swift:10:65: error: value of optional type\
    \ 'UnicodeScalar?' (aka 'Optional<Unicode.Scalar>') must be unwrapped to refer\
    \ to member 'value' of wrapped base type 'UnicodeScalar' (aka 'Unicode.Scalar')\n\
    \            result += String(UnicodeScalar(UnicodeScalar(c.value).value).value)\n\
    \                                                                ^\n/tmp/tmpivvxub1f.swift:10:65:\
    \ note: chain the optional using '?' to access member 'value' only for non-'nil'\
    \ base values\n            result += String(UnicodeScalar(UnicodeScalar(c.value).value).value)\n\
    \                                                                ^\n         \
    \                                                        ?\n/tmp/tmpivvxub1f.swift:10:65:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            result += String(UnicodeScalar(UnicodeScalar(c.value).value).value)\n\
    \                                                                ^\n         \
    \                                                        !\n/tmp/tmpivvxub1f.swift:10:72:\
    \ error: value of optional type 'UnicodeScalar?' (aka 'Optional<Unicode.Scalar>')\
    \ must be unwrapped to refer to member 'value' of wrapped base type 'UnicodeScalar'\
    \ (aka 'Unicode.Scalar')\n            result += String(UnicodeScalar(UnicodeScalar(c.value).value).value)\n\
    \                                                                       ^\n/tmp/tmpivvxub1f.swift:10:72:\
    \ note: chain the optional using '?' to access member 'value' only for non-'nil'\
    \ base values\n            result += String(UnicodeScalar(UnicodeScalar(c.value).value).value)\n\
    \                                                                       ^\n  \
    \                                                                      ?\n/tmp/tmpivvxub1f.swift:10:72:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            result += String(Un"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c.value {\n     \
    \   case .lowercase:\n            result += .uppercase\n        case .uppercase:\n\
    \            result += .lowercase\n        default:\n            result += c\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpedb4jgak.swift:7:15: error: type 'UInt32' has no member 'lowercase'\n\
    \        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpedb4jgak.swift:9:15:\
    \ error: type 'UInt32' has no member 'uppercase'\n        case .uppercase:\n \
    \            ~^~~~~~~~~\n/tmp/tmpedb4jgak.swift:8:20: error: binary operator '+='\
    \ cannot be applied to operands of type 'String' and '_'\n            result +=\
    \ .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpedb4jgak.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpedb4jgak.swift:12:20:\
    \ error: operator function '+=' requires that 'Unicode.Scalar' conform to 'Sequence'\n\
    \            result += c\n                   ^\nSwift.RangeReplaceableCollection:4:35:\
    \ note: where 'Other' = 'Unicode.Scalar'\n    @inlinable public static func +=\
    \ <Other>(lhs: inout Self, rhs: Other) where Other : Sequence, Self.Element ==\
    \ Other.Element\n                                  ^\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string.unicodeScalars {\n        let upper = UnicodeScalar(char.value)\n\
    \        let lower = UnicodeScalar(char.value - 32)\n        result = result +\
    \ String(UnicodeScalar(upper.value) + UnicodeScalar(lower.value))\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp_b7nol2c.swift:8:61: error: binary operator '+' cannot be applied\
    \ to two 'UnicodeScalar?' (aka 'Optional<Unicode.Scalar>') operands\n        result\
    \ = result + String(UnicodeScalar(upper.value) + UnicodeScalar(lower.value))\n\
    \                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978995
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c.value {\n     \
    \   case 0x41:\n            result += c.value\n        case 0x42:\n          \
    \  result += \"A\"\n        case 0x43:\n            result += \"B\"\n        case\
    \ 0x44:\n            result += \"C\"\n        case 0x45:\n            result +=\
    \ \"D\"\n        case 0x46:\n            result += \"E\"\n        case 0x47:\n\
    \            result += \"F\"\n        case 0x48:\n            result += \"G\"\n\
    \        case 0x49:\n            result += \"H\"\n        case 0x4A:\n       \
    \     result += \"I\"\n        case 0x4B:\n            result += \"J\"\n     \
    \   case 0x4C:\n            result += \"K\"\n        case 0x4D:\n            result\
    \ += \"L\"\n        case 0x4E:\n            result += \"M\"\n        case 0x4F:\n\
    \            result += \"N\"\n        case 0x50:\n            result += \"O\"\n\
    \        case 0x51:\n            result += \"P\"\n        case 0x52:\n       \
    \     result += \"Q\"\n        case 0x53:\n            result += \"R\"\n     \
    \   case 0x54:\n            result += \"S\"\n        case 0x55:\n            result\
    \ += \"T\"\n        case 0x56:\n            result += \"U\"\n        case 0x57:\n\
    \            result += \"V\"\n        case 0x58:\n            result += \"W\"\n\
    \        case 0x59:\n            result += \"X\"\n        case 0x5A:\n       \
    \     result += \"Y\"\n        case 0x5B:\n            result += \"Z\"\n     \
    \   case 0x5C:\n            result += \"a\"\n        case 0x5D:\n            result\
    \ += \"b\"\n        case 0x5E:\n            result += \"c\"\n        case 0x5F:\n\
    \            result += \"d\"\n        case 0x60:\n            result += \"e\"\n\
    \        case 0x61:\n            result += \"f\"\n        case 0x62:\n       \
    \     result += \"g\"\n        case 0x63:\n            result += \"h\"\n     \
    \   case 0x64:\n            result += \"i\"\n        case 0x65:\n            result\
    \ += \"j\"\n        case 0x66:\n            result += \"k\"\n        case 0x67:\n\
    \            result += \"l\"\n        case 0x68:\n            result += \"m\"\n\
    \        case 0x69:\n            result += \"n\"\n        case 0x6A:\n       \
    \     result += \"o\"\n        case 0x6B:\n            result += \"p\"\n     \
    \   case 0x6C:\n            result += \"q\"\n        case 0x6D:\n            result\
    \ += \"r\"\n        case 0x6E:\n            \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpkbab28mm.swift:97:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case 0x6E:\n        ^~~~~~~~~~\n\
    \                   break\n/tmp/tmpkbab28mm.swift:116:116: error: expected '}'\
    \ at end of brace statement\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n    \
    \                                                                            \
    \                                   ^\n/tmp/tmpkbab28mm.swift:5:36: note: to match\
    \ this opening '{'\n    for c in string.unicodeScalars {\n                   \
    \                ^\n/tmp/tmpkbab28mm.swift:116:116: error: expected '}' at end\
    \ of brace statement\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n                 \
    \                                                                            \
    \                      ^\n/tmp/tmpkbab28mm.swift:3:42: note: to match this opening\
    \ '{'\nfunc flip_case(string: String) -> String {\n                          \
    \               ^\n/tmp/tmpkbab28mm.swift:8:25: error: cannot convert value of\
    \ type 'UInt32' to expected argument type 'String'\n            result += c.value\n\
    \                        ^\n/tmp/tmpkbab28mm.swift:6:9: error: switch must be\
    \ exhaustive\n        switch c.value {\n        ^\n/tmp/tmpkbab28mm.swift:6:9:\
    \ note: do you want to add a default clause?\n        switch c.value {\n     \
    \   ^\n/tmp/tmpkbab28mm.swift:102:6: error: operator functions can only be declared\
    \ at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string {\n        switch char {\n        case 'a':\n \
    \           result += \"A\"\n        case 'b':\n            result += \"B\"\n\
    \        case 'c':\n            result += \"C\"\n        case 'd':\n         \
    \   result += \"D\"\n        case 'e':\n            result += \"E\"\n        case\
    \ 'f':\n            result += \"F\"\n        case 'g':\n            result +=\
    \ \"G\"\n        case 'h':\n            result += \"H\"\n        case 'i':\n \
    \           result += \"I\"\n        case 'j':\n            result += \"J\"\n\
    \        case 'k':\n            result += \"K\"\n        case 'l':\n         \
    \   result += \"L\"\n        case 'm':\n            result += \"M\"\n        case\
    \ 'n':\n            result += \"N\"\n        case 'o':\n            result +=\
    \ \"O\"\n        case 'p':\n            result += \"P\"\n        case 'q':\n \
    \           result += \"Q\"\n        case 'r':\n            result += \"R\"\n\
    \        case 's':\n            result += \"S\"\n        case 't':\n         \
    \   result += \"T\"\n        case 'u':\n            result += \"U\"\n        case\
    \ 'v':\n            result += \"V\"\n        case 'w':\n            result +=\
    \ \"W\"\n        case 'x':\n            result += \"X\"\n        case 'y':\n \
    \           result += \"Y\"\n        case 'z':\n            result += \"Z\"\n\
    \        default:\n            result += char\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp3o533b_w.swift:7:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp3o533b_w.swift:9:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp3o533b_w.swift:11:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp3o533b_w.swift:13:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp3o533b_w.swift:15:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp3o533b_w.swift:17:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp3o533b_w.swift:19:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp3o533b_w.swift:21:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp3o533b_w.swift:23:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp3o533b_w.swift:25:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp3o533b_w.swift:27:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp3o533b_w.swift:29:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp3o533b_w.swift:31:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp3o533b_w.swift:33:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp3o533b_w.swift:35:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp3o533b_w.swift:37:14: error: single-quoted stri"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        if c.isUppercase {\n   \
    \         result += c.value\n        } else {\n            result += c.value.lowercased()\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpnh5glmz0.swift:6:14: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if c.isUppercase {\n           ~ ^~~~~~~~~~~\n\
    /tmp/tmpnh5glmz0.swift:7:25: error: cannot convert value of type 'UInt32' to expected\
    \ argument type 'String'\n            result += c.value\n                    \
    \    ^\n/tmp/tmpnh5glmz0.swift:9:31: error: value of type 'UInt32' has no member\
    \ 'lowercased'\n            result += c.value.lowercased()\n                 \
    \     ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        default:\n            result += c\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpy1p33y2o.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpy1p33y2o.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpy1p33y2o.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpy1p33y2o.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpy1p33y2o.swift:12:20:\
    \ error: operator function '+=' requires that 'Unicode.Scalar' conform to 'Sequence'\n\
    \            result += c\n                   ^\nSwift.RangeReplaceableCollection:4:35:\
    \ note: where 'Other' = 'Unicode.Scalar'\n    @inlinable public static func +=\
    \ <Other>(lhs: inout Self, rhs: Other) where Other : Sequence, Self.Element ==\
    \ Other.Element\n                                  ^\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string {\n        switch char {\n        case 'a':\n \
    \           result += \"A\"\n        case 'b':\n            result += \"B\"\n\
    \        case 'c':\n            result += \"C\"\n        case 'd':\n         \
    \   result += \"D\"\n        case 'e':\n            result += \"E\"\n        case\
    \ 'f':\n            result += \"F\"\n        case 'g':\n            result +=\
    \ \"G\"\n        case 'h':\n            result += \"H\"\n        case 'i':\n \
    \           result += \"I\"\n        case 'j':\n            result += \"J\"\n\
    \        case 'k':\n            result += \"K\"\n        case 'l':\n         \
    \   result += \"L\"\n        case 'm':\n            result += \"M\"\n        case\
    \ 'n':\n            result += \"N\"\n        case 'o':\n            result +=\
    \ \"O\"\n        case 'p':\n            result += \"P\"\n        case 'q':\n \
    \           result += \"Q\"\n        case 'r':\n            result += \"R\"\n\
    \        case 's':\n            result += \"S\"\n        case 't':\n         \
    \   result += \"T\"\n        case 'u':\n            result += \"U\"\n        case\
    \ 'v':\n            result += \"V\"\n        case 'w':\n            result +=\
    \ \"W\"\n        case 'x':\n            result += \"X\"\n        case 'y':\n \
    \           result += \"Y\"\n        case 'z':\n            result += \"Z\"\n\
    \        default:\n            result += char\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp3o533b_w.swift:7:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp3o533b_w.swift:9:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp3o533b_w.swift:11:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp3o533b_w.swift:13:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp3o533b_w.swift:15:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp3o533b_w.swift:17:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp3o533b_w.swift:19:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp3o533b_w.swift:21:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp3o533b_w.swift:23:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp3o533b_w.swift:25:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp3o533b_w.swift:27:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp3o533b_w.swift:29:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp3o533b_w.swift:31:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp3o533b_w.swift:33:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp3o533b_w.swift:35:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp3o533b_w.swift:37:14: error: single-quoted stri"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        if c.isUppercase {\n   \
    \         result += c.value\n        } else {\n            result += c.value.lowercase()\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6rk53mmv.swift:6:14: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if c.isUppercase {\n           ~ ^~~~~~~~~~~\n\
    /tmp/tmp6rk53mmv.swift:7:25: error: cannot convert value of type 'UInt32' to expected\
    \ argument type 'String'\n            result += c.value\n                    \
    \    ^\n/tmp/tmp6rk53mmv.swift:9:31: error: value of type 'UInt32' has no member\
    \ 'lowercase'\n            result += c.value.lowercase()\n                   \
    \   ~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c.value {\n     \
    \   case 0x41:\n            result += \"A\"\n        case 0x42:\n            result\
    \ += \"B\"\n        case 0x43:\n            result += \"C\"\n        case 0x44:\n\
    \            result += \"D\"\n        case 0x45:\n            result += \"E\"\n\
    \        case 0x46:\n            result += \"F\"\n        case 0x47:\n       \
    \     result += \"G\"\n        case 0x48:\n            result += \"H\"\n     \
    \   case 0x49:\n            result += \"I\"\n        case 0x4A:\n            result\
    \ += \"J\"\n        case 0x4B:\n            result += \"K\"\n        case 0x4C:\n\
    \            result += \"L\"\n        case 0x4D:\n            result += \"M\"\n\
    \        case 0x4E:\n            result += \"N\"\n        case 0x4F:\n       \
    \     result += \"O\"\n        case 0x50:\n            result += \"P\"\n     \
    \   case 0x51:\n            result += \"Q\"\n        case 0x52:\n            result\
    \ += \"R\"\n        case 0x53:\n            result += \"S\"\n        case 0x54:\n\
    \            result += \"T\"\n        case 0x55:\n            result += \"U\"\n\
    \        case 0x56:\n            result += \"V\"\n        case 0x57:\n       \
    \     result += \"W\"\n        case 0x58:\n            result += \"X\"\n     \
    \   case 0x59:\n            result += \"Y\"\n        case 0x5A:\n            result\
    \ += \"Z\"\n        case 0x5B:\n            result += \"a\"\n        case 0x5C:\n\
    \            result += \"b\"\n        case 0x5D:\n            result += \"c\"\n\
    \        case 0x5E:\n            result += \"d\"\n        case 0x5F:\n       \
    \     result += \"e\"\n        case 0x60:\n            result += \"f\"\n     \
    \   case 0x61:\n            result += \"g\"\n        case 0x62:\n            result\
    \ += \"h\"\n        case 0x63:\n            result += \"i\"\n        case 0x64:\n\
    \            result += \"j\"\n        case 0x65:\n            result += \"k\"\n\
    \        case 0x66:\n            result += \"l\"\n        case 0x67:\n       \
    \     result += \"m\"\n        case 0x68:\n            result += \"n\"\n     \
    \   case 0x69:\n            result += \"o\"\n        case 0x6A:\n            result\
    \ += \"p\"\n        case 0x6B:\n            result += \"q\"\n        case 0x6C:\n\
    \            result += \"r\"\n        case 0x6D:\n            result += \"s\"\n\
    \        case 0x6E:\n            \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpsep0reiq.swift:97:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case 0x6E:\n        ^~~~~~~~~~\n\
    \                   break\n/tmp/tmpsep0reiq.swift:116:116: error: expected '}'\
    \ at end of brace statement\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n    \
    \                                                                            \
    \                                   ^\n/tmp/tmpsep0reiq.swift:5:36: note: to match\
    \ this opening '{'\n    for c in string.unicodeScalars {\n                   \
    \                ^\n/tmp/tmpsep0reiq.swift:116:116: error: expected '}' at end\
    \ of brace statement\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n                 \
    \                                                                            \
    \                      ^\n/tmp/tmpsep0reiq.swift:3:42: note: to match this opening\
    \ '{'\nfunc flip_case(string: String) -> String {\n                          \
    \               ^\n/tmp/tmpsep0reiq.swift:6:9: error: switch must be exhaustive\n\
    \        switch c.value {\n        ^\n/tmp/tmpsep0reiq.swift:6:9: note: do you\
    \ want to add a default clause?\n        switch c.value {\n        ^\n/tmp/tmpsep0reiq.swift:102:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c.value {\n     \
    \   case .lowercase:\n            result += .uppercase\n        case .uppercase:\n\
    \            result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpk37ups_9.swift:7:15: error: type 'UInt32' has no member 'lowercase'\n\
    \        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpk37ups_9.swift:9:15:\
    \ error: type 'UInt32' has no member 'uppercase'\n        case .uppercase:\n \
    \            ~^~~~~~~~~\n/tmp/tmpk37ups_9.swift:8:20: error: binary operator '+='\
    \ cannot be applied to operands of type 'String' and '_'\n            result +=\
    \ .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpk37ups_9.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string {\n        switch char {\n        case 'a':\n \
    \           result += \"A\"\n        case 'b':\n            result += \"B\"\n\
    \        case 'c':\n            result += \"C\"\n        case 'd':\n         \
    \   result += \"D\"\n        case 'e':\n            result += \"E\"\n        case\
    \ 'f':\n            result += \"F\"\n        case 'g':\n            result +=\
    \ \"G\"\n        case 'h':\n            result += \"H\"\n        case 'i':\n \
    \           result += \"I\"\n        case 'j':\n            result += \"J\"\n\
    \        case 'k':\n            result += \"K\"\n        case 'l':\n         \
    \   result += \"L\"\n        case 'm':\n            result += \"M\"\n        case\
    \ 'n':\n            result += \"N\"\n        case 'o':\n            result +=\
    \ \"O\"\n        case 'p':\n            result += \"P\"\n        case 'q':\n \
    \           result += \"Q\"\n        case 'r':\n            result += \"R\"\n\
    \        case 's':\n            result += \"S\"\n        case 't':\n         \
    \   result += \"T\"\n        case 'u':\n            result += \"U\"\n        case\
    \ 'v':\n            result += \"V\"\n        case 'w':\n            result +=\
    \ \"W\"\n        case 'x':\n            result += \"X\"\n        case 'y':\n \
    \           result += \"Y\"\n        case 'z':\n            result += \"Z\"\n\
    \        default:\n            result += char\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp3o533b_w.swift:7:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp3o533b_w.swift:9:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp3o533b_w.swift:11:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp3o533b_w.swift:13:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp3o533b_w.swift:15:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp3o533b_w.swift:17:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp3o533b_w.swift:19:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp3o533b_w.swift:21:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp3o533b_w.swift:23:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp3o533b_w.swift:25:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp3o533b_w.swift:27:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp3o533b_w.swift:29:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp3o533b_w.swift:31:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp3o533b_w.swift:33:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp3o533b_w.swift:35:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp3o533b_w.swift:37:14: error: single-quoted stri"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c.value {\n     \
    \   case 0x0041: // 'A'\n            result += \"A\"\n        case 0x0042:\n \
    \           result += \"B\"\n        case 0x0043:\n            result += \"C\"\
    \n        case 0x0044:\n            result += \"D\"\n        case 0x0045:\n  \
    \          result += \"E\"\n        case 0x0046:\n            result += \"F\"\n\
    \        case 0x0047:\n            result += \"G\"\n        case 0x0048:\n   \
    \         result += \"H\"\n        case 0x0049:\n            result += \"I\"\n\
    \        case 0x004A:\n            result += \"J\"\n        case 0x004B:\n   \
    \         result += \"K\"\n        case 0x004C:\n            result += \"L\"\n\
    \        case 0x004D:\n            result += \"M\"\n        case 0x004E:\n   \
    \         result += \"N\"\n        case 0x004F:\n            result += \"O\"\n\
    \        case 0x0050:\n            result += \"P\"\n        case 0x0051:\n   \
    \         result += \"Q\"\n        case 0x0052:\n            result += \"R\"\n\
    \        case 0x0053:\n            result += \"S\"\n        case 0x0054:\n   \
    \         result += \"T\"\n        case 0x0055:\n            result += \"U\"\n\
    \        case 0x0056:\n            result += \"V\"\n        case 0x0057:\n   \
    \         result += \"W\"\n        case 0x0058:\n            result += \"X\"\n\
    \        case 0x0059:\n            result += \"Y\"\n        case 0x005A:\n   \
    \         result += \"Z\"\n        case 0x005B:\n            result += \"[{\"\n\
    \        case 0x005C:\n            result += \"]}\"\n        case 0x005D:\n  \
    \          result += \"\\\\\"\n        case 0x005E:\n            result += \"\
    ^\"\n        case 0x005F:\n            result += \"_\"\n        case 0x0060:\n\
    \            result += \"`\"\n        case 0x0061:\n            result += \"a\"\
    \n        case 0x0062:\n            result += \"b\"\n        case 0x0063:\n  \
    \          result += \"c\"\n        case 0x0064:\n            result += \"d\"\n\
    \        case 0x0065:\n            result += \"e\"\n        case 0x0066:\n   \
    \         result += \"f\"\n        case 0x0067:\n            result += \"g\"\n\
    \        case 0x0068:\n            result += \"h\"\n        case 0x0069:\n   \
    \         result += \"i\"\n        case 0x006A:\n            result += \"j\"\n\
    \        case 0x006B:\n            result += \"k\"\n        case 0x006C:\n   \
    \         result += \"l\"\n        case 0x006D:\n            result += \"m\"\n\
    \        case 0x006\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp_uf_kzo3.swift:97:19: error: expected ':' after 'case'\n      \
    \  case 0x006\n                  ^\n/tmp/tmp_uf_kzo3.swift:115:116: error: expected\
    \ '}' at end of brace statement\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n    \
    \                                                                            \
    \                                   ^\n/tmp/tmp_uf_kzo3.swift:5:36: note: to match\
    \ this opening '{'\n    for c in string.unicodeScalars {\n                   \
    \                ^\n/tmp/tmp_uf_kzo3.swift:115:116: error: expected '}' at end\
    \ of brace statement\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n                 \
    \                                                                            \
    \                      ^\n/tmp/tmp_uf_kzo3.swift:3:42: note: to match this opening\
    \ '{'\nfunc flip_case(string: String) -> String {\n                          \
    \               ^\n/tmp/tmp_uf_kzo3.swift:6:9: error: switch must be exhaustive\n\
    \        switch c.value {\n        ^\n/tmp/tmp_uf_kzo3.swift:6:9: note: do you\
    \ want to add a default clause?\n        switch c.value {\n        ^\n/tmp/tmp_uf_kzo3.swift:101:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        if c.isUppercase {\n   \
    \         result += c.value\n        } else {\n            result += c.value.lowercase()\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6rk53mmv.swift:6:14: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if c.isUppercase {\n           ~ ^~~~~~~~~~~\n\
    /tmp/tmp6rk53mmv.swift:7:25: error: cannot convert value of type 'UInt32' to expected\
    \ argument type 'String'\n            result += c.value\n                    \
    \    ^\n/tmp/tmp6rk53mmv.swift:9:31: error: value of type 'UInt32' has no member\
    \ 'lowercase'\n            result += c.value.lowercase()\n                   \
    \   ~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string {\n        switch char {\n        case \"a\":\n\
    \            result += \"A\"\n        case \"b\":\n            result += \"B\"\
    \n        case \"c\":\n            result += \"C\"\n        case \"d\":\n    \
    \        result += \"D\"\n        case \"e\":\n            result += \"E\"\n \
    \       case \"f\":\n            result += \"F\"\n        case \"g\":\n      \
    \      result += \"G\"\n        case \"h\":\n            result += \"H\"\n   \
    \     case \"i\":\n            result += \"I\"\n        case \"j\":\n        \
    \    result += \"J\"\n        case \"k\":\n            result += \"K\"\n     \
    \   case \"l\":\n            result += \"L\"\n        case \"m\":\n          \
    \  result += \"M\"\n        case \"n\":\n            result += \"N\"\n       \
    \ case \"o\":\n            result += \"O\"\n        case \"p\":\n            result\
    \ += \"P\"\n        case \"q\":\n            result += \"Q\"\n        case \"\
    r\":\n            result += \"R\"\n        case \"s\":\n            result +=\
    \ \"S\"\n        case \"t\":\n            result += \"T\"\n        case \"u\"\
    :\n            result += \"U\"\n        case \"v\":\n            result += \"\
    V\"\n        case \"w\":\n            result += \"W\"\n        case \"x\":\n \
    \           result += \"X\"\n        case \"y\":\n            result += \"Y\"\n\
    \        case \"z\":\n            result += \"Z\"\n        default:\n        \
    \    result += char\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpicsuxq3_.swift:60:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += char\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string {\n        switch char {\n        case \"a\":\n\
    \            result += \"A\"\n        case \"b\":\n            result += \"B\"\
    \n        case \"c\":\n            result += \"C\"\n        case \"d\":\n    \
    \        result += \"D\"\n        case \"e\":\n            result += \"E\"\n \
    \       case \"f\":\n            result += \"F\"\n        case \"g\":\n      \
    \      result += \"G\"\n        case \"h\":\n            result += \"H\"\n   \
    \     case \"i\":\n            result += \"I\"\n        case \"j\":\n        \
    \    result += \"J\"\n        case \"k\":\n            result += \"K\"\n     \
    \   case \"l\":\n            result += \"L\"\n        case \"m\":\n          \
    \  result += \"M\"\n        case \"n\":\n            result += \"N\"\n       \
    \ case \"o\":\n            result += \"O\"\n        case \"p\":\n            result\
    \ += \"P\"\n        case \"q\":\n            result += \"Q\"\n        case \"\
    r\":\n            result += \"R\"\n        case \"s\":\n            result +=\
    \ \"S\"\n        case \"t\":\n            result += \"T\"\n        case \"u\"\
    :\n            result += \"U\"\n        case \"v\":\n            result += \"\
    V\"\n        case \"w\":\n            result += \"W\"\n        case \"x\":\n \
    \           result += \"X\"\n        case \"y\":\n            result += \"Y\"\n\
    \        case \"z\":\n            result += \"Z\"\n        default:\n        \
    \    result += char\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpicsuxq3_.swift:60:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += char\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        let upper = c.isUppercase\n\
    \        let lower = !upper\n        result += String(c.value)\n        if upper\
    \ != lower {\n            result += \"_\"\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpq5as42v3.swift:6:23: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        let upper = c.isUppercase\n               \
    \     ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        if c.isUppercase {\n   \
    \         result += c.value\n        } else {\n            result += c.value.lowercase()\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6rk53mmv.swift:6:14: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if c.isUppercase {\n           ~ ^~~~~~~~~~~\n\
    /tmp/tmp6rk53mmv.swift:7:25: error: cannot convert value of type 'UInt32' to expected\
    \ argument type 'String'\n            result += c.value\n                    \
    \    ^\n/tmp/tmp6rk53mmv.swift:9:31: error: value of type 'UInt32' has no member\
    \ 'lowercase'\n            result += c.value.lowercase()\n                   \
    \   ~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        if c.isUppercase {\n   \
    \         result += c.value\n        } else {\n            result += c.value.lowercased()\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpnh5glmz0.swift:6:14: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if c.isUppercase {\n           ~ ^~~~~~~~~~~\n\
    /tmp/tmpnh5glmz0.swift:7:25: error: cannot convert value of type 'UInt32' to expected\
    \ argument type 'String'\n            result += c.value\n                    \
    \    ^\n/tmp/tmpnh5glmz0.swift:9:31: error: value of type 'UInt32' has no member\
    \ 'lowercased'\n            result += c.value.lowercased()\n                 \
    \     ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        if c.isUppercase {\n   \
    \         result += c.value\n        } else {\n            result += c.value.lowercased()\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpnh5glmz0.swift:6:14: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if c.isUppercase {\n           ~ ^~~~~~~~~~~\n\
    /tmp/tmpnh5glmz0.swift:7:25: error: cannot convert value of type 'UInt32' to expected\
    \ argument type 'String'\n            result += c.value\n                    \
    \    ^\n/tmp/tmpnh5glmz0.swift:9:31: error: value of type 'UInt32' has no member\
    \ 'lowercased'\n            result += c.value.lowercased()\n                 \
    \     ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        if c.isUpper() {\n     \
    \       result += c.value\n        } else {\n            result += c.value.lowercased()\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpthzk1agu.swift:6:14: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUpper'\n        if c.isUpper() {\n           ~ ^~~~~~~\n/tmp/tmpthzk1agu.swift:7:25:\
    \ error: cannot convert value of type 'UInt32' to expected argument type 'String'\n\
    \            result += c.value\n                        ^\n/tmp/tmpthzk1agu.swift:9:31:\
    \ error: value of type 'UInt32' has no member 'lowercased'\n            result\
    \ += c.value.lowercased()\n                      ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string.unicodeScalars {\n        switch char {\n     \
    \   case .lowercase:\n            result += .uppercase\n        case .uppercase:\n\
    \            result += .lowercase\n        default:\n            result += char\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpiti7zood.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpiti7zood.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpiti7zood.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpiti7zood.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpiti7zood.swift:12:20:\
    \ error: operator function '+=' requires that 'Unicode.Scalar' conform to 'Sequence'\n\
    \            result += char\n                   ^\nSwift.RangeReplaceableCollection:4:35:\
    \ note: where 'Other' = 'Unicode.Scalar'\n    @inlinable public static func +=\
    \ <Other>(lhs: inout Self, rhs: Other) where Other : Sequence, Self.Element ==\
    \ Other.Element\n                                  ^\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += \"\\U\"\n        case .uppercase:\n     \
    \       result += c.value\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpi61tsj5w.swift:8:25: error: invalid escape sequence in literal\n\
    \            result += \"\\U\"\n                        ^\n/tmp/tmpi61tsj5w.swift:7:15:\
    \ error: type 'Unicode.Scalar' has no member 'lowercase'\n        case .lowercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpi61tsj5w.swift:9:15: error: type 'Unicode.Scalar'\
    \ has no member 'uppercase'\n        case .uppercase:\n             ~^~~~~~~~~\n\
    /tmp/tmpi61tsj5w.swift:10:25: error: cannot convert value of type 'UInt32' to\
    \ expected argument type 'String'\n            result += c.value\n           \
    \             ^\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        default:\n            result += c\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpy1p33y2o.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpy1p33y2o.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpy1p33y2o.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpy1p33y2o.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpy1p33y2o.swift:12:20:\
    \ error: operator function '+=' requires that 'Unicode.Scalar' conform to 'Sequence'\n\
    \            result += c\n                   ^\nSwift.RangeReplaceableCollection:4:35:\
    \ note: where 'Other' = 'Unicode.Scalar'\n    @inlinable public static func +=\
    \ <Other>(lhs: inout Self, rhs: Other) where Other : Sequence, Self.Element ==\
    \ Other.Element\n                                  ^\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string {\n        switch char {\n        case 'a':\n \
    \       case 'e':\n        case 'i':\n        case 'o':\n        case 'u':\n \
    \           result += 'A'\n        case 'b':\n        case 'f':\n        case\
    \ 'n':\n        case 'r':\n        case 't':\n            result += 'B'\n    \
    \    case 'c':\n        case 'm':\n        case 'p':\n        case 's':\n    \
    \        result += 'C'\n        case 'd':\n        case 'g':\n        case 'v':\n\
    \            result += 'D'\n        case 'e':\n        case 'j':\n        case\
    \ 'x':\n            result += 'E'\n        case 'f':\n        case 'h':\n    \
    \    case 'v':\n            result += 'F'\n        case 'g':\n        case 'j':\n\
    \        case 'x':\n            result += 'G'\n        case 'h':\n        case\
    \ 'v':\n            result += 'H'\n        case 'i':\n        case 'v':\n    \
    \        result += 'I'\n        case 'j':\n        case 'x':\n            result\
    \ += 'J'\n        case 'k':\n        case 'l':\n        case 'm':\n          \
    \  result += 'K'\n        case 'l':\n        case 'n':\n            result +=\
    \ 'L'\n        case 'm':\n        case 'n':\n            result += 'M'\n     \
    \   case 'o':\n        case 'p':\n            result += 'O'\n        case 'p':\n\
    \        case 'q':\n            result += 'P'\n        case 'r':\n        case\
    \ 's':\n            result += 'Q'\n        case 's':\n        case 't':\n    \
    \        result += 'R'\n        case 't':\n        case 'u':\n            result\
    \ += 'S'\n        case 'v':\n            result += 'T'\n        case 'w':\n  \
    \      case 'x':\n            result += 'U'\n        case 'x':\n        case 'y':\n\
    \            result += 'V'\n        case 'y':\n        case 'z':\n           \
    \ result += 'W'\n        case 'z':\n        case '0':\n            result += 'X'\n\
    \        case '0':\n        case '1':\n            result += 'Y'\n        case\
    \ '1':\n        case '2':\n            result += 'Z'\n        case '2':\n    \
    \    case '3':\n            result += '0'\n        case '3':\n        case '4':\n\
    \            result += '1'\n        case '4':\n        case '5':\n           \
    \ result += '2'\n        case '5':\n        case '6':\n            result += '3'\n\
    \        case '6':\n        case '7':\n            result += '4'\n        case\
    \ '7':\n        case '8':\n            result += '5'\n        case '8':\n    \
    \    case '9':\n            result += '6'\n        case '9':\n        case 'a':\n\
    \            result += 'A'\n        case '\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpos3je02r.swift:7:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmpos3je02r.swift:7:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case 'a':\n        ^~~~~~~~~\n                  break\n/tmp/tmpos3je02r.swift:8:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmpos3je02r.swift:8:9: error: 'case'\
    \ label in a 'switch' must have at least one executable statement\n        case\
    \ 'e':\n        ^~~~~~~~~\n                  break\n/tmp/tmpos3je02r.swift:9:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'i':\n   \
    \          ^~~\n             \"i\"\n/tmp/tmpos3je02r.swift:9:9: error: 'case'\
    \ label in a 'switch' must have at least one executable statement\n        case\
    \ 'i':\n        ^~~~~~~~~\n                  break\n/tmp/tmpos3je02r.swift:10:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'o':\n   \
    \          ^~~\n             \"o\"\n/tmp/tmpos3je02r.swift:10:9: error: 'case'\
    \ label in a 'switch' must have at least one executable statement\n        case\
    \ 'o':\n        ^~~~~~~~~\n                  break\n/tmp/tmpos3je02r.swift:11:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'u':\n   \
    \          ^~~\n             \"u\"\n/tmp/tmpos3je02r.swift:12:23: error: single-quoted\
    \ string literal found, use '\"'\n            result += 'A'\n                \
    \      ^~~\n                      \"A\"\n/tmp/tmpos3je02r.swift:13:14: error:\
    \ single-quoted string literal found, use '\"'\n        case 'b':\n          \
    \   ^~~\n             \"b\"\n/tmp/tmpos3je02r.swift:13:9: error: 'case' label\
    \ in a 'switch' must have at least one executable statement\n        case 'b':\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpos3je02r.swift:14:14: error:\
    \ single-quoted string literal found, use '\"'\n        case 'f':\n          \
    \   ^~~\n             \"f\"\n/tmp/tmpos3je02r.swift:14:9: error: 'case' label\
    \ in a 'switch' must have at least one executable statement\n        case 'f':\n\
    \    "
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string {\n        switch char {\n        case 'a':\n \
    \           result += \"A\"\n        case 'b':\n            result += \"B\"\n\
    \        case 'c':\n            result += \"C\"\n        case 'd':\n         \
    \   result += \"D\"\n        case 'e':\n            result += \"E\"\n        case\
    \ 'f':\n            result += \"F\"\n        case 'g':\n            result +=\
    \ \"G\"\n        case 'h':\n            result += \"H\"\n        case 'i':\n \
    \           result += \"I\"\n        case 'j':\n            result += \"J\"\n\
    \        case 'k':\n            result += \"K\"\n        case 'l':\n         \
    \   result += \"L\"\n        case 'm':\n            result += \"M\"\n        case\
    \ 'n':\n            result += \"N\"\n        case 'o':\n            result +=\
    \ \"O\"\n        case 'p':\n            result += \"P\"\n        case 'q':\n \
    \           result += \"Q\"\n        case 'r':\n            result += \"R\"\n\
    \        case 's':\n            result += \"S\"\n        case 't':\n         \
    \   result += \"T\"\n        case 'u':\n            result += \"U\"\n        case\
    \ 'v':\n            result += \"V\"\n        case 'w':\n            result +=\
    \ \"W\"\n        case 'x':\n            result += \"X\"\n        case 'y':\n \
    \           result += \"Y\"\n        case 'z':\n            result += \"Z\"\n\
    \        default:\n            result += char\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp3o533b_w.swift:7:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp3o533b_w.swift:9:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp3o533b_w.swift:11:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp3o533b_w.swift:13:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp3o533b_w.swift:15:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp3o533b_w.swift:17:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp3o533b_w.swift:19:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp3o533b_w.swift:21:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp3o533b_w.swift:23:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp3o533b_w.swift:25:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp3o533b_w.swift:27:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp3o533b_w.swift:29:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp3o533b_w.swift:31:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp3o533b_w.swift:33:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp3o533b_w.swift:35:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp3o533b_w.swift:37:14: error: single-quoted stri"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        if c.isUppercase {\n   \
    \         result += c.value\n        } else {\n            result += c.value.lowercased()\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpnh5glmz0.swift:6:14: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if c.isUppercase {\n           ~ ^~~~~~~~~~~\n\
    /tmp/tmpnh5glmz0.swift:7:25: error: cannot convert value of type 'UInt32' to expected\
    \ argument type 'String'\n            result += c.value\n                    \
    \    ^\n/tmp/tmpnh5glmz0.swift:9:31: error: value of type 'UInt32' has no member\
    \ 'lowercased'\n            result += c.value.lowercased()\n                 \
    \     ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string.unicodeScalars {\n        switch char {\n     \
    \   case .lowercase:\n            result += .uppercase\n        case .uppercase:\n\
    \            result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpkxmhds8p.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpkxmhds8p.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpkxmhds8p.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpkxmhds8p.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        let upper = c.isUppercase\n\
    \        let lower = c.isLowercase\n        if upper && !lower {\n           \
    \ result += c.value\n        } else if lower && !upper {\n            result +=\
    \ c.value.lowercased()\n        } else {\n            result += c.value\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpgkgt713s.swift:6:23: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        let upper = c.isUppercase\n               \
    \     ~ ^~~~~~~~~~~\n/tmp/tmpgkgt713s.swift:7:23: error: value of type 'Unicode.Scalar'\
    \ has no member 'isLowercase'\n        let lower = c.isLowercase\n           \
    \         ~ ^~~~~~~~~~~\n/tmp/tmpgkgt713s.swift:9:25: error: cannot convert value\
    \ of type 'UInt32' to expected argument type 'String'\n            result += c.value\n\
    \                        ^\n/tmp/tmpgkgt713s.swift:11:31: error: value of type\
    \ 'UInt32' has no member 'lowercased'\n            result += c.value.lowercased()\n\
    \                      ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpgkgt713s.swift:13:25: error:\
    \ cannot convert value of type 'UInt32' to expected argument type 'String'\n \
    \           result += c.value\n                        ^\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += \"\\U\"\n        case .uppercase:\n     \
    \       result += c.value\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpi61tsj5w.swift:8:25: error: invalid escape sequence in literal\n\
    \            result += \"\\U\"\n                        ^\n/tmp/tmpi61tsj5w.swift:7:15:\
    \ error: type 'Unicode.Scalar' has no member 'lowercase'\n        case .lowercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpi61tsj5w.swift:9:15: error: type 'Unicode.Scalar'\
    \ has no member 'uppercase'\n        case .uppercase:\n             ~^~~~~~~~~\n\
    /tmp/tmpi61tsj5w.swift:10:25: error: cannot convert value of type 'UInt32' to\
    \ expected argument type 'String'\n            result += c.value\n           \
    \             ^\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += \"\\U\"\n        case .uppercase:\n     \
    \       result += \"\\L\"\n        default:\n            result += String(c)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpa11gvu6h.swift:8:25: error: invalid escape sequence in literal\n\
    \            result += \"\\U\"\n                        ^\n/tmp/tmpa11gvu6h.swift:10:25:\
    \ error: invalid escape sequence in literal\n            result += \"\\L\"\n \
    \                       ^\n/tmp/tmpa11gvu6h.swift:7:15: error: type 'Unicode.Scalar'\
    \ has no member 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n\
    /tmp/tmpa11gvu6h.swift:9:15: error: type 'Unicode.Scalar' has no member 'uppercase'\n\
    \        case .uppercase:\n             ~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string {\n        if char >= 'a' && char <= 'z' {\n  \
    \          result += char.uppercased()\n        } else {\n            result +=\
    \ char\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp2uz2t5s6.swift:6:20: error: single-quoted string literal found,\
    \ use '\"'\n        if char >= 'a' && char <= 'z' {\n                   ^~~\n\
    \                   \"a\"\n/tmp/tmp2uz2t5s6.swift:6:35: error: single-quoted string\
    \ literal found, use '\"'\n        if char >= 'a' && char <= 'z' {\n         \
    \                         ^~~\n                                  \"z\"\n/tmp/tmp2uz2t5s6.swift:9:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c.value {\n     \
    \   case 0x0041:\n            result += \"A\"\n        case 0x0042:\n        \
    \    result += \"B\"\n        case 0x0043:\n            result += \"C\"\n    \
    \    case 0x0044:\n            result += \"D\"\n        case 0x0045:\n       \
    \     result += \"E\"\n        case 0x0046:\n            result += \"F\"\n   \
    \     case 0x0047:\n            result += \"G\"\n        case 0x0048:\n      \
    \      result += \"H\"\n        case 0x0049:\n            result += \"I\"\n  \
    \      case 0x004A:\n            result += \"J\"\n        case 0x004B:\n     \
    \       result += \"K\"\n        case 0x004C:\n            result += \"L\"\n \
    \       case 0x004D:\n            result += \"M\"\n        case 0x004E:\n    \
    \        result += \"N\"\n        case 0x004F:\n            result += \"O\"\n\
    \        case 0x0050:\n            result += \"P\"\n        case 0x0051:\n   \
    \         result += \"Q\"\n        case 0x0052:\n            result += \"R\"\n\
    \        case 0x0053:\n            result += \"S\"\n        case 0x0054:\n   \
    \         result += \"T\"\n        case 0x0055:\n            result += \"U\"\n\
    \        case 0x0056:\n            result += \"V\"\n        case 0x0057:\n   \
    \         result += \"W\"\n        case 0x0058:\n            result += \"X\"\n\
    \        case 0x0059:\n            result += \"Y\"\n        case 0x005A:\n   \
    \         result += \"Z\"\n        case 0x005B:\n            result += \"a\"\n\
    \        case 0x005C:\n            result += \"b\"\n        case 0x005D:\n   \
    \         result += \"c\"\n        case 0x005E:\n            result += \"d\"\n\
    \        case 0x005F:\n            result += \"e\"\n        case 0x0060:\n   \
    \         result += \"f\"\n        case 0x0061:\n            result += \"g\"\n\
    \        case 0x0062:\n            result += \"h\"\n        case 0x0063:\n   \
    \         result += \"i\"\n        case 0x0064:\n            result += \"j\"\n\
    \        case 0x0065:\n            result += \"k\"\n        case 0x0066:\n   \
    \         result += \"l\"\n        case 0x0067:\n            result += \"m\"\n\
    \        case 0x0068:\n            result += \"n\"\n        case 0x0069:\n   \
    \         result += \"o\"\n        case 0x006A:\n            result += \"p\"\n\
    \        case 0x006B:\n            result += \"q\"\n        case 0x006C:\n   \
    \         result += \"r\"\n        case 0x006D:\n            result += \"s\"\n\
    \        case 0x006E:\n            \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpkk06x2_b.swift:97:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case 0x006E:\n        ^~~~~~~~~~~~\n\
    \                     break\n/tmp/tmpkk06x2_b.swift:116:116: error: expected '}'\
    \ at end of brace statement\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n    \
    \                                                                            \
    \                                   ^\n/tmp/tmpkk06x2_b.swift:5:36: note: to match\
    \ this opening '{'\n    for c in string.unicodeScalars {\n                   \
    \                ^\n/tmp/tmpkk06x2_b.swift:116:116: error: expected '}' at end\
    \ of brace statement\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n                 \
    \                                                                            \
    \                      ^\n/tmp/tmpkk06x2_b.swift:3:42: note: to match this opening\
    \ '{'\nfunc flip_case(string: String) -> String {\n                          \
    \               ^\n/tmp/tmpkk06x2_b.swift:6:9: error: switch must be exhaustive\n\
    \        switch c.value {\n        ^\n/tmp/tmpkk06x2_b.swift:6:9: note: do you\
    \ want to add a default clause?\n        switch c.value {\n        ^\n/tmp/tmpkk06x2_b.swift:102:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        if let _ = c.isUppercase\
    \ {\n            result += c.value\n        } else {\n            result += c.value.lowercased()\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpxwkr5jp0.swift:6:22: error: type of expression is ambiguous without\
    \ more context\n        if let _ = c.isUppercase {\n                   ~~^~~~~~~~~~~\n\
    /tmp/tmpxwkr5jp0.swift:7:25: error: cannot convert value of type 'UInt32' to expected\
    \ argument type 'String'\n            result += c.value\n                    \
    \    ^\n/tmp/tmpxwkr5jp0.swift:9:31: error: value of type 'UInt32' has no member\
    \ 'lowercased'\n            result += c.value.lowercased()\n                 \
    \     ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string {\n        switch char {\n        case 'a':\n \
    \           result += \"A\"\n        case 'b':\n            result += \"B\"\n\
    \        case 'c':\n            result += \"C\"\n        case 'd':\n         \
    \   result += \"D\"\n        case 'e':\n            result += \"E\"\n        case\
    \ 'f':\n            result += \"F\"\n        case 'g':\n            result +=\
    \ \"G\"\n        case 'h':\n            result += \"H\"\n        case 'i':\n \
    \           result += \"I\"\n        case 'j':\n            result += \"J\"\n\
    \        case 'k':\n            result += \"K\"\n        case 'l':\n         \
    \   result += \"L\"\n        case 'm':\n            result += \"M\"\n        case\
    \ 'n':\n            result += \"N\"\n        case 'o':\n            result +=\
    \ \"O\"\n        case 'p':\n            result += \"P\"\n        case 'q':\n \
    \           result += \"Q\"\n        case 'r':\n            result += \"R\"\n\
    \        case 's':\n            result += \"S\"\n        case 't':\n         \
    \   result += \"T\"\n        case 'u':\n            result += \"U\"\n        case\
    \ 'v':\n            result += \"V\"\n        case 'w':\n            result +=\
    \ \"W\"\n        case 'x':\n            result += \"X\"\n        case 'y':\n \
    \           result += \"Y\"\n        case 'z':\n            result += \"Z\"\n\
    \        default:\n            result += char\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp3o533b_w.swift:7:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp3o533b_w.swift:9:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp3o533b_w.swift:11:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp3o533b_w.swift:13:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp3o533b_w.swift:15:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp3o533b_w.swift:17:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp3o533b_w.swift:19:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp3o533b_w.swift:21:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp3o533b_w.swift:23:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp3o533b_w.swift:25:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp3o533b_w.swift:27:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp3o533b_w.swift:29:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp3o533b_w.swift:31:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp3o533b_w.swift:33:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp3o533b_w.swift:35:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp3o533b_w.swift:37:14: error: single-quoted stri"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        let cc = c.value\n     \
    \   if cc >= 0x41 && cc <= 0x5A {\n            cc = cc * 2 + 0x20\n        }\n\
    \        result = result + String(cc)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp5iv0vxel.swift:8:13: error: cannot assign to value: 'cc' is a 'let'\
    \ constant\n            cc = cc * 2 + 0x20\n            ^~\n/tmp/tmp5iv0vxel.swift:6:9:\
    \ note: change 'let' to 'var' to make it mutable\n        let cc = c.value\n \
    \       ^~~\n        var\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string {\n        if char >= 'a' && char <= 'z' {\n  \
    \          result += 'A'\n        }\n        if char >= 'A' && char <= 'Z' {\n\
    \            result += 'a'\n        }\n        result += char\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(flip_case(string: \"\
    \") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmprkucm9xb.swift:6:20: error: single-quoted string literal found,\
    \ use '\"'\n        if char >= 'a' && char <= 'z' {\n                   ^~~\n\
    \                   \"a\"\n/tmp/tmprkucm9xb.swift:6:35: error: single-quoted string\
    \ literal found, use '\"'\n        if char >= 'a' && char <= 'z' {\n         \
    \                         ^~~\n                                  \"z\"\n/tmp/tmprkucm9xb.swift:7:23:\
    \ error: single-quoted string literal found, use '\"'\n            result += 'A'\n\
    \                      ^~~\n                      \"A\"\n/tmp/tmprkucm9xb.swift:9:20:\
    \ error: single-quoted string literal found, use '\"'\n        if char >= 'A'\
    \ && char <= 'Z' {\n                   ^~~\n                   \"A\"\n/tmp/tmprkucm9xb.swift:9:35:\
    \ error: single-quoted string literal found, use '\"'\n        if char >= 'A'\
    \ && char <= 'Z' {\n                                  ^~~\n                  \
    \                \"Z\"\n/tmp/tmprkucm9xb.swift:10:23: error: single-quoted string\
    \ literal found, use '\"'\n            result += 'a'\n                      ^~~\n\
    \                      \"a\"\n/tmp/tmprkucm9xb.swift:12:19: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n        result\
    \ += char\n                  ^\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c.value {\n     \
    \   case .lowercase:\n            result += \"\\U\"\n        case .uppercase:\n\
    \            result += c.value\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp20z_qsh9.swift:8:25: error: invalid escape sequence in literal\n\
    \            result += \"\\U\"\n                        ^\n/tmp/tmp20z_qsh9.swift:7:15:\
    \ error: type 'UInt32' has no member 'lowercase'\n        case .lowercase:\n \
    \            ~^~~~~~~~~\n/tmp/tmp20z_qsh9.swift:9:15: error: type 'UInt32' has\
    \ no member 'uppercase'\n        case .uppercase:\n             ~^~~~~~~~~\n/tmp/tmp20z_qsh9.swift:10:25:\
    \ error: cannot convert value of type 'UInt32' to expected argument type 'String'\n\
    \            result += c.value\n                        ^\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c.value {\n     \
    \   case 0x41:\n            result += \"A\"\n        case 0x42:\n            result\
    \ += \"B\"\n        case 0x43:\n            result += \"C\"\n        case 0x44:\n\
    \            result += \"D\"\n        case 0x45:\n            result += \"E\"\n\
    \        case 0x46:\n            result += \"F\"\n        case 0x47:\n       \
    \     result += \"G\"\n        case 0x48:\n            result += \"H\"\n     \
    \   case 0x49:\n            result += \"I\"\n        case 0x4A:\n            result\
    \ += \"J\"\n        case 0x4B:\n            result += \"K\"\n        case 0x4C:\n\
    \            result += \"L\"\n        case 0x4D:\n            result += \"M\"\n\
    \        case 0x4E:\n            result += \"N\"\n        case 0x4F:\n       \
    \     result += \"O\"\n        case 0x50:\n            result += \"P\"\n     \
    \   case 0x51:\n            result += \"Q\"\n        case 0x52:\n            result\
    \ += \"R\"\n        case 0x53:\n            result += \"S\"\n        case 0x54:\n\
    \            result += \"T\"\n        case 0x55:\n            result += \"U\"\n\
    \        case 0x56:\n            result += \"V\"\n        case 0x57:\n       \
    \     result += \"W\"\n        case 0x58:\n            result += \"X\"\n     \
    \   case 0x59:\n            result += \"Y\"\n        case 0x5A:\n            result\
    \ += \"Z\"\n        case 0x5B:\n            result += \"a\"\n        case 0x5C:\n\
    \            result += \"b\"\n        case 0x5D:\n            result += \"c\"\n\
    \        case 0x5E:\n            result += \"d\"\n        case 0x5F:\n       \
    \     result += \"e\"\n        case 0x60:\n            result += \"f\"\n     \
    \   case 0x61:\n            result += \"g\"\n        case 0x62:\n            result\
    \ += \"h\"\n        case 0x63:\n            result += \"i\"\n        case 0x64:\n\
    \            result += \"j\"\n        case 0x65:\n            result += \"k\"\n\
    \        case 0x66:\n            result += \"l\"\n        case 0x67:\n       \
    \     result += \"m\"\n        case 0x68:\n            result += \"n\"\n     \
    \   case 0x69:\n            result += \"o\"\n        case 0x6A:\n            result\
    \ += \"p\"\n        case 0x6B:\n            result += \"q\"\n        case 0x6C:\n\
    \            result += \"r\"\n        case 0x6D:\n            result += \"s\"\n\
    \        case 0x6E:\n            \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpsep0reiq.swift:97:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case 0x6E:\n        ^~~~~~~~~~\n\
    \                   break\n/tmp/tmpsep0reiq.swift:116:116: error: expected '}'\
    \ at end of brace statement\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n    \
    \                                                                            \
    \                                   ^\n/tmp/tmpsep0reiq.swift:5:36: note: to match\
    \ this opening '{'\n    for c in string.unicodeScalars {\n                   \
    \                ^\n/tmp/tmpsep0reiq.swift:116:116: error: expected '}' at end\
    \ of brace statement\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n                 \
    \                                                                            \
    \                      ^\n/tmp/tmpsep0reiq.swift:3:42: note: to match this opening\
    \ '{'\nfunc flip_case(string: String) -> String {\n                          \
    \               ^\n/tmp/tmpsep0reiq.swift:6:9: error: switch must be exhaustive\n\
    \        switch c.value {\n        ^\n/tmp/tmpsep0reiq.swift:6:9: note: do you\
    \ want to add a default clause?\n        switch c.value {\n        ^\n/tmp/tmpsep0reiq.swift:102:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        if c.value > 128 {\n   \
    \         result += String(c.value - 32)\n        } else {\n            result\
    \ += String(c.value)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmp54_l99y4/tmp54_l99y4.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af89a0dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af899dd1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af899dd1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af899dd07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp54_l99y4                        0x00005621478ab715 <unavailable> + 5909

    5    libc.so.6                          0x00002af89a2c6460 __libc_start_main +
    245

    6    tmp54_l99y4                        0x00005621478ab269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string {\n        switch char {\n        case \"A\":\n\
    \            result += \"a\"\n        case \"B\":\n            result += \"b\"\
    \n        case \"C\":\n            result += \"c\"\n        case \"D\":\n    \
    \        result += \"d\"\n        case \"E\":\n            result += \"e\"\n \
    \       case \"F\":\n            result += \"f\"\n        case \"G\":\n      \
    \      result += \"g\"\n        case \"H\":\n            result += \"h\"\n   \
    \     case \"I\":\n            result += \"i\"\n        case \"J\":\n        \
    \    result += \"j\"\n        case \"K\":\n            result += \"k\"\n     \
    \   case \"L\":\n            result += \"l\"\n        case \"M\":\n          \
    \  result += \"m\"\n        case \"N\":\n            result += \"n\"\n       \
    \ case \"O\":\n            result += \"o\"\n        case \"P\":\n            result\
    \ += \"p\"\n        case \"Q\":\n            result += \"q\"\n        case \"\
    R\":\n            result += \"r\"\n        case \"S\":\n            result +=\
    \ \"s\"\n        case \"T\":\n            result += \"t\"\n        case \"U\"\
    :\n            result += \"u\"\n        case \"V\":\n            result += \"\
    v\"\n        case \"W\":\n            result += \"w\"\n        case \"X\":\n \
    \           result += \"x\"\n        case \"Y\":\n            result += \"y\"\n\
    \        case \"Z\":\n            result += \"z\"\n        default:\n        \
    \    result += char\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp5xqx3lu3.swift:60:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += char\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c.value {\n     \
    \   case 0x41:\n            result += \"A\"\n        case 0x42:\n            result\
    \ += \"B\"\n        case 0x43:\n            result += \"C\"\n        case 0x44:\n\
    \            result += \"D\"\n        case 0x45:\n            result += \"E\"\n\
    \        case 0x46:\n            result += \"F\"\n        case 0x47:\n       \
    \     result += \"G\"\n        case 0x48:\n            result += \"H\"\n     \
    \   case 0x49:\n            result += \"I\"\n        case 0x4A:\n            result\
    \ += \"J\"\n        case 0x4B:\n            result += \"K\"\n        case 0x4C:\n\
    \            result += \"L\"\n        case 0x4D:\n            result += \"M\"\n\
    \        case 0x4E:\n            result += \"N\"\n        case 0x4F:\n       \
    \     result += \"O\"\n        case 0x50:\n            result += \"P\"\n     \
    \   case 0x51:\n            result += \"Q\"\n        case 0x52:\n            result\
    \ += \"R\"\n        case 0x53:\n            result += \"S\"\n        case 0x54:\n\
    \            result += \"T\"\n        case 0x55:\n            result += \"U\"\n\
    \        case 0x56:\n            result += \"V\"\n        case 0x57:\n       \
    \     result += \"W\"\n        case 0x58:\n            result += \"X\"\n     \
    \   case 0x59:\n            result += \"Y\"\n        case 0x5A:\n            result\
    \ += \"Z\"\n        case 0x5B:\n            result += \"a\"\n        case 0x5C:\n\
    \            result += \"b\"\n        case 0x5D:\n            result += \"c\"\n\
    \        case 0x5E:\n            result += \"d\"\n        case 0x5F:\n       \
    \     result += \"e\"\n        case 0x60:\n            result += \"f\"\n     \
    \   case 0x61:\n            result += \"g\"\n        case 0x62:\n            result\
    \ += \"h\"\n        case 0x63:\n            result += \"i\"\n        case 0x64:\n\
    \            result += \"j\"\n        case 0x65:\n            result += \"k\"\n\
    \        case 0x66:\n            result += \"l\"\n        case 0x67:\n       \
    \     result += \"m\"\n        case 0x68:\n            result += \"n\"\n     \
    \   case 0x69:\n            result += \"o\"\n        case 0x6A:\n            result\
    \ += \"p\"\n        case 0x6B:\n            result += \"q\"\n        case 0x6C:\n\
    \            result += \"r\"\n        case 0x6D:\n            result += \"s\"\n\
    \        case 0x6E:\n            \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpsep0reiq.swift:97:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case 0x6E:\n        ^~~~~~~~~~\n\
    \                   break\n/tmp/tmpsep0reiq.swift:116:116: error: expected '}'\
    \ at end of brace statement\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n    \
    \                                                                            \
    \                                   ^\n/tmp/tmpsep0reiq.swift:5:36: note: to match\
    \ this opening '{'\n    for c in string.unicodeScalars {\n                   \
    \                ^\n/tmp/tmpsep0reiq.swift:116:116: error: expected '}' at end\
    \ of brace statement\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n                 \
    \                                                                            \
    \                      ^\n/tmp/tmpsep0reiq.swift:3:42: note: to match this opening\
    \ '{'\nfunc flip_case(string: String) -> String {\n                          \
    \               ^\n/tmp/tmpsep0reiq.swift:6:9: error: switch must be exhaustive\n\
    \        switch c.value {\n        ^\n/tmp/tmpsep0reiq.swift:6:9: note: do you\
    \ want to add a default clause?\n        switch c.value {\n        ^\n/tmp/tmpsep0reiq.swift:102:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        if c.isUpper() {\n     \
    \       result += c.value\n        } else {\n            result += c.value.lowercased()\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpthzk1agu.swift:6:14: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUpper'\n        if c.isUpper() {\n           ~ ^~~~~~~\n/tmp/tmpthzk1agu.swift:7:25:\
    \ error: cannot convert value of type 'UInt32' to expected argument type 'String'\n\
    \            result += c.value\n                        ^\n/tmp/tmpthzk1agu.swift:9:31:\
    \ error: value of type 'UInt32' has no member 'lowercased'\n            result\
    \ += c.value.lowercased()\n                      ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += \"\\U\"\n        case .uppercase:\n     \
    \       result += c.value\n        default:\n            result += c.value\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpg2ubat1t.swift:8:25: error: invalid escape sequence in literal\n\
    \            result += \"\\U\"\n                        ^\n/tmp/tmpg2ubat1t.swift:7:15:\
    \ error: type 'Unicode.Scalar' has no member 'lowercase'\n        case .lowercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpg2ubat1t.swift:9:15: error: type 'Unicode.Scalar'\
    \ has no member 'uppercase'\n        case .uppercase:\n             ~^~~~~~~~~\n\
    /tmp/tmpg2ubat1t.swift:10:25: error: cannot convert value of type 'UInt32' to\
    \ expected argument type 'String'\n            result += c.value\n           \
    \             ^\n/tmp/tmpg2ubat1t.swift:12:25: error: cannot convert value of\
    \ type 'UInt32' to expected argument type 'String'\n            result += c.value\n\
    \                        ^\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c.value {\n     \
    \   case 0x41:\n            result += \"A\"\n        case 0x42:\n            result\
    \ += \"B\"\n        case 0x43:\n            result += \"C\"\n        case 0x44:\n\
    \            result += \"D\"\n        case 0x45:\n            result += \"E\"\n\
    \        case 0x46:\n            result += \"F\"\n        case 0x47:\n       \
    \     result += \"G\"\n        case 0x48:\n            result += \"H\"\n     \
    \   case 0x49:\n            result += \"I\"\n        case 0x4A:\n            result\
    \ += \"J\"\n        case 0x4B:\n            result += \"K\"\n        case 0x4C:\n\
    \            result += \"L\"\n        case 0x4D:\n            result += \"M\"\n\
    \        case 0x4E:\n            result += \"N\"\n        case 0x4F:\n       \
    \     result += \"O\"\n        case 0x50:\n            result += \"P\"\n     \
    \   case 0x51:\n            result += \"Q\"\n        case 0x52:\n            result\
    \ += \"R\"\n        case 0x53:\n            result += \"S\"\n        case 0x54:\n\
    \            result += \"T\"\n        case 0x55:\n            result += \"U\"\n\
    \        case 0x56:\n            result += \"V\"\n        case 0x57:\n       \
    \     result += \"W\"\n        case 0x58:\n            result += \"X\"\n     \
    \   case 0x59:\n            result += \"Y\"\n        case 0x5A:\n            result\
    \ += \"Z\"\n        case 0x5B:\n            result += \"a\"\n        case 0x5C:\n\
    \            result += \"b\"\n        case 0x5D:\n            result += \"c\"\n\
    \        case 0x5E:\n            result += \"d\"\n        case 0x5F:\n       \
    \     result += \"e\"\n        case 0x60:\n            result += \"f\"\n     \
    \   case 0x61:\n            result += \"g\"\n        case 0x62:\n            result\
    \ += \"h\"\n        case 0x63:\n            result += \"i\"\n        case 0x64:\n\
    \            result += \"j\"\n        case 0x65:\n            result += \"k\"\n\
    \        case 0x66:\n            result += \"l\"\n        case 0x67:\n       \
    \     result += \"m\"\n        case 0x68:\n            result += \"n\"\n     \
    \   case 0x69:\n            result += \"o\"\n        case 0x6A:\n            result\
    \ += \"p\"\n        case 0x6B:\n            result += \"q\"\n        case 0x6C:\n\
    \            result += \"r\"\n        case 0x6D:\n            result += \"s\"\n\
    \        case 0x6E:\n            \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpsep0reiq.swift:97:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case 0x6E:\n        ^~~~~~~~~~\n\
    \                   break\n/tmp/tmpsep0reiq.swift:116:116: error: expected '}'\
    \ at end of brace statement\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n    \
    \                                                                            \
    \                                   ^\n/tmp/tmpsep0reiq.swift:5:36: note: to match\
    \ this opening '{'\n    for c in string.unicodeScalars {\n                   \
    \                ^\n/tmp/tmpsep0reiq.swift:116:116: error: expected '}' at end\
    \ of brace statement\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n                 \
    \                                                                            \
    \                      ^\n/tmp/tmpsep0reiq.swift:3:42: note: to match this opening\
    \ '{'\nfunc flip_case(string: String) -> String {\n                          \
    \               ^\n/tmp/tmpsep0reiq.swift:6:9: error: switch must be exhaustive\n\
    \        switch c.value {\n        ^\n/tmp/tmpsep0reiq.swift:6:9: note: do you\
    \ want to add a default clause?\n        switch c.value {\n        ^\n/tmp/tmpsep0reiq.swift:102:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        default:\n            result += c\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpy1p33y2o.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpy1p33y2o.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpy1p33y2o.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpy1p33y2o.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpy1p33y2o.swift:12:20:\
    \ error: operator function '+=' requires that 'Unicode.Scalar' conform to 'Sequence'\n\
    \            result += c\n                   ^\nSwift.RangeReplaceableCollection:4:35:\
    \ note: where 'Other' = 'Unicode.Scalar'\n    @inlinable public static func +=\
    \ <Other>(lhs: inout Self, rhs: Other) where Other : Sequence, Self.Element ==\
    \ Other.Element\n                                  ^\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        if c.isUppercase {\n   \
    \         result += c.value\n        } else {\n            result += c.value.lowercase()\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6rk53mmv.swift:6:14: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if c.isUppercase {\n           ~ ^~~~~~~~~~~\n\
    /tmp/tmp6rk53mmv.swift:7:25: error: cannot convert value of type 'UInt32' to expected\
    \ argument type 'String'\n            result += c.value\n                    \
    \    ^\n/tmp/tmp6rk53mmv.swift:9:31: error: value of type 'UInt32' has no member\
    \ 'lowercase'\n            result += c.value.lowercase()\n                   \
    \   ~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string {\n        switch char {\n        case 'a':\n \
    \           result += \"A\"\n        case 'b':\n            result += \"B\"\n\
    \        case 'c':\n            result += \"C\"\n        case 'd':\n         \
    \   result += \"D\"\n        case 'e':\n            result += \"E\"\n        case\
    \ 'f':\n            result += \"F\"\n        case 'g':\n            result +=\
    \ \"G\"\n        case 'h':\n            result += \"H\"\n        case 'i':\n \
    \           result += \"I\"\n        case 'j':\n            result += \"J\"\n\
    \        case 'k':\n            result += \"K\"\n        case 'l':\n         \
    \   result += \"L\"\n        case 'm':\n            result += \"M\"\n        case\
    \ 'n':\n            result += \"N\"\n        case 'o':\n            result +=\
    \ \"O\"\n        case 'p':\n            result += \"P\"\n        case 'q':\n \
    \           result += \"Q\"\n        case 'r':\n            result += \"R\"\n\
    \        case 's':\n            result += \"S\"\n        case 't':\n         \
    \   result += \"T\"\n        case 'u':\n            result += \"U\"\n        case\
    \ 'v':\n            result += \"V\"\n        case 'w':\n            result +=\
    \ \"W\"\n        case 'x':\n            result += \"X\"\n        case 'y':\n \
    \           result += \"Y\"\n        case 'z':\n            result += \"Z\"\n\
    \        default:\n            result += char\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp3o533b_w.swift:7:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp3o533b_w.swift:9:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp3o533b_w.swift:11:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp3o533b_w.swift:13:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp3o533b_w.swift:15:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp3o533b_w.swift:17:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp3o533b_w.swift:19:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp3o533b_w.swift:21:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp3o533b_w.swift:23:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp3o533b_w.swift:25:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp3o533b_w.swift:27:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp3o533b_w.swift:29:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp3o533b_w.swift:31:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp3o533b_w.swift:33:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp3o533b_w.swift:35:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp3o533b_w.swift:37:14: error: single-quoted stri"
  stdout: ''
  timestamp: 1659978991
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        let uc = c.value\n     \
    \   if uc >= 65 && uc <= 90 { // A..Z\n            result += String(uc - 32).uppercased()\n\
    \        } else if uc >= 97 && uc <= 122 { // a..z\n            result += String(uc\
    \ - 32).lowercased()\n        } else {\n            result += String(c)\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmp80jec2u8/tmp80jec2u8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b465d649c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b465d340b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b465d340988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b465d33f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp80jec2u8                        0x0000563682408815 <unavailable> + 6165

    5    libc.so.6                          0x00002b465d835460 __libc_start_main +
    245

    6    tmp80jec2u8                        0x0000563682408369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string {\n        switch char {\n        case 'a':\n \
    \           result += \"A\"\n        case 'b':\n            result += \"B\"\n\
    \        case 'c':\n            result += \"C\"\n        case 'd':\n         \
    \   result += \"D\"\n        case 'e':\n            result += \"E\"\n        case\
    \ 'f':\n            result += \"F\"\n        case 'g':\n            result +=\
    \ \"G\"\n        case 'h':\n            result += \"H\"\n        case 'i':\n \
    \           result += \"I\"\n        case 'j':\n            result += \"J\"\n\
    \        case 'k':\n            result += \"K\"\n        case 'l':\n         \
    \   result += \"L\"\n        case 'm':\n            result += \"M\"\n        case\
    \ 'n':\n            result += \"N\"\n        case 'o':\n            result +=\
    \ \"O\"\n        case 'p':\n            result += \"P\"\n        case 'q':\n \
    \           result += \"Q\"\n        case 'r':\n            result += \"R\"\n\
    \        case 's':\n            result += \"S\"\n        case 't':\n         \
    \   result += \"T\"\n        case 'u':\n            result += \"U\"\n        case\
    \ 'v':\n            result += \"V\"\n        case 'w':\n            result +=\
    \ \"W\"\n        case 'x':\n            result += \"X\"\n        case 'y':\n \
    \           result += \"Y\"\n        case 'z':\n            result += \"Z\"\n\
    \        default:\n            result += char\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp3o533b_w.swift:7:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp3o533b_w.swift:9:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp3o533b_w.swift:11:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp3o533b_w.swift:13:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp3o533b_w.swift:15:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp3o533b_w.swift:17:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp3o533b_w.swift:19:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp3o533b_w.swift:21:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp3o533b_w.swift:23:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp3o533b_w.swift:25:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp3o533b_w.swift:27:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp3o533b_w.swift:29:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp3o533b_w.swift:31:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp3o533b_w.swift:33:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp3o533b_w.swift:35:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp3o533b_w.swift:37:14: error: single-quoted stri"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        if c.isUppercase {\n   \
    \         result += c.value\n        } else {\n            result += c.value.lowercase()\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6rk53mmv.swift:6:14: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if c.isUppercase {\n           ~ ^~~~~~~~~~~\n\
    /tmp/tmp6rk53mmv.swift:7:25: error: cannot convert value of type 'UInt32' to expected\
    \ argument type 'String'\n            result += c.value\n                    \
    \    ^\n/tmp/tmp6rk53mmv.swift:9:31: error: value of type 'UInt32' has no member\
    \ 'lowercase'\n            result += c.value.lowercase()\n                   \
    \   ~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        if c.isUppercase {\n   \
    \         result += c.value\n        } else {\n            result += c.value.lowercase()\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6rk53mmv.swift:6:14: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if c.isUppercase {\n           ~ ^~~~~~~~~~~\n\
    /tmp/tmp6rk53mmv.swift:7:25: error: cannot convert value of type 'UInt32' to expected\
    \ argument type 'String'\n            result += c.value\n                    \
    \    ^\n/tmp/tmp6rk53mmv.swift:9:31: error: value of type 'UInt32' has no member\
    \ 'lowercase'\n            result += c.value.lowercase()\n                   \
    \   ~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        if c.isUppercase {\n   \
    \         result += c.value\n        } else {\n            result += c.value.lowercase()\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6rk53mmv.swift:6:14: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if c.isUppercase {\n           ~ ^~~~~~~~~~~\n\
    /tmp/tmp6rk53mmv.swift:7:25: error: cannot convert value of type 'UInt32' to expected\
    \ argument type 'String'\n            result += c.value\n                    \
    \    ^\n/tmp/tmp6rk53mmv.swift:9:31: error: value of type 'UInt32' has no member\
    \ 'lowercase'\n            result += c.value.lowercase()\n                   \
    \   ~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string {\n        switch char {\n        case \"a\":\n\
    \            result += \"A\"\n        case \"b\":\n            result += \"B\"\
    \n        case \"c\":\n            result += \"C\"\n        case \"d\":\n    \
    \        result += \"D\"\n        case \"e\":\n            result += \"E\"\n \
    \       case \"f\":\n            result += \"F\"\n        case \"g\":\n      \
    \      result += \"G\"\n        case \"h\":\n            result += \"H\"\n   \
    \     case \"i\":\n            result += \"I\"\n        case \"j\":\n        \
    \    result += \"J\"\n        case \"k\":\n            result += \"K\"\n     \
    \   case \"l\":\n            result += \"L\"\n        case \"m\":\n          \
    \  result += \"M\"\n        case \"n\":\n            result += \"N\"\n       \
    \ case \"o\":\n            result += \"O\"\n        case \"p\":\n            result\
    \ += \"P\"\n        case \"q\":\n            result += \"Q\"\n        case \"\
    r\":\n            result += \"R\"\n        case \"s\":\n            result +=\
    \ \"S\"\n        case \"t\":\n            result += \"T\"\n        case \"u\"\
    :\n            result += \"U\"\n        case \"v\":\n            result += \"\
    V\"\n        case \"w\":\n            result += \"W\"\n        case \"x\":\n \
    \           result += \"X\"\n        case \"y\":\n            result += \"Y\"\n\
    \        case \"z\":\n            result += \"Z\"\n        default:\n        \
    \    result += char\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpicsuxq3_.swift:60:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += char\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string {\n        switch char {\n        case 'a':\n \
    \           result += \"A\"\n        case 'b':\n            result += \"B\"\n\
    \        case 'c':\n            result += \"C\"\n        case 'd':\n         \
    \   result += \"D\"\n        case 'e':\n            result += \"E\"\n        case\
    \ 'f':\n            result += \"F\"\n        case 'g':\n            result +=\
    \ \"G\"\n        case 'h':\n            result += \"H\"\n        case 'i':\n \
    \           result += \"I\"\n        case 'j':\n            result += \"J\"\n\
    \        case 'k':\n            result += \"K\"\n        case 'l':\n         \
    \   result += \"L\"\n        case 'm':\n            result += \"M\"\n        case\
    \ 'n':\n            result += \"N\"\n        case 'o':\n            result +=\
    \ \"O\"\n        case 'p':\n            result += \"P\"\n        case 'q':\n \
    \           result += \"Q\"\n        case 'r':\n            result += \"R\"\n\
    \        case 's':\n            result += \"S\"\n        case 't':\n         \
    \   result += \"T\"\n        case 'u':\n            result += \"U\"\n        case\
    \ 'v':\n            result += \"V\"\n        case 'w':\n            result +=\
    \ \"W\"\n        case 'x':\n            result += \"X\"\n        case 'y':\n \
    \           result += \"Y\"\n        case 'z':\n            result += \"Z\"\n\
    \        default:\n            result += char\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp3o533b_w.swift:7:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp3o533b_w.swift:9:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp3o533b_w.swift:11:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp3o533b_w.swift:13:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp3o533b_w.swift:15:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp3o533b_w.swift:17:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp3o533b_w.swift:19:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp3o533b_w.swift:21:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp3o533b_w.swift:23:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp3o533b_w.swift:25:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp3o533b_w.swift:27:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp3o533b_w.swift:29:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp3o533b_w.swift:31:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp3o533b_w.swift:33:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp3o533b_w.swift:35:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp3o533b_w.swift:37:14: error: single-quoted stri"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        if c.isUppercase {\n   \
    \         result += c.value\n        } else {\n            result += String(c)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpvj90pxwv.swift:6:14: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if c.isUppercase {\n           ~ ^~~~~~~~~~~\n\
    /tmp/tmpvj90pxwv.swift:7:25: error: cannot convert value of type 'UInt32' to expected\
    \ argument type 'String'\n            result += c.value\n                    \
    \    ^\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        default:\n            result += c\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpy1p33y2o.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpy1p33y2o.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpy1p33y2o.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpy1p33y2o.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpy1p33y2o.swift:12:20:\
    \ error: operator function '+=' requires that 'Unicode.Scalar' conform to 'Sequence'\n\
    \            result += c\n                   ^\nSwift.RangeReplaceableCollection:4:35:\
    \ note: where 'Other' = 'Unicode.Scalar'\n    @inlinable public static func +=\
    \ <Other>(lhs: inout Self, rhs: Other) where Other : Sequence, Self.Element ==\
    \ Other.Element\n                                  ^\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        default:\n            result += c\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpy1p33y2o.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpy1p33y2o.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpy1p33y2o.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpy1p33y2o.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpy1p33y2o.swift:12:20:\
    \ error: operator function '+=' requires that 'Unicode.Scalar' conform to 'Sequence'\n\
    \            result += c\n                   ^\nSwift.RangeReplaceableCollection:4:35:\
    \ note: where 'Other' = 'Unicode.Scalar'\n    @inlinable public static func +=\
    \ <Other>(lhs: inout Self, rhs: Other) where Other : Sequence, Self.Element ==\
    \ Other.Element\n                                  ^\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        if c.isUppercase {\n   \
    \         result += c.value\n        } else {\n            result += c.value.lowercase()\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6rk53mmv.swift:6:14: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if c.isUppercase {\n           ~ ^~~~~~~~~~~\n\
    /tmp/tmp6rk53mmv.swift:7:25: error: cannot convert value of type 'UInt32' to expected\
    \ argument type 'String'\n            result += c.value\n                    \
    \    ^\n/tmp/tmp6rk53mmv.swift:9:31: error: value of type 'UInt32' has no member\
    \ 'lowercase'\n            result += c.value.lowercase()\n                   \
    \   ~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string.unicodeScalars {\n        switch char {\n     \
    \   case .lowercase:\n            result += .uppercase\n        case .uppercase:\n\
    \            result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpkxmhds8p.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpkxmhds8p.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpkxmhds8p.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpkxmhds8p.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        let upper = c.isUppercase\n\
    \        let lower = !upper\n        result += String(c.value)\n        if upper\
    \ != lower {\n            result += String(c.value)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(flip_case(string: \"\
    \") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmplcqkux5u.swift:6:23: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        let upper = c.isUppercase\n               \
    \     ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c.value {\n     \
    \   case 0x41:\n            result += \"A\"\n        case 0x42:\n            result\
    \ += \"B\"\n        case 0x43:\n            result += \"C\"\n        case 0x44:\n\
    \            result += \"D\"\n        case 0x45:\n            result += \"E\"\n\
    \        case 0x46:\n            result += \"F\"\n        case 0x47:\n       \
    \     result += \"G\"\n        case 0x48:\n            result += \"H\"\n     \
    \   case 0x49:\n            result += \"I\"\n        case 0x4A:\n            result\
    \ += \"J\"\n        case 0x4B:\n            result += \"K\"\n        case 0x4C:\n\
    \            result += \"L\"\n        case 0x4D:\n            result += \"M\"\n\
    \        case 0x4E:\n            result += \"N\"\n        case 0x4F:\n       \
    \     result += \"O\"\n        case 0x50:\n            result += \"P\"\n     \
    \   case 0x51:\n            result += \"Q\"\n        case 0x52:\n            result\
    \ += \"R\"\n        case 0x53:\n            result += \"S\"\n        case 0x54:\n\
    \            result += \"T\"\n        case 0x55:\n            result += \"U\"\n\
    \        case 0x56:\n            result += \"V\"\n        case 0x57:\n       \
    \     result += \"W\"\n        case 0x58:\n            result += \"X\"\n     \
    \   case 0x59:\n            result += \"Y\"\n        case 0x5A:\n            result\
    \ += \"Z\"\n        case 0x5B:\n            result += \"a\"\n        case 0x5C:\n\
    \            result += \"b\"\n        case 0x5D:\n            result += \"c\"\n\
    \        case 0x5E:\n            result += \"d\"\n        case 0x5F:\n       \
    \     result += \"e\"\n        case 0x60:\n            result += \"f\"\n     \
    \   case 0x61:\n            result += \"g\"\n        case 0x62:\n            result\
    \ += \"h\"\n        case 0x63:\n            result += \"i\"\n        case 0x64:\n\
    \            result += \"j\"\n        case 0x65:\n            result += \"k\"\n\
    \        case 0x66:\n            result += \"l\"\n        case 0x67:\n       \
    \     result += \"m\"\n        case 0x68:\n            result += \"n\"\n     \
    \   case 0x69:\n            result += \"o\"\n        case 0x6A:\n            result\
    \ += \"p\"\n        case 0x6B:\n            result += \"q\"\n        case 0x6C:\n\
    \            result += \"r\"\n        case 0x6D:\n            result += \"s\"\n\
    \        case 0x6E:\n            \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpsep0reiq.swift:97:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case 0x6E:\n        ^~~~~~~~~~\n\
    \                   break\n/tmp/tmpsep0reiq.swift:116:116: error: expected '}'\
    \ at end of brace statement\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n    \
    \                                                                            \
    \                                   ^\n/tmp/tmpsep0reiq.swift:5:36: note: to match\
    \ this opening '{'\n    for c in string.unicodeScalars {\n                   \
    \                ^\n/tmp/tmpsep0reiq.swift:116:116: error: expected '}' at end\
    \ of brace statement\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n                 \
    \                                                                            \
    \                      ^\n/tmp/tmpsep0reiq.swift:3:42: note: to match this opening\
    \ '{'\nfunc flip_case(string: String) -> String {\n                          \
    \               ^\n/tmp/tmpsep0reiq.swift:6:9: error: switch must be exhaustive\n\
    \        switch c.value {\n        ^\n/tmp/tmpsep0reiq.swift:6:9: note: do you\
    \ want to add a default clause?\n        switch c.value {\n        ^\n/tmp/tmpsep0reiq.swift:102:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string {\n        if char >= 'a' && char <= 'z' {\n  \
    \          result += char.uppercased()\n        } else {\n            result +=\
    \ char\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp2uz2t5s6.swift:6:20: error: single-quoted string literal found,\
    \ use '\"'\n        if char >= 'a' && char <= 'z' {\n                   ^~~\n\
    \                   \"a\"\n/tmp/tmp2uz2t5s6.swift:6:35: error: single-quoted string\
    \ literal found, use '\"'\n        if char >= 'a' && char <= 'z' {\n         \
    \                         ^~~\n                                  \"z\"\n/tmp/tmp2uz2t5s6.swift:9:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string.unicodeScalars {\n        switch char {\n     \
    \   case .lowercase:\n            result += \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"[char.value\
    \ - 0x41]\n        case .uppercase:\n            result += \"abcdefghijklmnopqrstuvwxyz\"\
    [char.value - 0x41]\n        case .nonBase:\n            result += String(char)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpw_2jwfpx.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpw_2jwfpx.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpw_2jwfpx.swift:11:15: error: type 'Unicode.Scalar'\
    \ has no member 'nonBase'\n        case .nonBase:\n             ~^~~~~~~\n/tmp/tmpw_2jwfpx.swift:8:51:\
    \ error: no exact matches in call to subscript \n            result += \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    [char.value - 0x41]\n                                                  ^\nSwift.String:3:12:\
    \ note: candidate expects value of type 'Range<String.Index>' for parameter #1\
    \ (got 'UInt32')\n    public subscript(r: Range<String.Index>) -> Substring {\
    \ get }\n           ^\nSwift.Collection:3:23: note: candidate expects value of\
    \ type '(UnboundedRange_) -> ()' for parameter #1 (got 'UInt32')\n    @inlinable\
    \ public subscript(x: (UnboundedRange_) -> ()) -> Self.SubSequence { get }\n \
    \                     ^\n/tmp/tmpw_2jwfpx.swift:10:51: error: no exact matches\
    \ in call to subscript \n            result += \"abcdefghijklmnopqrstuvwxyz\"\
    [char.value - 0x41]\n                                                  ^\nSwift.String:3:12:\
    \ note: candidate expects value of type 'Range<String.Index>' for parameter #1\
    \ (got 'UInt32')\n    public subscript(r: Range<String.Index>) -> Substring {\
    \ get }\n           ^\nSwift.Collection:3:23: note: candidate expects value of\
    \ type '(UnboundedRange_) -> ()' for parameter #1 (got 'UInt32')\n    @inlinable\
    \ public subscript(x: (UnboundedRange_) -> ()) -> Self.SubSequence { get }\n \
    \                     ^\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string {\n        switch char {\n        case 'a':\n \
    \           result += \"A\"\n        case 'b':\n            result += \"B\"\n\
    \        case 'c':\n            result += \"C\"\n        case 'd':\n         \
    \   result += \"D\"\n        case 'e':\n            result += \"E\"\n        case\
    \ 'f':\n            result += \"F\"\n        case 'g':\n            result +=\
    \ \"G\"\n        case 'h':\n            result += \"H\"\n        case 'i':\n \
    \           result += \"I\"\n        case 'j':\n            result += \"J\"\n\
    \        case 'k':\n            result += \"K\"\n        case 'l':\n         \
    \   result += \"L\"\n        case 'm':\n            result += \"M\"\n        case\
    \ 'n':\n            result += \"N\"\n        case 'o':\n            result +=\
    \ \"O\"\n        case 'p':\n            result += \"P\"\n        case 'q':\n \
    \           result += \"Q\"\n        case 'r':\n            result += \"R\"\n\
    \        case 's':\n            result += \"S\"\n        case 't':\n         \
    \   result += \"T\"\n        case 'u':\n            result += \"U\"\n        case\
    \ 'v':\n            result += \"V\"\n        case 'w':\n            result +=\
    \ \"W\"\n        case 'x':\n            result += \"X\"\n        case 'y':\n \
    \           result += \"Y\"\n        case 'z':\n            result += \"Z\"\n\
    \        default:\n            result += char\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp3o533b_w.swift:7:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp3o533b_w.swift:9:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp3o533b_w.swift:11:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp3o533b_w.swift:13:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp3o533b_w.swift:15:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp3o533b_w.swift:17:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp3o533b_w.swift:19:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp3o533b_w.swift:21:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp3o533b_w.swift:23:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp3o533b_w.swift:25:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp3o533b_w.swift:27:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp3o533b_w.swift:29:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp3o533b_w.swift:31:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp3o533b_w.swift:33:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp3o533b_w.swift:35:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp3o533b_w.swift:37:14: error: single-quoted stri"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string {\n        switch char {\n        case 'a':\n \
    \           result += \"A\"\n        case 'b':\n            result += \"B\"\n\
    \        case 'c':\n            result += \"C\"\n        case 'd':\n         \
    \   result += \"D\"\n        case 'e':\n            result += \"E\"\n        case\
    \ 'f':\n            result += \"F\"\n        case 'g':\n            result +=\
    \ \"G\"\n        case 'h':\n            result += \"H\"\n        case 'i':\n \
    \           result += \"I\"\n        case 'j':\n            result += \"J\"\n\
    \        case 'k':\n            result += \"K\"\n        case 'l':\n         \
    \   result += \"L\"\n        case 'm':\n            result += \"M\"\n        case\
    \ 'n':\n            result += \"N\"\n        case 'o':\n            result +=\
    \ \"O\"\n        case 'p':\n            result += \"P\"\n        case 'q':\n \
    \           result += \"Q\"\n        case 'r':\n            result += \"R\"\n\
    \        case 's':\n            result += \"S\"\n        case 't':\n         \
    \   result += \"T\"\n        case 'u':\n            result += \"U\"\n        case\
    \ 'v':\n            result += \"V\"\n        case 'w':\n            result +=\
    \ \"W\"\n        case 'x':\n            result += \"X\"\n        case 'y':\n \
    \           result += \"Y\"\n        case 'z':\n            result += \"Z\"\n\
    \        default:\n            result += char\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp3o533b_w.swift:7:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp3o533b_w.swift:9:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp3o533b_w.swift:11:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp3o533b_w.swift:13:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp3o533b_w.swift:15:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp3o533b_w.swift:17:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp3o533b_w.swift:19:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp3o533b_w.swift:21:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp3o533b_w.swift:23:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp3o533b_w.swift:25:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp3o533b_w.swift:27:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp3o533b_w.swift:29:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp3o533b_w.swift:31:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp3o533b_w.swift:33:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp3o533b_w.swift:35:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp3o533b_w.swift:37:14: error: single-quoted stri"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        if c.isUppercase {\n   \
    \         result += c.value\n        } else {\n            result += String(c)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpvj90pxwv.swift:6:14: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if c.isUppercase {\n           ~ ^~~~~~~~~~~\n\
    /tmp/tmpvj90pxwv.swift:7:25: error: cannot convert value of type 'UInt32' to expected\
    \ argument type 'String'\n            result += c.value\n                    \
    \    ^\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string {\n        if char >= 'a' && char <= 'z' {\n  \
    \          result += char.uppercased()\n        } else {\n            result +=\
    \ char.lowercased()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpu0hukbg2.swift:6:20: error: single-quoted string literal found,\
    \ use '\"'\n        if char >= 'a' && char <= 'z' {\n                   ^~~\n\
    \                   \"a\"\n/tmp/tmpu0hukbg2.swift:6:35: error: single-quoted string\
    \ literal found, use '\"'\n        if char >= 'a' && char <= 'z' {\n         \
    \                         ^~~\n                                  \"z\"\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += \"\\U\"\n        case .uppercase:\n     \
    \       result += \"\\L\"\n        default:\n            result += String(c)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpa11gvu6h.swift:8:25: error: invalid escape sequence in literal\n\
    \            result += \"\\U\"\n                        ^\n/tmp/tmpa11gvu6h.swift:10:25:\
    \ error: invalid escape sequence in literal\n            result += \"\\L\"\n \
    \                       ^\n/tmp/tmpa11gvu6h.swift:7:15: error: type 'Unicode.Scalar'\
    \ has no member 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n\
    /tmp/tmpa11gvu6h.swift:9:15: error: type 'Unicode.Scalar' has no member 'uppercase'\n\
    \        case .uppercase:\n             ~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string.unicodeScalars {\n        switch char {\n     \
    \   case .lowercase:\n            result += .uppercase\n        case .uppercase:\n\
    \            result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpkxmhds8p.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpkxmhds8p.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpkxmhds8p.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpkxmhds8p.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string {\n        switch char {\n        case 'a':\n \
    \           result += \"A\"\n        case 'b':\n            result += \"B\"\n\
    \        case 'c':\n            result += \"C\"\n        case 'd':\n         \
    \   result += \"D\"\n        case 'e':\n            result += \"E\"\n        case\
    \ 'f':\n            result += \"F\"\n        case 'g':\n            result +=\
    \ \"G\"\n        case 'h':\n            result += \"H\"\n        case 'i':\n \
    \           result += \"I\"\n        case 'j':\n            result += \"J\"\n\
    \        case 'k':\n            result += \"K\"\n        case 'l':\n         \
    \   result += \"L\"\n        case 'm':\n            result += \"M\"\n        case\
    \ 'n':\n            result += \"N\"\n        case 'o':\n            result +=\
    \ \"O\"\n        case 'p':\n            result += \"P\"\n        case 'q':\n \
    \           result += \"Q\"\n        case 'r':\n            result += \"R\"\n\
    \        case 's':\n            result += \"S\"\n        case 't':\n         \
    \   result += \"T\"\n        case 'u':\n            result += \"U\"\n        case\
    \ 'v':\n            result += \"V\"\n        case 'w':\n            result +=\
    \ \"W\"\n        case 'x':\n            result += \"X\"\n        case 'y':\n \
    \           result += \"Y\"\n        case 'z':\n            result += \"Z\"\n\
    \        default:\n            result += char\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp3o533b_w.swift:7:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp3o533b_w.swift:9:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp3o533b_w.swift:11:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp3o533b_w.swift:13:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp3o533b_w.swift:15:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp3o533b_w.swift:17:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp3o533b_w.swift:19:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp3o533b_w.swift:21:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp3o533b_w.swift:23:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp3o533b_w.swift:25:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp3o533b_w.swift:27:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp3o533b_w.swift:29:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp3o533b_w.swift:31:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp3o533b_w.swift:33:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp3o533b_w.swift:35:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp3o533b_w.swift:37:14: error: single-quoted stri"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string {\n        switch char {\n        case 'a':\n \
    \           result += \"A\"\n        case 'b':\n            result += \"B\"\n\
    \        case 'c':\n            result += \"C\"\n        case 'd':\n         \
    \   result += \"D\"\n        case 'e':\n            result += \"E\"\n        case\
    \ 'f':\n            result += \"F\"\n        case 'g':\n            result +=\
    \ \"G\"\n        case 'h':\n            result += \"H\"\n        case 'i':\n \
    \           result += \"I\"\n        case 'j':\n            result += \"J\"\n\
    \        case 'k':\n            result += \"K\"\n        case 'l':\n         \
    \   result += \"L\"\n        case 'm':\n            result += \"M\"\n        case\
    \ 'n':\n            result += \"N\"\n        case 'o':\n            result +=\
    \ \"O\"\n        case 'p':\n            result += \"P\"\n        case 'q':\n \
    \           result += \"Q\"\n        case 'r':\n            result += \"R\"\n\
    \        case 's':\n            result += \"S\"\n        case 't':\n         \
    \   result += \"T\"\n        case 'u':\n            result += \"U\"\n        case\
    \ 'v':\n            result += \"V\"\n        case 'w':\n            result +=\
    \ \"W\"\n        case 'x':\n            result += \"X\"\n        case 'y':\n \
    \           result += \"Y\"\n        case 'z':\n            result += \"Z\"\n\
    \        default:\n            result += char\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp3o533b_w.swift:7:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp3o533b_w.swift:9:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp3o533b_w.swift:11:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp3o533b_w.swift:13:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp3o533b_w.swift:15:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp3o533b_w.swift:17:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp3o533b_w.swift:19:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp3o533b_w.swift:21:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp3o533b_w.swift:23:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp3o533b_w.swift:25:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp3o533b_w.swift:27:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp3o533b_w.swift:29:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp3o533b_w.swift:31:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp3o533b_w.swift:33:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp3o533b_w.swift:35:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp3o533b_w.swift:37:14: error: single-quoted stri"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        if c.isUppercase {\n   \
    \         result += c.value\n        } else {\n            result += c.value.lowercase()\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6rk53mmv.swift:6:14: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if c.isUppercase {\n           ~ ^~~~~~~~~~~\n\
    /tmp/tmp6rk53mmv.swift:7:25: error: cannot convert value of type 'UInt32' to expected\
    \ argument type 'String'\n            result += c.value\n                    \
    \    ^\n/tmp/tmp6rk53mmv.swift:9:31: error: value of type 'UInt32' has no member\
    \ 'lowercase'\n            result += c.value.lowercase()\n                   \
    \   ~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string {\n        switch char {\n        case 'a':\n \
    \       case 'e':\n        case 'i':\n        case 'o':\n        case 'u':\n \
    \           result += char.uppercased()\n        default:\n            result\
    \ += char.lowercased()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp3s3jzd30.swift:7:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp3s3jzd30.swift:7:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case 'a':\n        ^~~~~~~~~\n                  break\n/tmp/tmp3s3jzd30.swift:8:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp3s3jzd30.swift:8:9: error: 'case'\
    \ label in a 'switch' must have at least one executable statement\n        case\
    \ 'e':\n        ^~~~~~~~~\n                  break\n/tmp/tmp3s3jzd30.swift:9:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'i':\n   \
    \          ^~~\n             \"i\"\n/tmp/tmp3s3jzd30.swift:9:9: error: 'case'\
    \ label in a 'switch' must have at least one executable statement\n        case\
    \ 'i':\n        ^~~~~~~~~\n                  break\n/tmp/tmp3s3jzd30.swift:10:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'o':\n   \
    \          ^~~\n             \"o\"\n/tmp/tmp3s3jzd30.swift:10:9: error: 'case'\
    \ label in a 'switch' must have at least one executable statement\n        case\
    \ 'o':\n        ^~~~~~~~~\n                  break\n/tmp/tmp3s3jzd30.swift:11:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'u':\n   \
    \          ^~~\n             \"u\"\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c.value {\n     \
    \   case 0x41:\n            result += \"A\"\n        case 0x42:\n            result\
    \ += \"B\"\n        case 0x43:\n            result += \"C\"\n        case 0x44:\n\
    \            result += \"D\"\n        case 0x45:\n            result += \"E\"\n\
    \        case 0x46:\n            result += \"F\"\n        case 0x47:\n       \
    \     result += \"G\"\n        case 0x48:\n            result += \"H\"\n     \
    \   case 0x49:\n            result += \"I\"\n        case 0x4A:\n            result\
    \ += \"J\"\n        case 0x4B:\n            result += \"K\"\n        case 0x4C:\n\
    \            result += \"L\"\n        case 0x4D:\n            result += \"M\"\n\
    \        case 0x4E:\n            result += \"N\"\n        case 0x4F:\n       \
    \     result += \"O\"\n        case 0x50:\n            result += \"P\"\n     \
    \   case 0x51:\n            result += \"Q\"\n        case 0x52:\n            result\
    \ += \"R\"\n        case 0x53:\n            result += \"S\"\n        case 0x54:\n\
    \            result += \"T\"\n        case 0x55:\n            result += \"U\"\n\
    \        case 0x56:\n            result += \"V\"\n        case 0x57:\n       \
    \     result += \"W\"\n        case 0x58:\n            result += \"X\"\n     \
    \   case 0x59:\n            result += \"Y\"\n        case 0x5A:\n            result\
    \ += \"Z\"\n        case 0x5B:\n            result += \"a\"\n        case 0x5C:\n\
    \            result += \"b\"\n        case 0x5D:\n            result += \"c\"\n\
    \        case 0x5E:\n            result += \"d\"\n        case 0x5F:\n       \
    \     result += \"e\"\n        case 0x60:\n            result += \"f\"\n     \
    \   case 0x61:\n            result += \"g\"\n        case 0x62:\n            result\
    \ += \"h\"\n        case 0x63:\n            result += \"i\"\n        case 0x64:\n\
    \            result += \"j\"\n        case 0x65:\n            result += \"k\"\n\
    \        case 0x66:\n            result += \"l\"\n        case 0x67:\n       \
    \     result += \"m\"\n        case 0x68:\n            result += \"n\"\n     \
    \   case 0x69:\n            result += \"o\"\n        case 0x6A:\n            result\
    \ += \"p\"\n        case 0x6B:\n            result += \"q\"\n        case 0x6C:\n\
    \            result += \"r\"\n        case 0x6D:\n            result += \"s\"\n\
    \        case 0x6E:\n            \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpsep0reiq.swift:97:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case 0x6E:\n        ^~~~~~~~~~\n\
    \                   break\n/tmp/tmpsep0reiq.swift:116:116: error: expected '}'\
    \ at end of brace statement\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n    \
    \                                                                            \
    \                                   ^\n/tmp/tmpsep0reiq.swift:5:36: note: to match\
    \ this opening '{'\n    for c in string.unicodeScalars {\n                   \
    \                ^\n/tmp/tmpsep0reiq.swift:116:116: error: expected '}' at end\
    \ of brace statement\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n                 \
    \                                                                            \
    \                      ^\n/tmp/tmpsep0reiq.swift:3:42: note: to match this opening\
    \ '{'\nfunc flip_case(string: String) -> String {\n                          \
    \               ^\n/tmp/tmpsep0reiq.swift:6:9: error: switch must be exhaustive\n\
    \        switch c.value {\n        ^\n/tmp/tmpsep0reiq.swift:6:9: note: do you\
    \ want to add a default clause?\n        switch c.value {\n        ^\n/tmp/tmpsep0reiq.swift:102:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string {\n        switch char {\n        case 'a':\n \
    \           result += \"A\"\n        case 'b':\n            result += \"B\"\n\
    \        case 'c':\n            result += \"C\"\n        case 'd':\n         \
    \   result += \"D\"\n        case 'e':\n            result += \"E\"\n        case\
    \ 'f':\n            result += \"F\"\n        case 'g':\n            result +=\
    \ \"G\"\n        case 'h':\n            result += \"H\"\n        case 'i':\n \
    \           result += \"I\"\n        case 'j':\n            result += \"J\"\n\
    \        case 'k':\n            result += \"K\"\n        case 'l':\n         \
    \   result += \"L\"\n        case 'm':\n            result += \"M\"\n        case\
    \ 'n':\n            result += \"N\"\n        case 'o':\n            result +=\
    \ \"O\"\n        case 'p':\n            result += \"P\"\n        case 'q':\n \
    \           result += \"Q\"\n        case 'r':\n            result += \"R\"\n\
    \        case 's':\n            result += \"S\"\n        case 't':\n         \
    \   result += \"T\"\n        case 'u':\n            result += \"U\"\n        case\
    \ 'v':\n            result += \"V\"\n        case 'w':\n            result +=\
    \ \"W\"\n        case 'x':\n            result += \"X\"\n        case 'y':\n \
    \           result += \"Y\"\n        case 'z':\n            result += \"Z\"\n\
    \        default:\n            result += char\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp3o533b_w.swift:7:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp3o533b_w.swift:9:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp3o533b_w.swift:11:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp3o533b_w.swift:13:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp3o533b_w.swift:15:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp3o533b_w.swift:17:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp3o533b_w.swift:19:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp3o533b_w.swift:21:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp3o533b_w.swift:23:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp3o533b_w.swift:25:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp3o533b_w.swift:27:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp3o533b_w.swift:29:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp3o533b_w.swift:31:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp3o533b_w.swift:33:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp3o533b_w.swift:35:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp3o533b_w.swift:37:14: error: single-quoted stri"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        default:\n            result += c\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpy1p33y2o.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpy1p33y2o.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpy1p33y2o.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpy1p33y2o.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpy1p33y2o.swift:12:20:\
    \ error: operator function '+=' requires that 'Unicode.Scalar' conform to 'Sequence'\n\
    \            result += c\n                   ^\nSwift.RangeReplaceableCollection:4:35:\
    \ note: where 'Other' = 'Unicode.Scalar'\n    @inlinable public static func +=\
    \ <Other>(lhs: inout Self, rhs: Other) where Other : Sequence, Self.Element ==\
    \ Other.Element\n                                  ^\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string.unicodeScalars {\n        switch char {\n     \
    \   case .lowercase:\n            result += .uppercase\n        case .uppercase:\n\
    \            result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpkxmhds8p.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpkxmhds8p.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpkxmhds8p.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpkxmhds8p.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        if c.isUppercase {\n   \
    \         result += c.value\n        } else {\n            result += c.value.lowercased()\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpnh5glmz0.swift:6:14: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if c.isUppercase {\n           ~ ^~~~~~~~~~~\n\
    /tmp/tmpnh5glmz0.swift:7:25: error: cannot convert value of type 'UInt32' to expected\
    \ argument type 'String'\n            result += c.value\n                    \
    \    ^\n/tmp/tmpnh5glmz0.swift:9:31: error: value of type 'UInt32' has no member\
    \ 'lowercased'\n            result += c.value.lowercased()\n                 \
    \     ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string {\n        switch char {\n        case 'a':\n \
    \           result += \"A\"\n        case 'b':\n            result += \"B\"\n\
    \        case 'c':\n            result += \"C\"\n        case 'd':\n         \
    \   result += \"D\"\n        case 'e':\n            result += \"E\"\n        case\
    \ 'f':\n            result += \"F\"\n        case 'g':\n            result +=\
    \ \"G\"\n        case 'h':\n            result += \"H\"\n        case 'i':\n \
    \           result += \"I\"\n        case 'j':\n            result += \"J\"\n\
    \        case 'k':\n            result += \"K\"\n        case 'l':\n         \
    \   result += \"L\"\n        case 'm':\n            result += \"M\"\n        case\
    \ 'n':\n            result += \"N\"\n        case 'o':\n            result +=\
    \ \"O\"\n        case 'p':\n            result += \"P\"\n        case 'q':\n \
    \           result += \"Q\"\n        case 'r':\n            result += \"R\"\n\
    \        case 's':\n            result += \"S\"\n        case 't':\n         \
    \   result += \"T\"\n        case 'u':\n            result += \"U\"\n        case\
    \ 'v':\n            result += \"V\"\n        case 'w':\n            result +=\
    \ \"W\"\n        case 'x':\n            result += \"X\"\n        case 'y':\n \
    \           result += \"Y\"\n        case 'z':\n            result += \"Z\"\n\
    \        default:\n            result += char\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp3o533b_w.swift:7:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp3o533b_w.swift:9:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp3o533b_w.swift:11:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp3o533b_w.swift:13:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp3o533b_w.swift:15:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp3o533b_w.swift:17:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp3o533b_w.swift:19:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp3o533b_w.swift:21:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp3o533b_w.swift:23:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp3o533b_w.swift:25:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp3o533b_w.swift:27:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp3o533b_w.swift:29:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp3o533b_w.swift:31:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp3o533b_w.swift:33:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp3o533b_w.swift:35:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp3o533b_w.swift:37:14: error: single-quoted stri"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        if c.isUppercase {\n   \
    \         result += c.value\n        } else {\n            result += c.value.lowercased()\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpnh5glmz0.swift:6:14: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        if c.isUppercase {\n           ~ ^~~~~~~~~~~\n\
    /tmp/tmpnh5glmz0.swift:7:25: error: cannot convert value of type 'UInt32' to expected\
    \ argument type 'String'\n            result += c.value\n                    \
    \    ^\n/tmp/tmpnh5glmz0.swift:9:31: error: value of type 'UInt32' has no member\
    \ 'lowercased'\n            result += c.value.lowercased()\n                 \
    \     ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string.unicodeScalars {\n        switch char {\n     \
    \   case .lowercase:\n            result += .uppercase\n        case .uppercase:\n\
    \            result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpkxmhds8p.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpkxmhds8p.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpkxmhds8p.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpkxmhds8p.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        default:\n            result += c\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpy1p33y2o.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpy1p33y2o.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpy1p33y2o.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpy1p33y2o.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpy1p33y2o.swift:12:20:\
    \ error: operator function '+=' requires that 'Unicode.Scalar' conform to 'Sequence'\n\
    \            result += c\n                   ^\nSwift.RangeReplaceableCollection:4:35:\
    \ note: where 'Other' = 'Unicode.Scalar'\n    @inlinable public static func +=\
    \ <Other>(lhs: inout Self, rhs: Other) where Other : Sequence, Self.Element ==\
    \ Other.Element\n                                  ^\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        let upper = c.isUppercase\n\
    \        let lower = !upper\n        result += String(c.value)\n        if upper\
    \ != lower {\n            result += \"-\"\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpq1ixvx76.swift:6:23: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n        let upper = c.isUppercase\n               \
    \     ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string {\n        switch char {\n        case \"a\":\n\
    \            result += \"A\"\n        case \"b\":\n            result += \"B\"\
    \n        case \"c\":\n            result += \"C\"\n        case \"d\":\n    \
    \        result += \"D\"\n        case \"e\":\n            result += \"E\"\n \
    \       case \"f\":\n            result += \"F\"\n        case \"g\":\n      \
    \      result += \"G\"\n        case \"h\":\n            result += \"H\"\n   \
    \     case \"i\":\n            result += \"I\"\n        case \"j\":\n        \
    \    result += \"J\"\n        case \"k\":\n            result += \"K\"\n     \
    \   case \"l\":\n            result += \"L\"\n        case \"m\":\n          \
    \  result += \"M\"\n        case \"n\":\n            result += \"N\"\n       \
    \ case \"o\":\n            result += \"O\"\n        case \"p\":\n            result\
    \ += \"P\"\n        case \"q\":\n            result += \"Q\"\n        case \"\
    r\":\n            result += \"R\"\n        case \"s\":\n            result +=\
    \ \"S\"\n        case \"t\":\n            result += \"T\"\n        case \"u\"\
    :\n            result += \"U\"\n        case \"v\":\n            result += \"\
    V\"\n        case \"w\":\n            result += \"W\"\n        case \"x\":\n \
    \           result += \"X\"\n        case \"y\":\n            result += \"Y\"\n\
    \        case \"z\":\n            result += \"Z\"\n        default:\n        \
    \    result += char\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpicsuxq3_.swift:60:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += char\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for char in string {\n        switch char {\n        case 'a':\n \
    \           result += \"A\"\n        case 'b':\n            result += \"B\"\n\
    \        case 'c':\n            result += \"C\"\n        case 'd':\n         \
    \   result += \"D\"\n        case 'e':\n            result += \"E\"\n        case\
    \ 'f':\n            result += \"F\"\n        case 'g':\n            result +=\
    \ \"G\"\n        case 'h':\n            result += \"H\"\n        case 'i':\n \
    \           result += \"I\"\n        case 'j':\n            result += \"J\"\n\
    \        case 'k':\n            result += \"K\"\n        case 'l':\n         \
    \   result += \"L\"\n        case 'm':\n            result += \"M\"\n        case\
    \ 'n':\n            result += \"N\"\n        case 'o':\n            result +=\
    \ \"O\"\n        case 'p':\n            result += \"P\"\n        case 'q':\n \
    \           result += \"Q\"\n        case 'r':\n            result += \"R\"\n\
    \        case 's':\n            result += \"S\"\n        case 't':\n         \
    \   result += \"T\"\n        case 'u':\n            result += \"U\"\n        case\
    \ 'v':\n            result += \"V\"\n        case 'w':\n            result +=\
    \ \"W\"\n        case 'x':\n            result += \"X\"\n        case 'y':\n \
    \           result += \"Y\"\n        case 'z':\n            result += \"Z\"\n\
    \        default:\n            result += char\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp3o533b_w.swift:7:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'a':\n             ^~~\n             \"a\"\n/tmp/tmp3o533b_w.swift:9:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'b':\n   \
    \          ^~~\n             \"b\"\n/tmp/tmp3o533b_w.swift:11:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'c':\n             ^~~\n      \
    \       \"c\"\n/tmp/tmp3o533b_w.swift:13:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'd':\n             ^~~\n             \"d\"\n/tmp/tmp3o533b_w.swift:15:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'e':\n   \
    \          ^~~\n             \"e\"\n/tmp/tmp3o533b_w.swift:17:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'f':\n             ^~~\n      \
    \       \"f\"\n/tmp/tmp3o533b_w.swift:19:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'g':\n             ^~~\n             \"g\"\n/tmp/tmp3o533b_w.swift:21:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'h':\n   \
    \          ^~~\n             \"h\"\n/tmp/tmp3o533b_w.swift:23:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'i':\n             ^~~\n      \
    \       \"i\"\n/tmp/tmp3o533b_w.swift:25:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'j':\n             ^~~\n             \"j\"\n/tmp/tmp3o533b_w.swift:27:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'k':\n   \
    \          ^~~\n             \"k\"\n/tmp/tmp3o533b_w.swift:29:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'l':\n             ^~~\n      \
    \       \"l\"\n/tmp/tmp3o533b_w.swift:31:14: error: single-quoted string literal\
    \ found, use '\"'\n        case 'm':\n             ^~~\n             \"m\"\n/tmp/tmp3o533b_w.swift:33:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'n':\n   \
    \          ^~~\n             \"n\"\n/tmp/tmp3o533b_w.swift:35:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'o':\n             ^~~\n      \
    \       \"o\"\n/tmp/tmp3o533b_w.swift:37:14: error: single-quoted stri"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpfkpbj8v2.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpfkpbj8v2.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfunc flip_case(string: String) -> String {\n    var result =\
    \ \"\"\n    for c in string.unicodeScalars {\n        switch c {\n        case\
    \ .lowercase:\n            result += .uppercase\n        case .uppercase:\n  \
    \          result += .lowercase\n        default:\n            result += c\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpy1p33y2o.swift:7:15: error: type 'Unicode.Scalar' has no member\
    \ 'lowercase'\n        case .lowercase:\n             ~^~~~~~~~~\n/tmp/tmpy1p33y2o.swift:9:15:\
    \ error: type 'Unicode.Scalar' has no member 'uppercase'\n        case .uppercase:\n\
    \             ~^~~~~~~~~\n/tmp/tmpy1p33y2o.swift:8:20: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String' and '_'\n            result\
    \ += .uppercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpy1p33y2o.swift:10:20:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String' and\
    \ '_'\n            result += .lowercase\n            ~~~~~~ ^  ~~~~~~~~~~\n/tmp/tmpy1p33y2o.swift:12:20:\
    \ error: operator function '+=' requires that 'Unicode.Scalar' conform to 'Sequence'\n\
    \            result += c\n                   ^\nSwift.RangeReplaceableCollection:4:35:\
    \ note: where 'Other' = 'Unicode.Scalar'\n    @inlinable public static func +=\
    \ <Other>(lhs: inout Self, rhs: Other) where Other : Sequence, Self.Element ==\
    \ Other.Element\n                                  ^\n"
  stdout: ''
  timestamp: 1659978991
