language: swift
name: HumanEval_9_rolling_max
results:
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    var currentMax\
    \ = numbers[0]\n    for number in numbers {\n        if number > currentMax {\n\
    \            max = [number]\n            maxIndex = number\n        } else {\n\
    \            max = append(max, number)\n        }\n        currentMax = number\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpe4ancxo7.swift:13:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var max = 0\n    for number\
    \ in numbers {\n        if number > max {\n            max = number\n        }\n\
    \    }\n    for number in numbers {\n        if number > max {\n            result.append(number)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'tmpftg9p7qo/tmpftg9p7qo.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac974266c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac973f5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac973f5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac973f5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpftg9p7qo                        0x000055fb61a1a6cd <unavailable> + 5837

    5    libc.so.6                          0x00002ac974452460 __libc_start_main +
    245

    6    tmpftg9p7qo                        0x000055fb61a1a1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = numbers[0]\n    var rolling_max = numbers[0]\n\
    \    for i in 1..<numbers.count {\n        if numbers[i] > max {\n           \
    \ max = numbers[i]\n            rolling_max = max\n        } else {\n        \
    \    rolling_max = max(rolling_max, numbers[i])\n        }\n    }\n    return\
    \ rolling_max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmp7aw9uwys.swift:12:27: error: cannot call value of non-function\
    \ type 'Int'\n            rolling_max = max(rolling_max, numbers[i])\n       \
    \                   ^\n/tmp/tmp7aw9uwys.swift:15:12: error: cannot convert return\
    \ expression of type 'Int' to return type '[Int]'\n    return rolling_max\n  \
    \         ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max_rolling_numbers = [Int]()\n    var max_rolling_number\
    \ = 0\n    for number in numbers {\n        if number > max_rolling_number {\n\
    \            max_rolling_number = number\n        }\n    }\n    for number in\
    \ numbers {\n        if number > max_rolling_number {\n            max_rolling_numbers.append(number)\n\
    \        }\n    }\n    return max_rolling_numbers\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'tmph2765ibk/tmph2765ibk.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a3a7ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a3a4d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2a3a4d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2a3a4d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph2765ibk                        0x000055a9ae0076cd <unavailable> + 5837

    5    libc.so.6                          0x00002b2a3a9c9460 __libc_start_main +
    245

    6    tmph2765ibk                        0x000055a9ae0071e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n    \
    \    if number > max[0] {\n            max = [number]\n        } else {\n    \
    \        max = append(max, number)\n        }\n    }\n    return max\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpal1cekva.swift:10:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659980009
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    var currentMax\
    \ = numbers[0]\n    for number in numbers {\n        if number > currentMax {\n\
    \            currentMax = number\n            maxIndex = number\n        }\n \
    \   }\n    max = append(max, currentMax)\n    for number in numbers {\n      \
    \  if number > currentMax {\n            currentMax = number\n            maxIndex\
    \ = number\n        }\n    }\n    max = append(max, currentMax)\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpfc9ci0yf.swift:14:11: error: cannot find 'append' in scope\n  \
    \  max = append(max, currentMax)\n          ^~~~~~\n/tmp/tmpfc9ci0yf.swift:21:11:\
    \ error: cannot find 'append' in scope\n    max = append(max, currentMax)\n  \
    \        ^~~~~~\n"
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    var currentMax\
    \ = numbers[0]\n    for number in numbers {\n        if number > currentMax {\n\
    \            currentMax = number\n            maxIndex = number\n        }\n \
    \   }\n    max[maxIndex] = currentMax\n    return max\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac61fd62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac61fa59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac61fa59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac61fa5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac61fa58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac61f858e83 <unavailable> + 188035

    6    tmp24dngdgu                        0x0000562c133c4a80 <unavailable> + 6784

    7    tmp24dngdgu                        0x0000562c133c452d <unavailable> + 5421

    8    libc.so.6                          0x00002ac61ff4e460 __libc_start_main +
    245

    9    tmp24dngdgu                        0x0000562c133c4239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n    \
    \    if number > max[0] {\n            max = [number]\n        } else {\n    \
    \        max = append(max, number)\n        }\n    }\n    return max\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpal1cekva.swift:10:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = numbers[0]\n    var max_index = -1\n    for\
    \ number in numbers {\n        if number > max {\n            max = number\n \
    \           max_index = -1\n        }\n        if number == max {\n          \
    \  max_index += 1\n        }\n    }\n    return Array(numbers[0..<max_index])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b98953e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98950dd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b98950dd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b98950dd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b98950dcbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b9894edce83 <unavailable> + 188035

    6    tmpl3huiqby                        0x00005634e78d8ba8 <unavailable> + 7080

    7    tmpl3huiqby                        0x00005634e78d867d <unavailable> + 5757

    8    libc.so.6                          0x00002b98955d2460 __libc_start_main +
    245

    9    tmpl3huiqby                        0x00005634e78d8389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n    \
    \    if number > max[0] {\n            max = [number]\n        } else {\n    \
    \        max = append(max, number)\n        }\n    }\n    return max\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpal1cekva.swift:10:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659980009
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n    \
    \    if number > max[0] {\n            max = [number]\n        } else {\n    \
    \        max = append(max, number)\n        }\n    }\n    return max\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpal1cekva.swift:10:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n    \
    \    if number > max[0] {\n            max = [number]\n        } else {\n    \
    \        max = append(max, number)\n        }\n    }\n    return max\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpal1cekva.swift:10:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex++\n        }\n    }\n    return max\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpja9s8d3o.swift:10:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            maxIndex++\n                    ^~\n"
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    var currentMax\
    \ = numbers[0]\n    for number in numbers {\n        if number > currentMax {\n\
    \            max = [number]\n            maxIndex = number\n        } else {\n\
    \            max.append(number)\n        }\n        currentMax = number\n    }\n\
    \    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002acb584abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb581a2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002acb581a2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002acb581a213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002acb581a1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002acb57fa1e83 <unavailable> + 188035

    6    tmpr_5g_ebi                        0x0000560b37457a77 <unavailable> + 6775

    7    tmpr_5g_ebi                        0x0000560b3745752d <unavailable> + 5421

    8    libc.so.6                          0x00002acb58697460 __libc_start_main +
    245

    9    tmpr_5g_ebi                        0x0000560b37457239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    var currentMax\
    \ = numbers[0]\n    for i in 1..<numbers.count {\n        if numbers[i] > currentMax\
    \ {\n            currentMax = numbers[i]\n            maxIndex = i\n        }\n\
    \    }\n    max = append(max, currentMax)\n    for _ in 1..<maxIndex {\n     \
    \   currentMax = numbers[maxIndex]\n        for i in maxIndex+1..<numbers.count\
    \ {\n            if numbers[i] > currentMax {\n                currentMax = numbers[i]\n\
    \                maxIndex = i\n            }\n        }\n        max = append(max,\
    \ currentMax)\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: SyntaxError
  stderr: "/tmp/tmpqs3aoo3t.swift:14:11: error: cannot find 'append' in scope\n  \
    \  max = append(max, currentMax)\n          ^~~~~~\n/tmp/tmpqs3aoo3t.swift:23:15:\
    \ error: cannot find 'append' in scope\n        max = append(max, currentMax)\n\
    \              ^~~~~~\n"
  stdout: ''
  timestamp: 1659980009
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max_so_far = numbers[0]\n    var max_so_far_index\
    \ = 0\n    for number in numbers {\n        if number > max_so_far {\n       \
    \     max_so_far = number\n            max_so_far_index = number\n        }\n\
    \    }\n    var rolling_max_so_far = max_so_far\n    var rolling_max_so_far_index\
    \ = max_so_far_index\n    for number in numbers {\n        if number > rolling_max_so_far\
    \ {\n            rolling_max_so_far = number\n            rolling_max_so_far_index\
    \ = number\n        }\n    }\n    var rolling_max_so_far_2 = max_so_far\n    var\
    \ rolling_max_so_far_index_2 = max_so_far_index\n    for number in numbers {\n\
    \        if number > rolling_max_so_far_2 {\n            rolling_max_so_far_2\
    \ = number\n            rolling_max_so_far_index_2 = number\n        }\n    }\n\
    \    var rolling_max_so_far_3 = max_so_far\n    var rolling_max_so_far_index_3\
    \ = max_so_far_index\n    for number in numbers {\n        if number > rolling_max_so_far_3\
    \ {\n            rolling_max_so_far_3 = number\n            rolling_max_so_far_index_3\
    \ = number\n        }\n    }\n    var rolling_max_so_far_4 = max_so_far\n    var\
    \ rolling_max_so_far_index_4 = max_so_far_index\n    for number in numbers {\n\
    \        if number > rolling_max_so_far_4 {\n            rolling_max_so_far_4\
    \ = number\n            rolling_max_so_far_index_4 = number\n        }\n    }\n\
    \    var rolling_max_so_far_5 = max_so_far\n    var rolling_max_so_far_index_5\
    \ = max_so_far_index\n    for number in numbers {\n        if number > rolling_max_so_far_5\
    \ {\n            rolling_max_so_far_5 = number\n            rolling_max_so_far_index_5\
    \ = number\n        }\n    }\n    var rolling_max_so_far_6 = max_so_far\n    var\
    \ rolling_max_so_far_index_6 = max_so_far_index\n    for number in numbers {\n\
    \        if number > rolling_max_so_far_6 {\n            rolling_max_so_far_6\
    \ = number\n            rolling_max_so_far_index_6 = number\n        }\n    }\n\
    \    var rolling_max_so_far_7 = max_so_far\n    var rolling_max_so_far_index_7\
    \ = max_so_far_index\n    for number in numbers {\n        if number > rolling_max_so_f\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpvsc11tuh.swift:64:37: error: expected '{' after 'if' condition\n\
    \        if number > rolling_max_so_f\n                                    ^\n\
    /tmp/tmpvsc11tuh.swift:83:71: error: expected '}' at end of brace statement\n\
    assert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\n     \
    \                                                                 ^\n/tmp/tmpvsc11tuh.swift:4:43:\
    \ note: to match this opening '{'\nfunc rolling_max(numbers: [Int]) -> [Int] {\n\
    \                                          ^\n/tmp/tmpvsc11tuh.swift:64:21: error:\
    \ cannot find 'rolling_max_so_f' in scope\n        if number > rolling_max_so_f\n\
    \                    ^~~~~~~~~~~~~~~~\n/tmp/tmpvsc11tuh.swift:68:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var currentMax = numbers[0]\n\
    \    for number in numbers {\n        if number > currentMax {\n            currentMax\
    \ = number\n        }\n    }\n    max = append(max, currentMax)\n    for number\
    \ in numbers {\n        if number > currentMax {\n            currentMax = number\n\
    \        }\n    }\n    max = append(max, currentMax)\n    return max\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmp3f400hj3.swift:12:11: error: cannot find 'append' in scope\n  \
    \  max = append(max, currentMax)\n          ^~~~~~\n/tmp/tmp3f400hj3.swift:18:11:\
    \ error: cannot find 'append' in scope\n    max = append(max, currentMax)\n  \
    \        ^~~~~~\n"
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max_numbers = [Int]()\n    var max_number = numbers[0]\n\
    \    for number in numbers {\n        if number > max_number {\n            max_number\
    \ = number\n        }\n    }\n    max_numbers.append(max_number)\n    return max_numbers\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab60949dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab609194561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab609194286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab60919413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab609193bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab608f93e83 <unavailable> + 188035

    6    tmpn3b1nqob                        0x0000558558f89a5f <unavailable> + 6751

    7    tmpn3b1nqob                        0x0000558558f8952d <unavailable> + 5421

    8    libc.so.6                          0x00002ab609689460 __libc_start_main +
    245

    9    tmpn3b1nqob                        0x0000558558f89239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n    \
    \    if number > max[0] {\n            max = [number]\n        } else {\n    \
    \        max = append(max, number)\n        }\n    }\n    return max\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpal1cekva.swift:10:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659980009
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n    \
    \    if number > max[0] {\n            max = [number]\n        } else {\n    \
    \        max = append(max, number)\n        }\n    }\n    return max\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpal1cekva.swift:10:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n    \
    \    if number > max[0] {\n            max = [number]\n        } else {\n    \
    \        max = append(max, number)\n        }\n    }\n    return max\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpal1cekva.swift:10:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max_elements = [Int]()\n    var max_number = numbers[0]\n\
    \    for number in numbers {\n        if number > max_number {\n            max_elements.append(max_number)\n\
    \            max_number = number\n        } else {\n            max_number = number\n\
    \        }\n    }\n    max_elements.append(max_number)\n    return max_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002af576297c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af575f8e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af575f8e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af575f8e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af575f8dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002af575d8de83 <unavailable> + 188035

    6    tmp_18ubv8f                        0x000055a8e4b92a5f <unavailable> + 6751

    7    tmp_18ubv8f                        0x000055a8e4b9252d <unavailable> + 5421

    8    libc.so.6                          0x00002af576483460 __libc_start_main +
    245

    9    tmp_18ubv8f                        0x000055a8e4b92239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex++\n        }\n    }\n    return max\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpja9s8d3o.swift:10:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            maxIndex++\n                    ^~\n"
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex++\n        }\n    }\n    return max\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpja9s8d3o.swift:10:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            maxIndex++\n                    ^~\n"
  stdout: ''
  timestamp: 1659980009
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n    \
    \    if number > max[0] {\n            max = [number]\n        } else {\n    \
    \        max = append(max, number)\n        }\n    }\n    return max\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpal1cekva.swift:10:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n    \
    \    if number > max[0] {\n            max = [number]\n        } else {\n    \
    \        max = append(max, number)\n        }\n    }\n    return max\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpal1cekva.swift:10:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var max: Int = 0\n    for number\
    \ in numbers {\n        if number > max {\n            max = number\n        }\n\
    \    }\n    for number in numbers {\n        if number > max {\n            result.append(number)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'tmp6jnsryn2/tmp6jnsryn2.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f9e7ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f9e4e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f9e4e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f9e4e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6jnsryn2                        0x00005581645336cd <unavailable> + 5837

    5    libc.so.6                          0x00002b4f9e9d8460 __libc_start_main +
    245

    6    tmp6jnsryn2                        0x00005581645331e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = numbers[0]\n    var rolling_max = numbers[0]\n\
    \    for i in 1..<numbers.count {\n        if numbers[i] > max {\n           \
    \ max = numbers[i]\n            rolling_max = numbers[i]\n        } else {\n \
    \           rolling_max = max(rolling_max, numbers[i])\n        }\n    }\n   \
    \ return [rolling_max]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpdu17jcby.swift:12:27: error: cannot call value of non-function\
    \ type 'Int'\n            rolling_max = max(rolling_max, numbers[i])\n       \
    \                   ^\n"
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = numbers[0]\n    var maxIndex = -1\n    for\
    \ number in numbers {\n        if number > max {\n            max = number\n \
    \           maxIndex = numbers.indexOf(max)\n        }\n    }\n    return maxIndex\
    \ == -1 ? [] : numbers[maxIndex..<numbers.count]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: SyntaxError
  stderr: "/tmp/tmp3iwxaudl.swift:10:32: error: value of type '[Int]' has no member\
    \ 'indexOf'\n            maxIndex = numbers.indexOf(max)\n                   \
    \    ~~~~~~~ ^~~~~~~\n/tmp/tmp3iwxaudl.swift:13:27: error: cannot convert return\
    \ expression of type 'ArraySlice<Int>' to return type '[Int]'\n    return maxIndex\
    \ == -1 ? [] : numbers[maxIndex..<numbers.count]\n           ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = numbers[0]\n    var rolling_max = numbers[0]\n\
    \    for i in 1..<numbers.count {\n        if numbers[i] > max {\n           \
    \ max = numbers[i]\n            rolling_max = numbers[i]\n        } else {\n \
    \           rolling_max = max(rolling_max, numbers[i])\n        }\n    }\n   \
    \ return [rolling_max]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpdu17jcby.swift:12:27: error: cannot call value of non-function\
    \ type 'Int'\n            rolling_max = max(rolling_max, numbers[i])\n       \
    \                   ^\n"
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    var maxValue\
    \ = numbers[0]\n    for number in numbers {\n        if number > maxValue {\n\
    \            maxValue = number\n            maxIndex = number\n        }\n   \
    \ }\n    for number in numbers {\n        if number == maxValue {\n          \
    \  max.append(maxIndex)\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adf9ec6cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf9e963561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adf9e963286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adf9e96313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adf9e962bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adf9e762e83 <unavailable> + 188035

    6    tmp8vhjto3c                        0x000055a47661aaa3 <unavailable> + 6819

    7    tmp8vhjto3c                        0x000055a47661a52d <unavailable> + 5421

    8    libc.so.6                          0x00002adf9ee58460 __libc_start_main +
    245

    9    tmp8vhjto3c                        0x000055a47661a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n    \
    \    if number > max[0] {\n            max = [number]\n        } else {\n    \
    \        max = append(max, number)\n        }\n    }\n    return max\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpal1cekva.swift:10:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n    \
    \    if max != nil {\n            if number > max[0] {\n                max =\
    \ [number]\n            } else {\n                max.append(number)\n       \
    \     }\n        } else {\n            max = [number]\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers: []\
    \ as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f33138c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f32e2f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2f32e2f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2f32e2f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2f32e2ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2f32c2ee83 <unavailable> + 188035

    6    tmpskjte99o                        0x000056076e3d2b5a <unavailable> + 7002

    7    tmpskjte99o                        0x000056076e3d2635 <unavailable> + 5685

    8    libc.so.6                          0x00002b2f33324460 __libc_start_main +
    245

    9    tmpskjte99o                        0x000056076e3d2239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var currentMax = numbers[0]\n\
    \    for number in numbers {\n        if number > currentMax {\n            currentMax\
    \ = number\n        }\n    }\n    max = append(max, currentMax)\n    for number\
    \ in numbers {\n        if number > currentMax {\n            currentMax = number\n\
    \        }\n    }\n    max = append(max, currentMax)\n    return max\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmp3f400hj3.swift:12:11: error: cannot find 'append' in scope\n  \
    \  max = append(max, currentMax)\n          ^~~~~~\n/tmp/tmp3f400hj3.swift:18:11:\
    \ error: cannot find 'append' in scope\n    max = append(max, currentMax)\n  \
    \        ^~~~~~\n"
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n    \
    \    if number > max[0] {\n            max = [number]\n        } else {\n    \
    \        max = append(max, number)\n        }\n    }\n    return max\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpal1cekva.swift:10:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max_so_far = numbers[0]\n    var max_so_far_rolling_max\
    \ = numbers[0]\n    for number in numbers {\n        if number > max_so_far {\n\
    \            max_so_far = number\n            max_so_far_rolling_max = number\n\
    \        }\n        if number > max_so_far_rolling_max {\n            max_so_far_rolling_max\
    \ = number\n        }\n    }\n    return [max_so_far_rolling_max, max_so_far]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b71bfdd2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b71bfac9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b71bfac9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b71bfac913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b71bfac8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b71bf8c8e83 <unavailable> + 188035

    6    tmpi84b9y0l                        0x0000556230c7c9a2 <unavailable> + 6562

    7    tmpi84b9y0l                        0x0000556230c7c47d <unavailable> + 5245

    8    libc.so.6                          0x00002b71bffbe460 __libc_start_main +
    245

    9    tmpi84b9y0l                        0x0000556230c7c189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    var maxValue\
    \ = numbers[0]\n    for i in numbers {\n        if i > maxValue {\n          \
    \  maxValue = i\n            maxIndex = i\n        }\n    }\n    for i in numbers\
    \ {\n        if i == maxValue {\n            max[maxIndex] = i\n            maxIndex++\n\
    \        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpt7gvw48j.swift:17:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            maxIndex++\n                    ^~\n"
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n    \
    \    if number > max[0] {\n            max = [number]\n        } else {\n    \
    \        max = append(max, number)\n        }\n    }\n    return max\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpal1cekva.swift:10:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659980009
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n    \
    \    if number > max[0] {\n            max = [number]\n        } else {\n    \
    \        max = append(max, number)\n        }\n    }\n    return max\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpal1cekva.swift:10:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var currentMax = 0\n    for number\
    \ in numbers {\n        if number > currentMax {\n            currentMax = number\n\
    \        }\n    }\n    max = append(max, currentMax)\n    for number in numbers\
    \ {\n        if number > currentMax {\n            currentMax = number\n     \
    \   }\n    }\n    max = append(max, currentMax)\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: SyntaxError
  stderr: "/tmp/tmp85da3qdv.swift:12:11: error: cannot find 'append' in scope\n  \
    \  max = append(max, currentMax)\n          ^~~~~~\n/tmp/tmp85da3qdv.swift:18:11:\
    \ error: cannot find 'append' in scope\n    max = append(max, currentMax)\n  \
    \        ^~~~~~\n"
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = numbers[0]\n    var maxIndex = 0\n    for index\
    \ in 1..<numbers.count {\n        if numbers[index] > max {\n            max =\
    \ numbers[index]\n            maxIndex = index\n        }\n    }\n    return Array(numbers[0..<maxIndex])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b1856d3fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1856a36561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b1856a36286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b1856a3613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1856a35bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b1856835e83 <unavailable> + 188035

    6    tmpviygjsix                        0x000055b5b1bb3b78 <unavailable> + 7032

    7    tmpviygjsix                        0x000055b5b1bb364d <unavailable> + 5709

    8    libc.so.6                          0x00002b1856f2b460 __libc_start_main +
    245

    9    tmpviygjsix                        0x000055b5b1bb3359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659980010
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    var maxValue\
    \ = numbers[0]\n    for number in numbers {\n        if number > maxValue {\n\
    \            maxValue = number\n            maxIndex = number\n        }\n   \
    \ }\n    for number in numbers {\n        if number == maxValue {\n          \
    \  max[maxIndex] = number\n            maxIndex += 1\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers: []\
    \ as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cf72e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cf6fd8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5cf6fd8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5cf6fd813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5cf6fd7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b5cf6dd7e83 <unavailable> + 188035

    6    tmpkk1wxdso                        0x00005566d1267aa3 <unavailable> + 6819

    7    tmpkk1wxdso                        0x00005566d126752d <unavailable> + 5421

    8    libc.so.6                          0x00002b5cf74cd460 __libc_start_main +
    245

    9    tmpkk1wxdso                        0x00005566d1267239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980010
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex++\n        }\n    }\n    return max\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpja9s8d3o.swift:10:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            maxIndex++\n                    ^~\n"
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var result: [Int] = []\n    var max: Int = 0\n    for\
    \ number in numbers {\n        if number > max {\n            max = number\n \
    \       }\n    }\n    for number in numbers {\n        if number > max {\n   \
    \         result.append(max)\n        }\n        max = number\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'tmp9t7a2ksa/tmp9t7a2ksa.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53db4cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53db1c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53db1c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53db1c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9t7a2ksa                        0x000055b04ff7466d <unavailable> + 5741

    5    libc.so.6                          0x00002b53db6b7460 __libc_start_main +
    245

    6    tmp9t7a2ksa                        0x000055b04ff74189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659980010
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var currentMax = 0\n    for number\
    \ in numbers {\n        if number > currentMax {\n            currentMax = number\n\
    \        }\n    }\n    max = append(max, currentMax)\n    for number in numbers\
    \ {\n        if number > currentMax {\n            currentMax = number\n     \
    \   }\n        if number == currentMax {\n            max = append(max, currentMax)\n\
    \        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpv3ee28g1.swift:12:11: error: cannot find 'append' in scope\n  \
    \  max = append(max, currentMax)\n          ^~~~~~\n/tmp/tmpv3ee28g1.swift:18:19:\
    \ error: cannot find 'append' in scope\n            max = append(max, currentMax)\n\
    \                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var result: [Int] = []\n    var max: Int = 0\n    for\
    \ number in numbers {\n        if number > max {\n            max = number\n \
    \       }\n    }\n    for number in numbers {\n        if number > max {\n   \
    \         result.append(max)\n            max = number\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'tmpjnr3utrh/tmpjnr3utrh.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeeac59bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeeac292b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeeac292988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeeac2917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjnr3utrh                        0x000055a21e2db66d <unavailable> + 5741

    5    libc.so.6                          0x00002aeeac787460 __libc_start_main +
    245

    6    tmpjnr3utrh                        0x000055a21e2db189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659980010
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var result: [Int] = []\n    var max: Int = 0\n    for\
    \ number in numbers {\n        if number > max {\n            max = number\n \
    \       }\n    }\n    for number in numbers {\n        if number == max {\n  \
    \          result.append(number)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'tmp_drqqmyj/tmp_drqqmyj.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2fd1215c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2fd0f0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2fd0f0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2fd0f0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_drqqmyj                        0x000055e76554166d <unavailable> + 5741

    5    libc.so.6                          0x00002b2fd1401460 __libc_start_main +
    245

    6    tmp_drqqmyj                        0x000055e765541189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659980010
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max_so_far = numbers[0]\n    var max_so_far_index\
    \ = 0\n    var max_so_far_rolling_max = numbers[0]\n    for index in 1..<numbers.count\
    \ {\n        if numbers[index] > max_so_far {\n            max_so_far = numbers[index]\n\
    \            max_so_far_index = index\n            max_so_far_rolling_max = numbers[index]\n\
    \        } else {\n            max_so_far_rolling_max = max(numbers[index], max_so_far_rolling_max)\n\
    \        }\n    }\n    return [max_so_far, max_so_far_index, max_so_far_rolling_max]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b4324f30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4324c27561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4324c27286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b4324c2713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4324c26bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b4324a26e83 <unavailable> + 188035

    6    tmpk27m7oi3                        0x00005615aa312ac8 <unavailable> + 6856

    7    tmpk27m7oi3                        0x00005615aa31258d <unavailable> + 5517

    8    libc.so.6                          0x00002b432511c460 __libc_start_main +
    245

    9    tmpk27m7oi3                        0x00005615aa312299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659980010
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var currentMax = 0\n    for number\
    \ in numbers {\n        if number > currentMax {\n            currentMax = number\n\
    \        }\n    }\n    max = append(max, currentMax)\n    return max\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpzvvney7g.swift:12:11: error: cannot find 'append' in scope\n  \
    \  max = append(max, currentMax)\n          ^~~~~~\n"
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var currentMax = 0\n    for number\
    \ in numbers {\n        if number > currentMax {\n            currentMax = number\n\
    \        }\n        if number == currentMax {\n            max.append(number)\n\
    \        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'tmp7svm34yz/tmp7svm34yz.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b66937f0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66934e7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b66934e7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b66934e67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7svm34yz                        0x0000564c63f22816 <unavailable> + 6166

    5    libc.so.6                          0x00002b66939dc460 __libc_start_main +
    245

    6    tmp7svm34yz                        0x0000564c63f221e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659980010
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = numbers[0]\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max {\n            max = number\n        \
    \    maxIndex = numbers.indexOf(max)\n        }\n    }\n    return Array(numbers[0..<maxIndex])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpbcae774t.swift:10:32: error: value of type '[Int]' has no member\
    \ 'indexOf'\n            maxIndex = numbers.indexOf(max)\n                   \
    \    ~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n    \
    \    if number > max[0] {\n            max = [number]\n        } else {\n    \
    \        max = append(max, number)\n        }\n    }\n    return max\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpal1cekva.swift:10:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n    \
    \    if number > max[0] {\n            max = [number]\n        } else {\n    \
    \        max = append(max, number)\n        }\n    }\n    return max\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpal1cekva.swift:10:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var result: [Int] = []\n    var max: Int = 0\n    for\
    \ number in numbers {\n        if number > max {\n            max = number\n \
    \       }\n    }\n    for number in numbers {\n        if number > max {\n   \
    \         result.append(number)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'tmpdkevfzxb/tmpdkevfzxb.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002accbd8e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002accbd5d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002accbd5d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002accbd5d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdkevfzxb                        0x000056231ca2566d <unavailable> + 5741

    5    libc.so.6                          0x00002accbdacd460 __libc_start_main +
    245

    6    tmpdkevfzxb                        0x000056231ca25189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659980010
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = numbers[0]\n    var rolling_max = numbers[0]\n\
    \    for number in numbers {\n        if number > max {\n            max = number\n\
    \        }\n        if number > rolling_max {\n            rolling_max = number\n\
    \        }\n    }\n    return [rolling_max, max]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b1cee1f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1cedeef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b1cedeef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b1cedeef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1cedeeebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b1cedceee83 <unavailable> + 188035

    6    tmpv1satayo                        0x000055bbdbefa9a2 <unavailable> + 6562

    7    tmpv1satayo                        0x000055bbdbefa47d <unavailable> + 5245

    8    libc.so.6                          0x00002b1cee3e4460 __libc_start_main +
    245

    9    tmpv1satayo                        0x000055bbdbefa189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659980010
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n    \
    \    if max != nil {\n            if number > max[0] {\n                max =\
    \ [number]\n            } else {\n                max = [number] + max\n     \
    \       }\n        } else {\n            max = [number]\n        }\n    }\n  \
    \  return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b34c4529c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34c4220561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b34c4220286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b34c422013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b34c421fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b34c401fe83 <unavailable> + 188035

    6    tmprihtw3t0                        0x0000559ec46adb57 <unavailable> + 6999

    7    tmprihtw3t0                        0x0000559ec46ad635 <unavailable> + 5685

    8    libc.so.6                          0x00002b34c4715460 __libc_start_main +
    245

    9    tmprihtw3t0                        0x0000559ec46ad239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980010
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n    \
    \    if number > max[0] {\n            max = [number]\n        } else {\n    \
    \        max = append(max, number)\n        }\n    }\n    return max\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpal1cekva.swift:10:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var result: [Int] = []\n    var max: Int = 0\n    for\
    \ number in numbers {\n        if number > max {\n            max = number\n \
    \       }\n    }\n    for number in numbers {\n        if number > max {\n   \
    \         result.append(max)\n            max = number\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'tmpjnr3utrh/tmpjnr3utrh.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeeac59bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeeac292b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeeac292988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeeac2917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjnr3utrh                        0x000055a21e2db66d <unavailable> + 5741

    5    libc.so.6                          0x00002aeeac787460 __libc_start_main +
    245

    6    tmpjnr3utrh                        0x000055a21e2db189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659980010
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = numbers[0]\n    var rolling_max = numbers[0]\n\
    \    for number in numbers {\n        if number > max {\n            max = number\n\
    \        }\n        if number > rolling_max {\n            rolling_max = number\n\
    \        }\n    }\n    return rolling_max\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: SyntaxError
  stderr: "/tmp/tmpd4coblui.swift:15:12: error: cannot convert return expression of\
    \ type 'Int' to return type '[Int]'\n    return rolling_max\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659980010
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n    \
    \    if number > max[0] {\n            max = [number]\n        } else {\n    \
    \        max = append(max, number)\n        }\n    }\n    return max\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpal1cekva.swift:10:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    var maxValue\
    \ = numbers[0]\n    for number in numbers {\n        if number > maxValue {\n\
    \            maxValue = number\n            maxIndex = number\n        }\n   \
    \ }\n    for number in numbers {\n        if number == maxValue {\n          \
    \  max = append(max, maxIndex)\n        }\n    }\n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpmcz7gcli.swift:16:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, maxIndex)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659980010
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n    \
    \    if number > max[0] {\n            max = [number]\n        } else {\n    \
    \        max = append(max, number)\n        }\n    }\n    return max\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpal1cekva.swift:10:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    var maxValue\
    \ = numbers[0]\n    for number in numbers {\n        if number > maxValue {\n\
    \            maxValue = number\n            maxIndex = number\n        }\n   \
    \ }\n    max = append(max, maxValue)\n    for number in numbers {\n        if\
    \ number == maxValue {\n            max = append(max, maxValue)\n        } else\
    \ {\n            max = append(max, number)\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmphg988wvb.swift:14:11: error: cannot find 'append' in scope\n  \
    \  max = append(max, maxValue)\n          ^~~~~~\n/tmp/tmphg988wvb.swift:17:19:\
    \ error: cannot find 'append' in scope\n            max = append(max, maxValue)\n\
    \                  ^~~~~~\n/tmp/tmphg988wvb.swift:19:19: error: cannot find 'append'\
    \ in scope\n            max = append(max, number)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659980010
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var currentMax = 0\n    for number\
    \ in numbers {\n        currentMax = max(currentMax, number)\n        max = append(max,\
    \ currentMax)\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: SyntaxError
  stderr: "/tmp/tmpba0stgy_.swift:8:22: error: cannot call value of non-function type\
    \ '[Int]'\n        currentMax = max(currentMax, number)\n                    \
    \ ^\n/tmp/tmpba0stgy_.swift:9:15: error: cannot find 'append' in scope\n     \
    \   max = append(max, currentMax)\n              ^~~~~~\n"
  stdout: ''
  timestamp: 1659980010
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n    \
    \    if number > max[0] {\n            max = [number]\n        } else {\n    \
    \        max = append(max, number)\n        }\n    }\n    return max\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpal1cekva.swift:10:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var max = 0\n    for number\
    \ in numbers {\n        if number > max {\n            max = number\n        }\n\
    \    }\n    for number in numbers {\n        if number == max {\n            result.append(number)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'tmp4rkprksi/tmp4rkprksi.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb7b040c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb7ad37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb7ad37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb7ad367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4rkprksi                        0x00005637041b96cd <unavailable> + 5837

    5    libc.so.6                          0x00002afb7b22c460 __libc_start_main +
    245

    6    tmp4rkprksi                        0x00005637041b91e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659980010
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex++\n        }\n    }\n    return max\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpja9s8d3o.swift:10:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            maxIndex++\n                    ^~\n"
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = numbers[0]\n    var rolling_max = numbers[0]\n\
    \    for i in 1..<numbers.count {\n        if numbers[i] > max {\n           \
    \ max = numbers[i]\n            rolling_max = max\n        } else {\n        \
    \    rolling_max = max(rolling_max, max)\n        }\n    }\n    return rolling_max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmput7ckbkr.swift:12:27: error: cannot call value of non-function\
    \ type 'Int'\n            rolling_max = max(rolling_max, max)\n              \
    \            ^\n/tmp/tmput7ckbkr.swift:15:12: error: cannot convert return expression\
    \ of type 'Int' to return type '[Int]'\n    return rolling_max\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659980010
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    var currentMax\
    \ = 0\n    for number in numbers {\n        if number > currentMax {\n       \
    \     max[maxIndex] = number\n            maxIndex += 1\n            currentMax\
    \ = number\n        } else {\n            currentMax = number\n        }\n   \
    \ }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b23141ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2313ee2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2313ee2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2313ee213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2313ee1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2313ce17ec <unavailable> + 186348

    6    tmpq9jzq1x8                        0x000055e817feaaf6 <unavailable> + 6902

    7    tmpq9jzq1x8                        0x000055e817fea5e5 <unavailable> + 5605

    8    libc.so.6                          0x00002b23143d7460 __libc_start_main +
    245

    9    tmpq9jzq1x8                        0x000055e817fea1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659980010
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\nfunc rolling_max(numbers:\
    \ [Int]) -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ee4f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ee1ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ee1ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ee1ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ee1eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b36edfeee83 <unavailable> + 188035

    6    tmpf7c942qr                        0x0000560ebbc8ab1d <unavailable> + 6941

    7    tmpf7c942qr                        0x0000560ebbc8a635 <unavailable> + 5685

    8    libc.so.6                          0x00002b36ee6e4460 __libc_start_main +
    245

    9    tmpf7c942qr                        0x0000560ebbc8a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659980009
