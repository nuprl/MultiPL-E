language: swift
name: HumanEval_70_strange_sort_list
results:
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int = 0\n    var max:\
    \ Int = 0\n    for num in lst {\n        if min > num {\n            min = num\n\
    \        }\n        if max < num {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if min > num {\n            min = num\n       \
    \ }\n        if max < num {\n            max = num\n        }\n    }\n    for\
    \ num in lst {\n        if min > num {\n            min = num\n        }\n   \
    \     if max < num {\n            max = num\n        }\n    }\n    for num in\
    \ lst {\n        if min > num {\n            min = num\n        }\n        if\
    \ max < num {\n            max = num\n        }\n    }\n    for num in lst {\n\
    \        if min > num {\n            min = num\n        }\n        if max < num\
    \ {\n            max = num\n        }\n    }\n    for num in lst {\n        if\
    \ min > num {\n            min = num\n        }\n        if max < num {\n    \
    \        max = num\n        }\n    }\n    for num in lst {\n        if min > num\
    \ {\n            min = num\n        }\n        if max < num {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if min > num {\n    \
    \        min = num\n        }\n        if max < num {\n            max = num\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            max = num\n        }\n\
    \    }\n    for num in lst {\n        if min > num {\n            min = num\n\
    \        }\n        if max < num {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if min > num {\n            min = num\n       \
    \ }\n        if max < num {\n            max = num\n        }\n    }\n    for\
    \ num in lst {\n        if min > num {\n            min = num\n        }\n   \
    \     if max < num {\n            max = num\n        }\n    }\n    for num in\
    \ lst {\n        if min > num {\n            min = num\n        }\n        if\
    \ max < num {\n            max = num\n        }\n    }\n    for num in lst {\n\
    \        if min > num {\n            min = num\n        }\n        if max < num\
    \ {\n            max = num\n        }\n    }\n    for num in lst {\n        if\
    \ min > num {\n            min = num\n        }\n        if max < num {\n    \
    \        max = num\n        }\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpb9ansatr.swift:153:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmpb9ansatr.swift:6:45: note: to match this\
    \ opening '{'\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n               \
    \                             ^\n/tmp/tmpb9ansatr.swift:133:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpb9ansatr.swift:7:9: warning:\
    \ initialization of variable 'result' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var result = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int = Int.max\n  \
    \  var max: Int = Int.min\n    for el in lst {\n        if el < min {\n      \
    \      min = el\n        }\n        if el > max {\n            max = el\n    \
    \    }\n    }\n    for el in lst {\n        if el == min {\n            result.insert(el,\
    \ at: 0)\n        } else if el == max {\n            result.insert(el, at: result.count\
    \ - 1)\n        } else {\n            result.insert(el, at: result.count - 1)\n\
    \            result.insert(el, at: 0)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmpav5zeres/tmpav5zeres.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab77802bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab777d22b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab777d22988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab777d217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpav5zeres                        0x0000561c698ba654 <unavailable> + 5716

    5    libc.so.6                          0x00002ab778217460 __libc_start_main +
    245

    6    tmpav5zeres                        0x0000561c698ba249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int = Int.max\n  \
    \  for el in lst {\n        if el < min {\n            min = el\n        }\n \
    \   }\n    for el in lst {\n        if el == min {\n            continue\n   \
    \     }\n        if el > min {\n            result.insert(el, at: 0)\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpmijqwjoh/tmpmijqwjoh.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade49b52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade49849b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade49849988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade498487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmijqwjoh                        0x0000564b35a045f4 <unavailable> + 5620

    5    libc.so.6                          0x00002ade49d3e460 __libc_start_main +
    245

    6    tmpmijqwjoh                        0x0000564b35a041e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min = lst[0]\n    var max\
    \ = lst[0]\n    for x in lst {\n        if x < min {\n            min = x\n  \
    \      }\n        if x > max {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == min {\n            result.insert(x, at: 0)\n   \
    \     }\n        if x == max {\n            result.insert(x, at: result.count\
    \ - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp_dmknh6d/tmp_dmknh6d.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2c9602c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2c92f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2c92f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2c92f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_dmknh6d                        0x0000563d288e56a4 <unavailable> + 5796

    5    libc.so.6                          0x00002ba2c97ee460 __libc_start_main +
    245

    6    tmp_dmknh6d                        0x0000563d288e5299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int = 0\n    var max:\
    \ Int = 0\n    for el in lst {\n        if el < min {\n            min = el\n\
    \        }\n        if el > max {\n            max = el\n        }\n    }\n  \
    \  for el in lst {\n        if el < min {\n            result.insert(el, at: 0)\n\
    \        }\n        if el > max {\n            result.insert(el, at: result.count\
    \ - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp1pr7ssiv/tmp1pr7ssiv.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac099bfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0998f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0998f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0998f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1pr7ssiv                        0x000055a9c0fb6654 <unavailable> + 5716

    5    libc.so.6                          0x00002ac099de8460 __libc_start_main +
    245

    6    tmp1pr7ssiv                        0x000055a9c0fb6249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    for _ in 0..<lst.count {\n      \
    \  lst2.remove(at: 0)\n    }\n    return lst2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp75b_yhig/tmp75b_yhig.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0046acbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00467c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00467c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00467c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp75b_yhig                        0x00005602e25eb614 <unavailable> + 5652

    5    libc.so.6                          0x00002b0046cb7460 __libc_start_main +
    245

    6    tmp75b_yhig                        0x00005602e25eb209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int = 0\n    var max:\
    \ Int = 0\n    for num in lst {\n        if num < min {\n            min = num\n\
    \        }\n        if num > max {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if num == min {\n            result.insert(num,\
    \ at: 0)\n        }\n        if num == max {\n            result.insert(num, at:\
    \ result.count - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/Array.swift:419: Fatal error: Negative Array index is out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e49505c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e491fc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6e491fc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6e491fc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6e491fbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b6e491e5196 <unavailable> + 1339798

    6    libswiftCore.so                    0x00002b6e491e9020 Array.insert(_:at:)
    + 80

    7    tmpgxd3b6zm                        0x0000556ada0cd45e <unavailable> + 9310

    8    tmpgxd3b6zm                        0x0000556ada0cc56c <unavailable> + 5484

    9    libc.so.6                          0x00002b6e496f1460 __libc_start_main +
    245

    10   tmpgxd3b6zm                        0x0000556ada0cc249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int = 0\n    var max:\
    \ Int = 0\n    for num in lst {\n        if num < min {\n            min = num\n\
    \        }\n        if num > max {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if num == min {\n            result.insert(num,\
    \ at: 0)\n        }\n        if num == max {\n            result.insert(num, at:\
    \ result.count - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/Array.swift:419: Fatal error: Negative Array index is out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e49505c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e491fc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6e491fc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6e491fc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6e491fbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b6e491e5196 <unavailable> + 1339798

    6    libswiftCore.so                    0x00002b6e491e9020 Array.insert(_:at:)
    + 80

    7    tmpgxd3b6zm                        0x0000556ada0cd45e <unavailable> + 9310

    8    tmpgxd3b6zm                        0x0000556ada0cc56c <unavailable> + 5484

    9    libc.so.6                          0x00002b6e496f1460 __libc_start_main +
    245

    10   tmpgxd3b6zm                        0x0000556ada0cc249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int = 0\n    var max:\
    \ Int = 0\n    for number in lst {\n        if number > max {\n            max\
    \ = number\n        }\n        if number < min {\n            min = number\n \
    \       }\n    }\n    for number in lst {\n        if number > max {\n       \
    \     max = number\n        }\n        if number < min {\n            min = number\n\
    \        }\n    }\n    for number in lst {\n        if number > max {\n      \
    \      max = number\n        }\n        if number < min {\n            min = number\n\
    \        }\n    }\n    for number in lst {\n        if number > max {\n      \
    \      max = number\n        }\n        if number < min {\n            min = number\n\
    \        }\n    }\n    for number in lst {\n        if number > max {\n      \
    \      max = number\n        }\n        if number < min {\n            min = number\n\
    \        }\n    }\n    for number in lst {\n        if number > max {\n      \
    \      max = number\n        }\n        if number < min {\n            min = number\n\
    \        }\n    }\n    for number in lst {\n        if number > max {\n      \
    \      max = number\n        }\n        if number < min {\n            min = number\n\
    \        }\n    }\n    for number in lst {\n        if number > max {\n      \
    \      max = number\n        }\n        if number < min {\n            min = number\n\
    \        }\n    }\n    for number in lst {\n        if number > max {\n      \
    \      max = number\n        }\n        if number < min {\n            min = number\n\
    \        }\n    }\n    for number in lst {\n        if number > max {\n      \
    \      max = number\n        }\n        if number < min {\n            min = number\n\
    \        }\n    }\n    for number in lst {\n        if number > max {\n      \
    \      max = number\n        }\n        if number < min {\n            min = number\n\
    \        }\n    }\n    for number in lst {\n        if number > max {\n      \
    \      max = number\n        }\n        if number < min {\n            min = number\n\
    \        }\n    }\n    for number in lst {\n        if number > max {\n      \
    \      max = number\n        }\n        if number < min {\n            min = number\n\
    \        }\n    }\n    for number in lst {\n        if number > max {\n      \
    \      max = number\n        }\n        if number < min {\n            min = number\n\
    \        }\n    }\n    for number in lst {\n        if number > max {\n      \
    \      max = number\n        }\n        if number < min {\n            min = number\n\
    \        }\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp6iz66nl5.swift:153:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmp6iz66nl5.swift:6:45: note: to match this\
    \ opening '{'\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n               \
    \                             ^\n/tmp/tmp6iz66nl5.swift:133:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmp6iz66nl5.swift:7:9: warning:\
    \ initialization of variable 'result' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var result = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1660028606
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    for _ in 0..<(lst2.count - 1) {\n\
    \        lst2.remove(at: 0)\n    }\n    for _ in 0..<(lst2.count - 1) {\n    \
    \    lst2.remove(at: lst2.count - 1)\n    }\n    for _ in 0..<(lst2.count - 1)\
    \ {\n        lst2.remove(at: lst2.count - 2)\n    }\n    for _ in 0..<(lst2.count\
    \ - 1) {\n        lst2.remove(at: lst2.count - 3)\n    }\n    for _ in 0..<(lst2.count\
    \ - 1) {\n        lst2.remove(at: lst2.count - 4)\n    }\n    for _ in 0..<(lst2.count\
    \ - 1) {\n        lst2.remove(at: lst2.count - 5)\n    }\n    for _ in 0..<(lst2.count\
    \ - 1) {\n        lst2.remove(at: lst2.count - 6)\n    }\n    for _ in 0..<(lst2.count\
    \ - 1) {\n        lst2.remove(at: lst2.count - 7)\n    }\n    for _ in 0..<(lst2.count\
    \ - 1) {\n        lst2.remove(at: lst2.count - 8)\n    }\n    for _ in 0..<(lst2.count\
    \ - 1) {\n        lst2.remove(at: lst2.count - 9)\n    }\n    for _ in 0..<(lst2.count\
    \ - 1) {\n        lst2.remove(at: lst2.count - 10)\n    }\n    for _ in 0..<(lst2.count\
    \ - 1) {\n        lst2.remove(at: lst2.count - 11)\n    }\n    for _ in 0..<(lst2.count\
    \ - 1) {\n        lst2.remove(at: lst2.count - 12)\n    }\n    for _ in 0..<(lst2.count\
    \ - 1) {\n        lst2.remove(at: lst2.count - 13)\n    }\n    for _ in 0..<(lst2.count\
    \ - 1) {\n        lst2.remove(at: lst2.count - 14)\n    }\n    for _ in 0..<(lst2.count\
    \ - 1) {\n        lst2.remove(at: lst2.count - 15)\n    }\n    for _ in 0..<(lst2.count\
    \ - 1) {\n        lst2.remove(at: lst2.count - 16)\n    }\n    for _ in 0..<(lst2.count\
    \ - 1) {\n        lst2.remove(at: lst2.count - 17)\n    }\n    for _ in 0..<(lst2.count\
    \ - 1) {\n        lst2.remove(at: lst2.count - 18)\n    }\n    for _ in 0..<(lst2.count\
    \ - 1) {\n        lst2.remove(at\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpg34u6o3v.swift:67:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpg34u6o3v.swift:66:20: note: to match this opening '('\n        lst2.remove(at\n\
    \                   ^\n/tmp/tmpg34u6o3v.swift:90:53: error: expected '}' at end\
    \ of brace statement\nassert(strange_sort_list(lst: [111111]) == [111111])\n \
    \                                                   ^\n/tmp/tmpg34u6o3v.swift:6:45:\
    \ note: to match this opening '{'\nfunc strange_sort_list(lst: [Int]) -> [Int]\
    \ {\n                                            ^\n/tmp/tmpg34u6o3v.swift:66:21:\
    \ error: cannot find 'at' in scope\n        lst2.remove(at\n                 \
    \   ^~\n/tmp/tmpg34u6o3v.swift:66:14: error: no exact matches in call to instance\
    \ method 'remove'\n        lst2.remove(at\n             ^\n/tmp/tmpg34u6o3v.swift:66:14:\
    \ note: found candidate with type '(Int) -> Int'\n        lst2.remove(at\n   \
    \          ^\n/tmp/tmpg34u6o3v.swift:70:6: error: operator functions can only\
    \ be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660028606
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int = lst[0]\n   \
    \ var max: Int = lst[0]\n    for x in lst {\n        if x < min {\n          \
    \  min = x\n        }\n        if x > max {\n            max = x\n        }\n\
    \    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ 0)\n        }\n        if x == max {\n            result.insert(x, 0)\n    \
    \    }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ 0)\n        }\n        if x == max {\n            result.insert(x, 0)\n    \
    \    }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ 0)\n        }\n        if x == max {\n            result.insert(x, 0)\n    \
    \    }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ 0)\n        }\n        if x == max {\n            result.insert(x, 0)\n    \
    \    }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ 0)\n        }\n        if x == max {\n            result.insert(x, 0)\n    \
    \    }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ 0)\n        }\n        if x == max {\n            result.insert(x, 0)\n    \
    \    }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ 0)\n        }\n        if x == max {\n            result.insert(x, 0)\n    \
    \    }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ 0)\n        }\n        if x == max {\n            result.insert(x, 0)\n    \
    \    }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ 0)\n        }\n        if x == max {\n            result.insert(x, 0)\n    \
    \    }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ 0)\n        }\n        if x == max {\n            result.insert(x, 0)\n    \
    \    }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ 0)\n        }\n        if x == max {\n            result.insert(x, 0)\n    \
    \    }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ 0)\n        }\n        if x == max {\n            result.insert(x, 0)\n    \
    \    }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ 0)\n        }\n        if x == max {\n            result.insert(x, 0)\n    \
    \    }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ 0)\n        }\n        if x == max {\n            result.insert(x, 0)\n    \
    \    }\n    }\n    for x in lst {\n        if x == min {\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp0zao6ol_.swift:156:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmp0zao6ol_.swift:130:18: note: to match\
    \ this opening '{'\n    for x in lst {\n                 ^\n/tmp/tmp0zao6ol_.swift:156:53:\
    \ error: expected '}' at end of brace statement\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])\n                                                   \
    \ ^\n/tmp/tmp0zao6ol_.swift:6:45: note: to match this opening '{'\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n                                            ^\n/tmp/tmp0zao6ol_.swift:20:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(x,\
    \ 0)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n/tmp/tmp0zao6ol_.swift:23:20: error: no exact matches in call\
    \ to instance method 'insert'\n            result.insert(x, 0)\n             \
    \      ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp0zao6ol_.swift:28:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(x,\
    \ 0)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '("
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int = 0\n    var max:\
    \ Int = 0\n    for num in lst {\n        if num < min {\n            min = num\n\
    \        }\n        if num > max {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if num == min {\n            result.insert(num,\
    \ at: 0)\n        }\n        if num == max {\n            result.insert(num, at:\
    \ result.count - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/Array.swift:419: Fatal error: Negative Array index is out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e49505c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e491fc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6e491fc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6e491fc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6e491fbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b6e491e5196 <unavailable> + 1339798

    6    libswiftCore.so                    0x00002b6e491e9020 Array.insert(_:at:)
    + 80

    7    tmpgxd3b6zm                        0x0000556ada0cd45e <unavailable> + 9310

    8    tmpgxd3b6zm                        0x0000556ada0cc56c <unavailable> + 5484

    9    libc.so.6                          0x00002b6e496f1460 __libc_start_main +
    245

    10   tmpgxd3b6zm                        0x0000556ada0cc249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int = 0\n    var max:\
    \ Int = 0\n    for num in lst {\n        if num < min {\n            min = num\n\
    \        }\n        if num > max {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if num < min {\n            min = num\n       \
    \ }\n        if num > max {\n            max = num\n        }\n    }\n    for\
    \ num in lst {\n        if num < min {\n            min = num\n        }\n   \
    \     if num > max {\n            max = num\n        }\n    }\n    for num in\
    \ lst {\n        if num < min {\n            min = num\n        }\n        if\
    \ num > max {\n            max = num\n        }\n    }\n    for num in lst {\n\
    \        if num < min {\n            min = num\n        }\n        if num > max\
    \ {\n            max = num\n        }\n    }\n    for num in lst {\n        if\
    \ num < min {\n            min = num\n        }\n        if num > max {\n    \
    \        max = num\n        }\n    }\n    for num in lst {\n        if num < min\
    \ {\n            min = num\n        }\n        if num > max {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if num < min {\n    \
    \        min = num\n        }\n        if num > max {\n            max = num\n\
    \        }\n    }\n    for num in lst {\n        if num < min {\n            min\
    \ = num\n        }\n        if num > max {\n            max = num\n        }\n\
    \    }\n    for num in lst {\n        if num < min {\n            min = num\n\
    \        }\n        if num > max {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if num < min {\n            min = num\n       \
    \ }\n        if num > max {\n            max = num\n        }\n    }\n    for\
    \ num in lst {\n        if num < min {\n            min = num\n        }\n   \
    \     if num > max {\n            max = num\n        }\n    }\n    for num in\
    \ lst {\n        if num < min {\n            min = num\n        }\n        if\
    \ num > max {\n            max = num\n        }\n    }\n    for num in lst {\n\
    \        if num < min {\n            min = num\n        }\n        if num > max\
    \ {\n            max = num\n        }\n    }\n    for num in lst {\n        if\
    \ num < min {\n            min = num\n        }\n        if num > max {\n    \
    \        max = num\n        }\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpurph1imf.swift:153:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmpurph1imf.swift:6:45: note: to match this\
    \ opening '{'\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n               \
    \                             ^\n/tmp/tmpurph1imf.swift:133:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpurph1imf.swift:7:9: warning:\
    \ initialization of variable 'result' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var result = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int = Int.max\n  \
    \  for x in lst {\n        if x < min {\n            min = x\n        }\n    }\n\
    \    for x in lst {\n        if x == min {\n            continue\n        }\n\
    \        if x > min {\n            result.insert(x, at: 0)\n        } else {\n\
    \            result.insert(x, at: result.count - 1)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpg73phvo1/tmpg73phvo1.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3399ef5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3399becb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3399bec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3399beb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg73phvo1                        0x0000558fc0532654 <unavailable> + 5716

    5    libc.so.6                          0x00002b339a0e1460 __libc_start_main +
    245

    6    tmpg73phvo1                        0x0000558fc0532249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int = Int.max\n  \
    \  var max: Int = Int.min\n    for el in lst {\n        if el < min {\n      \
    \      min = el\n        }\n        if el > max {\n            max = el\n    \
    \    }\n    }\n    for el in lst {\n        if el < min {\n            el = min\n\
    \        }\n        if el > max {\n            el = max\n        }\n        result.append(el)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpc5kq938k.swift:20:13: error: cannot assign to value: 'el' is a\
    \ 'let' constant\n            el = min\n            ^~\n/tmp/tmpc5kq938k.swift:23:13:\
    \ error: cannot assign to value: 'el' is a 'let' constant\n            el = max\n\
    \            ^~\n"
  stdout: ''
  timestamp: 1660028606
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int = Int.max\n  \
    \  var max: Int = Int.min\n    for n in lst {\n        if n < min {\n        \
    \    min = n\n        }\n        if n > max {\n            max = n\n        }\n\
    \    }\n    for n in lst {\n        if n < min {\n            min = n\n      \
    \  }\n        if n > max {\n            max = n\n        }\n    }\n    for n in\
    \ lst {\n        if n < min {\n            min = n\n        }\n        if n >\
    \ max {\n            max = n\n        }\n    }\n    for n in lst {\n        if\
    \ n < min {\n            min = n\n        }\n        if n > max {\n          \
    \  max = n\n        }\n    }\n    for n in lst {\n        if n < min {\n     \
    \       min = n\n        }\n        if n > max {\n            max = n\n      \
    \  }\n    }\n    for n in lst {\n        if n < min {\n            min = n\n \
    \       }\n        if n > max {\n            max = n\n        }\n    }\n    for\
    \ n in lst {\n        if n < min {\n            min = n\n        }\n        if\
    \ n > max {\n            max = n\n        }\n    }\n    for n in lst {\n     \
    \   if n < min {\n            min = n\n        }\n        if n > max {\n     \
    \       max = n\n        }\n    }\n    for n in lst {\n        if n < min {\n\
    \            min = n\n        }\n        if n > max {\n            max = n\n \
    \       }\n    }\n    for n in lst {\n        if n < min {\n            min =\
    \ n\n        }\n        if n > max {\n            max = n\n        }\n    }\n\
    \    for n in lst {\n        if n < min {\n            min = n\n        }\n  \
    \      if n > max {\n            max = n\n        }\n    }\n    for n in lst {\n\
    \        if n < min {\n            min = n\n        }\n        if n > max {\n\
    \            max = n\n        }\n    }\n    for n in lst {\n        if n < min\
    \ {\n            min = n\n        }\n        if n > max {\n            max = n\n\
    \        }\n    }\n    for n in lst {\n        if n < min {\n            min =\
    \ n\n        }\n        if n > max {\n            max = n\n        }\n    }\n\
    \    for n in lst {\n        if n < min {\n            min = n\n        }\n  \
    \      if n > max {\n            max = n\n        }\n    }\n    for n in lst {\n\
    \        if n < min {\n            min = n\n        }\n        if n > max {\n\
    \            max = n\n        }\n    }\n    for n in lst {\n        if \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpj2lq4apl.swift:139:11: error: expected expression, var, or let\
    \ in 'if' condition\n        if \n          ^\n/tmp/tmpj2lq4apl.swift:163:53:\
    \ error: expected '}' at end of brace statement\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])\n                                                   \
    \ ^\n/tmp/tmpj2lq4apl.swift:6:45: note: to match this opening '{'\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n                                            ^\n/tmp/tmpj2lq4apl.swift:143:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660028606
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int = 0\n    var max:\
    \ Int = 0\n    for num in lst {\n        if num < min {\n            min = num\n\
    \        }\n        if num > max {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if num < min {\n            min = num\n       \
    \ }\n        if num > max {\n            max = num\n        }\n    }\n    for\
    \ num in lst {\n        if num < min {\n            min = num\n        }\n   \
    \     if num > max {\n            max = num\n        }\n    }\n    for num in\
    \ lst {\n        if num < min {\n            min = num\n        }\n        if\
    \ num > max {\n            max = num\n        }\n    }\n    for num in lst {\n\
    \        if num < min {\n            min = num\n        }\n        if num > max\
    \ {\n            max = num\n        }\n    }\n    for num in lst {\n        if\
    \ num < min {\n            min = num\n        }\n        if num > max {\n    \
    \        max = num\n        }\n    }\n    for num in lst {\n        if num < min\
    \ {\n            min = num\n        }\n        if num > max {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if num < min {\n    \
    \        min = num\n        }\n        if num > max {\n            max = num\n\
    \        }\n    }\n    for num in lst {\n        if num < min {\n            min\
    \ = num\n        }\n        if num > max {\n            max = num\n        }\n\
    \    }\n    for num in lst {\n        if num < min {\n            min = num\n\
    \        }\n        if num > max {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if num < min {\n            min = num\n       \
    \ }\n        if num > max {\n            max = num\n        }\n    }\n    for\
    \ num in lst {\n        if num < min {\n            min = num\n        }\n   \
    \     if num > max {\n            max = num\n        }\n    }\n    for num in\
    \ lst {\n        if num < min {\n            min = num\n        }\n        if\
    \ num > max {\n            max = num\n        }\n    }\n    for num in lst {\n\
    \        if num < min {\n            min = num\n        }\n        if num > max\
    \ {\n            max = num\n        }\n    }\n    for num in lst {\n        if\
    \ num < min {\n            min = num\n        }\n        if num > max {\n    \
    \        max = num\n        }\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpurph1imf.swift:153:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmpurph1imf.swift:6:45: note: to match this\
    \ opening '{'\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n               \
    \                             ^\n/tmp/tmpurph1imf.swift:133:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpurph1imf.swift:7:9: warning:\
    \ initialization of variable 'result' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var result = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int = Int.max\n  \
    \  var max: Int = Int.min\n    for x in lst {\n        if x < min {\n        \
    \    min = x\n        }\n        if x > max {\n            max = x\n        }\n\
    \    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ at: 0)\n        }\n        if x == max {\n            result.insert(x, at: result.count\
    \ - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpwbqrpg4t/tmpwbqrpg4t.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b0b83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b0b534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b0b534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b0b5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwbqrpg4t                        0x000055a3d624d654 <unavailable> + 5716

    5    libc.so.6                          0x00002b1b0ba29460 __libc_start_main +
    245

    6    tmpwbqrpg4t                        0x000055a3d624d249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var minValue = lst[0]\n   \
    \ var maxValue = lst[0]\n    for value in lst {\n        if value < minValue {\n\
    \            minValue = value\n        }\n        if value > maxValue {\n    \
    \        maxValue = value\n        }\n    }\n    for value in lst {\n        if\
    \ value < minValue {\n            result.insert(value, at: 0)\n        } else\
    \ if value > maxValue {\n            result.insert(value, at: result.count - 1)\n\
    \        } else {\n            result.insert(value, at: result.count)\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpiqdy6yxt/tmpiqdy6yxt.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f65076c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f64d6db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f64d6d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f64d6c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiqdy6yxt                        0x0000558ab744e6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b1f65262460 __libc_start_main +
    245

    6    tmpiqdy6yxt                        0x0000558ab744e299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var minValue = lst[0]\n   \
    \ var maxValue = lst[0]\n    for value in lst {\n        if value < minValue {\n\
    \            minValue = value\n        }\n        if value > maxValue {\n    \
    \        maxValue = value\n        }\n    }\n    for value in lst {\n        if\
    \ value < minValue {\n            result.insert(value, at: 0)\n        } else\
    \ if value > maxValue {\n            result.insert(value, at: result.count - 1)\n\
    \        } else {\n            result.insert(value, at: result.count - 1)\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/Array.swift:419: Fatal error: Negative Array index is out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002acc7f5fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc7f2f2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002acc7f2f2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002acc7f2f213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002acc7f2f1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002acc7f2db196 <unavailable> + 1339798

    6    libswiftCore.so                    0x00002acc7f2df020 Array.insert(_:at:)
    + 80

    7    tmpm_jafe2r                        0x000055d7edfb1540 <unavailable> + 9536

    8    tmpm_jafe2r                        0x000055d7edfb05bc <unavailable> + 5564

    9    libc.so.6                          0x00002acc7f7e7460 __libc_start_main +
    245

    10   tmpm_jafe2r                        0x000055d7edfb0299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int = 0\n    var max:\
    \ Int = 0\n    for x in lst {\n        if x < min {\n            min = x\n   \
    \     }\n        if x > max {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == min {\n            result.insert(x, at: 0)\n   \
    \     }\n        if x == max {\n            result.insert(x, at: result.count\
    \ - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/Array.swift:419: Fatal error: Negative Array index is out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b93c44c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b9393b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2b9393b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2b9393b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2b9393abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b2b93924196 <unavailable> + 1339798

    6    libswiftCore.so                    0x00002b2b93928020 Array.insert(_:at:)
    + 80

    7    tmpu6ru_gs5                        0x0000559dab28445e <unavailable> + 9310

    8    tmpu6ru_gs5                        0x0000559dab28356c <unavailable> + 5484

    9    libc.so.6                          0x00002b2b93e30460 __libc_start_main +
    245

    10   tmpu6ru_gs5                        0x0000559dab283249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    for _ in 0..<(lst2.count - 1) {\n\
    \        let minIndex = lst2.index(of: lst2.min())!\n        let maxIndex = lst2.index(of:\
    \ lst2.max())!\n        lst2.remove(at: minIndex)\n        lst2.remove(at: maxIndex)\n\
    \        lst2.insert(lst2.min(), at: minIndex)\n        lst2.insert(lst2.max(),\
    \ at: maxIndex)\n    }\n    return lst2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmph71e264d.swift:9:44: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        let minIndex = lst2.index(of:\
    \ lst2.min())!\n                                           ^\n/tmp/tmph71e264d.swift:9:44:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        let minIndex = lst2.index(of: lst2.min())!\n                \
    \                           ^\n                                              \
    \   ?? <#default value#>\n/tmp/tmph71e264d.swift:9:44: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n        let minIndex\
    \ = lst2.index(of: lst2.min())!\n                                           ^\n\
    \                                                !\n/tmp/tmph71e264d.swift:10:44:\
    \ error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n\
    \        let maxIndex = lst2.index(of: lst2.max())!\n                        \
    \                   ^\n/tmp/tmph71e264d.swift:10:44: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n        let maxIndex\
    \ = lst2.index(of: lst2.max())!\n                                           ^\n\
    \                                                 ?? <#default value#>\n/tmp/tmph71e264d.swift:10:44:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        let maxIndex = lst2.index(of: lst2.max())!\n                \
    \                           ^\n                                              \
    \  !\n/tmp/tmph71e264d.swift:13:26: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        lst2.insert(lst2.min(), at: minIndex)\n\
    \                         ^\n/tmp/tmph71e264d.swift:13:26: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n        lst2.insert(lst2.min(),\
    \ at: minIndex)\n                         ^\n                               ??\
    \ <#default value#>\n/tmp/tmph71e264d.swift:13:26: note: force-unwrap using '!'\
    \ to abort execution if the optional value contains 'nil'\n        lst2.i"
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var minValue = lst[0]\n   \
    \ var maxValue = lst[0]\n    for value in lst {\n        if value < minValue {\n\
    \            result.insert(minValue, at: 0)\n            minValue = value\n  \
    \      } else if value > maxValue {\n            result.insert(maxValue, at: 0)\n\
    \            maxValue = value\n        } else {\n            result.insert(value,\
    \ at: 0)\n        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpq3mfji24/tmpq3mfji24.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1062531c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1062228b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1062228988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10622277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq3mfji24                        0x00005573471676e4 <unavailable> + 5860

    5    libc.so.6                          0x00002b106271d460 __libc_start_main +
    245

    6    tmpq3mfji24                        0x00005573471672d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var minValue = lst[0]\n   \
    \ var maxValue = lst[0]\n    for value in lst {\n        if value < minValue {\n\
    \            minValue = value\n        }\n        if value > maxValue {\n    \
    \        maxValue = value\n        }\n    }\n    for value in lst {\n        if\
    \ value < minValue {\n            result.insert(value, at: 0)\n        }\n   \
    \     if value > maxValue {\n            result.insert(value, at: result.count\
    \ - 1)\n        }\n    }\n    for value in lst {\n        if value < minValue\
    \ {\n            result.insert(value, at: result.count - 1)\n        }\n     \
    \   if value > maxValue {\n            result.insert(value, at: 0)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp8q5544rx/tmp8q5544rx.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f7f546c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f7f23db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f7f23d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f7f23c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8q5544rx                        0x0000563b0eb466a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b2f7f732460 __libc_start_main +
    245

    6    tmp8q5544rx                        0x0000563b0eb46299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var minValue = lst[0]\n   \
    \ var maxValue = lst[0]\n    for value in lst {\n        if value < minValue {\n\
    \            minValue = value\n        }\n        if value > maxValue {\n    \
    \        maxValue = value\n        }\n    }\n    for value in lst {\n        if\
    \ value < minValue {\n            result.insert(value, at: 0)\n        }\n   \
    \     if value > maxValue {\n            result.insert(value, at: result.count\
    \ - 1)\n        }\n    }\n    for value in lst {\n        if value < minValue\
    \ {\n            result.insert(value, at: result.count - 1)\n        }\n     \
    \   if value > maxValue {\n            result.insert(value, at: 0)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp8q5544rx/tmp8q5544rx.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f7f546c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f7f23db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f7f23d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f7f23c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8q5544rx                        0x0000563b0eb466a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b2f7f732460 __libc_start_main +
    245

    6    tmp8q5544rx                        0x0000563b0eb46299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int? = nil\n    var\
    \ max: Int? = nil\n    for num in lst {\n        if min == nil || num < min! {\n\
    \            min = num\n        }\n        if max == nil || num > max! {\n   \
    \         max = num\n        }\n    }\n    if min == nil || max == nil {\n   \
    \     return result\n    }\n    for num in lst {\n        if num == min! {\n \
    \           result.insert(num, at: 0)\n        }\n        if num == max! {\n \
    \           result.insert(num, at: result.count - 1)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpip7hap84/tmpip7hap84.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b32f82f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b32f7ff0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b32f7ff0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b32f7fef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpip7hap84                        0x00005620846a56e4 <unavailable> + 5860

    5    libc.so.6                          0x00002b32f84e5460 __libc_start_main +
    245

    6    tmpip7hap84                        0x00005620846a52d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int = Int.max\n  \
    \  var max: Int = Int.min\n    for num in lst {\n        if num < min {\n    \
    \        min = num\n        }\n        if num > max {\n            max = num\n\
    \        }\n    }\n    for num in lst {\n        if num < min {\n            min\
    \ = num\n        }\n        if num > max {\n            max = num\n        }\n\
    \    }\n    for num in lst {\n        if num < min {\n            min = num\n\
    \        }\n        if num > max {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if num < min {\n            min = num\n       \
    \ }\n        if num > max {\n            max = num\n        }\n    }\n    for\
    \ num in lst {\n        if num < min {\n            min = num\n        }\n   \
    \     if num > max {\n            max = num\n        }\n    }\n    for num in\
    \ lst {\n        if num < min {\n            min = num\n        }\n        if\
    \ num > max {\n            max = num\n        }\n    }\n    for num in lst {\n\
    \        if num < min {\n            min = num\n        }\n        if num > max\
    \ {\n            max = num\n        }\n    }\n    for num in lst {\n        if\
    \ num < min {\n            min = num\n        }\n        if num > max {\n    \
    \        max = num\n        }\n    }\n    for num in lst {\n        if num < min\
    \ {\n            min = num\n        }\n        if num > max {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if num < min {\n    \
    \        min = num\n        }\n        if num > max {\n            max = num\n\
    \        }\n    }\n    for num in lst {\n        if num < min {\n            min\
    \ = num\n        }\n        if num > max {\n            max = num\n        }\n\
    \    }\n    for num in lst {\n        if num < min {\n            min = num\n\
    \        }\n        if num > max {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if num < min {\n            min = num\n       \
    \ }\n        if num > max {\n            max = num\n        }\n    }\n    for\
    \ num in lst {\n        if num < min {\n            min = num\n        }\n   \
    \     if num > max {\n            max = num\n        }\n    }\n    for num in\
    \ lst {\n        if num < min {\n            min = num\n        }\n        if\
    \ num > max {\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpe2i820e5.swift:151:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmpe2i820e5.swift:122:20: note: to match\
    \ this opening '{'\n    for num in lst {\n                   ^\n/tmp/tmpe2i820e5.swift:151:53:\
    \ error: expected '}' at end of brace statement\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])\n                                                   \
    \ ^\n/tmp/tmpe2i820e5.swift:6:45: note: to match this opening '{'\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n                                            ^\n/tmp/tmpe2i820e5.swift:131:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpe2i820e5.swift:7:9:\
    \ warning: initialization of variable 'result' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var result = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int = Int.max\n  \
    \  var max: Int = Int.min\n    for x in lst {\n        if x < min {\n        \
    \    min = x\n        }\n        if x > max {\n            max = x\n        }\n\
    \    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ at: 0)\n        }\n        if x == max {\n            result.insert(x, at: result.count\
    \ - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpwbqrpg4t/tmpwbqrpg4t.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b0b83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b0b534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b0b534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b0b5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwbqrpg4t                        0x000055a3d624d654 <unavailable> + 5716

    5    libc.so.6                          0x00002b1b0ba29460 __libc_start_main +
    245

    6    tmpwbqrpg4t                        0x000055a3d624d249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min = lst[0]\n    var max\
    \ = lst[0]\n    for el in lst {\n        if el < min {\n            min = el\n\
    \        }\n        if el > max {\n            max = el\n        }\n    }\n  \
    \  for el in lst {\n        if el == min {\n            result.insert(el, at:\
    \ 0)\n        }\n        if el == max {\n            result.insert(el, at: result.count\
    \ - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpxkv5hc9n/tmpxkv5hc9n.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2264118c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2263e0fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2263e0f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2263e0e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkv5hc9n                        0x0000565063ced6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b2264304460 __libc_start_main +
    245

    6    tmpxkv5hc9n                        0x0000565063ced299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660028607
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int = 0\n    var max:\
    \ Int = 0\n    for num in lst {\n        if min > num {\n            min = num\n\
    \        }\n        if max < num {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if min > num {\n            min = num\n       \
    \ }\n        if max < num {\n            max = num\n        }\n    }\n    for\
    \ num in lst {\n        if min > num {\n            min = num\n        }\n   \
    \     if max < num {\n            max = num\n        }\n    }\n    for num in\
    \ lst {\n        if min > num {\n            min = num\n        }\n        if\
    \ max < num {\n            max = num\n        }\n    }\n    for num in lst {\n\
    \        if min > num {\n            min = num\n        }\n        if max < num\
    \ {\n            max = num\n        }\n    }\n    for num in lst {\n        if\
    \ min > num {\n            min = num\n        }\n        if max < num {\n    \
    \        max = num\n        }\n    }\n    for num in lst {\n        if min > num\
    \ {\n            min = num\n        }\n        if max < num {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if min > num {\n    \
    \        min = num\n        }\n        if max < num {\n            max = num\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            max = num\n        }\n\
    \    }\n    for num in lst {\n        if min > num {\n            min = num\n\
    \        }\n        if max < num {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if min > num {\n            min = num\n       \
    \ }\n        if max < num {\n            max = num\n        }\n    }\n    for\
    \ num in lst {\n        if min > num {\n            min = num\n        }\n   \
    \     if max < num {\n            max = num\n        }\n    }\n    for num in\
    \ lst {\n        if min > num {\n            min = num\n        }\n        if\
    \ max < num {\n            max = num\n        }\n    }\n    for num in lst {\n\
    \        if min > num {\n            min = num\n        }\n        if max < num\
    \ {\n            max = num\n        }\n    }\n    for num in lst {\n        if\
    \ min > num {\n            min = num\n        }\n        if max < num {\n    \
    \        max = num\n        }\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpb9ansatr.swift:153:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmpb9ansatr.swift:6:45: note: to match this\
    \ opening '{'\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n               \
    \                             ^\n/tmp/tmpb9ansatr.swift:133:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpb9ansatr.swift:7:9: warning:\
    \ initialization of variable 'result' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var result = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var minValue = lst[0]\n   \
    \ var maxValue = lst[0]\n    for value in lst {\n        if value < minValue {\n\
    \            result.appendContentsOf(Array(minValue...value))\n            minValue\
    \ = value\n        } else if value > maxValue {\n            result.appendContentsOf(Array(maxValue...value))\n\
    \            maxValue = value\n        } else {\n            result.appendContentsOf(Array(minValue...maxValue))\n\
    \            minValue = maxValue\n            maxValue = value\n        }\n  \
    \  }\n    result.appendContentsOf(Array(minValue...maxValue))\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp23bnm__u.swift:12:20: error: value of type '[Int]' has no member\
    \ 'appendContentsOf'\n            result.appendContentsOf(Array(minValue...value))\n\
    \            ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmp23bnm__u.swift:15:20: error: value\
    \ of type '[Int]' has no member 'appendContentsOf'\n            result.appendContentsOf(Array(maxValue...value))\n\
    \            ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmp23bnm__u.swift:18:20: error: value\
    \ of type '[Int]' has no member 'appendContentsOf'\n            result.appendContentsOf(Array(minValue...maxValue))\n\
    \            ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmp23bnm__u.swift:23:12: error: value\
    \ of type '[Int]' has no member 'appendContentsOf'\n    result.appendContentsOf(Array(minValue...maxValue))\n\
    \    ~~~~~~ ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var minValue = lst[0]\n   \
    \ var maxValue = lst[0]\n    for value in lst {\n        if value < minValue {\n\
    \            minValue = value\n        }\n        if value > maxValue {\n    \
    \        maxValue = value\n        }\n    }\n    for value in lst {\n        if\
    \ value < minValue {\n            result.insert(value, at: 0)\n        }\n   \
    \     if value > maxValue {\n            result.insert(value, at: result.count\
    \ - 1)\n        }\n    }\n    for value in lst {\n        if value < minValue\
    \ {\n            result.insert(value, at: result.count - 1)\n        }\n     \
    \   if value > maxValue {\n            result.insert(value, at: 0)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp8q5544rx/tmp8q5544rx.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f7f546c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f7f23db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f7f23d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f7f23c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8q5544rx                        0x0000563b0eb466a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b2f7f732460 __libc_start_main +
    245

    6    tmp8q5544rx                        0x0000563b0eb46299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min = lst[0]\n    var max\
    \ = lst[0]\n    for el in lst {\n        if el < min {\n            min = el\n\
    \        }\n        if el > max {\n            max = el\n        }\n    }\n  \
    \  for el in lst {\n        if el == min {\n            result.insert(el, at:\
    \ 0)\n        }\n        if el == max {\n            result.insert(el, at: result.count\
    \ - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpxkv5hc9n/tmpxkv5hc9n.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2264118c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2263e0fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2263e0f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2263e0e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkv5hc9n                        0x0000565063ced6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b2264304460 __libc_start_main +
    245

    6    tmpxkv5hc9n                        0x0000565063ced299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660028607
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int? = nil\n    var\
    \ max: Int? = nil\n    for x in lst {\n        if x == nil {\n            continue\n\
    \        }\n        if min == nil || x < min {\n            min = x\n        }\n\
    \        if max == nil || x > max {\n            max = x\n        }\n    }\n \
    \   if min == nil {\n        return lst\n    }\n    if max == nil {\n        return\
    \ lst\n    }\n    for x in lst {\n        if x == nil {\n            continue\n\
    \        }\n        if x == min {\n            result.insert(x, 0)\n        }\n\
    \        if x == max {\n            result.insert(x, result.count - 1)\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpqzus7zut.swift:11:14: warning: comparing non-optional value of\
    \ type 'Int' to 'nil' always returns false\n        if x == nil {\n          \
    \ ~ ^  ~~~\n/tmp/tmpqzus7zut.swift:14:30: error: value of optional type 'Int?'\
    \ must be unwrapped to a value of type 'Int'\n        if min == nil || x < min\
    \ {\n                             ^\n/tmp/tmpqzus7zut.swift:14:30: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     if min == nil || x < min {\n                             ^\n           \
    \                      ?? <#default value#>\n/tmp/tmpqzus7zut.swift:14:30: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \        if min == nil || x < min {\n                             ^\n        \
    \                        !\n/tmp/tmpqzus7zut.swift:17:30: error: value of optional\
    \ type 'Int?' must be unwrapped to a value of type 'Int'\n        if max == nil\
    \ || x > max {\n                             ^\n/tmp/tmpqzus7zut.swift:17:30:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        if max == nil || x > max {\n                             ^\n\
    \                                 ?? <#default value#>\n/tmp/tmpqzus7zut.swift:17:30:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        if max == nil || x > max {\n                             ^\n\
    \                                !\n/tmp/tmpqzus7zut.swift:28:14: warning: comparing\
    \ non-optional value of type 'Int' to 'nil' always returns false\n        if x\
    \ == nil {\n           ~ ^  ~~~\n/tmp/tmpqzus7zut.swift:32:20: error: no exact\
    \ matches in call to instance method 'insert'\n            result.insert(x, 0)\n\
    \                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinab"
  stdout: ''
  timestamp: 1660028607
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int = Int.max\n  \
    \  var max: Int = Int.min\n    for x in lst {\n        if x < min {\n        \
    \    min = x\n        }\n        if x > max {\n            max = x\n        }\n\
    \    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ at: 0)\n        }\n        if x == max {\n            result.insert(x, at: result.count\
    \ - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpwbqrpg4t/tmpwbqrpg4t.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b0b83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b0b534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b0b534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b0b5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwbqrpg4t                        0x000055a3d624d654 <unavailable> + 5716

    5    libc.so.6                          0x00002b1b0ba29460 __libc_start_main +
    245

    6    tmpwbqrpg4t                        0x000055a3d624d249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int = Int.max\n  \
    \  var max: Int = Int.min\n    for x in lst {\n        if x < min {\n        \
    \    min = x\n        }\n        if x > max {\n            max = x\n        }\n\
    \    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ at: 0)\n        }\n        if x == max {\n            result.insert(x, at: result.count\
    \ - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpwbqrpg4t/tmpwbqrpg4t.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b0b83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b0b534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b0b534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b0b5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwbqrpg4t                        0x000055a3d624d654 <unavailable> + 5716

    5    libc.so.6                          0x00002b1b0ba29460 __libc_start_main +
    245

    6    tmpwbqrpg4t                        0x000055a3d624d249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var minValue = lst[0]\n   \
    \ var maxValue = lst[0]\n    for value in lst {\n        if value < minValue {\n\
    \            minValue = value\n        }\n        if value > maxValue {\n    \
    \        maxValue = value\n        }\n    }\n    for value in lst {\n        if\
    \ value < minValue {\n            result.insert(value, at: 0)\n        }\n   \
    \     if value > maxValue {\n            result.insert(value, at: result.count\
    \ - 1)\n        }\n    }\n    for value in lst {\n        if value < minValue\
    \ {\n            result.insert(value, at: result.count - 1)\n        }\n     \
    \   if value > maxValue {\n            result.insert(value, at: 0)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp8q5544rx/tmp8q5544rx.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f7f546c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f7f23db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f7f23d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f7f23c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8q5544rx                        0x0000563b0eb466a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b2f7f732460 __libc_start_main +
    245

    6    tmp8q5544rx                        0x0000563b0eb46299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int = Int.max\n  \
    \  for num in lst {\n        if num < min {\n            min = num\n        }\n\
    \    }\n    for num in lst {\n        if num > min {\n            result.insert(num,\
    \ at: 0)\n        }\n    }\n    for num in lst {\n        if num < min {\n   \
    \         result.insert(num, at: result.count - 1)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp87o6rnse/tmp87o6rnse.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada445cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada442c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada442c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada442c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp87o6rnse                        0x00005578741ac654 <unavailable> + 5716

    5    libc.so.6                          0x00002ada447b9460 __libc_start_main +
    245

    6    tmp87o6rnse                        0x00005578741ac249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660028607
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    for _ in 0..<(lst2.count - 1) {\n\
    \        let minIndex = lst2.index(of: lst2.min())!\n        let maxIndex = lst2.index(of:\
    \ lst2.max())!\n        lst2.remove(at: minIndex)\n        lst2.remove(at: maxIndex)\n\
    \    }\n    return lst2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpsc9ak025.swift:9:44: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        let minIndex = lst2.index(of:\
    \ lst2.min())!\n                                           ^\n/tmp/tmpsc9ak025.swift:9:44:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        let minIndex = lst2.index(of: lst2.min())!\n                \
    \                           ^\n                                              \
    \   ?? <#default value#>\n/tmp/tmpsc9ak025.swift:9:44: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n        let minIndex\
    \ = lst2.index(of: lst2.min())!\n                                           ^\n\
    \                                                !\n/tmp/tmpsc9ak025.swift:10:44:\
    \ error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n\
    \        let maxIndex = lst2.index(of: lst2.max())!\n                        \
    \                   ^\n/tmp/tmpsc9ak025.swift:10:44: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n        let maxIndex\
    \ = lst2.index(of: lst2.max())!\n                                           ^\n\
    \                                                 ?? <#default value#>\n/tmp/tmpsc9ak025.swift:10:44:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        let maxIndex = lst2.index(of: lst2.max())!\n                \
    \                           ^\n                                              \
    \  !\n"
  stdout: ''
  timestamp: 1660028606
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int? = nil\n    var\
    \ max: Int? = nil\n    for x in lst {\n        if x == nil {\n            continue\n\
    \        }\n        if min == nil || x < min {\n            min = x\n        }\n\
    \        if max == nil || x > max {\n            max = x\n        }\n    }\n \
    \   if min == nil {\n        return result\n    }\n    if max == nil {\n     \
    \   return strange_sort_list(lst.reversed())\n    }\n    for x in lst {\n    \
    \    if x == nil {\n            continue\n        }\n        if x == min {\n \
    \           result.append(self[min!])\n            min! = nil\n        }\n   \
    \     if x == max {\n            result.append(self[max!])\n            max! =\
    \ nil\n        }\n    }\n    if min != nil {\n        result.append(self[min!])\n\
    \    }\n    if max != nil {\n        result.append(self[max!])\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpm77orpcz.swift:11:14: warning: comparing non-optional value of\
    \ type 'Int' to 'nil' always returns false\n        if x == nil {\n          \
    \ ~ ^  ~~~\n/tmp/tmpm77orpcz.swift:14:30: error: value of optional type 'Int?'\
    \ must be unwrapped to a value of type 'Int'\n        if min == nil || x < min\
    \ {\n                             ^\n/tmp/tmpm77orpcz.swift:14:30: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     if min == nil || x < min {\n                             ^\n           \
    \                      ?? <#default value#>\n/tmp/tmpm77orpcz.swift:14:30: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \        if min == nil || x < min {\n                             ^\n        \
    \                        !\n/tmp/tmpm77orpcz.swift:17:30: error: value of optional\
    \ type 'Int?' must be unwrapped to a value of type 'Int'\n        if max == nil\
    \ || x > max {\n                             ^\n/tmp/tmpm77orpcz.swift:17:30:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        if max == nil || x > max {\n                             ^\n\
    \                                 ?? <#default value#>\n/tmp/tmpm77orpcz.swift:17:30:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        if max == nil || x > max {\n                             ^\n\
    \                                !\n/tmp/tmpm77orpcz.swift:25:34: error: missing\
    \ argument label 'lst:' in call\n        return strange_sort_list(lst.reversed())\n\
    \                                 ^\n                                 lst: \n\
    /tmp/tmpm77orpcz.swift:28:14: warning: comparing non-optional value of type 'Int'\
    \ to 'nil' always returns false\n        if x == nil {\n           ~ ^  ~~~\n\
    /tmp/tmpm77orpcz.swift:32:27: error: cannot find 'self' in scope; did you mean\
    \ to use it in a type or extension context?\n            result.append(self[min!])\n\
    \                          ^~~~\n/tmp/tmpm77orpcz.swift:33:20: error: 'nil' cannot\
    \ be assigned to type 'Int'\n            min! = nil"
  stdout: ''
  timestamp: 1660028607
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int = Int.max\n  \
    \  var max: Int = Int.min\n    for x in lst {\n        if x < min {\n        \
    \    min = x\n        }\n        if x > max {\n            max = x\n        }\n\
    \    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ at: 0)\n        }\n        if x == max {\n            result.insert(x, at: result.count\
    \ - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpwbqrpg4t/tmpwbqrpg4t.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b0b83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b0b534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b0b534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b0b5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwbqrpg4t                        0x000055a3d624d654 <unavailable> + 5716

    5    libc.so.6                          0x00002b1b0ba29460 __libc_start_main +
    245

    6    tmpwbqrpg4t                        0x000055a3d624d249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int? = nil\n    var\
    \ max: Int? = nil\n    for num in lst {\n        if min == nil || num < min! {\n\
    \            min = num\n        }\n        if max == nil || num > max! {\n   \
    \         max = num\n        }\n    }\n    if min != nil {\n        result.insert(min!,\
    \ at: 0)\n    }\n    if max != nil {\n        result.insert(max!, at: result.count\
    \ - 1)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp4vx6c1t1/tmp4vx6c1t1.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3663adcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36637d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36637d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36637d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4vx6c1t1                        0x00005614f54e66e4 <unavailable> + 5860

    5    libc.so.6                          0x00002b3663cc8460 __libc_start_main +
    245

    6    tmp4vx6c1t1                        0x00005614f54e62d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660028607
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int = 0\n    var max:\
    \ Int = 0\n    for num in lst {\n        if num < min {\n            min = num\n\
    \        }\n        if num > max {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if num < min {\n            result += [num]\n \
    \       }\n        if num > max {\n            result += [num]\n        }\n  \
    \  }\n    for num in lst {\n        if num < max {\n            result += [num]\n\
    \        }\n        if num > min {\n            result += [num]\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpq6glt70h/tmpq6glt70h.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ffb4c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ffb1bab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1ffb1ba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1ffb1b97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq6glt70h                        0x0000564548da15f4 <unavailable> + 5620

    5    libc.so.6                          0x00002b1ffb6af460 __libc_start_main +
    245

    6    tmpq6glt70h                        0x0000564548da11e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660028607
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int = Int.max\n  \
    \  var max: Int = Int.min\n    for x in lst {\n        if x < min {\n        \
    \    min = x\n        }\n        if x > max {\n            max = x\n        }\n\
    \    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ at: 0)\n        }\n        if x == max {\n            result.insert(x, at: result.count\
    \ - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpwbqrpg4t/tmpwbqrpg4t.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b0b83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b0b534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b0b534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b0b5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwbqrpg4t                        0x000055a3d624d654 <unavailable> + 5716

    5    libc.so.6                          0x00002b1b0ba29460 __libc_start_main +
    245

    6    tmpwbqrpg4t                        0x000055a3d624d249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int = 0\n    var max:\
    \ Int = 0\n    for num in lst {\n        if num < min {\n            min = num\n\
    \        }\n        if num > max {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if num == min {\n            result.insert(num,\
    \ at: 0)\n        }\n        if num == max {\n            result.insert(num, at:\
    \ result.count - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/Array.swift:419: Fatal error: Negative Array index is out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e49505c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e491fc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6e491fc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6e491fc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6e491fbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b6e491e5196 <unavailable> + 1339798

    6    libswiftCore.so                    0x00002b6e491e9020 Array.insert(_:at:)
    + 80

    7    tmpgxd3b6zm                        0x0000556ada0cd45e <unavailable> + 9310

    8    tmpgxd3b6zm                        0x0000556ada0cc56c <unavailable> + 5484

    9    libc.so.6                          0x00002b6e496f1460 __libc_start_main +
    245

    10   tmpgxd3b6zm                        0x0000556ada0cc249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var minValue = lst[0]\n   \
    \ var maxValue = lst[0]\n    for value in lst {\n        if value < minValue {\n\
    \            minValue = value\n        }\n        if value > maxValue {\n    \
    \        maxValue = value\n        }\n    }\n    for value in lst {\n        if\
    \ value < minValue {\n            result.insert(value, at: 0)\n        }\n   \
    \     if value > maxValue {\n            result.insert(value, at: result.count\
    \ - 1)\n        }\n    }\n    for value in lst {\n        if value < minValue\
    \ {\n            result.insert(value, at: result.count - 1)\n        }\n     \
    \   if value > maxValue {\n            result.insert(value, at: 0)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp8q5544rx/tmp8q5544rx.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f7f546c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f7f23db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f7f23d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f7f23c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8q5544rx                        0x0000563b0eb466a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b2f7f732460 __libc_start_main +
    245

    6    tmp8q5544rx                        0x0000563b0eb46299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int = 0\n    var max:\
    \ Int = 0\n    for num in lst {\n        if num < min {\n            min = num\n\
    \        }\n        if num > max {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if num == min {\n            result.insert(num,\
    \ at: 0)\n        }\n        if num == max {\n            result.insert(num, at:\
    \ result.count - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/Array.swift:419: Fatal error: Negative Array index is out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e49505c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e491fc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6e491fc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6e491fc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6e491fbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b6e491e5196 <unavailable> + 1339798

    6    libswiftCore.so                    0x00002b6e491e9020 Array.insert(_:at:)
    + 80

    7    tmpgxd3b6zm                        0x0000556ada0cd45e <unavailable> + 9310

    8    tmpgxd3b6zm                        0x0000556ada0cc56c <unavailable> + 5484

    9    libc.so.6                          0x00002b6e496f1460 __libc_start_main +
    245

    10   tmpgxd3b6zm                        0x0000556ada0cc249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int = Int.max\n  \
    \  var max: Int = Int.min\n    for x in lst {\n        if x < min {\n        \
    \    min = x\n        }\n        if x > max {\n            max = x\n        }\n\
    \    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ at: 0)\n        }\n        if x == max {\n            result.insert(x, at: result.count\
    \ - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpwbqrpg4t/tmpwbqrpg4t.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b0b83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b0b534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b0b534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b0b5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwbqrpg4t                        0x000055a3d624d654 <unavailable> + 5716

    5    libc.so.6                          0x00002b1b0ba29460 __libc_start_main +
    245

    6    tmpwbqrpg4t                        0x000055a3d624d249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int = Int.max\n  \
    \  var max: Int = Int.min\n    for x in lst {\n        if x < min {\n        \
    \    min = x\n        }\n        if x > max {\n            max = x\n        }\n\
    \    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ at: 0)\n        }\n        if x == max {\n            result.insert(x, at: result.count\
    \ - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpwbqrpg4t/tmpwbqrpg4t.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b0b83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b0b534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b0b534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b0b5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwbqrpg4t                        0x000055a3d624d654 <unavailable> + 5716

    5    libc.so.6                          0x00002b1b0ba29460 __libc_start_main +
    245

    6    tmpwbqrpg4t                        0x000055a3d624d249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var minValue = lst[0]\n   \
    \ var maxValue = lst[0]\n    for value in lst {\n        if value < minValue {\n\
    \            minValue = value\n        } else if value > maxValue {\n        \
    \    maxValue = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < minValue {\n            result.insert(value, at: 0)\n        } else if value\
    \ > maxValue {\n            result.insert(value, at: result.count - 1)\n     \
    \   } else {\n            result.insert(value, at: result.count - 1)\n       \
    \     result.insert(value, at: 0)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/Array.swift:419: Fatal error: Negative Array index is out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac4b78f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4b75f0561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac4b75f0286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac4b75f013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac4b75efbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ac4b75d9196 <unavailable> + 1339798

    6    libswiftCore.so                    0x00002ac4b75dd020 Array.insert(_:at:)
    + 80

    7    tmpsmy980pa                        0x0000559c5566f547 <unavailable> + 9543

    8    tmpsmy980pa                        0x0000559c5566e5bc <unavailable> + 5564

    9    libc.so.6                          0x00002ac4b7ae5460 __libc_start_main +
    245

    10   tmpsmy980pa                        0x0000559c5566e299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660028607
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int = Int.max\n  \
    \  var max: Int = Int.min\n    for x in lst {\n        if x < min {\n        \
    \    min = x\n        }\n        if x > max {\n            max = x\n        }\n\
    \    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ at: 0)\n        }\n        if x == max {\n            result.insert(x, at: result.count\
    \ - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpwbqrpg4t/tmpwbqrpg4t.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b0b83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b0b534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b0b534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b0b5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwbqrpg4t                        0x000055a3d624d654 <unavailable> + 5716

    5    libc.so.6                          0x00002b1b0ba29460 __libc_start_main +
    245

    6    tmpwbqrpg4t                        0x000055a3d624d249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int = Int.max\n  \
    \  for el in lst {\n        if el < min {\n            min = el\n        }\n \
    \   }\n    for el in lst {\n        if el == min {\n            result.insert(el,\
    \ at: 0)\n        } else {\n            result.insert(el, at: result.count - 1)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp_7i9kqhw/tmp_7i9kqhw.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf4959bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf49292b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf49292988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf492917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_7i9kqhw                        0x000055c6e3175654 <unavailable> + 5716

    5    libc.so.6                          0x00002acf49787460 __libc_start_main +
    245

    6    tmp_7i9kqhw                        0x000055c6e3175249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660028607
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int? = nil\n    for\
    \ el in lst {\n        if min == nil || el < min {\n            min = el\n   \
    \     }\n    }\n    if min != nil {\n        result.insert(min, at: 0)\n    }\n\
    \    for el in lst {\n        if el != min {\n            result.insert(el, at:\
    \ 0)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpkp69ftuf.swift:10:31: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        if min == nil || el < min {\n\
    \                              ^\n/tmp/tmpkp69ftuf.swift:10:31: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     if min == nil || el < min {\n                              ^\n         \
    \                         ?? <#default value#>\n/tmp/tmpkp69ftuf.swift:10:31:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        if min == nil || el < min {\n                              ^\n\
    \                                 !\n/tmp/tmpkp69ftuf.swift:15:23: error: value\
    \ of optional type 'Int?' must be unwrapped to a value of type 'Int'\n       \
    \ result.insert(min, at: 0)\n                      ^\n/tmp/tmpkp69ftuf.swift:15:23:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        result.insert(min, at: 0)\n                      ^\n        \
    \                  ?? <#default value#>\n/tmp/tmpkp69ftuf.swift:15:23: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        result.insert(min,\
    \ at: 0)\n                      ^\n                         !\n"
  stdout: ''
  timestamp: 1660028607
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int? = nil\n    var\
    \ max: Int? = nil\n    for n in lst {\n        if min == nil || n < min {\n  \
    \          min = n\n        }\n        if max == nil || n > max {\n          \
    \  max = n\n        }\n    }\n    if min != nil {\n        result.insert(min,\
    \ 0)\n    }\n    if max != nil {\n        result.insert(max, result.count - 1)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmposvswgaa.swift:11:30: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        if min == nil || n < min {\n\
    \                             ^\n/tmp/tmposvswgaa.swift:11:30: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     if min == nil || n < min {\n                             ^\n           \
    \                      ?? <#default value#>\n/tmp/tmposvswgaa.swift:11:30: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \        if min == nil || n < min {\n                             ^\n        \
    \                        !\n/tmp/tmposvswgaa.swift:14:30: error: value of optional\
    \ type 'Int?' must be unwrapped to a value of type 'Int'\n        if max == nil\
    \ || n > max {\n                             ^\n/tmp/tmposvswgaa.swift:14:30:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        if max == nil || n > max {\n                             ^\n\
    \                                 ?? <#default value#>\n/tmp/tmposvswgaa.swift:14:30:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        if max == nil || n > max {\n                             ^\n\
    \                                !\n/tmp/tmposvswgaa.swift:19:16: error: no exact\
    \ matches in call to instance method 'insert'\n        result.insert(min, 0)\n\
    \               ^\n/tmp/tmposvswgaa.swift:19:16: note: candidate has partially\
    \ matching parameter list (__owned Int, at: Int)\n        result.insert(min, 0)\n\
    \               ^\n/tmp/tmposvswgaa.swift:19:16: note: candidate has partially\
    \ matching parameter list (__owned Int, at: Array<Int>.Index)\n        result.insert(min,\
    \ 0)\n               ^\n/tmp/tmposvswgaa.swift:22:16: error: no exact matches\
    \ in call to instance method 'insert'\n        result.insert(max, result.count\
    \ - 1)\n               ^\n/tmp/tmposvswgaa.swift:22:16: note: candidate has partially\
    \ matching parameter list (__owned Int, at: Int)\n        result.insert(max, result.count\
    \ - 1)\n               ^\n/tmp/tmposvswga"
  stdout: ''
  timestamp: 1660028607
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int = Int.max\n  \
    \  for el in lst {\n        if el < min {\n            min = el\n        }\n \
    \   }\n    for el in lst {\n        if el == min {\n            continue\n   \
    \     }\n        if el > min {\n            result.insert(el, at: 0)\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpmijqwjoh/tmpmijqwjoh.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade49b52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade49849b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade49849988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade498487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmijqwjoh                        0x0000564b35a045f4 <unavailable> + 5620

    5    libc.so.6                          0x00002ade49d3e460 __libc_start_main +
    245

    6    tmpmijqwjoh                        0x0000564b35a041e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int = Int.max\n  \
    \  for x in lst {\n        if x < min {\n            min = x\n        }\n    }\n\
    \    for x in lst {\n        if x == min {\n            continue\n        }\n\
    \        if x > min {\n            result.append(min)\n        }\n        result.append(x)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp8cqt_m6c/tmp8cqt_m6c.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acdcc0d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acdcbdcdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acdcbdcd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acdcbdcc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8cqt_m6c                        0x000055ebc81bb5f4 <unavailable> + 5620

    5    libc.so.6                          0x00002acdcc2c2460 __libc_start_main +
    245

    6    tmp8cqt_m6c                        0x000055ebc81bb1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660028607
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int = 0\n    var max:\
    \ Int = 0\n    for num in lst {\n        if num < min {\n            min = num\n\
    \        }\n        if num > max {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if num == min {\n            result.insert(num,\
    \ at: 0)\n        }\n        if num == max {\n            result.insert(num, at:\
    \ result.count - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/Array.swift:419: Fatal error: Negative Array index is out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e49505c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e491fc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6e491fc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6e491fc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6e491fbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b6e491e5196 <unavailable> + 1339798

    6    libswiftCore.so                    0x00002b6e491e9020 Array.insert(_:at:)
    + 80

    7    tmpgxd3b6zm                        0x0000556ada0cd45e <unavailable> + 9310

    8    tmpgxd3b6zm                        0x0000556ada0cc56c <unavailable> + 5484

    9    libc.so.6                          0x00002b6e496f1460 __libc_start_main +
    245

    10   tmpgxd3b6zm                        0x0000556ada0cc249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int = Int.max\n  \
    \  for num in lst {\n        if num < min {\n            min = num\n        }\n\
    \    }\n    for num in lst {\n        if num > min {\n            result.insert(num,\
    \ at: 0)\n        }\n    }\n    for num in lst {\n        if num < min {\n   \
    \         result.insert(num, at: 0)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp1ijo2245/tmp1ijo2245.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad58ee4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad58eb42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad58eb42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad58eb417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1ijo2245                        0x00005639a4a565f4 <unavailable> + 5620

    5    libc.so.6                          0x00002ad58f037460 __libc_start_main +
    245

    6    tmp1ijo2245                        0x00005639a4a561e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660028607
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var minValue = lst[0]\n   \
    \ var maxValue = lst[0]\n    for value in lst {\n        if value < minValue {\n\
    \            minValue = value\n        }\n        if value > maxValue {\n    \
    \        maxValue = value\n        }\n    }\n    for value in lst {\n        if\
    \ value < minValue {\n            result.insert(value, at: 0)\n        } else\
    \ if value > maxValue {\n            result.insert(value, at: result.count - 1)\n\
    \        } else {\n            result.insert(value, at: result.count - 1)\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/Array.swift:419: Fatal error: Negative Array index is out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002acc7f5fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc7f2f2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002acc7f2f2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002acc7f2f213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002acc7f2f1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002acc7f2db196 <unavailable> + 1339798

    6    libswiftCore.so                    0x00002acc7f2df020 Array.insert(_:at:)
    + 80

    7    tmpm_jafe2r                        0x000055d7edfb1540 <unavailable> + 9536

    8    tmpm_jafe2r                        0x000055d7edfb05bc <unavailable> + 5564

    9    libc.so.6                          0x00002acc7f7e7460 __libc_start_main +
    245

    10   tmpm_jafe2r                        0x000055d7edfb0299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int = Int.max\n  \
    \  var max: Int = Int.min\n    for el in lst {\n        if el < min {\n      \
    \      min = el\n        }\n        if el > max {\n            max = el\n    \
    \    }\n    }\n    for el in lst {\n        if el < min {\n            result.insert(el,\
    \ at: 0)\n        }\n        if el > max {\n            result.insert(el, at:\
    \ result.count - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmpjqh32vm5/tmpjqh32vm5.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfb20dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfb1dd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfb1dd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfb1dd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjqh32vm5                        0x0000561cd72b9654 <unavailable> + 5716

    5    libc.so.6                          0x00002abfb22cb460 __libc_start_main +
    245

    6    tmpjqh32vm5                        0x0000561cd72b9249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660028607
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var minValue = lst[0]\n   \
    \ var maxValue = lst[0]\n    for value in lst {\n        if value < minValue {\n\
    \            minValue = value\n        }\n        if value > maxValue {\n    \
    \        maxValue = value\n        }\n    }\n    for value in lst {\n        if\
    \ value < minValue {\n            result.insert(value, at: 0)\n        } else\
    \ if value > maxValue {\n            result.insert(value, at: result.count - 1)\n\
    \        } else {\n            result.insert(value, at: result.count - 1)\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/Array.swift:419: Fatal error: Negative Array index is out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002acc7f5fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc7f2f2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002acc7f2f2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002acc7f2f213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002acc7f2f1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002acc7f2db196 <unavailable> + 1339798

    6    libswiftCore.so                    0x00002acc7f2df020 Array.insert(_:at:)
    + 80

    7    tmpm_jafe2r                        0x000055d7edfb1540 <unavailable> + 9536

    8    tmpm_jafe2r                        0x000055d7edfb05bc <unavailable> + 5564

    9    libc.so.6                          0x00002acc7f7e7460 __libc_start_main +
    245

    10   tmpm_jafe2r                        0x000055d7edfb0299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    for _ in 0..<(lst2.count - 1) {\n\
    \        let min = lst2.min()!\n        let max = lst2.max()!\n        lst2.remove(at:\
    \ 0)\n        lst2.remove(at: 0)\n        lst2.append(min)\n        lst2.append(max)\n\
    \    }\n    return lst2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpeiog5bxe/tmpeiog5bxe.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b16f0baec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b16f08a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b16f08a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16f08a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeiog5bxe                        0x0000555aeb2ea764 <unavailable> + 5988

    5    libc.so.6                          0x00002b16f0d9a460 __libc_start_main +
    245

    6    tmpeiog5bxe                        0x0000555aeb2ea359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660028607
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var minValue = lst[0]\n   \
    \ var maxValue = lst[0]\n    for value in lst {\n        if value < minValue {\n\
    \            minValue = value\n        }\n        if value > maxValue {\n    \
    \        maxValue = value\n        }\n    }\n    for value in lst {\n        if\
    \ value < minValue {\n            result.insert(minValue, at: 0)\n        }\n\
    \        if value > maxValue {\n            result.insert(maxValue, at: 0)\n \
    \       }\n        result.append(value)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmpeqo1puek/tmpeqo1puek.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaef7562c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaef7259b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaef7259988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaef72587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeqo1puek                        0x0000556f3d82c6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002aaef774e460 __libc_start_main +
    245

    6    tmpeqo1puek                        0x0000556f3d82c299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660028607
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    for index in 0..<lst.count {\n  \
    \      if lst[index] < lst[index + 1] {\n            lst2.swapAt(index, index\
    \ + 1)\n        }\n    }\n    return lst2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b06da0b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b06d9dae561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b06d9dae286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b06d9dae13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b06d9dadbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b06d9bade83 <unavailable> + 188035

    6    tmpo4oc6wd1                        0x00005607f74ab378 <unavailable> + 9080

    7    tmpo4oc6wd1                        0x00005607f74aa5cc <unavailable> + 5580

    8    libc.so.6                          0x00002b06da2a3460 __libc_start_main +
    245

    9    tmpo4oc6wd1                        0x00005607f74aa2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660028607
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int? = nil\n    var\
    \ max: Int? = nil\n    for el in lst {\n        if min == nil || el < min {\n\
    \            min = el\n        }\n        if max == nil || el > max {\n      \
    \      max = el\n        }\n    }\n    if min != nil {\n        result.insert(min!,\
    \ at: 0)\n    }\n    if max != nil {\n        result.insert(max!, at: result.count\
    \ - 1)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpp27728va.swift:11:31: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        if min == nil || el < min {\n\
    \                              ^\n/tmp/tmpp27728va.swift:11:31: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     if min == nil || el < min {\n                              ^\n         \
    \                         ?? <#default value#>\n/tmp/tmpp27728va.swift:11:31:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        if min == nil || el < min {\n                              ^\n\
    \                                 !\n/tmp/tmpp27728va.swift:14:31: error: value\
    \ of optional type 'Int?' must be unwrapped to a value of type 'Int'\n       \
    \ if max == nil || el > max {\n                              ^\n/tmp/tmpp27728va.swift:14:31:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        if max == nil || el > max {\n                              ^\n\
    \                                  ?? <#default value#>\n/tmp/tmpp27728va.swift:14:31:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        if max == nil || el > max {\n                              ^\n\
    \                                 !\n"
  stdout: ''
  timestamp: 1660028607
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min = lst[0]\n    var max\
    \ = lst[0]\n    for el in lst {\n        if el < min {\n            min = el\n\
    \        }\n        if el > max {\n            max = el\n        }\n    }\n  \
    \  for el in lst {\n        if el < min {\n            result.insert(el, at: 0)\n\
    \        }\n        if el > max {\n            result.insert(el, at: result.count\
    \ - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpvuyahat2/tmpvuyahat2.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7990979c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7990670b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7990670988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b799066f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvuyahat2                        0x00005571121036a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b7990b65460 __libc_start_main +
    245

    6    tmpvuyahat2                        0x0000557112103299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660028607
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int = Int.max\n  \
    \  for v in lst {\n        if v < min {\n            min = v\n        }\n    }\n\
    \    for v in lst {\n        if v > min {\n            result.insert(v, at: 0)\n\
    \        }\n    }\n    for v in lst {\n        if v < min {\n            result.insert(v,\
    \ at: result.count - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp9p0ngu4_/tmp9p0ngu4_.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2dd774ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2dd7445b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2dd7445988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2dd74447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9p0ngu4_                        0x000056139542d654 <unavailable> + 5716

    5    libc.so.6                          0x00002b2dd793a460 __libc_start_main +
    245

    6    tmp9p0ngu4_                        0x000056139542d249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660028607
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min = lst[0]\n    var max\
    \ = lst[0]\n    for v in lst {\n        if v < min {\n            min = v\n  \
    \      }\n        if v > max {\n            max = v\n        }\n    }\n    for\
    \ v in lst {\n        if v < min {\n            min = v\n        }\n        if\
    \ v > max {\n            max = v\n        }\n    }\n    for v in lst {\n     \
    \   if v < min {\n            min = v\n        }\n        if v > max {\n     \
    \       max = v\n        }\n    }\n    for v in lst {\n        if v < min {\n\
    \            min = v\n        }\n        if v > max {\n            max = v\n \
    \       }\n    }\n    for v in lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    for v in lst {\n        if v < min {\n            min = v\n        }\n  \
    \      if v > max {\n            max = v\n        }\n    }\n    for v in lst {\n\
    \        if v < min {\n            min = v\n        }\n        if v > max {\n\
    \            max = v\n        }\n    }\n    for v in lst {\n        if v < min\
    \ {\n            min = v\n        }\n        if v > max {\n            max = v\n\
    \        }\n    }\n    for v in lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    for v in lst {\n        if v < min {\n            min = v\n        }\n  \
    \      if v > max {\n            max = v\n        }\n    }\n    for v in lst {\n\
    \        if v < min {\n            min = v\n        }\n        if v > max {\n\
    \            max = v\n        }\n    }\n    for v in lst {\n        if v < min\
    \ {\n            min = v\n        }\n        if v > max {\n            max = v\n\
    \        }\n    }\n    for v in lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    for v in lst {\n        if v < min {\n            min = v\n        }\n  \
    \      if v > max {\n            max = v\n        }\n    }\n    for v in lst {\n\
    \        if v < min {\n            min = v\n        }\n        if v > max {\n\
    \            max = v\n        }\n    }\n    for v in lst {\n        if v < min\
    \ {\n            min = v\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpw59wcf7q.swift:156:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmpw59wcf7q.swift:130:18: note: to match\
    \ this opening '{'\n    for v in lst {\n                 ^\n/tmp/tmpw59wcf7q.swift:156:53:\
    \ error: expected '}' at end of brace statement\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])\n                                                   \
    \ ^\n/tmp/tmpw59wcf7q.swift:6:45: note: to match this opening '{'\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n                                            ^\n/tmp/tmpw59wcf7q.swift:136:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpw59wcf7q.swift:7:9:\
    \ warning: initialization of variable 'result' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var result = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1660028607
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    for _ in 0..<(lst2.count - 1) {\n\
    \        let minIndex = lst2.index(of: lst2.minElement()!)\n        let maxIndex\
    \ = lst2.index(of: lst2.maxElement()!)\n        lst2.remove(at: minIndex)\n  \
    \      lst2.remove(at: maxIndex)\n    }\n    return lst2\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpvpmpau21.swift:9:44: error: value of type '[Int]' has no member\
    \ 'minElement'\n        let minIndex = lst2.index(of: lst2.minElement()!)\n  \
    \                                    ~~~~ ^~~~~~~~~~\n/tmp/tmpvpmpau21.swift:10:44:\
    \ error: value of type '[Int]' has no member 'maxElement'\n        let maxIndex\
    \ = lst2.index(of: lst2.maxElement()!)\n                                     \
    \ ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028607
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int = Int.max\n  \
    \  var max: Int = Int.min\n    for el in lst {\n        if el < min {\n      \
    \      min = el\n        }\n        if el > max {\n            max = el\n    \
    \    }\n    }\n    for el in lst {\n        if el == min {\n            result.insert(el,\
    \ at: 0)\n        }\n        if el == max {\n            result.insert(el, at:\
    \ result.count - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmpq1ji9qak/tmpq1ji9qak.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2624ec5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2624bbcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2624bbc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2624bbb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq1ji9qak                        0x000056079756e654 <unavailable> + 5716

    5    libc.so.6                          0x00002b26250b1460 __libc_start_main +
    245

    6    tmpq1ji9qak                        0x000056079756e249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660028607
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var minValue = lst[0]\n   \
    \ var maxValue = lst[0]\n    for value in lst {\n        if value < minValue {\n\
    \            minValue = value\n        }\n        if value > maxValue {\n    \
    \        maxValue = value\n        }\n    }\n    for value in lst {\n        if\
    \ value < minValue {\n            result.insert(value, at: 0)\n        } else\
    \ if value > maxValue {\n            result.insert(value, at: result.count - 1)\n\
    \        } else {\n            result.insert(value, at: result.count - 1)\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/Array.swift:419: Fatal error: Negative Array index is out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002acc7f5fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc7f2f2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002acc7f2f2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002acc7f2f213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002acc7f2f1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002acc7f2db196 <unavailable> + 1339798

    6    libswiftCore.so                    0x00002acc7f2df020 Array.insert(_:at:)
    + 80

    7    tmpm_jafe2r                        0x000055d7edfb1540 <unavailable> + 9536

    8    tmpm_jafe2r                        0x000055d7edfb05bc <unavailable> + 5564

    9    libc.so.6                          0x00002acc7f7e7460 __libc_start_main +
    245

    10   tmpm_jafe2r                        0x000055d7edfb0299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int = Int.max\n  \
    \  var max: Int = Int.min\n    for x in lst {\n        if x < min {\n        \
    \    min = x\n        }\n        if x > max {\n            max = x\n        }\n\
    \    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ at: 0)\n        }\n        if x == max {\n            result.insert(x, at: result.count\
    \ - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpwbqrpg4t/tmpwbqrpg4t.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b0b83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b0b534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b0b534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b0b5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwbqrpg4t                        0x000055a3d624d654 <unavailable> + 5716

    5    libc.so.6                          0x00002b1b0ba29460 __libc_start_main +
    245

    6    tmpwbqrpg4t                        0x000055a3d624d249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min = lst[0]\n    var max\
    \ = lst[0]\n    for el in lst {\n        if el < min {\n            min = el\n\
    \        }\n        if el > max {\n            max = el\n        }\n    }\n  \
    \  for el in lst {\n        if el == min {\n            result.insert(el, at:\
    \ 0)\n        }\n        if el == max {\n            result.insert(el, at: result.count\
    \ - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpxkv5hc9n/tmpxkv5hc9n.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2264118c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2263e0fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2263e0f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2263e0e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkv5hc9n                        0x0000565063ced6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b2264304460 __libc_start_main +
    245

    6    tmpxkv5hc9n                        0x0000565063ced299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660028607
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var minValue = lst[0]\n   \
    \ var maxValue = lst[0]\n    for value in lst {\n        if value < minValue {\n\
    \            minValue = value\n        }\n        if value > maxValue {\n    \
    \        maxValue = value\n        }\n    }\n    for value in lst {\n        if\
    \ value < minValue {\n            result.insert(minValue, at: 0)\n        }\n\
    \        if value > maxValue {\n            result.insert(maxValue, at: result.count\
    \ - 1)\n        }\n        result.append(value)\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmpzo8nutat/tmpzo8nutat.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb8200ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb81d01b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb81d01988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb81d007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzo8nutat                        0x00005586c2a5d6f4 <unavailable> + 5876

    5    libc.so.6                          0x00002afb821f6460 __libc_start_main +
    245

    6    tmpzo8nutat                        0x00005586c2a5d2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660028607
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min = lst[0]\n    var max\
    \ = lst[0]\n    for el in lst {\n        if el < min {\n            min = el\n\
    \        }\n        if el > max {\n            max = el\n        }\n    }\n  \
    \  for el in lst {\n        if el < min {\n            result.insert(el, at: 0)\n\
    \        }\n        if el > max {\n            result.insert(el, at: result.count\
    \ - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpvuyahat2/tmpvuyahat2.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7990979c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7990670b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7990670988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b799066f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvuyahat2                        0x00005571121036a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b7990b65460 __libc_start_main +
    245

    6    tmpvuyahat2                        0x0000557112103299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660028607
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int = Int.max\n  \
    \  var max: Int = Int.min\n    for x in lst {\n        if x < min {\n        \
    \    min = x\n        }\n        if x > max {\n            max = x\n        }\n\
    \    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ at: 0)\n        }\n        if x == max {\n            result.insert(x, at: result.count\
    \ - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpwbqrpg4t/tmpwbqrpg4t.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b0b83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b0b534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b0b534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b0b5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwbqrpg4t                        0x000055a3d624d654 <unavailable> + 5716

    5    libc.so.6                          0x00002b1b0ba29460 __libc_start_main +
    245

    6    tmpwbqrpg4t                        0x000055a3d624d249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min = lst[0]\n    var max\
    \ = lst[0]\n    for el in lst {\n        if el < min {\n            min = el\n\
    \        } else if el > max {\n            max = el\n        }\n    }\n    for\
    \ el in lst {\n        if el == min {\n            result.insert(el, at: 0)\n\
    \        } else if el == max {\n            result.insert(el, at: result.count\
    \ - 1)\n        } else {\n            result.insert(el, at: result.count - 1)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpk710mex8/tmpk710mex8.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae13965cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae139353b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae139353988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1393527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk710mex8                        0x0000562b849ee6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002ae139848460 __libc_start_main +
    245

    6    tmpk710mex8                        0x0000562b849ee299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660028607
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var minValue = lst[0]\n   \
    \ var maxValue = lst[0]\n    for value in lst {\n        if value < minValue {\n\
    \            minValue = value\n        }\n        if value > maxValue {\n    \
    \        maxValue = value\n        }\n    }\n    for value in lst {\n        if\
    \ value < minValue {\n            result.insert(value, at: 0)\n        } else\
    \ if value > maxValue {\n            result.insert(value, at: result.count - 1)\n\
    \        } else {\n            result.insert(value, at: result.count - 1)\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/Array.swift:419: Fatal error: Negative Array index is out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002acc7f5fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc7f2f2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002acc7f2f2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002acc7f2f213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002acc7f2f1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002acc7f2db196 <unavailable> + 1339798

    6    libswiftCore.so                    0x00002acc7f2df020 Array.insert(_:at:)
    + 80

    7    tmpm_jafe2r                        0x000055d7edfb1540 <unavailable> + 9536

    8    tmpm_jafe2r                        0x000055d7edfb05bc <unavailable> + 5564

    9    libc.so.6                          0x00002acc7f7e7460 __libc_start_main +
    245

    10   tmpm_jafe2r                        0x000055d7edfb0299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int = 0\n    var max:\
    \ Int = 0\n    for num in lst {\n        if num < min {\n            min = num\n\
    \        }\n        if num > max {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if num == min {\n            result.insert(num,\
    \ at: 0)\n        }\n        if num == max {\n            result.insert(num, at:\
    \ result.count - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/Array.swift:419: Fatal error: Negative Array index is out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e49505c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e491fc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6e491fc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6e491fc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6e491fbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b6e491e5196 <unavailable> + 1339798

    6    libswiftCore.so                    0x00002b6e491e9020 Array.insert(_:at:)
    + 80

    7    tmpgxd3b6zm                        0x0000556ada0cd45e <unavailable> + 9310

    8    tmpgxd3b6zm                        0x0000556ada0cc56c <unavailable> + 5484

    9    libc.so.6                          0x00002b6e496f1460 __libc_start_main +
    245

    10   tmpgxd3b6zm                        0x0000556ada0cc249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var minValue = lst[0]\n   \
    \ var maxValue = lst[0]\n    for value in lst {\n        if value < minValue {\n\
    \            minValue = value\n        }\n        if value > maxValue {\n    \
    \        maxValue = value\n        }\n    }\n    for value in lst {\n        if\
    \ value < minValue {\n            result.insert(value, at: 0)\n        }\n   \
    \     if value > maxValue {\n            result.insert(value, at: result.count\
    \ - 1)\n        }\n    }\n    for value in lst {\n        if value < minValue\
    \ {\n            result.insert(value, at: result.count - 1)\n        }\n     \
    \   if value > maxValue {\n            result.insert(value, at: 0)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp8q5544rx/tmp8q5544rx.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f7f546c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f7f23db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f7f23d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f7f23c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8q5544rx                        0x0000563b0eb466a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b2f7f732460 __libc_start_main +
    245

    6    tmp8q5544rx                        0x0000563b0eb46299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int? = nil\n    for\
    \ el in lst {\n        if min == nil || el < min! {\n            min = el\n  \
    \      }\n    }\n    if min == nil {\n        return result\n    }\n    for el\
    \ in lst {\n        if el == min! {\n            continue\n        }\n       \
    \ if el > min! {\n            result.insert(el, at: 0)\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp6mf4xep3/tmp6mf4xep3.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f40909c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f40600b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f40600988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f405ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6mf4xep3                        0x00005600bfad0684 <unavailable> + 5764

    5    libc.so.6                          0x00002b1f40af5460 __libc_start_main +
    245

    6    tmp6mf4xep3                        0x00005600bfad0279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660028607
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var minValue = lst[0]\n   \
    \ var maxValue = lst[0]\n    for value in lst {\n        if value < minValue {\n\
    \            minValue = value\n        }\n        if value > maxValue {\n    \
    \        maxValue = value\n        }\n    }\n    for value in lst {\n        if\
    \ value < minValue {\n            result.insert(value, at: 0)\n        } else\
    \ if value > maxValue {\n            result.insert(value, at: result.count - 1)\n\
    \        } else {\n            result.insert(value, at: result.count)\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpiqdy6yxt/tmpiqdy6yxt.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f65076c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f64d6db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f64d6d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f64d6c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiqdy6yxt                        0x0000558ab744e6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b1f65262460 __libc_start_main +
    245

    6    tmpiqdy6yxt                        0x0000558ab744e299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var minValue = lst[0]\n   \
    \ var maxValue = lst[0]\n    for value in lst {\n        if value < minValue {\n\
    \            minValue = value\n        }\n        if value > maxValue {\n    \
    \        maxValue = value\n        }\n    }\n    for value in lst {\n        if\
    \ value < minValue {\n            result.insert(value, at: 0)\n        } else\
    \ if value > maxValue {\n            result.insert(value, at: result.count - 1)\n\
    \        } else {\n            result.insert(value, at: result.count - 1)\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/Array.swift:419: Fatal error: Negative Array index is out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002acc7f5fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc7f2f2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002acc7f2f2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002acc7f2f213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002acc7f2f1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002acc7f2db196 <unavailable> + 1339798

    6    libswiftCore.so                    0x00002acc7f2df020 Array.insert(_:at:)
    + 80

    7    tmpm_jafe2r                        0x000055d7edfb1540 <unavailable> + 9536

    8    tmpm_jafe2r                        0x000055d7edfb05bc <unavailable> + 5564

    9    libc.so.6                          0x00002acc7f7e7460 __libc_start_main +
    245

    10   tmpm_jafe2r                        0x000055d7edfb0299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    for _ in 0..<lst.count {\n      \
    \  lst2.remove(at: 0)\n    }\n    return lst2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp75b_yhig/tmp75b_yhig.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0046acbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00467c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00467c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00467c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp75b_yhig                        0x00005602e25eb614 <unavailable> + 5652

    5    libc.so.6                          0x00002b0046cb7460 __libc_start_main +
    245

    6    tmp75b_yhig                        0x00005602e25eb209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int? = nil\n    for\
    \ el in lst {\n        if min == nil || el < min {\n            min = el\n   \
    \     }\n    }\n    if min != nil {\n        result.insert(min, at: 0)\n    }\n\
    \    var max = min\n    for el in lst {\n        if el > max {\n            max\
    \ = el\n        }\n    }\n    if max != nil {\n        result.insert(max, at:\
    \ result.count - 1)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpkn6ta_o3.swift:10:31: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        if min == nil || el < min {\n\
    \                              ^\n/tmp/tmpkn6ta_o3.swift:10:31: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     if min == nil || el < min {\n                              ^\n         \
    \                         ?? <#default value#>\n/tmp/tmpkn6ta_o3.swift:10:31:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        if min == nil || el < min {\n                              ^\n\
    \                                 !\n/tmp/tmpkn6ta_o3.swift:15:23: error: value\
    \ of optional type 'Int?' must be unwrapped to a value of type 'Int'\n       \
    \ result.insert(min, at: 0)\n                      ^\n/tmp/tmpkn6ta_o3.swift:15:23:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        result.insert(min, at: 0)\n                      ^\n        \
    \                  ?? <#default value#>\n/tmp/tmpkn6ta_o3.swift:15:23: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        result.insert(min,\
    \ at: 0)\n                      ^\n                         !\n/tmp/tmpkn6ta_o3.swift:19:17:\
    \ error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n\
    \        if el > max {\n                ^\n/tmp/tmpkn6ta_o3.swift:19:17: note:\
    \ coalesce using '??' to provide a default when the optional value contains 'nil'\n\
    \        if el > max {\n                ^\n                    ?? <#default value#>\n\
    /tmp/tmpkn6ta_o3.swift:19:17: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n        if el > max {\n              \
    \  ^\n                   !\n/tmp/tmpkn6ta_o3.swift:24:23: error: value of optional\
    \ type 'Int?' must be unwrapped to a value of type 'Int'\n        result.insert(max,\
    \ at: result.count - 1)\n                      ^\n/tmp/tmpkn6ta_o3.swift:24:23:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n  "
  stdout: ''
  timestamp: 1660028607
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int = Int.max\n  \
    \  var max: Int = Int.min\n    for num in lst {\n        if num < min {\n    \
    \        min = num\n        }\n        if num > max {\n            max = num\n\
    \        }\n    }\n    for num in lst {\n        if num < min {\n            min\
    \ = num\n        }\n        if num > max {\n            max = num\n        }\n\
    \    }\n    for num in lst {\n        if num < min {\n            min = num\n\
    \        }\n        if num > max {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if num < min {\n            min = num\n       \
    \ }\n        if num > max {\n            max = num\n        }\n    }\n    for\
    \ num in lst {\n        if num < min {\n            min = num\n        }\n   \
    \     if num > max {\n            max = num\n        }\n    }\n    for num in\
    \ lst {\n        if num < min {\n            min = num\n        }\n        if\
    \ num > max {\n            max = num\n        }\n    }\n    for num in lst {\n\
    \        if num < min {\n            min = num\n        }\n        if num > max\
    \ {\n            max = num\n        }\n    }\n    for num in lst {\n        if\
    \ num < min {\n            min = num\n        }\n        if num > max {\n    \
    \        max = num\n        }\n    }\n    for num in lst {\n        if num < min\
    \ {\n            min = num\n        }\n        if num > max {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if num < min {\n    \
    \        min = num\n        }\n        if num > max {\n            max = num\n\
    \        }\n    }\n    for num in lst {\n        if num < min {\n            min\
    \ = num\n        }\n        if num > max {\n            max = num\n        }\n\
    \    }\n    for num in lst {\n        if num < min {\n            min = num\n\
    \        }\n        if num > max {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if num < min {\n            min = num\n       \
    \ }\n        if num > max {\n            max = num\n        }\n    }\n    for\
    \ num in lst {\n        if num < min {\n            min = num\n        }\n   \
    \     if num > max {\n            max = num\n        }\n    }\n    for num in\
    \ lst {\n        if num < min {\n            min = num\n        }\n        if\
    \ num > max {\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpe2i820e5.swift:151:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmpe2i820e5.swift:122:20: note: to match\
    \ this opening '{'\n    for num in lst {\n                   ^\n/tmp/tmpe2i820e5.swift:151:53:\
    \ error: expected '}' at end of brace statement\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])\n                                                   \
    \ ^\n/tmp/tmpe2i820e5.swift:6:45: note: to match this opening '{'\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n                                            ^\n/tmp/tmpe2i820e5.swift:131:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpe2i820e5.swift:7:9:\
    \ warning: initialization of variable 'result' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var result = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int = Int.max\n  \
    \  for x in lst {\n        if x < min {\n            min = x\n        }\n    }\n\
    \    for x in lst {\n        if x == min {\n            continue\n        }\n\
    \        if x > min {\n            result.insert(x, at: 0)\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp7qkqw5ul/tmp7qkqw5ul.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b262c363c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b262c05ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b262c05a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b262c0597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7qkqw5ul                        0x00005597f7d725f4 <unavailable> + 5620

    5    libc.so.6                          0x00002b262c54f460 __libc_start_main +
    245

    6    tmp7qkqw5ul                        0x00005597f7d721e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660028607
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int = Int.max\n  \
    \  var max: Int = Int.min\n    for x in lst {\n        if x < min {\n        \
    \    min = x\n        }\n        if x > max {\n            max = x\n        }\n\
    \    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ at: 0)\n        }\n        if x == max {\n            result.insert(x, at: result.count\
    \ - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpwbqrpg4t/tmpwbqrpg4t.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b0b83dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b0b534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b0b534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b0b5337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwbqrpg4t                        0x000055a3d624d654 <unavailable> + 5716

    5    libc.so.6                          0x00002b1b0ba29460 __libc_start_main +
    245

    6    tmpwbqrpg4t                        0x000055a3d624d249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var minValue = lst[0]\n   \
    \ var maxValue = lst[0]\n    for value in lst {\n        if value < minValue {\n\
    \            minValue = value\n        }\n        if value > maxValue {\n    \
    \        maxValue = value\n        }\n    }\n    for value in lst {\n        if\
    \ value < minValue {\n            result.insert(value, at: 0)\n        }\n   \
    \     if value > maxValue {\n            result.insert(value, at: result.count\
    \ - 1)\n        }\n    }\n    for value in lst {\n        if value < minValue\
    \ {\n            result.insert(value, at: result.count - 1)\n        }\n     \
    \   if value > maxValue {\n            result.insert(value, at: 0)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp8q5544rx/tmp8q5544rx.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f7f546c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f7f23db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f7f23d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f7f23c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8q5544rx                        0x0000563b0eb466a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b2f7f732460 __libc_start_main +
    245

    6    tmp8q5544rx                        0x0000563b0eb46299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var minValue = lst[0]\n   \
    \ var maxValue = lst[0]\n    for value in lst {\n        if value < minValue {\n\
    \            minValue = value\n        }\n        if value > maxValue {\n    \
    \        maxValue = value\n        }\n    }\n    for value in lst {\n        if\
    \ value < minValue {\n            result.insert(minValue, at: 0)\n           \
    \ minValue = value\n        }\n        if value > maxValue {\n            result.insert(maxValue,\
    \ at: 0)\n            maxValue = value\n        }\n    }\n    for value in lst\
    \ {\n        if value < minValue {\n            result.insert(minValue, at: 0)\n\
    \            minValue = value\n        }\n        if value > maxValue {\n    \
    \        result.insert(maxValue, at: 0)\n            maxValue = value\n      \
    \  }\n    }\n    for value in lst {\n        if value < minValue {\n         \
    \   result.insert(minValue, at: 0)\n            minValue = value\n        }\n\
    \        if value > maxValue {\n            result.insert(maxValue, at: 0)\n \
    \           maxValue = value\n        }\n    }\n    for value in lst {\n     \
    \   if value < minValue {\n            result.insert(minValue, at: 0)\n      \
    \      minValue = value\n        }\n        if value > maxValue {\n          \
    \  result.insert(maxValue, at: 0)\n            maxValue = value\n        }\n \
    \   }\n    for value in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ at: 0)\n            minValue = value\n        }\n        if value > maxValue\
    \ {\n            result.insert(maxValue, at: 0)\n            maxValue = value\n\
    \        }\n    }\n    for value in lst {\n        if value < minValue {\n   \
    \         result.insert(minValue, at: 0)\n            minValue = value\n     \
    \   }\n        if value > maxValue {\n            result.insert(maxValue, at:\
    \ 0)\n            maxValue = value\n        }\n    }\n    for value in lst {\n\
    \        if value < minValue {\n            result.insert(minValue, at: 0)\n \
    \           minValue = value\n        }\n        if value > maxValue {\n     \
    \       result.insert(maxValue, at: 0)\n            maxValue = value\n       \
    \ }\n    }\n    for value in lst {\n        if value < minValue {\n          \
    \  result.insert(minValue, at: 0)\n            minValue = value\n        }\n \
    \       if value > maxValue {\n            result.insert(maxValue, at: 0)\n  \
    \          maxValue = value\n        }\n    }\n    for value in lst {\n      \
    \  if value < minValue {\n            result.insert(minValue, at: 0)\n       \
    \     minValue = value\n        }\n        if value > maxValue {\n           \
    \ result.insert(maxValue, at: 0)\n            maxValue = value\n        }\n  \
    \  }\n    for value in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ at: 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpis30nfn1.swift:134:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmpis30nfn1.swift:108:22: note: to match\
    \ this opening '{'\n    for value in lst {\n                     ^\n/tmp/tmpis30nfn1.swift:134:53:\
    \ error: expected '}' at end of brace statement\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])\n                                                   \
    \ ^\n/tmp/tmpis30nfn1.swift:6:45: note: to match this opening '{'\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n                                            ^\n/tmp/tmpis30nfn1.swift:114:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660028607
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int = Int.max\n  \
    \  var max: Int = Int.min\n    for num in lst {\n        if num < min {\n    \
    \        min = num\n        }\n        if num > max {\n            max = num\n\
    \        }\n    }\n    for num in lst {\n        if num < min {\n            result.insert(num,\
    \ at: 0)\n        }\n        if num > max {\n            result.insert(num, at:\
    \ result.count - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp8jq5i31g/tmp8jq5i31g.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b386bacdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b386b7c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b386b7c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b386b7c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8jq5i31g                        0x000056103f3fb654 <unavailable> + 5716

    5    libc.so.6                          0x00002b386bcb9460 __libc_start_main +
    245

    6    tmp8jq5i31g                        0x000056103f3fb249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660028607
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int = Int.max\n  \
    \  var max: Int = Int.min\n    for num in lst {\n        if num < min {\n    \
    \        min = num\n        }\n        if num > max {\n            max = num\n\
    \        }\n    }\n    for num in lst {\n        if num == min {\n           \
    \ result.insert(num, at: 0)\n        }\n        if num == max {\n            result.insert(num,\
    \ at: result.count - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmpm89oo33s/tmpm89oo33s.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad90790c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad90487b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad90487988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad904867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm89oo33s                        0x0000559c8011f654 <unavailable> + 5716

    5    libc.so.6                          0x00002aad9097c460 __libc_start_main +
    245

    6    tmpm89oo33s                        0x0000559c8011f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660028607
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    for index in 0..<lst2.count {\n \
    \       let min = lst2[index]\n        var lst3 = lst2\n        for index2 in\
    \ 0..<lst3.count {\n            if lst3[index2] < min {\n                lst3\
    \ = lst3.filter{ $0 != min }\n                lst3 = lst3.filter{ $0 != lst3[index2]\
    \ }\n                lst3 = lst3.filter{ $0 != lst2[index] }\n               \
    \ lst3 = lst3.filter{ $0 != lst2[index2] }\n                lst3 = lst3.filter{\
    \ $0 != min }\n                lst3 = lst3.filter{ $0 != lst2[index] }\n     \
    \           lst3 = lst3.filter{ $0 != lst2[index2] }\n                lst3 = lst3.filter{\
    \ $0 != min }\n                lst3 = lst3.filter{ $0 != lst2[index] }\n     \
    \           lst3 = lst3.filter{ $0 != lst2[index2] }\n                lst3 = lst3.filter{\
    \ $0 != min }\n                lst3 = lst3.filter{ $0 != lst2[index] }\n     \
    \           lst3 = lst3.filter{ $0 != lst2[index2] }\n                lst3 = lst3.filter{\
    \ $0 != min }\n                lst3 = lst3.filter{ $0 != lst2[index] }\n     \
    \           lst3 = lst3.filter{ $0 != lst2[index2] }\n                lst3 = lst3.filter{\
    \ $0 != min }\n                lst3 = lst3.filter{ $0 != lst2[index] }\n     \
    \           lst3 = lst3.filter{ $0 != lst2[index2] }\n                lst3 = lst3.filter{\
    \ $0 != min }\n                lst3 = lst3.filter{ $0 != lst2[index] }\n     \
    \           lst3 = lst3.filter{ $0 != lst2[index2] }\n                lst3 = lst3.filter{\
    \ $0 != min }\n                lst3 = lst3.filter{ $0 != lst2[index] }\n     \
    \           lst3 = lst3.filter{ $0 != lst2[index2] }\n                lst3 = lst3.filter{\
    \ $0 != min }\n                lst3 = lst3.filter{ $0 != lst2[index] }\n     \
    \           lst3 = lst3.filter{ $0 != lst2[index2] }\n                lst3 = lst3.filter{\
    \ $0 != min }\n                lst3 = lst3.filter{ $0 != lst2[index] }\n     \
    \           lst3 = lst3.filter{ $0 != lst2[index2] }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpyw6zdk01.swift:67:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmpyw6zdk01.swift:11:38: note: to match\
    \ this opening '{'\n        for index2 in 0..<lst3.count {\n                 \
    \                    ^\n/tmp/tmpyw6zdk01.swift:67:53: error: expected '}' at end\
    \ of brace statement\nassert(strange_sort_list(lst: [111111]) == [111111])\n \
    \                                                   ^\n/tmp/tmpyw6zdk01.swift:8:33:\
    \ note: to match this opening '{'\n    for index in 0..<lst2.count {\n       \
    \                         ^\n/tmp/tmpyw6zdk01.swift:67:53: error: expected '}'\
    \ at end of brace statement\nassert(strange_sort_list(lst: [111111]) == [111111])\n\
    \                                                    ^\n/tmp/tmpyw6zdk01.swift:6:45:\
    \ note: to match this opening '{'\nfunc strange_sort_list(lst: [Int]) -> [Int]\
    \ {\n                                            ^\n/tmp/tmpyw6zdk01.swift:47:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpyw6zdk01.swift:7:9:\
    \ warning: variable 'lst2' was never mutated; consider changing to 'let' constant\n\
    \    var lst2 = lst\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660028607
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var minValue = lst[0]\n   \
    \ var maxValue = lst[0]\n    for value in lst {\n        if value < minValue {\n\
    \            minValue = value\n        }\n        if value > maxValue {\n    \
    \        maxValue = value\n        }\n    }\n    for value in lst {\n        if\
    \ value < minValue {\n            result.insert(value, at: 0)\n        }\n   \
    \     if value > maxValue {\n            result.insert(value, at: result.count\
    \ - 1)\n        }\n    }\n    for value in lst {\n        if value < minValue\
    \ {\n            result.insert(value, at: result.count - 1)\n        }\n     \
    \   if value > maxValue {\n            result.insert(value, at: 0)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp8q5544rx/tmp8q5544rx.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f7f546c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f7f23db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f7f23d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f7f23c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8q5544rx                        0x0000563b0eb466a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b2f7f732460 __libc_start_main +
    245

    6    tmp8q5544rx                        0x0000563b0eb46299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int = Int.max\n  \
    \  for value in lst {\n        if value < min {\n            min = value\n   \
    \     }\n    }\n    for value in lst {\n        if value > min {\n           \
    \ result.insert(value, at: 0)\n        }\n    }\n    for value in lst {\n    \
    \    if value < min {\n            result.insert(value, at: 0)\n        }\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpccubks6d/tmpccubks6d.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab7a22ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab7a1fd4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab7a1fd4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7a1fd37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpccubks6d                        0x0000558ae7e475f4 <unavailable> + 5620

    5    libc.so.6                          0x00002ab7a24c9460 __libc_start_main +
    245

    6    tmpccubks6d                        0x0000558ae7e471e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660028607
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int? = nil\n    for\
    \ n in lst {\n        if min == nil || n < min {\n            min = n\n      \
    \  }\n    }\n    if min != nil {\n        result.insert(min, at: 0)\n    }\n \
    \   for n in lst {\n        if min == nil || n > min {\n            result.insert(n,\
    \ at: result.count - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp94nttqcb.swift:10:30: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        if min == nil || n < min {\n\
    \                             ^\n/tmp/tmp94nttqcb.swift:10:30: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     if min == nil || n < min {\n                             ^\n           \
    \                      ?? <#default value#>\n/tmp/tmp94nttqcb.swift:10:30: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \        if min == nil || n < min {\n                             ^\n        \
    \                        !\n/tmp/tmp94nttqcb.swift:15:23: error: value of optional\
    \ type 'Int?' must be unwrapped to a value of type 'Int'\n        result.insert(min,\
    \ at: 0)\n                      ^\n/tmp/tmp94nttqcb.swift:15:23: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     result.insert(min, at: 0)\n                      ^\n                   \
    \       ?? <#default value#>\n/tmp/tmp94nttqcb.swift:15:23: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        result.insert(min,\
    \ at: 0)\n                      ^\n                         !\n/tmp/tmp94nttqcb.swift:18:30:\
    \ error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n\
    \        if min == nil || n > min {\n                             ^\n/tmp/tmp94nttqcb.swift:18:30:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        if min == nil || n > min {\n                             ^\n\
    \                                 ?? <#default value#>\n/tmp/tmp94nttqcb.swift:18:30:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        if min == nil || n > min {\n                             ^\n\
    \                                !\n"
  stdout: ''
  timestamp: 1660028607
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    for _ in 0..<(lst2.count - 1) {\n\
    \        let minIndex = lst2.index(of: lst2.min())!\n        let maxIndex = lst2.index(of:\
    \ lst2.max())!\n        lst2.remove(at: minIndex)\n        lst2.remove(at: maxIndex)\n\
    \    }\n    return lst2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpsc9ak025.swift:9:44: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        let minIndex = lst2.index(of:\
    \ lst2.min())!\n                                           ^\n/tmp/tmpsc9ak025.swift:9:44:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        let minIndex = lst2.index(of: lst2.min())!\n                \
    \                           ^\n                                              \
    \   ?? <#default value#>\n/tmp/tmpsc9ak025.swift:9:44: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n        let minIndex\
    \ = lst2.index(of: lst2.min())!\n                                           ^\n\
    \                                                !\n/tmp/tmpsc9ak025.swift:10:44:\
    \ error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n\
    \        let maxIndex = lst2.index(of: lst2.max())!\n                        \
    \                   ^\n/tmp/tmpsc9ak025.swift:10:44: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n        let maxIndex\
    \ = lst2.index(of: lst2.max())!\n                                           ^\n\
    \                                                 ?? <#default value#>\n/tmp/tmpsc9ak025.swift:10:44:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        let maxIndex = lst2.index(of: lst2.max())!\n                \
    \                           ^\n                                              \
    \  !\n"
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var minValue = lst[0]\n   \
    \ var maxValue = lst[0]\n    for value in lst {\n        if value < minValue {\n\
    \            minValue = value\n        }\n        if value > maxValue {\n    \
    \        maxValue = value\n        }\n    }\n    for value in lst {\n        if\
    \ value < minValue {\n            result.insert(value, at: 0)\n        }\n   \
    \     if value > maxValue {\n            result.insert(value, at: result.count\
    \ - 1)\n        }\n    }\n    for value in lst {\n        if value < minValue\
    \ {\n            result.insert(value, at: result.count - 1)\n        }\n     \
    \   if value > maxValue {\n            result.insert(value, at: 0)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp8q5544rx/tmp8q5544rx.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f7f546c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f7f23db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f7f23d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f7f23c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8q5544rx                        0x0000563b0eb466a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b2f7f732460 __libc_start_main +
    245

    6    tmp8q5544rx                        0x0000563b0eb46299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    for _ in 0..<(lst2.count - 1) {\n\
    \        let minIndex = lst2.index(of: lst2.min())!\n        let maxIndex = lst2.index(of:\
    \ lst2.max())!\n        lst2.remove(at: minIndex)\n        lst2.remove(at: maxIndex)\n\
    \    }\n    return lst2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpsc9ak025.swift:9:44: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        let minIndex = lst2.index(of:\
    \ lst2.min())!\n                                           ^\n/tmp/tmpsc9ak025.swift:9:44:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        let minIndex = lst2.index(of: lst2.min())!\n                \
    \                           ^\n                                              \
    \   ?? <#default value#>\n/tmp/tmpsc9ak025.swift:9:44: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n        let minIndex\
    \ = lst2.index(of: lst2.min())!\n                                           ^\n\
    \                                                !\n/tmp/tmpsc9ak025.swift:10:44:\
    \ error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n\
    \        let maxIndex = lst2.index(of: lst2.max())!\n                        \
    \                   ^\n/tmp/tmpsc9ak025.swift:10:44: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n        let maxIndex\
    \ = lst2.index(of: lst2.max())!\n                                           ^\n\
    \                                                 ?? <#default value#>\n/tmp/tmpsc9ak025.swift:10:44:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        let maxIndex = lst2.index(of: lst2.max())!\n                \
    \                           ^\n                                              \
    \  !\n"
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int = Int.max\n  \
    \  var max: Int = Int.min\n    for num in lst {\n        if num < min {\n    \
    \        min = num\n        }\n        if num > max {\n            max = num\n\
    \        }\n    }\n    for num in lst {\n        if num < min {\n            min\
    \ = num\n        }\n        if num > max {\n            max = num\n        }\n\
    \    }\n    for num in lst {\n        if num < min {\n            min = num\n\
    \        }\n        if num > max {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if num < min {\n            min = num\n       \
    \ }\n        if num > max {\n            max = num\n        }\n    }\n    for\
    \ num in lst {\n        if num < min {\n            min = num\n        }\n   \
    \     if num > max {\n            max = num\n        }\n    }\n    for num in\
    \ lst {\n        if num < min {\n            min = num\n        }\n        if\
    \ num > max {\n            max = num\n        }\n    }\n    for num in lst {\n\
    \        if num < min {\n            min = num\n        }\n        if num > max\
    \ {\n            max = num\n        }\n    }\n    for num in lst {\n        if\
    \ num < min {\n            min = num\n        }\n        if num > max {\n    \
    \        max = num\n        }\n    }\n    for num in lst {\n        if num < min\
    \ {\n            min = num\n        }\n        if num > max {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if num < min {\n    \
    \        min = num\n        }\n        if num > max {\n            max = num\n\
    \        }\n    }\n    for num in lst {\n        if num < min {\n            min\
    \ = num\n        }\n        if num > max {\n            max = num\n        }\n\
    \    }\n    for num in lst {\n        if num < min {\n            min = num\n\
    \        }\n        if num > max {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if num < min {\n            min = num\n       \
    \ }\n        if num > max {\n            max = num\n        }\n    }\n    for\
    \ num in lst {\n        if num < min {\n            min = num\n        }\n   \
    \     if num > max {\n            max = num\n        }\n    }\n    for num in\
    \ lst {\n        if num < min {\n            min = num\n        }\n        if\
    \ num > max {\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpe2i820e5.swift:151:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmpe2i820e5.swift:122:20: note: to match\
    \ this opening '{'\n    for num in lst {\n                   ^\n/tmp/tmpe2i820e5.swift:151:53:\
    \ error: expected '}' at end of brace statement\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])\n                                                   \
    \ ^\n/tmp/tmpe2i820e5.swift:6:45: note: to match this opening '{'\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n                                            ^\n/tmp/tmpe2i820e5.swift:131:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpe2i820e5.swift:7:9:\
    \ warning: initialization of variable 'result' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var result = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int = lst[0]\n   \
    \ var max: Int = lst[0]\n    for el in lst {\n        if el < min {\n        \
    \    min = el\n        }\n        if el > max {\n            max = el\n      \
    \  }\n    }\n    for el in lst {\n        if el < min {\n            result.insert(min,\
    \ el)\n        }\n        if el > max {\n            result.insert(max, el)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp2q3p4ubg.swift:20:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(min, el)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp2q3p4ubg.swift:23:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(max,\
    \ el)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1660028607
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int = Int.max\n  \
    \  var max: Int = Int.min\n    for el in lst {\n        if el < min {\n      \
    \      min = el\n        }\n        if el > max {\n            max = el\n    \
    \    }\n    }\n    for el in lst {\n        if el < min {\n            min = el\n\
    \        }\n        if el > max {\n            max = el\n        }\n    }\n  \
    \  for el in lst {\n        if el < min {\n            min = el\n        }\n \
    \       if el > max {\n            max = el\n        }\n    }\n    for el in lst\
    \ {\n        if el < min {\n            min = el\n        }\n        if el > max\
    \ {\n            max = el\n        }\n    }\n    for el in lst {\n        if el\
    \ < min {\n            min = el\n        }\n        if el > max {\n          \
    \  max = el\n        }\n    }\n    for el in lst {\n        if el < min {\n  \
    \          min = el\n        }\n        if el > max {\n            max = el\n\
    \        }\n    }\n    for el in lst {\n        if el < min {\n            min\
    \ = el\n        }\n        if el > max {\n            max = el\n        }\n  \
    \  }\n    for el in lst {\n        if el < min {\n            min = el\n     \
    \   }\n        if el > max {\n            max = el\n        }\n    }\n    for\
    \ el in lst {\n        if el < min {\n            min = el\n        }\n      \
    \  if el > max {\n            max = el\n        }\n    }\n    for el in lst {\n\
    \        if el < min {\n            min = el\n        }\n        if el > max {\n\
    \            max = el\n        }\n    }\n    for el in lst {\n        if el <\
    \ min {\n            min = el\n        }\n        if el > max {\n            max\
    \ = el\n        }\n    }\n    for el in lst {\n        if el < min {\n       \
    \     min = el\n        }\n        if el > max {\n            max = el\n     \
    \   }\n    }\n    for el in lst {\n        if el < min {\n            min = el\n\
    \        }\n        if el > max {\n            max = el\n        }\n    }\n  \
    \  for el in lst {\n        if el < min {\n            min = el\n        }\n \
    \       if el > max {\n            max = el\n        }\n    }\n    for el in lst\
    \ {\n        if el < min {\n            min = el\n        }\n        if el > max\
    \ {\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpktocoi0_.swift:151:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmpktocoi0_.swift:122:19: note: to match\
    \ this opening '{'\n    for el in lst {\n                  ^\n/tmp/tmpktocoi0_.swift:151:53:\
    \ error: expected '}' at end of brace statement\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])\n                                                   \
    \ ^\n/tmp/tmpktocoi0_.swift:6:45: note: to match this opening '{'\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n                                            ^\n/tmp/tmpktocoi0_.swift:131:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpktocoi0_.swift:7:9:\
    \ warning: initialization of variable 'result' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var result = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1660028607
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int? = nil\n    var\
    \ max: Int? = nil\n    for el in lst {\n        if min == nil || el < min {\n\
    \            min = el\n        }\n        if max == nil || el > max {\n      \
    \      max = el\n        }\n    }\n    if min != nil {\n        result.insert(min,\
    \ 0)\n    }\n    if max != nil {\n        result.insert(max, result.count-1)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp12zu68kl.swift:11:31: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        if min == nil || el < min {\n\
    \                              ^\n/tmp/tmp12zu68kl.swift:11:31: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     if min == nil || el < min {\n                              ^\n         \
    \                         ?? <#default value#>\n/tmp/tmp12zu68kl.swift:11:31:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        if min == nil || el < min {\n                              ^\n\
    \                                 !\n/tmp/tmp12zu68kl.swift:14:31: error: value\
    \ of optional type 'Int?' must be unwrapped to a value of type 'Int'\n       \
    \ if max == nil || el > max {\n                              ^\n/tmp/tmp12zu68kl.swift:14:31:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        if max == nil || el > max {\n                              ^\n\
    \                                  ?? <#default value#>\n/tmp/tmp12zu68kl.swift:14:31:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        if max == nil || el > max {\n                              ^\n\
    \                                 !\n/tmp/tmp12zu68kl.swift:19:16: error: no exact\
    \ matches in call to instance method 'insert'\n        result.insert(min, 0)\n\
    \               ^\n/tmp/tmp12zu68kl.swift:19:16: note: candidate has partially\
    \ matching parameter list (__owned Int, at: Int)\n        result.insert(min, 0)\n\
    \               ^\n/tmp/tmp12zu68kl.swift:19:16: note: candidate has partially\
    \ matching parameter list (__owned Int, at: Array<Int>.Index)\n        result.insert(min,\
    \ 0)\n               ^\n/tmp/tmp12zu68kl.swift:22:16: error: no exact matches\
    \ in call to instance method 'insert'\n        result.insert(max, result.count-1)\n\
    \               ^\n/tmp/tmp12zu68kl.swift:22:16: note: candidate has partially\
    \ matching parameter list (__owned Int, at: Int)\n        result.insert(max, result.count-1)\n\
    \               ^\n/tm"
  stdout: ''
  timestamp: 1660028607
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int = lst[0]\n   \
    \ var max: Int = lst[0]\n    for x in lst {\n        if x < min {\n          \
    \  min = x\n        }\n        if x > max {\n            max = x\n        }\n\
    \    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ at: 0)\n        }\n        if x == max {\n            result.insert(x, at: result.count\
    \ - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp1a1gl_1a/tmp1a1gl_1a.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace0c918c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace0c60fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace0c60f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace0c60e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1a1gl_1a                        0x0000555b274f36a4 <unavailable> + 5796

    5    libc.so.6                          0x00002ace0cb04460 __libc_start_main +
    245

    6    tmp1a1gl_1a                        0x0000555b274f3299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660028607
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var min: Int = 0\n    var max:\
    \ Int = 0\n    for num in lst {\n        if min > num {\n            min = num\n\
    \        }\n        if max < num {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if num == min {\n            result.insert(num,\
    \ at: 0)\n        }\n        if num == max {\n            result.insert(num, at:\
    \ result.count - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/Array.swift:419: Fatal error: Negative Array index is out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b06a981ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b06a9515561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b06a9515286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b06a951513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b06a9514bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b06a94fe196 <unavailable> + 1339798

    6    libswiftCore.so                    0x00002b06a9502020 Array.insert(_:at:)
    + 80

    7    tmpzin5lye7                        0x000055efbcda945e <unavailable> + 9310

    8    tmpzin5lye7                        0x000055efbcda856c <unavailable> + 5484

    9    libc.so.6                          0x00002b06a9a0a460 __libc_start_main +
    245

    10   tmpzin5lye7                        0x000055efbcda8249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660028607
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    var minValue = lst[0]\n   \
    \ var maxValue = lst[0]\n    for value in lst {\n        if value < minValue {\n\
    \            minValue = value\n        }\n        if value > maxValue {\n    \
    \        maxValue = value\n        }\n    }\n    for value in lst {\n        if\
    \ value < minValue {\n            result.insert(value, at: 0)\n        } else\
    \ if value > maxValue {\n            result.insert(value, at: result.count - 1)\n\
    \        } else {\n            result.insert(value, at: result.count)\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpiqdy6yxt/tmpiqdy6yxt.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f65076c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f64d6db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f64d6d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f64d6c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiqdy6yxt                        0x0000558ab744e6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b1f65262460 __libc_start_main +
    245

    6    tmpiqdy6yxt                        0x0000558ab744e299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660028606
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n    var lst2 = lst\n    lst2.sort()\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp35houeje/tmp35houeje.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d809ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d7d91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d7d91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d7d907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35houeje                        0x000055f1085bc4f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b17d8286460 __libc_start_main +
    245

    6    tmp35houeje                        0x000055f1085bc0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660028606
