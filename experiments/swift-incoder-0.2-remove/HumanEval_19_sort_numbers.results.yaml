language: swift
name: HumanEval_19_sort_numbers
results:
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters()\n    numbers_array.sortInPlace({ $0 < $1 })\n    return\
    \ String(numbers_array)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp8nzz_5jf.swift:6:33: error: cannot call value of non-function type\
    \ 'String'\n    var numbers_array = numbers.characters()\n                   \
    \             ^         ~~\n                                          \n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(\" \").map{Int($0)!}\n    numbers_array.sort{$0 < $1}\n    return\
    \ numbers_array.map{String($0)}.joined(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp60nls7s6.swift:6:39: error: missing argument label 'separator:'\
    \ in call\n    var numbers_array = numbers.split(\" \").map{Int($0)!}\n      \
    \                                ^\n                                      separator:\
    \ \n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(\" \").map{Int($0)!}\n    numbers_array.sortInPlace()\n    return\
    \ numbers_array.map{String($0)}.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmpym_j8k2t.swift:6:39: error: missing argument label 'separator:'\
    \ in call\n    var numbers_array = numbers.split(\" \").map{Int($0)!}\n      \
    \                                ^\n                                      separator:\
    \ \n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters.split{$0 == \" \"}.map(String.init)\n    numbers_array.sort{$0\
    \ < $1}\n    return numbers_array.joinWithSeparator(\" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp3wwr50pd.swift:6:33: error: 'characters' is unavailable: Please\
    \ use String directly\n    var numbers_array = numbers.characters.split{$0 ==\
    \ \" \"}.map(String.init)\n                                ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp3wwr50pd.swift:8:26: error: value of\
    \ type '[String]' has no member 'joinWithSeparator'\n    return numbers_array.joinWithSeparator(\"\
    \ \")\n           ~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort { $0.compare($1) ==\
    \ .orderedAscending }\n    return numbers_array.joined(separator: \" \")\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpdls_unls.swift:7:29: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    numbers_array.sort { $0.compare($1)\
    \ == .orderedAscending }\n                         ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.ToLower(numbers)\n    numbers = strings.Replace(numbers,\
    \ \"-\", \"\", -1)\n    numbers = strings.Replace(numbers, \",\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"'\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"0\", \"\", -1)\n    numbers = strings.Replace(numbers, \"1\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"2\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"3\", \"\", -1)\n    numbers = strings.Replace(numbers, \"4\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"5\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"6\", \"\", -1)\n    numbers = strings.Replace(numbers, \"7\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"8\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"9\", \"\", -1)\n    numbers = strings.Replace(numbers, \" \", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"-\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"/\", \"\", -1)\n    numbers = strings.Replace(numbers, \"\\\\\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"%\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"*\", \"\", -1)\n    numbers = strings.Replace(numbers, \"(\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \")\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"=\", \"\", -1)\n    numbers = strings.Replace(numbers, \"<\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \">\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"?\", \"\", -1)\n    numbers = strings.Replace(numbers, \"!\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"@\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"#\", \"\", -1)\n    numbers = strings.Replace(numbers, \"$\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"%\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"^\", \"\", -1)\n    numbers = strings.Replace(numbers, \"&\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"*\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"+\", \"\", -1)\n    numbers = strings.Replace(numbers, \",\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"-\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"/\", \"\", -1)\n    numbers = strings.Replace(numbers, \"\\\\\", \"\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpatsn2tad.swift:46:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpatsn2tad.swift:45:30: note: to match this opening '('\n    numbers\
    \ = strings.Replace(numbers, \"\\\\\", \"\"\n                             ^\n\
    /tmp/tmpatsn2tad.swift:6:15: error: cannot find 'strings' in scope\n    numbers\
    \ = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmpatsn2tad.swift:6:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmpatsn2tad.swift:7:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.ToLower(numbers)\n   \
    \           ^~~~~~~\n/tmp/tmpatsn2tad.swift:7:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.ToLower(numbers)\n    ^~~~~~~\n\
    /tmp/tmpatsn2tad.swift:8:15: error: cannot find 'strings' in scope\n    numbers\
    \ = strings.Replace(numbers, \"-\", \"\", -1)\n              ^~~~~~~\n/tmp/tmpatsn2tad.swift:8:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.Replace(numbers, \"-\", \"\", -1)\n    ^~~~~~~\n/tmp/tmpatsn2tad.swift:9:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.Replace(numbers,\
    \ \",\", \"\", -1)\n              ^~~~~~~\n/tmp/tmpatsn2tad.swift:9:5: error:\
    \ cannot assign to value: 'numbers' is a 'let' constant\n    numbers = strings.Replace(numbers,\
    \ \",\", \"\", -1)\n    ^~~~~~~\n/tmp/tmpatsn2tad.swift:10:15: error: cannot find\
    \ 'strings' in scope\n    numbers = strings.Replace(numbers, \"'\", \"\", -1)\n\
    \              ^~~~~~~\n/tmp/tmpatsn2tad.swift:10:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.Replace(numbers, \"'\"\
    , \"\", -1)\n    ^~~~~~~\n/tmp/tmpatsn2tad.swift:11:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.Replace(numbers, \"0\", \"\", -1)\n        \
    \      ^~~~~~~\n/tmp/tmpatsn2tad.swift:11:5: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n    numbers = strings.Replace(numbers, \"0\", \"\", -1)\n\
    \    ^~~~~~~\n/tmp/tmpatsn2tad.swift:12:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.Replace(numbers, \"1\", \"\","
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(\" \").map(String::init)\n    numbers_array.sort()\n    return\
    \ numbers_array.joined(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpztolar0g.swift:6:55: error: expected expression in list of expressions\n\
    \    var numbers_array = numbers.split(\" \").map(String::init)\n            \
    \                                          ^\n/tmp/tmpztolar0g.swift:6:56: error:\
    \ consecutive statements on a line must be separated by ';'\n    var numbers_array\
    \ = numbers.split(\" \").map(String::init)\n                                 \
    \                      ^\n                                                   \
    \    ;\n/tmp/tmpztolar0g.swift:6:60: error: initializers may only be declared\
    \ within a type\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                                           ^\n/tmp/tmpztolar0g.swift:6:60:\
    \ error: expected '(' for initializer parameters\n    var numbers_array = numbers.split(\"\
    \ \").map(String::init)\n                                                    \
    \       ^\n/tmp/tmpztolar0g.swift:6:33: error: no exact matches in call to instance\
    \ method 'split'\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                ^\n/tmp/tmpztolar0g.swift:6:33: note: found candidate\
    \ with type '(String.Element, Int, Bool) -> [ArraySlice<String.Element>]' (aka\
    \ '(Character, Int, Bool) -> Array<ArraySlice<Character>>')\n    var numbers_array\
    \ = numbers.split(\" \").map(String::init)\n                                ^\n\
    /tmp/tmpztolar0g.swift:6:33: note: found candidate with type '(String.Element,\
    \ Int, Bool) -> [String.SubSequence]' (aka '(Character, Int, Bool) -> Array<Substring>')\n\
    \    var numbers_array = numbers.split(\" \").map(String::init)\n            \
    \                    ^\n/tmp/tmpztolar0g.swift:6:55: error: missing argument for\
    \ parameter #1 in call\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                                      ^\n                   \
    \                                   <#(ArraySlice<String.Element>) throws -> _#>\n\
    Swift.Collection:2:28: note: 'map' declared here\n    @inlinable public func map<T>(_\
    \ transform: (Self.Element) throws -> T) rethrows -> [T]\n                    "
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers\
    \ = numbers.split(separator: \" \")\n    numbers.sort { $0.compare($1) == .orderedAscending\
    \ }\n    return numbers.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpu4ub4izx.swift:7:23: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    numbers.sort { $0.compare($1)\
    \ == .orderedAscending }\n                   ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(\" \").map(String::init)\n    numbers_array.sort()\n    return\
    \ numbers_array.joined(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpztolar0g.swift:6:55: error: expected expression in list of expressions\n\
    \    var numbers_array = numbers.split(\" \").map(String::init)\n            \
    \                                          ^\n/tmp/tmpztolar0g.swift:6:56: error:\
    \ consecutive statements on a line must be separated by ';'\n    var numbers_array\
    \ = numbers.split(\" \").map(String::init)\n                                 \
    \                      ^\n                                                   \
    \    ;\n/tmp/tmpztolar0g.swift:6:60: error: initializers may only be declared\
    \ within a type\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                                           ^\n/tmp/tmpztolar0g.swift:6:60:\
    \ error: expected '(' for initializer parameters\n    var numbers_array = numbers.split(\"\
    \ \").map(String::init)\n                                                    \
    \       ^\n/tmp/tmpztolar0g.swift:6:33: error: no exact matches in call to instance\
    \ method 'split'\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                ^\n/tmp/tmpztolar0g.swift:6:33: note: found candidate\
    \ with type '(String.Element, Int, Bool) -> [ArraySlice<String.Element>]' (aka\
    \ '(Character, Int, Bool) -> Array<ArraySlice<Character>>')\n    var numbers_array\
    \ = numbers.split(\" \").map(String::init)\n                                ^\n\
    /tmp/tmpztolar0g.swift:6:33: note: found candidate with type '(String.Element,\
    \ Int, Bool) -> [String.SubSequence]' (aka '(Character, Int, Bool) -> Array<Substring>')\n\
    \    var numbers_array = numbers.split(\" \").map(String::init)\n            \
    \                    ^\n/tmp/tmpztolar0g.swift:6:55: error: missing argument for\
    \ parameter #1 in call\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                                      ^\n                   \
    \                                   <#(ArraySlice<String.Element>) throws -> _#>\n\
    Swift.Collection:2:28: note: 'map' declared here\n    @inlinable public func map<T>(_\
    \ transform: (Self.Element) throws -> T) rethrows -> [T]\n                    "
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(\" \").map{Int($0)!}\n    numbers_array.sort()\n    return String(numbers_array)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpgszgw6gv.swift:6:39: error: missing argument label 'separator:'\
    \ in call\n    var numbers_array = numbers.split(\" \").map{Int($0)!}\n      \
    \                                ^\n                                      separator:\
    \ \n"
  stdout: ''
  timestamp: 1660013666
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    var sorted_numbers = \"\"\n    for number\
    \ in numbers_array {\n        if number == \"zero\" {\n            sorted_numbers\
    \ += \"0\"\n        } else if number == \"one\" {\n            sorted_numbers\
    \ += \"1\"\n        } else if number == \"two\" {\n            sorted_numbers\
    \ += \"2\"\n        } else if number == \"three\" {\n            sorted_numbers\
    \ += \"3\"\n        } else if number == \"four\" {\n            sorted_numbers\
    \ += \"4\"\n        } else if number == \"five\" {\n            sorted_numbers\
    \ += \"5\"\n        } else if number == \"six\" {\n            sorted_numbers\
    \ += \"6\"\n        } else if number == \"seven\" {\n            sorted_numbers\
    \ += \"7\"\n        } else if number == \"eight\" {\n            sorted_numbers\
    \ += \"8\"\n        } else if number == \"nine\" {\n            sorted_numbers\
    \ += \"9\"\n        } else {\n            sorted_numbers += number\n        }\n\
    \    }\n    return sorted_numbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpxa_fzpei/tmpxa_fzpei.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b864d315c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b864d00cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b864d00c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b864d00b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxa_fzpei                        0x00005575b981c9f5 <unavailable> + 6645

    5    libc.so.6                          0x00002b864d501460 __libc_start_main +
    245

    6    tmpxa_fzpei                        0x00005575b981c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters.split{$0 == \" \"}.map(String.init)\n    numbers_array.sort{$0\
    \ < $1}\n    return numbers_array.joinWithSeparator(\" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp3wwr50pd.swift:6:33: error: 'characters' is unavailable: Please\
    \ use String directly\n    var numbers_array = numbers.characters.split{$0 ==\
    \ \" \"}.map(String.init)\n                                ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp3wwr50pd.swift:8:26: error: value of\
    \ type '[String]' has no member 'joinWithSeparator'\n    return numbers_array.joinWithSeparator(\"\
    \ \")\n           ~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimRightFunc(numbers, unicode.IsDigit)\n    numbers =\
    \ strings.TrimRightFunc(numbers, unicode.IsSpace)\n    numbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsUpper)\n    numbers = strings.TrimRightFunc(numbers, unicode.IsLower)\n\
    \    numbers = strings.TrimRightFunc(numbers, unicode.IsPunct)\n    numbers =\
    \ strings.TrimRightFunc(numbers, unicode.IsSymbol)\n    numbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsSeparator)\n    numbers = strings.TrimRightFunc(numbers, unicode.IsControl)\n\
    \    numbers = strings.TrimRightFunc(numbers, unicode.IsLineTerminator)\n    numbers\
    \ = strings.TrimRightFunc(numbers, unicode.IsSurrogate)\n    numbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsPunctChar)\n    numbers = strings.TrimRightFunc(numbers, unicode.IsDigit)\n\
    \    numbers = strings.TrimRightFunc(numbers, unicode.IsSpace)\n    numbers =\
    \ strings.TrimRightFunc(numbers, unicode.IsUpper)\n    numbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsLower)\n    numbers = strings.TrimRightFunc(numbers, unicode.IsPunct)\n\
    \    numbers = strings.TrimRightFunc(numbers, unicode.IsSymbol)\n    numbers =\
    \ strings.TrimRightFunc(numbers, unicode.IsSeparator)\n    numbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsControl)\n    numbers = strings.TrimRightFunc(numbers, unicode.IsLineTerminator)\n\
    \    numbers = strings.TrimRightFunc(numbers, unicode.IsSurrogate)\n    numbers\
    \ = strings.TrimRightFunc(numbers, unicode.IsPunctChar)\n    numbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsDigit)\n    numbers = strings.TrimRightFunc(numbers, unicode.IsSpace)\n\
    \    numbers = strings.TrimRightFunc(numbers, unicode.IsUpper)\n    numbers =\
    \ strings.TrimRightFunc(numbers, unicode.IsLower)\n    numbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsPunct)\n    numbers = strings.TrimRightFunc(numbers, unicode.IsSymbol)\n\
    \    numbers = strings.TrimRightFunc(numbers, unicode.IsSeparator)\n    numbers\
    \ = strings.TrimRightFunc(numbers, unicode.IsControl)\n    numbers = strings.\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_4b8pxxy.swift:37:22: error: expected member name following '.'\n\
    \    numbers = strings.\n                     ^\n/tmp/tmp_4b8pxxy.swift:6:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmp_4b8pxxy.swift:6:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmp_4b8pxxy.swift:7:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.TrimRightFunc(numbers, unicode.IsDigit)\n             \
    \ ^~~~~~~\n/tmp/tmp_4b8pxxy.swift:7:46: error: cannot find 'unicode' in scope\n\
    \    numbers = strings.TrimRightFunc(numbers, unicode.IsDigit)\n             \
    \                                ^~~~~~~\n/tmp/tmp_4b8pxxy.swift:7:5: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsDigit)\n    ^~~~~~~\n/tmp/tmp_4b8pxxy.swift:8:15: error: cannot find\
    \ 'strings' in scope\n    numbers = strings.TrimRightFunc(numbers, unicode.IsSpace)\n\
    \              ^~~~~~~\n/tmp/tmp_4b8pxxy.swift:8:46: error: cannot find 'unicode'\
    \ in scope\n    numbers = strings.TrimRightFunc(numbers, unicode.IsSpace)\n  \
    \                                           ^~~~~~~\n/tmp/tmp_4b8pxxy.swift:8:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimRightFunc(numbers, unicode.IsSpace)\n    ^~~~~~~\n/tmp/tmp_4b8pxxy.swift:9:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsUpper)\n              ^~~~~~~\n/tmp/tmp_4b8pxxy.swift:9:46: error:\
    \ cannot find 'unicode' in scope\n    numbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsUpper)\n                                             ^~~~~~~\n/tmp/tmp_4b8pxxy.swift:9:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimRightFunc(numbers, unicode.IsUpper)\n    ^~~~~~~\n/tmp/tmp_4b8pxxy.swift:10:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsLower)\n              ^~~~~~~\n/tmp/tmp_4b8pxxy.s"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n    return numbers_array.joined(separator: \" \")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_a7639ny.swift:7:32: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n                            ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n    return numbers_array.joined(separator: \" \")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_a7639ny.swift:7:32: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n                            ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters()\n    numbers_array.sort()\n    return String(numbers_array)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpem3dq2n6.swift:6:33: error: cannot call value of non-function type\
    \ 'String'\n    var numbers_array = numbers.characters()\n                   \
    \             ^         ~~\n                                          \n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n    return numbers_array.joined(separator: \" \")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_a7639ny.swift:7:32: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n                            ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(\" \").map(String.init)\n    numbers_array.sort()\n    return\
    \ numbers_array.joined(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpkwq0sm9d.swift:6:33: error: no exact matches in call to instance\
    \ method 'split'\n    var numbers_array = numbers.split(\" \").map(String.init)\n\
    \                                ^\nSwift.Sequence:2:40: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public\
    \ __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences:\
    \ Bool = true) -> [ArraySlice<Self.Element>]\n                               \
    \        ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [Self.SubSequence]\n                                       ^\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimRightFunc(numbers, unicode.IsDigit)\n    numbers =\
    \ strings.TrimFunc(numbers, unicode.IsSpace)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsLetter)\n    numbers = strings.TrimFunc(numbers, unicode.IsPunctuation)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.IsLower)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsUpper)\n    numbers = strings.TrimFunc(numbers, unicode.IsControl)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.IsLineSeparator)\n    numbers\
    \ = strings.TrimFunc(numbers, unicode.IsSurrogate)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsSymbol)\n    numbers = strings.TrimFunc(numbers, unicode.IsSeparator)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.IsOtherSpace)\n    numbers =\
    \ strings.TrimFunc(numbers, unicode.IsOtherPunctuation)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsOtherLetter)\n    numbers = strings.TrimFunc(numbers, unicode.IsOtherNumber)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.IsOtherControl)\n    numbers\
    \ = strings.TrimFunc(numbers, unicode.IsOtherLineSeparator)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsOtherSymbol)\n    numbers = strings.TrimFunc(numbers, unicode.IsOtherSeparator)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.IsLetterNumber)\n    numbers\
    \ = strings.TrimFunc(numbers, unicode.IsDigit)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n    numbers = strings.TrimFunc(numbers, unicode.IsPunctuation)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.IsLower)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsUpper)\n    numbers = strings.TrimFunc(numbers, unicode.IsControl)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.IsLineSeparator)\n    numbers\
    \ = strings.TrimFunc(numbers, unicode.IsSurrogate)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsSymbol)\n    numbers = strings.TrimFunc(numbers, unicode.IsSeparator)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.IsOtherSpace)\n    numbers =\
    \ strings.TrimFunc(numbers, unicode.IsOtherPunctuation)\n    number\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpe2bk6ywr.swift:6:15: error: cannot find 'strings' in scope\n  \
    \  numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmpe2bk6ywr.swift:6:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmpe2bk6ywr.swift:7:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsDigit)\n              ^~~~~~~\n/tmp/tmpe2bk6ywr.swift:7:46: error:\
    \ cannot find 'unicode' in scope\n    numbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsDigit)\n                                             ^~~~~~~\n/tmp/tmpe2bk6ywr.swift:7:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimRightFunc(numbers, unicode.IsDigit)\n    ^~~~~~~\n/tmp/tmpe2bk6ywr.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n              ^~~~~~~\n/tmp/tmpe2bk6ywr.swift:8:41: error:\
    \ cannot find 'unicode' in scope\n    numbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\
    \                                        ^~~~~~~\n/tmp/tmpe2bk6ywr.swift:8:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimFunc(numbers, unicode.IsSpace)\n    ^~~~~~~\n/tmp/tmpe2bk6ywr.swift:9:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsLetter)\n              ^~~~~~~\n/tmp/tmpe2bk6ywr.swift:9:41: error:\
    \ cannot find 'unicode' in scope\n    numbers = strings.TrimFunc(numbers, unicode.IsLetter)\n\
    \                                        ^~~~~~~\n/tmp/tmpe2bk6ywr.swift:9:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimFunc(numbers, unicode.IsLetter)\n    ^~~~~~~\n/tmp/tmpe2bk6ywr.swift:10:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsPunctuation)\n              ^~~~~~~\n/tmp/tmpe2bk6ywr.swift:10:41:\
    \ error: cannot find 'unicode' in scope\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsPunctuation)\n                                        ^"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(\" \").map(String.init)\n    numbers_array.sort()\n    return\
    \ numbers_array.joined(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpkwq0sm9d.swift:6:33: error: no exact matches in call to instance\
    \ method 'split'\n    var numbers_array = numbers.split(\" \").map(String.init)\n\
    \                                ^\nSwift.Sequence:2:40: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public\
    \ __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences:\
    \ Bool = true) -> [ArraySlice<Self.Element>]\n                               \
    \        ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [Self.SubSequence]\n                                       ^\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \"0\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n    numbers = strings.TrimSuffix(numbers, \"2\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n    numbers = strings.TrimSuffix(numbers, \"4\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n    numbers = strings.TrimSuffix(numbers, \"6\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n    numbers = strings.TrimSuffix(numbers, \"8\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n    numbers = strings.TrimSuffix(numbers, \"0\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n    numbers = strings.TrimSuffix(numbers, \"2\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n    numbers = strings.TrimSuffix(numbers, \"4\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n    numbers = strings.TrimSuffix(numbers, \"6\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n    numbers = strings.TrimSuffix(numbers, \"8\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n    numbers = strings.TrimSuffix(numbers, \"0\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n    numbers = strings.TrimSuffix(numbers, \"2\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n    numbers = strings.TrimSuffix(numbers, \"4\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n    numbers = strings.TrimSuffix(numbers, \"6\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n    numbers = strings.TrimSuffix(numbers, \"8\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n    numbers = strings.TrimSuffix(numbers, \"0\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n    numbers = strings.TrimSuffix(numbers, \"2\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n    numbers = strings.TrimSuffix(numbers, \"4\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n    numbers = strings.TrimSuffix(numbers, \"6\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n    numbers = strings.TrimSuffix(numbers, \"8\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n    numbers = strings.Tri\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmpi5d0jrtx.swift:6:15: error: cannot find 'strings' in scope\n  \
    \  numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmpi5d0jrtx.swift:6:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmpi5d0jrtx.swift:7:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers, \"\
    0\")\n              ^~~~~~~\n/tmp/tmpi5d0jrtx.swift:7:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n    ^~~~~~~\n/tmp/tmpi5d0jrtx.swift:8:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"1\")\n              ^~~~~~~\n\
    /tmp/tmpi5d0jrtx.swift:8:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"1\")\n    ^~~~~~~\n/tmp/tmpi5d0jrtx.swift:9:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"2\")\n              ^~~~~~~\n/tmp/tmpi5d0jrtx.swift:9:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"2\")\n    ^~~~~~~\n/tmp/tmpi5d0jrtx.swift:10:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"3\")\n              ^~~~~~~\n\
    /tmp/tmpi5d0jrtx.swift:10:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"3\")\n    ^~~~~~~\n/tmp/tmpi5d0jrtx.swift:11:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"4\")\n              ^~~~~~~\n/tmp/tmpi5d0jrtx.swift:11:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"4\")\n    ^~~~~~~\n/tmp/tmpi5d0jrtx.swift:12:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"5\")\n              ^~~~~~~\n\
    /tmp/tmpi5d0jrtx.swift:12:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"5\")\n    ^~~~~~~\n/tmp/tmpi5d0jrtx.swift:13:15:\
    \ error: cannot find 'strings' in scop"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n    return numbers_array.joined(separator: \" \")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_a7639ny.swift:7:32: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n                            ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters()\n    numbers_array.sortInPlace({ $0 < $1 })\n    return\
    \ String(numbers_array)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp8nzz_5jf.swift:6:33: error: cannot call value of non-function type\
    \ 'String'\n    var numbers_array = numbers.characters()\n                   \
    \             ^         ~~\n                                          \n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters()\n    numbers_array.sortInPlace(&sort_numbers_cmp)\n \
    \   return String(numbers_array)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp38k0x0do.swift:6:33: error: cannot call value of non-function type\
    \ 'String'\n    var numbers_array = numbers.characters()\n                   \
    \             ^         ~~\n                                          \n/tmp/tmp38k0x0do.swift:7:32:\
    \ error: cannot find 'sort_numbers_cmp' in scope\n    numbers_array.sortInPlace(&sort_numbers_cmp)\n\
    \                               ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(\" \").map(String::init)\n    numbers_array.sort()\n    return\
    \ numbers_array.joined(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpztolar0g.swift:6:55: error: expected expression in list of expressions\n\
    \    var numbers_array = numbers.split(\" \").map(String::init)\n            \
    \                                          ^\n/tmp/tmpztolar0g.swift:6:56: error:\
    \ consecutive statements on a line must be separated by ';'\n    var numbers_array\
    \ = numbers.split(\" \").map(String::init)\n                                 \
    \                      ^\n                                                   \
    \    ;\n/tmp/tmpztolar0g.swift:6:60: error: initializers may only be declared\
    \ within a type\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                                           ^\n/tmp/tmpztolar0g.swift:6:60:\
    \ error: expected '(' for initializer parameters\n    var numbers_array = numbers.split(\"\
    \ \").map(String::init)\n                                                    \
    \       ^\n/tmp/tmpztolar0g.swift:6:33: error: no exact matches in call to instance\
    \ method 'split'\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                ^\n/tmp/tmpztolar0g.swift:6:33: note: found candidate\
    \ with type '(String.Element, Int, Bool) -> [ArraySlice<String.Element>]' (aka\
    \ '(Character, Int, Bool) -> Array<ArraySlice<Character>>')\n    var numbers_array\
    \ = numbers.split(\" \").map(String::init)\n                                ^\n\
    /tmp/tmpztolar0g.swift:6:33: note: found candidate with type '(String.Element,\
    \ Int, Bool) -> [String.SubSequence]' (aka '(Character, Int, Bool) -> Array<Substring>')\n\
    \    var numbers_array = numbers.split(\" \").map(String::init)\n            \
    \                    ^\n/tmp/tmpztolar0g.swift:6:55: error: missing argument for\
    \ parameter #1 in call\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                                      ^\n                   \
    \                                   <#(ArraySlice<String.Element>) throws -> _#>\n\
    Swift.Collection:2:28: note: 'map' declared here\n    @inlinable public func map<T>(_\
    \ transform: (Self.Element) throws -> T) rethrows -> [T]\n                    "
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n    return numbers_array.joined(separator: \" \")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_a7639ny.swift:7:32: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n                            ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters()\n    numbers_array.sort()\n    return String(numbers_array)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpem3dq2n6.swift:6:33: error: cannot call value of non-function type\
    \ 'String'\n    var numbers_array = numbers.characters()\n                   \
    \             ^         ~~\n                                          \n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n    return numbers_array.joined(separator: \" \")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_a7639ny.swift:7:32: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n                            ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters\n    numbers_array.sortInPlace({ $0.compare($1) == NSComparisonResult.OrderedAscending\
    \ })\n    return String(numbers_array)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmpw3ot__jm.swift:6:33: error: 'characters' is unavailable: Please\
    \ use String directly\n    var numbers_array = numbers.characters\n          \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpw3ot__jm.swift:7:51: error: cannot find 'NSComparisonResult' in scope\n\
    \    numbers_array.sortInPlace({ $0.compare($1) == NSComparisonResult.OrderedAscending\
    \ })\n                                                  ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort(by: { (number1, number2)\
    \ -> Bool in\n        let number1_int = Int(number1)\n        let number2_int\
    \ = Int(number2)\n        return number1_int < number2_int\n    })\n    return\
    \ numbers_array.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmptjqb7pyp.swift:10:16: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        return number1_int < number2_int\n\
    \               ^\n/tmp/tmptjqb7pyp.swift:10:16: note: coalesce using '??' to\
    \ provide a default when the optional value contains 'nil'\n        return number1_int\
    \ < number2_int\n               ^\n                           ?? <#default value#>\n\
    /tmp/tmptjqb7pyp.swift:10:16: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n        return number1_int < number2_int\n\
    \               ^\n                          !\n/tmp/tmptjqb7pyp.swift:10:30:\
    \ error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n\
    \        return number1_int < number2_int\n                             ^\n/tmp/tmptjqb7pyp.swift:10:30:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        return number1_int < number2_int\n                          \
    \   ^\n                                         ?? <#default value#>\n/tmp/tmptjqb7pyp.swift:10:30:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        return number1_int < number2_int\n                          \
    \   ^\n                                        !\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n    return numbers_array.joined(separator: \" \")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_a7639ny.swift:7:32: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n                            ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \"0\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n    numbers = strings.TrimSuffix(numbers, \"2\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n    numbers = strings.TrimSuffix(numbers, \"4\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n    numbers = strings.TrimSuffix(numbers, \"6\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n    numbers = strings.TrimSuffix(numbers, \"8\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n    numbers = strings.TrimSuffix(numbers, \"10\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"11\")\n    numbers = strings.TrimSuffix(numbers, \"12\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"13\")\n    numbers = strings.TrimSuffix(numbers, \"14\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"15\")\n    numbers = strings.TrimSuffix(numbers, \"16\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"17\")\n    numbers = strings.TrimSuffix(numbers, \"18\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"19\")\n    numbers = strings.TrimSuffix(numbers, \"20\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"21\")\n    numbers = strings.TrimSuffix(numbers, \"22\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"23\")\n    numbers = strings.TrimSuffix(numbers, \"24\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"25\")\n    numbers = strings.TrimSuffix(numbers, \"26\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"27\")\n    numbers = strings.TrimSuffix(numbers, \"28\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"29\")\n    numbers = strings.TrimSuffix(numbers, \"30\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"31\")\n    numbers = strings.TrimSuffix(numbers, \"32\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"33\")\n    numbers = strings.TrimSuffix(numbers, \"34\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"35\")\n    numbers = strings.TrimSuffix(numbers, \"36\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"37\")\n    numbers = strings.TrimSuffix(numbers, \"38\")\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp4afyu6a2.swift:6:15: error: cannot find 'strings' in scope\n  \
    \  numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmp4afyu6a2.swift:6:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmp4afyu6a2.swift:7:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers, \"\
    0\")\n              ^~~~~~~\n/tmp/tmp4afyu6a2.swift:7:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n    ^~~~~~~\n/tmp/tmp4afyu6a2.swift:8:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"1\")\n              ^~~~~~~\n\
    /tmp/tmp4afyu6a2.swift:8:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"1\")\n    ^~~~~~~\n/tmp/tmp4afyu6a2.swift:9:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"2\")\n              ^~~~~~~\n/tmp/tmp4afyu6a2.swift:9:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"2\")\n    ^~~~~~~\n/tmp/tmp4afyu6a2.swift:10:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"3\")\n              ^~~~~~~\n\
    /tmp/tmp4afyu6a2.swift:10:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"3\")\n    ^~~~~~~\n/tmp/tmp4afyu6a2.swift:11:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"4\")\n              ^~~~~~~\n/tmp/tmp4afyu6a2.swift:11:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"4\")\n    ^~~~~~~\n/tmp/tmp4afyu6a2.swift:12:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"5\")\n              ^~~~~~~\n\
    /tmp/tmp4afyu6a2.swift:12:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"5\")\n    ^~~~~~~\n/tmp/tmp4afyu6a2.swift:13:15:\
    \ error: cannot find 'strings' in scop"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters\n    numbers_array.sort()\n    return String(numbers_array)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpbidws3wj.swift:6:33: error: 'characters' is unavailable: Please\
    \ use String directly\n    var numbers_array = numbers.characters\n          \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpbidws3wj.swift:7:19: error: value of type 'String' has no member\
    \ 'sort'\n    numbers_array.sort()\n    ~~~~~~~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n    return numbers_array.joined(separator: \" \")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_a7639ny.swift:7:32: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n                            ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters.split{$0 == \" \"}.map(String.init)\n    numbers_array.sort{$0\
    \ < $1}\n    return numbers_array.joinWithSeparator(\" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp3wwr50pd.swift:6:33: error: 'characters' is unavailable: Please\
    \ use String directly\n    var numbers_array = numbers.characters.split{$0 ==\
    \ \" \"}.map(String.init)\n                                ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp3wwr50pd.swift:8:26: error: value of\
    \ type '[String]' has no member 'joinWithSeparator'\n    return numbers_array.joinWithSeparator(\"\
    \ \")\n           ~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters.split{$0 == \" \"}.map(String.init)\n    numbers_array.sort{$0\
    \ < $1}\n    return String(numbers_array)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp56uus8q2.swift:6:33: error: 'characters' is unavailable: Please\
    \ use String directly\n    var numbers_array = numbers.characters.split{$0 ==\
    \ \" \"}.map(String.init)\n                                ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp56uus8q2.swift:8:12: error: no exact\
    \ matches in call to initializer \n    return String(numbers_array)\n        \
    \   ^\nSwift.String:4:12: note: candidate requires that the types 'String' and\
    \ 'Character' be equivalent (requirement specified as 'S.Element' == 'Character')\n\
    \    public init<S>(_ characters: S) where S : Sequence, S.Element == Character\n\
    \           ^\nSwift.RangeReplaceableCollection:3:23: note: candidate requires\
    \ that the types 'String.Element' (aka 'Character') and 'String' be equivalent\
    \ (requirement specified as 'Self.Element' == 'S.Element')\n    @inlinable public\
    \ init<S>(_ elements: S) where S : Sequence, Self.Element == S.Element\n     \
    \                 ^\nSwift.String:2:12: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(describing:)')\n    public init<Subject>(describing instance:\
    \ Subject)\n           ^\nSwift.String:3:23: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(describing:)')\n    @inlinable public init<Subject>(describing\
    \ instance: Subject) where Subject : CustomStringConvertible\n               \
    \       ^\nSwift.String:6:12: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(reflecting:)')\n    public init<Subject>(reflecting subject: Subject)\n\
    \           ^\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n    return numbers_array.joined(separator: \" \")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_a7639ny.swift:7:32: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n                            ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers\
    \ = numbers.characters\n    numbers.removeFirst()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmp1x4vo61g.swift:91:12: error: expected member name following '.'\n\
    \    numbers.\n           ^\n/tmp/tmp1x4vo61g.swift:6:27: error: 'characters'\
    \ is unavailable: Please use String directly\n    var numbers = numbers.characters\n\
    \                          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters()\n    numbers_array.sortInPlace({ $0.compare($1) == NSComparisonResult.OrderedAscending\
    \ })\n    return String(numbers_array)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmp387erex1.swift:6:33: error: cannot call value of non-function type\
    \ 'String'\n    var numbers_array = numbers.characters()\n                   \
    \             ^         ~~\n                                          \n/tmp/tmp387erex1.swift:7:51:\
    \ error: cannot find 'NSComparisonResult' in scope\n    numbers_array.sortInPlace({\
    \ $0.compare($1) == NSComparisonResult.OrderedAscending })\n                 \
    \                                 ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(\" \").map(String.init)\n    numbers_array.sort()\n    return\
    \ numbers_array.joined(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpkwq0sm9d.swift:6:33: error: no exact matches in call to instance\
    \ method 'split'\n    var numbers_array = numbers.split(\" \").map(String.init)\n\
    \                                ^\nSwift.Sequence:2:40: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public\
    \ __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences:\
    \ Bool = true) -> [ArraySlice<Self.Element>]\n                               \
    \        ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [Self.SubSequence]\n                                       ^\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters()\n    var numbers_array_sorted = [String]()\n    var numbers_array_sorted\
    \ = [String]()\n    var numbers_array_sorted = [String]()\n    var numbers_array_sorted\
    \ = [String]()\n    var numbers_array_sorted = [String]()\n    var numbers_array_sorted\
    \ = [String]()\n    var numbers_array_sorted = [String]()\n    var numbers_array_sorted\
    \ = [String]()\n    var numbers_array_sorted = [String]()\n    var numbers_array_sorted\
    \ = [String]()\n    var numbers_array_sorted = [String]()\n    var numbers_array_sorted\
    \ = [String]()\n    var numbers_array_sorted = [String]()\n    var numbers_array_sorted\
    \ = [String]()\n    var numbers_array_sorted = [String]()\n    var numbers_array_sorted\
    \ = [String]()\n    var numbers_array_sorted = [String]()\n    var numbers_array_sorted\
    \ = [String]()\n    var numbers_array_sorted = [String]()\n    var numbers_array_sorted\
    \ = [String]()\n    var numbers_array_sorted = [String]()\n    var numbers_array_sorted\
    \ = [String]()\n    var numbers_array_sorted = [String]()\n    var numbers_array_sorted\
    \ = [String]()\n    var numbers_array_sorted = [String]()\n    var numbers_array_sorted\
    \ = [String]()\n    var numbers_array_sorted = [String]()\n    var numbers_array_sorted\
    \ = [String]()\n    var numbers_array_sorted = [String]()\n    var numbers_array_sorted\
    \ = [String]()\n    var numbers_array_sorted = [String]()\n    var numbers_array_sorted\
    \ = [String]()\n    var numbers_array_sorted = [String]()\n    var numbers_array_sorted\
    \ = [String]()\n    var numbers_array_sorted = [String]()\n    var numbers_array_sorted\
    \ = [String]()\n    var numbers_array_sorted = [String]()\n    var numbers_array_sorted\
    \ = [String]()\n    var numbers_array_sorted = [String]()\n    var numbers_array_sorted\
    \ = [String]()\n    var numbers_array_sorted = [String]()\n    var numbers_array_sorted\
    \ = [String]()\n    var numbers_array_sorted = [String]()\n    var numbers_array_sorted\
    \ = [String]()\n    var numbers_array_sorted = [String]()\n    var numbers_array_sorted\
    \ = [String]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpirdqm7uy.swift:6:33: error: cannot call value of non-function type\
    \ 'String'\n    var numbers_array = numbers.characters()\n                   \
    \             ^         ~~\n                                          \n/tmp/tmpirdqm7uy.swift:8:9:\
    \ error: invalid redeclaration of 'numbers_array_sorted'\n    var numbers_array_sorted\
    \ = [String]()\n        ^\n/tmp/tmpirdqm7uy.swift:7:9: note: 'numbers_array_sorted'\
    \ previously declared here\n    var numbers_array_sorted = [String]()\n      \
    \  ^\n/tmp/tmpirdqm7uy.swift:9:9: error: invalid redeclaration of 'numbers_array_sorted'\n\
    \    var numbers_array_sorted = [String]()\n        ^\n/tmp/tmpirdqm7uy.swift:7:9:\
    \ note: 'numbers_array_sorted' previously declared here\n    var numbers_array_sorted\
    \ = [String]()\n        ^\n/tmp/tmpirdqm7uy.swift:10:9: error: invalid redeclaration\
    \ of 'numbers_array_sorted'\n    var numbers_array_sorted = [String]()\n     \
    \   ^\n/tmp/tmpirdqm7uy.swift:7:9: note: 'numbers_array_sorted' previously declared\
    \ here\n    var numbers_array_sorted = [String]()\n        ^\n/tmp/tmpirdqm7uy.swift:11:9:\
    \ error: invalid redeclaration of 'numbers_array_sorted'\n    var numbers_array_sorted\
    \ = [String]()\n        ^\n/tmp/tmpirdqm7uy.swift:7:9: note: 'numbers_array_sorted'\
    \ previously declared here\n    var numbers_array_sorted = [String]()\n      \
    \  ^\n/tmp/tmpirdqm7uy.swift:12:9: error: invalid redeclaration of 'numbers_array_sorted'\n\
    \    var numbers_array_sorted = [String]()\n        ^\n/tmp/tmpirdqm7uy.swift:7:9:\
    \ note: 'numbers_array_sorted' previously declared here\n    var numbers_array_sorted\
    \ = [String]()\n        ^\n/tmp/tmpirdqm7uy.swift:13:9: error: invalid redeclaration\
    \ of 'numbers_array_sorted'\n    var numbers_array_sorted = [String]()\n     \
    \   ^\n/tmp/tmpirdqm7uy.swift:7:9: note: 'numbers_array_sorted' previously declared\
    \ here\n    var numbers_array_sorted = [String]()\n        ^\n/tmp/tmpirdqm7uy.swift:14:9:\
    \ error: invalid redeclaration of 'numbers_array_sorted'\n    var numbers_array_sorted\
    \ = [String]()\n        ^\n/tmp/tmpirdqm7uy.swift:7:9: note: 'numbers_array_sorted'\
    \ previously declared "
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n    return numbers_array.joined(separator: \" \")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_a7639ny.swift:7:32: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n                            ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort(by: { (number: String)\
    \ -> Bool in\n        let number = Int(number)\n        return number < 10\n \
    \   })\n    return numbers_array.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp8cq428_l.swift:7:30: error: contextual closure type '(String.SubSequence,\
    \ String.SubSequence) throws -> Bool' (aka '(Substring, Substring) throws -> Bool')\
    \ expects 2 arguments, but 1 was used in closure body\n    numbers_array.sort(by:\
    \ { (number: String) -> Bool in\n                             ^\n/tmp/tmp8cq428_l.swift:7:28:\
    \ error: cannot convert value of type '(String) -> Bool' to expected argument\
    \ type '(String.SubSequence, String.SubSequence) throws -> Bool' (aka '(Substring,\
    \ Substring) throws -> Bool')\n    numbers_array.sort(by: { (number: String) ->\
    \ Bool in\n                           ^\n/tmp/tmp8cq428_l.swift:9:16: error: value\
    \ of optional type 'Int?' must be unwrapped to a value of type 'Int'\n       \
    \ return number < 10\n               ^\n/tmp/tmp8cq428_l.swift:9:16: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     return number < 10\n               ^\n                      ?? <#default\
    \ value#>\n/tmp/tmp8cq428_l.swift:9:16: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n        return number < 10\n\
    \               ^\n                     !\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n    return numbers_array.joined(separator: \" \")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_a7639ny.swift:7:32: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n                            ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(\" \").map(String::init)\n    numbers_array.sort()\n    return\
    \ numbers_array.joined(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpztolar0g.swift:6:55: error: expected expression in list of expressions\n\
    \    var numbers_array = numbers.split(\" \").map(String::init)\n            \
    \                                          ^\n/tmp/tmpztolar0g.swift:6:56: error:\
    \ consecutive statements on a line must be separated by ';'\n    var numbers_array\
    \ = numbers.split(\" \").map(String::init)\n                                 \
    \                      ^\n                                                   \
    \    ;\n/tmp/tmpztolar0g.swift:6:60: error: initializers may only be declared\
    \ within a type\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                                           ^\n/tmp/tmpztolar0g.swift:6:60:\
    \ error: expected '(' for initializer parameters\n    var numbers_array = numbers.split(\"\
    \ \").map(String::init)\n                                                    \
    \       ^\n/tmp/tmpztolar0g.swift:6:33: error: no exact matches in call to instance\
    \ method 'split'\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                ^\n/tmp/tmpztolar0g.swift:6:33: note: found candidate\
    \ with type '(String.Element, Int, Bool) -> [ArraySlice<String.Element>]' (aka\
    \ '(Character, Int, Bool) -> Array<ArraySlice<Character>>')\n    var numbers_array\
    \ = numbers.split(\" \").map(String::init)\n                                ^\n\
    /tmp/tmpztolar0g.swift:6:33: note: found candidate with type '(String.Element,\
    \ Int, Bool) -> [String.SubSequence]' (aka '(Character, Int, Bool) -> Array<Substring>')\n\
    \    var numbers_array = numbers.split(\" \").map(String::init)\n            \
    \                    ^\n/tmp/tmpztolar0g.swift:6:55: error: missing argument for\
    \ parameter #1 in call\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                                      ^\n                   \
    \                                   <#(ArraySlice<String.Element>) throws -> _#>\n\
    Swift.Collection:2:28: note: 'map' declared here\n    @inlinable public func map<T>(_\
    \ transform: (Self.Element) throws -> T) rethrows -> [T]\n                    "
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters()\n    var sorted_numbers = \"\"\n    var sorted_numbers_array\
    \ = [String]()\n    var current_number = 0\n    var current_number_string = \"\
    \"\n    var current_number_string_index = 0\n    var current_number_string_index2\
    \ = 0\n    var current_number_string_index3 = 0\n    var current_number_string_index4\
    \ = 0\n    var current_number_string_index5 = 0\n    var current_number_string_index6\
    \ = 0\n    var current_number_string_index7 = 0\n    var current_number_string_index8\
    \ = 0\n    var current_number_string_index9 = 0\n    var current_number_string_index10\
    \ = 0\n    var current_number_string_index11 = 0\n    var current_number_string_index12\
    \ = 0\n    var current_number_string_index13 = 0\n    var current_number_string_index14\
    \ = 0\n    var current_number_string_index15 = 0\n    var current_number_string_index16\
    \ = 0\n    var current_number_string_index17 = 0\n    var current_number_string_index18\
    \ = 0\n    var current_number_string_index19 = 0\n    var current_number_string_index20\
    \ = 0\n    var current_number_string_index21 = 0\n    var current_number_string_index22\
    \ = 0\n    var current_number_string_index23 = 0\n    var current_number_string_index24\
    \ = 0\n    var current_number_string_index25 = 0\n    var current_number_string_index26\
    \ = 0\n    var current_number_string_index27 = 0\n    var current_number_string_index28\
    \ = 0\n    var current_number_string_index29 = 0\n    var current_number_string_index30\
    \ = 0\n    var current_number_string_index31 = 0\n    var current_number_string_index32\
    \ = 0\n    var current_number_string_index33 = 0\n    var current_number_string_index34\
    \ = 0\n    var current_number_string_index35 = 0\n    var current_number_string_index36\
    \ = 0\n    var current_number_string_index37 = 0\n    var current_number_string_index38\
    \ = 0\n    var current_number_string_index39 = 0\n    var current_number_string_index40\
    \ = 0\n    var current_number_string_index41 = 0\n    var current_number_string_index42\
    \ = 0\n    var current_number_string_index43 = 0\n    var current_number_string_index44\
    \ = 0\n    var current_number_string_index45 = 0\n    var current_number_string_index46\
    \ = 0\n    var current_number_string_index47 = 0\n    var current_number_string_index48\
    \ = 0\n    var current_number_string_index49 = 0\n    var current_number_string_index50\
    \ = 0\n    var current_number_string_index51 = 0\n    var current_number_string_index52\
    \ = 0\n    var current_number_string_index53 = 0\n    var current_number_string_index54\
    \ = 0\n    var current_number_string_index55 = 0\n    var current_number_string_index56\
    \ = 0\n    var current_number_string_index57 = 0\n    var current_number_string_index58\
    \ = 0\n    var current_number_string_index59 = 0\n    var current_number_string_index60\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpsi3injmj.swift:6:33: error: cannot call value of non-function type\
    \ 'String'\n    var numbers_array = numbers.characters()\n                   \
    \             ^         ~~\n                                          \n/tmp/tmpsi3injmj.swift:70:9:\
    \ error: type annotation missing in pattern\n    var current_number_string_index60\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(\" \").map{ Int($0) }\n    numbers_array.sort()\n    return\
    \ numbers_array.map{ String($0) }.joined(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpu0l6eluf.swift:6:39: error: missing argument label 'separator:'\
    \ in call\n    var numbers_array = numbers.split(\" \").map{ Int($0) }\n     \
    \                                 ^\n                                      separator:\
    \ \n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters.split{$0 == \" \"}.map(String.init)\n    numbers_array.sort{$0\
    \ < $1}\n    return numbers_array.joinWithSeparator(\" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp3wwr50pd.swift:6:33: error: 'characters' is unavailable: Please\
    \ use String directly\n    var numbers_array = numbers.characters.split{$0 ==\
    \ \" \"}.map(String.init)\n                                ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp3wwr50pd.swift:8:26: error: value of\
    \ type '[String]' has no member 'joinWithSeparator'\n    return numbers_array.joinWithSeparator(\"\
    \ \")\n           ~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters.split{$0 == \" \"}.map(String.init)\n    numbers_array.sort{$0\
    \ < $1}\n    return numbers_array.joinWithSeparator(\" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp3wwr50pd.swift:6:33: error: 'characters' is unavailable: Please\
    \ use String directly\n    var numbers_array = numbers.characters.split{$0 ==\
    \ \" \"}.map(String.init)\n                                ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp3wwr50pd.swift:8:26: error: value of\
    \ type '[String]' has no member 'joinWithSeparator'\n    return numbers_array.joinWithSeparator(\"\
    \ \")\n           ~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort(by: { (number1, number2)\
    \ -> Bool in\n        if number1 < number2 {\n            return true\n      \
    \  } else if number1 > number2 {\n            return false\n        } else {\n\
    \            return true\n        }\n    })\n    return numbers_array.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpz4nscc3q/tmpz4nscc3q.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af750521c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af750218b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af750218988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af7502177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz4nscc3q                        0x00005606b877ea12 <unavailable> + 6674

    5    libc.so.6                          0x00002af75070d460 __libc_start_main +
    245

    6    tmpz4nscc3q                        0x00005606b877e449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters.split{$0 == \" \"}.map(String.init)\n    numbers_array.sort{$0.compare($1)\
    \ == .orderedAscending}\n    return numbers_array.joined()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpqtn4gjx0.swift:6:33: error: 'characters' is unavailable: Please\
    \ use String directly\n    var numbers_array = numbers.characters.split{$0 ==\
    \ \" \"}.map(String.init)\n                                ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpqtn4gjx0.swift:7:27: error: value of\
    \ type 'String' has no member 'compare'\n    numbers_array.sort{$0.compare($1)\
    \ == .orderedAscending}\n                       ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(\" \").map(String.init)\n    numbers_array.sort(by: <)\n   \
    \ return numbers_array.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_m2r5ex3.swift:6:33: error: no exact matches in call to instance\
    \ method 'split'\n    var numbers_array = numbers.split(\" \").map(String.init)\n\
    \                                ^\nSwift.Sequence:2:40: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public\
    \ __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences:\
    \ Bool = true) -> [ArraySlice<Self.Element>]\n                               \
    \        ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [Self.SubSequence]\n                                       ^\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(\" \").map { Int($0) }\n    numbers_array.sort()\n    return\
    \ numbers_array.map { String($0) }.joined(\" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpxdl75uwv.swift:6:39: error: missing argument label 'separator:'\
    \ in call\n    var numbers_array = numbers.split(\" \").map { Int($0) }\n    \
    \                                  ^\n                                      separator:\
    \ \n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(\" \").map{ Int($0) }\n    numbers_array.sort{ $0 < $1 }\n \
    \   return numbers_array.map{ String($0) }.joined()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpb_cvillc.swift:6:39: error: missing argument label 'separator:'\
    \ in call\n    var numbers_array = numbers.split(\" \").map{ Int($0) }\n     \
    \                                 ^\n                                      separator:\
    \ \n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters()\n    numbers_array.sort()\n    return String(numbers_array)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpem3dq2n6.swift:6:33: error: cannot call value of non-function type\
    \ 'String'\n    var numbers_array = numbers.characters()\n                   \
    \             ^         ~~\n                                          \n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    var numberList = strings.Split(numbers, \" \")\n    numberList = sort_numbers_helper(numberList)\n\
    \    return strings.Join(numberList, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpz46ga14h.swift:6:15: error: cannot find 'strings' in scope\n  \
    \  numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmpz46ga14h.swift:6:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmpz46ga14h.swift:7:22: error:\
    \ cannot find 'strings' in scope\n    var numberList = strings.Split(numbers,\
    \ \" \")\n                     ^~~~~~~\n/tmp/tmpz46ga14h.swift:8:18: error: cannot\
    \ find 'sort_numbers_helper' in scope\n    numberList = sort_numbers_helper(numberList)\n\
    \                 ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpz46ga14h.swift:9:12: error: cannot\
    \ find 'strings' in scope\n    return strings.Join(numberList, \" \")\n      \
    \     ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters.split{$0 == \" \"}.map(String.init)\n    numbers_array.sort{$0\
    \ < $1}\n    return numbers_array.joinWithSeparator(\" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp3wwr50pd.swift:6:33: error: 'characters' is unavailable: Please\
    \ use String directly\n    var numbers_array = numbers.characters.split{$0 ==\
    \ \" \"}.map(String.init)\n                                ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp3wwr50pd.swift:8:26: error: value of\
    \ type '[String]' has no member 'joinWithSeparator'\n    return numbers_array.joinWithSeparator(\"\
    \ \")\n           ~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(\" \").map(String.init)\n    numbers_array.sort()\n    return\
    \ numbers_array.joined(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpkwq0sm9d.swift:6:33: error: no exact matches in call to instance\
    \ method 'split'\n    var numbers_array = numbers.split(\" \").map(String.init)\n\
    \                                ^\nSwift.Sequence:2:40: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public\
    \ __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences:\
    \ Bool = true) -> [ArraySlice<Self.Element>]\n                               \
    \        ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [Self.SubSequence]\n                                       ^\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers\
    \ = numbers.split(\" \").sorted()\n    return numbers.join(\" \")\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpca38ng4x.swift:6:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters()\n    numbers_array.sortInPlace(&sort_numbers_cmp)\n \
    \   return String(numbers_array)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp38k0x0do.swift:6:33: error: cannot call value of non-function type\
    \ 'String'\n    var numbers_array = numbers.characters()\n                   \
    \             ^         ~~\n                                          \n/tmp/tmp38k0x0do.swift:7:32:\
    \ error: cannot find 'sort_numbers_cmp' in scope\n    numbers_array.sortInPlace(&sort_numbers_cmp)\n\
    \                               ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    var numbers_sorted = []\n    for number\
    \ in numbers_array {\n        numbers_sorted.append(Int(number))\n    }\n    numbers_sorted.sort()\n\
    \    return numbers_sorted.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpeeo_h_uv.swift:7:26: error: empty collection literal requires an\
    \ explicit type\n    var numbers_sorted = []\n                         ^~\n/tmp/tmpeeo_h_uv.swift:9:31:\
    \ warning: expression implicitly coerced from 'Int?' to 'Any'\n        numbers_sorted.append(Int(number))\n\
    \                              ^~~~~~~~~~~\n/tmp/tmpeeo_h_uv.swift:9:31: note:\
    \ provide a default value to avoid this warning\n        numbers_sorted.append(Int(number))\n\
    \                              ^~~~~~~~~~~\n                                 \
    \         ?? <#default value#>\n/tmp/tmpeeo_h_uv.swift:9:31: note: force-unwrap\
    \ the value to avoid this warning\n        numbers_sorted.append(Int(number))\n\
    \                              ^~~~~~~~~~~\n                                 \
    \        !\n/tmp/tmpeeo_h_uv.swift:9:31: note: explicitly cast to 'Any' with 'as\
    \ Any' to silence this warning\n        numbers_sorted.append(Int(number))\n \
    \                             ^~~~~~~~~~~\n                                  \
    \        as Any\n/tmp/tmpeeo_h_uv.swift:11:5: error: type 'Any' cannot conform\
    \ to 'Comparable'\n    numbers_sorted.sort()\n    ^\n/tmp/tmpeeo_h_uv.swift:11:5:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ protocols\n    numbers_sorted.sort()\n    ^\n/tmp/tmpeeo_h_uv.swift:11:5: note:\
    \ required by referencing instance method 'sort()' on 'MutableCollection' where\
    \ 'Self.Element' = 'Any'\n    numbers_sorted.sort()\n    ^\n/tmp/tmpeeo_h_uv.swift:12:38:\
    \ error: no exact matches in reference to operator function '+'\n    return numbers_sorted.reduce(\"\
    \", +)\n                                     ^\nSwift.RangeReplaceableCollection:2:35:\
    \ note: candidate requires that 'Any' conform to 'Sequence' (requirement specified\
    \ as 'Other' : 'Sequence')\n    @inlinable public static func + <Other>(lhs: Self,\
    \ rhs: Other) -> Self where Other : Sequence, Self.Element == Other.Element\n\
    \                                  ^\nSwift.RangeReplaceableCollection:5:35: note:\
    \ candidate requires that 'Any' conform to 'RangeReplaceableCollection' (requirement\
    \ specified as 'Other' : 'Rang"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters()\n    var numbers_array_sorted = [String]()\n    var current_number\
    \ = 0\n    var current_number_string = \"\"\n    var current_number_string_index\
    \ = 0\n    var current_number_string_index2 = 0\n    var current_number_string_index3\
    \ = 0\n    var current_number_string_index4 = 0\n    var current_number_string_index5\
    \ = 0\n    var current_number_string_index6 = 0\n    var current_number_string_index7\
    \ = 0\n    var current_number_string_index8 = 0\n    var current_number_string_index9\
    \ = 0\n    var current_number_string_index10 = 0\n    var current_number_string_index11\
    \ = 0\n    var current_number_string_index12 = 0\n    var current_number_string_index13\
    \ = 0\n    var current_number_string_index14 = 0\n    var current_number_string_index15\
    \ = 0\n    var current_number_string_index16 = 0\n    var current_number_string_index17\
    \ = 0\n    var current_number_string_index18 = 0\n    var current_number_string_index19\
    \ = 0\n    var current_number_string_index20 = 0\n    var current_number_string_index21\
    \ = 0\n    var current_number_string_index22 = 0\n    var current_number_string_index23\
    \ = 0\n    var current_number_string_index24 = 0\n    var current_number_string_index25\
    \ = 0\n    var current_number_string_index26 = 0\n    var current_number_string_index27\
    \ = 0\n    var current_number_string_index28 = 0\n    var current_number_string_index29\
    \ = 0\n    var current_number_string_index30 = 0\n    var current_number_string_index31\
    \ = 0\n    var current_number_string_index32 = 0\n    var current_number_string_index33\
    \ = 0\n    var current_number_string_index34 = 0\n    var current_number_string_index35\
    \ = 0\n    var current_number_string_index36 = 0\n    var current_number_string_index37\
    \ = 0\n    var current_number_string_index38 = 0\n    var current_number_string_index39\
    \ = 0\n    var current_number_string_index40 = 0\n    var current_number_string_index41\
    \ = 0\n    var current_number_string_index42 = 0\n    var current_number_string_index43\
    \ = 0\n    var current_number_string_index44 = 0\n    var current_number_string_index45\
    \ = 0\n    var current_number_string_index46 = 0\n    var current_number_string_index47\
    \ = 0\n    var current_number_string_index48 = 0\n    var current_number_string_index49\
    \ = 0\n    var current_number_string_index50 = 0\n    var current_number_string_index51\
    \ = 0\n    var current_number_string_index52 = 0\n    var current_number_string_index53\
    \ = 0\n    var current_number_string_index54 = 0\n    var current_number_string_index55\
    \ = 0\n    var current_number_string_index56 = 0\n    var current_number_string_index57\
    \ = 0\n    var current_number_string_index58 = 0\n    var current_number_string_index59\
    \ = 0\n    var current_number_string_index60 = 0\n    var current_number_\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpzovz1e28.swift:6:33: error: cannot call value of non-function type\
    \ 'String'\n    var numbers_array = numbers.characters()\n                   \
    \             ^         ~~\n                                          \n/tmp/tmpzovz1e28.swift:70:9:\
    \ error: type annotation missing in pattern\n    var current_number_\n       \
    \ ^\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort(by: { (number1, number2)\
    \ -> Bool in\n        return Int(number1) > Int(number2)\n    })\n    return numbers_array.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp3_2skldj.swift:8:16: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        return Int(number1) > Int(number2)\n\
    \               ^\n/tmp/tmp3_2skldj.swift:8:16: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n        return Int(number1)\
    \ > Int(number2)\n               ^\n                            ?? <#default value#>\n\
    /tmp/tmp3_2skldj.swift:8:16: note: force-unwrap using '!' to abort execution if\
    \ the optional value contains 'nil'\n        return Int(number1) > Int(number2)\n\
    \               ^\n                           !\n/tmp/tmp3_2skldj.swift:8:31:\
    \ error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n\
    \        return Int(number1) > Int(number2)\n                              ^\n\
    /tmp/tmp3_2skldj.swift:8:31: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n        return Int(number1) > Int(number2)\n\
    \                              ^\n                                           ??\
    \ <#default value#>\n/tmp/tmp3_2skldj.swift:8:31: note: force-unwrap using '!'\
    \ to abort execution if the optional value contains 'nil'\n        return Int(number1)\
    \ > Int(number2)\n                              ^\n                          \
    \                !\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort { $0.compare($1) ==\
    \ .orderedAscending }\n    return numbers_array.joined(separator: \" \")\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpdls_unls.swift:7:29: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    numbers_array.sort { $0.compare($1)\
    \ == .orderedAscending }\n                         ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(\" \").map(String::init)\n    numbers_array.sort()\n    return\
    \ numbers_array.joined(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpztolar0g.swift:6:55: error: expected expression in list of expressions\n\
    \    var numbers_array = numbers.split(\" \").map(String::init)\n            \
    \                                          ^\n/tmp/tmpztolar0g.swift:6:56: error:\
    \ consecutive statements on a line must be separated by ';'\n    var numbers_array\
    \ = numbers.split(\" \").map(String::init)\n                                 \
    \                      ^\n                                                   \
    \    ;\n/tmp/tmpztolar0g.swift:6:60: error: initializers may only be declared\
    \ within a type\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                                           ^\n/tmp/tmpztolar0g.swift:6:60:\
    \ error: expected '(' for initializer parameters\n    var numbers_array = numbers.split(\"\
    \ \").map(String::init)\n                                                    \
    \       ^\n/tmp/tmpztolar0g.swift:6:33: error: no exact matches in call to instance\
    \ method 'split'\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                ^\n/tmp/tmpztolar0g.swift:6:33: note: found candidate\
    \ with type '(String.Element, Int, Bool) -> [ArraySlice<String.Element>]' (aka\
    \ '(Character, Int, Bool) -> Array<ArraySlice<Character>>')\n    var numbers_array\
    \ = numbers.split(\" \").map(String::init)\n                                ^\n\
    /tmp/tmpztolar0g.swift:6:33: note: found candidate with type '(String.Element,\
    \ Int, Bool) -> [String.SubSequence]' (aka '(Character, Int, Bool) -> Array<Substring>')\n\
    \    var numbers_array = numbers.split(\" \").map(String::init)\n            \
    \                    ^\n/tmp/tmpztolar0g.swift:6:55: error: missing argument for\
    \ parameter #1 in call\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                                      ^\n                   \
    \                                   <#(ArraySlice<String.Element>) throws -> _#>\n\
    Swift.Collection:2:28: note: 'map' declared here\n    @inlinable public func map<T>(_\
    \ transform: (Self.Element) throws -> T) rethrows -> [T]\n                    "
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n    return numbers_array.joined(separator: \" \")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_a7639ny.swift:7:32: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n                            ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(\" \").map { Int($0) }\n    numbers_array.sort(<)\n    return\
    \ numbers_array.map { String($0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpp9wa2arw.swift:6:39: error: missing argument label 'separator:'\
    \ in call\n    var numbers_array = numbers.split(\" \").map { Int($0) }\n    \
    \                                  ^\n                                      separator:\
    \ \n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n    return numbers_array.joined(separator: \" \")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_a7639ny.swift:7:32: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n                            ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers\
    \ = numbers.split(\" \").sorted()\n    return numbers.reduce(\"\") {\n       \
    \ switch $0 {\n        case \"zero\":\n            return \"0\" + $0\n       \
    \ case \"one\":\n            return \"1\" + $0\n        case \"two\":\n      \
    \      return \"2\" + $0\n        case \"three\":\n            return \"3\" +\
    \ $0\n        case \"four\":\n            return \"4\" + $0\n        case \"five\"\
    :\n            return \"5\" + $0\n        case \"six\":\n            return \"\
    6\" + $0\n        case \"seven\":\n            return \"7\" + $0\n        case\
    \ \"eight\":\n            return \"8\" + $0\n        case \"nine\":\n        \
    \    return \"9\" + $0\n        default:\n            return $0\n        }\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp80c7ly76.swift:6:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    var numbers_array_sorted = [String]()\n\
    \    \n    for number in numbers_array {\n        switch number {\n        case\
    \ \"zero\":\n            numbers_array_sorted.append(\"0\")\n        case \"one\"\
    :\n            numbers_array_sorted.append(\"1\")\n        case \"two\":\n   \
    \         numbers_array_sorted.append(\"2\")\n        case \"three\":\n      \
    \      numbers_array_sorted.append(\"3\")\n        case \"four\":\n          \
    \  numbers_array_sorted.append(\"4\")\n        case \"five\":\n            numbers_array_sorted.append(\"\
    5\")\n        case \"six\":\n            numbers_array_sorted.append(\"6\")\n\
    \        case \"seven\":\n            numbers_array_sorted.append(\"7\")\n   \
    \     case \"eight\":\n            numbers_array_sorted.append(\"8\")\n      \
    \  case \"nine\":\n            numbers_array_sorted.append(\"9\")\n        default:\n\
    \            break\n        }\n    }\n    \n    return numbers_array_sorted.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpyphpd5f1.swift:36:33: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return numbers_array_sorted.sorted()\n\
    \           ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(\" \").map { Int($0) }\n    numbers_array.sort()\n    return\
    \ numbers_array.map { String($0) }.joined(\" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpxdl75uwv.swift:6:39: error: missing argument label 'separator:'\
    \ in call\n    var numbers_array = numbers.split(\" \").map { Int($0) }\n    \
    \                                  ^\n                                      separator:\
    \ \n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n    return numbers_array.joined(separator: \" \")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_a7639ny.swift:7:32: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n                            ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(\" \").map(String::init)\n    numbers_array.sortInPlace()\n\
    \    return numbers_array.joined(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmp446tzq75.swift:6:55: error: expected expression in list of expressions\n\
    \    var numbers_array = numbers.split(\" \").map(String::init)\n            \
    \                                          ^\n/tmp/tmp446tzq75.swift:6:56: error:\
    \ consecutive statements on a line must be separated by ';'\n    var numbers_array\
    \ = numbers.split(\" \").map(String::init)\n                                 \
    \                      ^\n                                                   \
    \    ;\n/tmp/tmp446tzq75.swift:6:60: error: initializers may only be declared\
    \ within a type\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                                           ^\n/tmp/tmp446tzq75.swift:6:60:\
    \ error: expected '(' for initializer parameters\n    var numbers_array = numbers.split(\"\
    \ \").map(String::init)\n                                                    \
    \       ^\n/tmp/tmp446tzq75.swift:6:33: error: no exact matches in call to instance\
    \ method 'split'\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                ^\n/tmp/tmp446tzq75.swift:6:33: note: found candidate\
    \ with type '(String.Element, Int, Bool) -> [ArraySlice<String.Element>]' (aka\
    \ '(Character, Int, Bool) -> Array<ArraySlice<Character>>')\n    var numbers_array\
    \ = numbers.split(\" \").map(String::init)\n                                ^\n\
    /tmp/tmp446tzq75.swift:6:33: note: found candidate with type '(String.Element,\
    \ Int, Bool) -> [String.SubSequence]' (aka '(Character, Int, Bool) -> Array<Substring>')\n\
    \    var numbers_array = numbers.split(\" \").map(String::init)\n            \
    \                    ^\n/tmp/tmp446tzq75.swift:6:55: error: missing argument for\
    \ parameter #1 in call\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                                      ^\n                   \
    \                                   <#(ArraySlice<String.Element>) throws -> _#>\n\
    Swift.Collection:2:28: note: 'map' declared here\n    @inlinable public func map<T>(_\
    \ transform: (Self.Element) throws -> T) rethrows -> [T]\n                    "
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(\" \").map{Int($0)!}\n    numbers_array.sort()\n    return numbers_array.map{String($0)}.joined(\"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp8bewg893.swift:6:39: error: missing argument label 'separator:'\
    \ in call\n    var numbers_array = numbers.split(\" \").map{Int($0)!}\n      \
    \                                ^\n                                      separator:\
    \ \n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters\n    numbers_array.sort()\n    return String(numbers_array)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpbidws3wj.swift:6:33: error: 'characters' is unavailable: Please\
    \ use String directly\n    var numbers_array = numbers.characters\n          \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpbidws3wj.swift:7:19: error: value of type 'String' has no member\
    \ 'sort'\n    numbers_array.sort()\n    ~~~~~~~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters.split{$0 == \" \"}.map(String.init)\n    numbers_array.sort{$0\
    \ < $1}\n    return numbers_array.joinWithSeparator(\" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp3wwr50pd.swift:6:33: error: 'characters' is unavailable: Please\
    \ use String directly\n    var numbers_array = numbers.characters.split{$0 ==\
    \ \" \"}.map(String.init)\n                                ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp3wwr50pd.swift:8:26: error: value of\
    \ type '[String]' has no member 'joinWithSeparator'\n    return numbers_array.joinWithSeparator(\"\
    \ \")\n           ~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters.split{$0 == \" \"}.map(String.init)\n    numbers_array.sort{$0\
    \ < $1}\n    return numbers_array.joinWithSeparator(\" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp3wwr50pd.swift:6:33: error: 'characters' is unavailable: Please\
    \ use String directly\n    var numbers_array = numbers.characters.split{$0 ==\
    \ \" \"}.map(String.init)\n                                ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp3wwr50pd.swift:8:26: error: value of\
    \ type '[String]' has no member 'joinWithSeparator'\n    return numbers_array.joinWithSeparator(\"\
    \ \")\n           ~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters.split(separator: \" \")\n    numbers_array.sort(by: sort_numbers_compare)\n\
    \    return String(numbers_array)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpmvrljk8g.swift:6:33: error: 'characters' is unavailable: Please\
    \ use String directly\n    var numbers_array = numbers.characters.split(separator:\
    \ \" \")\n                                ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpmvrljk8g.swift:7:28: error: cannot find\
    \ 'sort_numbers_compare' in scope\n    numbers_array.sort(by: sort_numbers_compare)\n\
    \                           ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmvrljk8g.swift:7:28:\
    \ error: converting non-escaping value to '(String.SubSequence, String.SubSequence)\
    \ throws -> Bool' (aka '(Substring, Substring) throws -> Bool') may allow it to\
    \ escape\n    numbers_array.sort(by: sort_numbers_compare)\n                 \
    \          ^\n/tmp/tmpmvrljk8g.swift:8:12: error: no exact matches in call to\
    \ initializer \n    return String(numbers_array)\n           ^\nSwift.String:4:12:\
    \ note: candidate requires that the types 'String.SubSequence' (aka 'Substring')\
    \ and 'Character' be equivalent (requirement specified as 'S.Element' == 'Character')\n\
    \    public init<S>(_ characters: S) where S : Sequence, S.Element == Character\n\
    \           ^\nSwift.RangeReplaceableCollection:3:23: note: candidate requires\
    \ that the types 'String.Element' (aka 'Character') and 'String.SubSequence' (aka\
    \ 'Substring') be equivalent (requirement specified as 'Self.Element' == 'S.Element')\n\
    \    @inlinable public init<S>(_ elements: S) where S : Sequence, Self.Element\
    \ == S.Element\n                      ^\nSwift.String:2:12: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(describing:)')\n    public init<Subject>(describing\
    \ instance: Subject)\n           ^\nSwift.String:3:23: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(describing:)')\n    @inlinable public\
    \ init<Subject>(describing instance: Subject) where Subject : CustomStringConvertible\n\
    \                      ^\nSwift.String:6:12: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(reflecting:)')\n    public init<Subject>(reflecting\
    \ s"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n    return numbers_array.joined(separator: \" \")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_a7639ny.swift:7:32: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n                            ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n    return numbers_array.joined(separator: \" \")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_a7639ny.swift:7:32: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n                            ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters().map({ String($0) })\n    numbers_array.sort()\n    return\
    \ String(numbers_array)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpya_31q7v.swift:6:33: error: cannot call value of non-function type\
    \ 'String'\n    var numbers_array = numbers.characters().map({ String($0) })\n\
    \                                ^         ~~\n                              \
    \            \n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers\
    \ = numbers.characters\n    numbers.removeFirst()\n    numbers.removeLast()\n\
    \    numbers.removeFirst()\n    numbers.removeLast()\n    numbers.removeFirst()\n\
    \    numbers.removeLast()\n    numbers.removeFirst()\n    numbers.removeLast()\n\
    \    numbers.removeFirst()\n    numbers.removeLast()\n    numbers.removeFirst()\n\
    \    numbers.removeLast()\n    numbers.removeFirst()\n    numbers.removeLast()\n\
    \    numbers.removeFirst()\n    numbers.removeLast()\n    numbers.removeFirst()\n\
    \    numbers.removeLast()\n    numbers.removeFirst()\n    numbers.removeLast()\n\
    \    numbers.removeFirst()\n    numbers.removeLast()\n    numbers.removeFirst()\n\
    \    numbers.removeLast()\n    numbers.removeFirst()\n    numbers.removeLast()\n\
    \    numbers.removeFirst()\n    numbers.removeLast()\n    numbers.removeFirst()\n\
    \    numbers.removeLast()\n    numbers.removeFirst()\n    numbers.removeLast()\n\
    \    numbers.removeFirst()\n    numbers.removeLast()\n    numbers.removeFirst()\n\
    \    numbers.removeLast()\n    numbers.removeFirst()\n    numbers.removeLast()\n\
    \    numbers.removeFirst()\n    numbers.removeLast()\n    numbers.removeFirst()\n\
    \    numbers.removeLast()\n    numbers.removeFirst()\n    numbers.removeLast()\n\
    \    numbers.removeFirst()\n    numbers.removeLast()\n    numbers.removeFirst()\n\
    \    numbers.removeLast()\n    numbers.removeFirst()\n    numbers.removeLast()\n\
    \    numbers.removeFirst()\n    numbers.removeLast()\n    numbers.removeFirst()\n\
    \    numbers.removeLast()\n    numbers.removeFirst()\n    numbers.removeLast()\n\
    \    numbers.removeFirst()\n    numbers.removeLast()\n    numbers.removeFirst()\n\
    \    numbers.removeLast()\n    numbers.removeFirst()\n    numbers.removeLast()\n\
    \    numbers.removeFirst()\n    numbers.removeLast()\n    numbers.removeFirst()\n\
    \    numbers.removeLast()\n    numbers.removeFirst()\n    numbers.removeLast()\n\
    \    numbers.removeFirst()\n    numbers.removeLast()\n    numbers.removeFirst()\n\
    \    numbers.removeLast()\n    numbers.removeFirst()\n    numbers.removeLast()\n\
    \    numbers.removeFirst()\n    numbers.removeLast()\n    numbers.removeFirst()\n\
    \    numbers.removeLast()\n    numbers.removeFirst()\n    numbers.removeLast()\n\
    \    numbers.removeFirst()\n    numbers.removeLast()\n    numbers.removeFirst()\n\
    \    numbers.removeLast()\n    numbers.\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmp84f440sn.swift:91:12: error: expected member name following '.'\n\
    \    numbers.\n           ^\n/tmp/tmp84f440sn.swift:6:27: error: 'characters'\
    \ is unavailable: Please use String directly\n    var numbers = numbers.characters\n\
    \                          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers\
    \ = numbers.lowercased()\n    numbers = numbers.replace(\"-\", \"\")\n    numbers\
    \ = numbers.replace(\".\", \"\")\n    numbers = numbers.replace(\"/\", \"\")\n\
    \    numbers = numbers.replace(\"+\", \"\")\n    numbers = numbers.replace(\"\
    -\", \"\")\n    numbers = numbers.replace(\"/\", \"\")\n    numbers = numbers.replace(\"\
    +\", \"\")\n    numbers = numbers.replace(\"-\", \"\")\n    numbers = numbers.replace(\"\
    /\", \"\")\n    numbers = numbers.replace(\"+\", \"\")\n    numbers = numbers.replace(\"\
    -\", \"\")\n    numbers = numbers.replace(\"/\", \"\")\n    numbers = numbers.replace(\"\
    +\", \"\")\n    numbers = numbers.replace(\"-\", \"\")\n    numbers = numbers.replace(\"\
    /\", \"\")\n    numbers = numbers.replace(\"+\", \"\")\n    numbers = numbers.replace(\"\
    -\", \"\")\n    numbers = numbers.replace(\"/\", \"\")\n    numbers = numbers.replace(\"\
    +\", \"\")\n    numbers = numbers.replace(\"-\", \"\")\n    numbers = numbers.replace(\"\
    /\", \"\")\n    numbers = numbers.replace(\"+\", \"\")\n    numbers = numbers.replace(\"\
    -\", \"\")\n    numbers = numbers.replace(\"/\", \"\")\n    numbers = numbers.replace(\"\
    +\", \"\")\n    numbers = numbers.replace(\"-\", \"\")\n    numbers = numbers.replace(\"\
    /\", \"\")\n    numbers = numbers.replace(\"+\", \"\")\n    numbers = numbers.replace(\"\
    -\", \"\")\n    numbers = numbers.replace(\"/\", \"\")\n    numbers = numbers.replace(\"\
    +\", \"\")\n    numbers = numbers.replace(\"-\", \"\")\n    numbers = numbers.replace(\"\
    /\", \"\")\n    numbers = numbers.replace(\"+\", \"\")\n    numbers = numbers.replace(\"\
    -\", \"\")\n    numbers = numbers.replace(\"/\", \"\")\n    numbers = numbers.replace(\"\
    +\", \"\")\n    numbers = numbers.replace(\"-\", \"\")\n    numbers = numbers.replace(\"\
    /\", \"\")\n    numbers = numbers.replace(\"+\", \"\")\n    numbers = numbers.replace(\"\
    -\", \"\")\n    numbers = numbers.replace(\"/\", \"\")\n    numbers = numbers.replace(\"\
    +\", \"\")\n    numbers = numbers.replace(\"-\", \"\")\n    numbers = numbers.replace(\"\
    /\", \"\")\n    numbers = numbers.replace(\"+\", \"\")\n    numbers = numbers.replace(\"\
    -\", \"\")\n    numbers = numbers.replace(\"/\", \"\")\n    numbers = numbers.replace(\"\
    +\", \"\")\n    numbers = numbers.replace(\"-\", \"\")\n    numbers = numbers.replace(\"\
    /\", \"\")\n    numbers = numbers.replace(\"+\", \"\")\n    numbers = numbers.replace(\"\
    -\", \"\")\n    numbers = numbers.replace(\"/\", \"\")\n    numbers = numbers.replace(\"\
    +\", \"\")\n    numbers = numbers.replace(\"-\", \"\")\n    numbers = numbers.replace(\"\
    /\", \"\")\n    numbers = numbers.replace(\"+\", \"\")\n    numbers = numbers.replace(\"\
    -\", \"\")\n    numbers = numbers.replace(\"/\", \"\")\n    numbers = numbers.replace(\"\
    +\", \"\")\n    numbers = numbers.replace(\"-\", \"\")\n    numbers = numbers.replace(\"\
    /\", \"\")\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpjeaf5gmz.swift:7:23: error: cannot assign value of type '()' to\
    \ type 'String'\n    numbers = numbers.replace(\"-\", \"\")\n              ~~~~~~~~^~~~~~~~~~~~~~~~\n\
    /tmp/tmpjeaf5gmz.swift:7:30: error: missing argument label 'with:' in call\n \
    \   numbers = numbers.replace(\"-\", \"\")\n                             ^\n \
    \                                  with: \n/tmp/tmpjeaf5gmz.swift:8:23: error:\
    \ cannot assign value of type '()' to type 'String'\n    numbers = numbers.replace(\"\
    .\", \"\")\n              ~~~~~~~~^~~~~~~~~~~~~~~~\n/tmp/tmpjeaf5gmz.swift:8:30:\
    \ error: missing argument label 'with:' in call\n    numbers = numbers.replace(\"\
    .\", \"\")\n                             ^\n                                 \
    \  with: \n/tmp/tmpjeaf5gmz.swift:9:23: error: cannot assign value of type '()'\
    \ to type 'String'\n    numbers = numbers.replace(\"/\", \"\")\n             \
    \ ~~~~~~~~^~~~~~~~~~~~~~~~\n/tmp/tmpjeaf5gmz.swift:9:30: error: missing argument\
    \ label 'with:' in call\n    numbers = numbers.replace(\"/\", \"\")\n        \
    \                     ^\n                                   with: \n/tmp/tmpjeaf5gmz.swift:10:23:\
    \ error: cannot assign value of type '()' to type 'String'\n    numbers = numbers.replace(\"\
    +\", \"\")\n              ~~~~~~~~^~~~~~~~~~~~~~~~\n/tmp/tmpjeaf5gmz.swift:10:30:\
    \ error: missing argument label 'with:' in call\n    numbers = numbers.replace(\"\
    +\", \"\")\n                             ^\n                                 \
    \  with: \n/tmp/tmpjeaf5gmz.swift:11:23: error: cannot assign value of type '()'\
    \ to type 'String'\n    numbers = numbers.replace(\"-\", \"\")\n             \
    \ ~~~~~~~~^~~~~~~~~~~~~~~~\n/tmp/tmpjeaf5gmz.swift:11:30: error: missing argument\
    \ label 'with:' in call\n    numbers = numbers.replace(\"-\", \"\")\n        \
    \                     ^\n                                   with: \n/tmp/tmpjeaf5gmz.swift:12:23:\
    \ error: cannot assign value of type '()' to type 'String'\n    numbers = numbers.replace(\"\
    /\", \"\")\n              ~~~~~~~~^~~~~~~~~~~~~~~~\n/tmp/tmpjeaf5gmz.swift:12:30:\
    \ error: missing argument label 'with:' in call\n    numbers = numbers.replace(\"\
    /\", \"\")\n         "
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters()\n    numbers_array.sortInPlace({ $0.compare($1) == NSComparisonResult.OrderedAscending\
    \ })\n    return String(numbers_array)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmp387erex1.swift:6:33: error: cannot call value of non-function type\
    \ 'String'\n    var numbers_array = numbers.characters()\n                   \
    \             ^         ~~\n                                          \n/tmp/tmp387erex1.swift:7:51:\
    \ error: cannot find 'NSComparisonResult' in scope\n    numbers_array.sortInPlace({\
    \ $0.compare($1) == NSComparisonResult.OrderedAscending })\n                 \
    \                                 ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters.split{$0 == \" \"}.map(String.init)\n    numbers_array.sort{$0\
    \ < $1}\n    return numbers_array.joinWithSeparator(\" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp3wwr50pd.swift:6:33: error: 'characters' is unavailable: Please\
    \ use String directly\n    var numbers_array = numbers.characters.split{$0 ==\
    \ \" \"}.map(String.init)\n                                ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp3wwr50pd.swift:8:26: error: value of\
    \ type '[String]' has no member 'joinWithSeparator'\n    return numbers_array.joinWithSeparator(\"\
    \ \")\n           ~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n    return numbers_array.joined(separator: \" \")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_a7639ny.swift:7:32: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n                            ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.ToLower(numbers)\n    numbers = strings.Replace(numbers,\
    \ \"-\", \"\", -1)\n    numbers = strings.Replace(numbers, \",\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"'\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"-\", \"\", -1)\n    numbers = strings.Replace(numbers, \".\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"0\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"1\", \"\", -1)\n    numbers = strings.Replace(numbers, \"2\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"3\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"4\", \"\", -1)\n    numbers = strings.Replace(numbers, \"5\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"6\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"7\", \"\", -1)\n    numbers = strings.Replace(numbers, \"8\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"9\", \"\", -1)\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmpn6f_tttd.swift:53:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmpn6f_tttd.swift:6:15: error: cannot find 'strings' in scope\n   \
    \ numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmpn6f_tttd.swift:6:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmpn6f_tttd.swift:7:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.ToLower(numbers)\n   \
    \           ^~~~~~~\n/tmp/tmpn6f_tttd.swift:7:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.ToLower(numbers)\n    ^~~~~~~\n\
    /tmp/tmpn6f_tttd.swift:8:15: error: cannot find 'strings' in scope\n    numbers\
    \ = strings.Replace(numbers, \"-\", \"\", -1)\n              ^~~~~~~\n/tmp/tmpn6f_tttd.swift:8:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.Replace(numbers, \"-\", \"\", -1)\n    ^~~~~~~\n/tmp/tmpn6f_tttd.swift:9:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.Replace(numbers,\
    \ \",\", \"\", -1)\n              ^~~~~~~\n/tmp/tmpn6f_tttd.swift:9:5: error:\
    \ cannot assign to value: 'numbers' is a 'let' constant\n    numbers = strings.Replace(numbers,\
    \ \",\", \"\", -1)\n    ^~~~~~~\n/tmp/tmpn6f_tttd.swift:10:15: error: cannot find\
    \ 'strings' in scope\n    numbers = strings.Replace(numbers, \"'\", \"\", -1)\n\
    \              ^~~~~~~\n/tmp/tmpn6f_tttd.swift:10:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.Replace(numbers, \"'\"\
    , \"\", -1)\n    ^~~~~~~\n/tmp/tmpn6f_tttd.swift:11:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.Replace(numbers, \"-\", \"\", -1)\n        \
    \      ^~~~~~~\n/tmp/tmpn6f_tttd.swift:11:5: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n    numbers = strings.Replace(numbers, \"-\", \"\", -1)\n\
    \    ^~~~~~~\n/tmp/tmpn6f_tttd.swift:12:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.Replace(numbers, \".\", \"\", -1)\n              ^~~~~~~\n\
    /tmp/tmpn6f_tttd.swift:12:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers ="
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers\
    \ = numbers.characters\n    numbers.removeFirst()\n    numbers.removeLast()\n\
    \    numbers.removeFirst()\n    numbers.removeLast()\n    numbers.removeFirst()\n\
    \    numbers.removeLast()\n    numbers.removeFirst()\n    numbers.removeLast()\n\
    \    numbers.removeFirst()\n    numbers.removeLast()\n    numbers.removeFirst()\n\
    \    numbers.removeLast()\n    numbers.removeFirst()\n    numbers.removeLast()\n\
    \    numbers.removeFirst()\n    numbers.removeLast()\n    numbers.removeFirst()\n\
    \    numbers.removeLast()\n    numbers.removeFirst()\n    numbers.removeLast()\n\
    \    numbers.removeFirst()\n    numbers.removeLast()\n    numbers.removeFirst()\n\
    \    numbers.removeLast()\n    numbers.removeFirst()\n    numbers.removeLast()\n\
    \    numbers.removeFirst()\n    numbers.removeLast()\n    numbers.removeFirst()\n\
    \    numbers.removeLast()\n    numbers.removeFirst()\n    numbers.removeLast()\n\
    \    numbers.removeFirst()\n    numbers.removeLast()\n    numbers.removeFirst()\n\
    \    numbers.removeLast()\n    numbers.removeFirst()\n    numbers.removeLast()\n\
    \    numbers.removeFirst()\n    numbers.removeLast()\n    numbers.removeFirst()\n\
    \    numbers.removeLast()\n    numbers.removeFirst()\n    numbers.removeLast()\n\
    \    numbers.removeFirst()\n    numbers.removeLast()\n    numbers.removeFirst()\n\
    \    numbers.removeLast()\n    numbers.removeFirst()\n    numbers.removeLast()\n\
    \    numbers.removeFirst()\n    numbers.removeLast()\n    numbers.removeFirst()\n\
    \    numbers.removeLast()\n    numbers.removeFirst()\n    numbers.removeLast()\n\
    \    numbers.removeFirst()\n    numbers.removeLast()\n    numbers.removeFirst()\n\
    \    numbers.removeLast()\n    numbers.removeFirst()\n    numbers.removeLast()\n\
    \    numbers.removeFirst()\n    numbers.removeLast()\n    numbers.removeFirst()\n\
    \    numbers.removeLast()\n    numbers.removeFirst()\n    numbers.removeLast()\n\
    \    numbers.removeFirst()\n    numbers.removeLast()\n    numbers.removeFirst()\n\
    \    numbers.removeLast()\n    numbers.removeFirst()\n    numbers.removeLast()\n\
    \    numbers.removeFirst()\n    numbers.removeLast()\n    numbers.removeFirst()\n\
    \    numbers.removeLast()\n    numbers.removeFirst()\n    numbers.removeLast()\n\
    \    numbers.removeFirst()\n    numbers.removeLast()\n    numbers.removeFirst()\n\
    \    numbers.removeLast()\n    numbers.\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmp84f440sn.swift:91:12: error: expected member name following '.'\n\
    \    numbers.\n           ^\n/tmp/tmp84f440sn.swift:6:27: error: 'characters'\
    \ is unavailable: Please use String directly\n    var numbers = numbers.characters\n\
    \                          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters.split{$0 == \" \"}.map(String.init)\n    numbers_array.sort\
    \ { $0.compare($1) == NSComparisonResult.OrderedAscending }\n    return numbers_array.joinWithSeparator(\"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpptfmhzic.swift:6:33: error: 'characters' is unavailable: Please\
    \ use String directly\n    var numbers_array = numbers.characters.split{$0 ==\
    \ \" \"}.map(String.init)\n                                ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpptfmhzic.swift:7:44: error: cannot find\
    \ 'NSComparisonResult' in scope\n    numbers_array.sort { $0.compare($1) == NSComparisonResult.OrderedAscending\
    \ }\n                                           ^~~~~~~~~~~~~~~~~~\n/tmp/tmpptfmhzic.swift:8:26:\
    \ error: value of type '[String]' has no member 'joinWithSeparator'\n    return\
    \ numbers_array.joinWithSeparator(\" \")\n           ~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters()\n    numbers_array.sort()\n    return String(numbers_array)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpem3dq2n6.swift:6:33: error: cannot call value of non-function type\
    \ 'String'\n    var numbers_array = numbers.characters()\n                   \
    \             ^         ~~\n                                          \n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters()\n    numbers_array.sort()\n    return String(numbers_array)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpem3dq2n6.swift:6:33: error: cannot call value of non-function type\
    \ 'String'\n    var numbers_array = numbers.characters()\n                   \
    \             ^         ~~\n                                          \n"
  stdout: ''
  timestamp: 1660013666
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort()\n    return numbers_array.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpv6sshhi2/tmpv6sshhi2.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4143a56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b414374db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b414374d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b414374c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv6sshhi2                        0x00005601e17bd952 <unavailable> + 6482

    5    libc.so.6                          0x00002b4143c42460 __libc_start_main +
    245

    6    tmpv6sshhi2                        0x00005601e17bd389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters()\n    numbers_array.sortInPlace({ $0.compare($1) == NSComparisonResult.OrderedAscending\
    \ })\n    return String(numbers_array)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmp387erex1.swift:6:33: error: cannot call value of non-function type\
    \ 'String'\n    var numbers_array = numbers.characters()\n                   \
    \             ^         ~~\n                                          \n/tmp/tmp387erex1.swift:7:51:\
    \ error: cannot find 'NSComparisonResult' in scope\n    numbers_array.sortInPlace({\
    \ $0.compare($1) == NSComparisonResult.OrderedAscending })\n                 \
    \                                 ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters.split{$0 == \" \"}.map(String.init)\n    numbers_array.sort{$0\
    \ < $1}\n    return numbers_array.joinWithSeparator(\" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp3wwr50pd.swift:6:33: error: 'characters' is unavailable: Please\
    \ use String directly\n    var numbers_array = numbers.characters.split{$0 ==\
    \ \" \"}.map(String.init)\n                                ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp3wwr50pd.swift:8:26: error: value of\
    \ type '[String]' has no member 'joinWithSeparator'\n    return numbers_array.joinWithSeparator(\"\
    \ \")\n           ~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort(by: { (number1, number2)\
    \ -> Bool in\n        let number1_int = Int(number1)\n        let number2_int\
    \ = Int(number2)\n        return number1_int < number2_int\n    })\n    return\
    \ numbers_array.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmptjqb7pyp.swift:10:16: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        return number1_int < number2_int\n\
    \               ^\n/tmp/tmptjqb7pyp.swift:10:16: note: coalesce using '??' to\
    \ provide a default when the optional value contains 'nil'\n        return number1_int\
    \ < number2_int\n               ^\n                           ?? <#default value#>\n\
    /tmp/tmptjqb7pyp.swift:10:16: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n        return number1_int < number2_int\n\
    \               ^\n                          !\n/tmp/tmptjqb7pyp.swift:10:30:\
    \ error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n\
    \        return number1_int < number2_int\n                             ^\n/tmp/tmptjqb7pyp.swift:10:30:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        return number1_int < number2_int\n                          \
    \   ^\n                                         ?? <#default value#>\n/tmp/tmptjqb7pyp.swift:10:30:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        return number1_int < number2_int\n                          \
    \   ^\n                                        !\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(\" \").map(String::init)\n    numbers_array.sort()\n    return\
    \ numbers_array.joined(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpztolar0g.swift:6:55: error: expected expression in list of expressions\n\
    \    var numbers_array = numbers.split(\" \").map(String::init)\n            \
    \                                          ^\n/tmp/tmpztolar0g.swift:6:56: error:\
    \ consecutive statements on a line must be separated by ';'\n    var numbers_array\
    \ = numbers.split(\" \").map(String::init)\n                                 \
    \                      ^\n                                                   \
    \    ;\n/tmp/tmpztolar0g.swift:6:60: error: initializers may only be declared\
    \ within a type\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                                           ^\n/tmp/tmpztolar0g.swift:6:60:\
    \ error: expected '(' for initializer parameters\n    var numbers_array = numbers.split(\"\
    \ \").map(String::init)\n                                                    \
    \       ^\n/tmp/tmpztolar0g.swift:6:33: error: no exact matches in call to instance\
    \ method 'split'\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                ^\n/tmp/tmpztolar0g.swift:6:33: note: found candidate\
    \ with type '(String.Element, Int, Bool) -> [ArraySlice<String.Element>]' (aka\
    \ '(Character, Int, Bool) -> Array<ArraySlice<Character>>')\n    var numbers_array\
    \ = numbers.split(\" \").map(String::init)\n                                ^\n\
    /tmp/tmpztolar0g.swift:6:33: note: found candidate with type '(String.Element,\
    \ Int, Bool) -> [String.SubSequence]' (aka '(Character, Int, Bool) -> Array<Substring>')\n\
    \    var numbers_array = numbers.split(\" \").map(String::init)\n            \
    \                    ^\n/tmp/tmpztolar0g.swift:6:55: error: missing argument for\
    \ parameter #1 in call\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                                      ^\n                   \
    \                                   <#(ArraySlice<String.Element>) throws -> _#>\n\
    Swift.Collection:2:28: note: 'map' declared here\n    @inlinable public func map<T>(_\
    \ transform: (Self.Element) throws -> T) rethrows -> [T]\n                    "
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort { $0.compare($1) ==\
    \ .orderedAscending }\n    return numbers_array.joined(separator: \" \")\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpdls_unls.swift:7:29: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    numbers_array.sort { $0.compare($1)\
    \ == .orderedAscending }\n                         ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters.split{$0 == \" \"}.map(String.init)\n    numbers_array.sort{$0\
    \ < $1}\n    return numbers_array.joinWithSeparator(\" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp3wwr50pd.swift:6:33: error: 'characters' is unavailable: Please\
    \ use String directly\n    var numbers_array = numbers.characters.split{$0 ==\
    \ \" \"}.map(String.init)\n                                ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp3wwr50pd.swift:8:26: error: value of\
    \ type '[String]' has no member 'joinWithSeparator'\n    return numbers_array.joinWithSeparator(\"\
    \ \")\n           ~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters.split{$0 == \" \"}.map(String.init)\n    numbers_array.sort{$0\
    \ < $1}\n    return numbers_array.joinWithSeparator(\" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp3wwr50pd.swift:6:33: error: 'characters' is unavailable: Please\
    \ use String directly\n    var numbers_array = numbers.characters.split{$0 ==\
    \ \" \"}.map(String.init)\n                                ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp3wwr50pd.swift:8:26: error: value of\
    \ type '[String]' has no member 'joinWithSeparator'\n    return numbers_array.joinWithSeparator(\"\
    \ \")\n           ~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters()\n    numbers_array.sort()\n    return String(numbers_array)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpem3dq2n6.swift:6:33: error: cannot call value of non-function type\
    \ 'String'\n    var numbers_array = numbers.characters()\n                   \
    \             ^         ~~\n                                          \n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    var numbers_array = strings.Split(numbers, \" \")\n    numbers_array = sort_numbers_array(numbers_array)\n\
    \    return strings.Join(numbers_array, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpmlzrio73.swift:6:15: error: cannot find 'strings' in scope\n  \
    \  numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmpmlzrio73.swift:6:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmpmlzrio73.swift:7:25: error:\
    \ cannot find 'strings' in scope\n    var numbers_array = strings.Split(numbers,\
    \ \" \")\n                        ^~~~~~~\n/tmp/tmpmlzrio73.swift:8:21: error:\
    \ cannot find 'sort_numbers_array' in scope\n    numbers_array = sort_numbers_array(numbers_array)\n\
    \                    ^~~~~~~~~~~~~~~~~~\n/tmp/tmpmlzrio73.swift:9:12: error: cannot\
    \ find 'strings' in scope\n    return strings.Join(numbers_array, \" \")\n   \
    \        ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n    return numbers_array.joined(separator: \" \")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_a7639ny.swift:7:32: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n                            ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters()\n    numbers_array.sortInPlace({ $0 < $1 })\n    return\
    \ String(numbers_array)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp8nzz_5jf.swift:6:33: error: cannot call value of non-function type\
    \ 'String'\n    var numbers_array = numbers.characters()\n                   \
    \             ^         ~~\n                                          \n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters.split{$0 == \" \"}.map(String.init)\n    numbers_array.sort{$0\
    \ < $1}\n    return numbers_array.joined()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpzho22xd8.swift:6:33: error: 'characters' is unavailable: Please\
    \ use String directly\n    var numbers_array = numbers.characters.split{$0 ==\
    \ \" \"}.map(String.init)\n                                ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.ToLower(numbers)\n    numbers = strings.Replace(numbers,\
    \ \"-\", \"\", -1)\n    numbers = strings.Replace(numbers, \",\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"'\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"-\", \"\", -1)\n    numbers = strings.Replace(numbers, \"0\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"1\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"2\", \"\", -1)\n    numbers = strings.Replace(numbers, \"3\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"4\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"5\", \"\", -1)\n    numbers = strings.Replace(numbers, \"6\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"7\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"8\", \"\", -1)\n    numbers = strings.Replace(numbers, \"9\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \" \", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"-\", \"\", -1)\n    numbers = strings.Replace(numbers, \"'\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"0\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"1\", \"\", -1)\n    numbers = strings.Replace(numbers, \"2\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"3\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"4\", \"\", -1)\n    numbers = strings.Replace(numbers, \"5\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"6\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"7\", \"\", -1)\n    numbers = strings.Replace(numbers, \"8\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"9\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \" \", \"\", -1)\n    numbers = strings.Replace(numbers, \"-\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"'\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"0\", \"\", -1)\n    numbers = strings.Replace(numbers, \"1\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"2\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"3\", \"\", -1)\n    numbers = strings.Replace(numbers, \"4\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"5\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"6\", \"\", -1)\n    numbers = strings.Replace(numbers, \"7\", \"\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp2dhbpps6.swift:46:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp2dhbpps6.swift:45:30: note: to match this opening '('\n    numbers\
    \ = strings.Replace(numbers, \"7\", \"\"\n                             ^\n/tmp/tmp2dhbpps6.swift:6:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmp2dhbpps6.swift:6:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmp2dhbpps6.swift:7:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.ToLower(numbers)\n              ^~~~~~~\n/tmp/tmp2dhbpps6.swift:7:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.ToLower(numbers)\n    ^~~~~~~\n/tmp/tmp2dhbpps6.swift:8:15: error: cannot\
    \ find 'strings' in scope\n    numbers = strings.Replace(numbers, \"-\", \"\"\
    , -1)\n              ^~~~~~~\n/tmp/tmp2dhbpps6.swift:8:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.Replace(numbers,\
    \ \"-\", \"\", -1)\n    ^~~~~~~\n/tmp/tmp2dhbpps6.swift:9:15: error: cannot find\
    \ 'strings' in scope\n    numbers = strings.Replace(numbers, \",\", \"\", -1)\n\
    \              ^~~~~~~\n/tmp/tmp2dhbpps6.swift:9:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.Replace(numbers, \",\"\
    , \"\", -1)\n    ^~~~~~~\n/tmp/tmp2dhbpps6.swift:10:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.Replace(numbers, \"'\", \"\", -1)\n        \
    \      ^~~~~~~\n/tmp/tmp2dhbpps6.swift:10:5: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n    numbers = strings.Replace(numbers, \"'\", \"\", -1)\n\
    \    ^~~~~~~\n/tmp/tmp2dhbpps6.swift:11:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.Replace(numbers, \"-\", \"\", -1)\n              ^~~~~~~\n\
    /tmp/tmp2dhbpps6.swift:11:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.Replace(numbers, \"-\", \"\", -1)\n    ^~~~~~~\n\
    /tmp/tmp2dhbpps6.swift:12:15: error: cannot find 'strings' in scope\n    numbers\
    \ = strings.Replace(numbers, \"0\", \"\", "
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n    return numbers_array.joined(separator: \" \")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_a7639ny.swift:7:32: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n                            ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters.split(separator: \" \")\n    numbers_array.sort { $0.compare($1)\
    \ == .orderedAscending }\n    return String(numbers_array)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpt5k3z2mh.swift:6:33: error: 'characters' is unavailable: Please\
    \ use String directly\n    var numbers_array = numbers.characters.split(separator:\
    \ \" \")\n                                ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpt5k3z2mh.swift:7:29: error: value of type\
    \ 'String.SubSequence' (aka 'Substring') has no member 'compare'\n    numbers_array.sort\
    \ { $0.compare($1) == .orderedAscending }\n                         ~~ ^~~~~~~\n\
    /tmp/tmpt5k3z2mh.swift:8:12: error: no exact matches in call to initializer \n\
    \    return String(numbers_array)\n           ^\nSwift.String:4:12: note: candidate\
    \ requires that the types 'String.SubSequence' (aka 'Substring') and 'Character'\
    \ be equivalent (requirement specified as 'S.Element' == 'Character')\n    public\
    \ init<S>(_ characters: S) where S : Sequence, S.Element == Character\n      \
    \     ^\nSwift.RangeReplaceableCollection:3:23: note: candidate requires that\
    \ the types 'String.Element' (aka 'Character') and 'String.SubSequence' (aka 'Substring')\
    \ be equivalent (requirement specified as 'Self.Element' == 'S.Element')\n   \
    \ @inlinable public init<S>(_ elements: S) where S : Sequence, Self.Element ==\
    \ S.Element\n                      ^\nSwift.String:2:12: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(describing:)')\n    public init<Subject>(describing\
    \ instance: Subject)\n           ^\nSwift.String:3:23: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(describing:)')\n    @inlinable public\
    \ init<Subject>(describing instance: Subject) where Subject : CustomStringConvertible\n\
    \                      ^\nSwift.String:6:12: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(reflecting:)')\n    public init<Subject>(reflecting\
    \ subject: Subject)\n           ^\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters.split(separator: \" \")\n    numbers_array.sort(by: { (number:\
    \ String) -> Bool in\n        guard let number = Int(number) else { return false\
    \ }\n        return number < 10\n    })\n    return numbers_array.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpxeex0wv5.swift:6:33: error: 'characters' is unavailable: Please\
    \ use String directly\n    var numbers_array = numbers.characters.split(separator:\
    \ \" \")\n                                ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpxeex0wv5.swift:7:30: error: contextual\
    \ closure type '(String.SubSequence, String.SubSequence) throws -> Bool' (aka\
    \ '(Substring, Substring) throws -> Bool') expects 2 arguments, but 1 was used\
    \ in closure body\n    numbers_array.sort(by: { (number: String) -> Bool in\n\
    \                             ^\n/tmp/tmpxeex0wv5.swift:7:28: error: cannot convert\
    \ value of type '(String) -> Bool' to expected argument type '(String.SubSequence,\
    \ String.SubSequence) throws -> Bool' (aka '(Substring, Substring) throws -> Bool')\n\
    \    numbers_array.sort(by: { (number: String) -> Bool in\n                  \
    \         ^\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters()\n    numbers_array.sort()\n    return String(numbers_array)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpem3dq2n6.swift:6:33: error: cannot call value of non-function type\
    \ 'String'\n    var numbers_array = numbers.characters()\n                   \
    \             ^         ~~\n                                          \n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n    return numbers_array.joined(separator: \" \")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_a7639ny.swift:7:32: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n                            ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers\
    \ = numbers.split(\" \").map(String::init)\n    numbers.sortInPlace()\n    return\
    \ numbers.joined(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpnd_vt6ah.swift:6:49: error: expected expression in list of expressions\n\
    \    var numbers = numbers.split(\" \").map(String::init)\n                  \
    \                              ^\n/tmp/tmpnd_vt6ah.swift:6:50: error: consecutive\
    \ statements on a line must be separated by ';'\n    var numbers = numbers.split(\"\
    \ \").map(String::init)\n                                                 ^\n\
    \                                                 ;\n/tmp/tmpnd_vt6ah.swift:6:54:\
    \ error: initializers may only be declared within a type\n    var numbers = numbers.split(\"\
    \ \").map(String::init)\n                                                    \
    \ ^\n/tmp/tmpnd_vt6ah.swift:6:54: error: expected '(' for initializer parameters\n\
    \    var numbers = numbers.split(\" \").map(String::init)\n                  \
    \                                   ^\n/tmp/tmpnd_vt6ah.swift:6:27: error: no\
    \ exact matches in call to instance method 'split'\n    var numbers = numbers.split(\"\
    \ \").map(String::init)\n                          ^\n/tmp/tmpnd_vt6ah.swift:6:27:\
    \ note: found candidate with type '(String.Element, Int, Bool) -> [ArraySlice<String.Element>]'\
    \ (aka '(Character, Int, Bool) -> Array<ArraySlice<Character>>')\n    var numbers\
    \ = numbers.split(\" \").map(String::init)\n                          ^\n/tmp/tmpnd_vt6ah.swift:6:27:\
    \ note: found candidate with type '(String.Element, Int, Bool) -> [String.SubSequence]'\
    \ (aka '(Character, Int, Bool) -> Array<Substring>')\n    var numbers = numbers.split(\"\
    \ \").map(String::init)\n                          ^\n/tmp/tmpnd_vt6ah.swift:6:49:\
    \ error: missing argument for parameter #1 in call\n    var numbers = numbers.split(\"\
    \ \").map(String::init)\n                                                ^\n \
    \                                               <#(ArraySlice<String.Element>)\
    \ throws -> _#>\nSwift.Collection:2:28: note: 'map' declared here\n    @inlinable\
    \ public func map<T>(_ transform: (Self.Element) throws -> T) rethrows -> [T]\n\
    \                           ^\n/tmp/tmpnd_vt6ah.swift:6:27: error: generic parameter\
    \ 'T' could not be inferred\n    var numbers = n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters.split{$0 == \" \"}.map(String.init)\n    numbers_array.sort{$0\
    \ < $1}\n    return String(numbers_array)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp56uus8q2.swift:6:33: error: 'characters' is unavailable: Please\
    \ use String directly\n    var numbers_array = numbers.characters.split{$0 ==\
    \ \" \"}.map(String.init)\n                                ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp56uus8q2.swift:8:12: error: no exact\
    \ matches in call to initializer \n    return String(numbers_array)\n        \
    \   ^\nSwift.String:4:12: note: candidate requires that the types 'String' and\
    \ 'Character' be equivalent (requirement specified as 'S.Element' == 'Character')\n\
    \    public init<S>(_ characters: S) where S : Sequence, S.Element == Character\n\
    \           ^\nSwift.RangeReplaceableCollection:3:23: note: candidate requires\
    \ that the types 'String.Element' (aka 'Character') and 'String' be equivalent\
    \ (requirement specified as 'Self.Element' == 'S.Element')\n    @inlinable public\
    \ init<S>(_ elements: S) where S : Sequence, Self.Element == S.Element\n     \
    \                 ^\nSwift.String:2:12: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(describing:)')\n    public init<Subject>(describing instance:\
    \ Subject)\n           ^\nSwift.String:3:23: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(describing:)')\n    @inlinable public init<Subject>(describing\
    \ instance: Subject) where Subject : CustomStringConvertible\n               \
    \       ^\nSwift.String:6:12: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(reflecting:)')\n    public init<Subject>(reflecting subject: Subject)\n\
    \           ^\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(\" \").map(String.init)\n    numbers_array.sort(<)\n    return\
    \ numbers_array.joined(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpy_o0cl2w.swift:6:33: error: no exact matches in call to instance\
    \ method 'split'\n    var numbers_array = numbers.split(\" \").map(String.init)\n\
    \                                ^\nSwift.Sequence:2:40: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public\
    \ __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences:\
    \ Bool = true) -> [ArraySlice<Self.Element>]\n                               \
    \        ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [Self.SubSequence]\n                                       ^\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers\
    \ = numbers.split(\" \")\n    numbers.sort()\n    return strings.Join(numbers,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpxrv59lry.swift:6:27: error: no exact matches in call to instance\
    \ method 'split'\n    var numbers = numbers.split(\" \")\n                   \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n/tmp/tmpxrv59lry.swift:8:12: error:\
    \ cannot find 'strings' in scope\n    return strings.Join(numbers, \" \")\n  \
    \         ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters()\n    numbers_array.sort()\n    return String(numbers_array)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpem3dq2n6.swift:6:33: error: cannot call value of non-function type\
    \ 'String'\n    var numbers_array = numbers.characters()\n                   \
    \             ^         ~~\n                                          \n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters()\n    numbers_array.sortInPlace({ $0.compare($1) == .orderedAscending\
    \ })\n    return String(numbers_array)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmpv0r7cyrz.swift:6:33: error: cannot call value of non-function type\
    \ 'String'\n    var numbers_array = numbers.characters()\n                   \
    \             ^         ~~\n                                          \n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters.split(separator: \" \").map(String.init)\n    numbers_array.sort(by:\
    \ { (number1, number2) -> Bool in\n        let number1_int = Int(number1)\n  \
    \      let number2_int = Int(number2)\n        return number1_int < number2_int\n\
    \    })\n    return String(numbers_array)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmppwh0ir2m.swift:6:33: error: 'characters' is unavailable: Please\
    \ use String directly\n    var numbers_array = numbers.characters.split(separator:\
    \ \" \").map(String.init)\n                                ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmppwh0ir2m.swift:10:16: error: value of\
    \ optional type 'Int?' must be unwrapped to a value of type 'Int'\n        return\
    \ number1_int < number2_int\n               ^\n/tmp/tmppwh0ir2m.swift:10:16: note:\
    \ coalesce using '??' to provide a default when the optional value contains 'nil'\n\
    \        return number1_int < number2_int\n               ^\n                \
    \           ?? <#default value#>\n/tmp/tmppwh0ir2m.swift:10:16: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        return\
    \ number1_int < number2_int\n               ^\n                          !\n/tmp/tmppwh0ir2m.swift:10:30:\
    \ error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n\
    \        return number1_int < number2_int\n                             ^\n/tmp/tmppwh0ir2m.swift:10:30:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        return number1_int < number2_int\n                          \
    \   ^\n                                         ?? <#default value#>\n/tmp/tmppwh0ir2m.swift:10:30:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        return number1_int < number2_int\n                          \
    \   ^\n                                        !\n/tmp/tmppwh0ir2m.swift:12:12:\
    \ error: no exact matches in call to initializer \n    return String(numbers_array)\n\
    \           ^\nSwift.String:4:12: note: candidate requires that the types 'String'\
    \ and 'Character' be equivalent (requirement specified as 'S.Element' == 'Character')\n\
    \    public init<S>(_ characters: S) where S : Sequence, S.Element == Character\n\
    \           ^\nSwift.RangeReplaceableCollection:3:23: note: candidate requires\
    \ that the types 'Str"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters()\n    numbers_array.sortInPlace()\n    return String(numbers_array)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmppvtxopst.swift:6:33: error: cannot call value of non-function type\
    \ 'String'\n    var numbers_array = numbers.characters()\n                   \
    \             ^         ~~\n                                          \n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters.split(separator: \" \")\n    numbers_array.sort { $0.compare($1)\
    \ == .orderedAscending }\n    return String(numbers_array)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpt5k3z2mh.swift:6:33: error: 'characters' is unavailable: Please\
    \ use String directly\n    var numbers_array = numbers.characters.split(separator:\
    \ \" \")\n                                ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpt5k3z2mh.swift:7:29: error: value of type\
    \ 'String.SubSequence' (aka 'Substring') has no member 'compare'\n    numbers_array.sort\
    \ { $0.compare($1) == .orderedAscending }\n                         ~~ ^~~~~~~\n\
    /tmp/tmpt5k3z2mh.swift:8:12: error: no exact matches in call to initializer \n\
    \    return String(numbers_array)\n           ^\nSwift.String:4:12: note: candidate\
    \ requires that the types 'String.SubSequence' (aka 'Substring') and 'Character'\
    \ be equivalent (requirement specified as 'S.Element' == 'Character')\n    public\
    \ init<S>(_ characters: S) where S : Sequence, S.Element == Character\n      \
    \     ^\nSwift.RangeReplaceableCollection:3:23: note: candidate requires that\
    \ the types 'String.Element' (aka 'Character') and 'String.SubSequence' (aka 'Substring')\
    \ be equivalent (requirement specified as 'Self.Element' == 'S.Element')\n   \
    \ @inlinable public init<S>(_ elements: S) where S : Sequence, Self.Element ==\
    \ S.Element\n                      ^\nSwift.String:2:12: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(describing:)')\n    public init<Subject>(describing\
    \ instance: Subject)\n           ^\nSwift.String:3:23: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(describing:)')\n    @inlinable public\
    \ init<Subject>(describing instance: Subject) where Subject : CustomStringConvertible\n\
    \                      ^\nSwift.String:6:12: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(reflecting:)')\n    public init<Subject>(reflecting\
    \ subject: Subject)\n           ^\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters()\n    numbers_array.sort()\n    return String(numbers_array)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpem3dq2n6.swift:6:33: error: cannot call value of non-function type\
    \ 'String'\n    var numbers_array = numbers.characters()\n                   \
    \             ^         ~~\n                                          \n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters()\n    numbers_array.sort()\n    return String(numbers_array)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpem3dq2n6.swift:6:33: error: cannot call value of non-function type\
    \ 'String'\n    var numbers_array = numbers.characters()\n                   \
    \             ^         ~~\n                                          \n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort(by: { (number1, number2)\
    \ -> Bool in\n        return Int(number1) < Int(number2)\n    })\n    return numbers_array.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpmhtaogbk.swift:8:16: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        return Int(number1) < Int(number2)\n\
    \               ^\n/tmp/tmpmhtaogbk.swift:8:16: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n        return Int(number1)\
    \ < Int(number2)\n               ^\n                            ?? <#default value#>\n\
    /tmp/tmpmhtaogbk.swift:8:16: note: force-unwrap using '!' to abort execution if\
    \ the optional value contains 'nil'\n        return Int(number1) < Int(number2)\n\
    \               ^\n                           !\n/tmp/tmpmhtaogbk.swift:8:31:\
    \ error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n\
    \        return Int(number1) < Int(number2)\n                              ^\n\
    /tmp/tmpmhtaogbk.swift:8:31: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n        return Int(number1) < Int(number2)\n\
    \                              ^\n                                           ??\
    \ <#default value#>\n/tmp/tmpmhtaogbk.swift:8:31: note: force-unwrap using '!'\
    \ to abort execution if the optional value contains 'nil'\n        return Int(number1)\
    \ < Int(number2)\n                              ^\n                          \
    \                !\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    var numbers_sorted = [String]()\n   \
    \ for number in numbers_array {\n        if number == \"zero\" {\n           \
    \ numbers_sorted.append(\"0\")\n        } else if number == \"one\" {\n      \
    \      numbers_sorted.append(\"1\")\n        } else if number == \"two\" {\n \
    \           numbers_sorted.append(\"2\")\n        } else if number == \"three\"\
    \ {\n            numbers_sorted.append(\"3\")\n        } else if number == \"\
    four\" {\n            numbers_sorted.append(\"4\")\n        } else if number ==\
    \ \"five\" {\n            numbers_sorted.append(\"5\")\n        } else if number\
    \ == \"six\" {\n            numbers_sorted.append(\"6\")\n        } else if number\
    \ == \"seven\" {\n            numbers_sorted.append(\"7\")\n        } else if\
    \ number == \"eight\" {\n            numbers_sorted.append(\"8\")\n        } else\
    \ if number == \"nine\" {\n            numbers_sorted.append(\"9\")\n        }\
    \ else {\n            numbers_sorted.append(number)\n        }\n    }\n    return\
    \ numbers_sorted.sorted().joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpfkbmltkt.swift:30:28: error: no exact matches in call to instance\
    \ method 'append'\n            numbers_sorted.append(number)\n               \
    \            ^\nSwift.Array:6:37: note: candidate expects value of type 'String'\
    \ for parameter #1 (got 'String.SubSequence' (aka 'Substring'))\n    @inlinable\
    \ public mutating func append(_ newElement: __owned Element)\n               \
    \                     ^\nSwift.RangeReplaceableCollection:4:37: note: candidate\
    \ expects value of type 'String' for parameter #1 (got 'String.SubSequence' (aka\
    \ 'Substring'))\n    @inlinable public mutating func append(_ newElement: __owned\
    \ Self.Element)\n                                    ^\n/tmp/tmpfkbmltkt.swift:30:28:\
    \ note: found candidate with type '(__owned String.SubSequence) -> ()' (aka '(__owned\
    \ Substring) -> ()')\n            numbers_sorted.append(number)\n            \
    \               ^\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters\n    numbers_array.sort()\n    return String(numbers_array)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpbidws3wj.swift:6:33: error: 'characters' is unavailable: Please\
    \ use String directly\n    var numbers_array = numbers.characters\n          \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpbidws3wj.swift:7:19: error: value of type 'String' has no member\
    \ 'sort'\n    numbers_array.sort()\n    ~~~~~~~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(\" \").map{Int($0)!}\n    numbers_array.sort()\n    return numbers_array.map{String($0)}.joined(\"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp8bewg893.swift:6:39: error: missing argument label 'separator:'\
    \ in call\n    var numbers_array = numbers.split(\" \").map{Int($0)!}\n      \
    \                                ^\n                                      separator:\
    \ \n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n    return numbers_array.joined(separator: \" \")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_a7639ny.swift:7:32: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n                            ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters.split{$0 == \" \"}.map(String.init)\n    numbers_array.sort{$0.compare($1)\
    \ == .orderedAscending}\n    return numbers_array.joinWithSeparator(\" \")\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp2vsdpcla.swift:6:33: error: 'characters' is unavailable: Please\
    \ use String directly\n    var numbers_array = numbers.characters.split{$0 ==\
    \ \" \"}.map(String.init)\n                                ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp2vsdpcla.swift:7:27: error: value of\
    \ type 'String' has no member 'compare'\n    numbers_array.sort{$0.compare($1)\
    \ == .orderedAscending}\n                       ~~ ^~~~~~~\n/tmp/tmp2vsdpcla.swift:8:26:\
    \ error: value of type '[String]' has no member 'joinWithSeparator'\n    return\
    \ numbers_array.joinWithSeparator(\" \")\n           ~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n    return numbers_array.joined(separator: \" \")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_a7639ny.swift:7:32: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n                            ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n    return numbers_array.joined(separator: \" \")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_a7639ny.swift:7:32: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n                            ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n    return numbers_array.joined(separator: \" \")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_a7639ny.swift:7:32: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n                            ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters.split{$0 == \" \"}.map(String.init)\n    numbers_array.sort{$0\
    \ < $1}\n    return numbers_array.joinWithSeparator(\" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp3wwr50pd.swift:6:33: error: 'characters' is unavailable: Please\
    \ use String directly\n    var numbers_array = numbers.characters.split{$0 ==\
    \ \" \"}.map(String.init)\n                                ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp3wwr50pd.swift:8:26: error: value of\
    \ type '[String]' has no member 'joinWithSeparator'\n    return numbers_array.joinWithSeparator(\"\
    \ \")\n           ~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(\" \").map{Int($0)!}\n    numbers_array.sort()\n    return numbers_array.map{String($0)}.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpf_qwo2bx.swift:6:39: error: missing argument label 'separator:'\
    \ in call\n    var numbers_array = numbers.split(\" \").map{Int($0)!}\n      \
    \                                ^\n                                      separator:\
    \ \n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters()\n    numbers_array.sortInPlace({ $0.compare($1) == .orderedAscending\
    \ })\n    return String(numbers_array)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmpv0r7cyrz.swift:6:33: error: cannot call value of non-function type\
    \ 'String'\n    var numbers_array = numbers.characters()\n                   \
    \             ^         ~~\n                                          \n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters()\n    numbers_array.sort { $0 < $1 }\n    return String(numbers_array)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmptbzsb99s.swift:6:33: error: cannot call value of non-function type\
    \ 'String'\n    var numbers_array = numbers.characters()\n                   \
    \             ^         ~~\n                                          \n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(\" \").map{Int($0)!}\n    numbers_array.sort()\n    return numbers_array.map{String($0)}.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpf_qwo2bx.swift:6:39: error: missing argument label 'separator:'\
    \ in call\n    var numbers_array = numbers.split(\" \").map{Int($0)!}\n      \
    \                                ^\n                                      separator:\
    \ \n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters\n    numbers_array.sort()\n    return String(numbers_array)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpbidws3wj.swift:6:33: error: 'characters' is unavailable: Please\
    \ use String directly\n    var numbers_array = numbers.characters\n          \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpbidws3wj.swift:7:19: error: value of type 'String' has no member\
    \ 'sort'\n    numbers_array.sort()\n    ~~~~~~~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n    return numbers_array.joined(separator: \" \")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_a7639ny.swift:7:32: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n                            ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters\n    numbers_array.sort(<)\n    return String(numbers_array)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_k68ulg4.swift:6:33: error: 'characters' is unavailable: Please\
    \ use String directly\n    var numbers_array = numbers.characters\n          \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp_k68ulg4.swift:7:19: error: value of type 'String' has no member\
    \ 'sort'\n    numbers_array.sort(<)\n    ~~~~~~~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers\
    \ = numbers.split(\" \").map{ Int($0) }\n    numbers.sort()\n    return numbers.map{\
    \ String($0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpw0f7_mns.swift:6:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").map{ Int($0) }\n           \
    \                     ^\n                                separator: \n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(\" \").map(String::init)\n    numbers_array.sort()\n    return\
    \ numbers_array.joined(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpztolar0g.swift:6:55: error: expected expression in list of expressions\n\
    \    var numbers_array = numbers.split(\" \").map(String::init)\n            \
    \                                          ^\n/tmp/tmpztolar0g.swift:6:56: error:\
    \ consecutive statements on a line must be separated by ';'\n    var numbers_array\
    \ = numbers.split(\" \").map(String::init)\n                                 \
    \                      ^\n                                                   \
    \    ;\n/tmp/tmpztolar0g.swift:6:60: error: initializers may only be declared\
    \ within a type\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                                           ^\n/tmp/tmpztolar0g.swift:6:60:\
    \ error: expected '(' for initializer parameters\n    var numbers_array = numbers.split(\"\
    \ \").map(String::init)\n                                                    \
    \       ^\n/tmp/tmpztolar0g.swift:6:33: error: no exact matches in call to instance\
    \ method 'split'\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                ^\n/tmp/tmpztolar0g.swift:6:33: note: found candidate\
    \ with type '(String.Element, Int, Bool) -> [ArraySlice<String.Element>]' (aka\
    \ '(Character, Int, Bool) -> Array<ArraySlice<Character>>')\n    var numbers_array\
    \ = numbers.split(\" \").map(String::init)\n                                ^\n\
    /tmp/tmpztolar0g.swift:6:33: note: found candidate with type '(String.Element,\
    \ Int, Bool) -> [String.SubSequence]' (aka '(Character, Int, Bool) -> Array<Substring>')\n\
    \    var numbers_array = numbers.split(\" \").map(String::init)\n            \
    \                    ^\n/tmp/tmpztolar0g.swift:6:55: error: missing argument for\
    \ parameter #1 in call\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                                      ^\n                   \
    \                                   <#(ArraySlice<String.Element>) throws -> _#>\n\
    Swift.Collection:2:28: note: 'map' declared here\n    @inlinable public func map<T>(_\
    \ transform: (Self.Element) throws -> T) rethrows -> [T]\n                    "
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters()\n    numbers_array.sort()\n    return String(numbers_array)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpem3dq2n6.swift:6:33: error: cannot call value of non-function type\
    \ 'String'\n    var numbers_array = numbers.characters()\n                   \
    \             ^         ~~\n                                          \n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n    return numbers_array.joined(separator: \" \")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_a7639ny.swift:7:32: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n                            ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters.split{$0 == \" \"}.map(String.init)\n    numbers_array.sort{$0.compare($1)\
    \ == .orderedAscending}\n    return numbers_array.joinWithSeparator(\" \")\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp2vsdpcla.swift:6:33: error: 'characters' is unavailable: Please\
    \ use String directly\n    var numbers_array = numbers.characters.split{$0 ==\
    \ \" \"}.map(String.init)\n                                ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp2vsdpcla.swift:7:27: error: value of\
    \ type 'String' has no member 'compare'\n    numbers_array.sort{$0.compare($1)\
    \ == .orderedAscending}\n                       ~~ ^~~~~~~\n/tmp/tmp2vsdpcla.swift:8:26:\
    \ error: value of type '[String]' has no member 'joinWithSeparator'\n    return\
    \ numbers_array.joinWithSeparator(\" \")\n           ~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n    return numbers_array.joined(separator: \" \")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_a7639ny.swift:7:32: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n                            ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort()\n    return numbers_array.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpv6sshhi2/tmpv6sshhi2.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4143a56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b414374db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b414374d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b414374c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv6sshhi2                        0x00005601e17bd952 <unavailable> + 6482

    5    libc.so.6                          0x00002b4143c42460 __libc_start_main +
    245

    6    tmpv6sshhi2                        0x00005601e17bd389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters.split(separator: \" \")\n    numbers_array.sort { $0.compare($1)\
    \ == .orderedAscending }\n    return String(numbers_array)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpt5k3z2mh.swift:6:33: error: 'characters' is unavailable: Please\
    \ use String directly\n    var numbers_array = numbers.characters.split(separator:\
    \ \" \")\n                                ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpt5k3z2mh.swift:7:29: error: value of type\
    \ 'String.SubSequence' (aka 'Substring') has no member 'compare'\n    numbers_array.sort\
    \ { $0.compare($1) == .orderedAscending }\n                         ~~ ^~~~~~~\n\
    /tmp/tmpt5k3z2mh.swift:8:12: error: no exact matches in call to initializer \n\
    \    return String(numbers_array)\n           ^\nSwift.String:4:12: note: candidate\
    \ requires that the types 'String.SubSequence' (aka 'Substring') and 'Character'\
    \ be equivalent (requirement specified as 'S.Element' == 'Character')\n    public\
    \ init<S>(_ characters: S) where S : Sequence, S.Element == Character\n      \
    \     ^\nSwift.RangeReplaceableCollection:3:23: note: candidate requires that\
    \ the types 'String.Element' (aka 'Character') and 'String.SubSequence' (aka 'Substring')\
    \ be equivalent (requirement specified as 'Self.Element' == 'S.Element')\n   \
    \ @inlinable public init<S>(_ elements: S) where S : Sequence, Self.Element ==\
    \ S.Element\n                      ^\nSwift.String:2:12: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(describing:)')\n    public init<Subject>(describing\
    \ instance: Subject)\n           ^\nSwift.String:3:23: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(describing:)')\n    @inlinable public\
    \ init<Subject>(describing instance: Subject) where Subject : CustomStringConvertible\n\
    \                      ^\nSwift.String:6:12: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(reflecting:)')\n    public init<Subject>(reflecting\
    \ subject: Subject)\n           ^\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers\
    \ = numbers.characters\n    numbers.removeFirst()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmp1x4vo61g.swift:91:12: error: expected member name following '.'\n\
    \    numbers.\n           ^\n/tmp/tmp1x4vo61g.swift:6:27: error: 'characters'\
    \ is unavailable: Please use String directly\n    var numbers = numbers.characters\n\
    \                          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters\n    numbers_array.sort { $0 < $1 }\n    return String(numbers_array)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpjmui_5n8.swift:6:33: error: 'characters' is unavailable: Please\
    \ use String directly\n    var numbers_array = numbers.characters\n          \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpjmui_5n8.swift:7:19: error: value of type 'String' has no member\
    \ 'sort'\n    numbers_array.sort { $0 < $1 }\n    ~~~~~~~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    var numberList = strings.Split(numbers, \" \")\n    numberList = sort_numbers_helper(numberList)\n\
    \    return strings.Join(numberList, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpz46ga14h.swift:6:15: error: cannot find 'strings' in scope\n  \
    \  numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmpz46ga14h.swift:6:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmpz46ga14h.swift:7:22: error:\
    \ cannot find 'strings' in scope\n    var numberList = strings.Split(numbers,\
    \ \" \")\n                     ^~~~~~~\n/tmp/tmpz46ga14h.swift:8:18: error: cannot\
    \ find 'sort_numbers_helper' in scope\n    numberList = sort_numbers_helper(numberList)\n\
    \                 ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpz46ga14h.swift:9:12: error: cannot\
    \ find 'strings' in scope\n    return strings.Join(numberList, \" \")\n      \
    \     ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers\
    \ = numbers.split(\" \")\n    var sortedNumbers = \"\"\n    for number in numbers\
    \ {\n        if number == \"zero\" {\n            sortedNumbers += \"0\"\n   \
    \     } else if number == \"one\" {\n            sortedNumbers += \"1\"\n    \
    \    } else if number == \"two\" {\n            sortedNumbers += \"2\"\n     \
    \   } else if number == \"three\" {\n            sortedNumbers += \"3\"\n    \
    \    } else if number == \"four\" {\n            sortedNumbers += \"4\"\n    \
    \    } else if number == \"five\" {\n            sortedNumbers += \"5\"\n    \
    \    } else if number == \"six\" {\n            sortedNumbers += \"6\"\n     \
    \   } else if number == \"seven\" {\n            sortedNumbers += \"7\"\n    \
    \    } else if number == \"eight\" {\n            sortedNumbers += \"8\"\n   \
    \     } else if number == \"nine\" {\n            sortedNumbers += \"9\"\n   \
    \     } else {\n            sortedNumbers += number\n        }\n    }\n    return\
    \ sortedNumbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpad0orn8d.swift:6:27: error: no exact matches in call to instance\
    \ method 'split'\n    var numbers = numbers.split(\" \")\n                   \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n    return numbers_array.joined(separator: \" \")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_a7639ny.swift:7:32: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n                            ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers\
    \ = numbers.split(\" \").sorted()\n    return numbers.joinWithSeparator(\" \"\
    )\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpr1phsyyq.swift:6:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters.split{$0 == \" \"}.map(String.init)\n    numbers_array.sort{$0.compare($1)\
    \ == .orderedAscending}\n    return numbers_array.joinWithSeparator(\" \")\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp2vsdpcla.swift:6:33: error: 'characters' is unavailable: Please\
    \ use String directly\n    var numbers_array = numbers.characters.split{$0 ==\
    \ \" \"}.map(String.init)\n                                ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp2vsdpcla.swift:7:27: error: value of\
    \ type 'String' has no member 'compare'\n    numbers_array.sort{$0.compare($1)\
    \ == .orderedAscending}\n                       ~~ ^~~~~~~\n/tmp/tmp2vsdpcla.swift:8:26:\
    \ error: value of type '[String]' has no member 'joinWithSeparator'\n    return\
    \ numbers_array.joinWithSeparator(\" \")\n           ~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp55_yig0o.swift:49:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp55_yig0o.swift:48:33: note: to match this opening '('\n    numbers\
    \ = strings.TrimPrefix(number\n                                ^\n/tmp/tmp55_yig0o.swift:6:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmp55_yig0o.swift:6:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmp55_yig0o.swift:7:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n/tmp/tmp55_yig0o.swift:7:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmp55_yig0o.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmp55_yig0o.swift:8:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmp55_yig0o.swift:9:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmp55_yig0o.swift:9:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmp55_yig0o.swift:10:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmp55_yig0o.swift:10:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmp55_yig0o.swift:11:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmp55_yig0o.swift:11:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmp55_yig0o.swift:12:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tm"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters\n    numbers_array.sort()\n    return String(numbers_array)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpbidws3wj.swift:6:33: error: 'characters' is unavailable: Please\
    \ use String directly\n    var numbers_array = numbers.characters\n          \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpbidws3wj.swift:7:19: error: value of type 'String' has no member\
    \ 'sort'\n    numbers_array.sort()\n    ~~~~~~~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers\
    \ = numbers.split(separator: \" \")\n    numbers.sort { $0 < $1 }\n    return\
    \ numbers.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: Exception
  stderr: 'tmp_nskj8ux/tmp_nskj8ux.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a3b166c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a3ae5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a3ae5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a3ae5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_nskj8ux                        0x0000564597f89982 <unavailable> + 6530

    5    libc.so.6                          0x00002b8a3b352460 __libc_start_main +
    245

    6    tmp_nskj8ux                        0x0000564597f893b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters.split{$0 == \" \"}.map(String.init)\n    numbers_array.sort{$0\
    \ < $1}\n    return String(numbers_array)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp56uus8q2.swift:6:33: error: 'characters' is unavailable: Please\
    \ use String directly\n    var numbers_array = numbers.characters.split{$0 ==\
    \ \" \"}.map(String.init)\n                                ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp56uus8q2.swift:8:12: error: no exact\
    \ matches in call to initializer \n    return String(numbers_array)\n        \
    \   ^\nSwift.String:4:12: note: candidate requires that the types 'String' and\
    \ 'Character' be equivalent (requirement specified as 'S.Element' == 'Character')\n\
    \    public init<S>(_ characters: S) where S : Sequence, S.Element == Character\n\
    \           ^\nSwift.RangeReplaceableCollection:3:23: note: candidate requires\
    \ that the types 'String.Element' (aka 'Character') and 'String' be equivalent\
    \ (requirement specified as 'Self.Element' == 'S.Element')\n    @inlinable public\
    \ init<S>(_ elements: S) where S : Sequence, Self.Element == S.Element\n     \
    \                 ^\nSwift.String:2:12: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(describing:)')\n    public init<Subject>(describing instance:\
    \ Subject)\n           ^\nSwift.String:3:23: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(describing:)')\n    @inlinable public init<Subject>(describing\
    \ instance: Subject) where Subject : CustomStringConvertible\n               \
    \       ^\nSwift.String:6:12: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(reflecting:)')\n    public init<Subject>(reflecting subject: Subject)\n\
    \           ^\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters()\n    numbers_array.sort()\n    return String(numbers_array)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpem3dq2n6.swift:6:33: error: cannot call value of non-function type\
    \ 'String'\n    var numbers_array = numbers.characters()\n                   \
    \             ^         ~~\n                                          \n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters.split(separator: \" \")\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n    return String(numbers_array)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpv0hd172t.swift:6:33: error: 'characters' is unavailable: Please\
    \ use String directly\n    var numbers_array = numbers.characters.split(separator:\
    \ \" \")\n                                ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpv0hd172t.swift:7:32: error: value of type\
    \ 'String.SubSequence' (aka 'Substring') has no member 'compare'\n    numbers_array.sort(by:\
    \ {$0.compare($1) == .orderedAscending})\n                            ~~ ^~~~~~~\n\
    /tmp/tmpv0hd172t.swift:8:12: error: no exact matches in call to initializer \n\
    \    return String(numbers_array)\n           ^\nSwift.String:4:12: note: candidate\
    \ requires that the types 'String.SubSequence' (aka 'Substring') and 'Character'\
    \ be equivalent (requirement specified as 'S.Element' == 'Character')\n    public\
    \ init<S>(_ characters: S) where S : Sequence, S.Element == Character\n      \
    \     ^\nSwift.RangeReplaceableCollection:3:23: note: candidate requires that\
    \ the types 'String.Element' (aka 'Character') and 'String.SubSequence' (aka 'Substring')\
    \ be equivalent (requirement specified as 'Self.Element' == 'S.Element')\n   \
    \ @inlinable public init<S>(_ elements: S) where S : Sequence, Self.Element ==\
    \ S.Element\n                      ^\nSwift.String:2:12: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(describing:)')\n    public init<Subject>(describing\
    \ instance: Subject)\n           ^\nSwift.String:3:23: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(describing:)')\n    @inlinable public\
    \ init<Subject>(describing instance: Subject) where Subject : CustomStringConvertible\n\
    \                      ^\nSwift.String:6:12: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(reflecting:)')\n    public init<Subject>(reflecting\
    \ subject: Subject)\n           ^\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters()\n    numbers_array.sortInPlace()\n    return String(numbers_array)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmppvtxopst.swift:6:33: error: cannot call value of non-function type\
    \ 'String'\n    var numbers_array = numbers.characters()\n                   \
    \             ^         ~~\n                                          \n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort(by: sort_numbers_compare)\n\
    \    return numbers_array.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpnnq3zc30.swift:7:28: error: cannot find 'sort_numbers_compare'\
    \ in scope\n    numbers_array.sort(by: sort_numbers_compare)\n               \
    \            ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnnq3zc30.swift:7:28: error: converting\
    \ non-escaping value to '(String.SubSequence, String.SubSequence) throws -> Bool'\
    \ (aka '(Substring, Substring) throws -> Bool') may allow it to escape\n    numbers_array.sort(by:\
    \ sort_numbers_compare)\n                           ^\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters()\n    numbers_array.sortInPlace(&sort_numbers_comparator)\n\
    \    return String(numbers_array)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpun99mo8n.swift:6:33: error: cannot call value of non-function type\
    \ 'String'\n    var numbers_array = numbers.characters()\n                   \
    \             ^         ~~\n                                          \n/tmp/tmpun99mo8n.swift:7:32:\
    \ error: cannot find 'sort_numbers_comparator' in scope\n    numbers_array.sortInPlace(&sort_numbers_comparator)\n\
    \                               ^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters()\n    numbers_array.sortInPlace()\n    return String(numbers_array)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmppvtxopst.swift:6:33: error: cannot call value of non-function type\
    \ 'String'\n    var numbers_array = numbers.characters()\n                   \
    \             ^         ~~\n                                          \n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n    return numbers_array.joined(separator: \" \")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_a7639ny.swift:7:32: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n                            ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers\
    \ = numbers.characters\n    numbers.removeFirst()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.removeLast()\n    numbers.removeLast()\n\
    \    numbers.removeLast()\n    numbers.\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmp1x4vo61g.swift:91:12: error: expected member name following '.'\n\
    \    numbers.\n           ^\n/tmp/tmp1x4vo61g.swift:6:27: error: 'characters'\
    \ is unavailable: Please use String directly\n    var numbers = numbers.characters\n\
    \                          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    var sorted_numbers = \"\"\n    for number\
    \ in numbers_array {\n        sorted_numbers += String(numbers_array.index(of:\
    \ number!)!)\n    }\n    return sorted_numbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpd773f7f6.swift:9:64: error: cannot force unwrap value of non-optional\
    \ type 'String.SubSequence' (aka 'Substring')\n        sorted_numbers += String(numbers_array.index(of:\
    \ number!)!)\n                                                         ~~~~~~^\n\
    \                                                               \n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort { $0.compare($1) ==\
    \ .orderedAscending }\n    return numbers_array.joined(separator: \" \")\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpdls_unls.swift:7:29: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    numbers_array.sort { $0.compare($1)\
    \ == .orderedAscending }\n                         ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(\" \").map{Int($0)!}\n    numbers_array.sort()\n    return numbers.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines).joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmphus00gc_.swift:6:39: error: missing argument label 'separator:'\
    \ in call\n    var numbers_array = numbers.split(\" \").map{Int($0)!}\n      \
    \                                ^\n                                      separator:\
    \ \n/tmp/tmphus00gc_.swift:8:43: error: cannot find 'CharacterSet' in scope\n\
    \    return numbers.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines).joined(separator:\
    \ \" \")\n                                          ^~~~~~~~~~~~\n/tmp/tmphus00gc_.swift:8:20:\
    \ error: value of type 'String' has no member 'trimmingCharacters'\n    return\
    \ numbers.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines).joined(separator:\
    \ \" \")\n           ~~~~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort { $0 < $1 }\n    return\
    \ numbers_array.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: Exception
  stderr: 'tmpmemj_ssl/tmpmemj_ssl.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af53c1f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af53bee9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af53bee9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af53bee87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmemj_ssl                        0x00005578ff3f8982 <unavailable> + 6530

    5    libc.so.6                          0x00002af53c3de460 __libc_start_main +
    245

    6    tmpmemj_ssl                        0x00005578ff3f83b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers\
    \ = numbers.split(separator: \" \")\n    numbers.sort { $0.compare($1) == .orderedAscending\
    \ }\n    return numbers.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpu4ub4izx.swift:7:23: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    numbers.sort { $0.compare($1)\
    \ == .orderedAscending }\n                   ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort { $0.compare($1) ==\
    \ .orderedAscending }\n    return numbers_array.joined(separator: \" \")\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpdls_unls.swift:7:29: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    numbers_array.sort { $0.compare($1)\
    \ == .orderedAscending }\n                         ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters().map({ String($0) })\n    numbers_array.sort()\n    return\
    \ String(numbers_array)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpya_31q7v.swift:6:33: error: cannot call value of non-function type\
    \ 'String'\n    var numbers_array = numbers.characters().map({ String($0) })\n\
    \                                ^         ~~\n                              \
    \            \n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters().map({ String($0) })\n    numbers_array.sort()\n    return\
    \ String(numbers_array)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpya_31q7v.swift:6:33: error: cannot call value of non-function type\
    \ 'String'\n    var numbers_array = numbers.characters().map({ String($0) })\n\
    \                                ^         ~~\n                              \
    \            \n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters()\n    numbers_array.sortInPlace({ $0 < $1 })\n    return\
    \ String(numbers_array)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp8nzz_5jf.swift:6:33: error: cannot call value of non-function type\
    \ 'String'\n    var numbers_array = numbers.characters()\n                   \
    \             ^         ~~\n                                          \n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters()\n    numbers_array.sort()\n    return String(numbers_array)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpem3dq2n6.swift:6:33: error: cannot call value of non-function type\
    \ 'String'\n    var numbers_array = numbers.characters()\n                   \
    \             ^         ~~\n                                          \n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort { $0.compare($1) ==\
    \ .orderedAscending }\n    return numbers_array.joined(separator: \" \")\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpdls_unls.swift:7:29: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    numbers_array.sort { $0.compare($1)\
    \ == .orderedAscending }\n                         ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort(by: >)\n    return\
    \ numbers_array.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: Exception
  stderr: 'tmp84zdr2nf/tmp84zdr2nf.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afbdab31c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afbda828b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afbda828988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afbda8277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84zdr2nf                        0x000055745a5609c2 <unavailable> + 6594

    5    libc.so.6                          0x00002afbdad1d460 __libc_start_main +
    245

    6    tmp84zdr2nf                        0x000055745a5603f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n    return numbers_array.joined(separator: \" \")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_a7639ny.swift:7:32: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n                            ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \"0\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n    numbers = strings.TrimSuffix(numbers, \"2\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n    numbers = strings.TrimSuffix(numbers, \"4\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n    numbers = strings.TrimSuffix(numbers, \"6\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n    numbers = strings.TrimSuffix(numbers, \"8\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n    numbers = strings.TrimSuffix(numbers, \"10\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"11\")\n    numbers = strings.TrimSuffix(numbers, \"12\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"13\")\n    numbers = strings.TrimSuffix(numbers, \"14\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"15\")\n    numbers = strings.TrimSuffix(numbers, \"16\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"17\")\n    numbers = strings.TrimSuffix(numbers, \"18\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"19\")\n    numbers = strings.TrimSuffix(numbers, \"20\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"21\")\n    numbers = strings.TrimSuffix(numbers, \"22\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"23\")\n    numbers = strings.TrimSuffix(numbers, \"24\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"25\")\n    numbers = strings.TrimSuffix(numbers, \"26\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"27\")\n    numbers = strings.TrimSuffix(numbers, \"28\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"29\")\n    numbers = strings.TrimSuffix(numbers, \"30\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"31\")\n    numbers = strings.TrimSuffix(numbers, \"32\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"33\")\n    numbers = strings.TrimSuffix(numbers, \"34\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"35\")\n    numbers = strings.TrimSuffix(numbers, \"36\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"37\")\n    numbers = strings.TrimSuffix(numbers, \"38\")\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp4afyu6a2.swift:6:15: error: cannot find 'strings' in scope\n  \
    \  numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmp4afyu6a2.swift:6:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmp4afyu6a2.swift:7:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers, \"\
    0\")\n              ^~~~~~~\n/tmp/tmp4afyu6a2.swift:7:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n    ^~~~~~~\n/tmp/tmp4afyu6a2.swift:8:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"1\")\n              ^~~~~~~\n\
    /tmp/tmp4afyu6a2.swift:8:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"1\")\n    ^~~~~~~\n/tmp/tmp4afyu6a2.swift:9:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"2\")\n              ^~~~~~~\n/tmp/tmp4afyu6a2.swift:9:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"2\")\n    ^~~~~~~\n/tmp/tmp4afyu6a2.swift:10:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"3\")\n              ^~~~~~~\n\
    /tmp/tmp4afyu6a2.swift:10:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"3\")\n    ^~~~~~~\n/tmp/tmp4afyu6a2.swift:11:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"4\")\n              ^~~~~~~\n/tmp/tmp4afyu6a2.swift:11:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"4\")\n    ^~~~~~~\n/tmp/tmp4afyu6a2.swift:12:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"5\")\n              ^~~~~~~\n\
    /tmp/tmp4afyu6a2.swift:12:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"5\")\n    ^~~~~~~\n/tmp/tmp4afyu6a2.swift:13:15:\
    \ error: cannot find 'strings' in scop"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort(by: { (number1, number2)\
    \ -> Bool in\n        return Int(number1) < Int(number2)\n    })\n    return numbers_array.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpmhtaogbk.swift:8:16: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        return Int(number1) < Int(number2)\n\
    \               ^\n/tmp/tmpmhtaogbk.swift:8:16: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n        return Int(number1)\
    \ < Int(number2)\n               ^\n                            ?? <#default value#>\n\
    /tmp/tmpmhtaogbk.swift:8:16: note: force-unwrap using '!' to abort execution if\
    \ the optional value contains 'nil'\n        return Int(number1) < Int(number2)\n\
    \               ^\n                           !\n/tmp/tmpmhtaogbk.swift:8:31:\
    \ error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n\
    \        return Int(number1) < Int(number2)\n                              ^\n\
    /tmp/tmpmhtaogbk.swift:8:31: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n        return Int(number1) < Int(number2)\n\
    \                              ^\n                                           ??\
    \ <#default value#>\n/tmp/tmpmhtaogbk.swift:8:31: note: force-unwrap using '!'\
    \ to abort execution if the optional value contains 'nil'\n        return Int(number1)\
    \ < Int(number2)\n                              ^\n                          \
    \                !\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort { $0.compare($1) ==\
    \ .orderedAscending }\n    return numbers_array.joined(separator: \" \")\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpdls_unls.swift:7:29: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    numbers_array.sort { $0.compare($1)\
    \ == .orderedAscending }\n                         ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort()\n    return numbers_array.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpv6sshhi2/tmpv6sshhi2.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4143a56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b414374db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b414374d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b414374c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv6sshhi2                        0x00005601e17bd952 <unavailable> + 6482

    5    libc.so.6                          0x00002b4143c42460 __libc_start_main +
    245

    6    tmpv6sshhi2                        0x00005601e17bd389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort { $0.compare($1) ==\
    \ .orderedAscending }\n    return numbers_array.joined(separator: \" \")\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpdls_unls.swift:7:29: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    numbers_array.sort { $0.compare($1)\
    \ == .orderedAscending }\n                         ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort { $0.compare($1) ==\
    \ .orderedAscending }\n    return numbers_array.joined(separator: \" \")\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpdls_unls.swift:7:29: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    numbers_array.sort { $0.compare($1)\
    \ == .orderedAscending }\n                         ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n    return numbers_array.joined(separator: \" \")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_a7639ny.swift:7:32: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n                            ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n    return numbers_array.joined(separator: \" \")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_a7639ny.swift:7:32: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n                            ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort(by: sort_numbers_compare)\n\
    \    return numbers_array.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpnnq3zc30.swift:7:28: error: cannot find 'sort_numbers_compare'\
    \ in scope\n    numbers_array.sort(by: sort_numbers_compare)\n               \
    \            ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnnq3zc30.swift:7:28: error: converting\
    \ non-escaping value to '(String.SubSequence, String.SubSequence) throws -> Bool'\
    \ (aka '(Substring, Substring) throws -> Bool') may allow it to escape\n    numbers_array.sort(by:\
    \ sort_numbers_compare)\n                           ^\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \"0\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n    numbers = strings.TrimSuffix(numbers, \"2\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n    numbers = strings.TrimSuffix(numbers, \"4\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n    numbers = strings.TrimSuffix(numbers, \"6\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n    numbers = strings.TrimSuffix(numbers, \"8\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n    numbers = strings.TrimSuffix(numbers, \"10\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"11\")\n    numbers = strings.TrimSuffix(numbers, \"12\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"13\")\n    numbers = strings.TrimSuffix(numbers, \"14\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"15\")\n    numbers = strings.TrimSuffix(numbers, \"16\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"17\")\n    numbers = strings.TrimSuffix(numbers, \"18\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"19\")\n    numbers = strings.TrimSuffix(numbers, \"20\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"21\")\n    numbers = strings.TrimSuffix(numbers, \"22\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"23\")\n    numbers = strings.TrimSuffix(numbers, \"24\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"25\")\n    numbers = strings.TrimSuffix(numbers, \"26\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"27\")\n    numbers = strings.TrimSuffix(numbers, \"28\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"29\")\n    numbers = strings.TrimSuffix(numbers, \"30\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"31\")\n    numbers = strings.TrimSuffix(numbers, \"32\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"33\")\n    numbers = strings.TrimSuffix(numbers, \"34\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"35\")\n    numbers = strings.TrimSuffix(numbers, \"36\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"37\")\n    numbers = strings.TrimSuffix(numbers, \"38\")\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp4afyu6a2.swift:6:15: error: cannot find 'strings' in scope\n  \
    \  numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmp4afyu6a2.swift:6:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmp4afyu6a2.swift:7:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers, \"\
    0\")\n              ^~~~~~~\n/tmp/tmp4afyu6a2.swift:7:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n    ^~~~~~~\n/tmp/tmp4afyu6a2.swift:8:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"1\")\n              ^~~~~~~\n\
    /tmp/tmp4afyu6a2.swift:8:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"1\")\n    ^~~~~~~\n/tmp/tmp4afyu6a2.swift:9:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"2\")\n              ^~~~~~~\n/tmp/tmp4afyu6a2.swift:9:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"2\")\n    ^~~~~~~\n/tmp/tmp4afyu6a2.swift:10:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"3\")\n              ^~~~~~~\n\
    /tmp/tmp4afyu6a2.swift:10:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"3\")\n    ^~~~~~~\n/tmp/tmp4afyu6a2.swift:11:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"4\")\n              ^~~~~~~\n/tmp/tmp4afyu6a2.swift:11:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"4\")\n    ^~~~~~~\n/tmp/tmp4afyu6a2.swift:12:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"5\")\n              ^~~~~~~\n\
    /tmp/tmp4afyu6a2.swift:12:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"5\")\n    ^~~~~~~\n/tmp/tmp4afyu6a2.swift:13:15:\
    \ error: cannot find 'strings' in scop"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort(by: { (num1, num2)\
    \ in\n        let num1_int = Int(num1)\n        let num2_int = Int(num2)\n   \
    \     if num1_int > num2_int {\n            return true\n        } else if num1_int\
    \ < num2_int {\n            return false\n        } else {\n            return\
    \ true\n        }\n    })\n    return numbers_array.joined(separator: \" \")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpnqbu21a_.swift:10:12: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        if num1_int > num2_int {\n  \
    \         ^\n/tmp/tmpnqbu21a_.swift:10:12: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n        if num1_int > num2_int\
    \ {\n           ^\n                    ?? <#default value#>\n/tmp/tmpnqbu21a_.swift:10:12:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        if num1_int > num2_int {\n           ^\n                   !\n\
    /tmp/tmpnqbu21a_.swift:10:23: error: value of optional type 'Int?' must be unwrapped\
    \ to a value of type 'Int'\n        if num1_int > num2_int {\n               \
    \       ^\n/tmp/tmpnqbu21a_.swift:10:23: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n        if num1_int > num2_int\
    \ {\n                      ^\n                               ?? <#default value#>\n\
    /tmp/tmpnqbu21a_.swift:10:23: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n        if num1_int > num2_int {\n   \
    \                   ^\n                              !\n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n    return numbers_array.joined(separator: \" \")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_a7639ny.swift:7:32: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n                            ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.characters()\n    numbers_array.sortInPlace()\n    return String(numbers_array)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmppvtxopst.swift:6:33: error: cannot call value of non-function type\
    \ 'String'\n    var numbers_array = numbers.characters()\n                   \
    \             ^         ~~\n                                          \n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort(by: { (number1, number2)\
    \ -> Bool in\n        let number1_int = Int(number1)\n        let number2_int\
    \ = Int(number2)\n        return number1_int < number2_int\n    })\n    return\
    \ numbers_array.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmptjqb7pyp.swift:10:16: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        return number1_int < number2_int\n\
    \               ^\n/tmp/tmptjqb7pyp.swift:10:16: note: coalesce using '??' to\
    \ provide a default when the optional value contains 'nil'\n        return number1_int\
    \ < number2_int\n               ^\n                           ?? <#default value#>\n\
    /tmp/tmptjqb7pyp.swift:10:16: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n        return number1_int < number2_int\n\
    \               ^\n                          !\n/tmp/tmptjqb7pyp.swift:10:30:\
    \ error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n\
    \        return number1_int < number2_int\n                             ^\n/tmp/tmptjqb7pyp.swift:10:30:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        return number1_int < number2_int\n                          \
    \   ^\n                                         ?? <#default value#>\n/tmp/tmptjqb7pyp.swift:10:30:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        return number1_int < number2_int\n                          \
    \   ^\n                                        !\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers\
    \ = numbers.split(\" \").map{ Int($0) }\n    numbers.sort()\n    return numbers.map{\
    \ String($0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpw0f7_mns.swift:6:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").map{ Int($0) }\n           \
    \                     ^\n                                separator: \n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort(by: { (number1, number2)\
    \ -> Bool in\n        let number1_int = Int(number1)\n        let number2_int\
    \ = Int(number2)\n        return number1_int < number2_int\n    })\n    return\
    \ numbers_array.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmptjqb7pyp.swift:10:16: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        return number1_int < number2_int\n\
    \               ^\n/tmp/tmptjqb7pyp.swift:10:16: note: coalesce using '??' to\
    \ provide a default when the optional value contains 'nil'\n        return number1_int\
    \ < number2_int\n               ^\n                           ?? <#default value#>\n\
    /tmp/tmptjqb7pyp.swift:10:16: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n        return number1_int < number2_int\n\
    \               ^\n                          !\n/tmp/tmptjqb7pyp.swift:10:30:\
    \ error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n\
    \        return number1_int < number2_int\n                             ^\n/tmp/tmptjqb7pyp.swift:10:30:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        return number1_int < number2_int\n                          \
    \   ^\n                                         ?? <#default value#>\n/tmp/tmptjqb7pyp.swift:10:30:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        return number1_int < number2_int\n                          \
    \   ^\n                                        !\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n    return numbers_array.joined(separator: \" \")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_a7639ny.swift:7:32: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'compare'\n    numbers_array.sort(by: {$0.compare($1)\
    \ == .orderedAscending})\n                            ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013666
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(separator: \" \")\n    numbers_array.sort { $0 < $1 }\n    return\
    \ numbers_array.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: Exception
  stderr: 'tmpmemj_ssl/tmpmemj_ssl.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af53c1f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af53bee9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af53bee9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af53bee87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmemj_ssl                        0x00005578ff3f8982 <unavailable> + 6530

    5    libc.so.6                          0x00002af53c3de460 __libc_start_main +
    245

    6    tmpmemj_ssl                        0x00005578ff3f83b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(\" \").map{ Int($0) }\n    numbers_array.sort{ $0 < $1 }\n \
    \   return numbers_array.map{ String($0) }.joined()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpb_cvillc.swift:6:39: error: missing argument label 'separator:'\
    \ in call\n    var numbers_array = numbers.split(\" \").map{ Int($0) }\n     \
    \                                 ^\n                                      separator:\
    \ \n"
  stdout: ''
  timestamp: 1660013666
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers_array\
    \ = numbers.split(\" \").map{String::fromCharCode($0)}\n    numbers_array.sort{$0.compare($1)\
    \ == .orderedAscending}\n    return numbers_array.joined()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp3bt5265y.swift:6:54: error: consecutive statements on a line must\
    \ be separated by ';'\n    var numbers_array = numbers.split(\" \").map{String::fromCharCode($0)}\n\
    \                                                     ^\n                    \
    \                                 ;\n/tmp/tmp3bt5265y.swift:6:54: error: expected\
    \ expression\n    var numbers_array = numbers.split(\" \").map{String::fromCharCode($0)}\n\
    \                                                     ^\n/tmp/tmp3bt5265y.swift:6:33:\
    \ error: no exact matches in call to instance method 'split'\n    var numbers_array\
    \ = numbers.split(\" \").map{String::fromCharCode($0)}\n                     \
    \           ^\n/tmp/tmp3bt5265y.swift:6:33: note: candidate has partially matching\
    \ parameter list (separator: String.Element, maxSplits: Int, omittingEmptySubsequences:\
    \ Bool)\n    var numbers_array = numbers.split(\" \").map{String::fromCharCode($0)}\n\
    \                                ^\n/tmp/tmp3bt5265y.swift:6:33: note: candidate\
    \ has partially matching parameter list (separator: String.Element, maxSplits:\
    \ Int, omittingEmptySubsequences: Bool)\n    var numbers_array = numbers.split(\"\
    \ \").map{String::fromCharCode($0)}\n                                ^\n/tmp/tmp3bt5265y.swift:6:47:\
    \ error: contextual type for closure argument list expects 1 argument, which cannot\
    \ be implicitly ignored\n    var numbers_array = numbers.split(\" \").map{String::fromCharCode($0)}\n\
    \                                              ^\n                           \
    \                    _ in \n"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers\
    \ = numbers.lowercased()\n    numbers = numbers.removeFirst()\n    numbers = numbers.removeLast()\n\
    \    numbers = numbers.removeFirst()\n    numbers = numbers.removeLast()\n   \
    \ numbers = numbers.removeFirst()\n    numbers = numbers.removeLast()\n    numbers\
    \ = numbers.removeFirst()\n    numbers = numbers.removeLast()\n    numbers = numbers.removeFirst()\n\
    \    numbers = numbers.removeLast()\n    numbers = numbers.removeFirst()\n   \
    \ numbers = numbers.removeLast()\n    numbers = numbers.removeFirst()\n    numbers\
    \ = numbers.removeLast()\n    numbers = numbers.removeFirst()\n    numbers = numbers.removeLast()\n\
    \    numbers = numbers.removeFirst()\n    numbers = numbers.removeLast()\n   \
    \ numbers = numbers.removeFirst()\n    numbers = numbers.removeLast()\n    numbers\
    \ = numbers.removeFirst()\n    numbers = numbers.removeLast()\n    numbers = numbers.removeFirst()\n\
    \    numbers = numbers.removeLast()\n    numbers = numbers.removeFirst()\n   \
    \ numbers = numbers.removeLast()\n    numbers = numbers.removeFirst()\n    numbers\
    \ = numbers.removeLast()\n    numbers = numbers.removeFirst()\n    numbers = numbers.removeLast()\n\
    \    numbers = numbers.removeFirst()\n    numbers = numbers.removeLast()\n   \
    \ numbers = numbers.removeFirst()\n    numbers = numbers.removeLast()\n    numbers\
    \ = numbers.removeFirst()\n    numbers = numbers.removeLast()\n    numbers = numbers.removeFirst()\n\
    \    numbers = numbers.removeLast()\n    numbers = numbers.removeFirst()\n   \
    \ numbers = numbers.removeLast()\n    numbers = numbers.removeFirst()\n    numbers\
    \ = numbers.removeLast()\n    numbers = numbers.removeFirst()\n    numbers = numbers.removeLast()\n\
    \    numbers = numbers.removeFirst()\n    numbers = numbers.removeLast()\n   \
    \ numbers = numbers.removeFirst()\n    numbers = numbers.removeLast()\n    numbers\
    \ = numbers.removeFirst()\n    numbers = numbers.removeLast()\n    numbers = numbers.removeFirst()\n\
    \    numbers = numbers.removeLast()\n    numbers = numbers.removeFirst()\n   \
    \ numbers = numbers.removeLast()\n    numbers = numbers.removeFirst()\n    numbers\
    \ = numbers.removeLast()\n    numbers = numbers.removeFirst()\n    numbers = numbers.removeLast()\n\
    \    numbers = numbers.removeFirst()\n    numbers = numbers.removeLast()\n   \
    \ numbers = numbers.removeFirst()\n    numbers = numbers.removeLast()\n    numbers\
    \ = numbers.removeFirst()\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpaiwrh7ck.swift:7:23: error: cannot assign value of type 'String.Element'\
    \ (aka 'Character') to type 'String'\n    numbers = numbers.removeFirst()\n  \
    \            ~~~~~~~~^~~~~~~~~~~~~\n/tmp/tmpaiwrh7ck.swift:8:23: error: cannot\
    \ assign value of type 'String.Element' (aka 'Character') to type 'String'\n \
    \   numbers = numbers.removeLast()\n              ~~~~~~~~^~~~~~~~~~~~\n/tmp/tmpaiwrh7ck.swift:9:23:\
    \ error: cannot assign value of type 'String.Element' (aka 'Character') to type\
    \ 'String'\n    numbers = numbers.removeFirst()\n              ~~~~~~~~^~~~~~~~~~~~~\n\
    /tmp/tmpaiwrh7ck.swift:10:23: error: cannot assign value of type 'String.Element'\
    \ (aka 'Character') to type 'String'\n    numbers = numbers.removeLast()\n   \
    \           ~~~~~~~~^~~~~~~~~~~~\n/tmp/tmpaiwrh7ck.swift:11:23: error: cannot\
    \ assign value of type 'String.Element' (aka 'Character') to type 'String'\n \
    \   numbers = numbers.removeFirst()\n              ~~~~~~~~^~~~~~~~~~~~~\n/tmp/tmpaiwrh7ck.swift:12:23:\
    \ error: cannot assign value of type 'String.Element' (aka 'Character') to type\
    \ 'String'\n    numbers = numbers.removeLast()\n              ~~~~~~~~^~~~~~~~~~~~\n\
    /tmp/tmpaiwrh7ck.swift:13:23: error: cannot assign value of type 'String.Element'\
    \ (aka 'Character') to type 'String'\n    numbers = numbers.removeFirst()\n  \
    \            ~~~~~~~~^~~~~~~~~~~~~\n/tmp/tmpaiwrh7ck.swift:14:23: error: cannot\
    \ assign value of type 'String.Element' (aka 'Character') to type 'String'\n \
    \   numbers = numbers.removeLast()\n              ~~~~~~~~^~~~~~~~~~~~\n/tmp/tmpaiwrh7ck.swift:15:23:\
    \ error: cannot assign value of type 'String.Element' (aka 'Character') to type\
    \ 'String'\n    numbers = numbers.removeFirst()\n              ~~~~~~~~^~~~~~~~~~~~~\n\
    /tmp/tmpaiwrh7ck.swift:16:23: error: cannot assign value of type 'String.Element'\
    \ (aka 'Character') to type 'String'\n    numbers = numbers.removeLast()\n   \
    \           ~~~~~~~~^~~~~~~~~~~~\n/tmp/tmpaiwrh7ck.swift:17:23: error: cannot\
    \ assign value of type 'String.Element' (aka 'Character') to type 'String'\n \
    \   numbers = numbers.removeFirst()\n              ~~~~"
  stdout: ''
  timestamp: 1660013667
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfunc sort_numbers(numbers: String) -> String {\n    var numbers\
    \ = numbers.split(\" \").map(String.init)\n    numbers.sort()\n    return numbers.join(\"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpekam33f9.swift:6:27: error: no exact matches in call to instance\
    \ method 'split'\n    var numbers = numbers.split(\" \").map(String.init)\n  \
    \                        ^\nSwift.Sequence:2:40: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(separator:)')\n    @inlinable public __consuming\
    \ func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences:\
    \ Bool = true) -> [ArraySlice<Self.Element>]\n                               \
    \        ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [Self.SubSequence]\n                                       ^\n"
  stdout: ''
  timestamp: 1660013667
