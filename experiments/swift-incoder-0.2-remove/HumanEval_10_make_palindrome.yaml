name: HumanEval_10_make_palindrome
language: swift
prompt: "\n/// Find the shortest palindrome that begins with a supplied string.\n\
  /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
  \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
  \ prefix that comes before the palindromic suffix.\nfunc make_palindrome(string:\
  \ String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(make_palindrome(string: \"\") == \"\")\n\
  assert(make_palindrome(string: \"x\") == \"x\")\nassert(make_palindrome(string:\
  \ \"xyz\") == \"xyzyx\")\nassert(make_palindrome(string: \"xyx\") == \"xyx\")\n\
  assert(make_palindrome(string: \"jerry\") == \"jerryrrej\")"
completions: ["    var stringToReturn = string\n    var longestPalindrome = String()\n\
    \    var longestPalindromeLength = String()\n    var longestPalindromePrefix =\
    \ String()\n    var longestPalindromeSuffix = String()\n    var longestPalindromePrefixLength\
    \ = String()\n    var longestPalindromeSuffixLength = String()\n    var longestPalindromePostfix\
    \ = String()\n    var longestPalindromePostfixLength = String()\n    var longestPalindromePostfixReversed\
    \ = String()\n    var longestPalindromePostfixReversedLength = String()\n    var\
    \ longestPalindromePostfixReversedReversed = String()\n    var longestPalindromePostfixReversedReversedLength\
    \ = String()\n    var longestPalindromePostfixReversedReversedReversed = String()\n\
    \    var longestPalindromePostfixReversedReversedReversedLength = String()\n \
    \   var longestPalindromePostfixReversedReversedReversedReversedReversed = String()\n\
    \    var longestPalindromePostfixReversedReversedReversedReversedReversedLength\
    \ = String()\n    var longestPalindromePostfixReversedReversedReversedReversedReversedReversed\
    \ = String()\n    var longestPalindromePostfixReversedReversedReversedReversedReversedReversedLength\
    \ = String()\n    var longestPalindromePostfixReversedReversedReversedReversedReversedReversedReversed\
    \ = String()\n    var longestPalindromePostfixReversedReversedReversedReversedReversedReversedReversedLength\
    \ = String()\n    var longestPalindromePostfixReversedReversedReversedReversedReversedReversedReversed\
    \ = String()\n    var longestPalindromePostfixReversedReversedReversedReversedReversedReversedReversedLength\
    \ = String()\n    var longestPalindromePostfixReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = String()\n    var longestPalindromePostfixReversedReversedReversedReversedReversedReversedReversedReversedLength\
    \ = String()\n    var longestPalindromePostfixReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = String()\n    var longestPalindromePostfixReversedReversedReversedReversedReversedReversedReversedReversedLength\
    \ = String()\n    var longestPalindromePostfixReversedReversedReversedReversedReversedReversedReversed",
  "    var longestPalindrome = \"\"\n    var longestPalindromeLength = 0\n    var\
    \ longestPalindromePrefix = \"\"\n    var longestPalindromeSuffix = \"\"\n   \
    \ for character in string {\n        if character == longestPalindrome[longestPalindromeLength]\
    \ {\n            longestPalindromeLength += 1\n        } else {\n            if\
    \ longestPalindromeLength > 0 {\n                longestPalindrome = longestPalindromePrefix\
    \ + longestPalindromeSuffix\n                longestPalindromeLength = 0\n   \
    \         }\n            longestPalindromePrefix = character\n            longestPalindromeSuffix\
    \ = character\n        }\n    }\n    if longestPalindromeLength > 0 {\n      \
    \  longestPalindrome = longestPalindromePrefix + longestPalindromeSuffix\n   \
    \ }\n    return longestPalindrome", "    var stringToReturn = string\n    var\
    \ longestPalindrome = \"\"\n    var longestPalindromeLength = 0\n    var longestPalindromeStartIndex\
    \ = 0\n    var longestPalindromeEndIndex = 0\n    var longestPalindromeStartIndexOfReversedString\
    \ = 0\n    var longestPalindromeEndIndexOfReversedString = 0\n    var longestPalindromeStartIndexOfReversedStringOfReversedString\
    \ = 0\n    var longestPalindromeEndIndexOfReversedStringOfReversedString = 0\n\
    \    var longestPalindromeStartIndexOfReversedStringOfReversedStringOfReversedString\
    \ = 0\n    var longestPalindromeStartIndexOfReversedStringOfReversedStringOfReversedString\
    \ = 0\n    var longestPalindromeStartIndexOfReversedStringOfReversedStringOfReversedString\
    \ = 0\n    var longestPalindromeStartIndexOfReversedStringOfReversedStringOfReversedString\
    \ = 0\n    var longestPalindromeStartIndexOfReversedStringOfReversedStringOfReversedString\
    \ = 0\n    var longestPalindromeStartIndexOfReversedStringOfReversedStringOfReversedString\
    \ = 0\n    var longestPalindromeStartIndexOfReversedStringOfReversedStringOfReversedString\
    \ = 0\n    var longestPalindromeStartIndexOfReversedStringOfReversedStringOfReversedString\
    \ = 0\n    var longestPalindromeStartIndexOfReversedStringOfReversedStringOfReversedString\
    \ = 0\n    var longestPalindromeStartIndexOfReversedStringOfReversedStringOfReversedString\
    \ = 0\n    var longestPalindromeStartIndexOfReversedStringOfReversedStringOfReversedString\
    \ = 0\n    var longestPalindromeStartIndexOfReversedStringOfReversedStringOfReversedString\
    \ = 0\n    var longestPalindromeStartIndexOfReversedStringOfReversedStringOfReversedString\
    \ = 0\n    var longestPalindromeStartIndexOfReversedStringOfReversedStringOfReversedString\
    \ = 0\n    var longestPalindromeStartIndexOfReversedStringOfReversedStringOfReversedString\
    \ = 0\n    var longestPalindromeStartIndexOfReversedStringOfReversedStringOfReversedString\
    \ = 0\n    var longestPalindromeStartIndexOfReversedStringOfReversedStringOfReversedString\
    \ = 0\n    var longestPalindromeStartIndexOfReversedStringOfReversedStringOfReversedString\
    \ = 0\n    var longestPalindromeStartIndex", "    var stringToReturn = string\n\
    \    var longestPalindrome = String()\n    var longestPalindromeLength = String()\n\
    \    var longestPalindromePrefix = String()\n    var longestPalindromeSuffix =\
    \ String()\n    var longestPalindromePostfix = String()\n    var longestPalindromePostfixLength\
    \ = String()\n    var longestPalindromePostfixPrefix = String()\n    var longestPalindromePostfixSuffix\
    \ = String()\n    var longestPalindromePostfixPostfix = String()\n    var longestPalindromePostfixPostfixLength\
    \ = String()\n    var longestPalindromePostfixPostfixPrefix = String()\n    var\
    \ longestPalindromePostfixPostfixSuffix = String()\n    var longestPalindromePostfixPostfixPostfix\
    \ = String()\n    var longestPalindromePostfixPostfixPostfixLength = String()\n\
    \    var longestPalindromePostfixPostfixPostfixPrefix = String()\n    var longestPalindromePostfixPostfixPostfixSuffix\
    \ = String()\n    var longestPalindromePostfixPostfixPostfixPostfix = String()\n\
    \    var longestPalindromePostfixPostfixPostfixPostfixLength = String()\n    var\
    \ longestPalindromePostfixPostfixPostfixPostfixPrefix = String()\n    var longestPalindromePostfixPostfixPostfixPostfixSuffix\
    \ = String()\n    var longestPalindromePostfixPostfixPostfixPostfixPostfix = String()\n\
    \    var longestPalindromePostfixPostfixPostfixPostfixPostfixLength = String()\n\
    \    var longestPalindromePostfixPostfixPostfixPostfixPostfixPrefix = String()\n\
    \    var longestPalindromePostfixPostfixPostfixPostfixPostfixSuffix = String()\n\
    \    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfix = String()\n\
    \    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixLength = String()\n\
    \    var longestPalindromePostfixPostfixPostfixPostfixPostfixPrefix = String()\n\
    \    var longestPalindromePostfixPostfixPostfixPostfixPostfixSuffix = String()\n\
    \    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfix = String()\n\
    \    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixLength = String()\n\
    \    var longestP", "    var reverse = \"\"\n    var longest = \"\"\n    for c\
    \ in string {\n        if c != \" \" {\n            longest = longest + c\n  \
    \      }\n    }\n    for c in string {\n        if c != \" \" {\n            reverse\
    \ = reverse + c\n        }\n    }\n    if longest == reverse {\n        return\
    \ string\n    }\n    var palindrome = longest\n    for c in reverse.reverse()\
    \ {\n        palindrome = palindrome + c\n    }\n    return palindrome", "   \
    \ var stringToReturn = string\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    for character in string {\n        if character == \" \" {\n      \
    \      continue\n        }\n        let reversedCharacter = String((stringToReturn.characters.reversed()))\n\
    \        if character == reversedCharacter[0] {\n            longestPalindrome\
    \ = longestPalindrome + character\n            longestPalindromeLength = longestPalindromeLength\
    \ + 1\n        } else {\n            longestPalindrome = longestPalindrome + reversedCharacter[0]\n\
    \            longestPalindromeLength = longestPalindromeLength + 1\n        }\n\
    \    }\n    if longestPalindromeLength > 1 {\n        stringToReturn = stringToReturn\
    \ + longestPalindrome\n    }\n    return stringToReturn", "    let reversed =\
    \ string.reversed()\n    let prefixLength = string.characters.count - reversed.characters.count\n\
    \    let postfix = string.characters.suffix(prefixLength)\n    return postfix.append(reversed).reversed()",
  "    var stringToPalindrome = string\n    var longestPalindrome = \"\"\n    var\
    \ longestPalindromeLength = 0\n    var longestPalindromePrefixLength = 0\n   \
    \ var longestPalindromeSuffixLength = 0\n    var longestPalindromePrefixString\
    \ = \"\"\n    var longestPalindromeSuffixString = \"\"\n    var longestPalindromePrefixStringReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverse = \"\"\n\n    while stringToPalindrome.characters.count\
    \ > 0 {\n        let longestPalindromePrefix = stringToPalindrome.characters.prefix(longestPalindromePrefixLength)\n\
    \        let longestPalindromeSuffix = stringToPalindrome.characters.suffix(longestPalindromeSuffixLength)\n\
    \        let longestPalindromePrefixReverse = stringToPalindrome.characters.reversed().prefix(longestPalindromePrefixLength)\n\
    \        let longestPalindromeSuffixReverse = stringToPalindrome.characters.reversed().suffix(longestPalindromeSuffixLength)\n\
    \n        if longestPalindromePrefix == longestPalindromePrefixReverse {\n   \
    \         longestPalindromePrefixString += longestPalindromePrefix\n         \
    \   longestPalindromePrefixLength += 1\n        } else {\n            longestPalindromePrefixString\
    \ += longestPalindromePrefixReverse\n            longestPalindromePrefixLength\
    \ -= 1\n        }\n\n        if longestPalindromeSuffix == longestPalindromeSuffixReverse\
    \ {\n            longestPalindromeSuffixString += longestPalindromeSuffix\n  \
    \          longestPalindromeSuffixLength += 1\n        } else {\n            longestPalindromeSuffixString\
    \ += longestPalindromeSuffixReverse\n            longestPalindromeSuffixLength\
    \ -= 1\n        }\n\n        if longestPalindromePrefixLength > longestPalindromeSuffixLength\
    \ {\n            longestPalindromeLength += 1\n        } else {\n            longestPalindromeLength\
    \ -= 1\n        }\n\n        if longestPalindromeLength > 0 {\n            stringToPalindrome\
    \ = stringToPalindrome.characters.suffix(longestPalindromeLength)\n        } else\
    \ {\n            break\n        }\n    }\n\n    return longestPalindromePrefixString\
    \ + stringToPalindrome + longestPalindromeSuffixString", "    var result = \"\"\
    \n    var longestPalindrome = \"\"\n    for letter in string {\n        if letter\
    \ == \" \" {\n            result += letter\n            continue\n        }\n\
    \        longestPalindrome += letter\n    }\n    for letter in longestPalindrome\
    \ {\n        if letter == \" \" {\n            result += letter\n            continue\n\
    \        }\n        result += letter\n    }\n    return result", "    var stringToReturn\
    \ = string\n    var longestPalindrome = String()\n    var longestPalindromeLength\
    \ = String()\n    var longestPalindromePrefix = String()\n    var longestPalindromeSuffix\
    \ = String()\n    var longestPalindromePostfix = String()\n    var longestPalindromePostfixLength\
    \ = String()\n    var longestPalindromePostfixPrefix = String()\n    var longestPalindromePostfixSuffix\
    \ = String()\n    var longestPalindromePostfixPostfix = String()\n    var longestPalindromePostfixPostfixLength\
    \ = String()\n    var longestPalindromePostfixPostfixPrefix = String()\n    var\
    \ longestPalindromePostfixPostfixSuffix = String()\n    var longestPalindromePostfixPostfixPostfix\
    \ = String()\n    var longestPalindromePostfixPostfixPostfixLength = String()\n\
    \    var longestPalindromePostfixPostfixPostfixPrefix = String()\n    var longestPalindromePostfixPostfixPostfixSuffix\
    \ = String()\n    var longestPalindromePostfixPostfixPostfixPostfix = String()\n\
    \    var longestPalindromePostfixPostfixPostfixPostfixLength = String()\n    var\
    \ longestPalindromePostfixPostfixPostfixPostfixPrefix = String()\n    var longestPalindromePostfixPostfixPostfixPostfixSuffix\
    \ = String()\n    var longestPalindromePostfixPostfixPostfixPostfixPostfix = String()\n\
    \    var longestPalindromePostfixPostfixPostfixPostfixPostfixLength = String()\n\
    \    var longestPalindromePostfixPostfixPostfixPostfixPostfixPrefix = String()\n\
    \    var longestPalindromePostfixPostfixPostfixPostfixPostfixSuffix = String()\n\
    \    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfix = String()\n\
    \    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixLength = String()\n\
    \    var longestPalindromePostfixPostfixPostfixPostfixPostfixPrefix = String()\n\
    \    var longestPalindromePostfixPostfixPostfixPostfixPostfixSuffix = String()\n\
    \    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfix = String()\n\
    \    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixLength = String()\n\
    \    var longestP", "    var palindrome = string\n    var longestPalindrome =\
    \ string\n    var longestPalindromeLen = 0\n    for _ in 0..<string.characters.count\
    \ {\n        let reversed = string.reversed()\n        let prefix = reversed.prefix(string)\n\
    \        let suffix = reversed.suffix(string)\n        if longestPalindromeLen\
    \ < prefix.characters.count {\n            longestPalindrome = prefix\n      \
    \      longestPalindromeLen = prefix.characters.count\n        }\n        if longestPalindromeLen\
    \ < suffix.characters.count {\n            longestPalindrome = suffix\n      \
    \      longestPalindromeLen = suffix.characters.count\n        }\n    }\n    return\
    \ longestPalindrome", "    var stringToReturn = string\n    var longestPalindrome\
    \ = string\n    var longestPalindromeLength = 0\n    var longestPalindromeIndex\
    \ = 0\n    var longestPalindromeSuffixIndex = 0\n    var longestPalindromeSuffixLength\
    \ = 0\n    var longestPalindromeSuffixString = \"\"\n    var longestPalindromeSuffixStringReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseReverse = \"\"\n    var\
    \ longestPalindromeSuffixStringReverseSuffixLength = 0\n    var longestPalindromeSuffixStringReverseSuffixString\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseSuffixStringReverse = \"\
    \"\n    var longestPalindromeSuffixStringReverseSuffixStringReverseReverse = \"\
    \"\n    var longestPalindromeSuffixStringReverseSuffixStringReverseSuffixLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseSuffixStringReverseSuffixString\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseSuffixStringReverseSuffixStringReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseSuffixStringReverseSuffixStringReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseSuffixStringReverseSuffixStringReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseSuffixStringReverseSuffixStringReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseSuffixStringReverseSuffixStringReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseSuffixStringReverseSuffixStringReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseSuffixStringReverseSuffixStringReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseSuffixStringReverseSuffixStringReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseSuffixStringReverseSuffixStringReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseSuffixStringReverseSuffixStringReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseSuffixStringReverseSuffixStringReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseSuffixStringReverseSuffixStringReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseSuffixStringReverseSuffixStringReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseSuffixStringReverseSuffixStringReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseSuffixStringReverseSuffixStringReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseSuffixStringReverseSuffixStringReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseSuffixStringReverseSuffixStringReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseSuffixStringReverseSuffixStringReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseSuffixStringReverseSuffixStringReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseSuffixStringReverseSuffixStringReverse",
  "    var result = \"\"\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    for character in string {\n        if character == character {\n  \
    \          result += character\n        } else {\n            if longestPalindromeLength\
    \ < len(longestPalindrome) {\n                longestPalindrome = result\n   \
    \             longestPalindromeLength = len(longestPalindrome)\n            }\n\
    \            result = \"\"\n        }\n    }\n    if longestPalindromeLength <\
    \ len(longestPalindrome) {\n        longestPalindrome = result\n        longestPalindromeLength\
    \ = len(longestPalindrome)\n    }\n    return longestPalindrome", "    var stringToReturn\
    \ = string\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromeIndex = 0\n    var longestPalindromePrefix = \"\
    \"\n    var longestPalindromeSuffix = 0\n    var longestPalindromeSuffixIndex\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromeSuffixReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseIndex = 0\n    var longestPalindromeSuffixReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverse = \"\"\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var ", "    var stringToReturn = string\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    var longestPalindromeStartIndex\
    \ = 0\n    var longestPalindromeEndIndex = 0\n    var longestPalindromeStartIndexAfterReverse\
    \ = 0\n    var longestPalindromeEndIndexAfterReverse = 0\n    var longestPalindromeStartIndexBeforeReverse\
    \ = 0\n    var longestPalindromeEndIndexBeforeReverse = 0\n    var longestPalindromeStartIndexAfterReverse\
    \ = 0\n    var longestPalindromeEndIndexAfterReverse = 0\n    var longestPalindromeStartIndexBeforeReverse\
    \ = 0\n    var longestPalindromeEndIndexBeforeReverse = 0\n    var longestPalindromeStartIndexAfterReverse\
    \ = 0\n    var longestPalindromeEndIndexAfterReverse = 0\n    var longestPalindromeStartIndexBeforeReverse\
    \ = 0\n    var longestPalindromeEndIndexBeforeReverse = 0\n    var longestPalindromeStartIndexAfterReverse\
    \ = 0\n    var longestPalindromeEndIndexAfterReverse = 0\n    var longestPalindromeStartIndexBeforeReverse\
    \ = 0\n    var longestPalindromeEndIndexBeforeReverse = 0\n    var longestPalindromeStartIndexAfterReverse\
    \ = 0\n    var longestPalindromeEndIndexAfterReverse = 0\n    var longestPalindromeStartIndexBeforeReverse\
    \ = 0\n    var longestPalindromeEndIndexBeforeReverse = 0\n    var longestPalindromeStartIndexAfterReverse\
    \ = 0\n    var longestPalindromeEndIndexAfterReverse = 0\n    var longestPalindromeStartIndexBeforeReverse\
    \ = 0\n    var longestPalindromeEndIndexBeforeReverse = 0\n    var longestPalindromeStartIndexAfterReverse\
    \ = 0\n    var longestPalindromeEndIndexAfterReverse = 0\n    var longestPalindromeStartIndexBeforeReverse\
    \ = 0\n    var longestPalindromeEndIndexBeforeReverse = 0\n    var longestPalindromeStartIndexAfterReverse\
    \ = 0\n    var longestPalindromeEndIndexAfterReverse = 0\n    var longestPalindromeStartIndexBeforeReverse\
    \ = 0\n    var longestPalindromeEndIndexBeforeReverse = 0\n    var longestPalindromeStartIndexAfterReverse\
    \ = 0\n    var longestPalindromeEndIndexAfterReverse = 0\n    var longestPalindromeStartIndexBeforeReverse\
    \ = 0\n    var longestPalindromeEndIndexBeforeReverse = 0\n    var longestPalindromeStartIndexAfterReverse\
    \ = 0\n    var longestPalindromeEndIndexAfterReverse = 0\n    var longestPalindromeStartIndexBeforeReverse\
    \ = 0\n", "    var string = string\n    var longestPalindrome = \"\"\n    var\
    \ longestPalindromeLength = 0\n    var longestPalindromePrefix = \"\"\n    var\
    \ longestPalindromeSuffix = \"\"\n    var longestPalindromePrefixLength = 0\n\
    \    var longestPalindromeSuffixLength = 0\n    var longestPalindromeSuffixSuffixLength\
    \ = 0\n    var longestPalindromeSuffixSuffixLength = 0\n    var longestPalindromeSuffixSuffixSuffixLength\
    \ = 0\n    var longestPalindromeSuffixSuffixSuffixLength = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixLength\
    \ = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixLength = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixLength\
    \ = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixLength = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixLength\
    \ = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixLength = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixLength\
    \ = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixLength = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixLength\
    \ = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixLength = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixLength\
    \ = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixLength = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixLength\
    \ = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixLength = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixLength\
    \ = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixLength = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixLength\
    \ = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixLength = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixLength\
    \ = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixLength = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixLength\
    \ = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixLength = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixLength\
    \ = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixLength = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixLength\
    \ = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixLength = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixLength\
    \ = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixLength = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixLength\
    \ = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixLength = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixLength\
    \ = 0\n    var longest", "    var string = string\n    var longestPalindrome =\
    \ \"\"\n    var longestPalindromeLength = 0\n    var longestPalindromePrefix =\
    \ \"\"\n    var longestPalindromeSuffix = \"\"\n    var longestPalindromePrefixLength\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromePrefixReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverse = \"\"\n    var longestPalindromePrefixReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseLength = 0\n    var longestPalindromePrefixReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverse = \"\"\n    var longestPalindromePrefixReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseReverse = \"\"\n    var\
    \ longestPalindromePrefixReverseReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseReverseLength\
    \ = 0\n    var longestPalindromePrefixReverseReverseReverseReverse = \"\"\n  \
    \  var longestPalindromeSuffixReverseReverseReverseReverse = \"\"\n    var longestPalindromePrefixReverseReverseReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseReverseLength = 0\n    var\
    \ longestPalindromePrefixReverseReverseReverseReverse = \"\"\n    var longestPalindromeSuffixReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixReverseReverseReverseReverseLength =\
    \ 0\n    var longestPalindromeSuffixReverseReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseReverseReverseReverse =\
    \ \"\"\n    var longestPalindromePrefixReverseReverseReverseReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseReverseLength = 0\n    var\
    \ longestPalindromePrefixReverseReverseReverseReverseReverse = \"\"\n    var longestPalindromeSuffixReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixReverseReverseReverseReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseReverseReverseLength = 0\n\
    \    var longestPalindromePrefixReverseReverseReverseReverseReverseReverse = \"\
    \"\n    var longestPalindromeSuffixReverseReverseReverseReverseReverse = \"\"\n\
    \    var longestPalindromePrefixReverseReverseReverseReverseReverseLength = 0\n\
    \    var longestPalindromeSuffixReverseReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseReverseReverseReverse =\
    \ \"\"\n    var longestPalindromePrefixReverseReverse", "    var result = \"\"\
    \n    var longestPalindrome = \"\"\n    var longestPalindromeLength = 0\n    var\
    \ longestPalindromeIndex = 0\n    for index in 0..<string.characters.count {\n\
    \        let character = string.characters[index]\n        let reversedCharacter\
    \ = reverseString(character)\n        if character == reversedCharacter {\n  \
    \          result += character\n        } else {\n            if longestPalindromeLength\
    \ < index {\n                longestPalindrome = result\n                longestPalindromeLength\
    \ = index\n                longestPalindromeIndex = index\n            }\n   \
    \         result = \"\"\n        }\n    }\n    if longestPalindromeLength < string.characters.count\
    \ {\n        longestPalindrome = result\n        longestPalindromeLength = string.characters.count\n\
    \        longestPalindromeIndex = string.characters.count\n    }\n    return longestPalindrome",
  "    var string = string\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromePrefix = \"\"\n    var longestPalindromeSuffix\
    \ = \"\"\n    var longestPalindromePrefixLength = 0\n    var longestPalindromeSuffixLength\
    \ = 0\n    var longestPalindromePrefixReverse = \"\"\n    var longestPalindromeSuffixReverse\
    \ = \"\"\n\n    for _ in 0..<string.characters.count {\n        let index = string.index(string.startIndex,\
    \ offsetBy: 1)\n        let prefix = string[index...string.index(index, offsetBy:\
    \ -1)]\n        let suffix = string[string.index(index, offsetBy: -1)...string.endIndex]\n\
    \n        if isPalindrome(prefix) {\n            longestPalindrome = prefix\n\
    \            longestPalindromeLength = prefix.characters.count\n            longestPalindromePrefix\
    \ = prefix\n            longestPalindromePrefixLength = prefix.characters.count\n\
    \            longestPalindromeSuffix = suffix\n            longestPalindromeSuffixLength\
    \ = suffix.characters.count\n            longestPalindromePrefixReverse = reverseString(prefix)\n\
    \            longestPalindromeSuffixReverse = reverseString(suffix)\n        }\n\
    \    }\n\n    if longestPalindromeLength > longestPalindromePrefixLength {\n \
    \       string = longestPalindromePrefixReverse\n    } else {\n        string\
    \ = longestPalindromeSuffixReverse\n    }\n\n    return string", "    var reversedString\
    \ = string\n    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = 0\n    for _ in 0..<string.count {\n        let index = string.index(longestPalindrome)\n\
    \        let substring = string[index...].lowercased\n        let reversedSubstring\
    \ = reversedString.lowercased\n        if substring == reversedSubstring {\n \
    \           longestPalindromeLength += 1\n        } else {\n            if longestPalindromeLength\
    \ > longestPalindrome.count {\n                longestPalindrome = string\n  \
    \              longestPalindromeLength = longestPalindrome.count\n           \
    \ }\n            reversedString = reversedString.dropLast()\n        }\n    }\n\
    \    return longestPalindrome", "    var string = string\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    var longestPalindromePrefix\
    \ = \"\"\n    var longestPalindromeSuffix = \"\"\n    var longestPalindromePrefixLength\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromePrefixReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverse = \"\"\n\n    for _ in 0..<string.characters.count\
    \ {\n        let currentChar = string.characters[string.startIndex]\n        let\
    \ currentCharIsPalindrome = currentChar == string.reverse(currentChar)\n\n   \
    \     if currentCharIsPalindrome {\n            longestPalindrome = string\n \
    \           longestPalindromeLength = string.characters.count\n            longestPalindromePrefix\
    \ = string\n            longestPalindromePrefixLength = string.characters.count\n\
    \            longestPalindromeSuffix = string\n            longestPalindromeSuffixLength\
    \ = string.characters.count\n            longestPalindromePrefixReverse = string\n\
    \            longestPalindromeSuffixReverse = string\n        } else {\n     \
    \       if longestPalindromeLength > longestPalindromePrefixLength {\n       \
    \         longestPalindrome = string\n                longestPalindromeLength\
    \ = string.characters.count\n                longestPalindromePrefix = string\n\
    \                longestPalindromePrefixLength = string.characters.count\n   \
    \             longestPalindromeSuffix = string\n                longestPalindromeSuffixLength\
    \ = string.characters.count\n                longestPalindromePrefixReverse =\
    \ string\n                longestPalindromeSuffixReverse = string\n          \
    \  }\n\n            if longestPalindromeLength > longestPalindromeSuffixLength\
    \ {\n                longestPalindrome = string\n                longestPalindromeLength\
    \ = string.characters.count\n                longestPalindromePrefix = string\n\
    \                longestPalindromePrefixLength = string.characters.count\n   \
    \             longestPalindromeSuffix = string\n                longestPalindromeSuffixLength\
    \ = string.characters.count\n                longestPalindromePrefixReverse =\
    \ string\n                longestPalindromeSuffixReverse = string\n          \
    \  }\n\n            if longestPalindromeLength > longestPalindromePrefixLength\
    \ && longestPalindromeLength > longestPalindromeSuffixLength {\n             \
    \   longestPalindrome = string\n                longestPalindromeLength = string.characters.count\n\
    \                longestPalindromePrefix = string\n                longestPalindromePrefixLength\
    \ = string.characters.count\n                longestPalindromeSuffix = string",
  "    var reversedString = string\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    for index in 0..<string.characters.count {\n        let char = string.characters[index]\n\
    \        if char == char.lowercased().reversed().first {\n            reversedString.append(char)\n\
    \            if reversedString.characters.count > longestPalindromeLength {\n\
    \                longestPalindrome = reversedString\n                longestPalindromeLength\
    \ = reversedString.characters.count\n            }\n        }\n    }\n    return\
    \ longestPalindrome", "    var result = \"\"\n    var longestPalindrome = \"\"\
    \n    var longestPalindromeLength = 0\n    for character in string {\n       \
    \ if character == character {\n            result += character\n        } else\
    \ {\n            if longestPalindromeLength < character.count {\n            \
    \    longestPalindrome = character\n                longestPalindromeLength =\
    \ character.count\n            }\n        }\n    }\n    if longestPalindromeLength\
    \ > 0 {\n        result += longestPalindrome.repeat(longestPalindromeLength)\n\
    \    }\n    return result", "    var string = string\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    var longestPalindromeIndex\
    \ = 0\n    var longestPalindromePrefix = \"\"\n    var longestPalindromeSuffix\
    \ = 0\n    var longestPalindromeSuffixIndex = 0\n    var longestPalindromeSuffixLength\
    \ = 0\n    var longestPalindromeSuffixPrefix = \"\"\n    var longestPalindromeSuffixSuffix\
    \ = 0\n    var longestPalindromeSuffixSuffixIndex = 0\n    var longestPalindromeSuffixSuffixLength\
    \ = 0\n    var longestPalindromeSuffixSuffixPrefix = \"\"\n    var longestPalindromeSuffixSuffixSuffix\
    \ = 0\n    var longestPalindromeSuffixSuffixSuffixIndex = 0\n    var longestPalindromeSuffixSuffixSuffixLength\
    \ = 0\n    var longestPalindromeSuffixSuffixSuffixPrefix = \"\"\n    var longestPalindromeSuffixSuffixSuffixSuffix\
    \ = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixIndex = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixLength\
    \ = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixPrefix = \"\"\n    var\
    \ longestPalindromeSuffixSuffixSuffixSuffixSuffix = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixSuffixIndex\
    \ = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixSuffixLength = 0\n   \
    \ var longestPalindromeSuffixSuffixSuffixSuffixSuffixPrefix = \"\"\n    var longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffix\
    \ = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixIndex = 0\n\
    \    var longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixLength = 0\n   \
    \ var longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixPrefix = \"\"\n   \
    \ var longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffix = 0\n    var\
    \ longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixIndex = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixLength\
    \ = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixPrefix = \"\
    \"\n    var longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix\
    \ = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixIndex\
    \ = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength\
    \ = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixPrefix\
    \ = \"\"\n    var longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix\
    \ = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixIndex\
    \ = 0\n    var longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffix", " \
    \   var stringToPalindrome = string\n    var longestPalindrome = string\n    var\
    \ longestPalindromeLength = stringToPalindrome.characters.count\n    var longestPalindromePrefix\
    \ = \"\"\n    var longestPalindromeSuffix = \"\"\n    var longestPalindromePrefixLength\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n\n    for _ in 0..<stringToPalindrome.characters.count\
    \ {\n        let currentChar = stringToPalindrome.characters[longestPalindromeLength]\n\
    \        let currentCharIndex = longestPalindromeLength - 1\n\n        if currentChar\
    \ == currentCharIndex {\n            longestPalindromeLength -= 1\n          \
    \  longestPalindromePrefix = stringToPalindrome.substringToIndex(longestPalindromeLength)\n\
    \            longestPalindromeSuffixLength = longestPalindromeLength\n       \
    \ } else {\n            longestPalindromeLength -= 1\n            longestPalindromeSuffix\
    \ = stringToPalindrome.substringToIndex(longestPalindromeLength)\n           \
    \ longestPalindromePrefixLength = longestPalindromeLength\n        }\n    }\n\n\
    \    if longestPalindromeLength > 0 {\n        let longestPalindromePrefix = stringToPalindrome.substringToIndex(longestPalindromeLength)\n\
    \        let longestPalindromeSuffix = stringToPalindrome.substringFromIndex(longestPalindromeLength)\n\
    \        let longestPalindromePrefixLength = longestPalindromeLength\n       \
    \ let longestPalindromeSuffixLength = longestPalindromeLength\n        stringToPalindrome\
    \ = stringToPalindrome.stringByReplacingOccurrencesOfString(longestPalindromePrefix,\
    \ withString: longestPalindromeSuffix)\n    }\n\n    return stringToPalindrome",
  "    var stringToReturn = \"\"\n    var stringPrefix = \"\"\n    var stringSuffix\
    \ = \"\"\n    var longestPalindrome = \"\"\n    var longestPalindromeLength =\
    \ 0\n    var longestPalindromePrefix = \"\"\n    var longestPalindromeSuffix =\
    \ \"\"\n\n    for character in string {\n        stringPrefix = stringPrefix +\
    \ character\n        stringSuffix = stringSuffix + character\n    }\n\n    longestPalindromeLength\
    \ = stringSuffix.count\n    longestPalindromePrefix = stringPrefix\n    longestPalindromeSuffix\
    \ = stringSuffix\n\n    for character in string {\n        if character == stringSuffix.first\
    \ {\n            longestPalindromeLength = longestPalindromeLength - 1\n     \
    \       longestPalindromeSuffix = stringSuffix.suffix(string: longestPalindromeSuffix)\n\
    \        }\n        if character == stringPrefix.first {\n            longestPalindromeLength\
    \ = longestPalindromeLength - 1\n            longestPalindromePrefix = stringPrefix.prefix(string:\
    \ longestPalindromePrefix)\n        }\n    }\n\n    if longestPalindromeLength\
    \ > 0 {\n        stringToReturn = stringToReturn + stringPrefix.prefix(string:\
    \ longestPalindromePrefix) + stringSuffix.suffix(string: longestPalindromeSuffix)\n\
    \    }\n\n    return stringToReturn", "    var stringToReturn = string\n    var\
    \ longestPalindrome = \"\"\n    var longestPalindromeLength = 0\n    var longestPalindromeStartIndex\
    \ = 0\n    var longestPalindromeEndIndex = 0\n    var longestPalindromeStartIndexOfLongestPalindrome\
    \ = 0\n    var longestPalindromeEndIndexOfLongestPalindrome = 0\n    var longestPalindromeStartIndexOfLongestPalindromeOfLongestPalindrome\
    \ = 0\n    var longestPalindromeEndIndexOfLongestPalindromeOfLongestPalindrome\
    \ = 0\n    var longestPalindromeStartIndexOfLongestPalindromeOfLongestPalindromeOfLongestPalindrome\
    \ = 0\n    var longestPalindromeEndIndexOfLongestPalindromeOfLongestPalindromeOfLongestPalindrome\
    \ = 0\n    var longestPalindromeStartIndexOfLongestPalindromeOfLongestPalindromeOfLongestPalindromeOfLongestPalindrome\
    \ = 0\n    var longestPalindromeEndIndexOfLongestPalindromeOfLongestPalindromeOfLongestPalindromeOfLongestPalindromeOfLongestPalindrome\
    \ = 0\n    var longestPalindromeStartIndexOfLongestPalindromeOfLongestPalindromeOfLongestPalindromeOfLongestPalindromeOfLongestPalindromeOfLongestPalindrome\
    \ = 0\n    var longestPalindromeEndIndexOfLongestPalindromeOfLongestPalindromeOfLongestPalindromeOfLongestPalindromeOfLongestPalindromeOfLongestPalindromeOfLongestPalindrome\
    \ = 0\n    var longestPalindromeStartIndexOfLongestPalindromeOfLongestPalindromeOfLongestPalindromeOfLongestPalindromeOfLongestPalindromeOfLongestPalindromeOfLongestPalindromeOfLongestPalindrome\
    \ = 0\n    var longestPalindromeEndIndexOfLongestPalindromeOfLongestPalindromeOfLongestPalindromeOfLongestPalindromeOfLongestPalindromeOfLongestPalindromeOfLongestPalindromeOfLongestPalindrome",
  "    var stringToReturn = string\n    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromeIndex = 0\n    var longestPalindromeSuffixIndex\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromeSuffixString\
    \ = \"\"\n    var longestPalindromeSuffixStringReverse = \"\"\n    var longestPalindromeSuffixStringReverseIndex\
    \ = 0\n    var longestPalindromeSuffixStringReverseLength = 0\n    var longestPalindromeSuffixStringReverseString\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseStringReverseIndex = 0\n\
    \    var longestPalindromeSuffixStringReverseStringReverseLength = 0\n    var\
    \ longestPalindromeSuffixStringReverseStringReverse = \"\"\n    var longestPalindromeSuffixStringReverseStringReverseIndex\
    \ = 0\n    var longestPalindromeSuffixStringReverseStringReverseLength = 0\n \
    \   var longestPalindromeSuffixStringReverseStringReverseString = \"\"\n    var\
    \ longestPalindromeSuffixStringReverseStringReverseStringReverseIndex = 0\n  \
    \  var longestPalindromeSuffixStringReverseStringReverseStringReverseLength =\
    \ 0\n    var longestPalindromeSuffixStringReverseStringReverseStringReverse =\
    \ \"\"\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseIndex\
    \ = 0\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseString\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringReverseIndex\
    \ = 0\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringReverseLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringReverseIndex\
    \ = 0\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringReverseLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringReverseString\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringReverseStringReverseIndex\
    \ = 0\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringReverseStringReverseLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringReverseStringReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringReverseStringReverseIndex\
    \ = 0\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringReverseStringReverseLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringReverseStringReverse",
  "    var palindrome = string\n    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromePrefixLength = 0\n    for _ in 0..<string.characters.count\
    \ {\n        let index = string.index(string.startIndex, offsetBy: 1)\n      \
    \  let char = string[index]\n        let reversedChar = String(string[..<index])\n\
    \        if char == reversedChar {\n            palindrome = palindrome.replacingOccurrences(of:\
    \ char, with: reversedChar)\n            longestPalindromeLength = palindrome.characters.count\n\
    \            longestPalindromePrefixLength = index\n        }\n    }\n    if longestPalindromeLength\
    \ > longestPalindromePrefixLength {\n        palindrome = palindrome.replacingOccurrences(of:\
    \ longestPalindrome[longestPalindromePrefixLength..<longestPalindrome.characters.count],\
    \ with: longestPalindrome[longestPalindromePrefixLength..<longestPalindrome.characters.count].reversed())\n\
    \    }\n    return palindrome", "    let longestPalindrome = longestPalindrome(string)\n\
    \    let reversedString = reverseString(string, longestPalindrome)\n    return\
    \ reversedString + longestPalindrome", "    var stringToReturn = string\n    var\
    \ longestPalindrome = \"\"\n    var longestPalindromeLength = 0\n    for stringIndex\
    \ in 0..<string.count {\n        let stringPrefix = string.prefix(stringIndex)\n\
    \        let stringSuffix = string.suffix(stringIndex)\n        let stringToCheck\
    \ = stringPrefix + stringSuffix\n        let stringToCheckReversed = stringToCheck.reversed()\n\
    \        if stringToCheck == stringToCheckReversed {\n            if stringToCheck.count\
    \ > longestPalindromeLength {\n                longestPalindrome = stringToCheck\n\
    \                longestPalindromeLength = stringToCheck.count\n            }\n\
    \        }\n    }\n    if longestPalindromeLength > 0 {\n        stringToReturn\
    \ = stringToReturn + longestPalindrome\n    }\n    return stringToReturn", " \
    \   var string = string\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromeStartIndex = 0\n    var longestPalindromeEndIndex\
    \ = 0\n    var longestPalindromeStartIndexAfterReverse = 0\n    var longestPalindromeEndIndexAfterReverse\
    \ = 0\n    var longestPalindromeStartIndexBeforeReverse = 0\n    var longestPalindromeEndIndexBeforeReverse\
    \ = 0\n    var longestPalindromeStartIndexAfterReverse = 0\n    var longestPalindromeEndIndexAfterReverse\
    \ = 0\n    var longestPalindromeStartIndexBeforeReverse = 0\n    var longestPalindromeEndIndexBeforeReverse\
    \ = 0\n    var longestPalindromeStartIndexAfterReverse = 0\n    var longestPalindromeEndIndexAfterReverse\
    \ = 0\n    var longestPalindromeStartIndexBeforeReverse = 0\n    var longestPalindromeEndIndexBeforeReverse\
    \ = 0\n    var longestPalindromeStartIndexAfterReverse = 0\n    var longestPalindromeEndIndexAfterReverse\
    \ = 0\n    var longestPalindromeStartIndexBeforeReverse = 0\n    var longestPalindromeEndIndexBeforeReverse\
    \ = 0\n    var longestPalindromeStartIndexAfterReverse = 0\n    var longestPalindromeEndIndexAfterReverse\
    \ = 0\n    var longestPalindromeStartIndexBeforeReverse = 0\n    var longestPalindromeEndIndexBeforeReverse\
    \ = 0\n    var longestPalindromeStartIndexAfterReverse = 0\n    var longestPalindromeEndIndexAfterReverse\
    \ = 0\n    var longestPalindromeStartIndexBeforeReverse = 0\n    var longestPalindromeEndIndexBeforeReverse\
    \ = 0\n    var longestPalindromeStartIndexAfterReverse = 0\n    var longestPalindromeEndIndexAfterReverse\
    \ = 0\n    var longestPalindromeStartIndexBeforeReverse = 0\n    var longestPalindromeEndIndexBeforeReverse\
    \ = 0\n    var longestPalindromeStartIndexAfterReverse = 0\n    var longestPalindromeEndIndexAfterReverse\
    \ = 0\n    var longestPalindromeStartIndexBeforeReverse = 0\n    var longestPalindromeEndIndexBeforeReverse\
    \ = 0\n    var longestPalindromeStartIndexAfterReverse = 0\n    var longestPalindromeEndIndexAfterReverse\
    \ = 0\n    var longestPalindromeStartIndexBeforeReverse = 0\n    var longestPalindromeEndIndexBeforeReverse\
    \ = 0\n    var longestPalindromeStartIndexAfterReverse = 0\n    var longestPalindromeEndIndexAfterReverse\
    \ = 0\n    var longestPalindromeStartIndexBeforeReverse = 0\n    var longestP",
  "    var reversedString = string\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    for index in 0..<string.count {\n        let character = string[index]\n\
    \        let reversedCharacter = reversedString[index]\n        if character ==\
    \ reversedCharacter {\n            longestPalindromeLength += 1\n        } else\
    \ {\n            if longestPalindromeLength > longestPalindrome.characters.count\
    \ {\n                longestPalindrome = String(string[longestPalindromeLength..<string.count])\n\
    \                longestPalindromeLength = longestPalindrome.characters.count\n\
    \            }\n        }\n    }\n    return longestPalindrome", "    var result\
    \ = \"\"\n    var longestPalindrome = \"\"\n    for character in string {\n  \
    \      if character == character {\n            result += character\n        }\
    \ else {\n            longestPalindrome += character\n        }\n    }\n    for\
    \ character in string {\n        if character == character {\n            result\
    \ += character\n        } else {\n            result += longestPalindrome\n  \
    \      }\n    }\n    return result", "    var stringToPalindrome = string\n  \
    \  var longestPalindrome = \"\"\n    var longestPalindromeLength = 0\n    var\
    \ longestPalindromeIndex = 0\n    var longestPalindromePrefix = \"\"\n    var\
    \ longestPalindromeSuffix = 0\n    var longestPalindromeSuffixIndex = 0\n    var\
    \ longestPalindromeSuffixLength = 0\n    var longestPalindromeSuffixReverse =\
    \ \"\"\n\n    for stringToPalindrome.characters.count > 0 {\n        let characterToPalindrome\
    \ = stringToPalindrome.characters.first!\n        let characterToPalindromeLength\
    \ = stringToPalindrome.characters.count\n        let characterToPalindromePrefix\
    \ = stringToPalindrome[longestPalindromeIndex..<longestPalindromeIndex+longestPalindromeLength]\n\
    \        let characterToPalindromeSuffix = stringToPalindrome[longestPalindromeSuffixIndex..<longestPalindromeSuffixIndex+longestPalindromeSuffixLength]\n\
    \        let characterToPalindromeSuffixReverse = stringToPalindrome[longestPalindromeSuffixIndex..<longestPalindromeSuffixIndex+longestPalindromeSuffixLength].reversed()\n\
    \n        if characterToPalindromeLength > longestPalindromeLength {\n       \
    \     longestPalindrome = stringToPalindrome\n            longestPalindromeLength\
    \ = characterToPalindromeLength\n            longestPalindromeIndex = longestPalindromeIndex\
    \ + 1\n            longestPalindromePrefix = characterToPalindromePrefix\n   \
    \         longestPalindromeSuffix = characterToPalindromeSuffix\n            longestPalindromeSuffixIndex\
    \ = longestPalindromeSuffixIndex + 1\n            longestPalindromeSuffixLength\
    \ = characterToPalindromeSuffixLength\n            longestPalindromeSuffixReverse\
    \ = characterToPalindromeSuffixReverse\n        }\n        if characterToPalindromeLength\
    \ == longestPalindromeLength {\n            if characterToPalindromePrefix ==\
    \ longestPalindromePrefix {\n                if characterToPalindromeSuffix ==\
    \ longestPalindromeSuffix {\n                    if characterToPalindromeSuffixReverse\
    \ == longestPalindromeSuffixReverse {\n                        stringToPalindrome\
    \ = stringToPalindrome[longestPalindromeSuffixIndex..<longestPalindromeSuffixIndex+longest",
  "    var palindrome = \"\"\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromePrefixLength = 0\n    var longestPalindromeSuffixLength\
    \ = 0\n    var longestPalindromePrefixString = \"\"\n    var longestPalindromeSuffixString\
    \ = \"\"\n    var longestPalindromePrefixStringReverse = \"\"\n    var longestPalindromeSuffixStringReverse\
    \ = \"\"\n    var longestPalindromePrefixStringReverseLength = 0\n    var longestPalindromeSuffixStringReverseLength\
    \ = 0\n    var longestPalindromePrefixStringReverseString = \"\"\n    var longestPalindromeSuffixStringReverseString\
    \ = \"\"\n    var longestPalindromePrefixStringReverseStringReverse = \"\"\n \
    \   var longestPalindromeSuffixStringReverseStringReverse = \"\"\n    var longestPalindromePrefixStringReverseStringReverseLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseStringReverseLength = 0\n \
    \   var longestPalindromePrefixStringReverseStringReverseString = \"\"\n    var\
    \ longestPalindromeSuffixStringReverseStringReverseString = \"\"\n    var longestPalindromePrefixStringReverseStringReverseStringReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseStringReverseStringReverse\
    \ = \"\"\n    var longestPalindromePrefixStringReverseStringReverseStringReverseLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseLength\
    \ = 0\n    var longestPalindromePrefixStringReverseStringReverseStringReverseString\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseString\
    \ = \"\"\n    var longestPalindromePrefixStringReverseStringReverseStringReverseStringReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseString\
    \ = \"\"\n    var longestPalindromePrefixStringReverseStringReverseStringReverseStringReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringReverse\
    \ = \"\"\n    var longestPalindromePrefixStringReverseStringReverseStringReverseStringReverseString\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringReverse\
    \ = \"\"\n    var longestPalindromePrefixStringReverseStringReverseStringReverseStringReverseString\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringReverse\
    \ = \"\"\n    var longestPalindromePrefixStringReverseStringReverseStringReverseStringReverseString\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringReverse\
    \ = \"\"\n    var longestPalindromePrefixStringReverseStringReverseStringReverseStringReverseStringReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseStringReverse", "    var\
    \ stringToReturn = string\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromeIndex = 0\n    var longestPalindromePrefixIndex\
    \ = 0\n    var longestPalindromeSuffixIndex = 0\n    var longestPalindromeSuffixLength\
    \ = 0\n    var longestPalindromeSuffixString = \"\"\n\n    for stringIndex in\
    \ 0..<string.characters.count {\n        let stringCharacter = string.characters[stringIndex]\n\
    \        let stringCharacterIsPalindrome = stringCharacter == string.reversed()\n\
    \n        if stringCharacterIsPalindrome {\n            if longestPalindromeLength\
    \ < stringCharacterLength {\n                longestPalindrome = string\n    \
    \            longestPalindromeLength = stringCharacterLength\n               \
    \ longestPalindromeIndex = stringIndex\n                longestPalindromePrefixIndex\
    \ = longestPalindromeIndex\n                longestPalindromeSuffixIndex = longestPalindromeIndex\n\
    \                longestPalindromeSuffixLength = stringCharacterLength\n     \
    \           longestPalindromeSuffixString = string\n            }\n        } else\
    \ {\n            if longestPalindromeLength > stringCharacterLength {\n      \
    \          longestPalindrome = string\n                longestPalindromeLength\
    \ = stringCharacterLength\n                longestPalindromeIndex = stringIndex\n\
    \                longestPalindromePrefixIndex = longestPalindromeIndex\n     \
    \           longestPalindromeSuffixIndex = longestPalindromeIndex\n          \
    \      longestPalindromeSuffixLength = stringCharacterLength\n               \
    \ longestPalindromeSuffixString = string\n            }\n        }\n    }\n\n\
    \    if longestPalindromeLength > stringCharacterLength {\n        longestPalindrome\
    \ = string\n        longestPalindromeLength = stringCharacterLength\n        longestPalindromeIndex\
    \ = stringIndex\n        longestPalindromePrefixIndex = longestPalindromeIndex\n\
    \        longestPalindromeSuffixIndex = longestPalindromeIndex\n        longestPalindromeSuffixLength\
    \ = stringCharacterLength\n        longestPalindromeSuffixString = string\n  \
    \  }\n\n    return longestPalindrome", "    let reversedString = string.reversed()\n\
    \    let longestPalindrome = reversedString.prefix(string)\n    return longestPalindrome\
    \ + string", "    var reversedString = \"\"\n    var longestPalindrome = \"\"\n\
    \    var longestPalindromeLength = 0\n\n    for character in string {\n      \
    \  if character == character[character.startIndex] {\n            reversedString\
    \ += character\n        } else {\n            if longestPalindromeLength < character.startIndex\
    \ {\n                longestPalindrome = reversedString\n                longestPalindromeLength\
    \ = character.startIndex\n            }\n            reversedString = \"\"\n \
    \       }\n    }\n\n    if longestPalindromeLength < string.endIndex {\n     \
    \   longestPalindrome = reversedString\n        longestPalindromeLength = string.endIndex\n\
    \    }\n\n    return longestPalindrome", "    var result = \"\"\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    for character in string {\n\
    \        if character == character {\n            result += character\n      \
    \  } else {\n            if longestPalindromeLength < len(result) - 1 {\n    \
    \            longestPalindrome = result\n                longestPalindromeLength\
    \ = len(result)\n            }\n            result = \"\"\n        }\n    }\n\
    \    if longestPalindromeLength < len(result) - 1 {\n        longestPalindrome\
    \ = result\n        longestPalindromeLength = len(result)\n    }\n    if longestPalindromeLength\
    \ > 0 {\n        result += string[longestPalindromeLength..]\n    }\n    return\
    \ result", "    var result = \"\"\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    for character in string {\n        if character == character {\n  \
    \          result += character\n        } else {\n            if longestPalindromeLength\
    \ < character.count {\n                longestPalindrome = character\n       \
    \         longestPalindromeLength = character.count\n            }\n        }\n\
    \    }\n    if longestPalindromeLength == 0 {\n        return \"\"\n    }\n  \
    \  if longestPalindromeLength > 0 {\n        result += longestPalindrome.reversed()\n\
    \    }\n    return result", "    var result = \"\"\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    for character in string {\n\
    \        if character == character {\n            result += character\n      \
    \  } else {\n            if longestPalindromeLength < character.count {\n    \
    \            longestPalindrome = character\n                longestPalindromeLength\
    \ = character.count\n            }\n        }\n    }\n    for character in string\
    \ {\n        if character == character {\n            result += character\n  \
    \      } else {\n            if longestPalindromeLength < character.count {\n\
    \                longestPalindrome = character\n                longestPalindromeLength\
    \ = character.count\n            }\n        }\n    }\n    if longestPalindromeLength\
    \ == 0 {\n        return \"\"\n    }\n    if longestPalindromeLength < result.count\
    \ {\n        result = result.replacingOccurrences(of: longestPalindrome, with:\
    \ \"\")\n    }\n    if longestPalindromeLength > result.count {\n        result\
    \ = longestPalindrome\n    }\n    return result", "    var stringToReturn = string\n\
    \    var longestPalindrome = \"\"\n    var longestPalindromeLength = 0\n    for\
    \ stringToCheck in string.characters {\n        let reversedString = stringToCheck.reversed()\n\
    \        if stringToCheck == reversedString {\n            longestPalindrome =\
    \ stringToCheck\n            longestPalindromeLength = stringToCheck.characters.count\n\
    \        }\n    }\n    for stringToCheck in string.characters.reverse() {\n  \
    \      let reversedString = stringToCheck.reversed()\n        if stringToCheck\
    \ == reversedString {\n            longestPalindrome = stringToCheck\n       \
    \     longestPalindromeLength = stringToCheck.characters.count\n        }\n  \
    \  }\n    return longestPalindrome", "    let reversedString = string.reversed()\n\
    \    let longestPalindrome = longestPalindromeFrom(string, reversedString)\n \
    \   return longestPalindrome", "    var reversedString = string\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    for character in reversedString\
    \ {\n        if character == character {\n            longestPalindromeLength\
    \ += 1\n            if longestPalindromeLength > longestPalindrome.length {\n\
    \                longestPalindrome = reversedString\n            }\n        }\
    \ else {\n            longestPalindromeLength = 0\n        }\n    }\n    return\
    \ longestPalindrome", "    var string = string\n    var longestPalindrome = string\n\
    \    var longestPalindromeLength = longestPalindrome.characters.count\n    var\
    \ longestPalindromePrefix = \"\"\n    var longestPalindromeSuffix = \"\"\n   \
    \ var longestPalindromePrefixLength = 0\n    var longestPalindromeSuffixLength\
    \ = 0\n    var longestPalindromePrefixReverse = \"\"\n    var longestPalindromeSuffixReverse\
    \ = \"\"\n    var longestPalindromePrefixReverseLength = longestPalindromePrefixReverse.characters.count\n\
    \    var longestPalindromeSuffixReverseLength = longestPalindromeSuffixReverse.characters.count\n\
    \    var longestPalindromePrefixReverseReverse = \"\"\n    var longestPalindromeSuffixReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixReverseReverseLength = longestPalindromePrefixReverseReverse.characters.count\n\
    \    var longestPalindromeSuffixReverseReverseLength = longestPalindromeSuffixReverseReverse.characters.count\n\
    \    var longestPalindromePrefixReverseReverseReverse = \"\"\n    var longestPalindromeSuffixReverseReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixReverseReverseReverseLength = longestPalindromePrefixReverseReverseReverse.characters.count\n\
    \    var longestPalindromeSuffixReverseReverseReverseLength = longestPalindromeSuffixReverseReverseReverse.characters.count\n\
    \    var longestPalindromePrefixReverseReverseReverseReverse = \"\"\n    var longestPalindromeSuffixReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixReverseReverseReverseReverseLength =\
    \ longestPalindromePrefixReverseReverseReverseReverseReverse.characters.count\n\
    \    var longestPalindromeSuffixReverseReverseReverseReverseLength = longestPalindromeSuffixReverseReverseReverseReverse.characters.count\n\
    \    var longestPalindromePrefixReverseReverseReverseReverseReverse = \"\"\n \
    \   var longestPalindromeSuffixReverseReverseReverseReverseReverse = \"\"\n  \
    \  var longestPalindromePrefixReverseReverseReverseReverseReverseLength = longestPalindromePrefixReverseReverseReverseReverseReverseReverse.characters.count\n\
    \    var longestPalindromeSuffixReverseReverseReverseReverseReverseLength = longestPalindromeSuffixReverseReverseReverseReverseReverseReverse.characters.count\n\
    \    var longestPalindromePrefixReverseReverseReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixReverseReverseReverseReverseReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseReverseReverseReverseReverseLength\
    \ = 0\n    var longestPalindromePrefixReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = \"\"\n    var ", "    var result = \"\"\n    var longestPalindrome = \"\"\n\
    \    var longestPalindromeLength = 0\n    for char in string {\n        if char\
    \ == char.lowercased() {\n            result += char\n        } else {\n     \
    \       result += char.lowercased()\n        }\n        if result.characters.count\
    \ > longestPalindromeLength {\n            longestPalindrome = result\n      \
    \      longestPalindromeLength = result.characters.count\n        }\n    }\n \
    \   if longestPalindromeLength == 0 {\n        return \"\"\n    }\n    var reversedString\
    \ = String()\n    for char in longestPalindrome {\n        reversedString += char\n\
    \    }\n    reversedString = reversedString.reversed()\n    return reversedString\
    \ + longestPalindrome", "    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromePrefixLength = 0\n    var longestPalindromeSuffixLength\
    \ = 0\n    var longestPalindromePrefixString = \"\"\n    var longestPalindromeSuffixString\
    \ = \"\"\n\n    for character in string {\n        let characterString = String(character)\n\
    \        let characterStringLength = characterString.length\n        let characterStringPrefix\
    \ = String(characterString[characterStringLength - longestPalindromeSuffixLength..<characterStringLength])\n\
    \        let characterStringSuffix = String(characterString[characterStringLength..<characterStringLength\
    \ - longestPalindromeSuffixLength])\n        let characterStringPrefixLength =\
    \ characterStringPrefix.length\n        let characterStringSuffixLength = characterStringSuffix.length\n\
    \n        if characterStringLength > longestPalindromeLength {\n            longestPalindrome\
    \ = characterString\n            longestPalindromeLength = characterStringLength\n\
    \            longestPalindromePrefixLength = characterStringPrefixLength\n   \
    \         longestPalindromeSuffixLength = characterStringSuffixLength\n      \
    \      longestPalindromePrefixString = characterStringPrefix\n            longestPalindromeSuffixString\
    \ = characterStringSuffix\n        }\n    }\n\n    let longestPalindromePrefix\
    \ = String(longestPalindrome[longestPalindromePrefixLength..<longestPalindromeLength])\n\
    \    let longestPalindromeSuffix = String(longestPalindrome[longestPalindromeLength..<longestPalindromeLength\
    \ - longestPalindromeSuffixLength])\n    let longestPalindromePrefixLength = longestPalindromePrefix.length\n\
    \    let longestPalindromeSuffixLength = longestPalindromeSuffix.length\n\n  \
    \  return longestPalindromePrefix + String(reversedString: longestPalindromeSuffix)\
    \ + longestPalindromeSuffix", "    var result = \"\"\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    for character in string {\n\
    \        if character == character {\n            result += character\n      \
    \  } else {\n            if longestPalindromeLength == 0 {\n                longestPalindrome\
    \ = character\n                longestPalindromeLength = character.characters.count\n\
    \            } else {\n                if longestPalindromeLength < character.characters.count\
    \ {\n                    longestPalindrome = character\n                    longestPalindromeLength\
    \ = character.characters.count\n                }\n            }\n        }\n\
    \    }\n    if longestPalindromeLength > 0 {\n        let reversedString = reverseString(string:\
    \ longestPalindrome)\n        result = reversedString + result\n    }\n    return\
    \ result", "    var reversedString = string\n    var longestPalindrome = string\n\
    \    for _ in 0..<string.count {\n        let reversedSubstringReversed = reversedString.reversed()\n\
    \        let substringReversed = reversedSubstringReversed[reversedSubstringReversed.startIndex..<reversedSubstringReversed.endIndex]\n\
    \        if substringReversed == string {\n            longestPalindrome = longestPalindrome.replacingOccurrences(of:\
    \ substringReversed, with: reversedString)\n            break\n        }\n   \
    \     reversedString = reversedString.replacingOccurrences(of: substringReversed,\
    \ with: reversedString.reversed())\n    }\n    return longestPalindrome", "  \
    \  var stringToPalindrome = string\n    var longestPalindrome = stringToPalindrome\n\
    \    var longestPalindromeLength = 0\n    var longestPalindromePrefixLength =\
    \ 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromePrefixString\
    \ = \"\"\n    var longestPalindromeSuffixString = \"\"\n    var longestPalindromePrefixStringReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverse = \"\"\n    var longestPalindromePrefixStringReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseReverse = \"\"\n    var\
    \ longestPalindromePrefixStringReverseReverseReverse = \"\"\n    var longestPalindromeSuffixStringReverseReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixStringReverseReverseReverseReverse =\
    \ \"\"\n    var longestPalindromeSuffixStringReverseReverseReverseReverse = \"\
    \"\n    var longestPalindromePrefixStringReverseReverseReverseReverseReverse =\
    \ \"\"\n    var longestPalindromeSuffixStringReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixStringReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixStringReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixStringReverseReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixStringReverseReverseReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseReverseReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixStringReverseReverseReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseReverseReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixStringReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixStringReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixStringReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixStringReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseReverseReverseReverseReverseReverseReverseReverse",
  "    var longestPalindrome = string\n    var longestPalindromeLength = 0\n    var\
    \ longestPalindromePrefix: String = \"\"\n    var longestPalindromeSuffix: String\
    \ = \"\"\n    var longestPalindromePrefixLength = 0\n    var longestPalindromeSuffixLength\
    \ = 0\n    var longestPalindromePrefixReversed: String = \"\"\n    var longestPalindromeSuffixReversed:\
    \ String = \"\"\n    var longestPalindromePrefixReversedLength = 0\n    var longestPalindromeSuffixReversedLength\
    \ = 0\n    var longestPalindromePrefixReversedReversed: String = \"\"\n    var\
    \ longestPalindromeSuffixReversedReversed: String = \"\"\n    var longestPalindromePrefixReversedReversedLength\
    \ = 0\n    var longestPalindromeSuffixReversedReversedLength = 0\n    var longestPalindromePrefixReversedReversedReversed:\
    \ String = \"\"\n    var longestPalindromeSuffixReversedReversedReversed: String\
    \ = \"\"\n    var longestPalindromePrefixReversedReversedReversedLength = 0\n\
    \    var longestPalindromeSuffixReversedReversedReversedLength = 0\n    var longestPalindromePrefixReversedReversedReversedReversed:\
    \ String = \"\"\n    var longestPalindromeSuffixReversedReversedReversedReversed:\
    \ String = \"\"\n    var longestPalindromePrefixReversedReversedReversedReversedLength\
    \ = 0\n    var longestPalindromeSuffixReversedReversedReversedReversedLength =\
    \ 0\n    var longestPalindromePrefixReversedReversedReversedReversedReversed:\
    \ String = \"\"\n    var longestPalindromeSuffixReversedReversedReversedReversedReversed:\
    \ String = \"\"\n    var longestPalindromePrefixReversedReversedReversedReversedLength\
    \ = 0\n    var longestPalindromeSuffixReversedReversedReversedReversedLength =\
    \ 0\n    var longestPalindromePrefixReversedReversedReversedReversedReversedReversed:\
    \ String = \"\"\n    var longestPalindromeSuffixReversedReversedReversedReversedReversedReversed:\
    \ String = \"\"\n    var longestPalindromePrefixReversedReversedReversedReversedReversedLength\
    \ = 0\n    var longestPalindromeSuffixReversedReversedReversedReversedReversedLength\
    \ = 0\n    var longestPalindromePrefixReversedReversedReversedReversedReversedReversed:\
    \ String = \"\"\n    var longestPalindromeSuffixReversedReversedReversedReversedReversedReversed:\
    \ String = \"\"\n    var longestPalindromePrefixReversed", "    var stringToReturn\
    \ = string\n    var longestPalindrome = stringToReturn\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromePrefix: String = \"\"\n    var longestPalindromeSuffix:\
    \ String = \"\"\n    var longestPalindromePostfix: String = \"\"\n\n    for character\
    \ in stringToReturn {\n        if character == \" \" {\n            longestPalindromeLength\
    \ += 1\n        }\n    }\n\n    for character in stringToReturn {\n        if\
    \ character == \" \" {\n            longestPalindromeLength += 1\n        }\n\
    \        if character == stringToReturn.last {\n            longestPalindromeLength\
    \ += 1\n        }\n    }\n\n    for character in stringToReturn {\n        if\
    \ character == \" \" {\n            longestPalindromeLength += 1\n        }\n\
    \        if character == stringToReturn.last {\n            longestPalindromeLength\
    \ += 1\n        }\n        if character == stringToReturn.first {\n          \
    \  longestPalindromeLength += 1\n        }\n    }\n\n    for character in stringToReturn\
    \ {\n        if character == \" \" {\n            longestPalindromeLength += 1\n\
    \        }\n        if character == stringToReturn.last {\n            longestPalindromeLength\
    \ += 1\n        }\n        if character == stringToReturn.first {\n          \
    \  longestPalindromeLength += 1\n        }\n        if character == stringToReturn.first\
    \ {\n            longestPalindromeLength += 1\n        }\n    }\n\n    for character\
    \ in stringToReturn {\n        if character == \" \" {\n            longestPalindromeLength\
    \ += 1\n        }\n        if character == stringToReturn.last {\n           \
    \ longestPalindromeLength += 1\n        }\n        if character == stringToReturn.first\
    \ {\n            longestPalindromeLength += 1\n        }\n        if character\
    \ == stringToReturn.first {\n            longestPalindromeLength += 1\n      \
    \  }\n        if character == stringToReturn.first {\n            longestPalindromeLength\
    \ += 1\n        }\n    }\n\n    for character in stringToReturn {\n        if\
    \ character == \" \" {\n            longestPalindromeLength += 1\n        }\n\
    \        if character == stringToReturn.last {\n            longestPalindromeLength\
    \ += 1\n        }\n        if character == stringToReturn.first {\n          \
    \  longestPalindromeLength += 1\n        }\n        if character == stringToReturn.first\
    \ {\n            longestPalindromeLength += 1\n        }\n        if character\
    \ == stringToReturn.first {\n            longestPalin", "    let stringLength\
    \ = string.characters.count\n    let longestPalindromeLength = stringLength /\
    \ 2\n    let longestPalindrome = string[longestPalindromeLength..<stringLength]\n\
    \    let longestPalindromeReversed = longestPalindrome.reversed()\n    let longestPalindromeSuffixReversed\
    \ = longestPalindromeReversed.suffix(stringLength)\n    let longestPalindromeSuffixReversedString\
    \ = String(longestPalindromeSuffixReversed)\n    let longestPalindromeSuffixReversedStringLength\
    \ = longestPalindromeSuffixReversedString.characters.count\n    let longestPalindromeSuffixReversedStringReversed\
    \ = longestPalindromeSuffixReversedString.reversed()\n    let longestPalindromeSuffixReversedStringReversedString\
    \ = String(longestPalindromeSuffixReversedStringReversed)\n    let longestPalindromeSuffixReversedStringReversedStringLength\
    \ = longestPalindromeSuffixReversedStringReversedString.characters.count\n   \
    \ let longestPalindromeSuffixReversedStringReversedStringReversedString = longestPalindromeSuffixReversedStringReversedString.reversed()\n\
    \    let longestPalindromeSuffixReversedStringReversedStringReversedStringLength\
    \ = longestPalindromeSuffixReversedStringReversedStringReversedString.characters.count\n\
    \    let longestPalindromeSuffixReversedStringReversedStringReversedStringReversedString\
    \ = longestPalindromeSuffixReversedStringReversedStringReversedString.reversed()\n\
    \    let longestPalindromeSuffixReversedStringReversedStringReversedStringReversedStringLength\
    \ = longestPalindromeSuffixReversedStringReversedStringReversedStringReversedString.characters.count\n\
    \    let longestPalindromeSuffixReversedStringReversedStringReversedStringReversedStringReversedStringLength\
    \ = longestPalindromeSuffixReversedStringReversedStringReversedStringReversedStringReversedString.characters.count\n\
    \    let longestPalindromeSuffixReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringLength\
    \ = longestPalindromeSuffixReversedStringReversedStringReversedStringReversedStringReversedStringReversedString.characters.count\n\
    \    let longestPalindromeSuffixReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringLength\
    \ = longestPalindromeSuffixReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversedString.characters.count\n\
    \    let longestPalindromeSuffixReversedString", "    var stringToReturn = string\n\
    \    var longestPalindrome = \"\"\n    var longestPalindromeLength = 0\n    var\
    \ longestPalindromeStartIndex = 0\n    var longestPalindromeEndIndex = 0\n   \
    \ for stringIndex in 0..<string.characters.count {\n        let stringCharacter\
    \ = string.characters[stringIndex]\n        if stringCharacter == stringToReturn.characters.last!\
    \ {\n            longestPalindromeLength += 1\n            if longestPalindromeLength\
    \ > longestPalindromeEndIndex {\n                longestPalindromeEndIndex = stringIndex\n\
    \            }\n        } else {\n            if longestPalindromeLength > longestPalindromeStartIndex\
    \ {\n                longestPalindromeStartIndex = stringIndex\n            }\n\
    \            longestPalindromeLength = 0\n        }\n    }\n    if longestPalindromeLength\
    \ > longestPalindromeEndIndex {\n        longestPalindromeLength -= longestPalindromeEndIndex\n\
    \        longestPalindromeEndIndex = longestPalindromeStartIndex\n    }\n    if\
    \ longestPalindromeLength > 0 {\n        longestPalindrome = String(string.characters.suffix(from:\
    \ longestPalindromeStartIndex..<longestPalindromeEndIndex))\n    }\n    return\
    \ longestPalindrome", "    var stringToReturn = string\n    var longestPalindromeLength\
    \ = 0\n    for stringToCheck in string.characters {\n        if stringToCheck\
    \ == stringToReturn.characters.last {\n            longestPalindromeLength +=\
    \ 1\n        } else {\n            longestPalindromeLength = 0\n        }\n  \
    \      if longestPalindromeLength > stringToReturn.characters.count {\n      \
    \      stringToReturn = stringToReturn + stringToCheck\n        }\n    }\n   \
    \ return stringToReturn", "    var stringToReturn = string\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    var longestPalindromeIndex\
    \ = 0\n    var longestPalindromeSuffixIndex = 0\n    var longestPalindromeSuffixLength\
    \ = 0\n    var longestPalindromeSuffixString = \"\"\n    var longestPalindromeSuffixStringLength\
    \ = 0\n    var longestPalindromeSuffixStringReverse = \"\"\n    var longestPalindromeSuffixStringReverseLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseReverse = \"\"\n    var longestPalindromeSuffixStringReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseReverseIndex = 0\n    var longestPalindromeSuffixStringReverseReverseIndexLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseReverseIndex = 0\n    var longestPalindromeSuffixStringReverseReverseIndexLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseReverseIndex = 0\n    var longestPalindromeSuffixStringReverseReverseIndexLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseReverseIndex = 0\n    var longestPalindromeSuffixStringReverseReverseIndexLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseReverseIndex = 0\n    var longestPalindromeSuffixStringReverseReverseIndexLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseReverseIndex = 0\n    var longestPalindromeSuffixStringReverseReverseIndexLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseReverseIndex = 0\n    var longestPalindromeSuffixStringReverseReverseIndexLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseReverseIndex = 0\n    var longestPalindromeSuffixStringReverseReverseIndexLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseReverseIndex = 0\n    var longestPalindromeSuffixStringReverseReverseIndexLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseReverseIndex = 0\n    var longestPalindromeSuffixStringReverseReverseIndexLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseReverseIndex = 0\n    var longestPalindromeSuffixStringReverseReverseIndexLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseReverseIndex = 0\n    var longestPalindromeSuffixStringReverseReverseIndexLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseReverseIndex = 0\n    var longestPalindromeSuffixStringReverseReverseIndexLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseReverseIndex = 0\n    var longestPalindromeSuffixStringReverseReverseIndexLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseReverseIndex = 0", "    var\
    \ reversedString = \"\"\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromeIndex = 0\n    for index in 0..<string.characters.count\
    \ {\n        let character = string.characters[index]\n        let reversedCharacter\
    \ = reverseString(character)\n        if character == reversedCharacter {\n  \
    \          reversedString += character\n            longestPalindromeLength +=\
    \ 1\n            if longestPalindromeLength > longestPalindromeIndex {\n     \
    \           longestPalindrome = reversedString\n                longestPalindromeIndex\
    \ = longestPalindromeLength\n            }\n        } else {\n            reversedString\
    \ += character\n        }\n    }\n    return longestPalindrome", "    var stringToReturn\
    \ = string\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    for stringToCheck in string.characters {\n        if stringToCheck\
    \ == stringToReturn.characters.last {\n            longestPalindrome = stringToCheck\n\
    \            longestPalindromeLength = stringToCheck.characters.count\n      \
    \  }\n    }\n    if longestPalindromeLength > 0 {\n        let longestPalindromePrefix\
    \ = stringToReturn.characters.prefix(longestPalindromeLength)\n        let longestPalindromeSuffix\
    \ = stringToReturn.characters.suffix(longestPalindromeLength)\n        let reverseOfLongestPalindromePrefix\
    \ = longestPalindromePrefix.reversed()\n        let reverseOfLongestPalindromeSuffix\
    \ = longestPalindromeSuffix.reversed()\n        stringToReturn = stringToReturn\
    \ + reverseOfLongestPalindromePrefix + reverseOfLongestPalindromeSuffix\n    }\n\
    \    return stringToReturn", "    let longestPalindrome = longestPalindrome(string:\
    \ string)\n    let reversedString = reverseString(string: string)\n    return\
    \ longestPalindrome + reversedString", "    var stringToReturn = \"\"\n    var\
    \ longestPalindrome = \"\"\n    var longestPalindromeLength = 0\n    var longestPalindromePrefix\
    \ = \"\"\n    var longestPalindromeSuffix = \"\"\n    var longestPalindromePostfix\
    \ = \"\"\n    var longestPalindromePostfixLength = 0\n\n    for character in string\
    \ {\n        if character == \" \" {\n            stringToReturn += character\n\
    \        } else {\n            if longestPalindromeLength == 0 {\n           \
    \     longestPalindrome = character\n                longestPalindromeLength =\
    \ character.characters.count\n                longestPalindromePrefix = string\n\
    \                longestPalindromeSuffix = string\n                longestPalindromePostfix\
    \ = string\n                longestPalindromePostfixLength = longestPalindromeLength\n\
    \            } else {\n                if longestPalindromeLength < character.characters.count\
    \ {\n                    longestPalindrome = character\n                    longestPalindromeLength\
    \ = character.characters.count\n                    longestPalindromePrefix =\
    \ string\n                    longestPalindromeSuffix = string\n             \
    \       longestPalindromePostfix = string\n                    longestPalindromePostfixLength\
    \ = longestPalindromeLength\n                }\n            }\n        }\n   \
    \ }\n\n    if longestPalindromeLength == 0 {\n        return string\n    }\n\n\
    \    if longestPalindromeLength > longestPalindromePostfixLength {\n        longestPalindromePostfix\
    \ = string.reverse()\n    }\n\n    stringToReturn += longestPalindrome\n    stringToReturn\
    \ += longestPalindromePrefix\n    stringToReturn += longestPalindromeSuffix\n\
    \    stringToReturn += longestPalindromePostfix\n    stringToReturn += longestPalindromePostfix\n\
    \    return stringToReturn", "    var string = string\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    var longestPalindromePrefixLength\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromePrefixString\
    \ = \"\"\n    var longestPalindromeSuffixString = \"\"\n    var longestPalindromeString\
    \ = \"\"\n    var longestPalindromeStringLength = 0\n    var longestPalindromeStringPrefixLength\
    \ = 0\n    var longestPalindromeStringSuffixLength = 0\n    var longestPalindromeStringPrefixString\
    \ = \"\"\n    var longestPalindromeStringSuffixString = \"\"\n    var longestPalindromeStringString\
    \ = \"\"\n    var longestPalindromeStringStringLength = 0\n    var longestPalindromeStringStringPrefixLength\
    \ = 0\n    var longestPalindromeStringStringSuffixLength = 0\n    var longestPalindromeStringStringPrefixString\
    \ = \"\"\n    var longestPalindromeStringStringSuffixString = \"\"\n    var longestPalindromeStringStringString\
    \ = \"\"\n    var longestPalindromeStringStringStringLength = 0\n    var longestPalindromeStringStringStringPrefixLength\
    \ = 0\n    var longestPalindromeStringStringStringSuffixLength = 0\n    var longestPalindromeStringStringStringPrefixString\
    \ = \"\"\n    var longestPalindromeStringStringStringSuffixString = \"\"\n   \
    \ var longestPalindromeStringStringStringString = \"\"\n    var longestPalindromeStringStringStringStringLength\
    \ = 0\n    var longestPalindromeStringStringStringStringPrefixLength = 0\n   \
    \ var longestPalindromeStringStringStringStringSuffixLength = 0\n    var longestPalindromeStringStringStringStringPrefixString\
    \ = \"\"\n    var longestPalindromeStringStringStringStringSuffixString = \"\"\
    \n    var longestPalindromeStringStringStringStringString = \"\"\n    var longestPalindromeStringStringStringStringStringLength\
    \ = 0\n    var longestPalindromeStringStringStringStringStringPrefixLength = 0\n\
    \    var longestPalindromeStringStringStringStringStringSuffixLength = 0\n   \
    \ var longestPalindromeStringStringStringStringStringPrefixString = \"\"\n   \
    \ var longestPalindromeStringStringStringStringStringSuffixString = \"\"\n   \
    \ var longestPalindromeStringStringStringStringStringString = \"\"\n    var longestPalindromeStringStringStringStringStringStringLength\
    \ = 0\n    var longestPalindromeStringStringStringStringStringPrefixLength = 0\n\
    \    var longestPalindromeStringStringStringStringStringSuffixLength = 0\n   \
    \ var longestPalindromeStringStringStringStringStringStringPrefixString = \"\"\
    \n    var ", "    var result = \"\"\n    var longestPalindrome = \"\"\n    var\
    \ longestPalindromeLength = 0\n    for character in string {\n        if character\
    \ == character {\n            result += character\n        } else {\n        \
    \    if longestPalindromeLength < len(longestPalindrome) {\n                longestPalindrome\
    \ = result\n                longestPalindromeLength = len(longestPalindrome)\n\
    \            }\n            result = \"\"\n        }\n    }\n    if longestPalindromeLength\
    \ < len(longestPalindrome) {\n        longestPalindrome = result\n        longestPalindromeLength\
    \ = len(longestPalindrome)\n    }\n    return longestPalindrome", "    let reverse\
    \ = string.reversed()\n    let longestPalindrome = string.prefix(longestPalindrome(string))\n\
    \    return longestPalindrome + reverse", "    var stringToPalindrome = string\n\
    \    var longestPalindrome = string\n    var longestPalindromeLength = 0\n   \
    \ var longestPalindromePrefix = \"\"\n    var longestPalindromeSuffix = \"\"\n\
    \    var longestPalindromePostfixLength = 0\n    var longestPalindromePostfix\
    \ = \"\"\n\n    for stringToPalindrome.hasPrefix(stringToPalindrome) {\n     \
    \   let stringPrefix = stringToPalindrome.prefix(stringToPalindrome.startIndex)\n\
    \        let stringSuffix = stringToPalindrome.suffix(stringToPalindrome.startIndex)\n\
    \        let stringToPalindromePrefix = stringPrefix.reversed()\n        let stringToPalindromeSuffix\
    \ = stringSuffix.reversed()\n\n        if stringToPalindromePrefix.isPalindrome\
    \ {\n            longestPalindromePrefix = stringPrefix\n            longestPalindromePostfixLength\
    \ = stringToPalindromePrefix.count\n            longestPalindromePostfix = stringToPalindromePrefix\n\
    \            longestPalindromeLength += stringToPalindromePrefix.count\n     \
    \   } else if stringToPalindromeSuffix.isPalindrome {\n            longestPalindromeSuffix\
    \ = stringSuffix\n            longestPalindromePostfixLength = stringToPalindromeSuffix.count\n\
    \            longestPalindromePostfix = stringToPalindromeSuffix\n           \
    \ longestPalindromeLength += stringToPalindromeSuffix.count\n        } else {\n\
    \            longestPalindromeLength += stringToPalindrome.count\n        }\n\
    \    }\n\n    if longestPalindromeLength > longestPalindromePostfixLength {\n\
    \        longestPalindrome = longestPalindromePrefix + longestPalindromeSuffix.reversed()\n\
    \    }\n\n    return longestPalindrome", "    var stringToReturn = string\n  \
    \  var longestPalindrome = string\n    var longestPalindromeLength = 0\n    var\
    \ longestPalindromePrefix = \"\"\n    var longestPalindromeSuffix = \"\"\n   \
    \ var longestPalindromePostfixLength = 0\n    var longestPalindromePostfix = \"\
    \"\n    var longestPalindromePostfixReverse = \"\"\n    var longestPalindromePostfixReverseLength\
    \ = 0\n    var longestPalindromePostfixReversePrefix = \"\"\n    var longestPalindromePostfixReverseSuffix\
    \ = \"\"\n    var longestPalindromePostfixReversePostfix = \"\"\n    var longestPalindromePostfixReversePostfixLength\
    \ = 0\n    var longestPalindromePostfixReversePostfixReverse = \"\"\n    var longestPalindromePostfixReversePostfixReverseLength\
    \ = 0\n    var longestPalindromePostfixReversePostfixReversePrefix = \"\"\n  \
    \  var longestPalindromePostfixReversePostfixReverseSuffix = \"\"\n    var longestPalindromePostfixReversePostfixReversePostfix\
    \ = \"\"\n    var longestPalindromePostfixReversePostfixReversePostfixLength =\
    \ 0\n    var longestPalindromePostfixReversePostfixReversePostfixReverse = \"\"\
    \n    var longestPalindromePostfixReversePostfixReversePostfixReverseLength =\
    \ 0\n    var longestPalindromePostfixReversePostfixReversePostfixReversePrefix\
    \ = \"\"\n    var longestPalindromePostfixReversePostfixReversePostfixReverseSuffix\
    \ = \"\"\n    var longestPalindromePostfixReversePostfixReversePostfixReversePostfix\
    \ = \"\"\n    var longestPalindromePostfixReversePostfixReversePostfixReversePostfixLength\
    \ = 0\n    var longestPalindromePostfixReversePostfixReversePostfixReversePostfixReverse\
    \ = \"\"\n    var longestPalindromePostfixReversePostfixReversePostfixReversePostfixReverseLength\
    \ = 0\n    var longestPalindromePostfixReversePostfixReversePostfixReversePostfixReversePrefix\
    \ = \"\"\n    var longestPalindromePostfixReversePostfixReversePostfixReversePostfixReverseSuffix\
    \ = \"\"\n    var longestPalindromePostfixReversePostfixReversePostfixReversePostfixReversePostfix\
    \ = \"\"\n    var longestPalindromePostfixReversePostfixReversePostfixReversePostfixReversePostfixLength\
    \ = 0\n    var longestPalindromePostfixReversePostfixReversePostfixReversePostfixReversePostfixReverse\
    \ = \"\"\n    var longestPalindrome", "    var stringToReturn = string\n    var\
    \ longestPalindrome = \"\"\n    var longestPalindromeLength = 0\n    var longestPalindromeIndex\
    \ = 0\n    var longestPalindromePrefixIndex = 0\n    var longestPalindromeSuffixIndex\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromeSuffixIndex\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromeSuffixIndex\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromeSuffixIndex\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromeSuffixIndex\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromeSuffixIndex\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromeSuffixIndex\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromeSuffixIndex\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromeSuffixIndex\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromeSuffixIndex\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromeSuffixIndex\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromeSuffixIndex\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromeSuffixIndex\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromeSuffixIndex\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromeSuffixIndex\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromeSuffixIndex\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromeSuffixIndex\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromeSuffixIndex\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromeSuffixIndex\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromeSuffixIndex\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromeSuffixIndex\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromeSuffixIndex\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromeSuffixIndex\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromeSuffixIndex\
    \ = 0", "    var longestPalindrome = string\n    var longestPalindromeLength =\
    \ 0\n    var longestPalindromePrefix: String = \"\"\n    for character in string\
    \ {\n        if character == longestPalindrome[longestPalindromeLength] {\n  \
    \          longestPalindromeLength += 1\n        } else {\n            longestPalindromeLength\
    \ = 0\n        }\n        if longestPalindromeLength > longestPalindromePrefix.characters.count\
    \ {\n            longestPalindromePrefix = String(character)\n        }\n    }\n\
    \    for character in string {\n        if character == longestPalindrome[longestPalindromeLength]\
    \ {\n            longestPalindromeLength += 1\n        } else {\n            longestPalindromeLength\
    \ = 0\n        }\n        if longestPalindromeLength > longestPalindromePrefix.characters.count\
    \ {\n            longestPalindromePrefix = String(character)\n        }\n    }\n\
    \    longestPalindromeLength -= 1\n    longestPalindrome = longestPalindromePrefix\
    \ + String(reverse(string[longestPalindromeLength..<string.characters.count]))\n\
    \    return longestPalindrome", "    var reversedString = \"\"\n    var longestPalindrome\
    \ = \"\"\n    for character in string {\n        reversedString = reversedString\
    \ + String(character)\n        if character == string[string.index(before: reversedString)]\
    \ {\n            longestPalindrome = longestPalindrome + String(character)\n \
    \       }\n    }\n    return longestPalindrome", "    let longestPalindrome =\
    \ longestPalindrome(string)\n    let reversedString = reverseString(string, longestPalindrome)\n\
    \    return reversedString + longestPalindrome", "    var reversedString = string\n\
    \    var longestPalindrome = string\n    for _ in 0..<string.count {\n       \
    \ let reversedSubstring = reversedString.substringFromIndex(longestPalindrome.endIndex)\n\
    \        if longestPalindrome.hasPrefix(reversedSubstring) {\n            longestPalindrome\
    \ = longestPalindrome.appending(reversedSubstring)\n        } else {\n       \
    \     longestPalindrome = longestPalindrome.appending(reversedString)\n      \
    \      break\n        }\n    }\n    return longestPalindrome", "    var stringToReturn\
    \ = string\n    var longestPalindrome = String()\n    var longestPalindromeLength\
    \ = String()\n    var longestPalindromePrefix = String()\n    var longestPalindromeSuffix\
    \ = String()\n    var longestPalindromePrefixLength = String()\n    var longestPalindromeSuffixLength\
    \ = String()\n    var longestPalindromePostfix = String()\n    var longestPalindromePostfixLength\
    \ = String()\n    var longestPalindromePostfixReversed = String()\n    var longestPalindromePostfixReversedLength\
    \ = String()\n    var longestPalindromePostfixReversedReversed = String()\n  \
    \  var longestPalindromePostfixReversedReversedLength = String()\n    var longestPalindromePostfixReversedReversedReversed\
    \ = String()\n    var longestPalindromePostfixReversedReversedReversedLength =\
    \ String()\n    var longestPalindromePostfixReversedReversedReversedReversedReversed\
    \ = String()\n    var longestPalindromePostfixReversedReversedReversedReversedReversedLength\
    \ = String()\n    var longestPalindromePostfixReversedReversedReversedReversedReversedReversed\
    \ = String()\n    var longestPalindromePostfixReversedReversedReversedReversedReversedReversedLength\
    \ = String()\n    var longestPalindromePostfixReversedReversedReversedReversedReversedReversedReversed\
    \ = String()\n    var longestPalindromePostfixReversedReversedReversedReversedReversedReversedReversedLength\
    \ = String()\n    var longestPalindromePostfixReversedReversedReversedReversedReversedReversedReversed\
    \ = String()\n    var longestPalindromePostfixReversedReversedReversedReversedReversedReversedReversedLength\
    \ = String()\n    var longestPalindromePostfixReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = String()\n    var longestPalindromePostfixReversedReversedReversedReversedReversedReversedReversedReversedLength\
    \ = String()\n    var longestPalindromePostfixReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = String()\n    var longestPalindromePostfixReversedReversedReversedReversedReversedReversedReversedReversedLength\
    \ = String()\n    var longestPalindromePostfixReversedReversedReversedReversedReversedReversedReversed",
  "    var palindrome = string\n    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromePrefix: String = \"\"\n    var longestPalindromeSuffix:\
    \ String = \"\"\n\n    for character in string {\n        if character == character\
    \ {\n            palindrome = palindrome[1...].appending(character)\n        }\
    \ else {\n            longestPalindromeLength = palindrome.count\n           \
    \ longestPalindromePrefix = palindrome[longestPalindromeLength...].appending(character)\n\
    \            longestPalindromeSuffix = palindrome[longestPalindromeLength...].appending(character)\n\
    \            palindrome = palindrome[longestPalindromeLength...].appending(character)\n\
    \        }\n    }\n\n    if longestPalindromeLength > longestPalindromePrefix.count\
    \ {\n        longestPalindrome = longestPalindromePrefix\n    }\n\n    if longestPalindromeLength\
    \ > longestPalindromeSuffix.count {\n        longestPalindrome = longestPalindromeSuffix\n\
    \    }\n\n    return longestPalindrome", "    var result = \"\"\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    for character in string {\n\
    \        if character == character {\n            longestPalindromeLength += 1\n\
    \            if longestPalindromeLength > longestPalindrome.length {\n       \
    \         longestPalindrome = string\n            }\n        } else {\n      \
    \      if longestPalindromeLength > longestPalindrome.length {\n             \
    \   longestPalindrome = string\n            }\n            longestPalindromeLength\
    \ = 0\n        }\n    }\n    for character in string {\n        if character ==\
    \ character {\n            longestPalindromeLength += 1\n            if longestPalindromeLength\
    \ > longestPalindrome.length {\n                longestPalindrome = string\n \
    \           }\n        } else {\n            if longestPalindromeLength > longestPalindrome.length\
    \ {\n                longestPalindrome = string\n            }\n            longestPalindromeLength\
    \ = 0\n        }\n    }\n    for character in string {\n        if character ==\
    \ character {\n            longestPalindromeLength += 1\n            if longestPalindromeLength\
    \ > longestPalindrome.length {\n                longestPalindrome = string\n \
    \           }\n        } else {\n            if longestPalindromeLength > longestPalindrome.length\
    \ {\n                longestPalindrome = string\n            }\n            longestPalindromeLength\
    \ = 0\n        }\n    }\n    for character in string {\n        if character ==\
    \ character {\n            longestPalindromeLength += 1\n            if longestPalindromeLength\
    \ > longestPalindrome.length {\n                longestPalindrome = string\n \
    \           }\n        } else {\n            if longestPalindromeLength > longestPalindrome.length\
    \ {\n                longestPalindrome = string\n            }\n            longestPalindromeLength\
    \ = 0\n        }\n    }\n    for character in string {\n        if character ==\
    \ character {\n            longestPalindromeLength += 1\n            if longestPalindromeLength\
    \ > longestPalindrome.length {\n                longestPalindrome = string\n \
    \           }\n        } else {\n            if longestPalindromeLength > longestPalindrome.length\
    \ {\n                longestPalindrome = string\n            }\n            longestPalindromeLength\
    \ = 0\n        }\n    }\n    for character in string {\n        if character ==\
    \ character {\n            longestPalindromeLength += 1\n            if longestPalindromeLength\
    \ > longestPalindrome.length {\n                longestPalin", "    var reversedString\
    \ = string\n    var longestPalindrome = \"\"\n    for index in 0..<string.characters.count\
    \ {\n        let char = string.characters[index]\n        let reversedChar = reversedString.characters[index]\n\
    \        if char == reversedChar {\n            longestPalindrome = longestPalindrome\
    \ + char\n        } else {\n            longestPalindrome = longestPalindrome\
    \ + reversedChar\n        }\n    }\n    return longestPalindrome", "    var string\
    \ = string\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromeIndex = 0\n    var longestPalindromePrefix = \"\
    \"\n    var longestPalindromeSuffix = \"-\"\n    var longestPalindromePostfix\
    \ = \"-\"\n    var longestPalindromePostfixLength = 0\n    var longestPalindromePostfixIndex\
    \ = 0\n    var longestPalindromePostfixPrefix = \"\"\n    var longestPalindromePostfixSuffix\
    \ = \"-\"\n    var longestPalindromePostfixPostfix = \"-\"\n    var longestPalindromePostfixPostfixLength\
    \ = 0\n    var longestPalindromePostfixPostfixIndex = 0\n    var longestPalindromePostfixPostfixPrefix\
    \ = \"\"\n    var longestPalindromePostfixPostfixSuffix = \"-\"\n    var longestPalindromePostfixPostfixPostfix\
    \ = \"-\"\n    var longestPalindromePostfixPostfixPostfixLength = 0\n    var longestPalindromePostfixPostfixPostfixIndex\
    \ = 0\n    var longestPalindromePostfixPostfixPostfixPrefix = \"\"\n    var longestPalindromePostfixPostfixPostfixSuffix\
    \ = \"-\"\n    var longestPalindromePostfixPostfixPostfixPostfix = \"-\"\n   \
    \ var longestPalindromePostfixPostfixPostfixPostfixLength = 0\n    var longestPalindromePostfixPostfixPostfixPostfixIndex\
    \ = 0\n    var longestPalindromePostfixPostfixPostfixPostfixPrefix = \"\"\n  \
    \  var longestPalindromePostfixPostfixPostfixPostfixSuffix = \"-\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfix\
    \ = \"-\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixLength\
    \ = 0\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixIndex = 0\n\
    \    var longestPalindromePostfixPostfixPostfixPostfixPostfixPrefix = \"\"\n \
    \   var longestPalindromePostfixPostfixPostfixPostfixPostfixSuffix = \"-\"\n \
    \   var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfix = \"-\"\n\
    \    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixLength = 0\n\
    \    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixIndex = 0\n\
    \    var longestPalindromePostfixPostfixPostfixPostfix", "    var string = string\n\
    \    var longestPalindrome = \"\"\n    var longestPalindromeLength = 0\n    var\
    \ longestPalindromeStartIndex = 0\n    var longestPalindromeEndIndex = 0\n   \
    \ var longestPalindromeStartIndex = 0\n    var longestPalindromeEndIndex = 0\n\
    \    var longestPalindromeStartIndex = 0\n    var longestPalindromeEndIndex =\
    \ 0\n    var longestPalindromeStartIndex = 0\n    var longestPalindromeEndIndex\
    \ = 0\n    var longestPalindromeStartIndex = 0\n    var longestPalindromeEndIndex\
    \ = 0\n    var longestPalindromeStartIndex = 0\n    var longestPalindromeEndIndex\
    \ = 0\n    var longestPalindromeStartIndex = 0\n    var longestPalindromeEndIndex\
    \ = 0\n    var longestPalindromeStartIndex = 0\n    var longestPalindromeEndIndex\
    \ = 0\n    var longestPalindromeStartIndex = 0\n    var longestPalindromeEndIndex\
    \ = 0\n    var longestPalindromeStartIndex = 0\n    var longestPalindromeEndIndex\
    \ = 0\n    var longestPalindromeStartIndex = 0\n    var longestPalindromeEndIndex\
    \ = 0\n    var longestPalindromeStartIndex = 0\n    var longestPalindromeEndIndex\
    \ = 0\n    var longestPalindromeStartIndex = 0\n    var longestPalindromeEndIndex\
    \ = 0\n    var longestPalindromeStartIndex = 0\n    var longestPalindromeEndIndex\
    \ = 0\n    var longestPalindromeStartIndex = 0\n    var longestPalindromeEndIndex\
    \ = 0\n    var longestPalindromeStartIndex = 0\n    var longestPalindromeEndIndex\
    \ = 0\n    var longestPalindromeStartIndex = 0\n    var longestPalindromeEndIndex\
    \ = 0\n    var longestPalindromeStartIndex = 0\n    var longestPalindromeEndIndex\
    \ = 0\n    var longestPalindromeStartIndex = 0\n    var longestPalindromeEndIndex\
    \ = 0\n    var longestPalindromeStartIndex = 0\n    var longestPalindromeEndIndex\
    \ = 0\n    var longestPalindromeStartIndex = 0\n    var longestPalindromeEndIndex\
    \ = 0\n    var longestPalindromeStartIndex = 0\n    var longestPalindromeEndIndex\
    \ = 0\n    var longestPalindromeStartIndex = 0\n    var longestPalindromeEndIndex\
    \ = 0\n    var longestPalindromeStartIndex = 0\n    var longestPalindromeEndIndex\
    \ = 0\n    var longestPalindromeStartIndex = 0\n    var ", "    var stringToReturn\
    \ = \"\"\n    var longestPalindrome = \"\"\n    var longestPalindromeLength =\
    \ 0\n    var longestPalindromePrefix = \"\"\n    var longestPalindromeSuffix =\
    \ \"\"\n    var longestPalindromePrefixLength = 0\n    var longestPalindromeSuffixLength\
    \ = 0\n    var longestPalindromeSuffixReverse = \"\"\n    var longestPalindromePrefixReverse\
    \ = \"\"\n    var longestPalindromePrefixReverseLength = 0\n    var longestPalindromeSuffixReverseLength\
    \ = 0\n    var longestPalindromePrefixReverseReverse = \"\"\n    var longestPalindromePrefixReverseReverseLength\
    \ = 0\n    var longestPalindromePrefixReverseReverseString = \"\"\n    var longestPalindromeSuffixReverseString\
    \ = \"\"\n    var longestPalindromeSuffixReverseStringLength = 0\n    var longestPalindromePrefixReverseString\
    \ = \"\"\n    var longestPalindromePrefixReverseStringLength = 0\n    var longestPalindromePrefixReverseStringReverse\
    \ = \"\"\n    var longestPalindromePrefixReverseStringReverseLength = 0\n    var\
    \ longestPalindromePrefixReverseStringReverseReverse = \"\"\n    var longestPalindromePrefixReverseStringReverseReverseLength\
    \ = 0\n    var longestPalindromePrefixReverseStringReverseReverseString = \"\"\
    \n    var longestPalindromeSuffixReverseString = \"\"\n    var longestPalindromeSuffixReverseStringLength\
    \ = 0\n    var longestPalindromeSuffixReverseStringReverse = \"\"\n    var longestPalindromeSuffixReverseStringReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseStringReverseReverse = \"\"\n   \
    \ var longestPalindromeSuffixReverseStringReverseReverseLength = 0\n    var longestPalindromeSuffixReverseStringReverseReverseString\
    \ = \"\"\n    var longestPalindromePrefixReverseString = \"\"\n    var longestPalindromePrefixReverseStringLength\
    \ = 0\n    var longestPalindromePrefixReverseStringReverse = \"\"\n    var longestPalindromePrefixReverseStringReverseLength\
    \ = 0\n    var longestPalindromePrefixReverseStringReverseReverse = \"\"\n   \
    \ var longestPalindromePrefixReverseStringReverseReverseLength = 0\n    var longestPalindromePrefixReverseStringReverseReverseString\
    \ = \"\"\n    var longestPalindromeSuffixReverseString = \"\"\n    var longestPalindromeSuffixReverseStringLength\
    \ = 0\n    var longestPalindromeSuffixReverseStringReverse = \"\"\n    var longestPalindromeSuffixReverseStringReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseStringReverseReverse = \"\"\n   \
    \ var longestPalindromeSuffixReverseStringReverseReverseLength = 0\n    var longestPalindromeSuffix",
  "    let longestPalindrome = longestPalindrome(string)\n    let reversedLongestPalindrome\
    \ = reverseString(longestPalindrome)\n    return reversedLongestPalindrome + longestPalindrome",
  "    let longestPalindrome = longestPalindrome(string)\n    let reversedString =\
    \ reverseString(string)\n    return reversedString + longestPalindrome", "   \
    \ let longestPalindrome = longestPalindrome(string)\n    let reversedString =\
    \ reverseString(string, longestPalindrome)\n    return reversedString + longestPalindrome",
  "    var stringToReturn = string\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    for stringToCheck in string.characters {\n        if stringToCheck\
    \ == stringToReturn.characters.last {\n            longestPalindrome = stringToReturn\n\
    \            longestPalindromeLength = stringToCheck.count\n        }\n      \
    \  if stringToCheck == stringToReturn.characters.first {\n            longestPalindrome\
    \ = stringToReturn\n            longestPalindromeLength = stringToCheck.count\n\
    \        }\n        if stringToCheck == stringToReturn.characters.first && stringToCheck\
    \ == stringToReturn.characters.last {\n            longestPalindrome = stringToReturn\n\
    \            longestPalindromeLength = stringToCheck.count\n        }\n    }\n\
    \    if longestPalindromeLength > longestPalindromeLength {\n        stringToReturn\
    \ = stringToReturn + stringToReturn.characters.reversed()\n    }\n    return stringToReturn",
  "    var palindrome = \"\"\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    for letter in string {\n        if letter == letter.reverse() {\n \
    \           palindrome += letter\n            longestPalindromeLength += 1\n \
    \           if longestPalindromeLength > longestPalindrome {\n               \
    \ longestPalindrome = longestPalindromeLength\n                longestPalindrome\
    \ = letter\n            }\n        } else {\n            palindrome += letter\n\
    \        }\n    }\n    return palindrome", "    var string = string\n    var longestPalindrome\
    \ = String()\n    var longestPalindromeLength = 0\n    var longestPalindromePrefix\
    \ = String()\n    var longestPalindromeSuffixReversed = String()\n    var longestPalindromeSuffixReversedLength\
    \ = 0\n    var longestPalindromeSuffixReversedPrefix = String()\n    var longestPalindromeSuffixReversedSuffixReversed\
    \ = String()\n    var longestPalindromeSuffixReversedSuffixReversedLength = 0\n\
    \    var longestPalindromeSuffixReversedSuffixReversedPrefix = String()\n    var\
    \ longestPalindromeSuffixReversedSuffixReversedSuffixReversed = String()\n   \
    \ var longestPalindromeSuffixReversedSuffixReversedSuffixReversedLength = 0\n\
    \    var longestPalindromeSuffixReversedSuffixReversedSuffixReversedPrefix = String()\n\
    \    var longestPalindromeSuffixReversedSuffixReversedSuffixReversedSuffixReversed\
    \ = String()\n    var longestPalindromeSuffixReversedSuffixReversedSuffixReversedSuffixReversedLength\
    \ = 0\n    var longestPalindromeSuffixReversedSuffixReversedSuffixReversedSuffixReversedPrefix\
    \ = String()\n    var longestPalindromeSuffixReversedSuffixReversedSuffixReversedSuffixReversedSuffixReversed\
    \ = String()\n    var longestPalindromeSuffixReversedSuffixReversedSuffixReversedSuffixReversedSuffixReversedLength\
    \ = 0\n    var longestPalindromeSuffixReversedSuffixReversedSuffixReversedSuffixReversedSuffixReversedPrefix\
    \ = String()\n    var longestPalindromeSuffixReversedSuffixReversedSuffixReversedSuffixReversedSuffixReversedSuffixReversed\
    \ = String()\n    var longestPalindromeSuffixReversedSuffixReversedSuffixReversedSuffixReversedSuffixReversedSuffixReversedLength\
    \ = 0\n    var longestPalindromeSuffixReversedSuffixReversedSuffixReversedSuffixReversedSuffixReversedSuffixReversedPrefix\
    \ = String()\n    var longestPalindromeSuffixReversedSuffixReversedSuffixReversedSuffixReversedSuffixReversedSuffixReversedSuffixReversed\
    \ = String()\n    var longestPalindromeSuffixReversedSuffixReversedSuffixReversedSuffixReversedSuffixReversedSuffixReversedSuffixReversedLength\
    \ = 0\n    var longestPalindromeSuffixReversedSuffixReversedSuffixReversedSuffixReversedSuffixReversedSuffixReversedSuffixReversedPrefix\
    \ = String()\n    var longestPalindromeSuffixReversedSuffixReversedSuffixReversedSuffixReversedSuffixReversedSuffixReverse",
  "    var longestPalindrome = \"\"\n    var longestPalindromeLength = 0\n    for\
    \ character in string {\n        if character == character {\n            longestPalindromeLength\
    \ += 1\n            if longestPalindromeLength > longestPalindrome.length {\n\
    \                longestPalindrome = string\n            }\n        } else {\n\
    \            longestPalindromeLength = 0\n        }\n    }\n    var reversedString\
    \ = \"\"\n    for character in longestPalindrome {\n        reversedString +=\
    \ character\n    }\n    reversedString = reversedString[longestPalindromeLength..<longestPalindromeLength\
    \ + longestPalindromeLength]\n    return reversedString + longestPalindrome",
  "    let longestPalindrome = longestPalindrome(string)\n    let reversedString =\
    \ reverseString(string: longestPalindrome)\n    return reversedString + longestPalindrome",
  "    var stringToReturn = string\n    var longestPalindrome = stringToReturn\n \
    \   var longestPalindromeLength = 0\n    for stringToReturn.characters.count >\
    \ 0 {\n        var currentLongestPalindrome = stringToReturn\n        var currentLongestPalindromeLength\
    \ = 0\n        for stringToReturn.characters.count > 0 {\n            if stringToReturn.characters.count\
    \ > longestPalindromeLength {\n                currentLongestPalindromeLength\
    \ = stringToReturn.characters.count\n                currentLongestPalindrome\
    \ = stringToReturn\n            }\n            if stringToReturn.characters.count\
    \ == 0 {\n                break\n            }\n            stringToReturn = stringToReturn.characters.reversed()\n\
    \        }\n        if currentLongestPalindromeLength > longestPalindromeLength\
    \ {\n            longestPalindrome = currentLongestPalindrome\n            longestPalindromeLength\
    \ = currentLongestPalindromeLength\n        }\n    }\n    return longestPalindrome",
  "    var stringToReturn = string\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    for index in 0..<string.characters.count {\n        let character =\
    \ string.characters[index]\n        if character == \" \" {\n            continue\n\
    \        }\n        let reversedCharacter = String(string.characters.reverse())[index]\n\
    \        if character == reversedCharacter {\n            if longestPalindromeLength\
    \ < index {\n                longestPalindrome = stringToReturn\n            \
    \    longestPalindromeLength = index\n            }\n        } else {\n      \
    \      if longestPalindromeLength > index {\n                stringToReturn =\
    \ longestPalindrome\n                longestPalindrome = stringToReturn\n    \
    \            longestPalindromeLength = index\n            }\n        }\n    }\n\
    \    return longestPalindrome", "    var string = string\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    var longestPalindromeIndex\
    \ = 0\n    var longestPalindromeSuffixIndex = 0\n    var longestPalindromeSuffixLength\
    \ = 0\n    var longestPalindromeSuffixString = \"\"\n    var longestPalindromeSuffixStringLength\
    \ = 0\n    var longestPalindromeSuffixStringIndex = 0\n    var longestPalindromeSuffixStringReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseIndex = 0\n    var longestPalindromeSuffixStringReverseLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseIndex = 0\n    var longestPalindromeSuffixStringReverseString\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseStringIndex = 0\n    var\
    \ longestPalindromeSuffixStringReverseStringLength = 0\n    var longestPalindromeSuffixStringReverseStringIndex\
    \ = 0\n    var longestPalindromeSuffixStringReverseStringReverse = \"\"\n    var\
    \ longestPalindromeSuffixStringReverseStringReverseIndex = 0\n    var longestPalindromeSuffixStringReverseStringReverseLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseStringReverseIndex = 0\n  \
    \  var longestPalindromeSuffixStringReverseStringReverseString = \"\"\n    var\
    \ longestPalindromeSuffixStringReverseStringReverseStringIndex = 0\n    var longestPalindromeSuffixStringReverseStringReverseStringLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseStringReverseStringIndex =\
    \ 0\n    var longestPalindromeSuffixStringReverseStringReverseStringReverse =\
    \ \"\"\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseIndex\
    \ = 0\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseIndex\
    \ = 0\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseString\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringIndex\
    \ = 0\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringIndex\
    \ = 0\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringReverseIndex\
    \ = 0\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringReverseIndex\
    \ = 0\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringReverseString\
    \ = \"\"\n", "    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromeStartIndex = 0\n    var longestPalindromeEndIndex\
    \ = 0\n    var longestPalindromeStartIndexInReverse = 0\n    var longestPalindromeEndIndexInReverse\
    \ = 0\n\n    for index in 0..<string.characters.count {\n        let currentChar\
    \ = string.characters[index]\n        let currentCharIsPalindrome = currentChar\
    \ == string.reverse(currentChar)\n        if currentCharIsPalindrome {\n     \
    \       if longestPalindromeLength < index {\n                longestPalindrome\
    \ = string\n                longestPalindromeLength = index\n                longestPalindromeStartIndex\
    \ = index\n                longestPalindromeEndIndex = index\n               \
    \ longestPalindromeStartIndexInReverse = index\n                longestPalindromeEndIndexInReverse\
    \ = index\n            }\n        } else {\n            if longestPalindromeLength\
    \ > index {\n                longestPalindrome = string\n                longestPalindromeLength\
    \ = index\n                longestPalindromeStartIndex = index\n             \
    \   longestPalindromeEndIndex = index\n                longestPalindromeStartIndexInReverse\
    \ = index\n                longestPalindromeEndIndexInReverse = index\n      \
    \      }\n        }\n    }\n\n    return longestPalindrome", "    var palindrome\
    \ = \"\"\n    var stringPrefix = \"\"\n    var stringSuffix = \"\"\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    var longestPalindromePrefixLength\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromePrefixString\
    \ = \"\"\n    var longestPalindromeSuffixString = \"\"\n    var longestPalindromeString\
    \ = \"\"\n    var longestPalindromeStringLength = 0\n    var longestPalindromeStringPrefixLength\
    \ = 0\n    var longestPalindromeStringSuffixLength = 0\n    var longestPalindromeStringPrefixString\
    \ = \"\"\n    var longestPalindromeStringSuffixString = \"\"\n    var longestPalindromeStringString\
    \ = \"\"\n    var longestPalindromeStringStringLength = 0\n    var longestPalindromeStringStringPrefixLength\
    \ = 0\n    var longestPalindromeStringStringSuffixLength = 0\n    var longestPalindromeStringStringPrefixString\
    \ = \"\"\n    var longestPalindromeStringStringSuffixString = \"\"\n    var longestPalindromeStringStringString\
    \ = \"\"\n    var longestPalindromeStringStringStringLength = 0\n    var longestPalindromeStringStringStringPrefixLength\
    \ = 0\n    var longestPalindromeStringStringStringSuffixLength = 0\n    var longestPalindromeStringStringStringPrefixString\
    \ = \"\"\n    var longestPalindromeStringStringStringSuffixString = \"\"\n   \
    \ var longestPalindromeStringStringStringString = \"\"\n    var longestPalindromeStringStringStringStringLength\
    \ = 0\n    var longestPalindromeStringStringStringStringPrefixLength = 0\n   \
    \ var longestPalindromeStringStringStringStringSuffixLength = 0\n    var longestPalindromeStringStringStringStringPrefixString\
    \ = \"\"\n    var longestPalindromeStringStringStringStringSuffixString = \"\"\
    \n    var longestPalindromeStringStringStringStringString = \"\"\n    var longestPalindromeStringStringStringStringStringLength\
    \ = 0\n    var longestPalindromeStringStringStringStringStringPrefixLength = 0\n\
    \    var longestPalindromeStringStringStringStringStringSuffixLength = 0\n   \
    \ var longestPalindromeStringStringStringStringStringPrefixString = \"\"\n   \
    \ var longestPalindromeStringStringStringStringStringSuffixString = \"\"\n   \
    \ var longestPalindromeStringStringStringStringStringString = \"\"\n    var longestPalindromeStringStringStringStringStringLength\
    \ = 0\n    var longestPalindromeStringStringStringStringStringPrefixLength = 0\n\
    \    var longestPalindromeStringStringStringStringStringSuffixLength = 0\n   \
    \ var longestP", "    var string = string\n    var longestPalindrome = \"\"\n\
    \    var longestPalindromeLength = 0\n    var longestPalindromePrefix = \"\"\n\
    \    var longestPalindromeSuffix = \"\"\n    var longestPalindromePrefixLength\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromeSuffixReverse\
    \ = \"\"\n    var longestPalindromePrefixReverse = \"\"\n    var longestPalindromePrefixReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseLength = 0\n\n    for _ in 0..<string.count\
    \ {\n        let index = string.index(string.startIndex, offsetBy: 1)\n      \
    \  let char = string[index]\n        if char == string[index.reversed().first!]\
    \ {\n            longestPalindrome = string\n            longestPalindromeLength\
    \ = string.count\n            longestPalindromePrefix = string\n            longestPalindromePrefixLength\
    \ = string.count\n            longestPalindromeSuffix = string\n            longestPalindromeSuffixLength\
    \ = string.count\n            longestPalindromeSuffixReverse = string\n      \
    \      longestPalindromePrefixReverse = string\n            longestPalindromePrefixReverseLength\
    \ = string.count\n            longestPalindromeSuffixReverseLength = string.count\n\
    \        } else {\n            if longestPalindromeLength > longestPalindromePrefixLength\
    \ {\n                longestPalindromePrefix = string\n                longestPalindromePrefixLength\
    \ = string.count\n            }\n            if longestPalindromeLength > longestPalindromeSuffixLength\
    \ {\n                longestPalindromeSuffix = string\n                longestPalindromeSuffixLength\
    \ = string.count\n            }\n            if longestPalindromeLength > longestPalindromeSuffixReverseLength\
    \ {\n                longestPalindromeSuffixReverse = string\n               \
    \ longestPalindromeSuffixReverseLength = string.count\n            }\n       \
    \     if longestPalindromeLength > longestPalindromePrefixReverseLength {\n  \
    \              longestPalindromePrefixReverse = string\n                longestPalindromePrefixReverseLength\
    \ = string.count\n            }\n        }\n        string = string[index..<string.endIndex]\n\
    \    }\n    return longestPalindrome", "    var stringToReturn = string\n    var\
    \ longestPalindrome = stringToReturn\n    var longestPalindromeLength = 0\n  \
    \  var longestPalindromePrefix: String = \"\"\n    var longestPalindromeSuffix:\
    \ String = \"\"\n    var longestPalindromePrefixLength = 0\n    var longestPalindromeSuffixLength\
    \ = 0\n    var longestPalindromePrefixReversed: String = \"\"\n    var longestPalindromeSuffixReversed:\
    \ String = \"\"\n    var longestPalindromePrefixReversedLength = 0\n    var longestPalindromeSuffixReversedLength\
    \ = 0\n    var longestPalindromePrefixReversedReversed: String = \"\"\n    var\
    \ longestPalindromeSuffixReversedReversed: String = \"\"\n    var longestPalindromePrefixReversedReversedLength\
    \ = 0\n    var longestPalindromeSuffixReversedReversedLength = 0\n    var longestPalindromePrefixReversedReversedReversed:\
    \ String = \"\"\n    var longestPalindromeSuffixReversedReversedReversed: String\
    \ = \"\"\n    var longestPalindromePrefixReversedReversedReversedLength = 0\n\
    \    var longestPalindromeSuffixReversedReversedReversedLength = 0\n    var longestPalindromePrefixReversedReversedReversedReversed:\
    \ String = \"\"\n    var longestPalindromeSuffixReversedReversedReversedReversed:\
    \ String = \"\"\n    var longestPalindromePrefixReversedReversedReversedReversedLength\
    \ = 0\n    var longestPalindromeSuffixReversedReversedReversedReversedLength =\
    \ 0\n    var longestPalindromePrefixReversedReversedReversedReversedReversed:\
    \ String = \"\"\n    var longestPalindromeSuffixReversedReversedReversedReversedReversed:\
    \ String = \"\"\n    var longestPalindromePrefixReversedReversedReversedReversedReversedLength\
    \ = 0\n    var longestPalindromeSuffixReversedReversedReversedReversedReversedLength\
    \ = 0\n    var longestPalindromePrefixReversedReversedReversedReversedReversedReversed:\
    \ String = \"\"\n    var longestPalindromeSuffixReversedReversedReversedReversedReversedReversed:\
    \ String = \"\"\n    var longestPalindromePrefixReversedReversedReversedReversedReversedReversedLength\
    \ = 0\n    var longestPalindromeSuffixReversedReversedReversedReversedReversedLength\
    \ = 0\n    var longestPalindromePrefixReversedReversedReversedReversedReversedReversedReversed:\
    \ String = \"\"\n    var longestPalindromeSuffixReversedReversedReversedReverse",
  "    var reversedString = string\n    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = string.length\n    var longestPalindromePrefix = \"\"\n    var longestPalindromeSuffix\
    \ = \"\"\n    var longestPalindromePostfix = \"\"\n    var longestPalindromePostfixLength\
    \ = 0\n    var longestPalindromePostfixPrefix = \"\"\n    var longestPalindromePostfixSuffix\
    \ = \"\"\n\n    for _ in 0..<string.length {\n        let currentChar = string[string.startIndex]\n\
    \        let currentCharLength = string.length\n\n        if currentChar == currentChar.reversed()\
    \ {\n            longestPalindromeLength -= 1\n            longestPalindromePostfixLength\
    \ += 1\n            longestPalindromePostfixSuffix += currentChar\n          \
    \  longestPalindromePostfixPrefix += string[string.startIndex..<string.startIndex+longestPalindromePostfixLength]\n\
    \            longestPalindromePostfixLength += 1\n            longestPalindromePostfixSuffix\
    \ += currentChar\n        } else {\n            longestPalindromeLength += 1\n\
    \            longestPalindromePostfixLength += 1\n            longestPalindromePostfixSuffix\
    \ += currentChar\n            longestPalindromePostfixPrefix += string[string.startIndex..<string.startIndex+longestPalindromePostfixLength]\n\
    \        }\n\n        if longestPalindromeLength > longestPalindromePostfixLength\
    \ {\n            longestPalindrome = longestPalindromePostfixPrefix\n        \
    \    longestPalindromeLength = longestPalindromePostfixLength\n            longestPalindromePrefix\
    \ = longestPalindromePostfixPrefix\n            longestPalindromeSuffix = longestPalindromePostfixSuffix\n\
    \            longestPalindromePostfix = longestPalindromePostfixSuffix\n     \
    \       longestPalindromePostfixPrefix = longestPalindromePostfixSuffix\n    \
    \        longestPalindromePostfixLength = 0\n            longestPalindromePostfixSuffix\
    \ = \"\"\n        }\n    }\n\n    return longestPalindrome", "    let longestPalindrome\
    \ = longestPalindrome(string)\n    let reversedString = reverseString(longestPalindrome)\n\
    \    return longestPalindrome + reversedString", "    var string = string\n  \
    \  var longestPalindrome = \"\"\n    var longestPalindromeLength = 0\n    var\
    \ longestPalindromePrefix = \"\"\n    var longestPalindromeSuffix = \"\"\n   \
    \ var longestPalindromePrefixLength = 0\n    var longestPalindromeSuffixLength\
    \ = 0\n    var longestPalindromeSuffixReverse = \"\"\n\n    for _ in 0..<string.characters.count\
    \ {\n        let currentChar = string.characters[string.startIndex]\n        let\
    \ currentCharLength = string.characters.count\n\n        if currentCharLength\
    \ > longestPalindromeLength {\n            longestPalindrome = string\n      \
    \      longestPalindromeLength = currentCharLength\n            longestPalindromePrefix\
    \ = \"\"\n            longestPalindromeSuffixLength = 0\n            longestPalindromeSuffixReverse\
    \ = \"\"\n        }\n\n        if currentCharLength == longestPalindromeLength\
    \ {\n            longestPalindromeSuffix += currentChar\n            longestPalindromeSuffixLength\
    \ += 1\n        }\n\n        if currentCharLength > longestPalindromeSuffixLength\
    \ {\n            longestPalindromeSuffix = string\n            longestPalindromeSuffixLength\
    \ = currentCharLength\n            longestPalindromePrefix = \"\"\n          \
    \  longestPalindromePrefixLength = 0\n            longestPalindromeSuffixReverse\
    \ = \"\"\n        }\n\n        if currentCharLength == longestPalindromeSuffixLength\
    \ {\n            longestPalindromeSuffix += currentChar\n            longestPalindromeSuffixReverse\
    \ += currentChar\n            longestPalindromeSuffixLength += 1\n        }\n\n\
    \        if currentCharLength > longestPalindromePrefixLength {\n            longestPalindromePrefix\
    \ = string\n            longestPalindromePrefixLength = currentCharLength\n  \
    \      }\n\n        if currentCharLength == longestPalindromePrefixLength {\n\
    \            longestPalindromePrefix += currentChar\n            longestPalindromePrefixLength\
    \ += 1\n        }\n\n        if currentCharLength > longestPalindromeSuffixLength\
    \ && currentCharLength == longestPalindromePrefixLength {\n            longestPalindrome\
    \ = string\n            longestPalindromeLength = currentCharLength\n        \
    \    longestPalindromePrefix = \"\"\n            longestPalindromeSuffixLength\
    \ = 0\n            longestPalindromeSuffixReverse = \"\"\n        }\n    }\n\n\
    \    return longestPalindrome", "    var string = string\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    var longestPalindromePrefixLength\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromePostfixLength\
    \ = 0\n    var longestPalindromePostfix = \"\"\n    var longestPalindromePostfixReverse\
    \ = \"\"\n    var longestPalindromePostfixReverseLength = 0\n    var longestPalindromePostfixReverseString\
    \ = \"\"\n    var longestPalindromePostfixReverseStringLength = 0\n    var longestPalindromePostfixReverseStringLength\
    \ = 0\n    var longestPalindromePostfixReverseString = \"\"\n    var longestPalindromePostfixReverseStringLength\
    \ = 0\n    var longestPalindromePostfixReverseString = \"\"\n    var longestPalindromePostfixReverseStringLength\
    \ = 0\n    var longestPalindromePostfixReverseString = \"\"\n    var longestPalindromePostfixReverseStringLength\
    \ = 0\n    var longestPalindromePostfixReverseString = \"\"\n    var longestPalindromePostfixReverseStringLength\
    \ = 0\n    var longestPalindromePostfixReverseString = \"\"\n    var longestPalindromePostfixReverseStringLength\
    \ = 0\n    var longestPalindromePostfixReverseString = \"\"\n    var longestPalindromePostfixReverseStringLength\
    \ = 0\n    var longestPalindromePostfixReverseString = \"\"\n    var longestPalindromePostfixReverseStringLength\
    \ = 0\n    var longestPalindromePostfixReverseString = \"\"\n    var longestPalindromePostfixReverseStringLength\
    \ = 0\n    var longestPalindromePostfixReverseString = \"\"\n    var longestPalindromePostfixReverseStringLength\
    \ = 0\n    var longestPalindromePostfixReverseString = \"\"\n    var longestPalindromePostfixReverseStringLength\
    \ = 0\n    var longestPalindromePostfixReverseString = \"\"\n    var longestPalindromePostfixReverseStringLength\
    \ = 0\n    var longestPalindromePostfixReverseString = \"\"\n    var longestPalindromePostfixReverseStringLength\
    \ = 0\n    var longestPalindromePostfixReverseString = \"\"\n    var longestPalindromePostfixReverseStringLength\
    \ = 0\n    var longestPalindromePostfixReverseString = \"\"\n    var longestPalindromePostfixReverseStringLength\
    \ = 0\n    var longestPalindromePostfixReverseString = \"\"\n    var longestPalindromePostfixReverseStringLength\
    \ = 0\n    var longestPalindromePostfixReverseString = \"\"\n    var longest",
  "    var string = string\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromeStartIndex = 0\n    var longestPalindromeEndIndex\
    \ = 0\n    var longestPalindromeStartIndexOfLongestPalindrome = 0\n    var longestPalindromeEndIndexOfLongestPalindrome\
    \ = 0\n    var longestPalindromeStartIndexOfLongestPalindromeLength = 0\n    var\
    \ longestPalindromeEndIndexOfLongestPalindromeLength = 0\n    var longestPalindromeStartIndexOfLongestPalindromeStartIndex\
    \ = 0\n    var longestPalindromeEndIndexOfLongestPalindromeStartIndex = 0\n  \
    \  var longestPalindromeStartIndexOfLongestPalindromeEndIndex = 0\n    var longestPalindromeEndIndexOfLongestPalindromeEndIndex\
    \ = 0\n    var longestPalindromeStartIndexOfLongestPalindromeStartIndexOfLongestPalindrome\
    \ = 0\n    var longestPalindromeEndIndexOfLongestPalindromeEndIndexOfLongestPalindrome\
    \ = 0\n    var longestPalindromeStartIndexOfLongestPalindromeStartIndexOfLongestPalindromeLength\
    \ = 0\n    var longestPalindromeEndIndexOfLongestPalindromeEndIndexOfLongestPalindromeLength\
    \ = 0\n    var longestPalindromeStartIndexOfLongestPalindromeStartIndexOfLongestPalindromeStartIndex\
    \ = 0\n    var longestPalindromeEndIndexOfLongestPalindromeEndIndexOfLongestPalindromeStartIndex\
    \ = 0\n    var longestPalindromeStartIndexOfLongestPalindromeStartIndexOfLongestPalindromeEndIndex\
    \ = 0\n    var longestPalindromeEndIndexOfLongestPalindromeEndIndexOfLongestPalindromeEndIndex\
    \ = 0\n    var longestPalindromeStartIndexOfLongestPalindromeStartIndexOfLongestPalindromeStartIndexOfLongestPalindrome\
    \ = 0\n    var longestPalindromeEndIndexOfLongestPalindromeEndIndexOfLongestPalindromeEndIndexOfLongestPalindrome\
    \ = 0\n    var longestPalindromeStartIndexOfLongestPalindromeStartIndexOfLongestPalindromeStartIndexOfLongestPalindromeLength\
    \ = 0\n    var ", "    var reversedString = \"\"\n    var longestPalindrome =\
    \ \"\"\n    for character in string {\n        if character == character[character.startIndex]\
    \ {\n            reversedString += character\n        } else {\n            if\
    \ longestPalindrome == \"\" {\n                longestPalindrome = reversedString\n\
    \            } else {\n                reversedString = longestPalindrome\n  \
    \              longestPalindrome = reversedString\n            }\n        }\n\
    \    }\n    return longestPalindrome", "    var reversedString = \"\"\n    var\
    \ longestPalindrome = \"\"\n    for character in string {\n        reversedString\
    \ = reversedString + String(character)\n        if longestPalindrome == \"\" {\n\
    \            longestPalindrome = reversedString\n        } else {\n          \
    \  if longestPalindrome == reversedString {\n                longestPalindrome\
    \ = longestPalindrome + String(character)\n            }\n        }\n    }\n \
    \   return longestPalindrome", "    var result = \"\"\n    var longestPalindrome\
    \ = \"\"\n    for character in string {\n        if character == character {\n\
    \            result += character\n        } else {\n            longestPalindrome\
    \ += character\n        }\n    }\n    for character in longestPalindrome {\n \
    \       if character == character {\n            result += character\n       \
    \ } else {\n            result += character + character\n        }\n    }\n  \
    \  return result", "    var stringToReturn = string\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindrome = \"\"\n    for stringIndex in 0..<string.count\
    \ {\n        let stringPrefix = string.prefix(stringIndex)\n        let stringSuffix\
    \ = string.suffix(stringIndex)\n        let stringReversed = stringSuffix.reversed()\n\
    \        let stringPalindrome = stringPrefix + stringReversed\n        let stringPalindromeLength\
    \ = stringPalindrome.count\n        if stringPalindromeLength > longestPalindromeLength\
    \ {\n            longestPalindromeLength = stringPalindromeLength\n          \
    \  longestPalindrome = stringPalindrome\n        }\n    }\n    return longestPalindrome",
  "    var reversedString = \"\"\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    for character in string {\n        if character == character {\n  \
    \          reversedString += character\n        }\n        if character == reversedString[reversedString.length-1]\
    \ {\n            longestPalindrome = reversedString\n            longestPalindromeLength\
    \ = reversedString.length\n        }\n    }\n    return longestPalindrome + reversedString[longestPalindromeLength...reversedString.length]",
  "    var palindrome = \"\"\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromeIndex = 0\n    var longestPalindromeSuffixIndex\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromeSuffixStart\
    \ = 0\n    var longestPalindromeSuffixEnd = 0\n    var longestPalindromeSuffixLengthStart\
    \ = 0\n    var longestPalindromeSuffixLengthEnd = 0\n    var longestPalindromeSuffixStartIndex\
    \ = 0\n    var longestPalindromeSuffixEndIndex = 0\n    var longestPalindromeSuffixStartIndexEnd\
    \ = 0\n    var longestPalindromeSuffixEndIndexEnd = 0\n    var longestPalindromeSuffixStartIndexEndIndex\
    \ = 0\n    var longestPalindromeSuffixEndIndexEndIndex = 0\n    var longestPalindromeSuffixStartIndexEndIndexEnd\
    \ = 0\n    var longestPalindromeSuffixEndIndexEndIndexEnd = 0\n    var longestPalindromeSuffixStartIndexEndIndexEndIndex\
    \ = 0\n    var longestPalindromeSuffixEndIndexEndIndexEnd = 0\n    var longestPalindromeSuffixStartIndexEndIndexEndIndex\
    \ = 0\n    var longestPalindromeSuffixEndIndexEndIndexEnd = 0\n    var longestPalindromeSuffixStartIndexEndIndexEndIndex\
    \ = 0\n    var longestPalindromeSuffixEndIndexEndIndexEnd = 0\n    var longestPalindromeSuffixStartIndexEndIndexEndIndex\
    \ = 0\n    var longestPalindromeSuffixEndIndexEndIndexEnd = 0\n    var longestPalindromeSuffixStartIndexEndIndexEndIndex\
    \ = 0\n    var longestPalindromeSuffixEndIndexEndIndexEnd = 0\n    var longestPalindromeSuffixStartIndexEndIndexEndIndex\
    \ = 0\n    var longestPalindromeSuffixEndIndexEndIndexEnd = 0\n    var longestPalindromeSuffixStartIndexEndIndexEndIndex\
    \ = 0\n    var longestPalindromeSuffixEndIndexEndIndexEnd = 0\n    var longestPalindromeSuffixStartIndexEndIndexEndIndex\
    \ = 0\n    var longestPalindromeSuffixEndIndexEndIndexEnd = 0\n    var longestPalindromeSuffixStartIndexEndIndexEndIndex\
    \ = 0\n    var longestPalindromeSuffixEndIndexEndIndexEnd = 0\n    var longestPalindromeSuffixStartIndexEndIndexEndIndex\
    \ = 0\n    var longestPalindromeSuffixEndIndexEndIndexEnd = 0\n    var longestPalindromeSuffixStartIndexEndIndexEndIndex\
    \ = 0\n    var longestPalindromeSuffixEndIndexEndIndexEnd", "    var longestPalindrome\
    \ = string\n    var longestPalindromeLength = 0\n    var longestPalindromePrefix:\
    \ String = \"\"\n    var longestPalindromeSuffix: String = \"\"\n    for char\
    \ in string {\n        if char == longestPalindrome[longestPalindromeLength] {\n\
    \            longestPalindromeLength += 1\n        } else {\n            if longestPalindromeLength\
    \ > 0 {\n                longestPalindromeLength = 0\n                longestPalindromePrefix\
    \ = String(longestPalindromePrefix) + String(char)\n            }\n          \
    \  if longestPalindromeLength == 0 {\n                longestPalindromeSuffix\
    \ = String(char) + String(longestPalindromeSuffix)\n            }\n        }\n\
    \    }\n    if longestPalindromeLength > 0 {\n        longestPalindrome = String(longestPalindromePrefix)\
    \ + String(longestPalindromeSuffix)\n    }\n    return longestPalindrome", " \
    \   let maxLength: Int = string.characters.count\n    let maxIndex = string.characters.index(maxLength,\
    \ offsetBy: -1)\n    let maxPalindrome = string.substring(to: maxIndex)\n    let\
    \ maxPalindromeReversed = maxPalindrome.reversed()\n    return maxPalindromeReversed\
    \ + maxPalindrome", "    var reverse = \"\"\n    var longestPalindrome = \"\"\n\
    \    for character in string {\n        if character == character {\n        \
    \    reverse = reverse + character\n        }\n        if character == reverse[reverse.startIndex]\
    \ {\n            longestPalindrome = longestPalindrome + character\n        }\n\
    \    }\n    return longestPalindrome", "    var result = \"\"\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    var longestPalindromePrefixLength\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromePrefixString\
    \ = \"\"\n    var longestPalindromeSuffixString = \"\"\n    var longestPalindromePrefixStringReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverse = \"\"\n    var longestPalindromePrefixStringReverseLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseLength = 0\n    var longestPalindromePrefixStringReverseString\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseString = \"\"\n    var longestPalindromePrefixStringReverseStringReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseStringReverse = \"\"\n \
    \   var longestPalindromePrefixStringReverseStringReverseLength = 0\n    var longestPalindromeSuffixStringReverseStringReverseLength\
    \ = 0\n    var longestPalindromePrefixStringReverseStringReverseString = \"\"\n\
    \    var longestPalindromeSuffixStringReverseStringReverseString = \"\"\n    var\
    \ longestPalindromePrefixStringReverseStringReverseStringReverse = \"\"\n    var\
    \ longestPalindromeSuffixStringReverseStringReverseStringReverse = \"\"\n    var\
    \ longestPalindromePrefixStringReverseStringReverseStringReverseLength = 0\n \
    \   var longestPalindromeSuffixStringReverseStringReverseStringReverseLength =\
    \ 0\n    var longestPalindromePrefixStringReverseStringReverseStringReverseString\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseString\
    \ = \"\"\n    var longestPalindromePrefixStringReverseStringReverseStringReverseStringReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringReverse\
    \ = \"\"\n    var longestPalindromePrefixStringReverseStringReverseStringReverseStringReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringReverse\
    \ = \"\"\n    var longestPalindromePrefixStringReverseStringReverseStringReverseStringReverseStringReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringReverseStringReverse\
    \ = \"\"\n    var longestPalindromePrefixStringReverseStringReverseStringReverseStringReverseStringReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringReverseStringReverse\
    \ = \"\"\n    var longestPalindromePrefixStringReverseStringReverseStringReverseStringReverseStringReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringReverseStringReverse\
    \ = \"\"\n    var longestPalindromePrefixStringReverseStringReverseStringReverseStringReverseStringReverseStringReverse\
    \ = \"\"\n    var longest", "    var string = string\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    var longestPalindromeIndex\
    \ = 0\n    var longestPalindromePrefix = \"\"\n    var longestPalindromeSuffixIndex\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromeSuffixReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseIndex = 0\n    var longestPalindromeSuffixReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverse = \"\"\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var ", " \
    \   var result = \"\"\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    for character in string {\n        if character == character {\n  \
    \          result += character\n        }\n        if character == character {\n\
    \            longestPalindromeLength += 1\n            if longestPalindromeLength\
    \ > longestPalindrome {\n                longestPalindrome = longestPalindromeLength\n\
    \                longestPalindrome = character\n            }\n        }\n   \
    \ }\n    result += longestPalindrome\n    return result", "    var string = string\n\
    \    var longestPalindrome = \"\"\n    var longestPalindromeLength = 0\n    var\
    \ longestPalindromeStartIndex = 0\n    var longestPalindromeEndIndex = 0\n   \
    \ var longestPalindromeStartIndexOfReversedString = 0\n    var longestPalindromeEndIndexOfReversedString\
    \ = 0\n    var longestPalindromeStartIndexOfReversedStringOfReversedString = 0\n\
    \    var longestPalindromeEndIndexOfReversedStringOfReversedString = 0\n    var\
    \ longestPalindromeStartIndexOfReversedStringOfReversedStringOfReversedString\
    \ = 0\n    var longestPalindromeStartIndexOfReversedStringOfReversedStringOfReversedString\
    \ = 0\n    var longestPalindromeStartIndexOfReversedStringOfReversedStringOfReversedString\
    \ = 0\n    var longestPalindromeStartIndexOfReversedStringOfReversedStringOfReversedString\
    \ = 0\n    var longestPalindromeStartIndexOfReversedStringOfReversedStringOfReversedString\
    \ = 0\n    var longestPalindromeStartIndexOfReversedStringOfReversedStringOfReversedString\
    \ = 0\n    var longestPalindromeStartIndexOfReversedStringOfReversedStringOfReversedString\
    \ = 0\n    var longestPalindromeStartIndexOfReversedStringOfReversedStringOfReversedString\
    \ = 0\n    var longestPalindromeStartIndexOfReversedStringOfReversedStringOfReversedString\
    \ = 0\n    var longestPalindromeStartIndexOfReversedStringOfReversedStringOfReversedString\
    \ = 0\n    var longestPalindromeStartIndexOfReversedStringOfReversedStringOfReversedString\
    \ = 0\n    var longestPalindromeStartIndexOfReversedStringOfReversedStringOfReversedString\
    \ = 0\n    var longestPalindromeStartIndexOfReversedStringOfReversedStringOfReversedString\
    \ = 0\n    var longestPalindromeStartIndexOfReversedStringOfReversedStringOfReversedString\
    \ = 0\n    var longestPalindromeStartIndexOfReversedStringOfReversedStringOfReversedString\
    \ = 0\n    var longestPalindromeStartIndexOfReversedStringOfReversedStringOfReversedString\
    \ = 0\n    var longestPalindromeStartIndexOfReversedStringOfReversedStringOfReversedString\
    \ = 0\n    var longestPalindromeStartIndexOfReversedStringOfReversedStringOfReversedString\
    \ = 0\n    var longestPalindromeStartIndexOfReversed", "    var palindrome = \"\
    \"\n    var longestPalindrome = \"\"\n    var longestPalindromeLength = 0\n  \
    \  var longestPalindromeStartIndex = 0\n    var longestPalindromeEndIndex = 0\n\
    \    var longestPalindromeStartIndexAfterReverse = 0\n    var longestPalindromeEndIndexAfterReverse\
    \ = 0\n    var longestPalindromeStartIndexBeforeReverse = 0\n    var longestPalindromeEndIndexBeforeReverse\
    \ = 0\n    var longestPalindromeStartIndexAfterReverse = 0\n    var longestPalindromeEndIndexAfterReverse\
    \ = 0\n    var longestPalindromeStartIndexBeforeReverse = 0\n    var longestPalindromeEndIndexBeforeReverse\
    \ = 0\n    var longestPalindromeStartIndexAfterReverse = 0\n    var longestPalindromeEndIndexAfterReverse\
    \ = 0\n    var longestPalindromeStartIndexBeforeReverse = 0\n    var longestPalindromeEndIndexBeforeReverse\
    \ = 0\n    var longestPalindromeStartIndexAfterReverse = 0\n    var longestPalindromeEndIndexAfterReverse\
    \ = 0\n    var longestPalindromeStartIndexBeforeReverse = 0\n    var longestPalindromeEndIndexBeforeReverse\
    \ = 0\n    var longestPalindromeStartIndexAfterReverse = 0\n    var longestPalindromeEndIndexAfterReverse\
    \ = 0\n    var longestPalindromeStartIndexBeforeReverse = 0\n    var longestPalindromeEndIndexBeforeReverse\
    \ = 0\n    var longestPalindromeStartIndexAfterReverse = 0\n    var longestPalindromeEndIndexAfterReverse\
    \ = 0\n    var longestPalindromeStartIndexBeforeReverse = 0\n    var longestPalindromeEndIndexBeforeReverse\
    \ = 0\n    var longestPalindromeStartIndexAfterReverse = 0\n    var longestPalindromeEndIndexAfterReverse\
    \ = 0\n    var longestPalindromeStartIndexBeforeReverse = 0\n    var longestPalindromeEndIndexBeforeReverse\
    \ = 0\n    var longestPalindromeStartIndexAfterReverse = 0\n    var longestPalindromeEndIndexAfterReverse\
    \ = 0\n    var longestPalindromeStartIndexBeforeReverse = 0\n    var longestPalindromeEndIndexBeforeReverse\
    \ = 0\n    var longestPalindromeStartIndexAfterReverse = 0\n    var longestPalindromeEndIndexAfterReverse\
    \ = 0\n    var longestPalindromeStartIndexBeforeReverse = 0\n    var longestPalindromeEndIndexBeforeReverse\
    \ = 0\n    var longestPalindromeStartIndexAfterReverse = 0\n    var longestPalindromeEndIndexAfterReverse\
    \ = 0\n    var longestPalindromeStartIndexBeforeReverse = 0\n", "    let longestPalindrome\
    \ = longestPalindrome(string)\n    let reversedString = reverseString(string,\
    \ longestPalindrome)\n    return reversedString + longestPalindrome", "    let\
    \ longestPalindrome = longestPalindrome(string: string)\n    let reversedString\
    \ = reverseString(string: longestPalindrome)\n    return longestPalindrome + reversedString",
  "    var longestPalindrome = \"\"\n    var longestPalindromeLength = 0\n    var\
    \ longestPalindromePrefix = \"\"\n    var longestPalindromeSuffix = \"\"\n   \
    \ var longestPalindromePrefixLength = 0\n    var longestPalindromeSuffixLength\
    \ = 0\n    var longestPalindromePrefixReverse = \"\"\n    var longestPalindromeSuffixReverse\
    \ = \"\"\n    var longestPalindromePrefixReverseLength = 0\n    var longestPalindromeSuffixReverseLength\
    \ = 0\n    var longestPalindromePrefixReverseReverse = \"\"\n    var longestPalindromeSuffixReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseLength\
    \ = 0\n    var longestPalindromePrefixReverseReverseReverse = \"\"\n    var longestPalindromeSuffixReverseReverseLength\
    \ = 0\n    var longestPalindromePrefixReverseReverseReverse = \"\"\n    var longestPalindromeSuffixReverseReverseLength\
    \ = 0\n    var longestPalindromePrefixReverseReverseReverse = \"\"\n    var longestPalindromeSuffixReverseReverseLength\
    \ = 0\n    var longestPalindromePrefixReverseReverseReverse = \"\"\n    var longestPalindromeSuffixReverseReverseLength\
    \ = 0\n    var longestPalindromePrefixReverseReverseReverse = \"\"\n    var longestPalindromeSuffixReverseReverseLength\
    \ = 0\n    var longestPalindromePrefixReverseReverseReverse = \"\"\n    var longestPalindromeSuffixReverseReverseLength\
    \ = 0\n    var longestPalindromePrefixReverseReverseReverse = \"\"\n    var longestPalindromeSuffixReverseReverseLength\
    \ = 0\n    var longestPalindromePrefixReverseReverseReverse = \"\"\n    var longestPalindromeSuffixReverseReverseLength\
    \ = 0\n    var longestPalindromePrefixReverseReverseReverse = \"\"\n    var longestPalindromeSuffixReverseReverseLength\
    \ = 0\n    var longestPalindromePrefixReverseReverseReverse = \"\"\n    var longestPalindromeSuffixReverseReverseLength\
    \ = 0\n    var longestPalindromePrefixReverseReverseReverse = \"\"\n    var longestPalindromeSuffixReverseReverseLength\
    \ = 0\n    var longestPalindromePrefixReverseReverseReverse = \"\"\n    var longestPalindromeSuffixReverseReverseLength\
    \ = 0\n    var longestPalindromePrefixReverseReverseReverse = \"\"\n    var longestPalindromeSuffixReverseReverseLength\
    \ = 0\n    var longestPalindromePrefixReverseReverseReverse = \"\"\n    var longestPalindromeSuffixReverseReverseLength\
    \ = 0\n    var longestPalindromePrefixReverseReverseReverse = \"\"\n    var longestPalindromeSuffixReverseReverseLength\
    \ = 0\n    var longestPalindromePrefix", "    var result = \"\"\n    var longestPalindrome\
    \ = \"\"\n    for character in string {\n        if character == character {\n\
    \            result += character\n        } else {\n            if longestPalindrome\
    \ == \"\" {\n                longestPalindrome = character\n            } else\
    \ {\n                longestPalindrome += character\n            }\n        }\n\
    \    }\n    for character in longestPalindrome {\n        if character == character\
    \ {\n            result += character\n        } else {\n            result +=\
    \ character + character\n        }\n    }\n    return result", "    var longestPalindrome\
    \ = string\n    var longestPalindromeLength = 0\n    var longestPalindromePrefix:\
    \ String = \"\"\n    var longestPalindromeSuffix: String = \"\"\n    for character\
    \ in string {\n        if character == longestPalindrome[longestPalindromeLength]\
    \ {\n            longestPalindromeLength += 1\n        } else {\n            longestPalindromeLength\
    \ = 0\n        }\n        if longestPalindromeLength > longestPalindromeLength\
    \ {\n            longestPalindromePrefix = string[longestPalindromeLength..<longestPalindromeLength]\n\
    \            longestPalindromeSuffix = string[longestPalindromeLength..<longestPalindromeLength].reversed()\n\
    \        }\n    }\n    return longestPalindromePrefix + longestPalindromeSuffix\
    \ + longestPalindrome[longestPalindromeLength..<longestPalindromeLength].reversed()",
  "    var reversedString = \"\"\n    var longestPalindrome = \"\"\n    for character\
    \ in string {\n        reversedString = reversedString + String(character)\n \
    \       if longestPalindrome == \"\" {\n            longestPalindrome = reversedString\n\
    \        } else {\n            if longestPalindrome == reversedString {\n    \
    \            longestPalindrome = longestPalindrome + String(character)\n     \
    \       } else {\n                longestPalindrome = longestPalindrome + String(character)\
    \ + reversedString\n            }\n        }\n    }\n    return longestPalindrome",
  "    var result = \"\"\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromePrefixLength = 0\n    var longestPalindromeSuffixLength\
    \ = 0\n    var longestPalindromePrefixString = \"\"\n    var longestPalindromeSuffixString\
    \ = \"\"\n    var longestPalindromePrefixStringReverse = \"\"\n    var longestPalindromeSuffixStringReverse\
    \ = \"\"\n    var longestPalindromePrefixStringReverseReverse = \"\"\n    var\
    \ longestPalindromeSuffixStringReverseReverse = \"\"\n    var longestPalindromePrefixStringReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseReverseReverse = \"\"\n\
    \    var longestPalindromePrefixStringReverseReverseReverseReverse = \"\"\n  \
    \  var longestPalindromeSuffixStringReverseReverseReverseReverse = \"\"\n    var\
    \ longestPalindromePrefixStringReverseReverseReverseReverseReverse = \"\"\n  \
    \  var longestPalindromeSuffixStringReverseReverseReverseReverseReverse = \"\"\
    \n    var longestPalindromePrefixStringReverseReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixStringReverseReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixStringReverseReverseReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixStringReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixStringReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixStringReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixStringReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixStringReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixStringReverseReverseReverseReverseReverseReverseReverseReverse",
  "    var string = string\n    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromePrefix = \"\"\n    var longestPalindromeSuffix\
    \ = \"\"\n    var longestPalindromePostfix = \"\"\n    var longestPalindromePostfixLength\
    \ = 0\n    var longestPalindromePostfixPrefix = \"\"\n    var longestPalindromePostfixSuffix\
    \ = \"\"\n    var longestPalindromePostfixPostfix = \"\"\n    var longestPalindromePostfixPostfixLength\
    \ = 0\n    var longestPalindromePostfixPostfixPrefix = \"\"\n    var longestPalindromePostfixPostfixSuffix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfix = \"\"\n    var longestPalindromePostfixPostfixPostfixLength\
    \ = 0\n    var longestPalindromePostfixPostfixPostfixPrefix = \"\"\n    var longestPalindromePostfixPostfixPostfixSuffix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfix = \"\"\n    var\
    \ longestPalindromePostfixPostfixPostfixPostfixLength = 0\n    var longestPalindromePostfixPostfixPostfixPostfixPrefix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixSuffix = \"\"\n\
    \    var longestPalindromePostfixPostfixPostfixPostfixPostfix = \"\"\n    var\
    \ longestPalindromePostfixPostfixPostfixPostfixPostfixLength = 0\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPrefix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixSuffix =\
    \ \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfix =\
    \ \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixLength\
    \ = 0\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPrefix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixSuffix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfixLength\
    \ = 0\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfixPrefix\
    \ = \"\"\n    var longestPalin", "    var result = \"\"\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    for char in string {\n    \
    \    if char == char.lowercased() {\n            result += char\n        } else\
    \ {\n            if longestPalindromeLength < char.count {\n                longestPalindrome\
    \ = char\n                longestPalindromeLength = char.count\n            }\n\
    \        }\n    }\n    if longestPalindromeLength > 0 {\n        let reversedString\
    \ = reverseString(string: longestPalindrome)\n        result = reversedString\
    \ + result\n    }\n    return result", "    var longestPalindrome = string\n \
    \   var longestPalindromeLength = 0\n    for _ in 0..<string.count {\n       \
    \ let reversedString = reverseString(string)\n        if longestPalindromeLength\
    \ < reversedString.count {\n            longestPalindrome = reversedString\n \
    \           longestPalindromeLength = reversedString.count\n        }\n      \
    \  string = string.dropLast()\n    }\n    return longestPalindrome", "    var\
    \ result = \"\"\n    var longestPalindromeLength = 0\n    for c in string {\n\
    \        if isPalindrome(c) {\n            longestPalindromeLength += 1\n    \
    \    } else {\n            if longestPalindromeLength > 0 {\n                result\
    \ += string[longestPalindromeLength..<longestPalindromeLength+longestPalindromeLength].reversed()\n\
    \            }\n            longestPalindromeLength = 0\n            result +=\
    \ c\n        }\n    }\n    if longestPalindromeLength > 0 {\n        result +=\
    \ string[longestPalindromeLength..<longestPalindromeLength+longestPalindromeLength].reversed()\n\
    \    }\n    return result", "    let longestPalindrome = longestPalindrome(string:\
    \ string)\n    let reversedString = reverseString(string: longestPalindrome)\n\
    \    return reversedString + longestPalindrome", "    var result = \"\"\n    var\
    \ longestPalindrome = \"\"\n    for character in string {\n        if character\
    \ == character {\n            result += character\n        } else {\n        \
    \    longestPalindrome += character\n        }\n    }\n    for character in string\
    \ {\n        if character == character {\n            result += character\n  \
    \      } else {\n            result += longestPalindrome\n        }\n    }\n \
    \   return result", "    var reversedString = string\n    var longestPalindrome\
    \ = string\n    for _ in 0..<string.count {\n        let reversedSubstring = reversedString.substringFromIndex(string.reversed().startIndex)\n\
    \        if reversedSubstring == longestPalindrome {\n            longestPalindrome\
    \ = longestPalindrome.replacingOccurrences(of: reversedSubstring, with: reversedSubstring.reversed())\n\
    \        } else {\n            longestPalindrome = longestPalindrome.replacingOccurrences(of:\
    \ reversedSubstring, with: reversedSubstring)\n        }\n    }\n    return longestPalindrome",
  "    var stringToReturn = string\n    var longestPalindrome = stringToReturn\n \
    \   var longestPalindromeLength = 0\n    var longestPalindromePrefix = \"\"\n\
    \    var longestPalindromeSuffix = \"\"\n    var longestPalindromePrefixLength\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromePrefixReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverse = \"\"\n    var longestPalindromePrefixReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseLength = 0\n\n    for stringToReturn.count\
    \ > 0 {\n        let stringToReturn = stringToReturn.substringToIndex(advance(stringToReturn.startIndex,\
    \ 1))\n        let stringToReturnReverse = stringToReturn.reversed()\n       \
    \ let stringToReturnPrefixReverse = stringToReturnReverse.substringToIndex(advance(stringToReturnReverse.startIndex,\
    \ 1))\n        let stringToReturnSuffixReverse = stringToReturnReverse.substringFromIndex(advance(stringToReturnReverse.startIndex,\
    \ 1))\n        let stringToReturnPrefix = stringToReturn.substringToIndex(advance(stringToReturn.startIndex,\
    \ 1))\n        let stringToReturnSuffix = stringToReturn.substringFromIndex(advance(stringToReturn.startIndex,\
    \ 1))\n\n        if stringToReturn.characters.count == stringToReturnReverse.characters.count\
    \ {\n            if stringToReturn.characters.count == stringToReturnPrefixReverse.characters.count\
    \ {\n                if stringToReturn.characters.count == stringToReturnSuffixReverse.characters.count\
    \ {\n                    if stringToReturn.characters.count == stringToReturnPrefix.characters.count\
    \ {\n                        if stringToReturn.characters.count == stringToReturnSuffix.characters.count\
    \ {\n                            if stringToReturn.characters.count == stringToReturn.characters.count\
    \ {\n                                longestPalindrome = stringToReturn\n    \
    \                            longestPalindromeLength = stringToReturn.characters.count\n\
    \                                longestPalindromePrefix = stringToReturnPrefix\n\
    \                                longestPalindromePrefixLength = stringToReturnPrefixReverse.characters.count\n\
    \                                longestPalindromeSuffix = stringToReturnSuffix\n\
    \                                longestPalindromeSuffixLength = stringToReturnSuffixReverse.characters.count\n\
    \                                longestPalindromePrefixReverse = stringToReturnPrefixReverse\n\
    \                                longestPalindromeSuffixReverse = stringToReturnSuffixReverse\n\
    \                                longestPalindromePrefixReverseLength = stringToReturnPrefixReverse.characters.count\n\
    \                                longestPalindromeSuffixReverseLength = stringToReturnSuffixReverse.characters.count\n\
    \                            }\n                        }\n                  \
    \  }\n                }\n            }\n        }\n    }\n\n    if longestPalindro",
  "    var stringToReturn = string\n    var longestPalindromeLength = 0\n    var longestPalindrome\
    \ = \"\"\n    for stringToCheck in string.characters {\n        if stringToCheck\
    \ == stringToReturn.characters.first {\n            longestPalindromeLength +=\
    \ 1\n            if longestPalindromeLength > longestPalindrome.characters.count\
    \ {\n                longestPalindrome = stringToReturn\n                longestPalindromeLength\
    \ = longestPalindrome.characters.count\n            }\n        }\n    }\n    longestPalindrome\
    \ = longestPalindrome.replacingOccurrences(of: longestPalindrome.characters.first!,\
    \ with: \"\")\n    longestPalindrome = longestPalindrome.replacingOccurrences(of:\
    \ longestPalindrome.characters.last!, with: \"\")\n    stringToReturn = stringToReturn.replacingOccurrences(of:\
    \ longestPalindrome, with: stringToReturn.characters.first!)\n    stringToReturn\
    \ = stringToReturn.replacingOccurrences(of: longestPalindrome.characters.last!,\
    \ with: stringToReturn.characters.last!)\n    return stringToReturn", "    var\
    \ result = \"\"\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    for char in string {\n        if char == char.lowercased() {\n    \
    \        result += char\n        }\n    }\n    for char in string {\n        if\
    \ char == char.lowercased() {\n            result += char\n        }\n    }\n\
    \    for char in string {\n        if char == char.lowercased() {\n          \
    \  result += char\n        }\n    }\n    for char in string {\n        if char\
    \ == char.lowercased() {\n            result += char\n        }\n    }\n    for\
    \ char in string {\n        if char == char.lowercased() {\n            result\
    \ += char\n        }\n    }\n    for char in string {\n        if char == char.lowercased()\
    \ {\n            result += char\n        }\n    }\n    for char in string {\n\
    \        if char == char.lowercased() {\n            result += char\n        }\n\
    \    }\n    for char in string {\n        if char == char.lowercased() {\n   \
    \         result += char\n        }\n    }\n    for char in string {\n       \
    \ if char == char.lowercased() {\n            result += char\n        }\n    }\n\
    \    for char in string {\n        if char == char.lowercased() {\n          \
    \  result += char\n        }\n    }\n    for char in string {\n        if char\
    \ == char.lowercased() {\n            result += char\n        }\n    }\n    for\
    \ char in string {\n        if char == char.lowercased() {\n            result\
    \ += char\n        }\n    }\n    for char in string {\n        if char == char.lowercased()\
    \ {\n            result += char\n        }\n    }\n    for char in string {\n\
    \        if char == char.lowercased() {\n            result += char\n        }\n\
    \    }\n    for char in string {\n        if char == char.lowercased() {\n   \
    \         result += char\n        }\n    }\n    for char in string {\n       \
    \ if char == char.lowercased() {\n            result += char\n        }\n    }\n\
    \    for char in string {\n        if char == char.lowercased() {\n          \
    \  result += char\n        }\n    }\n    for char in string {\n        if char\
    \ == char.lowercased() {\n            result += char\n        }\n    }\n    for\
    \ char in string {\n        if char == char.lowercased() {\n            result\
    \ += char\n        }\n    }\n    for char in string {\n        if char == char.lowercased()\
    \ {\n            result += char\n        }\n    }\n    for char in string {\n\
    \        if char == char.lowercased() {\n            result += char\n        }\n\
    \    }\n    for char in string {\n        if char == char.lowercased() {\n   \
    \         result += char\n        }\n    }\n    for char in string {\n       \
    \ if char", "    let reverse = string.reversed()\n    var result = \"\"\n    for\
    \ char in string.characters {\n        if char == reverse {\n            result\
    \ += char\n        } else {\n            result += String(char)\n        }\n \
    \   }\n    return result", "    var stringToReturn = string\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindrome = \"\"\n    var longestPalindromeIndex = 0\n\
    \    for index in 0..<string.characters.count {\n        let currentChar = string.characters[index]\n\
    \        let currentCharIsPalindrome = currentChar == stringToReturn[longestPalindromeIndex]\n\
    \        if currentCharIsPalindrome {\n            if longestPalindromeLength\
    \ < index {\n                longestPalindromeLength = index\n               \
    \ longestPalindrome = stringToReturn\n                longestPalindromeIndex =\
    \ index\n            }\n        } else {\n            if longestPalindromeLength\
    \ > index {\n                stringToReturn = stringToReturn.substring(to: longestPalindromeIndex)\n\
    \                stringToReturn = stringToReturn + stringToReturn.substring(from:\
    \ longestPalindromeLength)\n                longestPalindromeLength = 0\n    \
    \            longestPalindrome = \"\"\n                longestPalindromeIndex\
    \ = 0\n            }\n        }\n    }\n    return stringToReturn", "    var stringToReturn\
    \ = string\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromeIndex = 0\n    var longestPalindromePrefix = \"\
    \"\n    var longestPalindromeSuffixIndex = 0\n    var longestPalindromeSuffixLength\
    \ = 0\n    var longestPalindromeSuffixString = \"\"\n    var longestPalindromeSuffixStringReverse\
    \ = \"\"\n\n    for stringIndex in 0..<string.characters.count {\n        let\
    \ stringCharacter = string.characters[stringIndex]\n        if stringCharacter\
    \ == stringToReturn.characters.last! {\n            longestPalindromeSuffixIndex\
    \ += 1\n            longestPalindromeSuffixLength += 1\n            if longestPalindromeSuffixIndex\
    \ == longestPalindromeLength {\n                longestPalindromeSuffixString\
    \ = stringToReturn.substringWithRange(NSMakeRange(longestPalindromeIndex, longestPalindromeSuffixLength))\n\
    \                longestPalindromeSuffixStringReverse = stringToReturn.substringWithRange(NSMakeRange(longestPalindromeSuffixIndex,\
    \ longestPalindromeSuffixLength))\n            }\n        } else {\n         \
    \   longestPalindromeIndex += 1\n            longestPalindromeLength += 1\n  \
    \          if longestPalindromeIndex == longestPalindromeLength {\n          \
    \      longestPalindrome = stringToReturn.substringWithRange(NSMakeRange(longestPalindromeIndex,\
    \ longestPalindromeLength))\n            }\n        }\n    }\n\n    return longestPalindrome",
  "    var result = \"\"\n    var longestPalindrome = \"\"\n    for letter in string\
    \ {\n        if letter == \" \" {\n            result += letter\n            continue\n\
    \        }\n        if letter == string[string.index(letter, offsetBy: 1)] {\n\
    \            result += letter\n            continue\n        }\n        if letter\
    \ == string[string.index(letter, offsetBy: -1)] {\n            result += letter\n\
    \            continue\n        }\n        if letter == string[string.index(letter,\
    \ offsetBy: -2)] {\n            result += letter\n            continue\n     \
    \   }\n        if letter == string[string.index(letter, offsetBy: -3)] {\n   \
    \         result += letter\n            continue\n        }\n        if letter\
    \ == string[string.index(letter, offsetBy: -4)] {\n            result += letter\n\
    \            continue\n        }\n        if letter == string[string.index(letter,\
    \ offsetBy: -5)] {\n            result += letter\n            continue\n     \
    \   }\n        if letter == string[string.index(letter, offsetBy: -6)] {\n   \
    \         result += letter\n            continue\n        }\n        if letter\
    \ == string[string.index(letter, offsetBy: -7)] {\n            result += letter\n\
    \            continue\n        }\n        if letter == string[string.index(letter,\
    \ offsetBy: -8)] {\n            result += letter\n            continue\n     \
    \   }\n        if letter == string[string.index(letter, offsetBy: -9)] {\n   \
    \         result += letter\n            continue\n        }\n        if letter\
    \ == string[string.index(letter, offsetBy: -10)] {\n            result += letter\n\
    \            continue\n        }\n        if letter == string[string.index(letter,\
    \ offsetBy: -11)] {\n            result += letter\n            continue\n    \
    \    }\n        if letter == string[string.index(letter, offsetBy: -12)] {\n \
    \           result += letter\n            continue\n        }\n        if letter\
    \ == string[string.index(letter, offsetBy: -13)] {\n            result += letter\n\
    \            continue\n        }\n        if letter == string[string.index(letter,\
    \ offsetBy: -14)] {\n            result += letter\n            continue\n    \
    \    }\n        if letter == string[string.index(letter, offsetBy: -15)] {\n \
    \           result += letter\n            continue\n        }\n        if letter\
    \ == string[string.index(letter, offsetBy: -16)] {\n            result += letter\n\
    \            continue\n        }\n        if letter == string[string.index(letter,\
    \ offsetBy: -17)] {\n            result += letter\n            continue\n    \
    \    }\n        if letter == string[string.index(letter, offsetBy: -18)] {\n \
    \           result += letter\n            continue\n        }\n        if letter\
    \ == string[string.index(letter, offsetBy: -19)] {\n            result += letter\n\
    \            continue\n        }\n        if ", "    var string = string\n   \
    \ var longestPalindrome = \"\"\n    var longestPalindromeLength = 0\n    var longestPalindromePrefix\
    \ = \"\"\n    var longestPalindromeSuffix = \"\"\n    var longestPalindromePrefixLength\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromeSuffixReverse\
    \ = \"\"\n    var longestPalindromePrefixReverse = \"\"\n    var longestPalindromeReverse\
    \ = \"\"\n    var longestPalindromeReverseLength = 0\n    var longestPalindromePrefixReverseLength\
    \ = 0\n    var longestPalindromePrefixReverseReverse = \"\"\n    var longestPalindromeReverseReverseLength\
    \ = 0\n    var longestPalindromePrefixReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixReverseReverseLength = 0", "    var string\
    \ = string\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromeIndex = 0\n    var longestPalindromePrefix = \"\
    \"\n    var longestPalindromeSuffixIndex = 0\n    var longestPalindromeSuffixLength\
    \ = 0\n    var longestPalindromeSuffixString = \"\"\n    var longestPalindromeSuffixStringLength\
    \ = 0\n    var longestPalindromeSuffixStringReverse = \"\"\n    var longestPalindromeSuffixStringReverseLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseReverse = \"\"\n    var longestPalindromeSuffixStringReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseReverseIndex = 0\n    var longestPalindromeSuffixStringReverseReverseIndexLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseReverseIndex = 0\n    var longestPalindromeSuffixStringReverseReverseIndexLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseReverseIndex = 0\n    var longestPalindromeSuffixStringReverseReverseIndexLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseReverseIndex = 0\n    var longestPalindromeSuffixStringReverseReverseIndexLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseReverseIndex = 0\n    var longestPalindromeSuffixStringReverseReverseIndexLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseReverseIndex = 0\n    var longestPalindromeSuffixStringReverseReverseIndexLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseReverseIndex = 0\n    var longestPalindromeSuffixStringReverseReverseIndexLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseReverseIndex = 0\n    var longestPalindromeSuffixStringReverseReverseIndexLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseReverseIndex = 0\n    var longestPalindromeSuffixStringReverseReverseIndexLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseReverseIndex = 0\n    var longestPalindromeSuffixStringReverseReverseIndexLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseReverseIndex = 0\n    var longestPalindromeSuffixStringReverseReverseIndexLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseReverseIndex = 0\n    var longestPalindromeSuffixStringReverseReverseIndexLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseReverseIndex = 0\n    var longestPalindromeSuffixStringReverseReverseIndexLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseReverseIndex = 0\n    var longestPalindromeSuffixStringReverseReverseIndexLength\
    \ = 0\n    var longestPalindro", "    var stringToReturn = string\n    var longestPalindrome\
    \ = stringToReturn\n    var longestPalindromeLength = 0\n    var longestPalindromePrefixLength\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromePrefixReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverse = \"\"\n    var longestPalindromePrefixReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseLength = 0\n    var longestPalindromePrefixReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverse = \"\"\n    var longestPalindromePrefixReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverseReverse\
    \ = \"\"\n    var longestPalindro", "    let longestPalindrome = longestPalindrome(string)\n\
    \    let reversedString = reverseString(longestPalindrome)\n    return longestPalindrome\
    \ + reversedString", "    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    for character in string {\n        if character == character {\n  \
    \          longestPalindromeLength += 1\n            if longestPalindromeLength\
    \ > longestPalindrome {\n                longestPalindrome = String(character)\n\
    \            }\n        } else {\n            longestPalindromeLength = 0\n  \
    \      }\n    }\n    var reversedString = \"\"\n    for character in string {\n\
    \        reversedString += String(character)\n    }\n    reversedString = reversedString[longestPalindromeLength..<reversedString.count]\n\
    \    return longestPalindrome + reversedString", "    var stringToReturn = string\n\
    \    var longestPalindrome = \"\"\n    var longestPalindromeLength = 0\n    var\
    \ longestPalindromePrefixLength = 0\n    var longestPalindromeSuffixLength = 0\n\
    \n    for stringToCheck in string.characters {\n        if stringToCheck == stringToReturn.characters.last\
    \ {\n            longestPalindrome = stringToReturn\n            longestPalindromeLength\
    \ = stringToReturn.characters.count\n            longestPalindromePrefixLength\
    \ = stringToReturn.characters.prefix(longestPalindromeLength).count\n        \
    \    longestPalindromeSuffixLength = stringToReturn.characters.suffix(longestPalindromeLength).count\n\
    \            break\n        }\n    }\n\n    if longestPalindromeLength == 0 {\n\
    \        return \"\"\n    }\n\n    var reversedString = stringToReturn.characters.suffix(longestPalindromeLength).reversed()\n\
    \    reversedString.append(stringToReturn.characters.prefix(longestPalindromePrefixLength))\n\
    \    reversedString.append(longestPalindrome)\n\n    return reversedString.reversed()",
  "    var stringToReturn = string\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    for stringToCheck in string.characters {\n        let reversedString\
    \ = stringToCheck.reversed()\n        if stringToReturn.characters.contains(reversedString)\
    \ {\n            longestPalindrome = stringToCheck\n            longestPalindromeLength\
    \ = stringToCheck.characters.count\n        }\n    }\n    if longestPalindromeLength\
    \ > 0 {\n        stringToReturn = stringToReturn + String(stringToReturn.characters.dropLast(longestPalindromeLength))\n\
    \    }\n    return stringToReturn", "    var stringToReturn = string\n    var\
    \ longestPalindrome = stringToReturn\n    var longestPalindromeLength = 0\n  \
    \  var longestPalindromePrefix: String = \"\"\n    var longestPalindromeSuffix:\
    \ String = \"\"\n\n    for _ in 0..<string.count {\n        let currentChar =\
    \ stringToReturn.characters.last!\n        let currentCharIndex = stringToReturn.index(stringToReturn.startIndex,\
    \ offsetBy: -1)\n        let currentCharReverseIndex = stringToReturn.index(stringToReturn.startIndex,\
    \ offsetBy: -1)\n        let currentCharReverse = stringToReturn[currentCharReverseIndex]\n\
    \n        if currentChar == currentCharReverse {\n            stringToReturn =\
    \ stringToReturn.substring(to: stringToReturn.index(stringToReturn.startIndex,\
    \ offsetBy: -1))\n        } else {\n            if longestPalindromeLength ==\
    \ 0 {\n                longestPalindrome = stringToReturn\n                longestPalindromeLength\
    \ = stringToReturn.characters.count\n                longestPalindromePrefix =\
    \ stringToReturn.prefix(from: longestPalindromeLength)\n                longestPalindromeSuffix\
    \ = stringToReturn.suffix(from: longestPalindromeLength)\n            } else {\n\
    \                let currentLongestPalindromeLength = stringToReturn.characters.count\n\
    \                let currentLongestPalindromePrefix = stringToReturn.prefix(from:\
    \ currentLongestPalindromeLength)\n                let currentLongestPalindromeSuffix\
    \ = stringToReturn.suffix(from: currentLongestPalindromeLength)\n\n          \
    \      if currentLongestPalindromeLength > longestPalindromeLength {\n       \
    \             longestPalindrome = stringToReturn\n                    longestPalindromeLength\
    \ = currentLongestPalindromeLength\n                    longestPalindromePrefix\
    \ = currentLongestPalindromePrefix\n                    longestPalindromeSuffix\
    \ = currentLongestPalindromeSuffix\n                }\n            }\n       \
    \ }\n    }\n\n    return longestPalindrome", "    var stringToReverse = \"\"\n\
    \    var longestPalindrome = \"\"\n    var longestPalindromeLength = 0\n    var\
    \ longestPalindromePrefix = \"\"\n    var longestPalindromeSuffix = \"\"\n   \
    \ var longestPalindromePostfix = \"\"\n    var longestPalindromePostfixLength\
    \ = 0\n    var longestPalindromePostfixPrefix = \"\"\n    var longestPalindromePostfixSuffix\
    \ = \"\"\n    var longestPalindromePostfixPostfix = \"\"\n    var longestPalindromePostfixPostfixLength\
    \ = 0\n    var longestPalindromePostfixPostfixPrefix = \"\"\n    var longestPalindromePostfixPostfixSuffix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfix = \"\"\n    var longestPalindromePostfixPostfixPostfixLength\
    \ = 0\n    var longestPalindromePostfixPostfixPostfixPrefix = \"\"\n    var longestPalindromePostfixPostfixPostfixSuffix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfix = \"\"\n    var\
    \ longestPalindromePostfixPostfixPostfixPostfixLength = 0\n    var longestPalindromePostfixPostfixPostfixPostfixPrefix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixSuffix = \"\"\n\
    \    var longestPalindromePostfixPostfixPostfixPostfixPostfix = \"\"\n    var\
    \ longestPalindromePostfixPostfixPostfixPostfixPostfixLength = 0\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPrefix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixSuffix =\
    \ \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfix =\
    \ \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixLength\
    \ = 0\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPrefix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixSuffix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfix\
    \ = \"\"\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfixLength\
    \ = 0\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfixPrefix\
    \ = \"\"\n    var longestP", "    let reversedString = string.reversed()\n   \
    \ let longestPalindrome = reversedString.prefix(string.reversed())\n    return\
    \ longestPalindrome + string", "    var string = string\n    var reversedString\
    \ = string\n    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = longestPalindrome.length\n    var longestPalindromePrefix = \"\"\n    var\
    \ longestPalindromeSuffix = \"\"\n    var longestPalindromePrefixLength = 0\n\
    \    var longestPalindromeSuffixLength = 0\n    var longestPalindromePrefixReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverse = \"\"\n    var longestPalindromePrefixReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseLength = 0\n    var longestPalindromePrefixReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverse = \"\"\n    var longestPalindromePrefixReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseReverse = \"\"\n    var\
    \ longestPalindromePrefixReverseReverseReverseLength = 0\n    var longestPalindromeSuffixReverseReverseReverseLength\
    \ = 0\n    var longestPalindromePrefixReverseReverseReverseReverse = \"\"\n  \
    \  var longestPalindromeSuffixReverseReverseReverseReverse = \"\"\n    var longestPalindromePrefixReverseReverseReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseReverseLength = 0\n    var\
    \ longestPalindromePrefixReverseReverseReverseReverseReverse = \"\"\n    var longestPalindromeSuffixReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixReverseReverseReverseReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseReverseReverseLength = 0\n\
    \    var longestPalindromePrefixReverseReverseReverseReverseReverseReverse = \"\
    \"\n    var longestPalindromeSuffixReverseReverseReverseReverseReverse = \"\"\n\
    \    var longestPalindromePrefixReverseReverseReverseReverseReverseLength = 0\n\
    \    var longestPalindromeSuffixReverseReverseReverseReverseLength = 0\n    var\
    \ longestPalindromePrefixReverseReverseReverseReverseReverseReverse = \"\"\n \
    \   var longestPalindromeSuffixReverseReverseReverseReverseReverse = \"\"\n  \
    \  var longestPalindromePrefixReverseReverseReverseReverseReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseReverseReverseReverseLength\
    \ = 0\n    var longestPalindromePrefixReverseReverseReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseReverseReverseReverse =\
    \ \"\"\n    var longestPalindromePrefixReverseReverseReverseReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseReverseReverseLength = 0\n\
    \    var longestPalindromePrefixReverseReverseReverseReverseReverseReverse = \"\
    \"", "    var string = string\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromeIndex = 0\n    var longestPalindromePrefixIndex\
    \ = 0\n    var longestPalindromeSuffixIndex = 0\n    var longestPalindromeSuffixLength\
    \ = 0\n    var longestPalindromeSuffixString = \"\"\n    var longestPalindromeSuffixStringLength\
    \ = 0\n    var longestPalindromeSuffixStringIndex = 0\n    var longestPalindromeSuffixStringReverseIndex\
    \ = 0\n    var longestPalindromeSuffixStringReverse = \"\"\n    var longestPalindromeSuffixStringReverseLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseIndex = 0\n    var longestPalindromeSuffixStringReverseString\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseStringLength = 0\n    var\
    \ longestPalindromeSuffixStringReverseStringIndex = 0\n    var longestPalindromeSuffixStringReverseStringReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseStringReverseLength = 0\n\
    \    var longestPalindromeSuffixStringReverseStringReverseIndex = 0\n    var longestPalindromeSuffixStringReverseStringReverseString\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseStringReverseStringLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseStringReverseStringIndex =\
    \ 0\n    var longestPalindromeSuffixStringReverseStringReverseStringReverse =\
    \ \"\"\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseIndex\
    \ = 0\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseString\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseIndex\
    \ = 0\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseString\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringIndex\
    \ = 0\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringIndex\
    \ = 0\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringIndex\
    \ = 0\n    var longest", "    var string = string\n    var longestPalindrome =\
    \ \"\"\n    var longestPalindromeLength = 0\n    var longestPalindromePrefix =\
    \ \"\"\n    var longestPalindromeSuffix = \"\"\n    var longestPalindromePrefixLength\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromePrefixReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverse = \"\"\n    var longestPalindromePrefixReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseLength = 0\n    var longestPalindromePrefixReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverse = \"\"\n    var longestPalindromePrefixReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestPalindromePrefixReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixReverseReverseLength = 0\n    var longestP",
  "    var string = string\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromePrefixLength = 0\n    var longestPalindromeSuffixLength\
    \ = 0\n    var longestPalindromePrefixString = \"\"\n    var longestPalindromeSuffixString\
    \ = \"\"\n    var longestPalindromePrefixStringLength = 0\n    var longestPalindromeSuffixStringLength\
    \ = 0\n    var longestPalindromePrefixStringReverse = \"\"\n    var longestPalindromeSuffixStringReverse\
    \ = \"\"\n    var longestPalindromePrefixStringReverseLength = 0\n    var longestPalindromeSuffixStringReverseLength\
    \ = 0\n    var longestPalindromePrefixStringReverseReverse = \"\"\n    var longestPalindromeSuffixStringReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixStringReverseReverseLength = 0\n    var\
    \ longestPalindromeSuffixStringReverseReverseLength = 0\n    var longestPalindromePrefixStringReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseReverseReverse = \"\"\n\
    \    var longestPalindromePrefixStringReverseReverseReverseLength = 0\n    var\
    \ longestPalindromeSuffixStringReverseReverseReverseLength = 0\n    var longestPalindromePrefixStringReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseReverseReverseReverse =\
    \ \"\"\n    var longestPalindromePrefixStringReverseReverseReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseReverseReverseReverseLength\
    \ = 0\n    var longestPalindromePrefixStringReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixStringReverseReverseReverseReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseReverseReverseReverseLength\
    \ = 0\n    var longestPalindromePrefixStringReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixStringReverseReverseReverseReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseReverseReverseReverseReverseLength\
    \ = 0\n    var longestPalindromePrefixStringReverseReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromePrefixStringReverseReverseReverseReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseReverseReverseReverseLength\
    \ = 0\n    var longestPalindromePrefixStringReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseReverseReverseReverseReverse\
    \ = \"\"\n    var longestPalindro", "    var palindrome = string\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    var longestPalindromeIndex\
    \ = 0\n    for index in 0..<string.characters.count {\n        let char = string.characters[index]\n\
    \        let reversedChar = String(string.characters.reverse())[index]\n     \
    \   if char == reversedChar {\n            palindrome = palindrome.replacingOccurrences(of:\
    \ char, with: reversedChar)\n            longestPalindrome = palindrome\n    \
    \        longestPalindromeLength = index\n            longestPalindromeIndex =\
    \ index\n        }\n    }\n    if longestPalindromeLength > longestPalindromeIndex\
    \ {\n        palindrome = palindrome.replacingOccurrences(of: longestPalindrome,\
    \ with: longestPalindrome[longestPalindromeLength..<longestPalindromeIndex])\n\
    \    }\n    return palindrome", "    var string = string\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    var longestPalindromePrefixLength\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromeSuffixIndex\
    \ = 0\n    var longestPalindromePrefixIndex = 0\n    var longestPalindromeSuffixChar\
    \ = \"\"\n    var longestPalindromePrefixChar = \"\"\n    var longestPalindromeSuffixCharIndex\
    \ = 0\n    var longestPalindromePrefixCharIndex = 0\n    var longestPalindromeSuffixCharCount\
    \ = 1\n    var longestPalindromePrefixCharCount = 1\n    var longestPalindromeSuffixCharCountIndex\
    \ = 0\n    var longestPalindromePrefixCharCountIndex = 0\n    var longestPalindromeSuffixCharCountCount\
    \ = 0\n    var longestPalindromePrefixCharCountCount = 0\n    var longestPalindromeSuffixCharCountCountIndex\
    \ = 0\n    var longestPalindromePrefixCharCountCountIndex = 0\n    var longestPalindromeSuffixCharCountCountCount\
    \ = 0\n    var longestPalindromePrefixCharCountCountIndex = 0\n    var longestPalindromeSuffixCharCountCountCount\
    \ = 0\n    var longestPalindromePrefixCharCountCountIndex = 0\n    var longestPalindromeSuffixCharCountCountCount\
    \ = 0\n    var longestPalindromePrefixCharCountCountIndex = 0\n    var longestPalindromeSuffixCharCountCountCount\
    \ = 0\n    var longestPalindromePrefixCharCountCountIndex = 0\n    var longestPalindromeSuffixCharCountCountCount\
    \ = 0\n    var longestPalindromePrefixCharCountCountIndex = 0\n    var longestPalindromeSuffixCharCountCountCount\
    \ = 0\n    var longestPalindromePrefixCharCountCountIndex = 0\n    var longestPalindromeSuffixCharCountCountCount\
    \ = 0\n    var longestPalindromePrefixCharCountCountIndex = 0\n    var longestPalindromeSuffixCharCountCountCount\
    \ = 0\n    var longestPalindromePrefixCharCountCountIndex = 0\n    var longestPalindromeSuffixCharCountCountCount\
    \ = 0\n    var longestPalindromePrefixCharCountCountIndex = 0\n    var longestPalindromeSuffixCharCountCountCount\
    \ = 0\n    var longestPalindromePrefixCharCountCountIndex = 0\n    var longestPalindromeSuffixCharCountCountCount\
    \ = 0\n    var longestPalindromePrefixCharCountCountIndex = 0\n    var longestPalindromeSuffixCharCountCountCount\
    \ = 0\n    var longestPalindromePrefixCharCountCountIndex = 0\n    var ", "  \
    \  var result = \"\"\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromeStart = 0\n    var longestPalindromeEnd = 0\n\
    \    var longestPalindromePaddedStart = 0\n    var longestPalindromePaddedEnd\
    \ = 0\n    var longestPalindromePaddedLength = 0\n    var longestPalindromePaddedStartIndex\
    \ = 0\n    var longestPalindromePaddedEndIndex = 0\n    var longestPalindromePaddedLengthIndex\
    \ = 0\n    var longestPalindromePaddedStartIndex2 = 0\n    var longestPalindromePaddedEndIndex2\
    \ = 0\n    var longestPalindromePaddedLengthIndex2 = 0\n    var longestPalindromePaddedStartIndex3\
    \ = 0\n    var longestPalindromePaddedEndIndex3 = 0\n    var longestPalindromePaddedLengthIndex3\
    \ = 0\n    var longestPalindromePaddedStartIndex4 = 0\n    var longestPalindromePaddedEndIndex4\
    \ = 0\n    var longestPalindromePaddedLengthIndex4 = 0\n    var longestPalindromePaddedStartIndex5\
    \ = 0\n    var longestPalindromePaddedEndIndex5 = 0\n    var longestPalindromePaddedLengthIndex5\
    \ = 0\n    var longestPalindromePaddedStartIndex6 = 0\n    var longestPalindromePaddedEndIndex6\
    \ = 0\n    var longestPalindromePaddedLengthIndex6 = 0\n    var longestPalindromePaddedStartIndex7\
    \ = 0\n    var longestPalindromePaddedEndIndex7 = 0\n    var longestPalindromePaddedLengthIndex7\
    \ = 0\n    var longestPalindromePaddedStartIndex8 = 0\n    var longestPalindromePaddedEndIndex8\
    \ = 0\n    var longestPalindromePaddedLengthIndex8 = 0\n    var longestPalindromePaddedStartIndex9\
    \ = 0\n    var longestPalindromePaddedEndIndex9 = 0\n    var longestPalindromePaddedLengthIndex9\
    \ = 0\n    var longestPalindromePaddedStartIndex10 = 0\n    var longestPalindromePaddedEndIndex10\
    \ = 0\n    var longestPalindromePaddedLengthIndex10 = 0\n    var longestPalindromePaddedStartIndex11\
    \ = 0\n    var longestPalindromePaddedEndIndex11 = 0\n    var longestPalindromePaddedLengthIndex11\
    \ = 0\n    var longestPalindromePaddedStartIndex12 = 0\n    var ", "    var result\
    \ = \"\"\n    var longestPalindrome = \"\"\n    var longestPalindromeLength =\
    \ 0\n    var longestPalindromeIndex = 0\n    for index in 0..<string.characters.count\
    \ {\n        let character = string.characters[index]\n        let reversedCharacter\
    \ = string.characters.reversed().first(where: { $0 == character })!\n        if\
    \ character == reversedCharacter {\n            result += character\n        \
    \    longestPalindrome = result\n            longestPalindromeLength = result.characters.count\n\
    \            longestPalindromeIndex = index\n        }\n    }\n    if longestPalindromeLength\
    \ > 0 {\n        result = result + String(string.characters.reversed().prefix(longestPalindromeLength))\n\
    \    }\n    return result", "    var result = \"\"\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindrome = \"\"\n    for character in string {\n     \
    \   if character == character {\n            result += character\n        } else\
    \ {\n            if longestPalindromeLength < len(longestPalindrome) {\n     \
    \           longestPalindromeLength = len(longestPalindrome)\n               \
    \ longestPalindrome = character\n            }\n        }\n    }\n    if longestPalindromeLength\
    \ < len(longestPalindrome) {\n        result += longestPalindrome\n    }\n   \
    \ return result", "    var reversed = \"\"\n    var longestPalindrome = \"\"\n\
    \    for character in string {\n        reversed = reversed.appending(character)\n\
    \        if character == string[string.index(before: reversed)] {\n          \
    \  longestPalindrome = reversed\n        }\n    }\n    return longestPalindrome",
  "    var string = string\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromeStartIndex = 0\n    var longestPalindromeEndIndex\
    \ = 0\n    var longestPalindromeStartIndexInReverse = 0\n    var longestPalindromeEndIndexInReverse\
    \ = 0\n    var longestPalindromeStartIndexInReverseReverse = 0\n    var longestPalindromeEndIndexInReverseReverse\
    \ = 0\n    var longestPalindromeStartIndexInReverseReverseReverse = 0\n    var\
    \ longestPalindromeEndIndexInReverseReverseReverse = 0\n    var longestPalindromeStartIndexInReverseReverseReverse\
    \ = 0\n    var longestPalindromeEndIndexInReverseReverseReverse = 0\n    var longestPalindromeStartIndexInReverseReverseReverse\
    \ = 0\n    var longestPalindromeEndIndexInReverseReverseReverse = 0\n    var longestPalindromeStartIndexInReverseReverseReverse\
    \ = 0\n    var longestPalindromeEndIndexInReverseReverseReverse = 0\n    var longestPalindromeStartIndexInReverseReverseReverse\
    \ = 0\n    var longestPalindromeEndIndexInReverseReverseReverse = 0\n    var longestPalindromeStartIndexInReverseReverseReverse\
    \ = 0\n    var longestPalindromeEndIndexInReverseReverseReverse = 0\n    var longestPalindromeStartIndexInReverseReverseReverse\
    \ = 0\n    var longestPalindromeEndIndexInReverseReverseReverse = 0\n    var longestPalindromeStartIndexInReverseReverseReverse\
    \ = 0\n    var longestPalindromeEndIndexInReverseReverseReverse = 0\n    var longestPalindromeStartIndexInReverseReverseReverse\
    \ = 0\n    var longestPalindromeEndIndexInReverseReverseReverse = 0\n    var longestPalindromeStartIndexInReverseReverseReverse\
    \ = 0\n    var longestPalindromeEndIndexInReverseReverseReverse = 0\n    var longestPalindromeStartIndexInReverseReverseReverse\
    \ = 0\n    var longestPalindromeEndIndexInReverseReverseReverse = 0\n    var longestPalindromeStartIndexInReverseReverseReverse\
    \ = 0\n    var longestPalindromeEndIndexInReverseReverseReverse = 0\n    var longestPalindromeStartIndexInReverseReverseReverse\
    \ = 0\n    var longestPalindromeEndIndexInReverseReverseReverse = 0\n    var longestPalindromeStartIndexInReverseReverseReverse\
    \ = 0\n    var longestPalindromeEndIndexInReverseReverseReverse = 0\n    var longestPalindromeStartIndexInReverseReverseReverse\
    \ = 0\n    var longestPalindromeEndIndexInReverseReverseReverse = 0\n    var ",
  "    var reversedString = string\n    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = 0\n    for _ in 0..<string.characters.count {\n        let index = string.index(string.startIndex,\
    \ offsetBy: longestPalindromeLength)\n        let char = string.substring(with:\
    \ index).first!\n        let reversedChar = reversedString.substring(with: reversedString.index(before:\
    \ reversedString.endIndex).reversed())\n        if char == reversedChar {\n  \
    \          longestPalindromeLength += 1\n        } else {\n            longestPalindromeLength\
    \ = 0\n        }\n        if longestPalindromeLength > longestPalindrome.characters.count\
    \ {\n            longestPalindrome = string\n        }\n    }\n    return longestPalindrome",
  "    var longestPalindrome = string\n    var longestPalindromeLength = 0\n    var\
    \ longestPalindromePrefix: String = string\n    var longestPalindromeSuffix: String\
    \ = string\n\n    for _ in 0..<string.count {\n        let currentChar = string[string.startIndex]\n\
    \        let currentCharLength = string.distance(from: string.startIndex, to:\
    \ string.endIndex) - 1\n\n        if currentCharLength > longestPalindromeLength\
    \ {\n            longestPalindrome = string\n            longestPalindromeLength\
    \ = currentCharLength\n            longestPalindromePrefix = string\n        \
    \    longestPalindromeSuffix = string\n        }\n\n        if currentCharLength\
    \ == longestPalindromeLength {\n            longestPalindromeSuffix += currentChar\n\
    \        }\n\n        if currentCharLength < longestPalindromeLength {\n     \
    \       longestPalindromePrefix = string\n            longestPalindromeSuffix\
    \ = string\n        }\n    }\n\n    return longestPalindromePrefix + longestPalindromeSuffix\
    \ + longestPalindrome", "    let longestPalindrome = longestPalindrome(string)\n\
    \    let reversedString = reverseString(string, longestPalindrome)\n    return\
    \ reversedString + longestPalindrome", "    var longestPalindrome = \"\"\n   \
    \ var longestPalindromeLength = 0\n    var longestPalindromePrefix = \"\"\n  \
    \  var longestPalindromeSuffix = \"\"\n    for letter in string {\n        if\
    \ letter == longestPalindrome[longestPalindromeLength] {\n            longestPalindromeLength\
    \ += 1\n        } else {\n            if longestPalindromeLength > 0 {\n     \
    \           longestPalindrome = longestPalindromePrefix + longestPalindrome[longestPalindromeLength..<longestPalindromeLength].reversed()\n\
    \                longestPalindromePrefix = \"\"\n                longestPalindromeSuffix\
    \ = \"\"\n                longestPalindromeLength = 0\n            }\n       \
    \     longestPalindrome = longestPalindromePrefix + letter\n            longestPalindromeLength\
    \ += 1\n        }\n    }\n    if longestPalindromeLength > 0 {\n        longestPalindrome\
    \ = longestPalindromePrefix + longestPalindrome[longestPalindromeLength..<longestPalindromeLength].reversed()\n\
    \    }\n    return longestPalindrome", "    let reverse = string.reversed()\n\
    \    let prefix = string.prefix(string.reversed())\n    return prefix + reverse",
  "    let maxLen = string.characters.count\n    let longestPalindrome = make_palindrome_helper(string:\
    \ string, maxLen: maxLen)\n    let reversedLongestPalindrome = reverseString(longestPalindrome)\n\
    \    return reversedLongestPalindrome + longestPalindrome", "    var stringToReturn\
    \ = string\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    for stringIndex in 0..<string.count {\n        let stringToCheck =\
    \ string[stringIndex]\n        let stringToCheckLength = stringToCheck.characters.count\n\
    \        if stringToCheckLength > longestPalindromeLength {\n            longestPalindrome\
    \ = stringToCheck\n            longestPalindromeLength = stringToCheckLength\n\
    \        }\n    }\n    let reversedString = stringToReturn.replacingOccurrences(of:\
    \ longestPalindrome, with: longestPalindrome.reversed())\n    return reversedString",
  "    var reverse = \"\"\n    var longest = \"\"\n    for char in string {\n    \
    \    reverse = reverse.chars(using: String.Encoding.utf8).reversed().joined()\n\
    \        if char == reverse {\n            longest = char + reverse\n        }\n\
    \    }\n    return longest", "    var result = \"\"\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    for character in string {\n\
    \        if character == character {\n            result += character\n      \
    \  } else {\n            if longestPalindromeLength < character.count {\n    \
    \            longestPalindrome = character\n                longestPalindromeLength\
    \ = character.count\n            }\n        }\n    }\n    for character in string\
    \ {\n        if character == character {\n            result += character\n  \
    \      } else {\n            if longestPalindromeLength < character.count {\n\
    \                longestPalindrome = character\n                longestPalindromeLength\
    \ = character.count\n            }\n        }\n    }\n    if longestPalindromeLength\
    \ > 0 {\n        result = result + longestPalindrome.repeat(longestPalindromeLength)\n\
    \    }\n    return result", "    var stringToReturn = string\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    var longestPalindromeIndex\
    \ = 0\n    for stringIndex in 0..<string.count {\n        let stringChar = string[stringIndex]\n\
    \        let stringCharIsPalindrome = stringChar == string.reversed()\n      \
    \  if stringCharIsPalindrome {\n            if longestPalindromeLength < stringChar.count\
    \ {\n                longestPalindrome = stringToReturn\n                longestPalindromeLength\
    \ = stringChar.count\n                longestPalindromeIndex = stringIndex\n \
    \           }\n        }\n        stringToReturn = stringToReturn + stringChar\n\
    \    }\n    return stringToReturn[longestPalindromeIndex..<longestPalindromeIndex+longestPalindromeLength]",
  "    var result = \"\"\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    for character in string {\n        if character == character {\n  \
    \          result += character\n        }\n        if character == string[string.index(before:\
    \ character)] {\n            result += string[string.index(before: character)]\n\
    \        }\n        if character == string[string.index(before: character, after:\
    \ 0)] {\n            result += string[string.index(before: character, after: 0)]\n\
    \        }\n        if character == string[string.index(before: character, after:\
    \ 1)] {\n            result += string[string.index(before: character, after: 1)]\n\
    \        }\n        if character == string[string.index(before: character, after:\
    \ 2)] {\n            result += string[string.index(before: character, after: 2)]\n\
    \        }\n        if character == string[string.index(before: character, after:\
    \ 3)] {\n            result += string[string.index(before: character, after: 3)]\n\
    \        }\n        if character == string[string.index(before: character, after:\
    \ 4)] {\n            result += string[string.index(before: character, after: 4)]\n\
    \        }\n        if character == string[string.index(before: character, after:\
    \ 5)] {\n            result += string[string.index(before: character, after: 5)]\n\
    \        }\n        if character == string[string.index(before: character, after:\
    \ 6)] {\n            result += string[string.index(before: character, after: 6)]\n\
    \        }\n        if character == string[string.index(before: character, after:\
    \ 7)] {\n            result += string[string.index(before: character, after: 7)]\n\
    \        }\n        if character == string[string.index(before: character, after:\
    \ 8)] {\n            result += string[string.index(before: character, after: 8)]\n\
    \        }\n        if character == string[string.index(before: character, after:\
    \ 9)] {\n            result += string[string.index(before: character, after: 9)]\n\
    \        }\n        if character == string[string.index(before: character, after:\
    \ 10)] {\n            result += string[string.index(before: character, after:\
    \ 10)]\n        }\n        if character == string[string.index(before: character,\
    \ after: 11)] {\n            result += string[string.index(before: character,\
    \ after: 11)]\n        }\n        if character == string[string.index(before:\
    \ character, after: 12)] {\n            result += string[string.index(before:\
    \ character, after: 12)]\n        }\n        if character == string[string.index(before:\
    \ character, after: 13)] {\n            result += string[string.", "    var stringToReturn\
    \ = string\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    for stringToCheck in string.characters {\n        if stringToCheck\
    \ == stringToReturn.characters.last {\n            longestPalindrome = stringToReturn\n\
    \            longestPalindromeLength = stringToCheck\n        } else {\n     \
    \       var stringToCheckReversed = stringToCheck.reversed()\n            if stringToCheck\
    \ == stringToCheckReversed {\n                stringToReturn = stringToReturn\
    \ + stringToCheck\n                longestPalindrome = stringToReturn\n      \
    \          longestPalindromeLength = stringToCheck\n            }\n        }\n\
    \    }\n    return longestPalindrome", "    var result = \"\"\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    var longestPalindromeStartIndex\
    \ = 0\n    var longestPalindromeEndIndex = 0\n    var longestPalindromeStartIndexInString\
    \ = 0\n    var longestPalindromeEndIndexInString = 0\n    var longestPalindromeStartIndexInReversedString\
    \ = 0\n    var longestPalindromeEndIndexInReversedString = 0\n    var longestPalindromeStartIndexInReversedString\
    \ = 0\n    var longestPalindromeEndIndexInReversedString = 0\n    var longestPalindromeStartIndexInReversedString\
    \ = 0\n    var longestPalindromeEndIndexInReversedString = 0\n    var longestPalindromeStartIndexInReversedString\
    \ = 0\n    var longestPalindromeEndIndexInReversedString = 0\n    var longestPalindromeStartIndexInReversedString\
    \ = 0\n    var longestPalindromeEndIndexInReversedString = 0\n    var longestPalindromeStartIndexInReversedString\
    \ = 0\n    var longestPalindromeEndIndexInReversedString = 0\n    var longestPalindromeStartIndexInReversedString\
    \ = 0\n    var longestPalindromeEndIndexInReversedString = 0\n    var longestPalindromeStartIndexInReversedString\
    \ = 0\n    var longestPalindromeEndIndexInReversedString = 0\n    var longestPalindromeStartIndexInReversedString\
    \ = 0\n    var longestPalindromeEndIndexInReversedString = 0\n    var longestPalindromeStartIndexInReversedString\
    \ = 0\n    var longestPalindromeEndIndexInReversedString = 0\n    var longestPalindromeStartIndexInReversedString\
    \ = 0\n    var longestPalindromeEndIndexInReversedString = 0\n    var longestPalindromeStartIndexInReversedString\
    \ = 0\n    var longestPalindromeEndIndexInReversedString = 0\n    var longestPalindromeStartIndexInReversedString\
    \ = 0\n    var longestPalindromeEndIndexInReversedString = 0\n    var longestPalindromeStartIndexInReversedString\
    \ = 0\n    var longestPalindromeEndIndexInReversedString = 0\n    var longestPalindromeStartIndexInReversedString\
    \ = 0\n    var longestPalindromeEndIndexInReversedString = 0\n    var longestPalindromeStartIndexInReversedString\
    \ = 0\n    var longestPalindromeEndIndexInReversedString = 0", "    var longestPalindrome\
    \ = string\n    var longestPalindromeLength = 0\n    var longestPalindromePrefix:\
    \ String = \"\"\n    var longestPalindromeSuffix: String = \"\"\n\n    for character\
    \ in string {\n        if character == longestPalindrome[longestPalindromeLength]\
    \ {\n            longestPalindromeLength += 1\n        } else {\n            longestPalindromeLength\
    \ = 0\n        }\n    }\n\n    for character in string {\n        if character\
    \ == longestPalindrome[longestPalindromeLength] {\n            longestPalindromePrefix\
    \ = longestPalindromePrefix + character\n        } else {\n            longestPalindromeSuffix\
    \ = longestPalindromeSuffix + character\n        }\n    }\n\n    return longestPalindromePrefix\
    \ + longestPalindromeSuffix + longestPalindrome[longestPalindromeLength..<longestPalindromeLength\
    \ + longestPalindromePrefix.count]", "    var stringToReturn = string\n    var\
    \ longestPalindromeLength = 0\n    var longestPalindrome = \"\"\n    for stringToCheck\
    \ in string.characters {\n        if stringToCheck == stringToReturn.characters.last\
    \ {\n            longestPalindromeLength += 1\n            longestPalindrome =\
    \ stringToReturn\n        } else {\n            if longestPalindromeLength > longestPalindrome.characters.last\
    \ {\n                longestPalindromeLength += 1\n                longestPalindrome\
    \ = stringToReturn\n            }\n        }\n    }\n    return longestPalindrome",
  "    var longestPalindrome = string\n    var longestPalindromeLength = 0\n    var\
    \ longestPalindromePrefix: String = \"\"\n    var longestPalindromeSuffix: String\
    \ = \"\"\n    for character in string {\n        if character == longestPalindrome[longestPalindromeLength]\
    \ {\n            longestPalindromeLength += 1\n        } else {\n            longestPalindromeLength\
    \ = 0\n        }\n        if longestPalindromeLength > longestPalindromeLength\
    \ {\n            longestPalindromePrefix = string\n            longestPalindromeSuffix\
    \ = string\n        }\n    }\n    for character in string {\n        if character\
    \ == longestPalindrome[longestPalindromeLength] {\n            longestPalindromeLength\
    \ += 1\n        } else {\n            longestPalindromeLength = 0\n        }\n\
    \        if longestPalindromeLength > longestPalindromeLength {\n            longestPalindromePrefix\
    \ = string\n            longestPalindromeSuffix = string\n        }\n    }\n \
    \   return longestPalindromePrefix + longestPalindromeSuffix + longestPalindrome[longestPalindromeLength]",
  "    var stringToReturn = string\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    for character in string {\n        if character == character[longestPalindromeLength]\
    \ {\n            longestPalindromeLength += 1\n        } else {\n            if\
    \ longestPalindromeLength > 0 {\n                stringToReturn = stringToReturn\
    \ + String(character[longestPalindromeLength - 1])\n            }\n          \
    \  longestPalindrome = String(character)\n            longestPalindromeLength\
    \ = 1\n        }\n    }\n    if longestPalindromeLength > 0 {\n        stringToReturn\
    \ = stringToReturn + String(character[longestPalindromeLength - 1])\n    }\n \
    \   return stringToReturn", "    var longestPalindrome = string\n    var longestPalindromeLength\
    \ = longestPalindrome.characters.count\n    var longestPalindromePrefix = \"\"\
    \n    var longestPalindromeSuffix = \"\"\n    var longestPalindromePrefixLength\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    for character in string\
    \ {\n        if character == longestPalindrome[longestPalindromeLength] {\n  \
    \          longestPalindromeLength += 1\n        } else {\n            if longestPalindromeLength\
    \ > longestPalindromePrefixLength {\n                longestPalindromePrefix =\
    \ String(longestPalindromePrefix)\n                longestPalindromePrefixLength\
    \ = longestPalindromeLength\n            }\n            longestPalindrome = String(longestPalindrome)\n\
    \            longestPalindromeLength = longestPalindrome.characters.count\n  \
    \          longestPalindrome = String(longestPalindrome)\n            longestPalindromeLength\
    \ = 0\n            longestPalindromePrefix = String(character)\n            longestPalindromePrefixLength\
    \ = 1\n        }\n    }\n    if longestPalindromeLength > longestPalindromeSuffixLength\
    \ {\n        longestPalindromeSuffix = String(longestPalindromeSuffix)\n     \
    \   longestPalindromeSuffixLength = longestPalindromeLength\n    }\n    return\
    \ longestPalindromePrefix + String(longestPalindrome[longestPalindromePrefixLength..<longestPalindromeSuffixLength])\
    \ + longestPalindromeSuffix", "    var stringToPalindrome = string\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    var longestPalindromeIndex\
    \ = 0\n    var longestPalindromePrefixIndex = 0\n    var longestPalindromeSuffixIndex\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromeSuffixString\
    \ = \"\"\n    var longestPalindromeSuffixStringLength = 0\n    var longestPalindromeSuffixStringIndex\
    \ = 0\n    var longestPalindromeSuffixStringReverseIndex = 0\n    var longestPalindromeSuffixStringReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseLength = 0\n    var longestPalindromeSuffixStringReverseIndex\
    \ = 0\n    var longestPalindromeSuffixStringReverseString = \"\"\n    var longestPalindromeSuffixStringReverseStringLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseStringIndex = 0\n    var longestPalindromeSuffixStringReverseStringReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseStringReverseLength = 0\n\
    \    var longestPalindromeSuffixStringReverseStringReverseIndex = 0\n    var longestPalindromeSuffixStringReverseStringReverseString\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseStringReverseStringLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseStringReverseStringIndex =\
    \ 0\n    var longestPalindromeSuffixStringReverseStringReverseStringReverse =\
    \ \"\"\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseIndex\
    \ = 0\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseString\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseIndex\
    \ = 0\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringReverseLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringReverseIndex\
    \ = 0\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringReverseString\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringReverseStringLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringReverseIndex\
    \ = 0\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringReverseString\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringReverseStringLength\
    \ = 0\n    var longestP", "    var result = \"\"\n    var longestPalindrome =\
    \ \"\"\n    var longestPalindromeLength = 0\n    for character in string {\n \
    \       if character == character {\n            result += character\n       \
    \ } else {\n            longestPalindromeLength += 1\n            if longestPalindromeLength\
    \ > longestPalindrome.length {\n                longestPalindrome = result\n \
    \           }\n            result = \"\"\n        }\n    }\n    if longestPalindromeLength\
    \ > longestPalindrome.length {\n        longestPalindrome = result\n    }\n  \
    \  return longestPalindrome", "    var string = string\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    var longestPalindromePrefixLength\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromePostfixLength\
    \ = 0\n    var longestPalindromePostfix = \"\"\n    var longestPalindromePostfixReverse\
    \ = \"\"\n    var longestPalindromePostfixReverseLength = 0\n    var longestPalindromePostfixReversePrefix\
    \ = \"\"\n    var longestPalindromePostfixReverseSuffixLength = 0\n    var longestPalindromePostfixReverseSuffix\
    \ = \"\"\n    var longestPalindromePostfixReversePostfix = \"\"\n    var longestPalindromePostfixReversePostfixLength\
    \ = 0\n    var longestPalindromePostfixReversePostfixReverse = \"\"\n    var longestPalindromePostfixReversePostfixReverseLength\
    \ = 0\n    var longestPalindromePostfixReversePostfixReversePrefix = \"\"\n  \
    \  var longestPalindromePostfixReversePostfixReverseSuffixLength = 0\n    var\
    \ longestPalindromePostfixReversePostfixReverseSuffix = \"\"\n    var longestPalindromePostfixReversePostfixReversePostfix\
    \ = \"\"\n    var longestPalindromePostfixReversePostfixReversePostfixLength =\
    \ 0\n    var longestPalindromePostfixReversePostfixReversePostfixReverse = \"\"\
    \n    var longestPalindromePostfixReversePostfixReversePostfixReverseLength =\
    \ 0\n    var longestPalindromePostfixReversePostfixReversePostfixReversePrefix\
    \ = \"\"\n    var longestPalindromePostfixReversePostfixReversePostfixReverseSuffixLength\
    \ = 0\n    var longestPalindromePostfixReversePostfixReversePostfixReverseSuffix\
    \ = \"\"\n    var longestPalindromePostfixReversePostfixReversePostfixReversePostfix\
    \ = \"\"\n    var longestPalindromePostfixReversePostfixReversePostfixReversePostfixLength\
    \ = 0\n    var longestPalindromePostfixReversePostfixReversePostfixReversePostfixReverse\
    \ = \"\"\n    var longestPalindromePostfixReversePostfixReversePostfixReversePostfixLength\
    \ = 0\n    var longestPalindromePostfixReversePostfixReversePostfixReversePostfixReverse\
    \ = \"\"\n    var longestPalindromePostfixReversePostfixReversePostfixReversePostfixLength\
    \ = 0\n    var longestPalindromePostfixReversePostfixReversePostfixReversePostfixReverse\
    \ = \"\"\n    var longestPalindromePostfixReversePostfixReversePostfixReversePostfix",
  "    var stringToReturn = string\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromePrefixLength = 0\n    var longestPalindromeSuffixLength\
    \ = 0\n    var longestPalindromePrefixString = \"\"\n    var longestPalindromeSuffixString\
    \ = \"\"\n    var longestPalindromePrefixStringReverse = \"\"\n    var longestPalindromeSuffixStringReverse\
    \ = \"\"\n    var longestPalindromePrefixStringReverseLength = 0\n    var longestPalindromeSuffixStringReverseLength\
    \ = 0\n    var longestPalindromePrefixStringReverseString = \"\"\n    var longestPalindromeSuffixStringReverseString\
    \ = \"\"\n    var longestPalindromePrefixStringReverseStringReverse = \"\"\n \
    \   var longestPalindromeSuffixStringReverseStringReverse = \"\"\n    var longestPalindromePrefixStringReverseStringReverseLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseStringReverseLength = 0\n \
    \   var longestPalindromePrefixStringReverseStringReverseString = \"\"\n    var\
    \ longestPalindromeSuffixStringReverseStringReverseString = \"\"\n    var longestPalindromePrefixStringReverseStringReverseStringReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseStringReverseStringReverse\
    \ = \"\"\n    var longestPalindromePrefixStringReverseStringReverseStringReverseLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseLength\
    \ = 0\n    var longestPalindromePrefixStringReverseStringReverseStringReverseString\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseString\
    \ = \"\"\n    var longestPalindromePrefixStringReverseStringReverseStringReverseStringReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseString\
    \ = \"\"\n    var longestPalindromePrefixStringReverseStringReverseStringReverseStringReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringReverse\
    \ = \"\"\n    var longestPalindromePrefixStringReverseStringReverseStringReverseStringReverseString\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringReverse\
    \ = \"\"\n    var longestPalindromePrefixStringReverseStringReverseStringReverseStringReverseString\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringReverse\
    \ = \"\"\n    var longestPalindromePrefixStringReverseStringReverseStringReverseStringReverseString\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringReverse\
    \ = \"\"\n    var longestPalindromePrefixStringReverseStringReverseStringReverseStringReverseString\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseStringReverseString", " \
    \   var stringToReturn = string\n    var longestPalindromeLength = 0\n    var\
    \ longestPalindrome = \"\"\n    var longestPalindromeIndex = 0\n    var longestPalindromePrefixIndex\
    \ = 0\n    var longestPalindromeSuffixIndex = 0\n    var longestPalindromeSuffixLength\
    \ = 0\n    var longestPalindromeSuffixString = \"\"\n    var longestPalindromeSuffixStringIndex\
    \ = 0\n    var longestPalindromeSuffixStringLength = 0\n    var longestPalindromeSuffixStringReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseIndex = 0\n    var longestPalindromeSuffixStringReverseLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseReverse = \"\"\n    var longestPalindromeSuffixStringReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixStringReverseReverseLength = 0\n    var\
    \ longestPalindromeSuffixStringReverseReverseString = \"\"\n    var longestPalindromeSuffixStringReverseReverseStringIndex\
    \ = 0\n    var longestPalindromeSuffixStringReverseReverseStringLength = 0\n \
    \   var longestPalindromeSuffixStringReverseReverseStringReverse = \"\"\n    var\
    \ longestPalindromeSuffixStringReverseReverseStringReverseIndex = 0\n    var longestPalindromeSuffixStringReverseReverseStringReverseLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseReverseStringReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseReverseStringReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixStringReverseReverseStringReverseReverseLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseReverseStringReverseReverseReverseString\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseReverseStringReverseReverseStringReverseIndex\
    \ = 0\n    var longestPalindromeSuffixStringReverseReverseStringReverseStringReverseLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseReverseStringReverseStringReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseReverseStringReverseStringReverseReverseIndex\
    \ = 0\n    var longestPalindromeSuffixStringReverseReverseStringReverseStringReverseLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseReverseStringReverseStringReverseReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseReverseStringReverseStringReverseIndex\
    \ = 0\n    var longestPalindromeSuffixStringReverseReverseStringReverseStringReverseLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseReverseStringReverseStringReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseReverseStringReverseStringReverseIndex\
    \ = 0\n    var longestPalindromeSuffixStringReverseReverseStringReverseStringReverseLength\
    \ = 0\n    var longestPalindromeSuffix", "    let reversedString = string.reversed()\n\
    \    let longestPalindrome = longestPalindromeFrom(string: reversedString)\n \
    \   let longestPalindromeWithPrefix = longestPalindromeWithPrefix(string: reversedString,\
    \ prefix: string)\n    return longestPalindromeWithPrefix + longestPalindrome",
  "    var longestPalindrome = \"\"\n    var longestPalindromeLength = 0\n    var\
    \ longestPalindromeStart = 0\n    for start in 0..<string.count {\n        let\
    \ end = string.index(start, offsetBy: longestPalindromeLength, limitedBy: string.endIndex)\
    \ ?? string.endIndex\n        let substring = string[start..<end]\n        let\
    \ reversedSubstring = substring.reversed()\n        if substring == reversedSubstring\
    \ {\n            longestPalindromeLength += 1\n            if longestPalindromeLength\
    \ > longestPalindromeStart {\n                longestPalindromeStart = longestPalindromeLength\n\
    \                longestPalindrome = substring\n            }\n        } else\
    \ {\n            longestPalindromeLength = 0\n            longestPalindromeStart\
    \ = 0\n        }\n    }\n    return longestPalindrome", "    let longestPalindrome\
    \ = longestPalindrome(string)\n    let reversedLongestPalindrome = reverseString(longestPalindrome)\n\
    \    return reversedLongestPalindrome + longestPalindrome", "    var longestPalindrome\
    \ = string\n    var longestPalindromeLength = 0\n    var longestPalindromePrefix:\
    \ String = \"\"\n    var longestPalindromeSuffix: String = \"\"\n    var longestPalindromeSuffixLength\
    \ = 0\n\n    for character in string {\n        if character == longestPalindrome[longestPalindromeLength]\
    \ {\n            longestPalindromeLength += 1\n        } else {\n            longestPalindromeLength\
    \ = 0\n        }\n        if longestPalindromeLength > longestPalindromeSuffixLength\
    \ {\n            longestPalindromePrefix = String(longestPalindrome[longestPalindromeLength\
    \ - longestPalindromeSuffixLength..<longestPalindromeLength])\n            longestPalindromeSuffix\
    \ = String(longestPalindrome[longestPalindromeLength..<longestPalindromeLength\
    \ - longestPalindromeSuffixLength])\n            longestPalindromeSuffixLength\
    \ = longestPalindromeLength\n        }\n    }\n\n    return longestPalindromePrefix\
    \ + longestPalindromeSuffix[longestPalindromeSuffixLength..<longestPalindromeSuffixLength\
    \ + longestPalindromeLength]", "    var string = string\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    var longestPalindromeStartIndex\
    \ = 0\n    var longestPalindromeEndIndex = 0\n    var longestPalindromeStartIndexInReverse\
    \ = 0\n    var longestPalindromeEndIndexInReverse = 0\n    var longestPalindromeStartIndexInReverseString\
    \ = \"\"\n    var longestPalindromeEndIndexInReverseString = \"\"\n    var longestPalindromeStartIndexInReverseStringLength\
    \ = 0\n    var longestPalindromeEndIndexInReverseStringLength = 0\n    var longestPalindromeStartIndexInReverseStringLengthString\
    \ = \"\"\n    var longestPalindromeEndIndexInReverseStringLengthString = \"\"\n\
    \    var longestPalindromeStartIndexInReverseStringLengthStringLength = 0\n  \
    \  var longestPalindromeEndIndexInReverseStringLengthStringLength = 0\n    var\
    \ longestPalindromeStartIndexInReverseStringLengthStringLengthString = \"\"\n\
    \    var longestPalindromeEndIndexInReverseStringLengthStringLengthString = \"\
    \"\n    var longestPalindromeStartIndexInReverseStringLengthStringLengthStringLength\
    \ = 0\n    var longestPalindromeEndIndexInReverseStringLengthStringLengthStringLength\
    \ = 0\n    var longestPalindromeStartIndexInReverseStringLengthStringLengthStringLengthString\
    \ = \"\"\n    var longestPalindromeEndIndexInReverseStringLengthStringLengthStringLengthString\
    \ = \"\"\n    var longestPalindromeStartIndexInReverseStringLengthStringLengthStringLengthStringLength\
    \ = 0\n    var longestPalindromeEndIndexInReverseStringLengthStringLengthStringLengthStringLength\
    \ = 0\n    var longestPalindromeStartIndexInReverseStringLengthStringLengthStringLengthStringLengthString\
    \ = \"\"\n    var longestPalindromeEndIndexInReverseStringLengthStringLengthStringLengthStringLengthString\
    \ = \"\"\n    var longestPalindromeStartIndexInReverseStringLengthStringLengthStringLengthStringLengthStringLength\
    \ = 0\n    var longestPalindromeEndIndexInReverseStringLengthStringLengthStringLengthStringLengthStringLength\
    \ = 0\n    var longestPalindromeStartIndexInReverseStringLengthStringLengthStringLengthStringLengthStringLengthString\
    \ = \"\"\n    var longestPalindromeEndIndexInReverseStringLengthStringLengthStringLengthStringLengthStringLengthString\
    \ = \"\"\n    var longestPalindromeStartIndexInReverseStringLengthStringLengthStringLengthStringLengthStringLengthString\
    \ = \"\"\n    var longestPalindromeEndIndexInReverseStringLengthStringLengthStringLengthStringLengthStringLengthStringLength\
    \ = \"\"\n    var longestPalin", "    var string = string\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    var longestPalindromePrefixLength\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromePrefixString\
    \ = \"\"\n    var longestPalindromeSuffixString = \"\"\n    var longestPalindromeString\
    \ = \"\"\n    var longestPalindromeStringLength = 0\n    var longestPalindromeStringPrefixLength\
    \ = 0\n    var longestPalindromeStringSuffixLength = 0\n    var longestPalindromeStringPrefixString\
    \ = \"\"\n    var longestPalindromeStringSuffixString = \"\"\n    var longestPalindromeStringString\
    \ = \"\"\n    var longestPalindromeStringStringLength = 0\n    var longestPalindromeStringStringPrefixLength\
    \ = 0\n    var longestPalindromeStringStringSuffixLength = 0\n    var longestPalindromeStringStringPrefixString\
    \ = \"\"\n    var longestPalindromeStringStringSuffixString = \"\"\n    var longestPalindromeStringStringString\
    \ = \"\"\n    var longestPalindromeStringStringStringLength = 0\n    var longestPalindromeStringStringStringPrefixLength\
    \ = 0\n    var longestPalindromeStringStringStringSuffixLength = 0\n    var longestPalindromeStringStringStringPrefixString\
    \ = \"\"\n    var longestPalindromeStringStringStringSuffixString = \"\"\n   \
    \ var longestPalindromeStringStringStringString = \"\"\n    var longestPalindromeStringStringStringStringLength\
    \ = 0\n    var longestPalindromeStringStringStringStringPrefixLength = 0\n   \
    \ var longestPalindromeStringStringStringStringSuffixLength = 0\n    var longestPalindromeStringStringStringStringPrefixString\
    \ = \"\"\n    var longestPalindromeStringStringStringStringSuffixString = \"\"\
    \n    var longestPalindromeStringStringStringStringString = \"\"\n    var longestPalindromeStringStringStringStringStringLength\
    \ = 0\n    var longestPalindromeStringStringStringStringStringPrefixLength = 0\n\
    \    var longestPalindromeStringStringStringStringStringSuffixLength = 0\n   \
    \ var longestPalindromeStringStringStringStringStringPrefixString = \"\"\n   \
    \ var longestPalindromeStringStringStringStringStringSuffixString = \"\"\n   \
    \ var longestPalindromeStringStringStringStringStringString = \"\"\n    var longestPalindromeStringStringStringStringStringStringLength\
    \ = 0\n    var longestPalindromeStringStringStringStringStringPrefixLength = 0\n\
    \    var longestPalindromeStringStringStringStringStringSuffixLength = 0\n   \
    \ var longestPalindromeStringStringStringStringStringStringPrefixString = \"\"\
    \n    var ", "    var stringToReturn = string\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindrome = \"\"\n    for stringToCheck in string.characters\
    \ {\n        let reversedString = stringToCheck.reversed()\n        if stringToCheck\
    \ == reversedString {\n            longestPalindromeLength += 1\n            longestPalindrome\
    \ += stringToCheck\n        }\n    }\n    if longestPalindromeLength > 0 {\n \
    \       stringToReturn += longestPalindrome\n    }\n    return stringToReturn",
  "    var result = \"\"\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromeIndex = 0\n    var longestPalindromePrefixIndex\
    \ = 0\n    for index in 0..<string.characters.count {\n        let character =\
    \ string.characters[index]\n        let reversedCharacter = reversedString(character)\n\
    \        if character == reversedCharacter {\n            result += character\n\
    \            longestPalindrome = result\n            longestPalindromeLength =\
    \ longestPalindrome.characters.count\n            longestPalindromeIndex = index\n\
    \            longestPalindromePrefixIndex = longestPalindromeIndex\n        }\
    \ else {\n            if longestPalindromeLength > longestPalindromeIndex {\n\
    \                result += string[longestPalindromePrefixIndex..<longestPalindromeIndex]\n\
    \                longestPalindrome = result\n                longestPalindromeLength\
    \ = longestPalindrome.characters.count\n                longestPalindromeIndex\
    \ = index\n                longestPalindromePrefixIndex = longestPalindromeIndex\n\
    \            }\n        }\n    }\n    if longestPalindromeLength > longestPalindromeIndex\
    \ {\n        result += string[longestPalindromePrefixIndex..<longestPalindromeIndex]\n\
    \    }\n    return result", "    let maxLength: Int = string.characters.count\n\
    \    let maxLengthOfLongestPalindrome = maxLength\n    var reversedString = \"\
    \"\n    var longestPalindrome = \"\"\n    var longestPalindromeLength = 0\n  \
    \  for index in 0..<maxLength {\n        let character = string.characters[index]\n\
    \        let reversedCharacter = reverseString(character)\n        if character\
    \ == reversedCharacter {\n            longestPalindromeLength += 1\n         \
    \   if longestPalindromeLength > maxLengthOfLongestPalindrome {\n            \
    \    maxLengthOfLongestPalindrome = longestPalindromeLength\n                longestPalindrome\
    \ = character\n            }\n        } else {\n            longestPalindromeLength\
    \ = 0\n        }\n    }\n    reversedString = reverseString(longestPalindrome)\n\
    \    return reversedString", "    var stringToReturn = string\n    var longestPalindrome\
    \ = String()\n    var longestPalindromeLength = String()\n    var longestPalindromePrefix\
    \ = String()\n    var longestPalindromeSuffix = String()\n    var longestPalindromePostfix\
    \ = String()\n    var longestPalindromePostfixLength = String()\n    var longestPalindromePostfixPrefix\
    \ = String()\n    var longestPalindromePostfixSuffix = String()\n    var longestPalindromePostfixPostfix\
    \ = String()\n    var longestPalindromePostfixPostfixLength = String()\n    var\
    \ longestPalindromePostfixPostfixPrefix = String()\n    var longestPalindromePostfixPostfixSuffix\
    \ = String()\n    var longestPalindromePostfixPostfixPostfix = String()\n    var\
    \ longestPalindromePostfixPostfixPostfixLength = String()\n    var longestPalindromePostfixPostfixPostfixPrefix\
    \ = String()\n    var longestPalindromePostfixPostfixPostfixSuffix = String()\n\
    \    var longestPalindromePostfixPostfixPostfixPostfix = String()\n    var longestPalindromePostfixPostfixPostfixPostfixLength\
    \ = String()\n    var longestPalindromePostfixPostfixPostfixPostfixPrefix = String()\n\
    \    var longestPalindromePostfixPostfixPostfixPostfixSuffix = String()\n    var\
    \ longestPalindromePostfixPostfixPostfixPostfixPostfix = String()\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixLength\
    \ = String()\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPrefix\
    \ = String()\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixSuffix\
    \ = String()\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfix\
    \ = String()\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixLength\
    \ = String()\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPrefix\
    \ = String()\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixSuffix\
    \ = String()\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfix\
    \ = String()\n    var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixLength\
    \ = String()\n    var longestP", "    let longestPalindrome = longestPalindrome(string)\n\
    \    let reversedLongestPalindrome = reversedLongestPalindrome(longestPalindrome)\n\
    \    let reversedLongestPalindromeWithPrefix = reversedLongestPalindromeWithPrefix(longestPalindrome,\
    \ reversedLongestPalindrome)\n    return reversedLongestPalindromeWithPrefix",
  "    let longestPalindrome = longestPalindrome(string)\n    let reversedString =\
    \ reverseString(string, longestPalindrome)\n    return reversedString + longestPalindrome",
  "    let reversedString = string.reversed()\n    let longestPalindrome = longestPalindromeFrom(string,\
    \ reversedString)\n    return longestPalindrome + reversedString", "    var reversed\
    \ = \"\"\n    var longestPalindrome = \"\"\n    for character in string {\n  \
    \      reversed = reversed.appending(character)\n        if longestPalindrome\
    \ == \"\" {\n            longestPalindrome = reversed\n        } else {\n    \
    \        if longestPalindrome == reversed {\n                longestPalindrome\
    \ = longestPalindrome\n            } else {\n                longestPalindrome\
    \ = longestPalindrome.appending(reversed)\n            }\n        }\n    }\n \
    \   return longestPalindrome", "    var result = \"\"\n    var longestPalindrome\
    \ = \"\"\n    var longestPalindromeLength = 0\n    for character in string {\n\
    \        if character == character {\n            longestPalindromeLength += 1\n\
    \            if longestPalindromeLength > longestPalindrome.count {\n        \
    \        longestPalindrome = String(character)\n            }\n        } else\
    \ {\n            if longestPalindromeLength > longestPalindrome.count {\n    \
    \            longestPalindrome = String(character)\n            }\n        }\n\
    \    }\n    for character in string {\n        if character == character {\n \
    \           longestPalindromeLength += 1\n            if longestPalindromeLength\
    \ > longestPalindrome.count {\n                longestPalindrome = String(character)\n\
    \            }\n        } else {\n            if longestPalindromeLength > longestPalindrome.count\
    \ {\n                longestPalindrome = String(character)\n            }\n  \
    \      }\n    }\n    if longestPalindromeLength == 0 {\n        return string\n\
    \    }\n    if longestPalindromeLength == 1 {\n        return string\n    }\n\
    \    if longestPalindromeLength == 2 {\n        return string + String(character)\n\
    \    }\n    if longestPalindromeLength > 2 {\n        for character in string\
    \ {\n            if character == character {\n                longestPalindromeLength\
    \ += 1\n                if longestPalindromeLength > longestPalindrome.count {\n\
    \                    longestPalindrome = String(character)\n                }\n\
    \            } else {\n                if longestPalindromeLength > longestPalindrome.count\
    \ {\n                    longestPalindrome = String(character)\n             \
    \   }\n            }\n        }\n    }\n    if longestPalindromeLength > 2 {\n\
    \        for character in string {\n            if character == character {\n\
    \                longestPalindromeLength += 1\n                if longestPalindromeLength\
    \ > longestPalindrome.count {\n                    longestPalindrome = String(character)\n\
    \                }\n            } else {\n                if longestPalindromeLength\
    \ > longestPalindrome.count {\n                    longestPalindrome = String(character)\n\
    \                }\n            }\n        }\n    }\n    if longestPalindromeLength\
    \ > 2 {\n        for character in string {\n            if character == character\
    \ {\n                longestPalindromeLength += 1\n                if longestPalindromeLength\
    \ > longestPalindrome.count {\n                    longestPalindrome = String(character)\n\
    \                }\n            } else {\n                if longestPalindromeLength\
    \ > longestPalindrome.count {\n", "    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    for character in string {\n        if character == character[character.startIndex]\
    \ {\n            longestPalindromeLength += 1\n        } else {\n            if\
    \ longestPalindromeLength > longestPalindromeLength {\n                longestPalindrome\
    \ = string\n                longestPalindromeLength = longestPalindromeLength\n\
    \            }\n        }\n    }\n    if longestPalindromeLength > longestPalindromeLength\
    \ {\n        longestPalindrome = string\n        longestPalindromeLength = longestPalindromeLength\n\
    \    }\n    return longestPalindrome", "    var stringToReturn = \"\"\n    var\
    \ stringToReverse = \"\"\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromeIndex = 0\n    var longestPalindromeSuffixIndex\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromeSuffixStartIndex\
    \ = 0\n    var longestPalindromeSuffixEndIndex = 0\n    var longestPalindromeSuffixString\
    \ = \"\"\n    var longestPalindromeSuffixStringReverse = \"\"\n    var longestPalindromeSuffixStringReverseIndex\
    \ = 0\n    var longestPalindromeSuffixStringReverseLength = 0\n    var longestPalindromeSuffixStringReverseStartIndex\
    \ = 0\n    var longestPalindromeSuffixStringReverseEndIndex = 0\n    var longestPalindromeSuffixStringReverseString\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseStringReverse = \"\"\n \
    \   var longestPalindromeSuffixStringReverseStringReverseIndex = 0\n    var longestPalindromeSuffixStringReverseStringReverseLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseStringReverseStartIndex = 0\n\
    \    var longestPalindromeSuffixStringReverseStringReverseEndIndex = 0\n    var\
    \ longestPalindromeSuffixStringReverseStringReverseString = \"\"\n    var longestPalindromeSuffixStringReverseStringReverseStringReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseIndex\
    \ = 0\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStartIndex\
    \ = 0\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseEndIndex\
    \ = 0\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseString\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringReverseIndex\
    \ = 0\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringReverseLength\
    \ = 0\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringReverseStartIndex\
    \ = 0\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringReverseEndIndex\
    \ = 0\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringReverseString\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringReverseStringReverse\
    \ = \"\"\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringReverseStringReverseIndex\
    \ = 0\n    var longestPalindromeSuffixStringReverseStringReverseStringReverseStringReverseStringReverseLength\
    \ = 0", "    let longestPalindrome = longestPalindrome(string)\n    let reversedString\
    \ = reverseString(string: longestPalindrome)\n    return reversedString + longestPalindrome",
  "    var string = string\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromeStartIndex = 0\n    var longestPalindromeEndIndex\
    \ = 0\n    var longestPalindromeStartIndexOfLongestPalindrome = 0\n    var longestPalindromeEndIndexOfLongestPalindrome\
    \ = 0\n    var longestPalindromeStartIndexOfLongestPalindromeOfLongestPalindrome\
    \ = 0\n    var longestPalindromeEndIndexOfLongestPalindromeOfLongestPalindrome\
    \ = 0\n    var longestPalindromeStartIndexOfLongestPalindromeOfLongestPalindromeOfLongestPalindrome\
    \ = 0\n    var longestPalindromeEndIndexOfLongestPalindromeOfLongestPalindromeOfLongestPalindrome\
    \ = 0\n    var longestPalindromeStartIndexOfLongestPalindromeOfLongestPalindromeOfLongestPalindromeOfLongestPalindrome\
    \ = 0\n    var longestPalindromeEndIndexOfLongestPalindromeOfLongestPalindromeOfLongestPalindromeOfLongestPalindromeOfLongestPalindrome\
    \ = 0\n    var longestPalindromeStartIndexOfLongestPalindromeOfLongestPalindromeOfLongestPalindromeOfLongestPalindromeOfLongestPalindromeOfLongestPalindrome\
    \ = 0\n    var longestPalindromeEndIndexOfLongestPalindromeOfLongestPalindromeOfLongestPalindromeOfLongestPalindromeOfLongestPalindromeOfLongestPalindromeOfLongestPalindrome\
    \ = 0\n    var longestPalindromeStartIndexOfLongestPalindromeOfLongestPalindromeOfLongestPalindromeOfLongestPalindromeOfLongestPalindromeOfLongestPalindromeOfLongestPalindromeOfLongestPalindrome\
    \ = 0\n    var longestPalindromeEndIndexOfLongestPalindromeOfLongestPalindromeOfLongestPalindromeOfLongestPalindromeOfLongestPalindromeOfLongestPalindromeOfLongestPalindromeOfLongestPalindromeOfLongest",
  "    var palindrome = \"\"\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromePrefixLength = 0\n    var longestPalindromeSuffixLength\
    \ = 0\n    var longestPalindromeSuffixIndex = 0\n    var longestPalindromePrefixIndex\
    \ = 0\n    var longestPalindromeSuffixChar = \"\"\n    var longestPalindromePrefixChar\
    \ = \"\"\n    var longestPalindromeString = \"\"\n    var longestPalindromeStringLength\
    \ = 0\n    var longestPalindromeStringIndex = 0\n    var longestPalindromeStringChar\
    \ = \"\"\n    var longestPalindromeStringReverse = \"\"\n    var longestPalindromeStringReverseIndex\
    \ = 0\n    var longestPalindromeStringReverseChar = \"\"\n    var longestPalindromeStringReverseLength\
    \ = 0\n    var longestPalindromeStringReverseIndex = 0\n    var longestPalindromeStringReverseChar\
    \ = \"\"\n    var longestPalindromeStringReverseIndex = 0\n    var longestPalindromeStringReverseChar\
    \ = \"\"\n    var longestPalindromeStringReverseIndex = 0\n    var longestPalindromeStringReverseChar\
    \ = \"\"\n    var longestPalindromeStringReverseIndex = 0\n    var longestPalindromeStringReverseChar\
    \ = \"\"\n    var longestPalindromeStringReverseIndex = 0\n    var longestPalindromeStringReverseChar\
    \ = \"\"\n    var longestPalindromeStringReverseIndex = 0\n    var longestPalindromeStringReverseChar\
    \ = \"\"\n    var longestPalindromeStringReverseIndex = 0\n    var longestPalindromeStringReverseChar\
    \ = \"\"\n    var longestPalindromeStringReverseIndex = 0\n    var longestPalindromeStringReverseChar\
    \ = \"\"\n    var longestPalindromeStringReverseIndex = 0\n    var longestPalindromeStringReverseChar\
    \ = \"\"\n    var longestPalindromeStringReverseIndex = 0\n    var longestPalindromeStringReverseChar\
    \ = \"\"\n    var longestPalindromeStringReverseIndex = 0\n    var longestPalindromeStringReverseChar\
    \ = \"\"\n    var longestPalindromeStringReverseIndex = 0\n    var longestPalindromeStringReverseChar\
    \ = \"\"\n    var longestPalindromeStringReverseIndex = 0\n    var longestPalindromeStringReverseChar\
    \ = \"\"\n    var longestPalindromeStringReverseIndex = 0\n    var longestPalindromeStringReverseChar\
    \ = \"\"\n    var longestPalindromeStringReverseIndex = 0\n    var longestPalindromeStringReverseChar\
    \ = \"\"\n    var longestPalindromeStringReverseIndex = 0\n    var longestPalindro",
  "    var string = string\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromeIndex = 0\n    var longestPalindromeSuffixIndex\
    \ = 0\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromeSuffixStartIndex\
    \ = 0\n    var longestPalindromeSuffixEndIndex = 0\n    var longestPalindromeSuffixStartIndexReverse\
    \ = 0\n    var longestPalindromeSuffixEndIndexReverse = 0\n    var longestPalindromeSuffixStartIndexReverseReverse\
    \ = 0\n    var longestPalindromeSuffixEndIndexReverseReverse = 0\n    var longestPalindromeSuffixStartIndexReverseReverseReverse\
    \ = 0\n    var longestPalindromeSuffixEndIndexReverseReverseReverse = 0\n    var\
    \ longestPalindromeSuffixStartIndexReverseReverseReverse = 0\n    var longestPalindromeSuffixEndIndexReverseReverseReverse\
    \ = 0\n    var longestPalindromeSuffixStartIndexReverseReverseReverse = 0\n  \
    \  var longestPalindromeSuffixEndIndexReverseReverseReverse = 0\n    var longestPalindromeSuffixStartIndexReverseReverseReverse\
    \ = 0\n    var longestPalindromeSuffixEndIndexReverseReverseReverse = 0\n    var\
    \ longestPalindromeSuffixStartIndexReverseReverseReverse = 0\n    var longestPalindromeSuffixEndIndexReverseReverseReverse\
    \ = 0\n    var longestPalindromeSuffixStartIndexReverseReverseReverse = 0\n  \
    \  var longestPalindromeSuffixEndIndexReverseReverseReverse = 0\n    var longestPalindromeSuffixStartIndexReverseReverseReverse\
    \ = 0\n    var longestPalindromeSuffixEndIndexReverseReverseReverse = 0\n    var\
    \ longestPalindromeSuffixStartIndexReverseReverseReverse = 0\n    var longestPalindromeSuffixEndIndexReverseReverseReverse\
    \ = 0\n    var longestPalindromeSuffixStartIndexReverseReverseReverse = 0\n  \
    \  var longestPalindromeSuffixEndIndexReverseReverseReverse = 0\n    var longestPalindromeSuffixStartIndexReverseReverseReverse\
    \ = 0\n    var longestPalindromeSuffixEndIndexReverseReverseReverse = 0\n    var\
    \ longestPalindromeSuffixStartIndexReverseReverseReverse = 0\n    var longestPalindromeSuffixEndIndexReverseReverseReverse\
    \ = 0\n    var longestPalindromeSuffixStartIndexReverseReverseReverse = 0\n  \
    \  var longestPalindromeSuffixEndIndexReverseReverseReverse = 0\n    var longestPalindromeSuffixStartIndexReverseReverseReverse\
    \ = 0\n    var longestPalindromeSuffixEndIndexReverseReverseReverse = 0\n    var\
    \ longestPalindromeSuffixStartIndexReverseReverseReverse = 0\n    var longestPalindromeSuffixEndIndexReverseReverseReverse",
  "    var string = string\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromeIndex = 0\n    var longestPalindromeIndexStart\
    \ = 0\n    var longestPalindromeIndexEnd = 0\n    var longestPalindromeIndexStartReverse\
    \ = 0\n    var longestPalindromeIndexEndReverse = 0\n    var longestPalindromeIndexStartReverseReverse\
    \ = 0\n    var longestPalindromeIndexEndReverseReverse = 0\n    var longestPalindromeIndexStartReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexEndReverseReverseReverse = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexEndReverseReverseReverseReverse = 0\n   \
    \ var longestPalindromeIndexStartReverseReverseReverseReverse = 0\n    var longestPalindromeIndexEndReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse = 0\n \
    \   var longestPalindromeIndexEndReverseReverseReverseReverse = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexEndReverseReverseReverseReverse = 0\n   \
    \ var longestPalindromeIndexStartReverseReverseReverseReverse = 0\n    var longestPalindromeIndexEndReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse = 0\n \
    \   var longestPalindromeIndexEndReverseReverseReverseReverse = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexEndReverseReverseReverseReverse = 0\n   \
    \ var longestPalindromeIndexStartReverseReverseReverseReverse = 0\n    var longestPalindromeIndexEndReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse = 0\n \
    \   var longestPalindromeIndexEndReverseReverseReverseReverse = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexEndReverseReverseReverseReverse = 0\n   \
    \ var longestPalindromeIndexStartReverseReverseReverseReverse = 0\n    var longestPalindromeIndexEndReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse = 0\n \
    \   var longestPalindromeIndexEndReverseReverseReverseReverse = 0\n    var longestPalindromeIndexStartReverseReverseReverseReverse\
    \ = 0\n    var longestPalindromeIndexEndReverseReverseReverseReverse = 0\n   \
    \ var longestPalindromeIndexStartReverseReverseReverseReverse = 0\n    var longestPalindromeIndexEndReverseReverseReverseReverse",
  "    var string = string\n    var longestPalindrome = \"\"\n    var longestPalindromeLength\
    \ = 0\n    var longestPalindromeIndex = 0\n    var longestPalindromeSuffix = \"\
    \"\n    var longestPalindromeSuffixLength = 0\n    var longestPalindromeSuffixIndex\
    \ = 0\n    for index in 0..<string.characters.count {\n        let character =\
    \ string.characters[index]\n        if character == \"-\" {\n            longestPalindromeLength\
    \ += 1\n            longestPalindromeIndex += 1\n            longestPalindromeSuffix\
    \ = string.substringWithRange(NSMakeRange(longestPalindromeIndex, longestPalindromeLength))\n\
    \            longestPalindromeSuffixLength = len(longestPalindromeSuffix)\n  \
    \          longestPalindromeSuffixIndex = longestPalindromeIndex\n        } else\
    \ {\n            longestPalindromeLength += 1\n            longestPalindromeIndex\
    \ += 1\n        }\n    }\n    if longestPalindromeLength > longestPalindromeSuffixLength\
    \ {\n        longestPalindromeLength = len(longestPalindromeSuffix)\n        longestPalindromeSuffixIndex\
    \ = longestPalindromeIndex\n    }\n    if longestPalindromeLength == 0 {\n   \
    \     return \"\"\n    }\n    if longestPalindromeLength == 1 {\n        return\
    \ string\n    }\n    var longestPalindromePrefix = \"\"\n    var longestPalindromePrefixLength\
    \ = 0\n    var longestPalindromePrefixIndex = 0\n    for index in 0..<longestPalindromeLength\
    \ {\n        let character = string.characters[index]\n        if character ==\
    \ \"-\" {\n            longestPalindromePrefixLength += 1\n            longestPalindromePrefixIndex\
    \ += 1\n            longestPalindromePrefix = string.substringWithRange(NSMakeRange(longestPalindromePrefixIndex,\
    \ longestPalindromePrefixLength))\n        } else {\n            longestPalindromePrefixLength\
    \ += 1\n        }\n    }\n    if longestPalindromePrefixLength > longestPalindromeSuffixLength\
    \ {\n        longestPalindromePrefixLength = len(longestPalindromeSuffix)\n  \
    \  }\n    if longestPalindromePrefixLength == 0 {\n        return string\n   \
    \ }\n    if longestPalindromePrefixLength == 1 {\n        return string\n    }\n\
    \    var longestPalindromeSuffixReversed = \"\"\n    var longestPalindromeSuffixReversedLength\
    \ = 0\n    var longestPalindromeSuffixReversedIndex = 0\n    for index in 0..<longestPalindromeSuffixLength\
    \ {\n        let character = "]
stop_tokens:
- "\n}"
