name: HumanEval_47_median
language: swift
prompt: "\n/// Return median of elements in the list l.\nfunc median(l: [Int]) ->\
  \ Double {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
  \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
  \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
completions: ["    var l = l\n    l.sort()\n    if l.count > 1 {\n        return Double(l[l.count\
    \ / 2])\n    } else {\n        return Double(0)\n    }", "    var l = l\n    l.sort()\n\
    \    return l[(l.count - 1) / 2]", "    var l = l\n    l.sort()\n    return l[(l.count\
    \ - 1) / 2]", "    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count - 1)\
    \ / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }", "    var l = l\n    l.sort()\n\
    \    if l.count % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n\
    \        return l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]\n    }", "   \
    \ var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n        return l[(l.count\
    \ - 1) / 2]\n    } else {\n        return (l[(l.count - 1) / 2] + l[(l.count -\
    \ 1) / 2 - 1]) / 2\n    }", "    var l = l\n    l.sort()\n    if l.count > 1 {\n\
    \        return l[(l.count - 1) / 2]\n    }\n    return 0", "    var l = l\n \
    \   l.sort()\n    if l.count > 1 {\n        return l[(l.count - 1) / 2]\n    }\n\
    \    return l[0]", "    var l = l\n    l.sort()\n    if l.count > 0 {\n      \
    \  return l[(l.count - 1) / 2]\n    }\n    return 0", "    var l = l\n    var\
    \ m = Double(0)\n    for x in l {\n        m = m + (x - m) / Double(l.count -\
    \ 1)\n    }\n    return m", "    var l = l\n    l.sort()\n    if l.count % 2 ==\
    \ 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }", "    var l = l\n    l.sort()\n\
    \    return l[(l.count - 1) / 2]", "    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return l[0]", "    var\
    \ l = l\n    l.sort()\n    if l.count % 2 == 0 {\n        return l[(l.count/2)\
    \ - 1]\n    } else {\n        return l[(l.count/2) - 1] + l[(l.count/2) - 2]\n\
    \    }", "    var l = l\n    l.sort()\n    return l[(l.count - 1) / 2]", "   \
    \ var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n        return l[(l.count\
    \ - 1) / 2]\n    } else {\n        return (l[(l.count - 1) / 2] + l[(l.count -\
    \ 1) / 2 - 1]) / 2\n    }", "    var l = l\n    var mid = l.count / 2\n    if\
    \ l.count % 2 == 0 {\n        return l[mid]\n    } else {\n        return (l[mid]\
    \ + l[mid-1]) / 2\n    }", "    if l.isEmpty() {\n        return 0\n    }\n  \
    \  \n    var l = l\n    l.sort()\n    \n    if l.count % 2 == 0 {\n        return\
    \ l[(l.count - 1) / 2]\n    }\n    \n    return l[(l.count - 1) / 2] + l[l.count\
    \ / 2]", "    if l.isEmpty() {\n        return 0\n    }\n    l.sort()\n    return\
    \ l[len(l)/2]", "    var l = l\n    var m = Double(0)\n    for x in l {\n    \
    \    m = m + (x - m) / Double(l.count - 1)\n    }\n    return m", "    var l =\
    \ l\n    l.sort()\n    if l.count % 2 == 0 {\n        return l[(l.count - 1) /\
    \ 2]\n    } else {\n        return l[(l.count - 1) / 2] + l[l.count / 2]\n   \
    \ }", "    l.sort()\n    \n    if l.count % 2 == 0 {\n        return l[(l.count\
    \ - 1) / 2]\n    } else {\n        return (l[(l.count - 1) / 2] + l[(l.count -\
    \ 1) / 2 - 1]) / 2\n    }", "    l.sort()\n    return l[len(l)/2]", "    var l\
    \ = l\n    l.sort()\n    if l.count % 2 == 0 {\n        return l[(l.count - 1)\
    \ / 2]\n    } else {\n        return (l[(l.count - 1) / 2] + l[(l.count - 1) /\
    \ 2 - 1]) / 2\n    }", "    var l = l\n    l.sort()\n    if l.count > 1 {\n  \
    \      return Double(l[l.count / 2])\n    }\n    return Double(0)", "    var l\
    \ = l\n    l.sort()\n    if l.count % 2 == 0 {\n        return l[(l.count/2) -\
    \ 1]\n    } else {\n        return l[(l.count/2) - 1] + l[(l.count/2) - 2]\n \
    \   }", "    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n        return\
    \ l[(l.count - 1) / 2]\n    } else {\n        return l[(l.count - 1) / 2] + l[l.count\
    \ / 2]\n    }", "    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n    \
    \    return l[(l.count/2) - 1]\n    } else {\n        return l[(l.count/2) - 1]\
    \ + l[(l.count/2) - 2]\n    }", "    var l = l\n    l.sort()\n    return l[(l.count\
    \ - 1) / 2]", "    var l = l\n    l.sort()\n    if l.count > 1 {\n        return\
    \ l[(l.count - 1) / 2]\n    }\n    return 0", "    var l = l\n    l.sort()\n \
    \   return l[(l.count - 1) / 2]", "    var l = l\n    l.sort()\n    return l[(l.count\
    \ - 1) / 2]", "    var l = l\n    l.sort()\n    if l.count > 1 {\n        return\
    \ Double(l[l.count / 2])\n    }\n    return 0", "    if l.isEmpty() {\n      \
    \  return 0\n    }\n    \n    var l = l\n    var mid = l.count / 2\n    var left\
    \ = l[mid..<l.count]\n    var right = l[..<mid]\n    \n    var leftMedian = median(left)\n\
    \    var rightMedian = median(right)\n    \n    if leftMedian == rightMedian {\n\
    \        return leftMedian\n    }\n    \n    return Double(leftMedian) + Double(rightMedian)\
    \ / 2", "    l.sort()\n    return l[(l.count - 1) / 2]", "    var l = l\n    l.sort()\n\
    \    return l[(l.count - 1) / 2]", "    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return l[0]", "    var\
    \ l = l\n    l.sort()\n    if l.count > 0 {\n        return l[(l.count - 1) /\
    \ 2]\n    }\n    return 0", "    var l = l\n    l.sort()\n    return l[(l.count\
    \ - 1) / 2]", "    var l = l\n    l.sort()\n    return l[(l.count - 1) / 2]",
  "    l.sort()\n    return l[len(l)/2]", "    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] - l[(l.count - 2) / 2) / 2].0\n    }", "    var l = l\n\
    \    l.sort()\n    if l.count > 0 {\n        return Double(l[l.count / 2])\n \
    \   }\n    return 0", '    return l.sorted().reduce(0.0, { $0 + Double($1) })',
  "    var l = l\n    l.sort()\n    if l.count > 1 {\n        return l[(l.count -\
    \ 1) / 2]\n    } else {\n        return 0\n    }", "    var l = l\n    l.sort()\n\
    \    if l.count > 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return\
    \ 0", "    var l = l\n    var m = Double(0)\n    for x in l {\n        m = m +\
    \ (x - m) / Double(l.count - 1)\n    }\n    return m", "    var l = l\n    l.sort()\n\
    \    if l.count > 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return\
    \ 0", "    var l = l\n    l.sort()\n    return l[(l.count - 1) / 2]", "    var\
    \ l = l\n    l.sort()\n    if l.count > 0 {\n        return l[(l.count - 1) /\
    \ 2]\n    }\n    return 0", "    var l = l\n    l.sort()\n    if l.count % 2 ==\
    \ 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return l[(l.count\
    \ - 1) / 2] + l[l.count / 2]\n    }", "    var l = l\n    l.sort()\n    if l.count\
    \ > 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return 0\n\
    \    }", "    if l == nil || l.isEmpty() {\n        return Double.nan\n    }\n\
    \    l.sort()\n    return l[(l.count - 1) / 2]", "    var l = l\n    l.sort()\n\
    \    if l.count > 1 {\n        return l[(l.count - 1) / 2]\n    } else {\n   \
    \     return 0\n    }", "    var l = l\n    l.sort()\n    if l.count % 2 == 0\
    \ {\n        return l[(l.count - 1) / 2]\n    } else {\n        return l[(l.count\
    \ - 1) / 2] + l[l.count / 2]\n    }", "    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count / 2) - 1]\n    } else {\n        return\
    \ l[(l.count / 2)]\n    }", "    var l = l\n    l.sort()\n    if l.count > 1 {\n\
    \        return l[(l.count - 1) / 2]\n    }\n    return l[0]", "    var l = l\n\
    \    l.sort()\n    return l[(l.count - 1) / 2]", "    var l = l\n    l.sort()\n\
    \    if l.count % 2 == 1 {\n        return l[(l.count - 1) / 2]\n    } else {\n\
    \        return (l[(l.count - 1) / 2] - l[(l.count - 1) / 2 - 1] + l[(l.count\
    \ - 1) / 2]) / 2\n    }", "    l.sort()\n    if l.len() % 2 == 0 {\n        return\
    \ l[(l.len() / 2) - 1]\n    } else {\n        return l[(l.len() / 2)]\n    }",
  "    var l = l\n    l.sort()\n    return l[(l.count - 1) / 2]", "    var l = l\n\
    \    var m = Double(0)\n    for x in l {\n        if x < m {\n            m =\
    \ x\n        }\n    }\n    return m", "    var l = l\n    l.sort()\n    if l.count\
    \ > 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return 0\n\
    \    }", "    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n        return\
    \ l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count - 1) / 2] + l[(l.count\
    \ - 1) / 2 - 1]) / 2\n    }", "    var l = l\n    var m = Double(0)\n    for x\
    \ in l {\n        m = m + (x - m) / Double(l.count)\n    }\n    return m", " \
    \   var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n        return l[(l.count\
    \ / 2) - 1]\n    } else {\n        return l[(l.count / 2)]\n    }", "    var l\
    \ = l\n    var m = Double(0)\n    for x in l {\n        if x < m {\n         \
    \   m = x\n        }\n    }\n    return m", "    var l = l\n    l.sort()\n   \
    \ if l.count % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n \
    \       return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }",
  "    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n        return l[(l.count\
    \ - 1) / 2]\n    } else {\n        return (l[(l.count - 1) / 2] + l[(l.count -\
    \ 1) / 2 - 1]) / 2\n    }", "    l.sort()\n    return l[len(l)/2]", "    var l\
    \ = l\n    l.sort()\n    if l.count % 2 == 0 {\n        return l[(l.count - 1)\
    \ / 2]\n    } else {\n        return (l[(l.count - 1) / 2] + l[l.count / 2]) /\
    \ 2.0\n    }", "    var l = l\n    l.sort()\n    return l[(l.count - 1) / 2]",
  "    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n        return l[(l.count\
    \ - 1) / 2]\n    } else {\n        return (l[(l.count - 1) / 2] - l[(l.count -\
    \ 2) / 2) / 2].doubleValue\n    }", "    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]\n    }", "    var l = l\n  \
    \  l.sort()\n    if l.count % 2 == 0 {\n        return l[(l.count/2) - 1]\n  \
    \  } else {\n        return l[(l.count/2) - 1] + l[(l.count/2) - 2]\n    }", " \
    \   var l = l\n    l.sort()\n    return l[(l.count - 1) / 2]", "    var l = l\n\
    \    l.sort()\n    return l[(l.count - 1) / 2]", "    var l = l\n    l.sort()\n\
    \    return l[(l.count - 1) / 2]", "    var l = l\n    l.sort()\n    if l.count\
    \ > 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return 0\n\
    \    }", "    l.sort()\n    return l[len(l)/2]", "    l.sort()\n    return l[(l.count\
    \ - 1) / 2]", "    var l = l\n    l.sort()\n    if l.count > 0 {\n        return\
    \ l[(l.count - 1) / 2]\n    } else {\n        return 0\n    }", "    var l = l\n\
    \    l.sort()\n    if l.count > 1 {\n        return l[(l.count - 1) / 2]\n   \
    \ } else {\n        return 0\n    }", "    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }", "    var l =\
    \ l\n    l.sort()\n    return l[(l.count - 1) / 2]", "    l.sort()\n    return\
    \ l[len(l)/2]", '    return l.sorted()[l.count / 2]', "    var l = l\n    l.sort()\n\
    \    if l.count % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }",
  "    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n        return l[(l.count\
    \ / 2) - 1]\n    } else {\n        return l[(l.count / 2)]\n    }", "    var l\
    \ = l\n    l.sort()\n    if l.count % 2 == 1 {\n        return l[(l.count - 1)\
    \ / 2]\n    } else {\n        return (l[(l.count - 1) / 2] - l[(l.count - 1) /\
    \ 2 - 1]) / 2\n    }", "    var l = l\n    var m = Double(0)\n    for x in l {\n\
    \        if x < m {\n            m = x\n        }\n    }\n    return m", "   \
    \ var l = l\n    l.sort()\n    if l.count > 0 {\n        return l[(l.count - 1)\
    \ / 2]\n    } else {\n        return 0\n    }", '    return l.sorted().reduce(0.0,
    { $0 + Double($1) })', "    var l = l\n    l.sort()\n    if l.count > 0 {\n  \
    \      return l[(l.count - 1) / 2]\n    }\n    return 0", "    var l = l\n   \
    \ l.sort()\n    if l.count % 2 == 1 {\n        return l[(l.count - 1) / 2]\n \
    \   } else {\n        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1])\
    \ / 2\n    }", "    var l = l\n    l.sort()\n    if l.count % 2 == 1 {\n     \
    \   return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count - 1)\
    \ / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }", "    var l = l\n    l.sort()\n\
    \    if l.count > 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return\
    \ 0", "    var l = l\n    var m1 = l[0]\n    var m2 = l[0]\n    for x in l {\n\
    \        if x < m1 {\n            m2 = m1\n            m1 = x\n        } else\
    \ if x > m2 {\n            m2 = x\n        }\n    }\n    return m1 + (m2 - m1)\
    \ / (l.count / 2)", "    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n\
    \        return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count\
    \ - 1) / 2] - l[(l.count - 2) / 2) / 2].doubleValue\n    }", "    var l = l\n\
    \    l.sort()\n    if l.count % 2 == 0 {\n        return l[(l.count/2) - 1]\n\
    \    } else {\n        return l[(l.count/2) - 1] + l[(l.count/2) - 2]\n    }",
  "    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n        return l[(l.count\
    \ - 1) / 2]\n    } else {\n        return (l[(l.count - 1) / 2] + l[(l.count -\
    \ 1) / 2 - 1]) / 2\n    }", "    if l.count <= 1 {\n        return l[0]\n    }\n\
    \    l.sort()\n    return l[(l.count - 1) / 2]", "    l.sort()\n    return l[len(l)/2]",
  "    if l.count < 2 {\n        return l[0]\n    }\n    var l = l\n    var mid =\
    \ l.count / 2\n    var pivot = l[mid]\n    for i := 0; i < mid; i++ {\n      \
    \  if l[i] < pivot {\n            l[i], l[mid] = l[mid], l[i]\n        }\n   \
    \ }\n    l[mid], l[0] = l[0], l[mid]\n    return pivot", "    var l = l\n    l.sort()\n\
    \    if l.count > 1 {\n        return Double(l[l.count / 2])\n    }\n    return\
    \ 0", '    return l.sorted().reduce(0.0, { $0 + Double($1) })', "    l.sort()\n\
    \    return l[len(l)/2]", "    var l = l\n    l.sort()\n    if l.count % 2 ==\
    \ 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }", "    l.sort()\n    return\
    \ l[len(l)/2]", "    var l = l\n    var m = Double(0)\n    for x in l {\n    \
    \    m = m + (x - m) / Double(l.count)\n    }\n    return m", "    var l = l\n\
    \    l.sort()\n    if l.count % 2 == 0 {\n        return l[(l.count/2) - 1]\n\
    \    } else {\n        return l[(l.count/2) - 1] + l[(l.count/2) - 2]\n    }",
  "    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n        return l[(l.count\
    \ - 1) / 2]\n    } else {\n        return l[(l.count - 1) / 2] + l[l.count / 2]\n\
    \    }", "    var l = l\n    l.sort()\n    if l.count > 1 {\n        return l[(l.count\
    \ - 1) / 2]\n    }\n    return 0", '    return l.sorted().reduce(0.0, { $0 + Double($1)
    })', "    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n        return l[(l.count\
    \ - 1) / 2]\n    } else {\n        return l[(l.count - 1) / 2] + l[(l.count -\
    \ 1) / 2 - 1]\n    }", "    var l = l\n    l.sort()\n    return l[(l.count - 1)\
    \ / 2]", "    var l = l\n    l.sort()\n    return l[(l.count - 1) / 2]", "   \
    \ var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n        return l[(l.count\
    \ - 1) / 2]\n    } else {\n        return (l[(l.count - 1) / 2] + l[l.count /\
    \ 2]) / 2.0\n    }", "    var l = l\n    l.sort()\n    if l.count > 1 {\n    \
    \    return l[(l.count - 1) / 2]\n    }\n    return 0", "    var l = l\n    l.sort()\n\
    \    if l.count % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n\
    \        return l[(l.count - 1) / 2] + l[l.count / 2]\n    }", "    var l = l\n\
    \    l.sort()\n    if l.count > 1 {\n        return l[(l.count - 1) / 2]\n   \
    \ } else {\n        return 0\n    }", '    return l.sorted().reduce(0.0, { $0
    + Double($1) })', "    var l = l\n    l.sort()\n    if l.count > 0 {\n       \
    \ return l[(l.count - 1) / 2]\n    } else {\n        return 0\n    }", "    var\
    \ l = l\n    l.sort()\n    if l.count % 2 == 0 {\n        return l[(l.count -\
    \ 1) / 2]\n    } else {\n        return (l[(l.count - 1) / 2] + l[(l.count - 1)\
    \ / 2 - 1]) / 2\n    }", "    var l = l\n    l.sort()\n    return l[(l.count -\
    \ 1) / 2]", "    var l = l\n    l.sort()\n    if l.count > 1 {\n        return\
    \ l[(l.count - 1) / 2]\n    }\n    return 0", "    var l = l\n    l.sort()\n \
    \   if l.count > 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return 0",
  "    var l = l\n    l.sort()\n    if l.count > 1 {\n        return l[(l.count -\
    \ 1) / 2]\n    }\n    return l[0]", "    var l = l\n    l.sort()\n    return l[(l.count\
    \ - 1) / 2]", "    var l = l\n    l.sort()\n    if l.count > 1 {\n        return\
    \ l[(l.count - 1) / 2]\n    }\n    return 0", "    var l = l\n    l.sort()\n \
    \   if l.count % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n\
    \        return l[(l.count - 1) / 2] + l[l.count / 2]\n    }", "    var l = l\n\
    \    l.sort()\n    return l[(l.count - 1) / 2]", "    var l = l\n    l.sort()\n\
    \    return l[(l.count - 1) / 2]", "    var l = l\n    var m = Double(l.count)\n\
    \    var count = 0\n    for x in l {\n        if x > m {\n            m = x\n\
    \        }\n        count += 1\n    }\n    return m / Double(count)", "    var\
    \ l = l\n    l.sort()\n    if l.count % 2 == 0 {\n        return l[(l.count -\
    \ 1) / 2]\n    } else {\n        return (l[(l.count - 1) / 2] + l[(l.count - 1)\
    \ / 2 - 1]) / 2\n    }", "    var l = l\n    l.sort()\n    return l[(l.count -\
    \ 1) / 2]", "    var l = l\n    l.sort()\n    return l[(l.count - 1) / 2]", " \
    \   var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n        return l[(l.count\
    \ - 1) / 2]\n    } else {\n        return (l[(l.count - 1) / 2] + l[(l.count -\
    \ 1) / 2 - 1]) / 2\n    }", "    var l = l\n    l.sort()\n    if l.count % 2 ==\
    \ 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }", "    var l = l\n    l.sort()\n\
    \    return l[(l.count - 1) / 2]", "    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] + l[l.count / 2]) / 2.0\n    }", "    var l = l\n    l.sort()\n\
    \    if l.count > 1 {\n        return Double(l[l.count / 2])\n    }\n    return\
    \ 0", "    var l = l\n    l.sort()\n    if l.count > 1 {\n        return l[(l.count\
    \ - 1) / 2]\n    }\n    return l[0]", "    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return l[0]", "    var\
    \ l = l\n    l.sort()\n    if l.count % 2 == 0 {\n        return l[(l.count/2)\
    \ - 1]\n    } else {\n        return l[(l.count/2) - 1] + l[(l.count/2) - 2]\n\
    \    }", '    return l.sorted().reduce(0.0, { $0 + Double($1) })', "    var l\
    \ = l\n    l.sort()\n    if l.count % 2 == 0 {\n        return l[(l.count - 1)\
    \ / 2]\n    } else {\n        return (l[(l.count - 1) / 2] + l[(l.count - 1) /\
    \ 2 - 1]) / 2\n    }", "    var l = l\n    l.sort()\n    return l[(l.count - 1)\
    \ / 2]", "    var l = l\n    l.sort()\n    if l.count > 0 {\n        return l[(l.count\
    \ - 1) / 2]\n    }\n    return 0", "    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 1 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }", "    var l =\
    \ l\n    l.sort()\n    if l.count % 2 == 0 {\n        return l[(l.count - 1) /\
    \ 2]\n    } else {\n        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2\
    \ - 1]) / 2\n    }", "    var l = l\n    var m = Double(0)\n    for x in l {\n\
    \        if x < m {\n            m = x\n        }\n    }\n    return m", "   \
    \ var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n        return l[(l.count\
    \ - 1) / 2]\n    } else {\n        return (l[(l.count - 1) / 2] + l[(l.count -\
    \ 1) / 2 - 1]) / 2\n    }", "    var l = l\n    var m = Double(0)\n    for x in\
    \ l {\n        if x < m {\n            m = x\n        }\n    }\n    return m",
  "    var l = l\n    l.sort()\n    if l.count > 0 {\n        return l[(l.count -\
    \ 1) / 2]\n    }\n    return 0", "    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return Double(l[l.count / 2])\n    } else {\n        return Double(0)\n\
    \    }", "    l.sort()\n    return l[len(l)/2]", "    var l = l\n    l.sort()\n\
    \    if l.count > 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return\
    \ 0", "    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n        return\
    \ l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count - 1) / 2] + l[(l.count\
    \ - 1) / 2 - 1]) / 2\n    }", "    var l = l\n    l.sort()\n    if l.count % 2\
    \ == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }", "    var l = l\n    l.sort()\n\
    \    if l.count % 2 == 0 {\n        return l[(l.count / 2) - 1]\n    } else {\n\
    \        return l[(l.count / 2)]\n    }", "    var l = l\n    l.sort()\n    return\
    \ l[(l.count - 1) / 2]", "    var l = l\n    l.sort()\n    if l.count % 2 == 0\
    \ {\n        return l[(l.count - 1) / 2]\n    } else {\n        return l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]\n    }", "    var l = l\n    l.sort()\n\
    \    if l.count % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n\
    \        return l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]\n    }", "   \
    \ var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n        return l[(l.count\
    \ - 1) / 2]\n    } else {\n        return l[(l.count - 1) / 2] + l[(l.count -\
    \ 1) / 2 - 1]\n    }", "    var l = l\n    l.sort()\n    if l.count > 1 {\n  \
    \      return l[(l.count - 1) / 2]\n    }\n    return 0", "    var l = l\n   \
    \ var m = Double(0)\n    var n = Double(0)\n    for x in l {\n        if n > x\
    \ {\n            m = x\n            n = x\n        } else {\n            n = n\n\
    \        }\n    }\n    return m", '    return l.sorted()[l.count / 2]', '    return
    l.sorted()[l.count / 2]', "    var l = l\n    l.sort()\n    if l.count > 1 {\n\
    \        return l[(l.count - 1) / 2]\n    }\n    return 0", "    var l = l\n \
    \   l.sort()\n    if l.count > 0 {\n        return Double(l[l.count / 2])\n  \
    \  }\n    return 0", "    var l = l\n    l.sort()\n    if l.count > 0 {\n    \
    \    return l[(l.count - 1) / 2]\n    }\n    return 0", "    var l = l\n    l.sort()\n\
    \    if l.count > 0 {\n        return Double(l[l.count / 2])\n    }\n    return\
    \ 0", "    var l = l\n    l.sort()\n    if l.count > 1 {\n        return (l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2].0) / 2\n    }\n    return l[0]", "    var l\
    \ = l\n    l.sort()\n    if l.count > 1 {\n        return l[(l.count - 1) / 2]\n\
    \    } else {\n        return 0\n    }", "    var l = l\n    l.sort()\n    if\
    \ l.count > 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ 0\n    }", "    var l = l\n    l.sort()\n    if l.count > 0 {\n        return\
    \ l[(l.count - 1) / 2]\n    }\n    return 0", "    var l = l\n    l.sort()\n \
    \   if l.count > 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return 0",
  "    l.sort()\n    if l.count % 2 == 0 {\n        return l[(l.count - 1) / 2]\n\
    \    } else {\n        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1])\
    \ / 2\n    }", "    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n     \
    \   return l[(l.count - 1) / 2]\n    } else {\n        return l[(l.count - 1)\
    \ / 2] + l[l.count / 2]\n    }", "    var l = l\n    l.sort()\n    return l[(l.count\
    \ - 1) / 2]", "    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count - 1)\
    \ / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }", "    var l = l\n    l.sort()\n\
    \    if l.count % 2 == 0 {\n        return l[(l.count / 2) - 1]\n    } else {\n\
    \        return l[(l.count / 2)]\n    }", "    var l = l\n    l.sort()\n    if\
    \ l.count % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n    \
    \    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }", " \
    \   var l = l\n    l.sort()\n    if l.count > 0 {\n        return l[(l.count -\
    \ 1) / 2]\n    }\n    return 0", "    var l = l\n    l.sort()\n    if l.count\
    \ > 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return 0", "    var l\
    \ = l\n    l.sort()\n    if l.count > 1 {\n        return l[(l.count - 1) / 2]\n\
    \    }\n    return 0", "    var l = l\n    l.sort()\n    if l.count > 0 {\n  \
    \      return l[(l.count - 1) / 2]\n    }\n    return 0", "    var l = l\n   \
    \ l.sort()\n    return l[(l.count - 1) / 2]", "    var l = l\n    l.sort()\n \
    \   if l.count % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }",
  "    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n        return l[(l.count\
    \ - 1) / 2]\n    } else {\n        return (l[(l.count - 1) / 2] + l[(l.count -\
    \ 1) / 2 - 1]) / 2\n    }", "    var l = l\n    l.sort()\n    if l.count % 2 ==\
    \ 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }", "    var l = l\n    l.sort()\n\
    \    if l.count > 1 {\n        return Double(l[l.count / 2])\n    }\n    return\
    \ 0", "    var l = l\n    l.sort()\n    if l.count > 0 {\n        return l[(l.count\
    \ - 1) / 2]\n    }\n    return 0", '    return l.sorted().reduce(0.0, { $0 + Double($1)
    })', "    var l = l\n    l.sort()\n    if l.count > 0 {\n        return l[(l.count\
    \ - 1) / 2]\n    }\n    return 0", "    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] - l[(l.count - 2) / 2) / 2].doubleValue\n    }", '    return
    l.sorted().reduce(0.0, { $0 + Double($1) })', "    var l = l\n    l.sort()\n \
    \   if l.count > 0 {\n        return Double(l[l.count / 2])\n    } else {\n  \
    \      return Double(0)\n    }", "    l.sort()\n    return l[len(l)/2]"]
stop_tokens:
- "\n}"
