name: HumanEval_111_histogram
language: swift
prompt: "\n/// Given a string representing a space separated lowercase letters, return\
  \ a dictionary\n/// of the letter with the most repetition and containing the corresponding\
  \ count.\n/// If several letters have the same occurrence, return all of them.\n\
  /// Example:\nfunc histogram(test: String) -> [String : Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" :\
  \ 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
  assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\"\
  \ : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
  \ \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
  \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
  ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
completions: ["    var histogram = [String : Int]()\n    for letter in test.lowercaseString.characters\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram", "    var histogram = [String : Int]()\n    for\
    \ letter in test.lowercaseString.split(separator: \" \") {\n        histogram[letter]\
    \ = (histogram[letter] ?? 0) + 1\n    }\n    return histogram", "    var histogram\
    \ = [String : Int]()\n    for letter in test.lowercased() {\n        histogram[letter]\
    \ = (histogram[letter] ?? 0) + 1\n    }\n    return histogram", "    var histogram\
    \ = [String : Int]()\n    for letter in test.lowercased() {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram",
  "    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n \
    \       if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram", "    var histogram = [String : Int]()\n    for letter\
    \ in test.lowercased() {\n        histogram[letter] = (histogram[letter] ?? 0)\
    \ + 1\n    }\n    return histogram", "    var histogram = [String : Int]()\n \
    \   for letter in test.lowercased() {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram", "    var histogram\
    \ = [String : Int]()\n    for letter in test.lowercased() {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram",
  "    var histogram = [String : Int]()\n    for letter in test.lowercaseString.characters\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram", "    var histogram = [String : Int]()\n    for\
    \ letter in test.lowercaseString.characters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram", "    var histogram\
    \ = [String : Int]()\n    for letter in test.lowercased() {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram",
  "    var histogram = [String : Int]()\n    for letter in test.lowercaseString.unicodeScalars\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram", "    var histogram = [String : Int]()\n    for\
    \ letter in test.lowercased() {\n        if let count = histogram[letter] {\n\
    \            histogram[letter] = count + 1\n        } else {\n            histogram[letter]\
    \ = 1\n        }\n    }\n    return histogram", "    var histogram = [String :\
    \ Int]()\n    for letter in test.lowercased() {\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n    }\n    return histogram", "    var letterCount = [String : Int]()\n\
    \    for letter in test.lowercased() {\n        if let count = letterCount[letter]\
    \ {\n            letterCount[letter] = count + 1\n        } else {\n         \
    \   letterCount[letter] = 1\n        }\n    }\n    return letterCount", "    var\
    \ histogram = [String : Int]()\n    for letter in test.lowercaseString.characters\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram", "    var letterCount: [String : Int] = [:]\n  \
    \  for letter in test.lowercased() {\n        letterCount[letter] = (letterCount[letter]\
    \ ?? 0) + 1\n    }\n    return letterCount", "    var histogram = [String : Int]()\n\
    \    for letter in test.lowercaseString.split(separator: \" \") {\n        if\
    \ let count = histogram[letter] {\n            histogram[letter] = count + 1\n\
    \        } else {\n            histogram[letter] = 1\n        }\n    }\n    return\
    \ histogram", "    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram", "    var histogram = [String : Int]()\n    var\
    \ maxCount = 0\n    var maxLetter = \"\"\n    for letter in test.lowercased()\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \        if histogram[letter] > maxCount {\n            maxCount = histogram[letter]\n\
    \            maxLetter = letter\n        }\n    }\n    return histogram", "  \
    \  var histogram = [String : Int]()\n    for letter in test.lowercaseString.characters\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram", "    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram", "    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram", "    var histogram = [String : Int]()\n    var\
    \ max = 0\n    var maxLetter = \"\"\n    for letter in test.lowercased() {\n \
    \       if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n      \
    \  if histogram[letter] > max {\n            max = histogram[letter]\n       \
    \     maxLetter = letter\n        }\n    }\n    return histogram", "    var histogram\
    \ = [String : Int]()\n    for letter in test.lowercased() {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram",
  "    var result: [String : Int] = [:]\n    for letter in test.lowercased() {\n \
    \       if let count = result[letter] {\n            result[letter] = count +\
    \ 1\n        } else {\n            result[letter] = 1\n        }\n    }\n    return\
    \ result", "    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram", "    var histogram = [String : Int]()\n    for\
    \ letter in test.lowercaseString.characters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram", "    var histogram\
    \ = [String : Int]()\n    for letter in test.lowercased() {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram",
  "    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n \
    \       if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram", "    var histogram = [String : Int]()\n    for letter\
    \ in test.lowercaseString.unicodeScalars {\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n    }\n    return histogram", "    var histogram = [String : Int]()\n\
    \    for letter in test.lowercaseString.characters {\n        histogram[letter]\
    \ = (histogram[letter] ?? 0) + 1\n    }\n    return histogram", "    var letterCount\
    \ = [String : Int]()\n    for letter in test.lowercaseString.split(separator:\
    \ \" \") {\n        letterCount[letter] = (letterCount[letter] ?? 0) + 1\n   \
    \ }\n    return letterCount", "    var histogram = [String : Int]()\n    for letter\
    \ in test.lowercaseString.split(separator: \" \") {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram", "    var result:\
    \ [String : Int] = [:]\n    for letter in test.lowercaseString.split(separator:\
    \ \" \") {\n        if let count = result[letter] {\n            result[letter]\
    \ = count + 1\n        } else {\n            result[letter] = 1\n        }\n \
    \   }\n    return result", "    var letterCount = [String : Int]()\n    for letter\
    \ in test.lowercased() {\n        if let count = letterCount[letter] {\n     \
    \       letterCount[letter] = count + 1\n        } else {\n            letterCount[letter]\
    \ = 1\n        }\n    }\n    return letterCount", "    var histogram = [String\
    \ : Int]()\n    for letter in test.lowercased() {\n        histogram[letter] =\
    \ (histogram[letter] ?? 0) + 1\n    }\n    return histogram", "    var histogram\
    \ = [String : Int]()\n    for letter in test.lowercased() {\n        histogram[letter]\
    \ = (histogram[letter] ?? 0) + 1\n    }\n    return histogram", "    var histogram\
    \ = [String : Int]()\n    for letter in test.lowercased() {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram",
  "    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n \
    \       if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram", "    var histogram = [String : Int]()\n    var maxCount\
    \ = 0\n    var maxLetter = \"\"\n    for letter in test.lowercased() {\n     \
    \   if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n      \
    \  if histogram[letter] > maxCount {\n            maxCount = histogram[letter]\n\
    \            maxLetter = letter\n        }\n    }\n    return histogram", "  \
    \  var histogram = [String : Int]()\n    for letter in test.lowercased() {\n \
    \       if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram", "    var histogram = [String : Int]()\n    for letter\
    \ in test.lowercaseString.characters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram", "    var histogram\
    \ = [String : Int]()\n    for letter in test.lowercaseString.unicodeScalars {\n\
    \        histogram[letter] = histogram.count\n    }\n    return histogram", " \
    \   var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(separator:\
    \ \" \") {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n\
    \    return histogram", "    var histogram = [String : Int]()\n    for letter\
    \ in test.lowercaseString.unicodeScalars {\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n    }\n    return histogram", "    var letterCount = [String : Int]()\n\
    \    for letter in test.lowercased() {\n        letterCount[letter] = (letterCount[letter]\
    \ ?? 0) + 1\n    }\n    return letterCount", "    var histogram = [String : Int]()\n\
    \    var maxCount = 0\n    var maxLetter = \"\"\n    for letter in test.lowercased()\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \        if histogram[letter] > maxCount {\n            maxCount = histogram[letter]\n\
    \            maxLetter = letter\n        }\n    }\n    return histogram", "  \
    \  var histogram = [String : Int]()\n    var maxCount = 0\n    var maxLetter =\
    \ \"\"\n    for letter in test.lowercased() {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n        if histogram[letter] > maxCount {\n\
    \            maxCount = histogram[letter]\n            maxLetter = letter\n  \
    \      }\n    }\n    return histogram", "    var histogram = [String : Int]()\n\
    \    for letter in test.lowercased() {\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n    }\n    return histogram", "    var histogram = [String : Int]()\n\
    \    for letter in test.lowercased() {\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n    }\n    return histogram", "    var histogram = [String : Int]()\n\
    \    for letter in test.lowercaseString.split(separator: \" \") {\n        if\
    \ let count = histogram[letter] {\n            histogram[letter] = count + 1\n\
    \        } else {\n            histogram[letter] = 1\n        }\n    }\n    return\
    \ histogram", "    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram", "    var result: [String : Int] = [:]\n    for\
    \ letter in test.lowercased() {\n        if let count = result[letter] {\n   \
    \         result[letter] = count + 1\n        } else {\n            result[letter]\
    \ = 1\n        }\n    }\n    return result", "    var histogram = [String : Int]()\n\
    \    for letter in test.lowercased() {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram", "    var result:\
    \ [String : Int] = [:]\n    for letter in test.lowercased() {\n        if let\
    \ count = result[letter] {\n            result[letter] = count + 1\n        }\
    \ else {\n            result[letter] = 1\n        }\n    }\n    return result",
  "    var letterCount: [String : Int] = [:]\n    for letter in test.lowercased()\
    \ {\n        if let count = letterCount[letter] {\n            letterCount[letter]\
    \ = count + 1\n        } else {\n            letterCount[letter] = 1\n       \
    \ }\n    }\n    return letterCount", "    var histogram = [String : Int]()\n \
    \   for letter in test.lowercaseString.split(separator: \" \") {\n        histogram[letter]\
    \ = (histogram[letter] ?? 0) + 1\n    }\n    return histogram", "    var histogram\
    \ = [String : Int]()\n    for letter in test.lowercaseString.characters {\n  \
    \      if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram", "    var histogram = [String : Int]()\n    for letter\
    \ in test.lowercased() {\n        if let count = histogram[letter] {\n       \
    \     histogram[letter] = count + 1\n        } else {\n            histogram[letter]\
    \ = 1\n        }\n    }\n    return histogram", "    var histogram = [String :\
    \ Int]()\n    for letter in test.lowercased() {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram", "    var histogram\
    \ = [String : Int]()\n    for letter in test.lowercaseString.split(separator:\
    \ \" \") {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram", "    var result: [String : Int] = [:]\n    for\
    \ letter in test.lowercased() {\n        if let count = result[letter] {\n   \
    \         result[letter] = count + 1\n        } else {\n            result[letter]\
    \ = 1\n        }\n    }\n    return result", "    var letterCount = [String :\
    \ Int]()\n    for letter in test.lowercaseString.split(separator: \" \") {\n \
    \       if let count = letterCount[letter] {\n            letterCount[letter]\
    \ = count + 1\n        } else {\n            letterCount[letter] = 1\n       \
    \ }\n    }\n    return letterCount", "    var histogram = [String : Int]()\n \
    \   for letter in test.lowercased() {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram", "    var histogram\
    \ = [String : Int]()\n    for letter in test.lowercased() {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram",
  "    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n \
    \       if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram", "    var letterCount = [String : Int]()\n    for letter\
    \ in test.lowercased() {\n        if let count = letterCount[letter] {\n     \
    \       letterCount[letter] = count + 1\n        } else {\n            letterCount[letter]\
    \ = 1\n        }\n    }\n    return letterCount", "    var histogram = [String\
    \ : Int]()\n    for letter in test.lowercaseString.characters {\n        histogram[letter]\
    \ = (histogram[letter] ?? 0) + 1\n    }\n    return histogram", "    var histogram\
    \ = [String : Int]()\n    for letter in test.lowercased() {\n        histogram[letter]\
    \ = (histogram[letter] ?? 0) + 1\n    }\n    return histogram", "    var histogram\
    \ = [String : Int]()\n    for letter in test.lowercaseString.characters {\n  \
    \      if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram", "    var histogram = [String : Int]()\n    for letter\
    \ in test.lowercased() {\n        if let count = histogram[letter] {\n       \
    \     histogram[letter] = count + 1\n        } else {\n            histogram[letter]\
    \ = 1\n        }\n    }\n    return histogram", "    var histogram = [String :\
    \ Int]()\n    for letter in test.lowercased() {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram", "    var histogram\
    \ = [String : Int]()\n    for letter in test.lowercased() {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram",
  "    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n \
    \       if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram", "    var histogram = [String : Int]()\n    for letter\
    \ in test.lowercased() {\n        histogram[letter] = (histogram[letter] ?? 0)\
    \ + 1\n    }\n    return histogram", "    var histogram = [String : Int]()\n \
    \   for letter in test.lowercaseString.unicodeScalars {\n        if let count\
    \ = histogram.value(forKey: letter) {\n            histogram[letter] = count +\
    \ 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n \
    \   return histogram", "    var histogram = [String : Int]()\n    for letter in\
    \ test.lowercased() {\n        histogram[letter] = (histogram[letter] ?? 0) +\
    \ 1\n    }\n    return histogram", "    var histogram = [String : Int]()\n   \
    \ for letter in test.lowercaseString.characters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram", "    var histogram\
    \ = [String : Int]()\n    for letter in test.lowercaseString.unicodeScalars {\n\
    \        if let count = histogram.value(forKey: letter) {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram", "    var histogram = [String : Int]()\n    var\
    \ maxCount = 0\n    var maxLetter = \"\"\n    for letter in test.lowercased()\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \        if histogram[letter] > maxCount {\n            maxCount = histogram[letter]\n\
    \            maxLetter = letter\n        }\n    }\n    return histogram", "  \
    \  var result: [String : Int] = [:]\n    for letter in test.lowercased() {\n \
    \       if let count = result[letter] {\n            result[letter] = count +\
    \ 1\n        } else {\n            result[letter] = 1\n        }\n    }\n    return\
    \ result", "    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(separator:\
    \ \" \") {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram", "    var histogram = [String : Int]()\n    for\
    \ letter in test.lowercaseString.split(separator: \" \") {\n        histogram[letter]\
    \ = (histogram[letter] ?? 0) + 1\n    }\n    return histogram", "    var histogram\
    \ = [String : Int]()\n    for letter in test.lowercased() {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram",
  "    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n \
    \       histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return histogram",
  "    var histogram = [String : Int]()\n    for letter in test.lowercaseString.characters\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram", "    var histogram = [String : Int]()\n    var maxCount = 0\n  \
    \  for letter in test.lowercased() {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n        if histogram[letter] > maxCount {\n\
    \            maxCount = histogram[letter]\n        }\n    }\n    return histogram",
  "    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n \
    \       if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram", "    var histogram = [String : Int]()\n    var maxCount\
    \ = 0\n    var maxLetter = \"\"\n    for letter in test.lowercased() {\n     \
    \   if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n      \
    \  if histogram[letter] > maxCount {\n            maxCount = histogram[letter]\n\
    \            maxLetter = letter\n        }\n    }\n    return histogram", "  \
    \  var histogram = [String : Int]()\n    for letter in test.lowercased() {\n \
    \       if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram", "    var histogram = [String : Int]()\n    for letter\
    \ in test.lowercaseString.unicodeScalars {\n        histogram[letter] = histogram.count\n\
    \    }\n    return histogram", "    var histogram = [String : Int]()\n    var\
    \ maxCount = 0\n    var maxLetter = \"\"\n    for letter in test.lowercaseString.characters\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \        if histogram[letter] > maxCount {\n            maxCount = histogram[letter]\n\
    \            maxLetter = letter\n        }\n    }\n    return histogram", "  \
    \  var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(separator:\
    \ \" \") {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram", "    var histogram = [String : Int]()\n    for\
    \ letter in test.lowercased() {\n        if let count = histogram[letter] {\n\
    \            histogram[letter] = count + 1\n        } else {\n            histogram[letter]\
    \ = 1\n        }\n    }\n    return histogram", "    var histogram = [String :\
    \ Int]()\n    for letter in test.lowercased() {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram", "    var histogram\
    \ = [String : Int]()\n    for letter in test.lowercased() {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram",
  "    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n \
    \       if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram", "    var histogram = [String : Int]()\n    for letter\
    \ in test.lowercaseString.unicodeScalars {\n        if let count = histogram.value(forKey:\
    \ letter) {\n            histogram[letter] = count + 1\n        } else {\n   \
    \         histogram[letter] = 1\n        }\n    }\n    return histogram", "  \
    \  var letterCount = [String : Int]()\n    for letter in test.lowercaseString.unicodeScalars\
    \ {\n        if let count = letterCount[letter] {\n            letterCount[letter]\
    \ = count + 1\n        } else {\n            letterCount[letter] = 1\n       \
    \ }\n    }\n    return letterCount", "    var histogram = [String : Int]()\n \
    \   for letter in test.lowercased() {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram", "    var result:\
    \ [String : Int] = [:]\n    for letter in test.lowercaseString.split(separator:\
    \ \" \") {\n        if let count = result[letter] {\n            result[letter]\
    \ = count + 1\n        } else {\n            result[letter] = 1\n        }\n \
    \   }\n    return result", "    var histogram = [String : Int]()\n    for letter\
    \ in test.lowercased() {\n        histogram[letter] = (histogram[letter] ?? 0)\
    \ + 1\n    }\n    return histogram", "    var result: [String : Int] = [:]\n \
    \   for letter in test.lowercased() {\n        if let count = result[letter] {\n\
    \            result[letter] = count + 1\n        } else {\n            result[letter]\
    \ = 1\n        }\n    }\n    return result", "    var histogram = [String : Int]()\n\
    \    for letter in test.lowercased() {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram", "    var histogram\
    \ = [String : Int]()\n    for letter in test.lowercaseString.split(separator:\
    \ \" \") {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n\
    \    return histogram", "    var histogram = [String : Int]()\n    for letter\
    \ in test.lowercased() {\n        histogram[letter] = (histogram[letter] ?? 0)\
    \ + 1\n    }\n    return histogram", "    var histogram = [String : Int]()\n \
    \   for letter in test.lowercased() {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram", "    var histogram\
    \ = [String : Int]()\n    for letter in test.lowercased() {\n        histogram[letter]\
    \ = (histogram[letter] ?? 0) + 1\n    }\n    return histogram", "    var letterCount\
    \ = [String : Int]()\n    for letter in test.lowercased() {\n        if let count\
    \ = letterCount[letter] {\n            letterCount[letter] = count + 1\n     \
    \   } else {\n            letterCount[letter] = 1\n        }\n    }\n    return\
    \ letterCount", "    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(separator:\
    \ \" \") {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram", "    var histogram = [String : Int]()\n    var\
    \ max = 0\n    var maxLetter = \"\"\n    for letter in test.lowercased() {\n \
    \       histogram[letter] = (histogram[letter] ?? 0) + 1\n        if histogram[letter]\
    \ > max {\n            max = histogram[letter]\n            maxLetter = letter\n\
    \        }\n    }\n    return histogram", "    var histogram = [String : Int]()\n\
    \    for letter in test.lowercaseString.characters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram", "    var histogram\
    \ = [String : Int]()\n    for letter in test.lowercaseString.split(separator:\
    \ \" \") {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n\
    \    return histogram", "    var histogram = [String : Int]()\n    for letter\
    \ in test.lowercaseString.split(separator: \" \") {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram", "    var histogram\
    \ = [String : Int]()\n    for letter in test.lowercaseString.unicodeScalars {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram", "    var histogram = [String : Int]()\n    for letter\
    \ in test.lowercased() {\n        if let count = histogram[letter] {\n       \
    \     histogram[letter] = count + 1\n        } else {\n            histogram[letter]\
    \ = 1\n        }\n    }\n    return histogram", "    var histogram = [String :\
    \ Int]()\n    for letter in test.lowercased() {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram", "    var histogram\
    \ = [String : Int]()\n    for letter in test.lowercased() {\n        histogram[letter]\
    \ = (histogram[letter] ?? 0) + 1\n    }\n    return histogram", "    var histogram\
    \ = [String : Int]()\n    var maxCount = 0\n    for letter in test.lowercaseString.unicodeScalars\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \        if histogram[letter] > maxCount {\n            maxCount = histogram[letter]\n\
    \        }\n    }\n    return histogram", "    var histogram = [String : Int]()\n\
    \    for letter in test.lowercaseString.unicodeScalars {\n        if let count\
    \ = histogram.value(forKey: letter) {\n            histogram[letter] = count +\
    \ 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n \
    \   return histogram", "    var histogram = [String : Int]()\n    for letter in\
    \ test.lowercased() {\n        if let count = histogram[letter] {\n          \
    \  histogram[letter] = count + 1\n        } else {\n            histogram[letter]\
    \ = 1\n        }\n    }\n    return histogram", "    var histogram = [String :\
    \ Int]()\n    for letter in test.lowercased() {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram", "    var histogram\
    \ = [String : Int]()\n    for letter in test.lowercased() {\n        histogram[letter]\
    \ = (histogram[letter] ?? 0) + 1\n    }\n    return histogram", "    var histogram\
    \ = [String : Int]()\n    for letter in test.lowercaseString.unicodeScalars {\n\
    \        if let count = histogram.value(forKey: letter) {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram", "    var histogram = [String : Int]()\n    for\
    \ letter in test.lowercased() {\n        if let count = histogram[letter] {\n\
    \            histogram[letter] = count + 1\n        } else {\n            histogram[letter]\
    \ = 1\n        }\n    }\n    return histogram", "    var histogram = [String :\
    \ Int]()\n    for letter in test.lowercaseString.split(separator: \" \") {\n \
    \       histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return histogram",
  "    var histogram = [String : Int]()\n    var maxCount = 0\n    var maxLetter =\
    \ \"\"\n    for letter in test.lowercased() {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n        if histogram[letter] > maxCount {\n\
    \            maxCount = histogram[letter]\n            maxLetter = letter\n  \
    \      }\n    }\n    return histogram", "    var letterCount = [String : Int]()\n\
    \    var maxCount = 0\n    for letter in test.lowercaseString.characters {\n \
    \       if let count = letterCount[letter] {\n            letterCount[letter]\
    \ = count + 1\n            if count > maxCount {\n                maxCount = count\n\
    \            }\n        } else {\n            letterCount[letter] = 1\n      \
    \  }\n    }\n    return letterCount", "    var histogram = [String : Int]()\n\
    \    for letter in test.lowercased() {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram", "    var histogram\
    \ = [String : Int]()\n    for letter in test.lowercased() {\n        histogram[letter]\
    \ = (histogram[letter] ?? 0) + 1\n    }\n    return histogram", "    var histogram\
    \ = [String : Int]()\n    for letter in test.lowercased() {\n        histogram[letter]\
    \ = (histogram[letter] ?? 0) + 1\n    }\n    return histogram", "    var histogram\
    \ = [String : Int]()\n    for letter in test.lowercased() {\n        histogram[letter]\
    \ = (histogram[letter] ?? 0) + 1\n    }\n    return histogram", "    var result:\
    \ [String : Int] = [:]\n    for letter in test.lowercased() {\n        if let\
    \ count = result[letter] {\n            result[letter] = count + 1\n        }\
    \ else {\n            result[letter] = 1\n        }\n    }\n    return result",
  "    var histogram = [String : Int]()\n    for letter in test.lowercaseString.unicodeScalars\
    \ {\n        histogram[letter] = histogram.getOrDefault(letter, 0) + 1\n    }\n\
    \    return histogram", "    var histogram = [String : Int]()\n    for letter\
    \ in test.lowercaseString.characters {\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n    }\n    return histogram", "    var letterCount: [String : Int]\
    \ = [:]\n    for letter in test.lowercaseString.split(separator: \" \") {\n  \
    \      if let count = letterCount[letter] {\n            letterCount[letter] =\
    \ count + 1\n        } else {\n            letterCount[letter] = 1\n        }\n\
    \    }\n    return letterCount", "    var histogram = [String : Int]()\n    for\
    \ letter in test.lowercased() {\n        if let count = histogram[letter] {\n\
    \            histogram[letter] = count + 1\n        } else {\n            histogram[letter]\
    \ = 1\n        }\n    }\n    return histogram", "    var histogram = [String :\
    \ Int]()\n    for letter in test.lowercased() {\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n    }\n    return histogram", "    var histogram = [String : Int]()\n\
    \    for letter in test.lowercased() {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram", "    var histogram\
    \ = [String : Int]()\n    for letter in test.lowercaseString.characters {\n  \
    \      if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram", "    var letterCount: [String : Int] = [:]\n    for letter\
    \ in test.lowercased() {\n        if let count = letterCount[letter] {\n     \
    \       letterCount[letter] = count + 1\n        } else {\n            letterCount[letter]\
    \ = 1\n        }\n    }\n    return letterCount", "    var letterCount = [String\
    \ : Int]()\n    for letter in test.lowercased() {\n        if let count = letterCount[letter]\
    \ {\n            letterCount[letter] = count + 1\n        } else {\n         \
    \   letterCount[letter] = 1\n        }\n    }\n    return letterCount", "    var\
    \ histogram = [String : Int]()\n    for letter in test.lowercased() {\n      \
    \  histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return histogram",
  "    var histogram = [String : Int]()\n    var maxCount = 0\n    var maxLetter =\
    \ \"\"\n    for letter in test.lowercased() {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n        if histogram[letter] > maxCount {\n\
    \            maxCount = histogram[letter]\n            maxLetter = letter\n  \
    \      }\n    }\n    return histogram", "    var histogram = [String : Int]()\n\
    \    for letter in test.lowercased() {\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n    }\n    return histogram", "    var histogram = [String : Int]()\n\
    \    var letters = test.characters\n    for letter in letters {\n        if let\
    \ count = histogram[letter] {\n            histogram[letter] = count + 1\n   \
    \     } else {\n            histogram[letter] = 1\n        }\n    }\n    return\
    \ histogram", "    var letterCount = [String : Int]()\n    for letter in test.lowercaseString.characters\
    \ {\n        if let count = letterCount[letter] {\n            letterCount[letter]\
    \ = count + 1\n        } else {\n            letterCount[letter] = 1\n       \
    \ }\n    }\n    return letterCount", "    var histogram = [String : Int]()\n \
    \   for letter in test.lowercased() {\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n    }\n    return histogram", "    var histogram = [String : Int]()\n\
    \    for letter in test.lowercased() {\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n    }\n    return histogram", "    var letterCount: [String : Int]\
    \ = [:]\n    for letter in test.lowercased() {\n        if let count = letterCount[letter]\
    \ {\n            letterCount[letter] = count + 1\n        } else {\n         \
    \   letterCount[letter] = 1\n        }\n    }\n    return letterCount", "    var\
    \ letterCount = [String : Int]()\n    for letter in test.lowercaseString.characters\
    \ {\n        if let count = letterCount[letter] {\n            letterCount[letter]\
    \ = count + 1\n        } else {\n            letterCount[letter] = 1\n       \
    \ }\n    }\n    return letterCount", "    var histogram = [String : Int]()\n \
    \   var maxCount = 0\n    for letter in test.lowercased() {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n        if histogram[letter]\
    \ > maxCount {\n            maxCount = histogram[letter]\n        }\n    }\n \
    \   return histogram", "    var histogram = [String : Int]()\n    var max = 0\n\
    \    var maxLetter = \"\"\n    var letter = \"\"\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = histogram.value(forKey: letter) ?? 0\n      \
    \  if histogram[letter] > max {\n            max = histogram[letter]\n       \
    \     maxLetter = letter\n        }\n    }\n    return histogram", "    var histogram\
    \ = [String : Int]()\n    for letter in test.lowercased() {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram",
  "    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n \
    \       if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram", "    var histogram = [String : Int]()\n    for letter\
    \ in test.lowercased() {\n        if let count = histogram[letter] {\n       \
    \     histogram[letter] = count + 1\n        } else {\n            histogram[letter]\
    \ = 1\n        }\n    }\n    return histogram", "    var histogram = [String :\
    \ Int]()\n    for letter in test.lowercased() {\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n    }\n    return histogram", "    var letterCount = [String : Int]()\n\
    \    for letter in test.lowercased() {\n        if let count = letterCount[letter]\
    \ {\n            letterCount[letter] = count + 1\n        } else {\n         \
    \   letterCount[letter] = 1\n        }\n    }\n    return letterCount", "    var\
    \ letterCount = [String : Int]()\n    for letter in test.lowercased() {\n    \
    \    if let count = letterCount[letter] {\n            letterCount[letter] = count\
    \ + 1\n        } else {\n            letterCount[letter] = 1\n        }\n    }\n\
    \    return letterCount", "    var result: [String : Int] = [:]\n    var max =\
    \ 0\n    for letter in test.lowercased() {\n        if let count = result[letter]\
    \ {\n            result[letter] = count + 1\n            if count > max {\n  \
    \              max = count\n            }\n        } else {\n            result[letter]\
    \ = 1\n        }\n    }\n    return result", "    var letterCount = [String :\
    \ Int]()\n    for letter in test.lowercased() {\n        if let count = letterCount[letter]\
    \ {\n            letterCount[letter] = count + 1\n        } else {\n         \
    \   letterCount[letter] = 1\n        }\n    }\n    return letterCount", "    var\
    \ histogram = [String : Int]()\n    for letter in test.lowercaseString.split(separator:\
    \ \" \") {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram", "    var histogram = [String : Int]()\n    for\
    \ letter in test.lowercased() {\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n    }\n    return histogram", "    var histogram = [String : Int]()\n\
    \    for letter in test.lowercased() {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram", "    var result:\
    \ [String : Int] = [:]\n    for letter in test.lowercaseString.split(separator:\
    \ \" \") {\n        if let count = result[letter] {\n            result[letter]\
    \ = count + 1\n        } else {\n            result[letter] = 1\n        }\n \
    \   }\n    return result", "    var histogram = [String : Int]()\n    for letter\
    \ in test.lowercaseString.characters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram", "    var histogram\
    \ = [String : Int]()\n    for letter in test.lowercaseString.characters {\n  \
    \      if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram", "    var histogram = [String : Int]()\n    for letter\
    \ in test.lowercased() {\n        histogram[letter] = (histogram[letter] ?? 0)\
    \ + 1\n    }\n    return histogram", "    var histogram = [String : Int]()\n \
    \   for letter in test.lowercased() {\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n    }\n    return histogram", "    var histogram = [String : Int]()\n\
    \    for letter in test.lowercased() {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram", "    var histogram\
    \ = [String : Int]()\n    for letter in test.lowercased() {\n        histogram[letter]\
    \ = (histogram[letter] ?? 0) + 1\n    }\n    return histogram", "    var letterCount:\
    \ [String : Int] = [:]\n    for letter in test.lowercased() {\n        if let\
    \ count = letterCount[letter] {\n            letterCount[letter] = count + 1\n\
    \        } else {\n            letterCount[letter] = 1\n        }\n    }\n   \
    \ return letterCount", "    var letters: [String: Int] = [:]\n    var maxCount\
    \ = 0\n    for letter in test.lowercased() {\n        if let count = letters[letter]\
    \ {\n            letters[letter] = count + 1\n        } else {\n            letters[letter]\
    \ = 1\n        }\n        if letters[letter] > maxCount {\n            maxCount\
    \ = letters[letter]\n        }\n    }\n    return letters", "    var letterCount\
    \ = [String : Int]()\n    for letter in test.lowercased() {\n        letterCount[letter]\
    \ = (letterCount[letter] ?? 0) + 1\n    }\n    return letterCount", "    var histogram\
    \ = [String : Int]()\n    for letter in test.lowercased() {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram",
  "    var histogram = [String : Int]()\n    var letters = test.characters\n    for\
    \ letter in letters {\n        if let count = histogram[letter] {\n          \
    \  histogram[letter] = count + 1\n        } else {\n            histogram[letter]\
    \ = 1\n        }\n    }\n    return histogram", "    var histogram = [String :\
    \ Int]()\n    for letter in test.lowercaseString.unicodeScalars {\n        if\
    \ let count = histogram.value(forKey: letter) {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram", "    var histogram = [String : Int]()\n    for\
    \ letter in test.lowercased() {\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n    }\n    return histogram", "    var histogram = [String : Int]()\n\
    \    for letter in test.lowercaseString.split(separator: \" \") {\n        if\
    \ let count = histogram[letter] {\n            histogram[letter] = count + 1\n\
    \        } else {\n            histogram[letter] = 1\n        }\n    }\n    return\
    \ histogram", "    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram", "    var histogram = [String : Int]()\n    for\
    \ letter in test.lowercaseString.characters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram", "    var histogram\
    \ = [String : Int]()\n    for letter in test.lowercaseString.split(separator:\
    \ \" \") {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram", "    var histogram = [String : Int]()\n    var\
    \ max = 0\n    for letter in test.lowercaseString.characters {\n        if let\
    \ count = histogram[letter] {\n            histogram[letter] = count + 1\n   \
    \         if count > max {\n                max = count\n            }\n     \
    \   } else {\n            histogram[letter] = 1\n        }\n    }\n    return\
    \ histogram", "    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram", "    var histogram = [String : Int]()\n    for letter in test.lowercaseString.characters\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram", "    var histogram = [String : Int]()\n    for\
    \ letter in test.lowercaseString.split(separator: \" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram",
  "    var histogram = [String : Int]()\n    for letter in test.lowercaseString.unicodeScalars\
    \ {\n        if let count = histogram.value(forKey: letter) {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram", "    var histogram = [String : Int]()\n    var\
    \ maxCount = 0\n    for letter in test.lowercased() {\n        if let count =\
    \ histogram[letter] {\n            histogram[letter] = count + 1\n        } else\
    \ {\n            histogram[letter] = 1\n        }\n        if histogram[letter]\
    \ > maxCount {\n            maxCount = histogram[letter]\n        }\n    }\n \
    \   return histogram", "    var histogram = [String : Int]()\n    for letter in\
    \ test.lowercaseString.characters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram", "    var histogram\
    \ = [String : Int]()\n    var maxCount = 0\n    var maxLetter = \"\"\n    for\
    \ letter in test.lowercased() {\n        if let count = histogram[letter] {\n\
    \            histogram[letter] = count + 1\n        } else {\n            histogram[letter]\
    \ = 1\n        }\n        if histogram[letter] > maxCount {\n            maxCount\
    \ = histogram[letter]\n            maxLetter = letter\n        }\n    }\n    return\
    \ histogram", "    var letterCount = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        if let count = letterCount[letter] {\n            letterCount[letter]\
    \ = count + 1\n        } else {\n            letterCount[letter] = 1\n       \
    \ }\n    }\n    return letterCount", "    var result: [String : Int] = [:]\n \
    \   var maxCount = 0\n    for char in test.lowercaseString.unicodeScalars {\n\
    \        let count = test.lowercaseString.unicodeScalars.filter({ $0 == char }).count\n\
    \        if count > maxCount {\n            maxCount = count\n        }\n    \
    \    result[char] = count\n    }\n    return result", "    var letterCount = [String\
    \ : Int]()\n    for letter in test.lowercased() {\n        letterCount[letter]\
    \ = (letterCount[letter] ?? 0) + 1\n    }\n    return letterCount", "    var histogram\
    \ = [String : Int]()\n    var letters = test.characters\n    for letter in letters\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram", "    var histogram = [String : Int]()\n    for\
    \ letter in test.lowercaseString.characters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram", "    var histogram\
    \ = [String : Int]()\n    for letter in test.lowercased() {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram",
  "    var histogram = [String : Int]()\n    for letter in test.lowercaseString.characters\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram", "    var histogram = [String : Int]()\n    for\
    \ letter in test.lowercaseString.characters {\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n    }\n    return histogram", "    var histogram = [String : Int]()\n\
    \    for letter in test.lowercaseString.characters {\n        histogram[letter]\
    \ = (histogram[letter] ?? 0) + 1\n    }\n    return histogram"]
stop_tokens:
- "\n}"
