language: swift
name: HumanEval_116_sort_array
results:
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    var ones = 0\n    var decimal = 0\n    for x in arr\
    \ {\n        ones += x\n        decimal += x * x\n    }\n    if ones == 0 {\n\
    \        return arr\n    }\n    if ones < 0 {\n        ones = -ones\n        decimal\
    \ = -decimal\n    }\n    if ones == 1 {\n        return arr.sorted(by: {$0 < $1}).sorted(by:\
    \ {$0 > $1})\n    }\n    if ones == 2 {\n        return arr.sorted(by: {$0 < $1}).sorted(by:\
    \ {$0 > $1})\n    }\n    if ones == 3 {\n        return arr.sorted(by: {$0 < $1}).sorted(by:\
    \ {$0 > $1})\n    }\n    if ones == 4 {\n        return arr.sorted(by: {$0 < $1}).sorted(by:\
    \ {$0 > $1})\n    }\n    if ones == 5 {\n        return arr.sorted(by: {$0 < $1}).sorted(by:\
    \ {$0 > $1})\n    }\n    if ones == 6 {\n        return arr.sorted(by: {$0 < $1}).sorted(by:\
    \ {$0 > $1})\n    }\n    if ones == 7 {\n        return arr.sorted(by: {$0 < $1}).sorted(by:\
    \ {$0 > $1})\n    }\n    if ones == 8 {\n        return arr.sorted(by: {$0 < $1}).sorted(by:\
    \ {$0 > $1})\n    }\n    if ones == 9 {\n        return arr.sorted(by: {$0 < $1}).sorted(by:\
    \ {$0 > $1})\n    }\n    if ones == 10 {\n        return arr.sorted(by: {$0 <\
    \ $1}).sorted(by: {$0 > $1})\n    }\n    if ones == 11 {\n        return arr.sorted(by:\
    \ {$0 < $1}).sorted(by: {$0 > $1})\n    }\n    if ones == 12 {\n        return\
    \ arr.sorted(by: {$0 < $1}).sorted(by: {$0 > $1})\n    }\n    if ones == 13 {\n\
    \        return arr.sorted(by: {$0 < $1}).sorted(by: {$0 > $1})\n    }\n    if\
    \ ones == 14 {\n        return arr.sorted(by: {$0 < $1}).sorted(by: {$0 > $1})\n\
    \    }\n    if ones == 15 {\n        return arr.sorted(by: {$0 < $1}).sorted(by:\
    \ {$0 > $1})\n    }\n    if ones == 16 {\n        return arr.sorted(by: {$0 <\
    \ $1}).sorted(by: {$0 > $1})\n    }\n    if ones == 17 {\n        return arr.sorted(by:\
    \ {$0 < $1}).sorted(by: {$0 > $1})\n    }\n    if ones == 18 {\n        return\
    \ arr.sorted(by: {$\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpnw_3n7l7.swift:73:32: error: '$' is not an identifier; use backticks\
    \ to escape it\n        return arr.sorted(by: {$\n                           \
    \    ^\n                               `$`\n/tmp/tmpnw_3n7l7.swift:77:1: error:\
    \ expected ')' in expression list\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n^\n/tmp/tmpnw_3n7l7.swift:73:26: note: to match this opening '('\n\
    \        return arr.sorted(by: {$\n                         ^\n/tmp/tmpnw_3n7l7.swift:96:64:\
    \ error: expected '}' at end of brace statement\nassert(sort_array(arr: [2, 4,\
    \ 8, 16, 32]) == [2, 4, 8, 16, 32])\n                                        \
    \                       ^\n/tmp/tmpnw_3n7l7.swift:72:19: note: to match this opening\
    \ '{'\n    if ones == 18 {\n                  ^\n/tmp/tmpnw_3n7l7.swift:96:64:\
    \ error: expected '}' at end of brace statement\nassert(sort_array(arr: [2, 4,\
    \ 8, 16, 32]) == [2, 4, 8, 16, 32])\n                                        \
    \                       ^\n/tmp/tmpnw_3n7l7.swift:6:38: note: to match this opening\
    \ '{'\nfunc sort_array(arr: [Int]) -> [Int] {\n                              \
    \       ^\n/tmp/tmpnw_3n7l7.swift:73:32: error: cannot find '$' in scope\n   \
    \     return arr.sorted(by: {$\n                               ^\n/tmp/tmpnw_3n7l7.swift:77:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ let ones = arr.filter{$0 > 0}\n    let decimal = arr.filter{$0 == 0}\n    let\
    \ sorted = ones\n        .sorted(by: { $0.bits() == $1.bits() })\n        .sorted(by:\
    \ { $0.decimal() == $1.decimal() })\n    return sorted\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpflfk1nmw.swift:10:26: error: value of type 'Int' has no member\
    \ 'bits'\n        .sorted(by: { $0.bits() == $1.bits() })\n                  \
    \    ~~ ^~~~\n/tmp/tmpflfk1nmw.swift:10:39: error: value of type 'Int' has no\
    \ member 'bits'\n        .sorted(by: { $0.bits() == $1.bits() })\n           \
    \                        ~~ ^~~~\n/tmp/tmpflfk1nmw.swift:11:26: error: value of\
    \ type 'Int' has no member 'decimal'\n        .sorted(by: { $0.decimal() == $1.decimal()\
    \ })\n                      ~~ ^~~~~~~\n/tmp/tmpflfk1nmw.swift:11:42: error: value\
    \ of type 'Int' has no member 'decimal'\n        .sorted(by: { $0.decimal() ==\
    \ $1.decimal() })\n                                      ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    for num in arr {\n        var count = 0\n        for\
    \ bit in num.binaryRepresentation {\n            if bit == 1 {\n             \
    \   count += 1\n            }\n        }\n        if count == 0 {\n          \
    \  result.insert(num, at: 0)\n        } else {\n            result.insert(num,\
    \ at: result.count - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmpurijo93b.swift:10:24: error: value of type 'Int' has no member\
    \ 'binaryRepresentation'\n        for bit in num.binaryRepresentation {\n    \
    \               ~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ let ones = arr.filter{$0}.count\n    let decimal = arr.filter{$0 > 0}.count\n\
    \    if ones == decimal {\n        return arr.sorted()\n    }\n    return arr.sorted().sorted(by:\
    \ {$0 < $1}).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp7irn5v2o.swift:7:27: error: cannot convert value of type 'Int'\
    \ to closure result type 'Bool'\n    let ones = arr.filter{$0}.count\n       \
    \                   ^~\n"
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3,\
    \ 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    assert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: '/tmp/tmp8lf8usk1.swift:8:1: error: missing return in global function expected
    to return ''[Int]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var sortedArr = [Int]()\n    var sortedArrIndex = 0\n    var sortedArrCount\
    \ = 0\n    for element in arr {\n        if element == 1 {\n            sortedArr[sortedArrIndex]\
    \ = element\n            sortedArrIndex += 1\n            sortedArrCount += 1\n\
    \        } else {\n            if sortedArrCount > sortedArrIndex {\n        \
    \        sortedArr[sortedArrIndex] = sortedArrCount\n                sortedArrIndex\
    \ += 1\n                sortedArrCount -= 1\n            }\n            sortedArr[sortedArrIndex]\
    \ = element\n            sortedArrIndex += 1\n            sortedArrCount += 1\n\
    \        }\n    }\n    return sortedArr\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00007f7108c60c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f7108957561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00007f7108957286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00007f710895713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00007f7108956bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00007f7108f047ec <unavailable> + 186348

    6    tmpeyievvts                        0x0000557eda28815f <unavailable> + 8543

    7    tmpeyievvts                        0x0000557eda287514 <unavailable> + 5396

    8    libc.so.6                          0x00007f710844d460 __libc_start_main +
    245

    9    tmpeyievvts                        0x0000557eda2871e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    var ones = 0\n    var dec = 0\n    for x in arr {\n\
    \        if x == 1 {\n            ones += 1\n        } else {\n            dec\
    \ += x\n        }\n    }\n    if ones > 0 {\n        dec *= 10\n    }\n    for\
    \ x in arr {\n        if x == 1 {\n            dec -= 1\n        }\n        if\
    \ dec > 0 {\n            dec /= 10\n        }\n        if dec > 0 {\n        \
    \    dec += 1\n        }\n        if dec > 0 {\n            dec -= 1\n       \
    \ }\n        if dec > 0 {\n            dec -= 1\n        }\n        if dec > 0\
    \ {\n            dec -= 1\n        }\n        if dec > 0 {\n            dec -=\
    \ 1\n        }\n        if dec > 0 {\n            dec -= 1\n        }\n      \
    \  if dec > 0 {\n            dec -= 1\n        }\n        if dec > 0 {\n     \
    \       dec -= 1\n        }\n        if dec > 0 {\n            dec -= 1\n    \
    \    }\n        if dec > 0 {\n            dec -= 1\n        }\n        if dec\
    \ > 0 {\n            dec -= 1\n        }\n        if dec > 0 {\n            dec\
    \ -= 1\n        }\n        if dec > 0 {\n            dec -= 1\n        }\n   \
    \     if dec > 0 {\n            dec -= 1\n        }\n        if dec > 0 {\n  \
    \          dec -= 1\n        }\n        if dec > 0 {\n            dec -= 1\n \
    \       }\n        if dec > 0 {\n            dec -= 1\n        }\n        if dec\
    \ > 0 {\n            dec -= 1\n        }\n        if dec > 0 {\n            dec\
    \ -= 1\n        }\n        if dec > 0 {\n            dec -= 1\n        }\n   \
    \     if dec > 0 {\n            dec -= 1\n        }\n        if dec > 0 {\n  \
    \          dec -= 1\n        }\n        if dec > 0 {\n            dec -= 1\n \
    \       }\n        if dec > 0 {\n            dec -= 1\n        }\n        if dec\
    \ > 0 {\n            dec -= 1\n        }\n        if dec > 0 {\n            dec\
    \ -= 1\n        }\n        if dec > 0 {\n            dec -= 1\n        }\n   \
    \     if dec > 0 {\n            dec -= 1\n        }\n        if dec > 0 {\n  \
    \          dec -= 1\n        }\n        if dec > 0 {\n            dec -= 1\n \
    \       }\n        if dec > 0 {\n            dec -= 1\n        }\n        if dec\
    \ > 0 {\n            dec -= 1\n        }\n        if dec > 0 {\n            dec\
    \ -= 1\n        }\n        if \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmptwucccmj.swift:126:11: error: expected expression, var, or let\
    \ in 'if' condition\n        if \n          ^\n/tmp/tmptwucccmj.swift:149:64:\
    \ error: expected '}' at end of brace statement\nassert(sort_array(arr: [2, 4,\
    \ 8, 16, 32]) == [2, 4, 8, 16, 32])\n                                        \
    \                       ^\n/tmp/tmptwucccmj.swift:6:38: note: to match this opening\
    \ '{'\nfunc sort_array(arr: [Int]) -> [Int] {\n                              \
    \       ^\n/tmp/tmptwucccmj.swift:130:6: error: operator functions can only be\
    \ declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    var ones = 0\n    var decimal = 0\n    for num in\
    \ arr {\n        if num == 1 {\n            ones += 1\n        } else {\n    \
    \        decimal += num\n        }\n    }\n    if ones > 0 {\n        result.sort(by:\
    \ {\n            $0.decimalValue < $1.decimalValue\n        })\n    } else {\n\
    \        result.sort(by: {\n            $0.decimalValue > $1.decimalValue\n  \
    \      })\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpnzp255lc.swift:19:16: error: value of type 'Int' has no member\
    \ 'decimalValue'\n            $0.decimalValue < $1.decimalValue\n            ~~\
    \ ^~~~~~~~~~~~\n/tmp/tmpnzp255lc.swift:19:34: error: value of type 'Int' has no\
    \ member 'decimalValue'\n            $0.decimalValue < $1.decimalValue\n     \
    \                         ~~ ^~~~~~~~~~~~\n/tmp/tmpnzp255lc.swift:23:16: error:\
    \ value of type 'Int' has no member 'decimalValue'\n            $0.decimalValue\
    \ > $1.decimalValue\n            ~~ ^~~~~~~~~~~~\n/tmp/tmpnzp255lc.swift:23:34:\
    \ error: value of type 'Int' has no member 'decimalValue'\n            $0.decimalValue\
    \ > $1.decimalValue\n                              ~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    var ones = 0\n    for x in arr {\n        if x ==\
    \ 1 {\n            ones += 1\n        } else {\n            result.insert(ones,\
    \ x)\n            ones = 1\n        }\n    }\n    result.insert(ones, arr[0])\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpebbugsoc.swift:13:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(ones, x)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpebbugsoc.swift:17:18:\
    \ error: missing argument label 'at:' in call\n    result.insert(ones, arr[0])\n\
    \                 ^\n                        at: \n"
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    for x in arr {\n        let bin = binary(x)\n    \
    \    if bin.count > 1 {\n            result.insert(x, at: result.index(of: bin.first!))\n\
    \        } else {\n            result.insert(x, at: result.index(of: bin.last!))\n\
    \        }\n    }\n    return result.sorted(by: { $0.count > $1.count })\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpodmw91jq.swift:9:19: error: cannot find 'binary' in scope\n   \
    \     let bin = binary(x)\n                  ^~~~~~\n/tmp/tmpodmw91jq.swift:11:41:\
    \ error: value of optional type 'Array<Int>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<Int>.Index' (aka 'Int')\n           \
    \ result.insert(x, at: result.index(of: bin.first!))\n                       \
    \                 ^\n/tmp/tmpodmw91jq.swift:11:41: note: coalesce using '??' to\
    \ provide a default when the optional value contains 'nil'\n            result.insert(x,\
    \ at: result.index(of: bin.first!))\n                                        ^\n\
    \                                                              ?? <#default value#>\n\
    /tmp/tmpodmw91jq.swift:11:41: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n            result.insert(x, at: result.index(of:\
    \ bin.first!))\n                                        ^\n                  \
    \                                           !\n/tmp/tmpodmw91jq.swift:13:41: error:\
    \ value of optional type 'Array<Int>.Index?' (aka 'Optional<Int>') must be unwrapped\
    \ to a value of type 'Array<Int>.Index' (aka 'Int')\n            result.insert(x,\
    \ at: result.index(of: bin.last!))\n                                        ^\n\
    /tmp/tmpodmw91jq.swift:13:41: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n            result.insert(x, at: result.index(of:\
    \ bin.last!))\n                                        ^\n                   \
    \                                          ?? <#default value#>\n/tmp/tmpodmw91jq.swift:13:41:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            result.insert(x, at: result.index(of: bin.last!))\n     \
    \                                   ^\n                                      \
    \                      !\n/tmp/tmpodmw91jq.swift:16:35: error: value of type 'Int'\
    \ has no member 'count'\n    return result.sorted(by: { $0.count > $1.count })\n\
    \                               ~~ ^~~~~\n/tmp/tmpodmw91jq.swift:16:46: error: "
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var sortedArr = [Int]()\n    var oneCount = 0\n    var decimalCount = 0\n  \
    \  for element in arr {\n        if element == 1 {\n            oneCount += 1\n\
    \        } else {\n            decimalCount += element - oneCount\n          \
    \  oneCount = 0\n        }\n    }\n    sortedArr = arr.sorted()\n    return sortedArr\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpl5vf1pfj/tmpl5vf1pfj.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007fa928b37c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007fa92882eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007fa92882e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007fa92882d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl5vf1pfj                        0x00005597d51c7654 <unavailable> + 5716

    5    libc.so.6                          0x00007fa928324460 __libc_start_main +
    245

    6    tmpl5vf1pfj                        0x00005597d51c7239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    var ones = 0\n    for element in arr {\n        if\
    \ element == 1 {\n            ones += 1\n        } else {\n            ones =\
    \ -ones\n        }\n        result.append(element)\n    }\n    if ones == 0 {\n\
    \        return result.sorted()\n    }\n    var decimal = ones\n    var decimalCount\
    \ = 0\n    for element in arr {\n        if element == 1 {\n            decimalCount\
    \ += 1\n        } else {\n            decimalCount -= 1\n        }\n        if\
    \ decimalCount == 0 {\n            decimal = decimal * 10 + element - ones\n \
    \       }\n    }\n    return result.sorted(by: { $0.decimalValue < $1.decimalValue\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3,\
    \ 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    assert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpv0v9rrkf.swift:32:35: error: value of type 'Int' has no member\
    \ 'decimalValue'\n    return result.sorted(by: { $0.decimalValue < $1.decimalValue\
    \ })\n                               ~~ ^~~~~~~~~~~~\n/tmp/tmpv0v9rrkf.swift:32:53:\
    \ error: value of type 'Int' has no member 'decimalValue'\n    return result.sorted(by:\
    \ { $0.decimalValue < $1.decimalValue })\n                                   \
    \              ~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ let ones = arr.filter{$0 == 1}\n    let decimals = arr.filter{$0 != 1}\n   \
    \ let sortedOnes = ones.sorted()\n    let sortedDecimals = decimals.sorted()\n\
    \    return sortedOnes + sortedDecimals\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpfw7j5iax/tmpfw7j5iax.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007fcf29e56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007fcf29b4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007fcf29b4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007fcf29b4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfw7j5iax                        0x000055d3fbe815a4 <unavailable> + 5540

    5    libc.so.6                          0x00007fcf29643460 __libc_start_main +
    245

    6    tmpfw7j5iax                        0x000055d3fbe81189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ let ones = arr.filter{$0 == 1}\n    let decimals = arr.filter{$0 != 1}\n   \
    \ let sortedArray = ones.sorted(by: {$0.count > $1.count})\n    return sortedArray.sorted(by:\
    \ {$0.decimalValue > $1.decimalValue})\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmprtwp5s2d.swift:9:43: error: value of type 'Int' has no member 'count'\n\
    \    let sortedArray = ones.sorted(by: {$0.count > $1.count})\n              \
    \                         ~~ ^~~~~\n/tmp/tmprtwp5s2d.swift:9:54: error: value\
    \ of type 'Int' has no member 'count'\n    let sortedArray = ones.sorted(by: {$0.count\
    \ > $1.count})\n                                                  ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3,\
    \ 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    assert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: '/tmp/tmp8lf8usk1.swift:8:1: error: missing return in global function expected
    to return ''[Int]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    var ones = 0\n    var decimal = 0\n    for num in\
    \ arr {\n        ones += num\n        decimal += num * Int(pow(2.0, Double(bitCount(num))))\n\
    \    }\n    result.sortInPlace()\n    for num in arr {\n        if ones == 0 {\n\
    \            ones += num\n            decimal += num * Int(pow(2.0, Double(bitCount(num))))\n\
    \        } else {\n            if num == 0 {\n                ones = ones - num\n\
    \                decimal = decimal - num * Int(pow(2.0, Double(bitCount(num))))\n\
    \            } else {\n                if ones == num {\n                    ones\
    \ = ones - num\n                    decimal = decimal - num * Int(pow(2.0, Double(bitCount(num))))\n\
    \                } else {\n                    if ones > num {\n             \
    \           ones = ones - num\n                        decimal = decimal - num\
    \ * Int(pow(2.0, Double(bitCount(num))))\n                    }\n            \
    \    }\n            }\n        }\n    }\n    for num in arr {\n        if ones\
    \ == 0 {\n            ones += num\n            decimal += num * Int(pow(2.0, Double(bitCount(num))))\n\
    \        } else {\n            if num == 0 {\n                ones = ones - num\n\
    \                decimal = decimal - num * Int(pow(2.0, Double(bitCount(num))))\n\
    \            } else {\n                if ones == num {\n                    ones\
    \ = ones - num\n                    decimal = decimal - num * Int(pow(2.0, Double(bitCount(num))))\n\
    \                } else {\n                    if ones > num {\n             \
    \           ones = ones - num\n                        decimal = decimal - num\
    \ * Int(pow(2.0, Double(bitCount(num))))\n                    }\n            \
    \    }\n            }\n        }\n    }\n    for num in arr {\n        if ones\
    \ == 0 {\n            ones += num\n            decimal += num * Int(pow(2.0, Double(bitCount(num))))\n\
    \        } else {\n            if num == 0 {\n                ones = ones - num\n\
    \                decimal = decimal - num * Int(pow(2.0, Double(bitCount(num))))\n\
    \            } else {\n                if ones == num {\n                    ones\
    \ = ones - num\n                    decimal = decimal - num * Int(pow(2.0, Double(bitCount(num))))\n\
    \                } else {\n                    if ones > num {\n             \
    \           ones = ones - num\n                        decimal = decimal - num\
    \ * Int(pow(2.0, Double(bitCount(num))))\n                    }\n            \
    \    }\n            }\n        }\n    }\n    for num in arr {\n        if ones\
    \ == 0 {\n            ones += num\n            decimal += num * Int(pow(2.0, Double(bitCount(num))))\n\
    \        } else {\n            if num == 0 {\n                ones = ones - num\n\
    \                decimal = decimal - num * Int(pow(\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp9tqxchj6.swift:86:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmp9tqxchj6.swift:108:64: error: expected '}' at end of brace statement\n\
    assert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n            \
    \                                                   ^\n/tmp/tmp9tqxchj6.swift:82:16:\
    \ note: to match this opening '{'\n        } else {\n               ^\n/tmp/tmp9tqxchj6.swift:108:64:\
    \ error: expected '}' at end of brace statement\nassert(sort_array(arr: [2, 4,\
    \ 8, 16, 32]) == [2, 4, 8, 16, 32])\n                                        \
    \                       ^\n/tmp/tmp9tqxchj6.swift:78:20: note: to match this opening\
    \ '{'\n    for num in arr {\n                   ^\n/tmp/tmp9tqxchj6.swift:108:64:\
    \ error: expected '}' at end of brace statement\nassert(sort_array(arr: [2, 4,\
    \ 8, 16, 32]) == [2, 4, 8, 16, 32])\n                                        \
    \                       ^\n/tmp/tmp9tqxchj6.swift:6:38: note: to match this opening\
    \ '{'\nfunc sort_array(arr: [Int]) -> [Int] {\n                              \
    \       ^\n/tmp/tmp9tqxchj6.swift:12:30: error: cannot find 'pow' in scope\n \
    \       decimal += num * Int(pow(2.0, Double(bitCount(num))))\n              \
    \               ^~~\n/tmp/tmp9tqxchj6.swift:12:46: error: cannot find 'bitCount'\
    \ in scope\n        decimal += num * Int(pow(2.0, Double(bitCount(num))))\n  \
    \                                           ^~~~~~~~\n/tmp/tmp9tqxchj6.swift:14:12:\
    \ error: value of type '[Int]' has no member 'sortInPlace'\n    result.sortInPlace()\n\
    \    ~~~~~~ ^~~~~~~~~~~\n/tmp/tmp9tqxchj6.swift:18:34: error: cannot find 'pow'\
    \ in scope\n            decimal += num * Int(pow(2.0, Double(bitCount(num))))\n\
    \                                 ^~~\n/tmp/tmp9tqxchj6.swift:18:50: error: cannot\
    \ find 'bitCount' in scope\n            decimal += num * Int(pow(2.0, Double(bitCount(num))))\n\
    \                                                 ^~~~~~~~\n/tmp/tmp9tqxchj6.swift:22:47:\
    \ error: cannot find 'pow' in scope\n                decimal = decimal - num *\
    \ Int(pow(2.0, Double(bitCount(num))))\n                          "
  stdout: ''
  timestamp: 1660053397
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3,\
    \ 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    assert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: '/tmp/tmp8lf8usk1.swift:8:1: error: missing return in global function expected
    to return ''[Int]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3,\
    \ 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    assert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: '/tmp/tmp8lf8usk1.swift:8:1: error: missing return in global function expected
    to return ''[Int]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var sortedArray = [Int]()\n    for x in arr {\n        if x == 1 {\n       \
    \     sortedArray.append(x)\n        } else {\n            sortedArray = sortedArray.sorted\
    \ { $0 < $1 }\n        }\n    }\n    return sortedArray\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmp1l8r1hvi/tmp1l8r1hvi.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f0d283bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f0d280b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f0d280b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f0d280b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1l8r1hvi                        0x0000564624d3d674 <unavailable> + 5748

    5    libc.so.6                          0x00007f0d27ba8460 __libc_start_main +
    245

    6    tmp1l8r1hvi                        0x0000564624d3d259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    var ones = 0\n    var decimal = 0\n    for element\
    \ in arr {\n        if element == 1 {\n            ones += 1\n        } else {\n\
    \            decimal += element / 2\n        }\n    }\n    if ones > 0 {\n   \
    \     result.sort(by: {\n            $0.compare(Decimal(decimal)) < $1.compare(Decimal(decimal))\n\
    \        })\n    } else {\n        result.sort(by: {\n            $0.compare(Decimal(decimal))\
    \ > $1.compare(Decimal(decimal))\n        })\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpd7e7poj_.swift:19:24: error: cannot find 'Decimal' in scope\n \
    \           $0.compare(Decimal(decimal)) < $1.compare(Decimal(decimal))\n    \
    \                   ^~~~~~~\n/tmp/tmpd7e7poj_.swift:19:55: error: cannot find\
    \ 'Decimal' in scope\n            $0.compare(Decimal(decimal)) < $1.compare(Decimal(decimal))\n\
    \                                                      ^~~~~~~\n/tmp/tmpd7e7poj_.swift:23:24:\
    \ error: cannot find 'Decimal' in scope\n            $0.compare(Decimal(decimal))\
    \ > $1.compare(Decimal(decimal))\n                       ^~~~~~~\n/tmp/tmpd7e7poj_.swift:23:55:\
    \ error: cannot find 'Decimal' in scope\n            $0.compare(Decimal(decimal))\
    \ > $1.compare(Decimal(decimal))\n                                           \
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    var ones = [0]\n    var decimal = [0]\n    for x in\
    \ arr {\n        if x == 1 {\n            ones[0] += 1\n        } else {\n   \
    \         decimal[0] += x\n        }\n    }\n    for x in ones {\n        result.append((decimal[0]\
    \ / x) * x)\n        decimal[0] -= x\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpt4q5a2tz/tmpt4q5a2tz.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff5f6a53c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff5f674ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff5f674a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff5f67497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt4q5a2tz                        0x000055ddfbb92744 <unavailable> + 5956

    5    libc.so.6                          0x00007ff5f6240460 __libc_start_main +
    245

    6    tmpt4q5a2tz                        0x000055ddfbb92329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3,\
    \ 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    assert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: '/tmp/tmp8lf8usk1.swift:8:1: error: missing return in global function expected
    to return ''[Int]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var sortedArr = [Int]()\n    var sortedArrCount = [Int]()\n    var sortedArrDecimal\
    \ = [Int]()\n    var sortedArrBinary = [Int]()\n\n    for num in arr {\n     \
    \   sortedArr.append(num)\n        sortedArrCount.append(num.count)\n        sortedArrDecimal.append(num.decimalValue)\n\
    \        sortedArrBinary.append(num.binaryValue)\n    }\n\n    sortedArr = sortedArr.sorted(by:\
    \ { (num1, num2) in\n        if num1.count < num2.count {\n            return\
    \ true\n        }\n        if num1.count == num2.count {\n            return num1.decimalValue\
    \ < num2.decimalValue\n        }\n        return false\n    })\n\n    sortedArr\
    \ = sortedArr.sorted(by: { (num1, num2) in\n        if num1.count < num2.count\
    \ {\n            return true\n        }\n        if num1.count == num2.count {\n\
    \            return num1.binaryValue < num2.binaryValue\n        }\n        return\
    \ false\n    })\n\n    return sortedArr\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp7047xcy9.swift:14:35: error: value of type 'Int' has no member\
    \ 'count'\n        sortedArrCount.append(num.count)\n                        \
    \      ~~~ ^~~~~\n/tmp/tmp7047xcy9.swift:15:37: error: value of type 'Int' has\
    \ no member 'decimalValue'\n        sortedArrDecimal.append(num.decimalValue)\n\
    \                                ~~~ ^~~~~~~~~~~~\n/tmp/tmp7047xcy9.swift:16:36:\
    \ error: value of type 'Int' has no member 'binaryValue'\n        sortedArrBinary.append(num.binaryValue)\n\
    \                               ~~~ ^~~~~~~~~~~\n/tmp/tmp7047xcy9.swift:20:17:\
    \ error: value of type 'Int' has no member 'count'\n        if num1.count < num2.count\
    \ {\n           ~~~~ ^~~~~\n/tmp/tmp7047xcy9.swift:20:30: error: value of type\
    \ 'Int' has no member 'count'\n        if num1.count < num2.count {\n        \
    \                ~~~~ ^~~~~\n/tmp/tmp7047xcy9.swift:30:17: error: value of type\
    \ 'Int' has no member 'count'\n        if num1.count < num2.count {\n        \
    \   ~~~~ ^~~~~\n/tmp/tmp7047xcy9.swift:30:30: error: value of type 'Int' has no\
    \ member 'count'\n        if num1.count < num2.count {\n                     \
    \   ~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3,\
    \ 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    assert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: '/tmp/tmp8lf8usk1.swift:8:1: error: missing return in global function expected
    to return ''[Int]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ let ones = arr.filter{$0.isOne}\n    let decimals = arr.filter{$0.isZero}\n\
    \    let sortedArray = ones.sorted{$0.count < $1.count}\n    return sortedArray.sorted{$0.decimalValue\
    \ < $1.decimalValue}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpmp5hhzdy.swift:7:30: error: value of type 'Int' has no member 'isOne'\n\
    \    let ones = arr.filter{$0.isOne}\n                          ~~ ^~~~~\n/tmp/tmpmp5hhzdy.swift:8:34:\
    \ error: value of type 'Int' has no member 'isZero'\n    let decimals = arr.filter{$0.isZero}\n\
    \                              ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    var ones = 0\n    var decimal = 0\n    for element\
    \ in arr {\n        if element == 1 {\n            ones += 1\n        } else {\n\
    \            decimal += element * 2\n        }\n    }\n    if ones > 0 {\n   \
    \     result.sort(by: {\n            $0.compare(Decimal(decimal)) < $1.compare(Decimal(decimal))\n\
    \        })\n    } else {\n        result.sort(by: {\n            $0.compare(Decimal(decimal))\
    \ > $1.compare(Decimal(decimal))\n        })\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpjc0wjzx1.swift:19:24: error: cannot find 'Decimal' in scope\n \
    \           $0.compare(Decimal(decimal)) < $1.compare(Decimal(decimal))\n    \
    \                   ^~~~~~~\n/tmp/tmpjc0wjzx1.swift:19:55: error: cannot find\
    \ 'Decimal' in scope\n            $0.compare(Decimal(decimal)) < $1.compare(Decimal(decimal))\n\
    \                                                      ^~~~~~~\n/tmp/tmpjc0wjzx1.swift:23:24:\
    \ error: cannot find 'Decimal' in scope\n            $0.compare(Decimal(decimal))\
    \ > $1.compare(Decimal(decimal))\n                       ^~~~~~~\n/tmp/tmpjc0wjzx1.swift:23:55:\
    \ error: cannot find 'Decimal' in scope\n            $0.compare(Decimal(decimal))\
    \ > $1.compare(Decimal(decimal))\n                                           \
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    for num in arr {\n        let bin = String(num, radix:\
    \ 2)\n        let count = bin.count\n        if count == 1 {\n            result.insert(num,\
    \ at: 0)\n        } else {\n            let decimal = Int(bin, radix: 10)\n  \
    \          result.insert(decimal, at: 0)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpkemnzqw6.swift:15:27: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n            result.insert(decimal, at:\
    \ 0)\n                          ^\n/tmp/tmpkemnzqw6.swift:14:17: note: short-circuit\
    \ using 'guard' to exit this function early if the optional value contains 'nil'\n\
    \            let decimal = Int(bin, radix: 10)\n                ^\n          \
    \  guard                             else { return <#default value#> }\n/tmp/tmpkemnzqw6.swift:14:27:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            let decimal = Int(bin, radix: 10)\n                     \
    \     ^\n                                              ?? <#default value#>\n\
    /tmp/tmpkemnzqw6.swift:14:27: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n            let decimal = Int(bin, radix:\
    \ 10)\n                          ^\n                                         \
    \    !\n/tmp/tmpkemnzqw6.swift:15:27: note: coalesce using '??' to provide a default\
    \ when the optional value contains 'nil'\n            result.insert(decimal, at:\
    \ 0)\n                          ^\n                                  ?? <#default\
    \ value#>\n/tmp/tmpkemnzqw6.swift:15:27: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n            result.insert(decimal,\
    \ at: 0)\n                          ^\n                                 !\n"
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var sortedArr = [Int]()\n    var oneCount = 0\n    for num in arr {\n      \
    \  if num == 1 {\n            oneCount++\n        } else {\n            sortedArr.append(oneCount)\n\
    \            oneCount = 0\n        }\n    }\n    sortedArr.append(oneCount)\n\
    \    return sortedArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp8i426iap.swift:11:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3,\
    \ 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    assert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: '/tmp/tmp8lf8usk1.swift:8:1: error: missing return in global function expected
    to return ''[Int]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var arrSorted = [Int]()\n    var oneCount = 0\n    for num in arr {\n      \
    \  if num == 1 {\n            oneCount += 1\n        } else {\n            arrSorted.append(oneCount)\n\
    \            oneCount = 0\n        }\n    }\n    arrSorted.append(oneCount)\n\
    \    return arrSorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp91sxijr4/tmp91sxijr4.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f36f8686c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f36f837db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f36f837d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f36f837c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp91sxijr4                        0x0000560e5c87d604 <unavailable> + 5636

    5    libc.so.6                          0x00007f36f7e73460 __libc_start_main +
    245

    6    tmp91sxijr4                        0x0000560e5c87d1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3,\
    \ 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    assert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: '/tmp/tmp8lf8usk1.swift:8:1: error: missing return in global function expected
    to return ''[Int]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3,\
    \ 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    assert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: '/tmp/tmp8lf8usk1.swift:8:1: error: missing return in global function expected
    to return ''[Int]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3,\
    \ 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    assert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: '/tmp/tmp8lf8usk1.swift:8:1: error: missing return in global function expected
    to return ''[Int]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ let ones = arr.filter{$0}.count\n    let decimal = arr.filter{$0 > 0}.reduce(0)\
    \ {$0 + $1 }\n    return arr.sorted {\n        ones == $0 ? (decimal < $1) : (ones\
    \ < $0)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp6bt8axwe.swift:7:27: error: cannot convert value of type 'Int'\
    \ to closure result type 'Bool'\n    let ones = arr.filter{$0}.count\n       \
    \                   ^~\n"
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    var ones = 0\n    for num in arr {\n        ones +=\
    \ num\n    }\n    ones = ones / 2\n    for num in arr {\n        if num == 1 {\n\
    \            result.append(ones)\n        } else {\n            result.append(num\
    \ * 10 + ones)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpyiflc99s/tmpyiflc99s.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff5392dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff538fd2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff538fd2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff538fd17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyiflc99s                        0x0000560d975d8694 <unavailable> + 5780

    5    libc.so.6                          0x00007ff538ac8460 __libc_start_main +
    245

    6    tmpyiflc99s                        0x0000560d975d8279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var arr2 = arr.sorted()\n    var arr3 = arr2.sorted()\n    var arr4 = arr3.sorted()\n\
    \    var arr5 = arr4.sorted()\n    var arr6 = arr5.sorted()\n    var arr7 = arr6.sorted()\n\
    \    var arr8 = arr7.sorted()\n    var arr9 = arr8.sorted()\n    var arr10 = arr9.sorted()\n\
    \    var arr11 = arr10.sorted()\n    var arr12 = arr11.sorted()\n    var arr13\
    \ = arr12.sorted()\n    var arr14 = arr13.sorted()\n    var arr15 = arr14.sorted()\n\
    \    var arr16 = arr15.sorted()\n    var arr17 = arr16.sorted()\n    var arr18\
    \ = arr17.sorted()\n    var arr19 = arr18.sorted()\n    var arr20 = arr19.sorted()\n\
    \    var arr21 = arr20.sorted()\n    var arr22 = arr21.sorted()\n    var arr23\
    \ = arr22.sorted()\n    var arr24 = arr23.sorted()\n    var arr25 = arr24.sorted()\n\
    \    var arr26 = arr25.sorted()\n    var arr27 = arr26.sorted()\n    var arr28\
    \ = arr27.sorted()\n    var arr29 = arr28.sorted()\n    var arr30 = arr29.sorted()\n\
    \    var arr31 = arr30.sorted()\n    var arr32 = arr31.sorted()\n    var arr33\
    \ = arr32.sorted()\n    var arr34 = arr33.sorted()\n    var arr35 = arr34.sorted()\n\
    \    var arr36 = arr35.sorted()\n    var arr37 = arr36.sorted()\n    var arr38\
    \ = arr37.sorted()\n    var arr39 = arr38.sorted()\n    var arr40 = arr39.sorted()\n\
    \    var arr41 = arr40.sorted()\n    var arr42 = arr41.sorted()\n    var arr43\
    \ = arr42.sorted()\n    var arr44 = arr43.sorted()\n    var arr45 = arr44.sorted()\n\
    \    var arr46 = arr45.sorted()\n    var arr47 = arr46.sorted()\n    var arr48\
    \ = arr47.sorted()\n    var arr49 = arr48.sorted()\n    var arr50 = arr49.sorted()\n\
    \    var arr51 = arr50.sorted()\n    var arr52 = arr51.sorted()\n    var arr53\
    \ = arr52.sorted()\n    var arr54 = arr53.sorted()\n    var arr55 = arr54.sorted()\n\
    \    var arr56 = arr55.sorted()\n    var arr57 = arr56.sorted()\n    var arr58\
    \ = arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp_w73na8v.swift:7:9: warning: variable 'arr2' was never mutated;\
    \ consider changing to 'let' constant\n    var arr2 = arr.sorted()\n    ~~~ ^\n\
    \    let\n/tmp/tmp_w73na8v.swift:8:9: warning: variable 'arr3' was never mutated;\
    \ consider changing to 'let' constant\n    var arr3 = arr2.sorted()\n    ~~~ ^\n\
    \    let\n/tmp/tmp_w73na8v.swift:9:9: warning: variable 'arr4' was never mutated;\
    \ consider changing to 'let' constant\n    var arr4 = arr3.sorted()\n    ~~~ ^\n\
    \    let\n/tmp/tmp_w73na8v.swift:10:9: warning: variable 'arr5' was never mutated;\
    \ consider changing to 'let' constant\n    var arr5 = arr4.sorted()\n    ~~~ ^\n\
    \    let\n/tmp/tmp_w73na8v.swift:11:9: warning: variable 'arr6' was never mutated;\
    \ consider changing to 'let' constant\n    var arr6 = arr5.sorted()\n    ~~~ ^\n\
    \    let\n/tmp/tmp_w73na8v.swift:12:9: warning: variable 'arr7' was never mutated;\
    \ consider changing to 'let' constant\n    var arr7 = arr6.sorted()\n    ~~~ ^\n\
    \    let\n/tmp/tmp_w73na8v.swift:13:9: warning: variable 'arr8' was never mutated;\
    \ consider changing to 'let' constant\n    var arr8 = arr7.sorted()\n    ~~~ ^\n\
    \    let\n/tmp/tmp_w73na8v.swift:14:9: warning: variable 'arr9' was never mutated;\
    \ consider changing to 'let' constant\n    var arr9 = arr8.sorted()\n    ~~~ ^\n\
    \    let\n/tmp/tmp_w73na8v.swift:15:9: warning: variable 'arr10' was never mutated;\
    \ consider changing to 'let' constant\n    var arr10 = arr9.sorted()\n    ~~~\
    \ ^\n    let\n/tmp/tmp_w73na8v.swift:16:9: warning: variable 'arr11' was never\
    \ mutated; consider changing to 'let' constant\n    var arr11 = arr10.sorted()\n\
    \    ~~~ ^\n    let\n/tmp/tmp_w73na8v.swift:17:9: warning: variable 'arr12' was\
    \ never mutated; consider changing to 'let' constant\n    var arr12 = arr11.sorted()\n\
    \    ~~~ ^\n    let\n/tmp/tmp_w73na8v.swift:18:9: warning: variable 'arr13' was\
    \ never mutated; consider changing to 'let' constant\n    var arr13 = arr12.sorted()\n\
    \    ~~~ ^\n    let\n/tmp/tmp_w73na8v.swift:19:9: warning: variable 'arr14' was\
    \ never mutated; consider changing to 'let' constant\n    var arr14 = arr13.sorted()\n\
    \    ~~~ ^\n    let\n/tmp/tmp_w"
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    for x in arr {\n        if x != 0 {\n            result.insert(x,\
    \ at: 0)\n        }\n    }\n    result.sort(by: { (a, b) -> Bool in\n        if\
    \ a > b {\n            return true\n        }\n        return false\n    })\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpe99js8b9/tmpe99js8b9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f0bfa029c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f0bf9d20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f0bf9d20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f0bf9d1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe99js8b9                        0x000055cbd6a57684 <unavailable> + 5764

    5    libc.so.6                          0x00007f0bf9816460 __libc_start_main +
    245

    6    tmpe99js8b9                        0x000055cbd6a57269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var sortedArr = [Int]()\n    for element in arr {\n        if element == 1 {\n\
    \            sortedArr = sortedArr.sorted { $0 < $1 }\n        } else {\n    \
    \        sortedArr = sortedArr.sorted { $0 > $1 }\n        }\n    }\n    return\
    \ sortedArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpcway49n7/tmpcway49n7.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f0bf5da0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f0bf5a97b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f0bf5a97988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f0bf5a967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcway49n7                        0x0000561d36a0b624 <unavailable> + 5668

    5    libc.so.6                          0x00007f0bf558d460 __libc_start_main +
    245

    6    tmpcway49n7                        0x0000561d36a0b209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    var i = 0\n    while i < arr.count {\n        if arr[i]\
    \ == 1 {\n            result.append(i)\n        }\n        i += 1\n    }\n   \
    \ result.sortInPlace()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpg4l80dkl.swift:15:12: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n    result.sortInPlace()\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    var ones = Int()\n    var decimal = Int()\n    for\
    \ number in arr {\n        ones = number & 1\n        decimal = number >> 1\n\
    \        if ones > 0 {\n            result.append(decimal)\n        } else {\n\
    \            result.insert(decimal, at: 0)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpbzdrxjb6/tmpbzdrxjb6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f71777dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f71774d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f71774d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f71774d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbzdrxjb6                        0x0000555d00414664 <unavailable> + 5732

    5    libc.so.6                          0x00007f7176fcb460 __libc_start_main +
    245

    6    tmpbzdrxjb6                        0x0000555d00414249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    var ones = 0\n    var decimal = 0\n    for element\
    \ in arr {\n        if element == 1 {\n            ones += 1\n        } else {\n\
    \            decimal += element * pow(10, (ones - 1))\n        }\n    }\n    for\
    \ element in arr {\n        if element == 1 {\n            ones += 1\n       \
    \ } else {\n            decimal += element * pow(10, (ones - 1))\n        }\n\
    \    }\n    for element in arr {\n        if element == 1 {\n            ones\
    \ += 1\n        } else {\n            decimal += element * pow(10, (ones - 1))\n\
    \        }\n    }\n    for element in arr {\n        if element == 1 {\n     \
    \       ones += 1\n        } else {\n            decimal += element * pow(10,\
    \ (ones - 1))\n        }\n    }\n    for element in arr {\n        if element\
    \ == 1 {\n            ones += 1\n        } else {\n            decimal += element\
    \ * pow(10, (ones - 1))\n        }\n    }\n    for element in arr {\n        if\
    \ element == 1 {\n            ones += 1\n        } else {\n            decimal\
    \ += element * pow(10, (ones - 1))\n        }\n    }\n    for element in arr {\n\
    \        if element == 1 {\n            ones += 1\n        } else {\n        \
    \    decimal += element * pow(10, (ones - 1))\n        }\n    }\n    for element\
    \ in arr {\n        if element == 1 {\n            ones += 1\n        } else {\n\
    \            decimal += element * pow(10, (ones - 1))\n        }\n    }\n    for\
    \ element in arr {\n        if element == 1 {\n            ones += 1\n       \
    \ } else {\n            decimal += element * pow(10, (ones - 1))\n        }\n\
    \    }\n    for element in arr {\n        if element == 1 {\n            ones\
    \ += 1\n        } else {\n            decimal += element * pow(10, (ones - 1))\n\
    \        }\n    }\n    for element in arr {\n        if element == 1 {\n     \
    \       ones += 1\n        } else {\n            decimal += element * pow(10,\
    \ (ones - 1))\n        }\n    }\n    for element in arr {\n        if element\
    \ == 1 {\n            ones += 1\n        } else {\n            decimal += element\
    \ * pow(10, (ones - 1))\n        }\n    }\n    for element in arr {\n        if\
    \ element == 1 {\n            ones += 1\n        } else {\n            decimal\
    \ += element * pow(10, (ones - 1))\n        }\n    }\n    for element in arr {\n\
    \        if element == 1 {\n            ones += 1\n        } else {\n        \
    \    decimal += element * pow(10, (ones - 1))\n        }\n    }\n    for element\
    \ in arr {\n        if element == 1 {\n            ones += 1\n        } else {\n\
    \            decimal += element * pow(10, (ones - 1))\n        }\n    }\n    for\
    \ element in arr {\n        if element == 1 {\n            ones += 1\n       \
    \ } else {\n            \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpq1ph9tjg.swift:142:64: error: expected '}' at end of brace statement\n\
    assert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n            \
    \                                                   ^\n/tmp/tmpq1ph9tjg.swift:115:24:\
    \ note: to match this opening '{'\n    for element in arr {\n                \
    \       ^\n/tmp/tmpq1ph9tjg.swift:142:64: error: expected '}' at end of brace\
    \ statement\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\
    \                                                               ^\n/tmp/tmpq1ph9tjg.swift:6:38:\
    \ note: to match this opening '{'\nfunc sort_array(arr: [Int]) -> [Int] {\n  \
    \                                   ^\n/tmp/tmpq1ph9tjg.swift:14:34: error: cannot\
    \ find 'pow' in scope\n            decimal += element * pow(10, (ones - 1))\n\
    \                                 ^~~\n/tmp/tmpq1ph9tjg.swift:21:34: error: cannot\
    \ find 'pow' in scope\n            decimal += element * pow(10, (ones - 1))\n\
    \                                 ^~~\n/tmp/tmpq1ph9tjg.swift:28:34: error: cannot\
    \ find 'pow' in scope\n            decimal += element * pow(10, (ones - 1))\n\
    \                                 ^~~\n/tmp/tmpq1ph9tjg.swift:35:34: error: cannot\
    \ find 'pow' in scope\n            decimal += element * pow(10, (ones - 1))\n\
    \                                 ^~~\n/tmp/tmpq1ph9tjg.swift:42:34: error: cannot\
    \ find 'pow' in scope\n            decimal += element * pow(10, (ones - 1))\n\
    \                                 ^~~\n/tmp/tmpq1ph9tjg.swift:49:34: error: cannot\
    \ find 'pow' in scope\n            decimal += element * pow(10, (ones - 1))\n\
    \                                 ^~~\n/tmp/tmpq1ph9tjg.swift:56:34: error: cannot\
    \ find 'pow' in scope\n            decimal += element * pow(10, (ones - 1))\n\
    \                                 ^~~\n/tmp/tmpq1ph9tjg.swift:63:34: error: cannot\
    \ find 'pow' in scope\n            decimal += element * pow(10, (ones - 1))\n\
    \                                 ^~~\n/tmp/tmpq1ph9tjg.swift:70:34: error: cannot\
    \ find 'pow' in scope\n            decimal += element * pow(10, (ones - 1))\n\
    \                                 ^~"
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    for value in arr {\n        var count = 0\n      \
    \  for _ in 0..<8 {\n            if value & 1 != 0 {\n                count +=\
    \ 1\n            }\n            value >>= 1\n        }\n        result.append((count\
    \ << 1) + value)\n    }\n    result.sort()\n    return result.map { $0 >> 1 }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpvlep6v21.swift:14:19: error: left side of mutating operator isn't\
    \ mutable: 'value' is a 'let' constant\n            value >>= 1\n            ~~~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    var ones = 0\n    var decimal = 0\n    for element\
    \ in arr {\n        if element == 1 {\n            ones += 1\n        } else {\n\
    \            decimal += element / 2\n        }\n    }\n    if ones == 0 {\n  \
    \      result.sort()\n    } else {\n        result.sort(by: {\n            if\
    \ $0 < decimal {\n                return true\n            } else if $0 > decimal\
    \ {\n                return false\n            } else {\n                return\
    \ $0 < $1 // descending\n            }\n        })\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpue1iiate/tmpue1iiate.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007fe9bcbf3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007fe9bc8eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007fe9bc8ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007fe9bc8e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpue1iiate                        0x000055d70e3ae7d4 <unavailable> + 6100

    5    libc.so.6                          0x00007fe9bc3e0460 __libc_start_main +
    245

    6    tmpue1iiate                        0x000055d70e3ae3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    var ones = 0\n    var decimal = 0\n    for n in arr\
    \ {\n        if n == 1 {\n            ones += 1\n        } else {\n          \
    \  decimal += n\n        }\n    }\n    if ones > 0 {\n        result.sort(by:\
    \ {\n            $0.decimalValue > $1.decimalValue\n        })\n    } else {\n\
    \        result.sort(by: {\n            $0.decimalValue < $1.decimalValue\n  \
    \      })\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpvl667sb3.swift:19:16: error: value of type 'Int' has no member\
    \ 'decimalValue'\n            $0.decimalValue > $1.decimalValue\n            ~~\
    \ ^~~~~~~~~~~~\n/tmp/tmpvl667sb3.swift:19:34: error: value of type 'Int' has no\
    \ member 'decimalValue'\n            $0.decimalValue > $1.decimalValue\n     \
    \                         ~~ ^~~~~~~~~~~~\n/tmp/tmpvl667sb3.swift:23:16: error:\
    \ value of type 'Int' has no member 'decimalValue'\n            $0.decimalValue\
    \ < $1.decimalValue\n            ~~ ^~~~~~~~~~~~\n/tmp/tmpvl667sb3.swift:23:34:\
    \ error: value of type 'Int' has no member 'decimalValue'\n            $0.decimalValue\
    \ < $1.decimalValue\n                              ~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    var ones = 0\n    for num in arr {\n        if num\
    \ == 1 {\n            ones += 1\n        } else {\n            if ones > 0 {\n\
    \                result.append((ones - 1) * 10)\n            }\n            ones\
    \ = 0\n        }\n        result.append(num)\n    }\n    if ones > 0 {\n     \
    \   result.append((ones - 1) * 10)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpamhzd0h3/tmpamhzd0h3.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007feb14255c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007feb13f4cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007feb13f4c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007feb13f4b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpamhzd0h3                        0x0000556de66ea604 <unavailable> + 5636

    5    libc.so.6                          0x00007feb13a42460 __libc_start_main +
    245

    6    tmpamhzd0h3                        0x0000556de66ea1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    var ones = Int()\n    var decimal = Int()\n    for\
    \ number in arr {\n        if number == 1 {\n            ones += 1\n        }\
    \ else {\n            decimal += number\n        }\n    }\n    if ones == arr.count\
    \ {\n        result.sort()\n    } else {\n        result.sort(by: {\n        \
    \    if $0 < $1 {\n                return true\n            } else {\n       \
    \         return false\n            }\n        })\n    }\n    for number in result\
    \ {\n        if number == decimal {\n            return result\n        }\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp247b10rw/tmp247b10rw.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f2eb1d42c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f2eb1a39b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f2eb1a39988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f2eb1a387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp247b10rw                        0x0000563b279d97a4 <unavailable> + 6052

    5    libc.so.6                          0x00007f2eb152f460 __libc_start_main +
    245

    6    tmp247b10rw                        0x0000563b279d9389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var arr2 = arr.sorted()\n    if arr2.count > 1 {\n        arr2 = arr2.sorted\
    \ { $0.isOne() ? $0.decimalValue > $1.decimalValue : $0.decimalValue < $1.decimalValue\
    \ }\n    }\n    return arr2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpp0v8vm8j.swift:9:33: error: value of type 'Int' has no member 'isOne'\n\
    \        arr2 = arr2.sorted { $0.isOne() ? $0.decimalValue > $1.decimalValue :\
    \ $0.decimalValue < $1.decimalValue }\n                             ~~ ^~~~~\n\
    /tmp/tmpp0v8vm8j.swift:9:46: error: value of type 'Int' has no member 'decimalValue'\n\
    \        arr2 = arr2.sorted { $0.isOne() ? $0.decimalValue > $1.decimalValue :\
    \ $0.decimalValue < $1.decimalValue }\n                                      \
    \    ~~ ^~~~~~~~~~~~\n/tmp/tmpp0v8vm8j.swift:9:64: error: value of type 'Int'\
    \ has no member 'decimalValue'\n        arr2 = arr2.sorted { $0.isOne() ? $0.decimalValue\
    \ > $1.decimalValue : $0.decimalValue < $1.decimalValue }\n                  \
    \                                          ~~ ^~~~~~~~~~~~\n/tmp/tmpp0v8vm8j.swift:9:82:\
    \ error: value of type 'Int' has no member 'decimalValue'\n        arr2 = arr2.sorted\
    \ { $0.isOne() ? $0.decimalValue > $1.decimalValue : $0.decimalValue < $1.decimalValue\
    \ }\n                                                                        \
    \      ~~ ^~~~~~~~~~~~\n/tmp/tmpp0v8vm8j.swift:9:100: error: value of type 'Int'\
    \ has no member 'decimalValue'\n        arr2 = arr2.sorted { $0.isOne() ? $0.decimalValue\
    \ > $1.decimalValue : $0.decimalValue < $1.decimalValue }\n                  \
    \                                                                            \
    \  ~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    var ones = 0\n    for num in arr {\n        if num\
    \ == 1 {\n            ones += 1\n        } else {\n            ones = 0\n    \
    \    }\n        if ones == 0 {\n            result.insert(num, at: 0)\n      \
    \  }\n    }\n    return result.sorted(by: { $0.compare($1) == .orderedAscending\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3,\
    \ 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    assert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpdx2830da.swift:19:35: error: value of type 'Int' has no member\
    \ 'compare'\n    return result.sorted(by: { $0.compare($1) == .orderedAscending\
    \ })\n                               ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ let ones = arr.filter{$0==1}\n    let zeros = arr.filter{$0==0}\n    let onesCount\
    \ = ones.count\n    let zerosCount = zeros.count\n    let onesDecimal = onesCount*10\n\
    \    let zerosDecimal = zerosCount*10\n    let onesDecimalString = String(onesDecimal)\n\
    \    let zerosDecimalString = String(zerosDecimal)\n    let onesDecimalStringArray\
    \ = onesDecimalString.characters\n    let zerosDecimalStringArray = zerosDecimalString.characters\n\
    \    let onesDecimalStringArrayCount = onesDecimalString.count\n    let zerosDecimalStringArrayCount\
    \ = zerosDecimalString.count\n    let onesDecimalStringArrayCount = onesDecimalString.count\n\
    \    let zerosDecimalStringArrayCount = zerosDecimalString.count\n    let onesDecimalStringArrayCount\
    \ = onesDecimalString.count\n    let zerosDecimalStringArrayCount = zerosDecimalString.count\n\
    \    let onesDecimalStringArrayCount = onesDecimalString.count\n    let zerosDecimalStringArrayCount\
    \ = zerosDecimalString.count\n    let onesDecimalStringArrayCount = onesDecimalString.count\n\
    \    let zerosDecimalStringArrayCount = zerosDecimalString.count\n    let onesDecimalStringArrayCount\
    \ = onesDecimalString.count\n    let zerosDecimalStringArrayCount = zerosDecimalString.count\n\
    \    let onesDecimalStringArrayCount = onesDecimalString.count\n    let zerosDecimalStringArrayCount\
    \ = zerosDecimalString.count\n    let onesDecimalStringArrayCount = onesDecimalString.count\n\
    \    let zerosDecimalStringArrayCount = zerosDecimalString.count\n    let onesDecimalStringArrayCount\
    \ = onesDecimalString.count\n    let zerosDecimalStringArrayCount = zerosDecimalString.count\n\
    \    let onesDecimalStringArrayCount = onesDecimalString.count\n    let zerosDecimalStringArrayCount\
    \ = zerosDecimalString.count\n    let onesDecimalStringArrayCount = onesDecimalString.count\n\
    \    let zerosDecimalStringArrayCount = zerosDecimalString.count\n    let onesDecimalStringArrayCount\
    \ = onesDecimalString.count\n    let zerosDecimalStringArrayCount = zerosDecimalString.count\n\
    \    let onesDecimalStringArrayCount = onesDecimalString.count\n    let zerosDecimalStringArrayCount\
    \ = zerosDecimalString.count\n    let onesDecimalStringArrayCount = onesDecimalString.count\n\
    \    let zerosDecimalStringArrayCount = zerosDecimalString.count\n    let onesDecimalStringArrayCount\
    \ = onesDecimalString.count\n    let zerosDecimalStringArrayCount = zerosDecimalString.count\n\
    \    let onesDecimalStringArrayCount = onesDecimalString.count\n    let zerosDecimalStringArrayCount\
    \ = zerosDecimalString.count\n    let onesDecimalStringArrayCount = onesDecimalString.count\n\
    \    let zerosDecimalStringArrayCount = zerosDecimalString.count\n    let onesDecimalStringArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpxzi3dp0i.swift:15:52: error: 'characters' is unavailable: Please\
    \ use String directly\n    let onesDecimalStringArray = onesDecimalString.characters\n\
    \                                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpxzi3dp0i.swift:16:54: error: 'characters'\
    \ is unavailable: Please use String directly\n    let zerosDecimalStringArray\
    \ = zerosDecimalString.characters\n                                          \
    \           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpxzi3dp0i.swift:19:9: error: invalid redeclaration of 'onesDecimalStringArrayCount'\n\
    \    let onesDecimalStringArrayCount = onesDecimalString.count\n        ^\n/tmp/tmpxzi3dp0i.swift:17:9:\
    \ note: 'onesDecimalStringArrayCount' previously declared here\n    let onesDecimalStringArrayCount\
    \ = onesDecimalString.count\n        ^\n/tmp/tmpxzi3dp0i.swift:20:9: error: invalid\
    \ redeclaration of 'zerosDecimalStringArrayCount'\n    let zerosDecimalStringArrayCount\
    \ = zerosDecimalString.count\n        ^\n/tmp/tmpxzi3dp0i.swift:18:9: note: 'zerosDecimalStringArrayCount'\
    \ previously declared here\n    let zerosDecimalStringArrayCount = zerosDecimalString.count\n\
    \        ^\n/tmp/tmpxzi3dp0i.swift:21:9: error: invalid redeclaration of 'onesDecimalStringArrayCount'\n\
    \    let onesDecimalStringArrayCount = onesDecimalString.count\n        ^\n/tmp/tmpxzi3dp0i.swift:17:9:\
    \ note: 'onesDecimalStringArrayCount' previously declared here\n    let onesDecimalStringArrayCount\
    \ = onesDecimalString.count\n        ^\n/tmp/tmpxzi3dp0i.swift:22:9: error: invalid\
    \ redeclaration of 'zerosDecimalStringArrayCount'\n    let zerosDecimalStringArrayCount\
    \ = zerosDecimalString.count\n        ^\n/tmp/tmpxzi3dp0i.swift:18:9: note: 'zerosDecimalStringArrayCount'\
    \ previously declared here\n    let zerosDecimalStringArrayCount = zerosDecimalString.count\n\
    \        ^\n/tmp/tmpxzi3dp0i.swift:23:9: error: invali"
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3,\
    \ 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    assert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: '/tmp/tmp8lf8usk1.swift:8:1: error: missing return in global function expected
    to return ''[Int]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    for elem in arr {\n        if elem == 0 {\n      \
    \      continue\n        }\n        var count = 0\n        var i = 0\n       \
    \ while i < arr.count {\n            if arr[i] == elem {\n                count\
    \ += 1\n                i += 1\n            } else {\n                break\n\
    \            }\n        }\n        if count == 0 {\n            result.insert(elem,\
    \ at: 0)\n        } else {\n            result.insert(elem, at: result.count -\
    \ 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'Swift/Array.swift:419: Fatal error: Negative Array index is out of range

    Current stack trace:

    0    libswiftCore.so                    0x00007fc20f1c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007fc20eebd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00007fc20eebd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00007fc20eebd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00007fc20eebcbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00007fc20eea6196 <unavailable> + 1339798

    6    libswiftCore.so                    0x00007fc20eeaa020 Array.insert(_:at:)
    + 80

    7    tmpdqq5j56j                        0x0000558350362318 <unavailable> + 8984

    8    tmpdqq5j56j                        0x00005583503615c4 <unavailable> + 5572

    9    libc.so.6                          0x00007fc20e9b3460 __libc_start_main +
    245

    10   tmpdqq5j56j                        0x0000558350361299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    for number in arr {\n        let bin = String(number,\
    \ radix: 2)\n        let count = bin.count\n        if count == 1 {\n        \
    \    result.insert(number, at: 0)\n        } else {\n            let decimal =\
    \ Int(bin, radix: 10)\n            result.insert(decimal, at: 0)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp5pr018z7.swift:15:27: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n            result.insert(decimal, at:\
    \ 0)\n                          ^\n/tmp/tmp5pr018z7.swift:14:17: note: short-circuit\
    \ using 'guard' to exit this function early if the optional value contains 'nil'\n\
    \            let decimal = Int(bin, radix: 10)\n                ^\n          \
    \  guard                             else { return <#default value#> }\n/tmp/tmp5pr018z7.swift:14:27:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            let decimal = Int(bin, radix: 10)\n                     \
    \     ^\n                                              ?? <#default value#>\n\
    /tmp/tmp5pr018z7.swift:14:27: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n            let decimal = Int(bin, radix:\
    \ 10)\n                          ^\n                                         \
    \    !\n/tmp/tmp5pr018z7.swift:15:27: note: coalesce using '??' to provide a default\
    \ when the optional value contains 'nil'\n            result.insert(decimal, at:\
    \ 0)\n                          ^\n                                  ?? <#default\
    \ value#>\n/tmp/tmp5pr018z7.swift:15:27: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n            result.insert(decimal,\
    \ at: 0)\n                          ^\n                                 !\n"
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    for x in arr {\n        let bin = binary(x)\n    \
    \    let decimal = decimal(bin)\n        if decimal < 0 {\n            decimal\
    \ = -decimal\n        }\n        if decimal > result.count {\n            result.append(x)\n\
    \        } else {\n            result[decimal] = x\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp5r20jxx0.swift:9:19: error: cannot find 'binary' in scope\n   \
    \     let bin = binary(x)\n                  ^~~~~~\n/tmp/tmp5r20jxx0.swift:10:23:\
    \ error: use of local variable 'decimal' before its declaration\n        let decimal\
    \ = decimal(bin)\n                      ^\n/tmp/tmp5r20jxx0.swift:10:13: note:\
    \ 'decimal' declared here\n        let decimal = decimal(bin)\n            ^\n"
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    for num in arr {\n        let bin = String(num, radix:\
    \ 2)\n        let count = bin.count\n        if count == 1 {\n            result.insert(num,\
    \ at: 0)\n        } else {\n            let decimal = Int(bin, radix: 10)\n  \
    \          result.insert(decimal, at: 0)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpkemnzqw6.swift:15:27: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n            result.insert(decimal, at:\
    \ 0)\n                          ^\n/tmp/tmpkemnzqw6.swift:14:17: note: short-circuit\
    \ using 'guard' to exit this function early if the optional value contains 'nil'\n\
    \            let decimal = Int(bin, radix: 10)\n                ^\n          \
    \  guard                             else { return <#default value#> }\n/tmp/tmpkemnzqw6.swift:14:27:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            let decimal = Int(bin, radix: 10)\n                     \
    \     ^\n                                              ?? <#default value#>\n\
    /tmp/tmpkemnzqw6.swift:14:27: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n            let decimal = Int(bin, radix:\
    \ 10)\n                          ^\n                                         \
    \    !\n/tmp/tmpkemnzqw6.swift:15:27: note: coalesce using '??' to provide a default\
    \ when the optional value contains 'nil'\n            result.insert(decimal, at:\
    \ 0)\n                          ^\n                                  ?? <#default\
    \ value#>\n/tmp/tmpkemnzqw6.swift:15:27: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n            result.insert(decimal,\
    \ at: 0)\n                          ^\n                                 !\n"
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    var ones = 0\n    var decimal = 0\n    for num in\
    \ arr {\n        ones += num\n        decimal += num * Int(pow(2.0, Double(bitCount(num))))\n\
    \    }\n    if ones < decimal {\n        result = arr.sorted()\n    } else {\n\
    \        result = arr.sorted(by: {$0.decimalValue > $1.decimalValue})\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpez6x8x0c.swift:12:30: error: cannot find 'pow' in scope\n     \
    \   decimal += num * Int(pow(2.0, Double(bitCount(num))))\n                  \
    \           ^~~\n/tmp/tmpez6x8x0c.swift:12:46: error: cannot find 'bitCount' in\
    \ scope\n        decimal += num * Int(pow(2.0, Double(bitCount(num))))\n     \
    \                                        ^~~~~~~~\n/tmp/tmpez6x8x0c.swift:17:37:\
    \ error: value of type 'Int' has no member 'decimalValue'\n        result = arr.sorted(by:\
    \ {$0.decimalValue > $1.decimalValue})\n                                 ~~ ^~~~~~~~~~~~\n\
    /tmp/tmpez6x8x0c.swift:17:55: error: value of type 'Int' has no member 'decimalValue'\n\
    \        result = arr.sorted(by: {$0.decimalValue > $1.decimalValue})\n      \
    \                                             ~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ let ones = arr.filter{$0.isOne}\n    let decimals = arr.filter{$0.isZero}\n\
    \    let sortedOnes = ones.sorted()\n    let sortedDecimals = decimals.sorted()\n\
    \    return sortedOnes + sortedDecimals\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpmn9svzir.swift:7:30: error: value of type 'Int' has no member 'isOne'\n\
    \    let ones = arr.filter{$0.isOne}\n                          ~~ ^~~~~\n/tmp/tmpmn9svzir.swift:8:34:\
    \ error: value of type 'Int' has no member 'isZero'\n    let decimals = arr.filter{$0.isZero}\n\
    \                              ~~ ^~~~~~\n/tmp/tmpmn9svzir.swift:11:23: error:\
    \ cannot convert return expression of type 'String' to return type '[Int]'\n \
    \   return sortedOnes + sortedDecimals\n           ~~~~~~~~~~~^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ let ones = arr.filter{$0.isOne}\n    let decimals = arr.filter{$0.isZero}\n\
    \    let sortedOnes = ones.sorted()\n    let sortedDecimals = decimals.sorted()\n\
    \    return sortedOnes + sortedDecimals\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpmn9svzir.swift:7:30: error: value of type 'Int' has no member 'isOne'\n\
    \    let ones = arr.filter{$0.isOne}\n                          ~~ ^~~~~\n/tmp/tmpmn9svzir.swift:8:34:\
    \ error: value of type 'Int' has no member 'isZero'\n    let decimals = arr.filter{$0.isZero}\n\
    \                              ~~ ^~~~~~\n/tmp/tmpmn9svzir.swift:11:23: error:\
    \ cannot convert return expression of type 'String' to return type '[Int]'\n \
    \   return sortedOnes + sortedDecimals\n           ~~~~~~~~~~~^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    for x in arr {\n        let bin = x.bin()\n      \
    \  if bin.count > 1 {\n            result.insert(x, at: result.index(of: bin.last!))\n\
    \        } else {\n            result.insert(x, at: result.index(of: bin.first!))\n\
    \        }\n    }\n    return result.sorted(by: { $0.bin().count < $1.bin().count\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3,\
    \ 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    assert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpkjc5jyy5.swift:9:21: error: value of type 'Int' has no member 'bin'\n\
    \        let bin = x.bin()\n                  ~ ^~~\n/tmp/tmpkjc5jyy5.swift:11:41:\
    \ error: value of optional type 'Array<Int>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<Int>.Index' (aka 'Int')\n           \
    \ result.insert(x, at: result.index(of: bin.last!))\n                        \
    \                ^\n/tmp/tmpkjc5jyy5.swift:11:41: note: coalesce using '??' to\
    \ provide a default when the optional value contains 'nil'\n            result.insert(x,\
    \ at: result.index(of: bin.last!))\n                                        ^\n\
    \                                                             ?? <#default value#>\n\
    /tmp/tmpkjc5jyy5.swift:11:41: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n            result.insert(x, at: result.index(of:\
    \ bin.last!))\n                                        ^\n                   \
    \                                         !\n/tmp/tmpkjc5jyy5.swift:13:41: error:\
    \ value of optional type 'Array<Int>.Index?' (aka 'Optional<Int>') must be unwrapped\
    \ to a value of type 'Array<Int>.Index' (aka 'Int')\n            result.insert(x,\
    \ at: result.index(of: bin.first!))\n                                        ^\n\
    /tmp/tmpkjc5jyy5.swift:13:41: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n            result.insert(x, at: result.index(of:\
    \ bin.first!))\n                                        ^\n                  \
    \                                            ?? <#default value#>\n/tmp/tmpkjc5jyy5.swift:13:41:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            result.insert(x, at: result.index(of: bin.first!))\n    \
    \                                    ^\n                                     \
    \                        !\n/tmp/tmpkjc5jyy5.swift:16:35: error: value of type\
    \ 'Int' has no member 'bin'\n    return result.sorted(by: { $0.bin().count < $1.bin().count\
    \ })\n                               ~~ ^~~\n/tmp/tmpkjc5jyy5.swift"
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    var ones = 0\n    var decimal = 0\n    for num in\
    \ arr {\n        if num == 1 {\n            ones += 1\n        } else {\n    \
    \        decimal += num\n        }\n    }\n    if ones == arr.count {\n      \
    \  result = arr.sorted()\n    } else {\n        result = arr.sorted().reversed()\n\
    \    }\n    for num in result {\n        if num > decimal {\n            return\
    \ result\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmptm03g74l/tmptm03g74l.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff64afd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff64acccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff64accc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff64accb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptm03g74l                        0x0000556f077ba704 <unavailable> + 5892

    5    libc.so.6                          0x00007ff64a7c2460 __libc_start_main +
    245

    6    tmptm03g74l                        0x0000556f077ba2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3,\
    \ 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    assert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: '/tmp/tmp8lf8usk1.swift:8:1: error: missing return in global function expected
    to return ''[Int]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    var oneCount = 0\n    var decimalCount = 0\n    for\
    \ value in arr {\n        if value == 1 {\n            oneCount += 1\n       \
    \ } else {\n            decimalCount += value\n        }\n    }\n    if oneCount\
    \ > decimalCount {\n        result = sort_array(arr)\n    }\n    for value in\
    \ arr {\n        if value == 1 {\n            result.append(oneCount)\n      \
    \  } else {\n            result.append(decimalCount)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpe9t_h_ca.swift:18:29: error: missing argument label 'arr:' in call\n\
    \        result = sort_array(arr)\n                            ^\n           \
    \                 arr: \n"
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3,\
    \ 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    assert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: '/tmp/tmp8lf8usk1.swift:8:1: error: missing return in global function expected
    to return ''[Int]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    for x in arr {\n        let bin = x.bin()\n      \
    \  if bin.count > result.count {\n            result = bin\n        }\n    }\n\
    \    for x in arr {\n        let bin = x.bin()\n        if bin.count == result.count\
    \ {\n            let decimal = x.decimal()\n            if decimal > result[bin.count]\
    \ {\n                result[bin.count] = decimal\n            }\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp5ihwl_gi.swift:9:21: error: value of type 'Int' has no member 'bin'\n\
    \        let bin = x.bin()\n                  ~ ^~~\n/tmp/tmp5ihwl_gi.swift:15:21:\
    \ error: value of type 'Int' has no member 'bin'\n        let bin = x.bin()\n\
    \                  ~ ^~~\n/tmp/tmp5ihwl_gi.swift:17:29: error: value of type 'Int'\
    \ has no member 'decimal'\n            let decimal = x.decimal()\n           \
    \               ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    \n    for element in arr {\n        var count = 0\n\
    \        for _ in 0..<8 {\n            if element & 1 == 1 {\n               \
    \ count += 1\n            }\n            element >>= 1\n        }\n        \n\
    \        if count == 0 {\n            result.append(element)\n        }\n    }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpmi1y1sbo.swift:15:21: error: left side of mutating operator isn't\
    \ mutable: 'element' is a 'let' constant\n            element >>= 1\n        \
    \    ~~~~~~~ ^\n"
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var sortedArr = [Int]()\n    var sortedArrCount = [Int]()\n    var sortedArrDecimal\
    \ = [Int]()\n    for i in arr {\n        if sortedArrCount.contains(i) {\n   \
    \         sortedArr.append(i)\n            sortedArrCount.append(i)\n        \
    \    sortedArrDecimal.append(i)\n        } else {\n            sortedArrCount.append(i)\n\
    \            sortedArrDecimal.append(i)\n        }\n    }\n    sortedArr.reverse()\n\
    \    for i in sortedArr {\n        if sortedArrCount.contains(i) {\n         \
    \   sortedArr.remove(i)\n            sortedArrCount.remove(i)\n            sortedArrDecimal.remove(i)\n\
    \        }\n    }\n    return sortedArr\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpvxrilx7q.swift:23:23: error: no exact matches in call to instance\
    \ method 'remove'\n            sortedArr.remove(i)\n                      ^\n\
    Swift.Array:10:37: note: incorrect labels for candidate (have: '(_:)', expected:\
    \ '(at:)')\n    @inlinable public mutating func remove(at index: Int) -> Element\n\
    \                                    ^\nSwift.RangeReplaceableCollection:9:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at position: Self.Index) -> Self.Element\n\
    \                                    ^\n/tmp/tmpvxrilx7q.swift:24:28: error: no\
    \ exact matches in call to instance method 'remove'\n            sortedArrCount.remove(i)\n\
    \                           ^\nSwift.Array:10:37: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(at:)')\n    @inlinable public mutating func remove(at\
    \ index: Int) -> Element\n                                    ^\nSwift.RangeReplaceableCollection:9:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at position: Self.Index) -> Self.Element\n\
    \                                    ^\n/tmp/tmpvxrilx7q.swift:25:30: error: no\
    \ exact matches in call to instance method 'remove'\n            sortedArrDecimal.remove(i)\n\
    \                             ^\nSwift.Array:10:37: note: incorrect labels for\
    \ candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public mutating\
    \ func remove(at index: Int) -> Element\n                                    ^\n\
    Swift.RangeReplaceableCollection:9:37: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(at:)')\n    @inlinable public mutating func remove(at position:\
    \ Self.Index) -> Self.Element\n                                    ^\n"
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    var ones = 0\n    var dec = 0\n    for x in arr {\n\
    \        ones += x\n        dec += x * x\n    }\n    if ones < dec {\n       \
    \ result = sort_array(arr)\n    }\n    else {\n        result = arr\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp3dj_hf79.swift:15:29: error: missing argument label 'arr:' in call\n\
    \        result = sort_array(arr)\n                            ^\n           \
    \                 arr: \n"
  stdout: ''
  timestamp: 1660053397
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ let len = arr.count\n    var result = [Int](repeating: 0, count: len)\n    var\
    \ ones = 0\n    for i in 0..<len {\n        if arr[i] == 1 {\n            ones\
    \ += 1\n        } else {\n            result[ones] = arr[i]\n            ones\
    \ += 1\n        }\n    }\n    if ones == 0 {\n        return result\n    }\n \
    \   var result2 = []\n    for i in 0..<len {\n        if arr[i] == 1 {\n     \
    \       result2.append(result[ones - 1])\n            ones += 1\n        } else\
    \ {\n            result2.append(arr[i])\n        }\n    }\n    return result2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpbjre18hh.swift:21:19: error: empty collection literal requires\
    \ an explicit type\n    var result2 = []\n                  ^~\n/tmp/tmpbjre18hh.swift:30:12:\
    \ error: cannot convert return expression of type '[Any]' to return type '[Int]'\n\
    \    return result2\n           ^\n/tmp/tmpbjre18hh.swift:30:12: note: arguments\
    \ to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n\
    \    return result2\n           ^\n"
  stdout: ''
  timestamp: 1660053397
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ let ones = arr.filter{$0==1}\n    let decimals = arr.filter{$0==0}\n    let\
    \ sortedOnes = ones.sorted()\n    let sortedDecimals = decimals.sorted()\n   \
    \ return sortedOnes + sortedDecimals\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpqws4uuk5/tmpqws4uuk5.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f5390e5fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f5390b56b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f5390b56988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f5390b557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqws4uuk5                        0x0000557d1213a5a4 <unavailable> + 5540

    5    libc.so.6                          0x00007f539064c460 __libc_start_main +
    245

    6    tmpqws4uuk5                        0x0000557d1213a189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660053397
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    var ones = 0\n    var dec = 0\n    for n in arr {\n\
    \        if n & 1 == 1 {\n            ones += 1\n        } else {\n          \
    \  dec += n\n        }\n    }\n    if ones > 0 {\n        result.sort()\n    }\
    \ else {\n        result.sort(by: {$0 < $1})\n    }\n    for n in result {\n \
    \       n += dec\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpmyyh02rt.swift:23:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n += dec\n        ~ ^\n"
  stdout: ''
  timestamp: 1660053397
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var arrCopy = arr\n    \n    for _ in 0..<arr.count {\n        let ones = arrCopy.filter{$0\
    \ == 1}.count\n        \n        if ones > arrCopy.count {\n            arrCopy\
    \ = arrCopy.sorted{ $0 < $1 }\n        } else if ones < arrCopy.count {\n    \
    \        arrCopy = arrCopy.sorted{ $0 > $1 }\n        } else {\n            arrCopy\
    \ = arrCopy.sorted{ $0 < $1 }\n        }\n    }\n    \n    return arrCopy\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpklgakwzq/tmpklgakwzq.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f406ad1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f406aa14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f406aa14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f406aa137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpklgakwzq                        0x000055fcb3695704 <unavailable> + 5892

    5    libc.so.6                          0x00007f406a50a460 __libc_start_main +
    245

    6    tmpklgakwzq                        0x000055fcb36952e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660053397
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ let ones = arr.filter{ $0 > 0 }.count\n    let decimal = arr.filter{ $0 > 0\
    \ }.sorted{ $0 < $1 }.first!\n    return arr.filter{ $0 > 0 }.sorted{ $0 < $1\
    \ }.first!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp4ja4cgkr.swift:9:56: error: cannot convert return expression of\
    \ type 'Int' to return type '[Int]'\n    return arr.filter{ $0 > 0 }.sorted{ $0\
    \ < $1 }.first!\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n"
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    var ones = 0\n    var decimal = 0\n    for element\
    \ in arr {\n        if element == 1 {\n            ones += 1\n        } else {\n\
    \            decimal += element / 2\n        }\n    }\n    if ones > 0 {\n   \
    \     result.sort(by: {\n            $0.decimalValue > $1.decimalValue\n     \
    \   })\n    } else {\n        result.sort(by: {\n            $0.decimalValue <\
    \ $1.decimalValue\n        })\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmphsk77we0.swift:19:16: error: value of type 'Int' has no member\
    \ 'decimalValue'\n            $0.decimalValue > $1.decimalValue\n            ~~\
    \ ^~~~~~~~~~~~\n/tmp/tmphsk77we0.swift:19:34: error: value of type 'Int' has no\
    \ member 'decimalValue'\n            $0.decimalValue > $1.decimalValue\n     \
    \                         ~~ ^~~~~~~~~~~~\n/tmp/tmphsk77we0.swift:23:16: error:\
    \ value of type 'Int' has no member 'decimalValue'\n            $0.decimalValue\
    \ < $1.decimalValue\n            ~~ ^~~~~~~~~~~~\n/tmp/tmphsk77we0.swift:23:34:\
    \ error: value of type 'Int' has no member 'decimalValue'\n            $0.decimalValue\
    \ < $1.decimalValue\n                              ~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660053397
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3,\
    \ 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    assert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: '/tmp/tmp8lf8usk1.swift:8:1: error: missing return in global function expected
    to return ''[Int]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ let ones = arr.filter{$0==1}\n    let decimals = arr.filter{$0==0}\n    \n \
    \   let sortedOnes = ones.sorted()\n    let sortedDecimals = decimals.sorted()\n\
    \    \n    return sortedOnes + sortedDecimals\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmprittaf5r/tmprittaf5r.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f8b54768c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f8b5445fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f8b5445f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f8b5445e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprittaf5r                        0x000055abf86d45a4 <unavailable> + 5540

    5    libc.so.6                          0x00007f8b53f55460 __libc_start_main +
    245

    6    tmprittaf5r                        0x000055abf86d4189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660053397
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    var ones = 0\n    var decimal = 0\n    for element\
    \ in arr {\n        if element == 1 {\n            ones += 1\n        } else {\n\
    \            decimal += element * 2\n        }\n    }\n    if ones > 0 {\n   \
    \     result.sort()\n    } else {\n        result.sort(by: {$0.decimalValue >\
    \ $1.decimalValue})\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmph8kqje4r.swift:20:29: error: value of type 'Int' has no member\
    \ 'decimalValue'\n        result.sort(by: {$0.decimalValue > $1.decimalValue})\n\
    \                         ~~ ^~~~~~~~~~~~\n/tmp/tmph8kqje4r.swift:20:47: error:\
    \ value of type 'Int' has no member 'decimalValue'\n        result.sort(by: {$0.decimalValue\
    \ > $1.decimalValue})\n                                           ~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660053397
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    for x in arr {\n        let bin = x.bin()\n      \
    \  let count = bin.count\n        if count == 0 {\n            result.append(x)\n\
    \        } else {\n            let decimal = bin.decimal()\n            if decimal\
    \ == 0 {\n                result.append(x)\n            } else {\n           \
    \     result.insert(x, at: result.index(of: decimal))\n            }\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpl04qdjfx.swift:9:21: error: value of type 'Int' has no member 'bin'\n\
    \        let bin = x.bin()\n                  ~ ^~~\n/tmp/tmpl04qdjfx.swift:18:45:\
    \ error: value of optional type 'Array<Int>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<Int>.Index' (aka 'Int')\n           \
    \     result.insert(x, at: result.index(of: decimal))\n                      \
    \                      ^\n/tmp/tmpl04qdjfx.swift:18:45: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n              \
    \  result.insert(x, at: result.index(of: decimal))\n                         \
    \                   ^\n                                                      \
    \         ?? <#default value#>\n/tmp/tmpl04qdjfx.swift:18:45: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        \
    \        result.insert(x, at: result.index(of: decimal))\n                   \
    \                         ^\n                                                \
    \              !\n"
  stdout: ''
  timestamp: 1660053397
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    for x in arr {\n        let bin = x.bin()\n      \
    \  let decimal = x.decimal()\n        if bin.count > decimal.count {\n       \
    \     result.insert(decimal, at: 0)\n        } else {\n            result.insert(bin,\
    \ at: 0)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpb10ettq8.swift:9:21: error: value of type 'Int' has no member 'bin'\n\
    \        let bin = x.bin()\n                  ~ ^~~\n/tmp/tmpb10ettq8.swift:10:25:\
    \ error: value of type 'Int' has no member 'decimal'\n        let decimal = x.decimal()\n\
    \                      ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660053397
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    var ones = 0\n    for n in arr {\n        if n ==\
    \ 1 {\n            ones += 1\n        } else {\n            ones = 0\n       \
    \ }\n        if ones == 0 {\n            result.append(n)\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpr2tlxjg6/tmpr2tlxjg6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f2d9b288c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f2d9af7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f2d9af7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f2d9af7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr2tlxjg6                        0x000055c0d6d56604 <unavailable> + 5636

    5    libc.so.6                          0x00007f2d9aa75460 __libc_start_main +
    245

    6    tmpr2tlxjg6                        0x000055c0d6d561e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660053397
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    var ones = 0\n    for num in arr {\n        if num\
    \ == 1 {\n            ones += 1\n        } else {\n            if ones > 0 {\n\
    \                result.append((ones / 10).rounded(.towardZero))\n           \
    \     ones = 0\n            }\n            result.append(num)\n        }\n   \
    \ }\n    if ones > 0 {\n        result.append((ones / 10).rounded(.towardZero))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp8c96v4vy.swift:14:43: error: value of type 'Int' has no member\
    \ 'rounded'\n                result.append((ones / 10).rounded(.towardZero))\n\
    \                              ~~~~~~~~~~~ ^~~~~~~\n/tmp/tmp8c96v4vy.swift:14:52:\
    \ error: cannot infer contextual base in reference to member 'towardZero'\n  \
    \              result.append((ones / 10).rounded(.towardZero))\n             \
    \                                     ~^~~~~~~~~~\n/tmp/tmp8c96v4vy.swift:21:35:\
    \ error: value of type 'Int' has no member 'rounded'\n        result.append((ones\
    \ / 10).rounded(.towardZero))\n                      ~~~~~~~~~~~ ^~~~~~~\n/tmp/tmp8c96v4vy.swift:21:44:\
    \ error: cannot infer contextual base in reference to member 'towardZero'\n  \
    \      result.append((ones / 10).rounded(.towardZero))\n                     \
    \                     ~^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660053397
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    for element in arr {\n        if element == 0 {\n\
    \            continue\n        }\n        let index = result.index(of: element)\n\
    \        if index != nil {\n            result[index] = element + result[index!]\n\
    \        } else {\n            result.append(element)\n        }\n    }\n    return\
    \ result.sorted(by: >)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp6pzx2in7.swift:12:28: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        let index = result.index(of: element)\n      \
    \                     ^\n/tmp/tmp6pzx2in7.swift:12:28: note: use 'firstIndex(of:)'\
    \ instead\n        let index = result.index(of: element)\n                   \
    \        ^~~~~\n                           firstIndex\n/tmp/tmp6pzx2in7.swift:14:20:\
    \ error: value of optional type 'Array<Int>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<Int>.Index' (aka 'Int')\n           \
    \ result[index] = element + result[index!]\n                   ^\n/tmp/tmp6pzx2in7.swift:14:20:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            result[index] = element + result[index!]\n              \
    \     ^\n                         ?? <#default value#>\n/tmp/tmp6pzx2in7.swift:14:20:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            result[index] = element + result[index!]\n              \
    \     ^\n                        !\n"
  stdout: ''
  timestamp: 1660053397
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3,\
    \ 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    assert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: '/tmp/tmp8lf8usk1.swift:8:1: error: missing return in global function expected
    to return ''[Int]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ let ones = arr.filter{$0}.count\n    let decimal = arr.filter{$0 > 0}.reduce(0)\
    \ {$0 + $1} / ones\n    return arr.sorted{$0.decimalValue < $1.decimalValue}\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpi8xb7juk.swift:7:27: error: cannot convert value of type 'Int'\
    \ to closure result type 'Bool'\n    let ones = arr.filter{$0}.count\n       \
    \                   ^~\n/tmp/tmpi8xb7juk.swift:9:26: error: value of type 'Int'\
    \ has no member 'decimalValue'\n    return arr.sorted{$0.decimalValue < $1.decimalValue}\n\
    \                      ~~ ^~~~~~~~~~~~\n/tmp/tmpi8xb7juk.swift:9:44: error: value\
    \ of type 'Int' has no member 'decimalValue'\n    return arr.sorted{$0.decimalValue\
    \ < $1.decimalValue}\n                                        ~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660053397
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    for num in arr {\n        if num == 0 {\n        \
    \    continue\n        }\n        let ones = num.trailingZeroBits()\n        if\
    \ ones == 0 {\n            result.insert(num, at: 0)\n        } else {\n     \
    \       let decimal = num.decimalValue\n            if decimal == 0 {\n      \
    \          result.insert(num, at: 0)\n            } else {\n                result.insert(num,\
    \ at: 1)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmpoycgednf.swift:12:24: error: value of type 'Int' has no member\
    \ 'trailingZeroBits'\n        let ones = num.trailingZeroBits()\n            \
    \       ~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpoycgednf.swift:16:31: error: value of type\
    \ 'Int' has no member 'decimalValue'\n            let decimal = num.decimalValue\n\
    \                          ~~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660053397
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = arr\n    result.sort(by: { (a, b) -> Bool in\n        let ones\
    \ = a & 0b1111\n        let tens = a & 0b111111\n        let hundreds = a & 0b1111111\n\
    \        let thousands = a & 0b11111111\n        let ten_thousands = a & 0b111111111\n\
    \        let hundred_thousands = a & 0b1111111111\n        let thousand_hundreds\
    \ = a & 0b11111111111\n        let thousand_thousands = a & 0b111111111111\n \
    \       let thousand_ten_thousands = a & 0b1111111111111\n        let thousand_hundred_thousands\
    \ = a & 0b11111111111111\n        let thousand_thousand_hundreds = a & 0b111111111111111\n\
    \        let thousand_thousand_thousands = a & 0b1111111111111111 // this one\
    \ is the most complicated\n\n        if ones == 0 {\n            if tens == 0\
    \ {\n                if hundreds == 0 {\n                    if thousands == 0\
    \ {\n                        if ten_thousands == 0 {\n                       \
    \     if hundred_thousands == 0 {\n                                if thousand_hundreds\
    \ == 0 {\n                                    if thousand_thousands == 0 {\n \
    \                                       if thousand_ten_thousands == 0 {\n   \
    \                                         if thousand_hundred_thousands == 0 {\n\
    \                                                if thousand_thousand_hundreds\
    \ == 0 {\n                                                    if thousand_thousand_thousands\
    \ == 0 {\n                                                        if thousand_thousand_ten_thousands\
    \ == 0 {\n                                                            return a\
    \ < b\n                                                        }\n           \
    \                                         }\n                                \
    \                }\n                                            }\n          \
    \                              }\n                                    }\n    \
    \                            }\n                            }\n              \
    \          }\n                    }\n                }\n            }\n      \
    \  }\n        return a < b\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpmo9vn2we.swift:34:60: error: cannot find 'thousand_thousand_ten_thousands'\
    \ in scope\n                                                        if thousand_thousand_ten_thousands\
    \ == 0 {\n                                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660053397
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    var ones = 0\n    for x in arr {\n        if x ==\
    \ 1 {\n            ones += 1\n        } else {\n            if ones == 0 {\n \
    \               result.append(x)\n            } else {\n                ones =\
    \ ones - 1\n                result.append(x / 10)\n                result.append(x\
    \ % 10)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpt9owxvpu/tmpt9owxvpu.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f264aa4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f264a742b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f264a742988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f264a7417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt9owxvpu                        0x00005568a59df694 <unavailable> + 5780

    5    libc.so.6                          0x00007f264a238460 __libc_start_main +
    245

    6    tmpt9owxvpu                        0x00005568a59df279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660053397
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    var ones = 0\n    var dec = 0\n    for num in arr\
    \ {\n        if num == 1 {\n            ones += 1\n        } else {\n        \
    \    dec += num\n        }\n    }\n    if ones < dec {\n        for num in arr\
    \ {\n            if num == 1 {\n                ones += 1\n            } else\
    \ {\n                dec -= num\n            }\n        }\n    }\n    for num\
    \ in arr {\n        if num == 1 {\n            ones += 1\n        } else {\n \
    \           dec += num\n        }\n    }\n    for num in arr {\n        if num\
    \ == 1 {\n            ones += 1\n        } else {\n            dec -= num\n  \
    \      }\n    }\n    for num in arr {\n        if num == 1 {\n            ones\
    \ += 1\n        } else {\n            dec += num\n        }\n    }\n    for num\
    \ in arr {\n        if num == 1 {\n            ones += 1\n        } else {\n \
    \           dec -= num\n        }\n    }\n    for num in arr {\n        if num\
    \ == 1 {\n            ones += 1\n        } else {\n            dec += num\n  \
    \      }\n    }\n    for num in arr {\n        if num == 1 {\n            ones\
    \ += 1\n        } else {\n            dec -= num\n        }\n    }\n    for num\
    \ in arr {\n        if num == 1 {\n            ones += 1\n        } else {\n \
    \           dec += num\n        }\n    }\n    for num in arr {\n        if num\
    \ == 1 {\n            ones += 1\n        } else {\n            dec -= num\n  \
    \      }\n    }\n    for num in arr {\n        if num == 1 {\n            ones\
    \ += 1\n        } else {\n            dec += num\n        }\n    }\n    for num\
    \ in arr {\n        if num == 1 {\n            ones += 1\n        } else {\n \
    \           dec -= num\n        }\n    }\n    for num in arr {\n        if num\
    \ == 1 {\n            ones += 1\n        } else {\n            dec += num\n  \
    \      }\n    }\n    for num in arr {\n        if num == 1 {\n            ones\
    \ += 1\n        } else {\n            dec -= num\n        }\n    }\n    for num\
    \ in arr {\n        if num == 1 {\n            ones += 1\n        } else {\n \
    \           dec += num\n        }\n    }\n    for num in arr {\n        if num\
    \ == 1 {\n            ones += 1\n        } else {\n            dec -= num\n  \
    \      }\n    }\n    for num in arr {\n        if num == 1 {\n            ones\
    \ += 1\n        } else {\n            dec += num\n        }\n    }\n    for num\
    \ in arr {\n        if num == 1 {\n            ones += 1\n        } else {\n \
    \           dec -= num\n        }\n    }\n    for num\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp7ncvpm9r.swift:138:12: error: expected 'in' after for-each pattern\n\
    \    for num\n           ^\n/tmp/tmp7ncvpm9r.swift:138:12: error: expected Sequence\
    \ expression for for-each loop\n    for num\n           ^\n/tmp/tmp7ncvpm9r.swift:138:12:\
    \ error: expected '{' to start the body of for-each loop\n    for num\n      \
    \     ^\n"
  stdout: ''
  timestamp: 1660053397
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var arrCopy = arr\n    \n    for i in 0..<arrCopy.count {\n        if arrCopy[i]\
    \ == 0 {\n            arrCopy.removeAtIndex(i)\n        }\n    }\n    \n    arrCopy.sortInPlace()\n\
    \    \n    return arrCopy\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmprqr_djif.swift:11:21: error: value of type '[Int]' has no member\
    \ 'removeAtIndex'\n            arrCopy.removeAtIndex(i)\n            ~~~~~~~ ^~~~~~~~~~~~~\n\
    /tmp/tmprqr_djif.swift:15:13: error: value of type '[Int]' has no member 'sortInPlace'\n\
    \    arrCopy.sortInPlace()\n    ~~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660053397
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var sortedArray = [Int]()\n    var oneCount = 0\n    for element in arr {\n\
    \        if element == 1 {\n            oneCount++\n        } else {\n       \
    \     sortedArray.append(oneCount)\n            oneCount = 0\n        }\n    }\n\
    \    sortedArray.append(oneCount)\n    return sortedArray\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmpj6130qa5.swift:11:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1660053397
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var sortedArray = [Int]()\n    for x in arr {\n        if x != 0 {\n       \
    \     sortedArray.append(x)\n        }\n    }\n    sortedArray = sortedArray.sorted(by:\
    \ {$0.isOdd})\n    return sortedArray\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpnlxjgspi.swift:13:42: error: contextual closure type '(Int, Int)\
    \ throws -> Bool' expects 2 arguments, but 1 was used in closure body\n    sortedArray\
    \ = sortedArray.sorted(by: {$0.isOdd})\n                                     \
    \    ^\n/tmp/tmpnlxjgspi.swift:13:46: error: value of type 'Int' has no member\
    \ 'isOdd'\n    sortedArray = sortedArray.sorted(by: {$0.isOdd})\n            \
    \                              ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660053397
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    var ones = Int()\n    for value in arr {\n       \
    \ ones = value & 1\n        result += [ones]\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp3du8e1wh/tmp3du8e1wh.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f3702bc9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f37028c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f37028c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f37028bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3du8e1wh                        0x0000559289b2c724 <unavailable> + 5924

    5    libc.so.6                          0x00007f37023b6460 __libc_start_main +
    245

    6    tmp3du8e1wh                        0x0000559289b2c309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660053397
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    var ones = 0\n    var decimal = 0\n    for num in\
    \ arr {\n        if num == 1 {\n            ones += 1\n        } else {\n    \
    \        decimal += num\n        }\n    }\n    if ones == arr.count {\n      \
    \  result.sort(by: {$0.0 < $1.0})\n    } else {\n        result.sort(by: {$0.0\
    \ < $1.0 || ($0.0 < $1.0 && $0.1 == $1.0)})\n    }\n    for num in result {\n\
    \        if num == 1 {\n            ones += 1\n        } else {\n            decimal\
    \ -= num\n        }\n    }\n    for _ in 0..<ones {\n        result.insert(decimal,\
    \ at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpowivwzvt.swift:18:29: error: value of type 'Int' has no member\
    \ '0'\n        result.sort(by: {$0.0 < $1.0})\n                         ~~ ^\n\
    /tmp/tmpowivwzvt.swift:18:36: error: value of type 'Int' has no member '0'\n \
    \       result.sort(by: {$0.0 < $1.0})\n                                ~~ ^\n\
    /tmp/tmpowivwzvt.swift:20:29: error: value of type 'Int' has no member '0'\n \
    \       result.sort(by: {$0.0 < $1.0 || ($0.0 < $1.0 && $0.1 == $1.0)})\n    \
    \                     ~~ ^\n/tmp/tmpowivwzvt.swift:20:36: error: value of type\
    \ 'Int' has no member '0'\n        result.sort(by: {$0.0 < $1.0 || ($0.0 < $1.0\
    \ && $0.1 == $1.0)})\n                                ~~ ^\n/tmp/tmpowivwzvt.swift:20:45:\
    \ error: value of type 'Int' has no member '0'\n        result.sort(by: {$0.0\
    \ < $1.0 || ($0.0 < $1.0 && $0.1 == $1.0)})\n                                \
    \         ~~ ^\n/tmp/tmpowivwzvt.swift:20:52: error: value of type 'Int' has no\
    \ member '0'\n        result.sort(by: {$0.0 < $1.0 || ($0.0 < $1.0 && $0.1 ==\
    \ $1.0)})\n                                                ~~ ^\n/tmp/tmpowivwzvt.swift:20:60:\
    \ error: value of type 'Int' has no member '1'\n        result.sort(by: {$0.0\
    \ < $1.0 || ($0.0 < $1.0 && $0.1 == $1.0)})\n                                \
    \                        ~~ ^\n/tmp/tmpowivwzvt.swift:20:68: error: value of type\
    \ 'Int' has no member '0'\n        result.sort(by: {$0.0 < $1.0 || ($0.0 < $1.0\
    \ && $0.1 == $1.0)})\n                                                       \
    \         ~~ ^\n"
  stdout: ''
  timestamp: 1660053397
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    var ones = 0\n    for num in arr {\n        if num\
    \ == 1 {\n            ones += 1\n        } else {\n            if ones == 0 {\n\
    \                result.append(num)\n            } else {\n                if\
    \ num < result[0] {\n                    result[0] = num\n                } else\
    \ {\n                    result.append(num)\n                }\n            }\n\
    \            ones = 0\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00007f154f60cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f154f303561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00007f154f303286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00007f154f30313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00007f154f302bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00007f154f8b0e83 <unavailable> + 188035

    6    tmpjk4qzj67                        0x00005577cc28a229 <unavailable> + 8745

    7    tmpjk4qzj67                        0x00005577cc2895b4 <unavailable> + 5556

    8    libc.so.6                          0x00007f154edf9460 __libc_start_main +
    245

    9    tmpjk4qzj67                        0x00005577cc289289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660053397
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ let ones = arr.filter{$0 == 1}\n    let decimals = arr.filter{$0 != 1}\n   \
    \ let sortedOnes = ones.sorted()\n    let sortedDecimals = decimals.sorted()\n\
    \    return sortedOnes + sortedDecimals\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpfw7j5iax/tmpfw7j5iax.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007fcf29e56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007fcf29b4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007fcf29b4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007fcf29b4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfw7j5iax                        0x000055d3fbe815a4 <unavailable> + 5540

    5    libc.so.6                          0x00007fcf29643460 __libc_start_main +
    245

    6    tmpfw7j5iax                        0x000055d3fbe81189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var sortedArray = [Int]()\n    var sortedArrayCount = [Int]()\n    for value\
    \ in arr {\n        if sortedArrayCount.contains(value) {\n            sortedArray[sortedArrayCount.index(of:\
    \ value)] = value\n            sortedArrayCount[sortedArrayCount.index(of: value)]\
    \ += 1\n        } else {\n            sortedArray.append(value)\n            sortedArrayCount.append(1)\n\
    \        }\n    }\n    return sortedArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpx2yoworz.swift:11:42: error: value of optional type 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<Int>.Index'\
    \ (aka 'Int')\n            sortedArray[sortedArrayCount.index(of: value)] = value\n\
    \                                         ^\n/tmp/tmpx2yoworz.swift:11:42: note:\
    \ coalesce using '??' to provide a default when the optional value contains 'nil'\n\
    \            sortedArray[sortedArrayCount.index(of: value)] = value\n        \
    \                                 ^\n                                        \
    \                  ?? <#default value#>\n/tmp/tmpx2yoworz.swift:11:42: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        \
    \    sortedArray[sortedArrayCount.index(of: value)] = value\n                \
    \                         ^\n                                                \
    \         !\n/tmp/tmpx2yoworz.swift:12:47: error: value of optional type 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<Int>.Index'\
    \ (aka 'Int')\n            sortedArrayCount[sortedArrayCount.index(of: value)]\
    \ += 1\n                                              ^\n/tmp/tmpx2yoworz.swift:12:47:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            sortedArrayCount[sortedArrayCount.index(of: value)] += 1\n\
    \                                              ^\n                           \
    \                                    ?? <#default value#>\n/tmp/tmpx2yoworz.swift:12:47:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            sortedArrayCount[sortedArrayCount.index(of: value)] += 1\n\
    \                                              ^\n                           \
    \                                   !\n"
  stdout: ''
  timestamp: 1660053397
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ let ones = arr.filter{ $0 > 0 }\n    let decimals = arr.filter{ $0 < 0 }\n \
    \   let sortedOnes = ones.sorted()\n    let sortedDecimals = decimals.sorted()\n\
    \    return sortedOnes + sortedDecimals\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmprzprm_4j/tmprzprm_4j.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f328d3e8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f328d0dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f328d0df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f328d0de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprzprm_4j                        0x000056524f0305a4 <unavailable> + 5540

    5    libc.so.6                          0x00007f328cbd5460 __libc_start_main +
    245

    6    tmprzprm_4j                        0x000056524f030189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660053397
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    for num in arr {\n        let bin = String(num, radix:\
    \ 2)\n        let count = bin.count\n        let decimal = Int(bin, radix: 10)\n\
    \        if count == 1 {\n            result.insert(decimal, at: 0)\n        }\
    \ else {\n            let index = result.index(of: decimal)\n            if index\
    \ == nil {\n                result.insert(decimal, at: 0)\n            } else\
    \ {\n                result[index!] = decimal\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp3n36tf4z.swift:13:27: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n            result.insert(decimal, at:\
    \ 0)\n                          ^\n/tmp/tmp3n36tf4z.swift:13:27: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \         result.insert(decimal, at: 0)\n                          ^\n       \
    \                           ?? <#default value#>\n/tmp/tmp3n36tf4z.swift:13:27:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            result.insert(decimal, at: 0)\n                         \
    \ ^\n                                 !\n/tmp/tmp3n36tf4z.swift:15:42: error:\
    \ value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n \
    \           let index = result.index(of: decimal)\n                          \
    \               ^\n/tmp/tmp3n36tf4z.swift:15:42: note: coalesce using '??' to\
    \ provide a default when the optional value contains 'nil'\n            let index\
    \ = result.index(of: decimal)\n                                         ^\n  \
    \                                               ?? <#default value#>\n/tmp/tmp3n36tf4z.swift:15:42:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            let index = result.index(of: decimal)\n                 \
    \                        ^\n                                                !\n\
    /tmp/tmp3n36tf4z.swift:17:31: error: value of optional type 'Int?' must be unwrapped\
    \ to a value of type 'Int'\n                result.insert(decimal, at: 0)\n  \
    \                            ^\n/tmp/tmp3n36tf4z.swift:17:31: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n         \
    \       result.insert(decimal, at: 0)\n                              ^\n     \
    \                                 ?? <#default value#>\n/tmp/tmp3n36tf4z.swift:17:31:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n                result.insert(decimal, at: 0)\n                     \
    \         ^\n                                 "
  stdout: ''
  timestamp: 1660053397
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    var ones = 0\n    for x in arr {\n        if x ==\
    \ 1 {\n            ones += 1\n        } else {\n            if ones > 0 {\n  \
    \              result.insert(result.count - ones, x)\n                ones = 0\n\
    \            } else {\n                result.insert(result.count, x)\n      \
    \      }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpbbgs9d17.swift:14:24: error: no exact matches in call to instance\
    \ method 'insert'\n                result.insert(result.count - ones, x)\n   \
    \                    ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n/tmp/tmpbbgs9d17.swift:17:24: error: no exact matches in call\
    \ to instance method 'insert'\n                result.insert(result.count, x)\n\
    \                       ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1660053397
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    for n in arr {\n        let bin = n.binary(radix:\
    \ 2)\n        let decimal = n.decimalValue()\n        if bin.count > decimal.count\
    \ {\n            result.insert(decimal, at: 0)\n        } else {\n           \
    \ result.insert(bin, at: 0)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp3t6wav3n.swift:9:21: error: value of type 'Int' has no member 'binary'\n\
    \        let bin = n.binary(radix: 2)\n                  ~ ^~~~~~\n/tmp/tmp3t6wav3n.swift:10:25:\
    \ error: value of type 'Int' has no member 'decimalValue'\n        let decimal\
    \ = n.decimalValue()\n                      ~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660053397
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3,\
    \ 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    assert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: '/tmp/tmp8lf8usk1.swift:8:1: error: missing return in global function expected
    to return ''[Int]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    var ones = 0\n    var decimal = 0\n    for element\
    \ in arr {\n        if element == 1 {\n            ones += 1\n        } else {\n\
    \            decimal += element / 2\n        }\n    }\n    if ones > 0 {\n   \
    \     result.sort(by: {\n            $0.compare(Decimal(decimal)) < $1.compare(Decimal(decimal))\n\
    \        })\n    } else {\n        result.sort(by: {\n            $0.compare(Decimal(decimal))\
    \ > $1.compare(Decimal(decimal))\n        })\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpd7e7poj_.swift:19:24: error: cannot find 'Decimal' in scope\n \
    \           $0.compare(Decimal(decimal)) < $1.compare(Decimal(decimal))\n    \
    \                   ^~~~~~~\n/tmp/tmpd7e7poj_.swift:19:55: error: cannot find\
    \ 'Decimal' in scope\n            $0.compare(Decimal(decimal)) < $1.compare(Decimal(decimal))\n\
    \                                                      ^~~~~~~\n/tmp/tmpd7e7poj_.swift:23:24:\
    \ error: cannot find 'Decimal' in scope\n            $0.compare(Decimal(decimal))\
    \ > $1.compare(Decimal(decimal))\n                       ^~~~~~~\n/tmp/tmpd7e7poj_.swift:23:55:\
    \ error: cannot find 'Decimal' in scope\n            $0.compare(Decimal(decimal))\
    \ > $1.compare(Decimal(decimal))\n                                           \
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ let ones = arr.filter{$0}.count\n    let decimal = arr.filter{$0 > 0}.reduce(0)\
    \ {$0 + $1} / ones\n    return arr.sorted { $0 < $1 || $1 == $1 && $0 < decimal\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3,\
    \ 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    assert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpp_6oeey6.swift:7:27: error: cannot convert value of type 'Int'\
    \ to closure result type 'Bool'\n    let ones = arr.filter{$0}.count\n       \
    \                   ^~\n"
  stdout: ''
  timestamp: 1660053397
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var sortedArray = arr\n    sortedArray = sortedArray.sorted(by: { (a, b) ->\
    \ Bool in\n        let onesCount = a & 0b1111\n        let decimalCount = a >>\
    \ 4\n        if onesCount == 0 {\n            return decimalCount < b\n      \
    \  } else {\n            return onesCount < b\n        }\n    })\n    return sortedArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpz9qy4w8p/tmpz9qy4w8p.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f06d7a8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f06d7784b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f06d7784988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f06d77837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9qy4w8p                        0x00005638f1a6a454 <unavailable> + 5204

    5    libc.so.6                          0x00007f06d727a460 __libc_start_main +
    245

    6    tmpz9qy4w8p                        0x00005638f1a6a039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660053397
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    var oneCount = 0\n    for value in arr {\n       \
    \ if value == 1 {\n            oneCount++\n        } else {\n            if oneCount\
    \ > 0 {\n                result.append((oneCount - 1) * 10 + value)\n        \
    \        oneCount = 0\n            } else {\n                result.insert(value,\
    \ at: 0)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmpb483zi88.swift:11:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1660053397
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    var ones = 0\n    var decimal = 0\n    for n in arr\
    \ {\n        ones += n\n        decimal += n * n\n    }\n    result.sortInPlace()\n\
    \    for n in arr {\n        if ones == 0 {\n            result.insert(decimal,\
    \ at: 0)\n            break\n        }\n        ones -= 1\n        decimal -=\
    \ n * n\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpigl9wo9r.swift:14:12: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n    result.sortInPlace()\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660053397
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ let len = arr.count\n    let ones = arr.filter{$0&1 == 1}.count\n    let decimal\
    \ = arr.filter{$0&1 == 0}\n    let decimalLen = decimal.count\n    let decimalSum\
    \ = decimal.map{$0}.sum()\n    let decimalSumLen = decimalSum.count\n    let decimalSum\
    \ = decimalSum.map{$0}.sum()\n    let decimalSumLen = decimalSum.count\n    let\
    \ decimalSum = decimalSum.map{$0}.sum()\n    let decimalSumLen = decimalSum.count\n\
    \    let decimalSum = decimalSum.map{$0}.sum()\n    let decimalSumLen = decimalSum.count\n\
    \    let decimalSum = decimalSum.map{$0}.sum()\n    let decimalSumLen = decimalSum.count\n\
    \    let decimalSum = decimalSum.map{$0}.sum()\n    let decimalSumLen = decimalSum.count\n\
    \    let decimalSum = decimalSum.map{$0}.sum()\n    let decimalSumLen = decimalSum.count\n\
    \    let decimalSum = decimalSum.map{$0}.sum()\n    let decimalSumLen = decimalSum.count\n\
    \    let decimalSum = decimalSum.map{$0}.sum()\n    let decimalSumLen = decimalSum.count\n\
    \    let decimalSum = decimalSum.map{$0}.sum()\n    let decimalSumLen = decimalSum.count\n\
    \    let decimalSum = decimalSum.map{$0}.sum()\n    let decimalSumLen = decimalSum.count\n\
    \    let decimalSum = decimalSum.map{$0}.sum()\n    let decimalSumLen = decimalSum.count\n\
    \    let decimalSum = decimalSum.map{$0}.sum()\n    let decimalSumLen = decimalSum.count\n\
    \    let decimalSum = decimalSum.map{$0}.sum()\n    let decimalSumLen = decimalSum.count\n\
    \    let decimalSum = decimalSum.map{$0}.sum()\n    let decimalSumLen = decimalSum.count\n\
    \    let decimalSum = decimalSum.map{$0}.sum()\n    let decimalSumLen = decimalSum.count\n\
    \    let decimalSum = decimalSum.map{$0}.sum()\n    let decimalSumLen = decimalSum.count\n\
    \    let decimalSum = decimalSum.map{$0}.sum()\n    let decimalSumLen = decimalSum.count\n\
    \    let decimalSum = decimalSum.map{$0}.sum()\n    let decimalSumLen = decimalSum.count\n\
    \    let decimalSum = decimalSum.map{$0}.sum()\n    let decimalSumLen = decimalSum.count\n\
    \    let decimalSum = decimalSum.map{$0}.sum()\n    let decimalSum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpii1exy6y.swift:11:38: error: value of type '[Int]' has no member\
    \ 'sum'\n    let decimalSum = decimal.map{$0}.sum()\n                     ~~~~~~~~~~~~~~~\
    \ ^~~\n/tmp/tmpii1exy6y.swift:52:9: error: type annotation missing in pattern\n\
    \    let decimalSum\n        ^\n"
  stdout: ''
  timestamp: 1660053397
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = arr\n    for i in 0..<arr.count {\n        let ones = arr[i].binCount()\n\
    \        if ones > 0 {\n            result = sort_array_by_decimal(arr, i, ones)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp7tfeuaym.swift:9:27: error: value of type 'Int' has no member 'binCount'\n\
    \        let ones = arr[i].binCount()\n                   ~~~~~~ ^~~~~~~~\n/tmp/tmp7tfeuaym.swift:11:22:\
    \ error: cannot find 'sort_array_by_decimal' in scope\n            result = sort_array_by_decimal(arr,\
    \ i, ones)\n                     ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660053397
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    var ones = 0\n    for n in arr {\n        if n ==\
    \ 1 {\n            ones += 1\n        } else {\n            ones = 0\n       \
    \ }\n        if ones == 0 {\n            result.append(n)\n        }\n    }\n\
    \    return result.sort()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp63r0waap.swift:19:19: error: cannot convert return expression of\
    \ type '()' to return type '[Int]'\n    return result.sort()\n           ~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660053397
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ let len = arr.count\n    var sortedArr = [Int](repeating: 0, count: len)\n \
    \   \n    for i in 0..<len {\n        let ones = arr[i].binCount()\n        sortedArr[i]\
    \ = ones\n    }\n    \n    sortedArr = sortedArr.sorted(by: { $0 < $1 })\n   \
    \ \n    for i in 0..<len {\n        let ones = arr[i].binCount()\n        sortedArr[i]\
    \ = ones\n    }\n    \n    return sortedArr\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmptzju_yoc.swift:11:27: error: value of type 'Int' has no member\
    \ 'binCount'\n        let ones = arr[i].binCount()\n                   ~~~~~~\
    \ ^~~~~~~~\n/tmp/tmptzju_yoc.swift:18:27: error: value of type 'Int' has no member\
    \ 'binCount'\n        let ones = arr[i].binCount()\n                   ~~~~~~\
    \ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660053397
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3,\
    \ 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    assert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: '/tmp/tmp8lf8usk1.swift:8:1: error: missing return in global function expected
    to return ''[Int]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    for x in arr {\n        let bin = x.bin()\n      \
    \  let decimal = bin.decimal()\n        if result.count < decimal {\n        \
    \    result.append(x)\n        } else {\n            result.insert(x, at: result.index(of:\
    \ x))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpgh4n4lwc.swift:9:21: error: value of type 'Int' has no member 'bin'\n\
    \        let bin = x.bin()\n                  ~ ^~~\n/tmp/tmpgh4n4lwc.swift:14:41:\
    \ error: value of optional type 'Array<Int>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<Int>.Index' (aka 'Int')\n           \
    \ result.insert(x, at: result.index(of: x))\n                                \
    \        ^\n/tmp/tmpgh4n4lwc.swift:14:41: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n            result.insert(x,\
    \ at: result.index(of: x))\n                                        ^\n      \
    \                                               ?? <#default value#>\n/tmp/tmpgh4n4lwc.swift:14:41:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            result.insert(x, at: result.index(of: x))\n             \
    \                           ^\n                                              \
    \      !\n"
  stdout: ''
  timestamp: 1660053397
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var sortedArr = [Int]()\n    for num in arr {\n        let ones = num.countOnes()\n\
    \        if ones > 0 {\n            sortedArr.append(num)\n        } else {\n\
    \            sortedArr.append(num.decimalValue())\n        }\n    }\n    return\
    \ sortedArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpk0kclc5o.swift:9:24: error: value of type 'Int' has no member 'countOnes'\n\
    \        let ones = num.countOnes()\n                   ~~~ ^~~~~~~~~\n/tmp/tmpk0kclc5o.swift:13:34:\
    \ error: value of type 'Int' has no member 'decimalValue'\n            sortedArr.append(num.decimalValue())\n\
    \                             ~~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660053397
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    \n    for elem in arr {\n        if elem == 0 {\n\
    \            continue\n        }\n        \n        let index = arr.index(of:\
    \ elem)\n        \n        if index == arr.end-1 {\n            result.append(elem)\n\
    \            continue\n        }\n        \n        let ones = arr.suffix(from:\
    \ index).map({ $0 })\n        \n        if ones.contains(0) {\n            result.append(elem)\n\
    \            continue\n        }\n        \n        let decimal = arr.suffix(from:\
    \ index).reduce(0) { $0 + $1 }\n        \n        result.append(decimal)\n   \
    \ }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpobvuee9o.swift:14:25: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        let index = arr.index(of: elem)\n            \
    \            ^\n/tmp/tmpobvuee9o.swift:14:25: note: use 'firstIndex(of:)' instead\n\
    \        let index = arr.index(of: elem)\n                        ^~~~~\n    \
    \                    firstIndex\n/tmp/tmpobvuee9o.swift:16:25: error: value of\
    \ type '[Int]' has no member 'end'\n        if index == arr.end-1 {\n        \
    \            ~~~ ^~~\n/tmp/tmpobvuee9o.swift:21:37: error: value of optional type\
    \ 'Array<Int>.Index?' (aka 'Optional<Int>') must be unwrapped to a value of type\
    \ 'Array<Int>.Index' (aka 'Int')\n        let ones = arr.suffix(from: index).map({\
    \ $0 })\n                                    ^\n/tmp/tmpobvuee9o.swift:21:37:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        let ones = arr.suffix(from: index).map({ $0 })\n            \
    \                        ^\n                                          ?? <#default\
    \ value#>\n/tmp/tmpobvuee9o.swift:21:37: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n        let ones = arr.suffix(from:\
    \ index).map({ $0 })\n                                    ^\n                \
    \                         !\n/tmp/tmpobvuee9o.swift:28:40: error: value of optional\
    \ type 'Array<Int>.Index?' (aka 'Optional<Int>') must be unwrapped to a value\
    \ of type 'Array<Int>.Index' (aka 'Int')\n        let decimal = arr.suffix(from:\
    \ index).reduce(0) { $0 + $1 }\n                                       ^\n/tmp/tmpobvuee9o.swift:28:40:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        let decimal = arr.suffix(from: index).reduce(0) { $0 + $1 }\n\
    \                                       ^\n                                  \
    \           ?? <#default value#>\n/tmp/tmpobvuee9o.swift:28:40: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        let\
    \ decimal = arr.suffix(from: index).reduce(0) { $0 + $1 }\n                  \
    \                   "
  stdout: ''
  timestamp: 1660053397
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ let ones = arr.filter{$0 > 0}\n    let decimals = arr.filter{$0 == 0}\n    let\
    \ sortedOnes = ones.sorted()\n    let sortedDecimals = decimals.sorted()\n   \
    \ let sortedArray = sortedOnes + sortedDecimals\n    return sortedArray\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp2fsf7wvd/tmp2fsf7wvd.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f4f84258c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f4f83f4fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f4f83f4f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f4f83f4e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2fsf7wvd                        0x000055858a6695a4 <unavailable> + 5540

    5    libc.so.6                          0x00007f4f83a45460 __libc_start_main +
    245

    6    tmp2fsf7wvd                        0x000055858a669189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660053397
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3,\
    \ 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    assert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: '/tmp/tmp8lf8usk1.swift:8:1: error: missing return in global function expected
    to return ''[Int]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3,\
    \ 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    assert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: '/tmp/tmp8lf8usk1.swift:8:1: error: missing return in global function expected
    to return ''[Int]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    var ones = 0\n    for x in arr {\n        if x ==\
    \ 1 {\n            ones += 1\n        } else {\n            if ones > 0 {\n  \
    \              result.insert(Int(ones), at: 0)\n                ones = 0\n   \
    \         }\n            result.insert(x, at: 0)\n        }\n    }\n    if ones\
    \ > 0 {\n        result.insert(Int(ones), at: 0)\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmphcnwn415/tmphcnwn415.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007fc6a9c18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007fc6a990fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007fc6a990f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007fc6a990e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphcnwn415                        0x000055891777d744 <unavailable> + 5956

    5    libc.so.6                          0x00007fc6a9405460 __libc_start_main +
    245

    6    tmphcnwn415                        0x000055891777d329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660053397
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3,\
    \ 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    assert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: '/tmp/tmp8lf8usk1.swift:8:1: error: missing return in global function expected
    to return ''[Int]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    var oneCount = [Int]()\n    for x in arr {\n     \
    \   if x == 1 {\n            oneCount[x] = oneCount[x] + 1\n        } else {\n\
    \            oneCount[x] = 0\n        }\n    }\n    for x in oneCount {\n    \
    \    if x == 0 {\n            result.append(x)\n        }\n    }\n    for x in\
    \ oneCount {\n        if x != 0 {\n            result.append(x / 10)\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00007ffa96b0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ffa96803561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00007ffa96803286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00007ffa9680313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00007ffa96802bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00007ffa96db0e83 <unavailable> + 188035

    6    tmp0ma6vxo7                        0x000055985e4c72d7 <unavailable> + 8919

    7    tmp0ma6vxo7                        0x000055985e4c6654 <unavailable> + 5716

    8    libc.so.6                          0x00007ffa962f9460 __libc_start_main +
    245

    9    tmp0ma6vxo7                        0x000055985e4c6329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660053397
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var arr2 = arr.sorted()\n    arr2.reverse()\n    return arr2\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmp202ctmc_/tmp202ctmc_.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007fa33b677c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007fa33b36eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007fa33b36e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007fa33b36d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp202ctmc_                        0x000055ab07920564 <unavailable> + 5476

    5    libc.so.6                          0x00007fa33ae64460 __libc_start_main +
    245

    6    tmp202ctmc_                        0x000055ab07920149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660053397
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var sortedArray = [Int]()\n    var oneCount = 0\n    for element in arr {\n\
    \        if element == 1 {\n            oneCount++\n        } else {\n       \
    \     sortedArray.append(oneCount)\n            oneCount = 0\n        }\n    }\n\
    \    sortedArray.append(oneCount)\n    return sortedArray\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmpj6130qa5.swift:11:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1660053397
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ let ones = arr.filter{$0}.count\n    let decimal = arr.filter{$0 > 0}.count\n\
    \    return arr.sorted{ $0 < $1 }.sorted{ $0.isOdd? ? $0.decimalValue < $1.decimalValue\
    \ : $0.decimalValue == $1.decimalValue }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpkrds5xx7.swift:7:27: error: cannot convert value of type 'Int'\
    \ to closure result type 'Bool'\n    let ones = arr.filter{$0}.count\n       \
    \                   ^~\n/tmp/tmpkrds5xx7.swift:9:45: error: value of type 'Int'\
    \ has no member 'isOdd'\n    return arr.sorted{ $0 < $1 }.sorted{ $0.isOdd? ?\
    \ $0.decimalValue < $1.decimalValue : $0.decimalValue == $1.decimalValue }\n \
    \                                        ~~ ^~~~~\n/tmp/tmpkrds5xx7.swift:9:50:\
    \ error: value of optional type 'Bool?' must be unwrapped to a value of type 'Bool'\n\
    \    return arr.sorted{ $0 < $1 }.sorted{ $0.isOdd? ? $0.decimalValue < $1.decimalValue\
    \ : $0.decimalValue == $1.decimalValue }\n                                   \
    \              ^\n/tmp/tmpkrds5xx7.swift:9:50: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    return arr.sorted{ $0\
    \ < $1 }.sorted{ $0.isOdd? ? $0.decimalValue < $1.decimalValue : $0.decimalValue\
    \ == $1.decimalValue }\n                                                 ^\n \
    \                                                  ?? <#default value#>\n/tmp/tmpkrds5xx7.swift:9:50:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    return arr.sorted{ $0 < $1 }.sorted{ $0.isOdd? ? $0.decimalValue\
    \ < $1.decimalValue : $0.decimalValue == $1.decimalValue }\n                 \
    \                                ^\n                                         (\
    \        )!\n/tmp/tmpkrds5xx7.swift:9:57: error: value of type 'Int' has no member\
    \ 'decimalValue'\n    return arr.sorted{ $0 < $1 }.sorted{ $0.isOdd? ? $0.decimalValue\
    \ < $1.decimalValue : $0.decimalValue == $1.decimalValue }\n                 \
    \                                    ~~ ^~~~~~~~~~~~\n/tmp/tmpkrds5xx7.swift:9:75:\
    \ error: value of type 'Int' has no member 'decimalValue'\n    return arr.sorted{\
    \ $0 < $1 }.sorted{ $0.isOdd? ? $0.decimalValue < $1.decimalValue : $0.decimalValue\
    \ == $1.decimalValue }\n                                                     \
    \                  ~~ ^~~~~~~~~~~~\n/tmp/tmpkrds5xx7.swift:9:93: error: value\
    \ of type 'Int"
  stdout: ''
  timestamp: 1660053397
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    for num in arr {\n        var count = 0\n        for\
    \ _ in 0..<num.bitWidth {\n            if num & 1 == 1 {\n                count\
    \ += 1\n            }\n            num >>= 1\n        }\n        result.append((count\
    \ > 0) ? count : num.decimalValue)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmp_r6ey2tt.swift:14:17: error: left side of mutating operator isn't\
    \ mutable: 'num' is a 'let' constant\n            num >>= 1\n            ~~~ ^\n\
    /tmp/tmp_r6ey2tt.swift:16:49: error: value of type 'Int' has no member 'decimalValue'\n\
    \        result.append((count > 0) ? count : num.decimalValue)\n             \
    \                               ~~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660053397
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ let ones = arr.filter{$0 == 1}\n    let decimals = arr.filter{$0 > 1}\n    let\
    \ sortedArray = ones.sorted()\n    sortedArray = sortedArray.sorted(by: {$0.compare($1)\
    \ == .orderedAscending})\n    sortedArray = sortedArray.sorted(by: {$0.compare($1)\
    \ == .orderedAscending})\n    sortedArray = decimals.sorted()\n    return sortedArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp3rp5w0b4.swift:10:5: error: cannot assign to value: 'sortedArray'\
    \ is a 'let' constant\n    sortedArray = sortedArray.sorted(by: {$0.compare($1)\
    \ == .orderedAscending})\n    ^~~~~~~~~~~\n/tmp/tmp3rp5w0b4.swift:9:5: note: change\
    \ 'let' to 'var' to make it mutable\n    let sortedArray = ones.sorted()\n   \
    \ ^~~\n    var\n/tmp/tmp3rp5w0b4.swift:10:46: error: value of type 'Int' has no\
    \ member 'compare'\n    sortedArray = sortedArray.sorted(by: {$0.compare($1) ==\
    \ .orderedAscending})\n                                          ~~ ^~~~~~~\n\
    /tmp/tmp3rp5w0b4.swift:11:5: error: cannot assign to value: 'sortedArray' is a\
    \ 'let' constant\n    sortedArray = sortedArray.sorted(by: {$0.compare($1) ==\
    \ .orderedAscending})\n    ^~~~~~~~~~~\n/tmp/tmp3rp5w0b4.swift:9:5: note: change\
    \ 'let' to 'var' to make it mutable\n    let sortedArray = ones.sorted()\n   \
    \ ^~~\n    var\n/tmp/tmp3rp5w0b4.swift:11:46: error: value of type 'Int' has no\
    \ member 'compare'\n    sortedArray = sortedArray.sorted(by: {$0.compare($1) ==\
    \ .orderedAscending})\n                                          ~~ ^~~~~~~\n\
    /tmp/tmp3rp5w0b4.swift:12:5: error: cannot assign to value: 'sortedArray' is a\
    \ 'let' constant\n    sortedArray = decimals.sorted()\n    ^~~~~~~~~~~\n/tmp/tmp3rp5w0b4.swift:9:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let sortedArray = ones.sorted()\n\
    \    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660053397
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    for n in arr {\n        if n.isOne() {\n         \
    \   result.insert(n, at: 0)\n        } else {\n            let index = result.index(of:\
    \ n)\n            if index != nil {\n                result[index!] = n\n    \
    \        } else {\n                result.insert(n, at: 0)\n            }\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpeo0ge1hq.swift:9:14: error: value of type 'Int' has no member 'isOne'\n\
    \        if n.isOne() {\n           ~ ^~~~~\n/tmp/tmpeo0ge1hq.swift:12:32: warning:\
    \ 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n            let index\
    \ = result.index(of: n)\n                               ^\n/tmp/tmpeo0ge1hq.swift:12:32:\
    \ note: use 'firstIndex(of:)' instead\n            let index = result.index(of:\
    \ n)\n                               ^~~~~\n                               firstIndex\n"
  stdout: ''
  timestamp: 1660053397
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    var ones = 0\n    for x in arr {\n        if x ==\
    \ 1 {\n            ones += 1\n        } else {\n            if ones == 0 {\n \
    \               ones += 1\n                result.insert(x, at: 0)\n         \
    \   } else {\n                result.insert(x, at: result.count - 1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'Swift/Array.swift:419: Fatal error: Negative Array index is out of range

    Current stack trace:

    0    libswiftCore.so                    0x00007fed646b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007fed643af561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00007fed643af286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00007fed643af13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00007fed643aebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00007fed64398196 <unavailable> + 1339798

    6    libswiftCore.so                    0x00007fed6439c020 Array.insert(_:at:)
    + 80

    7    tmpk2mj4f3i                        0x00005588c6ca424e <unavailable> + 8782

    8    tmpk2mj4f3i                        0x00005588c6ca3574 <unavailable> + 5492

    9    libc.so.6                          0x00007fed63ea5460 __libc_start_main +
    245

    10   tmpk2mj4f3i                        0x00005588c6ca3249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660053397
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3,\
    \ 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    assert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: '/tmp/tmp8lf8usk1.swift:8:1: error: missing return in global function expected
    to return ''[Int]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ let ones = arr.filter{$0}.count\n    let decimal = arr.filter{$0 != 0}.reduce(0)\
    \ {$0 + $1} / ones\n    return arr.sorted { $0 < $1 || $1 == $1 && $0 < decimal\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3,\
    \ 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    assert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmppnn4mag7.swift:7:27: error: cannot convert value of type 'Int'\
    \ to closure result type 'Bool'\n    let ones = arr.filter{$0}.count\n       \
    \                   ^~\n"
  stdout: ''
  timestamp: 1660053397
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3,\
    \ 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    assert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: '/tmp/tmp8lf8usk1.swift:8:1: error: missing return in global function expected
    to return ''[Int]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    for x in arr {\n        let bin = binary(x)\n    \
    \    let index = bin.index(of: \"1\")\n        let decimal = Int(bin[index!])\n\
    \        if decimal == x {\n            result.append(x)\n        } else {\n \
    \           result.insert(decimal, at: 0)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpnmmxbaz5.swift:9:19: error: cannot find 'binary' in scope\n   \
    \     let bin = binary(x)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1660053397
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var sortedArray = arr\n    sortedArray = sortedArray.sorted(by: { (a, b) ->\
    \ Bool in\n        if a < b {\n            return true\n        }\n        if\
    \ a > b {\n            return false\n        }\n        return count_one(a) >\
    \ count_one(b)\n    })\n    return sortedArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpxwhr1a71.swift:15:16: error: cannot find 'count_one' in scope\n\
    \        return count_one(a) > count_one(b)\n               ^~~~~~~~~\n/tmp/tmpxwhr1a71.swift:15:31:\
    \ error: cannot find 'count_one' in scope\n        return count_one(a) > count_one(b)\n\
    \                              ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660053397
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    var ones = 0\n    var decimal = 0\n    for x in arr\
    \ {\n        if x == 1 {\n            ones += 1\n        } else {\n          \
    \  decimal += pow(x, 2)\n        }\n    }\n    if ones > 0 {\n        result.sort(by:\
    \ {\n            ($0.decimalValue < $1.decimalValue) ?\n                true :\n\
    \                ($0.decimalValue == $1.decimalValue)\n        })\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp36zurw3q.swift:14:24: error: cannot find 'pow' in scope\n     \
    \       decimal += pow(x, 2)\n                       ^~~\n/tmp/tmp36zurw3q.swift:19:17:\
    \ error: value of type 'Int' has no member 'decimalValue'\n            ($0.decimalValue\
    \ < $1.decimalValue) ?\n             ~~ ^~~~~~~~~~~~\n/tmp/tmp36zurw3q.swift:19:35:\
    \ error: value of type 'Int' has no member 'decimalValue'\n            ($0.decimalValue\
    \ < $1.decimalValue) ?\n                               ~~ ^~~~~~~~~~~~\n/tmp/tmp36zurw3q.swift:21:21:\
    \ error: value of type 'Int' has no member 'decimalValue'\n                ($0.decimalValue\
    \ == $1.decimalValue)\n                 ~~ ^~~~~~~~~~~~\n/tmp/tmp36zurw3q.swift:21:40:\
    \ error: value of type 'Int' has no member 'decimalValue'\n                ($0.decimalValue\
    \ == $1.decimalValue)\n                                    ~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660053397
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    var ones = 0\n    for x in arr {\n        if x !=\
    \ 0 {\n            ones += 1\n        }\n    }\n    if ones == 0 {\n        return\
    \ arr\n    }\n    var decimal = ones\n    var decimal2 = ones\n    var decimal3\
    \ = ones\n    var decimal4 = ones\n    var decimal5 = ones\n    var decimal6 =\
    \ ones\n    var decimal7 = ones\n    var decimal8 = ones\n    var decimal9 = ones\n\
    \    var decimal10 = ones\n    var decimal11 = ones\n    var decimal12 = ones\n\
    \    var decimal13 = ones\n    var decimal14 = ones\n    var decimal15 = ones\n\
    \    var decimal16 = ones\n    var decimal17 = ones\n    var decimal18 = ones\n\
    \    var decimal19 = ones\n    var decimal20 = ones\n    var decimal21 = ones\n\
    \    var decimal22 = ones\n    var decimal23 = ones\n    var decimal24 = ones\n\
    \    var decimal25 = ones\n    var decimal26 = ones\n    var decimal27 = ones\n\
    \    var decimal28 = ones\n    var decimal29 = ones\n    var decimal30 = ones\n\
    \    var decimal31 = ones\n    var decimal32 = ones\n    var decimal33 = ones\n\
    \    var decimal34 = ones\n    var decimal35 = ones\n    var decimal36 = ones\n\
    \    var decimal37 = ones\n    var decimal38 = ones\n    var decimal39 = ones\n\
    \    var decimal40 = ones\n    var decimal41 = ones\n    var decimal42 = ones\n\
    \    var decimal43 = ones\n    var decimal44 = ones\n    var decimal45 = ones\n\
    \    var decimal46 = ones\n    var decimal47 = ones\n    var decimal48 = ones\n\
    \    var decimal49 = ones\n    var decimal50 = ones\n    var decimal51 = ones\n\
    \    var decimal52 = ones\n    var decimal53 = ones\n    var decimal54 = ones\n\
    \    var decimal55 = ones\n    var decimal56 = ones\n    var decimal57 = ones\n\
    \    var decimal58 = ones\n    var decimal59 = ones\n    var decimal60 = ones\n\
    \    var decimal61 = ones\n    var decimal62 = ones\n    var decimal63 = ones\n\
    \    var decimal64 = ones\n    var decimal65 = ones\n    var decimal66 = ones\n\
    \    var decimal67 = ones\n    var decimal68 = ones\n    var decimal69 = ones\n\
    \    var decimal\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmppvr43_t7.swift:86:9: error: type annotation missing in pattern\n\
    \    var decimal\n        ^\n"
  stdout: ''
  timestamp: 1660053397
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ var result = [Int]()\n    var ones = 0\n    for n in arr {\n        if n ==\
    \ 1 {\n            ones += 1\n        } else {\n            if ones > 0 {\n  \
    \              result.append((ones / 10).rounded(.towardZero))\n             \
    \   ones = 0\n            }\n            result.append(n)\n        }\n    }\n\
    \    if ones > 0 {\n        result.append((ones / 10).rounded(.towardZero))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp0xzcer1n.swift:14:43: error: value of type 'Int' has no member\
    \ 'rounded'\n                result.append((ones / 10).rounded(.towardZero))\n\
    \                              ~~~~~~~~~~~ ^~~~~~~\n/tmp/tmp0xzcer1n.swift:14:52:\
    \ error: cannot infer contextual base in reference to member 'towardZero'\n  \
    \              result.append((ones / 10).rounded(.towardZero))\n             \
    \                                     ~^~~~~~~~~~\n/tmp/tmp0xzcer1n.swift:21:35:\
    \ error: value of type 'Int' has no member 'rounded'\n        result.append((ones\
    \ / 10).rounded(.towardZero))\n                      ~~~~~~~~~~~ ^~~~~~~\n/tmp/tmp0xzcer1n.swift:21:44:\
    \ error: cannot infer contextual base in reference to member 'towardZero'\n  \
    \      result.append((ones / 10).rounded(.towardZero))\n                     \
    \                     ~^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660053397
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\nfunc sort_array(arr: [Int]) -> [Int] {\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4c6b3in_/tmp4c6b3in_.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ff3dc604c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ff3dc2fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ff3dc2fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ff3dc2fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c6b3in_                        0x000055b3e93b43e4 <unavailable> + 5092

    5    libc.so.6                          0x00007ff3dbdf1460 __libc_start_main +
    245

    6    tmp4c6b3in_                        0x000055b3e93b3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660053396
