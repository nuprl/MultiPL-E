name: HumanEval_145_order_by_points
language: swift
prompt: "\n/// Write a function which sorts the given list of integers\n/// in ascending\
  \ order according to the sum of their digits.\n/// Note: if there are several items\
  \ with similar sum of their digits,\n/// order them based on their index in original\
  \ list.\n/// For example:\nfunc order_by_points(nums: [Int]) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12])\
  \ == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145,\
  \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
  \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
  \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3])\
  \ == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3,\
  \ 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
  \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
completions: ['    return nums.sorted { $0.digits.reduce(0,+) + $1.digits.reduce(0,+)
    }', "    var numsSorted = [Int]()\n    var sum = 0\n    for num in nums {\n  \
    \      sum += num\n        numsSorted.append(num)\n    }\n    var index = 0\n\
    \    var lastSum = sum\n    for num in nums {\n        if lastSum == sum {\n \
    \           numsSorted.append(nums[index])\n            index++\n        } else\
    \ {\n            lastSum = sum\n            index = 0\n        }\n    }\n    return\
    \ numsSorted", "    var numsSorted = [Int]()\n    var sum = 0\n    for num in\
    \ nums {\n        sum += num\n        numsSorted.append(num)\n    }\n    var numsSortedCopy\
    \ = numsSorted.copy()\n    numsSorted.sort()\n    var result = [Int]()\n    for\
    \ num in numsSorted {\n        if numsSortedCopy.contains(num) {\n           \
    \ let index = numsSortedCopy.index(of: num)!\n            result.insert(numsSorted[index],\
    \ at: index)\n            numsSortedCopy.remove(at: index)\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    var sum = 0\n    for n in\
    \ nums {\n        sum += n\n    }\n    for n in nums {\n        if sum == n {\n\
    \            result.append(n)\n        }\n    }\n    return result", "    var\
    \ numsSorted = [Int]()\n    var sum = 0\n    for num in nums {\n        sum +=\
    \ num\n        numsSorted.append(num)\n    }\n    var numsSortedCopy = numsSorted.copy()\n\
    \    numsSorted.sort()\n    var result = [Int]()\n    for num in numsSorted {\n\
    \        if numsSortedCopy.contains(num) {\n            let index = numsSortedCopy.index(of:\
    \ num)!\n            result.append(numsSorted[index])\n            numsSortedCopy.remove(at:\
    \ index)\n        }\n    }\n    return result", "    var numsSorted = [Int]()\n\
    \    var sum = 0\n    for n in nums {\n        sum += n\n        numsSorted.append(n)\n\
    \    }\n    var numsSortedBySum = [Int]()\n    for n in numsSorted {\n       \
    \ if sum == 0 {\n            numsSortedBySum.append(n)\n        } else {\n   \
    \         for m in numsSorted {\n                if m > n {\n                \
    \    break\n                }\n                if sum == (m + n) % 10 {\n    \
    \                numsSortedBySum.append(m)\n                    break\n      \
    \          }\n            }\n        }\n        sum -= n\n    }\n    return numsSortedBySum",
  '    return nums.sorted{ $0.digit > $1.digit }', "    var sums = nums.map { $0.digits.reduce(0,+)\
    \ }\n    sums.sort { $0 < $1 }\n    return sums.map { nums[$0] }", "    var sum\
    \ = 0\n    var result = [Int]()\n    for n in nums {\n        sum += n\n     \
    \   result.append(n)\n    }\n    result.sort { $0.0 < $1.0 }\n    return result",
  "    var numsSorted = [Int]()\n    var sum = 0\n    for num in nums {\n        sum\
    \ += num\n        numsSorted.append(num)\n    }\n    var numsSorted2 = numsSorted\n\
    \    for num in numsSorted {\n        var index = numsSorted2.index(of: num)\n\
    \        if index != nil {\n            numsSorted2.remove(at: index!)\n     \
    \       numsSorted2.insert(num, at: index!)\n        }\n    }\n    return numsSorted2",
  "    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aDigit = a % 10\n        let bDigit = b % 10\n        return aDigit\
    \ < bDigit || (aDigit == bDigit && a.compare(b) == .orderedAscending)\n    })\n\
    \    return result", "    var sum: Int = 0\n    var result: [Int] = []\n    for\
    \ n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        let aSum = sum - a\n        let bSum = sum - b\n\
    \        return aSum < bSum\n    })\n    return result", "    var result: [Int]\
    \ = []\n    var sum = 0\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aDigit = a % 10\n\
    \        let bDigit = b % 10\n        return aDigit < bDigit || (aDigit == bDigit\
    \ && a.compare(b) == .orderedAscending)\n    })\n    return result", "    var\
    \ result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum += n\n \
    \       result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n   \
    \     let aSum = a.toInt()\n        let bSum = b.toInt()\n        return aSum\
    \ == bSum || (aSum > bSum ? true : false )\n    })\n    return result", "    var\
    \ sums = nums.map{ $0.reduce(0,+) }\n    sums.sort{ $0 < $1 }\n    return sums.map{\
    \ nums[$0] }", "    var numsSorted = [Int]()\n    var sum = 0\n    for n in nums\
    \ {\n        sum += n\n        numsSorted.append(n)\n    }\n    var numsSortedBySum\
    \ = [Int]()\n    for n in numsSorted {\n        if sum == n {\n            numsSortedBySum.append(n)\n\
    \        }\n    }\n    return numsSortedBySum", "    let sorted = nums.sorted(by:\
    \ { $0.digits.reduce(0,+) + $1.digits.reduce(0,+) })\n    return sorted.map {\
    \ $0.index }", "    var sum = 0\n    var result = [Int]()\n    for n in nums {\n\
    \        sum += n\n        result.append(n)\n    }\n    result.sort { $0.0 < $1.0\
    \ }\n    return result", "    var numsSorted = [Int]()\n    var sum = 0\n    for\
    \ n in nums {\n        sum += n\n        numsSorted.append(n)\n    }\n    var\
    \ index = 0\n    var sumOfDigits = 0\n    for n in nums {\n        sumOfDigits\
    \ += n % 10\n        n /= 10\n        while n != 0 {\n            sumOfDigits\
    \ += n % 10\n            n /= 10\n        }\n        if sumOfDigits > sum {\n\
    \            index = numsSorted.index(of: n)!\n            numsSorted.remove(at:\
    \ index)\n            numsSorted.insert(n, at: index)\n        }\n    }\n    return\
    \ numsSorted", "    var numsSorted = [Int]()\n    var sum = 0\n    for n in nums\
    \ {\n        sum += n\n        numsSorted.append(n)\n    }\n    var index = 0\n\
    \    while index < nums.count {\n        if sum < nums[index] {\n            swap(&numsSorted[index],\
    \ &nums[index])\n            sum += nums[index]\n        }\n        index += 1\n\
    \    }\n    return numsSorted", "    var numsSorted = [Int]()\n    var sum = 0\n\
    \    for num in nums {\n        sum += num\n        numsSorted.append(num)\n \
    \   }\n    var numsSortedCopy = numsSorted.copy()\n    numsSorted.sort()\n   \
    \ var numsSortedCopy = numsSorted.copy()\n    for num in numsSorted {\n      \
    \  if numsSortedCopy.contains(num) {\n            numsSortedCopy.remove(num)\n\
    \        }\n    }\n    return numsSorted", "    var sums = nums.map{ $0.reduce(0,+)\
    \ }\n    sums.sort{ $0 < $1 }\n    return sums.map{ nums[$0] }", "    var sums\
    \ = nums.map { $0.digits.reduce(0, +) }\n    return nums.sorted { sums[$0] < sums[$1]\
    \ }", "    var numsSorted = [Int]()\n    var sum = 0\n    for n in nums {\n  \
    \      sum += n\n        numsSorted.append(n)\n    }\n    var numsSortedBySum\
    \ = numsSorted.sorted()\n    return numsSortedBySum", "    var sums = [Int]()\n\
    \    for n in nums {\n        sums.append(n.reduce(0, +))\n    }\n    return sums.sorted()",
  "    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = a.toInt()\n        let bSum = b.toInt()\n        return aSum\
    \ < bSum || (aSum == bSum && a.compare(b.toInt()) == .orderedAscending)\n    })\n\
    \    return result", "    var numsSorted = [Int]()\n    var sum = 0\n    for n\
    \ in nums {\n        sum += n\n        numsSorted.append(n)\n    }\n    var i\
    \ = 0\n    for n in nums {\n        if sum < n {\n            swap(&nums[i], &nums[sum])\n\
    \            sum += nums[i]\n        }\n        i += 1\n    }\n    return numsSorted",
  "    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n    }\n    for n in nums {\n        if sum == n {\n            result.insert(n,\
    \ at: result.index(of: n))\n        }\n    }\n    return result", "    var numsSorted\
    \ = [Int]()\n    var sum = 0\n    for num in nums {\n        sum += num\n    \
    \    numsSorted.append(num)\n    }\n    var numsSorted2 = numsSorted.sorted()\n\
    \    return numsSorted2", "    var sum = 0\n    var result = [Int]()\n    for\
    \ n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        let aSum = sum - a\n        let bSum = sum - b\n\
    \        return aSum < bSum\n    })\n    return result", "    var sums = [Int]()\n\
    \    var result = [Int]()\n    for n in nums {\n        sums.append(n.reduce(0,\
    \ +))\n    }\n    for s in sums {\n        if s > 0 {\n            result.insert(s,\
    \ nums.index(of: s))\n        }\n    }\n    return result", "    var numsSorted\
    \ = nums\n    var sum = 0\n    for n in numsSorted {\n        sum += n\n    }\n\
    \    var index = 0\n    for n in numsSorted {\n        if sum == n {\n       \
    \     numsSorted.remove(at: index)\n            numsSorted.insert(n, at: index)\n\
    \        }\n        index += 1\n    }\n    return numsSorted", "    var numsSorted\
    \ = [Int]()\n    var sum = 0\n    for num in nums {\n        sum += num\n    \
    \    numsSorted.append(num)\n    }\n    var numsSortedBySum = [Int]()\n    for\
    \ num in numsSorted {\n        if sum == num {\n            numsSortedBySum.append(num)\n\
    \        }\n    }\n    return numsSortedBySum", "    var result = [Int]()\n  \
    \  var sum = 0\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = a.toInt()\n\
    \        let bSum = b.toInt()\n        return aSum == bSum || (aSum > bSum ? true\
    \ : false )\n    })\n    return result", "    let len = nums.count\n    var numsSorted\
    \ = [Int](repeating: 0, count: len)\n    for i in 0..<len {\n        let sumOfDigits\
    \ = nums.reduce(0, { $0 + $1 * $1 })\n        numsSorted.append(sumOfDigits)\n\
    \    }\n    return numsSorted.sorted()", "    var sums = nums.map { $0.digits.reduce(0)\
    \ { $0 + $1 } }\n    sums.sort { $0 < $1 }\n    return sums.map { nums[$0] }",
  "    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = a.toInt()\n        let bSum = b.toInt()\n        return aSum\
    \ < bSum || (aSum == bSum && a.compare(to: b) == .orderedAscending)\n    })\n\
    \    return result", "    var result = [Int]()\n    var sum = 0\n    for n in\
    \ nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        let aSum = sum - a\n        let bSum = sum - b\n\
    \        return aSum < bSum\n    })\n    return result", "    var sum = 0\n  \
    \  var result = [Int]()\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort { $0.0 < $1.0 }\n    return result", "    var result =\
    \ [Int]()\n    var sum = 0\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: {$0.0 < $1.0})\n    return result", "    var result\
    \ = [Int]()\n    var sum = 0\n    for num in nums {\n        sum += num\n    \
    \    result.append(num)\n    }\n    result.sort { $0.0 < $1.0 }\n    return result",
  "    var numsSorted = [Int]()\n    var sum = 0\n    for n in nums {\n        sum\
    \ += n\n        numsSorted.append(n)\n    }\n    \n    var numsSortedBySum = [Int]()\n\
    \    for n in nums {\n        if sum == n {\n            numsSortedBySum.append(n)\n\
    \        }\n    }\n    \n    return numsSortedBySum", "    var numsSorted = [Int]()\n\
    \    var sum = 0\n    for num in nums {\n        sum += num\n        numsSorted.append(num)\n\
    \    }\n    var index = 0\n    while index < nums.count {\n        var sumOfDigits\
    \ = sum\n        var numToRemove = nums[index]\n        var indexToRemove = index\n\
    \        while sumOfDigits > 0 {\n            if sumOfDigits % 10 == numToRemove\
    \ {\n                sumOfDigits /= 10\n                numsSorted.remove(at:\
    \ indexToRemove)\n            } else {\n                break\n            }\n\
    \            indexToRemove += 1\n        }\n        index += 1\n    }\n    return\
    \ numsSorted", "    var numsSorted = [Int]()\n    var sum = 0\n    for n in nums\
    \ {\n        sum += n\n        numsSorted.append(n)\n    }\n    var numsSortedBySum\
    \ = numsSorted.sorted()\n    return numsSortedBySum", "    var sums = nums.map{\
    \ $0.reduce(0,+) }\n    return nums.sorted(by: { sums[$0] < sums[$1] }).map {\
    \ $0 }", "    var result = [Int]()\n    for n in nums {\n        let sum = n.reduce(0,\
    \ combine: +)\n        if result.contains(sum) {\n            let index = result.index(of:\
    \ sum)!\n            result[index] = n\n        } else {\n            result.append(n)\n\
    \        }\n    }\n    return result", "    var sums = nums.map { $0.digits.reduce(0,+)\
    \ }\n    return sums.sorted { $0 < $1 }", "    var sum = 0\n    var result = [Int]()\n\
    \    for n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort\
    \ { $0.0 < $1.0 }\n    return result", "    var numsSorted = [Int]()\n    var\
    \ sum = 0\n    for n in nums {\n        sum += n\n        numsSorted.append(n)\n\
    \    }\n    var index = 0\n    for n in nums {\n        if sum < n {\n       \
    \     sum -= nums[index]\n            index += 1\n        }\n    }\n    return\
    \ numsSorted", "    var result = [Int]()\n    var sum = 0\n    for n in nums {\n\
    \        sum += n\n    }\n    for n in nums {\n        if sum == n {\n       \
    \     result.append(n)\n        }\n    }\n    return result", "    var numsSorted\
    \ = nums\n    var sumOfDigits = nums.reduce(0, combine: +)\n    var sumOfDigitsSorted\
    \ = sumOfDigits\n    var index = 0\n    while index < nums.count {\n        let\
    \ currentSumOfDigits = nums[index] + nums[index + 1]\n        if currentSumOfDigits\
    \ > sumOfDigitsSorted {\n            sumOfDigitsSorted = currentSumOfDigits\n\
    \            numsSorted = nums.sorted{ $0 + $1 < $1 }\n        }\n        index\
    \ += 1\n    }\n    return numsSorted", "    var result = [Int]()\n    var sum\
    \ = 0\n    for n in nums {\n        sum += n\n        result.append(n)\n    }\n\
    \    result.sort(by: {\n        sum - $0\n    })\n    return result", "    var\
    \ sum: Int = 0\n    var result: [Int] = []\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sortInPlace()\n    return result",
  "    var numsSorted = [Int]()\n    var sum = 0\n    for n in nums {\n        sum\
    \ += n\n        numsSorted.append(n)\n    }\n    var numsSortedBySum = [Int]()\n\
    \    for n in numsSorted {\n        if sum == 0 {\n            numsSortedBySum.append(n)\n\
    \        } else {\n            for m in numsSorted {\n                if n ==\
    \ m {\n                    continue\n                }\n                if sum\
    \ - n == m {\n                    numsSortedBySum.append(n)\n                \
    \    break\n                }\n            }\n        }\n    }\n    return numsSortedBySum",
  "    var sums = nums.map { $0.reduce(0) { $0 + $1 } }\n    sums.sort { $0 < $1 }\n\
    \    return sums.map { nums[$0] }", "    var numsSorted = nums\n    var sumOfDigits\
    \ = nums.reduce(0, combine: +)\n    var index = 0\n    while index < nums.count\
    \ {\n        let nextIndex = index + 1\n        let nextSumOfDigits = sumOfDigits\
    \ + nums[index]\n        if nextSumOfDigits > sumOfDigits {\n            numsSorted\
    \ = numsSorted.sorted()\n            sumOfDigits = nextSumOfDigits\n         \
    \   index = nextIndex\n        } else {\n            sumOfDigits = nextSumOfDigits\n\
    \        }\n    }\n    return numsSorted", "    var numsSorted = [Int]()\n   \
    \ var sum = 0\n    for n in nums {\n        sum += n\n        numsSorted.append(n)\n\
    \    }\n    var numsSortedBySum = [Int]()\n    for n in numsSorted {\n       \
    \ if sum == n {\n            numsSortedBySum.append(n)\n        }\n    }\n   \
    \ return numsSortedBySum", "    var numsSorted = nums\n    var sumOfDigits = nums.reduce(0,\
    \ combine: +)\n    var index = 0\n    while index < nums.count {\n        let\
    \ sum = nums[index] + nums[index + 1]\n        if sumOfDigits > sum {\n      \
    \      numsSorted = numsSorted.sorted()\n        }\n        sumOfDigits -= sum\n\
    \        index += 1\n    }\n    return numsSorted", "    var numsSorted = [Int]()\n\
    \    var sum = 0\n    for n in nums {\n        sum += n\n        numsSorted.append(n)\n\
    \    }\n    var numsSortedBySum = [Int]()\n    for n in numsSorted {\n       \
    \ if sum == n {\n            numsSortedBySum.append(n)\n        }\n    }\n   \
    \ return numsSortedBySum", "    var result = [Int]()\n    var sum = 0\n    for\
    \ n in nums {\n        sum += n\n        result.append(sum)\n    }\n    return\
    \ result.sorted(by: { (a, b) -> Bool in\n        return a < b\n    })", "    var\
    \ sums = nums.map { $0.reduce(0) { $0 + $1 } }\n    var sorted = nums.sorted()\n\
    \    var result = [Int]()\n    for idx in 0..<nums.count {\n        let sum =\
    \ sums[idx]\n        if sorted.contains(&sum) {\n            result.insert(sorted[idx],\
    \ at: idx)\n        }\n    }\n    return result", "    var numsSorted = [Int]()\n\
    \    var sum = 0\n    for n in nums {\n        sum += n\n        numsSorted.append(n)\n\
    \    }\n    var i = 0\n    while i < nums.count {\n        if sum < numsSorted[i]\
    \ {\n            swap(&numsSorted[i], &numsSorted[sum])\n            sum += numsSorted[i]\n\
    \        }\n        i += 1\n    }\n    return numsSorted", "    var result = [Int]()\n\
    \    var sum = 0\n    for n in nums {\n        sum += n\n    }\n    for n in nums\
    \ {\n        if sum == n {\n            result.append(n)\n        }\n    }\n \
    \   return result", "    let numsSorted = nums.sorted { $0.digits < $1.digits\
    \ }\n    return numsSorted", "    let len = nums.count\n    var sums = nums.map\
    \ { $0.digits }\n    var sorted = [Int]()\n    for i in 0..<len {\n        let\
    \ sum = sums[i]\n        if sorted.contains(sum) {\n            sorted.remove(at:\
    \ sorted.index(of: sum))\n        } else {\n            sorted.append(sum)\n \
    \       }\n    }\n    return sorted", "    var sum = 0\n    var result = [Int]()\n\
    \    for n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort\
    \ { $0.0 < $1.0 }\n    return result", "    var result = [Int]()\n    var sum\
    \ = 0\n    for n in nums {\n        sum += n\n    }\n    for n in nums {\n   \
    \     if sum == n {\n            result.insert(n, at: result.endIndex)\n     \
    \   }\n    }\n    return result", "    var numsSorted = [Int]()\n    var sum =\
    \ 0\n    for num in nums {\n        sum += num\n        numsSorted.append(num)\n\
    \    }\n    var numsSortedBySum = [Int]()\n    for num in numsSorted {\n     \
    \   if sum == num {\n            numsSortedBySum.append(num)\n        }\n    }\n\
    \    return numsSortedBySum", "    var sum: Int = 0\n    var result: [Int] = []\n\
    \    for n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a: Int, b: Int) -> Bool in\n        let diff = a*10 + b - sum\n        return\
    \ diff < 0\n    })\n    return result", "    return nums.sorted(by: { (a, b) ->\
    \ Bool in\n        let sum1 = Int(String(describing: a).characters.reduce(\"\"\
    )) { sum, char in\n            return sum + String(char).characters.reduce(\"\"\
    ) + String(char)\n        }\n        let sum2 = Int(String(describing: b).characters.reduce(\"\
    \")) { sum, char in\n            return sum + String(char).characters.reduce(\"\
    \") + String(char)\n        }\n        return sum1 < sum2\n    })", "    var sums\
    \ = [Int]()\n    var indexes = [Int]()\n    for n in nums {\n        sums.append(n.reduce(0,\
    \ +))\n        indexes.append(n)\n    }\n    sums.sortInPlace()\n    sums.reverse()\n\
    \    return sums.map { indexes[$0] }", "    var result: [Int] = []\n    var sum\
    \ = 0\n    for n in nums {\n        sum += n\n    }\n    for n in nums {\n   \
    \     if sum == n {\n            result.append(n)\n        }\n    }\n    return\
    \ result", "    var sums = nums.map{ $0.reduce(0,+) }\n    sums.sort{ $0.0 < $1.0\
    \ }\n    return sums.map{ nums[$0] }", "    var numsSorted = [Int]()\n    var\
    \ sum = 0\n    for num in nums {\n        sum += num\n        numsSorted.append(num)\n\
    \    }\n    var numsSortedBySum = [Int]()\n    for num in numsSorted {\n     \
    \   if sum == num {\n            numsSortedBySum.append(num)\n        }\n    }\n\
    \    return numsSortedBySum", "    let sum = nums.reduce(0, combine: +)\n    return\
    \ nums.sorted { $0 + $1 < sum }", "    var sums = nums.map{$0.reduce(0,+)}\n \
    \   sums.sort{$0+$1 < $1}\n    return sums.map{$0*10 + $1}", "    var result =\
    \ [Int]()\n    var sum = 0\n    for n in nums {\n        sum += n\n    }\n   \
    \ for n in nums {\n        if sum < n {\n            result.insert(sum, at: 0)\n\
    \            sum += n\n        } else {\n            result.insert(n, at: 0)\n\
    \            sum -= n\n        }\n    }\n    return result", "    let digits =\
    \ nums.map({ String($0) })\n    let sum = digits.reduce(0) { $0 + $1 }\n    return\
    \ digits.sorted(by: { sum - $0.reduce(0, +) })", "    var result = [Int]()\n \
    \   var sum = 0\n    for n in nums {\n        sum += n\n    }\n    for n in nums\
    \ {\n        if sum < n {\n            result.insert(sum, at: 0)\n           \
    \ sum += n\n        } else {\n            result.insert(n, at: 0)\n          \
    \  sum -= n\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    var sum = 0\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = sum\n    \
    \    let bSum = sum\n        if a < b {\n            return true\n        }\n\
    \        if a > b {\n            return false\n        }\n        return aSum\
    \ < bSum\n    })\n    return result", "    var result = [Int]()\n    var sum =\
    \ 0\n    for num in nums {\n        sum += num\n        result.append(num)\n \
    \   }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = a.toInt()\n\
    \        let bSum = b.toInt()\n        return aSum < bSum || (aSum == bSum &&\
    \ a.compare(to: b) == .orderedAscending)\n    })\n    return result", "    let\
    \ numsSorted = nums.sorted()\n    var sum = 0\n    var index = 0\n    var result\
    \ = [Int]()\n    for num in numsSorted {\n        sum += num\n        if sum >\
    \ 9 {\n            sum -= 10\n            index += 1\n        }\n        result.append(num)\n\
    \    }\n    return result", "    let numsSorted = nums.sorted()\n    let sums\
    \ = numsSorted.map { $0.reduce(0) { $0 + $1 } }\n    return numsSorted.map { sums[$0]\
    \ }", "    var result = [Int]()\n    var sum = 0\n    for n in nums {\n      \
    \  sum += n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) ->\
    \ Bool in\n        let aSum = sum\n        let bSum = sum\n        if aSum > bSum\
    \ {\n            return true\n        }\n        if aSum < bSum {\n          \
    \  return false\n        }\n        return a.0 > b.0\n    })\n    return result",
  "    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        let aIndex = a.hashValue\
    \ % aSum\n        let bIndex = b.hashValue % bSum\n        return aIndex < bIndex\n\
    \    })\n    return result", "    var numsSorted = [Int]()\n    var sum = 0\n\
    \    for n in nums {\n        sum += n\n        numsSorted.append(n)\n    }\n\
    \    \n    var numsSorted2 = numsSorted\n    \n    for n in numsSorted {\n   \
    \     var index = numsSorted2.index(of: n)\n        if index != nil {\n      \
    \      numsSorted2.remove(at: index!)\n        }\n    }\n    \n    return numsSorted2",
  "    var sums = nums.map { $0.reduce(0) { $0 + $1 } }\n    return sums.sorted()",
  "    var numsSorted = nums\n    var sum = 0\n    for num in numsSorted {\n     \
    \   sum += num\n    }\n    var index = 0\n    for num in numsSorted {\n      \
    \  if sum < num {\n            numsSorted.swapAt(index, numsSorted.index(numsSorted.startIndex,\
    \ offsetBy: index))\n            sum += num\n        }\n        index += 1\n \
    \   }\n    return numsSorted", "    var sums = nums.map{ $0.reduce(0,+) }\n  \
    \  return nums.sorted(by: { sums[$0] < sums[$1] }).map { $0 }", "    var numsSorted\
    \ = nums\n    var sumOfDigits = nums.reduce(0, +)\n    var index = 0\n    while\
    \ index < nums.count {\n        let currentSum = sumOfDigits % 10\n        if\
    \ currentSum == 0 {\n            numsSorted.append(nums[index])\n            sumOfDigits\
    \ /= 10\n        } else {\n            if sumOfDigits < nums[index] {\n      \
    \          numsSorted.append(nums[index])\n                sumOfDigits += nums[index]\n\
    \            } else {\n                sumOfDigits -= nums[index]\n          \
    \      index++\n            }\n        }\n    }\n    return numsSorted", "   \
    \ var sums = nums.map { $0.reduce(0) { $0 + $1 } }\n    sums.sort { $0 < $1 }\n\
    \    return sums.map { nums[$0] }", "    var result = [Int]()\n    var sum = 0\n\
    \    for n in nums {\n        sum += n\n    }\n    for n in nums {\n        if\
    \ sum == n {\n            result.append(n)\n        }\n    }\n    return result",
  "    var sums = [Int]()\n    var index = 0\n    for n in nums {\n        sums.append(n.toInt())\n\
    \    }\n    sums.sort()\n    var result = [Int]()\n    for n in sums {\n     \
    \   result.append(nums[index])\n        index += 1\n    }\n    return result",
  "    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = a.toInt()\n        let bSum = b.toInt()\n        return aSum\
    \ < bSum || (aSum == bSum && a.compare(b.toInt()) == .orderedAscending)\n    })\n\
    \    return result", "    var numsSorted = [Int]()\n    var sum = 0\n    for n\
    \ in nums {\n        sum += n\n        numsSorted.append(n)\n    }\n    var numsSortedBySum\
    \ = numsSorted.sorted()\n    return numsSortedBySum", "    var numsSorted = nums\n\
    \    numsSorted.sort()\n    return numsSorted", "    var result = [Int]()\n  \
    \  var sum = 0\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = a.toInt()\n\
    \        let bSum = b.toInt()\n        return aSum < bSum || (aSum == bSum &&\
    \ a.compare(b.toInt()) == .orderedAscending)\n    })\n    return result", '    return
    nums.sorted { $0.digits + $1.digits < $1.digits + $0.digits }', "    var sums\
    \ = nums.map { $0.digits.reduce(0,+) }\n    sums.sort { $0 > $1 }\n    return\
    \ sums.map { nums[$0] }", "    var numsSorted = [Int]()\n    var sum = 0\n   \
    \ for num in nums {\n        sum += num\n        numsSorted.append(num)\n    }\n\
    \    var i = 0\n    for num in numsSorted {\n        if num != numsSorted[i] {\n\
    \            swap(&numsSorted[i], &num)\n            i += 1\n        }\n    }\n\
    \    return numsSorted", "    let sums = nums.map({ $0.reduce(0) { $0 + $1 * 10\
    \ } })\n    return sums.sorted(by: { $0.0 < $1.0 }).map { $0.1 }", "    var result\
    \ = [Int]()\n    var sum = 0\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = a.toInt()\n\
    \        let bSum = b.toInt()\n        if aSum == bSum {\n            return a.toInt()\
    \ < b.toInt()\n        }\n        return aSum < bSum\n    })\n    return result",
  "    var sums = nums.map{ $0.reduce(0,+) }\n    return nums.sorted{ sums[$0] < sums[$1]\
    \ }", "    var sums = nums.map { $0.reduce(0) { $0 + $1 } }\n    sums.sort { $0\
    \ < $1 }\n    return sums.map { nums[$0] }", "    var numsSorted = [Int]()\n \
    \   var sum = 0\n    for num in nums {\n        sum += num\n        numsSorted.append(num)\n\
    \    }\n    var i = 0\n    while i < nums.count {\n        if sum < numsSorted[i]\
    \ {\n            swap(&numsSorted[i], &numsSorted[sum])\n            sum += numsSorted[i]\n\
    \        }\n        i += 1\n    }\n    return numsSorted", "    var numsSorted\
    \ = [Int]()\n    var sum = 0\n    for num in nums {\n        sum += num\n    \
    \    numsSorted.append(num)\n    }\n    var index = 0\n    while index < numsSorted.count\
    \ {\n        if sum < numsSorted[index] {\n            swap(&numsSorted[index],\
    \ &numsSorted[sum])\n            sum += numsSorted[index]\n            index++\n\
    \        }\n    }\n    return numsSorted", "    var sum = 0\n    var result =\
    \ [Int]()\n    for n in nums {\n        sum += n\n        result.append(n)\n \
    \   }\n    result.sortInPlace()\n    return result", "    var result = [Int]()\n\
    \    var sum = 0\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort { $0.0 < $1.0 }\n    return result", "    var result =\
    \ [Int]()\n    for n in nums {\n        let sum = n.reduce(0, +) + n.reduce(0,\
    \ *)\n        result.insert(sum, at: nums.index(n))\n    }\n    return result",
  "    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n    }\n    for n in nums {\n        if sum < n {\n            result.append(n)\n\
    \        }\n    }\n    return result", "    var numsSorted = nums\n    var sum\
    \ = 0\n    for num in numsSorted {\n        sum += num\n    }\n    var index =\
    \ 0\n    while index < numsSorted.count {\n        var sumOfDigits = sum\n   \
    \     var currentSum = 0\n        for num in numsSorted {\n            currentSum\
    \ += num\n            if currentSum > sumOfDigits {\n                numsSorted.remove(at:\
    \ index)\n                numsSorted.insert(num, at: index)\n                sumOfDigits\
    \ = currentSum\n                break\n            }\n        }\n        index\
    \ += 1\n    }\n    return numsSorted", "    var sum = 0\n    var result = [Int]()\n\
    \    for n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort\
    \ { $0.0 < $1.0 }\n    return result", "    var result = [Int]()\n    for n in\
    \ nums {\n        var sum = 0\n        for d in n.toString() {\n            sum\
    \ += Int(d)!\n        }\n        if result.contains(sum) {\n            result.sort(by:\
    \ {$0 > $1})\n        } else {\n            result.append(n)\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    for n in nums {\n        let\
    \ digits = n.digits\n        let sum = digits.reduce(0, +)\n        if result.contains(sum)\
    \ {\n            result.sort(by: { (a, b) -> Bool in\n                let aDigits\
    \ = a.digits\n                let bDigits = b.digits\n                let aSum\
    \ = aDigits.reduce(0, +)\n                let bSum = bDigits.reduce(0, +)\n  \
    \              return aSum < bSum || (aSum == bSum && aDigits.index(a) < bDigits.index(b))\n\
    \            })\n        } else {\n            result.append(n)\n        }\n \
    \   }\n    return result", "    var result = [Int]()\n    var sum = 0\n    for\
    \ n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        let aSum = a.toInt()\n        let bSum = b.toInt()\n\
    \        return aSum < bSum || (aSum == aSum && bSum < bSum)\n    })\n    return\
    \ result", "    var numsSorted = nums\n    var sum = 0\n    for n in numsSorted\
    \ {\n        sum += n\n    }\n    var index = 0\n    var index2 = 0\n    var index3\
    \ = 0\n    var index4 = 0\n    var index5 = 0\n    var index6 = 0\n    var index7\
    \ = 0\n    var index8 = 0\n    var index9 = 0\n    var index10 = 0\n    var index11\
    \ = 0\n    var index12 = 0\n    var index13 = 0\n    var index14 = 0\n    var\
    \ index15 = 0\n    var index16 = 0\n    var index17 = 0\n    var index18 = 0\n\
    \    var index19 = 0\n    var index20 = 0\n    var index21 = 0\n    var index22\
    \ = 0\n    var index23 = 0\n    var index24 = 0\n    var index25 = 0\n    var\
    \ index26 = 0\n    var index27 = 0\n    var index28 = 0\n    var index29 = 0\n\
    \    var index30 = 0\n    var index31 = 0\n    var index32 = 0\n    var index33\
    \ = 0\n    var index34 = 0\n    var index35 = 0\n    var index36 = 0\n    var\
    \ index37 = 0\n    var index38 = 0\n    var index39 = 0\n    var index40 = 0\n\
    \    var index41 = 0\n    var index42 = 0\n    var index43 = 0\n    var index44\
    \ = 0\n    var index45 = 0\n    var index46 = 0\n    var index47 = 0\n    var\
    \ index48 = 0\n    var index49 = 0\n    var index50 = 0\n    var index51 = 0\n\
    \    var index52 = 0\n    var index53 = 0\n    var index54 = 0\n    var index55\
    \ = 0\n    var index56 = 0\n    var index57 = 0\n    var index58 = 0\n    var\
    \ index59 = 0\n    var index60 = 0\n    var index61 = 0\n    var index62 = 0\n\
    \    var index63 = 0\n    var index64 = 0\n    var index65 = 0\n    var index66\
    \ = 0\n    var index67 = 0\n    var index68 = 0\n    var index69 = 0\n    var\
    \ index70 = 0\n    var index71 = 0\n    var index72 = 0\n    var index73 = 0\n\
    \    var index74 = 0\n    var index75 = 0\n    var index76 = 0\n    var index77\
    \ = 0\n    var index78 = 0\n    var index79 = 0\n    var index80 = 0\n    var\
    \ index81 = 0\n    var index82 = 0\n    var index83 = 0\n    var index84 = 0\n\
    \    var index85 = 0\n    var index86 = 0\n    var index87 = 0\n    var index88\
    \ = 0\n    var index89 = 0\n    var index90 = 0\n    var index91 = 0\n    var\
    \ index92 = 0\n    var index93 = 0\n    var index94 = 0\n    var index95 = 0\n\
    \    var index96 = 0\n    var index97 = 0\n    var index", "    let sum = nums.reduce(0,\
    \ combine: +)\n    return nums.sorted(by: { $0.0 < $1.0 }).sorted(by: { $0.0 <\
    \ $1.0 })", '    return nums.sorted { $0.digits + $1.digits < $1.digits + $0.digits
    }', "    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum\
    \ += n\n        result.append(n)\n    }\n    result.sort { $0.0 < $1.0 }\n   \
    \ return result", "    var result = [Int]()\n    var sum = 0\n    for num in nums\
    \ {\n        sum += num\n        result.append(num)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        let aSum = a.toInt()\n        let bSum = b.toInt()\n\
    \        return aSum == bSum ? a.compare(b) == .orderedAscending : aSum < bSum\n\
    \    })\n    return result", "    var result = [Int]()\n    var sum = 0\n    for\
    \ n in nums {\n        sum += n\n        result.append(n)\n    }\n    var index\
    \ = 0\n    while index < result.count {\n        var sum = 0\n        for n in\
    \ result {\n            sum += n\n            if sum > index {\n             \
    \   result.remove(at: index)\n                result.insert(sum - index, at: index)\n\
    \                break\n            }\n        }\n        index += 1\n    }\n\
    \    return result", "    var numsSorted = [Int]()\n    var sum = 0\n    for n\
    \ in nums {\n        sum += n\n        numsSorted.append(n)\n    }\n    var index\
    \ = 0\n    var currentSum = 0\n    var currentIndex = 0\n    while index < nums.count\
    \ {\n        currentSum = sum\n        currentIndex = index\n        while currentIndex\
    \ < nums.count {\n            if currentSum - nums[currentIndex] < 0 {\n     \
    \           currentSum += nums[currentIndex]\n                currentIndex +=\
    \ 1\n            } else {\n                break\n            }\n        }\n \
    \       numsSorted.insert(numsSorted[index], at: currentIndex)\n        index\
    \ += 1\n    }\n    return numsSorted", "    var sum = 0\n    var result = [Int]()\n\
    \    for n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        let aDigit = a % 10\n        let bDigit = b % 10\n\
    \        return aDigit < bDigit || (aDigit == bDigit && a.compareTo(b) == .orderedAscending)\n\
    \    })\n    return result", "    var sums = nums.reduce([Int](), { (sums, num)\
    \ -> [Int] in\n        var s = sums.reduce(0, {$0 + $1}) + num\n        sums.append(s)\n\
    \        return sums\n    })\n    sums.sort { (sum1, sum2) -> Bool in\n      \
    \  return sum1 < sum2\n    }\n    return sums", "    var sums = [Int]()\n    for\
    \ n in nums {\n        sums.append(n.reduce(0, +))\n    }\n    return nums.sorted\
    \ { sums[$0] > sums[$1] }", "    var sum = 0\n    var result = [Int]()\n    for\
    \ n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort\
    \ { $0.0 < $1.0 }\n    return result", "    var sums = nums.map { $0.reduce(0)\
    \ { $0 + $1 } }\n    sums.sort { $0.0 < $1.0 }\n    return sums.map { nums[$0]\
    \ }", "    var result: [Int] = []\n    for num in nums {\n        let digits =\
    \ num.digits\n        var sum = 0\n        for d in digits {\n            sum\
    \ += d\n        }\n        if result.contains(sum) {\n            result.sort(by:\
    \ {$0 < $1})\n        } else {\n            result.append(num)\n        }\n  \
    \  }\n    return result", "    var result = [Int]()\n    var sum = 0\n    for\
    \ n in nums {\n        sum += n\n    }\n    for n in nums {\n        if sum <\
    \ n {\n            result.append(n)\n        }\n    }\n    return result", " \
    \   return nums.sorted(by: { (a, b) -> Bool in\n        let sumA = Int(truncating:\
    \ Double(a) / 10)\n        let sumB = Int(truncating: Double(b) / 10)\n      \
    \  return sumA > sumB\n    })", "    var numsSorted = [Int]()\n    var sum = 0\n\
    \    for num in nums {\n        sum += num\n        numsSorted.append(num)\n \
    \   }\n    var numsSortedCopy = numsSorted\n    for num in numsSorted {\n    \
    \    var index = numsSortedCopy.index(of: num)\n        if index != nil {\n  \
    \          numsSortedCopy.remove(at: index!)\n            numsSortedCopy.insert(num,\
    \ at: 0)\n        }\n    }\n    return numsSorted", "    var result = [Int]()\n\
    \    var sum = 0\n    for n in nums {\n        sum += n\n    }\n    for n in nums\
    \ {\n        if sum < n {\n            result.insert(sum, at: 0)\n           \
    \ sum -= n\n        } else {\n            result.insert(n, at: 0)\n          \
    \  sum += n\n        }\n    }\n    return result", "    var sums = nums.reduce([Int](),\
    \ { (sums, num) -> [Int] in\n        var s = sums.reduce(0, {$0 + $1}) + num\n\
    \        sums.append(s)\n        return sums\n    })\n    return sums.sorted(by:\
    \ {$0 < $1})", "    var sums = nums.map { $0.digits }\n    sums.sort { $0.0 <\
    \ $1.0 }\n    return sums.map { $0.sum }", "    var result: [Int] = []\n    var\
    \ sum: Int = 0\n    for n in nums {\n        sum += n\n    }\n    for n in nums\
    \ {\n        if sum == n {\n            result.append(n)\n        }\n    }\n \
    \   return result", "    let sum = nums.reduce(0) { $0 + $1 }\n    return nums.sorted\
    \ { $0.digits < $1.digits || ($0.digits == $1.digits && $0.index > $1.index) }",
  "    let numsSorted = nums.sorted { $0.digits < $1.digits }\n    return numsSorted",
  "    var numsSorted = [Int]()\n    var sum = 0\n    for num in nums {\n        sum\
    \ += num\n        numsSorted.append(num)\n    }\n    var numsSortedCopy = numsSorted.copy()\n\
    \    numsSorted.sortInPlace()\n    var numsSortedCopy = numsSorted.copy()\n  \
    \  var i = 0\n    while i < numsSorted.count {\n        if numsSorted[i] != numsSortedSorted[i]\
    \ {\n            swap(&numsSorted[i], &numsSortedSorted[i])\n        }\n     \
    \   i += 1\n    }\n    return numsSorted", "    var numsSorted = [Int]()\n   \
    \ var sum = 0\n    for n in nums {\n        sum += n\n        numsSorted.append(n)\n\
    \    }\n    var i = 0\n    for n in numsSorted {\n        if sum < n {\n     \
    \       swap(&nums[i], &nums[sum])\n            sum += nums[i]\n        }\n  \
    \      i += 1\n    }\n    return nums", "    var numsSorted = [Int]()\n    var\
    \ sum = 0\n    for num in nums {\n        sum += num\n        numsSorted.append(num)\n\
    \    }\n    var numsSortedBySum = [Int]()\n    for num in numsSorted {\n     \
    \   if sum == num {\n            numsSortedBySum.append(num)\n        }\n    }\n\
    \    return numsSortedBySum", "    var result = [Int]()\n    var sum = 0\n   \
    \ for n in nums {\n        sum += n\n    }\n    for n in nums {\n        if sum\
    \ < n {\n            result.insert(sum, at: 0)\n            sum += n\n       \
    \ } else {\n            result.insert(n, at: 0)\n            sum -= n\n      \
    \  }\n    }\n    return result", "    var result = [Int]()\n    var sum = 0\n\
    \    for n in nums {\n        sum += n\n    }\n    for n in nums {\n        if\
    \ sum == n {\n            result.append(n)\n        }\n    }\n    return result",
  "    var result: [Int] = []\n    var sum: Int = 0\n    for n in nums {\n       \
    \ sum += n\n    }\n    for n in nums {\n        if sum == n {\n            result.append(n)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for n in\
    \ nums {\n        var sum = 0\n        for d in n.toString() {\n            sum\
    \ += Int(d)!\n        }\n        result.insert(sum, at: result.index(of: sum))\n\
    \    }\n    return result", "    return nums.sorted(by: { (num1, num2) in\n  \
    \      let sum1 = num1.reduce(0, +) + 10\n        let sum2 = num2.reduce(0, +)\
    \ + 10\n        return sum1 > sum2\n    })", "    var sums = nums.reduce([Int]())\
    \ { $0 + [$1] }\n    sums.sort { $0.0 < $1.0 }\n    return sums", "    var numsSorted\
    \ = [Int]()\n    var sum = 0\n    for n in nums {\n        sum += n\n        numsSorted.append(n)\n\
    \    }\n    var numsSortedBySum = [Int]()\n    var sumBySum = [Int]()\n    for\
    \ n in nums {\n        sumBySum[sum] = n\n        sum += n\n    }\n    for n in\
    \ numsSorted {\n        if let index = sumBySum.index(of: n) {\n            numsSortedBySum.append(numsSorted[index])\n\
    \        }\n    }\n    return numsSortedBySum", "    var result = [Int]()\n  \
    \  var sum = 0\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aDigit = a % 10\n\
    \        let bDigit = b % 10\n        return aDigit > bDigit || (aDigit == bDigit\
    \ && a.compareTo(b) == .orderedAscending)\n    })\n    return result", "    var\
    \ result = [Int]()\n    for n in nums {\n        let sum = n.reduce(0, combine:\
    \ +)\n        result.append(sum)\n    }\n    return result.sorted()", "    var\
    \ result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum += n\n \
    \   }\n    for n in nums {\n        if sum == n {\n            result.append(n)\n\
    \        }\n    }\n    return result", "    var numsSorted = nums\n    numsSorted.sort()\n\
    \    return numsSorted", "    var numsSorted = [Int]()\n    var sum = 0\n    for\
    \ n in nums {\n        sum += n\n        numsSorted.append(n)\n    }\n    var\
    \ i = 0\n    for n in nums {\n        if sum < n {\n            swap(&nums[i],\
    \ &nums[sum])\n            sum += nums[i]\n            i += 1\n        }\n   \
    \ }\n    return numsSorted", "    var numsSorted = [Int]()\n    var sum = 0\n\
    \    for n in nums {\n        sum += n\n        numsSorted.append(n)\n    }\n\
    \    var numsSortedBySum = [Int]()\n    for n in numsSorted {\n        if sum\
    \ == n {\n            numsSortedBySum.append(n)\n        }\n    }\n    return\
    \ numsSortedBySum", "    var result = [Int]()\n    var sum = 0\n    for n in nums\
    \ {\n        sum += n\n    }\n    for n in nums {\n        if sum < n {\n    \
    \        result.append(n)\n        }\n    }\n    return result", "    var sums\
    \ = nums.map { $0.reduce(0) { $0 + $1 % 10 } }\n    sums.sort { $0 < $1 }\n  \
    \  return sums.map { nums[$0] }", "    var sums = nums.map{ $0.reduce(0,+) }\n\
    \    sums.sort{ $0 < $1 }\n    return sums.map{ nums[$0] }", "    var result =\
    \ [Int]()\n    var sum = 0\n    for n in nums {\n        sum += n\n    }\n   \
    \ for n in nums {\n        if sum == n {\n            result.append(n)\n     \
    \   }\n    }\n    return result", "    var numsSorted = [Int]()\n    var sum =\
    \ 0\n    for num in nums {\n        sum += num\n        numsSorted.append(num)\n\
    \    }\n    var i = 0\n    for num in numsSorted {\n        if sum != num {\n\
    \            swap(&numsSorted[i], &numsSorted[numsSorted.index(num)!])\n     \
    \       i += 1\n        }\n    }\n    return numsSorted", "    var sum = 0\n \
    \   var result = [Int]()\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort { sum - $0 }\n    return result", "    var numsSorted\
    \ = [Int]()\n    var sum = 0\n    for num in nums {\n        sum += num\n    \
    \    numsSorted.append(num)\n    }\n    var numsSorted2 = numsSorted\n    for\
    \ num in numsSorted {\n        var index = numsSorted2.index(of: num)\n      \
    \  numsSorted2.remove(at: index)\n        numsSorted2.insert(num, at: index)\n\
    \    }\n    return numsSorted2", "    var sums = nums.map { $0.reduce(0) { $0\
    \ + $1 % 10 } }\n    sums.sort { $0.0 < $1.0 }\n    return sums.map { $0 / 10\
    \ }", "    var result = [Int]()\n    var sum = 0\n    for n in nums {\n      \
    \  sum += n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) ->\
    \ Bool in\n        let aSum = sum - a\n        let bSum = sum - b\n        return\
    \ aSum < bSum\n    })\n    return result", "    var sum: Int = 0\n    var result:\
    \ [Int] = []\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort { $0.0 < $1.0 }\n    return result", "    var result =\
    \ [Int]()\n    var sum = 0\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = a.map { $0\
    \ }.reduce(0) { $0 + $1 }\n        let bSum = b.map { $0 }.reduce(0) { $0 + $1\
    \ }\n        return aSum < bSum\n    })\n    return result", "    let sum = nums.reduce(0,\
    \ combine: +)\n    return nums.sorted { $0.reduce(0, combine: +) < $1.reduce(0,\
    \ combine: +) }", "    let numsSorted = nums.sorted { $0.digits < $1.digits }\n\
    \    return numsSorted", "    var numsSorted = nums\n    var sum = 0\n    for\
    \ num in numsSorted {\n        sum += num\n    }\n    var i = 0\n    for num in\
    \ numsSorted {\n        if sum < num {\n            numsSorted.swapAt(i, numsSorted.index(num,\
    \ offsetBy: i))\n            i += 1\n        }\n    }\n    return numsSorted",
  "    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        let aSumDigit = Int(truncating:\
    \ aSum % 10)\n        let bSumDigit = Int(truncating: bSum % 10)\n        return\
    \ aSumDigit < bSumDigit\n    })\n    return result", "    var numsSorted = [Int]()\n\
    \    var sum = 0\n    for n in nums {\n        sum += n\n        numsSorted.append(n)\n\
    \    }\n    var index = 0\n    for n in nums {\n        if sum == n {\n      \
    \      numsSorted.append(nums[index])\n            index += 1\n        }\n   \
    \ }\n    return numsSorted", "    var result: [Int] = []\n    var sum: Int = 0\n\
    \    for n in nums {\n        sum += n\n    }\n    for n in nums {\n        if\
    \ sum < n {\n            result.append(n)\n            sum += n\n        }\n \
    \   }\n    return result", "    var result = [Int]()\n    var sum = 0\n    for\
    \ n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort\
    \ { $0.0 < $1.0 }\n    return result", "    var numsSorted = [Int]()\n    var\
    \ sum = 0\n    for n in nums {\n        sum += n\n        numsSorted.append(n)\n\
    \    }\n    var numsSorted2 = numsSorted.sorted()\n    var numsSorted3 = numsSorted2.sorted()\n\
    \    var numsSorted4 = numsSorted3.sorted()\n    var numsSorted5 = numsSorted4.sorted()\n\
    \    var numsSorted6 = numsSorted5.sorted()\n    var numsSorted7 = numsSorted6.sorted()\n\
    \    var numsSorted8 = numsSorted7.sorted()\n    var numsSorted9 = numsSorted8.sorted()\n\
    \    var numsSorted10 = numsSorted9.sorted()\n    var numsSorted11 = numsSorted10.sorted()\n\
    \    var numsSorted12 = numsSorted11.sorted()\n    var numsSorted13 = numsSorted12.sorted()\n\
    \    var numsSorted14 = numsSorted13.sorted()\n    var numsSorted15 = numsSorted14.sorted()\n\
    \    var numsSorted16 = numsSorted15.sorted()\n    var numsSorted17 = numsSorted16.sorted()\n\
    \    var numsSorted18 = numsSorted17.sorted()\n    var numsSorted19 = numsSorted18.sorted()\n\
    \    var numsSorted20 = numsSorted19.sorted()\n    var numsSorted21 = numsSorted20.sorted()\n\
    \    var numsSorted22 = numsSorted21.sorted()\n    var numsSorted23 = numsSorted22.sorted()\n\
    \    var numsSorted24 = numsSorted23.sorted()\n    var numsSorted25 = numsSorted24.sorted()\n\
    \    var numsSorted26 = numsSorted25.sorted()\n    var numsSorted27 = numsSorted26.sorted()\n\
    \    var numsSorted28 = numsSorted27.sorted()\n    var numsSorted29 = numsSorted28.sorted()\n\
    \    var numsSorted30 = numsSorted29.sorted()\n    var numsSorted31 = numsSorted30.sorted()\n\
    \    var numsSorted32 = numsSorted31.sorted()\n    var numsSorted33 = numsSorted32.sorted()\n\
    \    var numsSorted34 = numsSorted33.sorted()\n    var numsSorted35 = numsSorted34.sorted()\n\
    \    var numsSorted36 = numsSorted35.sorted()\n    var numsSorted37 = numsSorted36.sorted()\n\
    \    var numsSorted38 = numsSorted37.sorted()\n    var numsSorted39 = numsSorted38",
  "    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    var sorted = [Int]()\n    var index\
    \ = 0\n    while index < result.count {\n        if sum < result[index] {\n  \
    \          sorted.append(result[index])\n            sum += result[index]\n  \
    \          index += 1\n        } else {\n            sorted.append(result[index])\n\
    \            sum -= result[index]\n            index += 1\n        }\n    }\n\
    \    return sorted", "    var sum = 0\n    var result = [Int]()\n    for n in\
    \ nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort {\
    \ $0.0 < $1.0 }\n    return result", "    var result = [Int]()\n    var sum =\
    \ 0\n    for n in nums {\n        sum += n\n        result.append(n)\n    }\n\
    \    result.sort(by: { (a, b) -> Bool in\n        return sum - a < sum - b\n \
    \   })\n    return result", "    var sum: Int = 0\n    var result: [Int] = []\n\
    \    for n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sortInPlace()\n\
    \    return result", "    return nums.sorted(by: {\n        let sumOfDigits =\
    \ $0.reduce(0, +) + $1.reduce(0, +)\n        return sumOfDigits > $1.reduce(0,\
    \ +) ? 1 : sumOfDigits < $1.reduce(0, +) ? -1 : 0\n    })", "    var numsSorted\
    \ = nums\n    var sum = 0\n    for n in numsSorted {\n        sum += n\n     \
    \   numsSorted.remove(at: numsSorted.index(of: n))\n    }\n    return numsSorted.sorted(by:\
    \ { $0 + $1 < $1 })", "    var result = [Int]()\n    var sum = 0\n    for num\
    \ in nums {\n        sum += num\n    }\n    for num in nums {\n        if sum\
    \ == num {\n            result.append(num)\n        }\n    }\n    return result",
  "    var numsSorted = [Int]()\n    var sum = 0\n    for num in nums {\n        sum\
    \ += num\n        numsSorted.append(num)\n    }\n    var numsSortedCopy = numsSorted\n\
    \    \n    var index = 0\n    while index < numsSorted.count {\n        if sum\
    \ < numsSorted[index] {\n            swap(&numsSortedCopy[index], &numsSorted[index])\n\
    \        }\n        index += 1\n    }\n    return numsSortedCopy", "    var sum\
    \ = 0\n    var result = [Int]()\n    for n in nums {\n        sum += n\n     \
    \   result.append(n)\n    }\n    result.sort { $0.0 < $1.0 }\n    return result",
  "    var numsSorted = nums\n    var sum = 0\n    for n in numsSorted {\n       \
    \ sum += n\n        numsSorted.remove(at: numsSorted.index(of: n))\n    }\n  \
    \  return numsSorted.sorted(by: { $0 + $1 < $1 })", "    var result = [Int]()\n\
    \    var sum = 0\n    for n in nums {\n        sum += n\n    }\n    for n in nums\
    \ {\n        if sum == n {\n            result.append(n)\n        }\n    }\n \
    \   return result", "    var numsSorted = [Int]()\n    var sum = 0\n    for num\
    \ in nums {\n        sum += num\n        numsSorted.append(num)\n    }\n    var\
    \ numsSortedBySum = [Int]()\n    for num in numsSorted {\n        if sum == num\
    \ {\n            numsSortedBySum.append(num)\n        }\n    }\n    return numsSortedBySum",
  "    var sums = [Int]()\n    var points = [Int]()\n    for n in nums {\n       \
    \ sums.append(n.toInt())\n        points.append(n)\n    }\n    points.sort(by:\
    \ {sums[$0] > sums[$1]})\n    return points", "    var numsSorted = [Int]()\n\
    \    var sum = 0\n    for n in nums {\n        sum += n\n        numsSorted.append(n)\n\
    \    }\n    var index = 0\n    while index < nums.count {\n        if sum < nums[index]\
    \ {\n            swap(&nums[index], &nums[sum])\n            sum += nums[index]\n\
    \            index++\n        } else {\n            sum -= nums[index]\n     \
    \       index++\n        }\n    }\n    return numsSorted", "    var result = [Int]()\n\
    \    var sum = 0\n    for n in nums {\n        sum += n\n    }\n    for n in nums\
    \ {\n        if sum < n {\n            result.insert(sum, at: 0)\n           \
    \ sum += n\n        } else {\n            result.insert(n, at: 0)\n          \
    \  sum -= n\n        }\n    }\n    return result", "    var sums = nums.map {\
    \ $0.reduce(0) { $0 + $1 } }\n    sums.sort { $0 < $1 }\n    return sums.map {\
    \ nums[$0] }", "    var result = [Int]()\n    var sum = 0\n    for n in nums {\n\
    \        sum += n\n        result.append(n)\n    }\n    result.sort(by: { (n1,\
    \ n2) -> Bool in\n        let diff1 = sum - n1\n        let diff2 = sum - n2\n\
    \        return diff1 < diff2\n    })\n    return result", "    var numsSorted\
    \ = [Int]()\n    var sum = 0\n    for n in nums {\n        sum += n\n        numsSorted.append(n)\n\
    \    }\n    var index = 0\n    for n in nums {\n        if sum == 0 {\n      \
    \      numsSorted.append(n)\n        } else {\n            sum -= nums[index]\n\
    \            numsSorted.append(n)\n        }\n        index++\n    }\n    return\
    \ numsSorted", "    var numsSorted = [Int]()\n    var sum = 0\n    for n in nums\
    \ {\n        sum += n\n        numsSorted.append(n)\n    }\n    \n    var numsSortedBySum\
    \ = [Int]()\n    for n in nums {\n        if sum == n {\n            numsSortedBySum.append(n)\n\
    \        }\n    }\n    \n    return numsSortedBySum", "    var sum = 0\n    var\
    \ result = [Int]()\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        return sum - a < sum\
    \ - b\n    })\n    return result", "    var sums = nums.map { $0.reduce(0) { $0\
    \ + $1 % 10 } }\n    sums.sort { $0.0 < $1.0 }\n    return sums.map { $0 / 10\
    \ }", "    var sum = 0\n    var result = [Int]()\n    for n in nums {\n      \
    \  sum += n\n        result.append(n)\n    }\n    return result.sorted(by: { (a,\
    \ b) -> Bool in\n        return sum - a < sum - b\n    })", '    return nums.sorted(by:
    { ($0 as Int).digitSum() < ($1 as Int).digitSum() })', "    var result = [Int]()\n\
    \    var sum = 0\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    var sorted = [Int]()\n    for n in result {\n        if sum == 0 {\n\
    \            sorted.append(n)\n        } else {\n            sum -= n\n      \
    \      if sum < 0 {\n                sum = 0\n            }\n            sorted.append(n)\n\
    \        }\n    }\n    return sorted", "    var result = [Int]()\n    var sum\
    \ = 0\n    for n in nums {\n        sum += n\n        result.append(n)\n    }\n\
    \    result.sort(by: { (a, b) -> Bool in\n        let aSum = sum\n        let\
    \ bSum = sum\n        sum = aSum + b\n        return sum < bSum\n    })\n    return\
    \ result", "    var result = [Int]()\n    var sum = 0\n    for n in nums {\n \
    \       sum += n\n        result.append(n)\n    }\n    result.sort(by: { (a, b)\
    \ -> Bool in\n        let aSum = sum - a\n        let bSum = sum - b\n       \
    \ return aSum < bSum\n    })\n    return result", "    var numsSorted = [Int]()\n\
    \    var sum = 0\n    for n in nums {\n        sum += n\n        numsSorted.append(n)\n\
    \    }\n    var i = 0\n    for n in nums {\n        if sum < n {\n           \
    \ swap(&nums[i], &nums[sum])\n            sum += nums[i]\n            i += 1\n\
    \        }\n    }\n    return numsSorted", "    let sum = nums.reduce(0, combine:\
    \ +)\n    return nums.sorted(by: { $0.reduce(0, combine: +) > $1.reduce(0, combine:\
    \ +) })"]
stop_tokens:
- "\n}"
