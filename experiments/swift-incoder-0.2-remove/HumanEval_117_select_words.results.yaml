language: swift
name: HumanEval_117_select_words
results:
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpeap9r23u/tmpeap9r23u.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0facfa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0facc9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0facc9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0facc9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeap9r23u                        0x000055ba4819c4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b0fad194460 __libc_start_main +
    245

    6    tmpeap9r23u                        0x000055ba4819c0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    \n    if s == \"\" {\n        return result\n    }\n    \n\
    \    for c in s.characters {\n        if c == \" \" {\n            continue\n\
    \        }\n        \n        if s.rangeOfString(c).location == s.characters.endIndex\
    \ {\n            if n == 1 {\n                result.append(c)\n            }\
    \ else {\n                for i in 1..<n {\n                    result.append(c)\n\
    \                }\n            }\n        }\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpyimrx5a5.swift:15:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpyimrx5a5.swift:20:14:\
    \ error: value of type 'String' has no member 'rangeOfString'\n        if s.rangeOfString(c).location\
    \ == s.characters.endIndex {\n           ~ ^~~~~~~~~~~~~\n/tmp/tmpyimrx5a5.swift:22:31:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result.append(c)\n                              ^\n/tmp/tmpyimrx5a5.swift:25:35:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                    result.append(c)\n                                  ^\n"
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    \n    if s == \"\" {\n        return result\n    }\n    \n\
    \    for char in s.characters {\n        if char.unicodeScalars.filter({ $0.isConsonant()\
    \ }).count == n {\n            result.append(String(char))\n        }\n    }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1_0l2bm0.swift:15:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp1_0l2bm0.swift:16:44:\
    \ error: value of type 'Unicode.Scalar' has no member 'isConsonant'\n        if\
    \ char.unicodeScalars.filter({ $0.isConsonant() }).count == n {\n            \
    \                            ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    if s == \"\" {\n        return result\n    }\n    \n    for\
    \ c in s {\n        if c.isConsonant() {\n            if n == 1 {\n          \
    \      result.append(c)\n            } else {\n                select_words(s.substring(n),\
    \ n - 1)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpz7qe8xt0.swift:15:14: error: value of type 'Character' has no member\
    \ 'isConsonant'\n        if c.isConsonant() {\n           ~ ^~~~~~~~~~~\n/tmp/tmpz7qe8xt0.swift:17:31:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result.append(c)\n                              ^\n/tmp/tmpz7qe8xt0.swift:19:29:\
    \ error: missing argument labels 's:n:' in call\n                select_words(s.substring(n),\
    \ n - 1)\n                            ^\n                             s:     \
    \         n: \n/tmp/tmpz7qe8xt0.swift:19:32: error: value of type 'String' has\
    \ no member 'substring'\n                select_words(s.substring(n), n - 1)\n\
    \                             ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpeap9r23u/tmpeap9r23u.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0facfa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0facc9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0facc9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0facc9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeap9r23u                        0x000055ba4819c4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b0fad194460 __libc_start_main +
    245

    6    tmpeap9r23u                        0x000055ba4819c0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    if s == \"\" {\n        return result\n    }\n    \n    var\
    \ count = 0\n    var lastChar = s[0]\n    var lastWord = \"\"\n    \n    for char\
    \ in s {\n        if char == lastChar {\n            count += 1\n        } else\
    \ {\n            if count == n {\n                result.append(lastWord)\n  \
    \              count = 0\n            }\n            lastChar = char\n       \
    \     lastWord = String(char)\n            count = 1\n        }\n    }\n    \n\
    \    if count > n {\n        result.append(lastWord)\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkl4qz_ms.swift:15:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    \n    if s == \"\" {\n        return result\n    }\n    \n\
    \    let letters = Array(s.characters)\n    \n    for letter in letters {\n  \
    \      if letter == \" \" {\n            continue\n        }\n        \n     \
    \   let count = letters.filter({ $0 == letter }).count\n        \n        if count\
    \ == n {\n            result.append(String(letter))\n        }\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp89uf4pyo.swift:15:27: error: 'characters' is unavailable: Please\
    \ use String directly\n    let letters = Array(s.characters)\n               \
    \           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    if s == \"\" {\n        return result\n    }\n    var i =\
    \ 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n\
    \    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n \
    \   var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n  \
    \  var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n   \
    \ var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var\
    \ i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n\
    \ = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s =\
    \ 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n\
    \    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n \
    \   var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n  \
    \  var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n   \
    \ var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var\
    \ s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x\
    \ = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c =\
    \ 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n\
    \    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n \
    \   var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n  \
    \  var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n   \
    \ var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var\
    \ c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h\
    \ = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m =\
    \ 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n\
    \    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n \
    \   var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n  \
    \  var c = 0\n    var d = 0\n    var e\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpo_7t5njw.swift:39:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmpo_7t5njw.swift:13:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmpo_7t5njw.swift:40:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmpo_7t5njw.swift:14:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmpo_7t5njw.swift:41:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmpo_7t5njw.swift:15:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmpo_7t5njw.swift:42:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmpo_7t5njw.swift:16:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmpo_7t5njw.swift:43:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmpo_7t5njw.swift:17:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmpo_7t5njw.swift:44:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmpo_7t5njw.swift:18:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmpo_7t5njw.swift:45:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmpo_7t5njw.swift:19:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmpo_7t5njw.swift:46:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmpo_7t5njw.swift:20:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmpo_7t5njw.swift:47:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmpo_7t5njw.swift:21:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmpo_7t5njw.swift:48:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmpo_7t5njw.swift:22:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmpo_7t5njw.swift:49:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmpo_7t5njw.swift:23:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmpo_7t5njw.swift:50:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmpo_7t"
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpeap9r23u/tmpeap9r23u.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0facfa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0facc9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0facc9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0facc9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeap9r23u                        0x000055ba4819c4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b0fad194460 __libc_start_main +
    245

    6    tmpeap9r23u                        0x000055ba4819c0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    // TODO:\
    \ implement select_words\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp_qnj0hu7/tmp_qnj0hu7.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1946aa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b194679fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b194679f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b194679e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_qnj0hu7                        0x000055efd5a504c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b1946c94460 __libc_start_main +
    245

    6    tmp_qnj0hu7                        0x000055efd5a500c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpeap9r23u/tmpeap9r23u.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0facfa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0facc9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0facc9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0facc9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeap9r23u                        0x000055ba4819c4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b0fad194460 __libc_start_main +
    245

    6    tmpeap9r23u                        0x000055ba4819c0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    \n    if s == \"\" {\n        return result\n    }\n    \n\
    \    for c in s {\n        if c.isConsonant() {\n            if n == 1 {\n   \
    \             result.append(c)\n            } else {\n                for _ in\
    \ 1...n {\n                    result.append(c)\n                }\n         \
    \   }\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpn3zxft0l.swift:16:14: error: value of type 'Character' has no member\
    \ 'isConsonant'\n        if c.isConsonant() {\n           ~ ^~~~~~~~~~~\n/tmp/tmpn3zxft0l.swift:18:31:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result.append(c)\n                              ^\n/tmp/tmpn3zxft0l.swift:21:35:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                    result.append(c)\n                                  ^\n"
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    // Your\
    \ code here\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmp4u3nddkf.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpeap9r23u/tmpeap9r23u.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0facfa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0facc9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0facc9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0facc9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeap9r23u                        0x000055ba4819c4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b0fad194460 __libc_start_main +
    245

    6    tmpeap9r23u                        0x000055ba4819c0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpeap9r23u/tmpeap9r23u.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0facfa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0facc9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0facc9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0facc9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeap9r23u                        0x000055ba4819c4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b0fad194460 __libc_start_main +
    245

    6    tmpeap9r23u                        0x000055ba4819c0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpeap9r23u/tmpeap9r23u.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0facfa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0facc9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0facc9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0facc9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeap9r23u                        0x000055ba4819c4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b0fad194460 __libc_start_main +
    245

    6    tmpeap9r23u                        0x000055ba4819c0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    if s == \"\" {\n        return result\n    }\n    var i =\
    \ 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n\
    \    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n \
    \   var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n  \
    \  var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n   \
    \ var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var\
    \ i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n\
    \ = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s =\
    \ 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n\
    \    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n \
    \   var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n  \
    \  var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n   \
    \ var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var\
    \ s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x\
    \ = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c =\
    \ 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n\
    \    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n \
    \   var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n  \
    \  var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n   \
    \ var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var\
    \ c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h\
    \ = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m =\
    \ 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n\
    \    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n \
    \   var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n  \
    \  var c = 0\n    var d = 0\n    var e\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpo_7t5njw.swift:39:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmpo_7t5njw.swift:13:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmpo_7t5njw.swift:40:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmpo_7t5njw.swift:14:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmpo_7t5njw.swift:41:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmpo_7t5njw.swift:15:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmpo_7t5njw.swift:42:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmpo_7t5njw.swift:16:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmpo_7t5njw.swift:43:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmpo_7t5njw.swift:17:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmpo_7t5njw.swift:44:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmpo_7t5njw.swift:18:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmpo_7t5njw.swift:45:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmpo_7t5njw.swift:19:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmpo_7t5njw.swift:46:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmpo_7t5njw.swift:20:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmpo_7t5njw.swift:47:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmpo_7t5njw.swift:21:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmpo_7t5njw.swift:48:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmpo_7t5njw.swift:22:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmpo_7t5njw.swift:49:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmpo_7t5njw.swift:23:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmpo_7t5njw.swift:50:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmpo_7t"
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    \n    if s == \"\" {\n        return result\n    }\n    \n\
    \    var count = 0\n    \n    for letter in s {\n        if letter == \" \" {\n\
    \            count += 1\n            if count == n {\n                result.append(\"\
    \\n\")\n                count = 0\n            }\n        } else {\n         \
    \   count = 0\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmplt_l5lya/tmplt_l5lya.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c578efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c575e6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c575e6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c575e57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplt_l5lya                        0x0000555dac3fc774 <unavailable> + 6004

    5    libc.so.6                          0x00002b3c57adb460 __libc_start_main +
    245

    6    tmplt_l5lya                        0x0000555dac3fc379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    \n    if s == \"\" {\n        return result\n    }\n    \n\
    \    for letter in s.characters {\n        if letter == \" \" {\n            continue\n\
    \        }\n        \n        if s.characters.filter({ $0 == letter }).count ==\
    \ n {\n            result.append(String(letter))\n        }\n    }\n    \n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmppq_1ix86.swift:15:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in s.characters {\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmppq_1ix86.swift:20:14:\
    \ error: 'characters' is unavailable: Please use String directly\n        if s.characters.filter({\
    \ $0 == letter }).count == n {\n             ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    \n    if s == \"\" {\n        return result\n    }\n    \n\
    \    for char in s.characters {\n        if char.unicodeScalars.filter({ $0.isConsonant()\
    \ }).count == n {\n            result.append(String(char))\n        }\n    }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1_0l2bm0.swift:15:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp1_0l2bm0.swift:16:44:\
    \ error: value of type 'Unicode.Scalar' has no member 'isConsonant'\n        if\
    \ char.unicodeScalars.filter({ $0.isConsonant() }).count == n {\n            \
    \                            ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpeap9r23u/tmpeap9r23u.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0facfa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0facc9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0facc9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0facc9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeap9r23u                        0x000055ba4819c4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b0fad194460 __libc_start_main +
    245

    6    tmpeap9r23u                        0x000055ba4819c0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpeap9r23u/tmpeap9r23u.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0facfa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0facc9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0facc9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0facc9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeap9r23u                        0x000055ba4819c4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b0fad194460 __libc_start_main +
    245

    6    tmpeap9r23u                        0x000055ba4819c0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpeap9r23u/tmpeap9r23u.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0facfa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0facc9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0facc9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0facc9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeap9r23u                        0x000055ba4819c4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b0fad194460 __libc_start_main +
    245

    6    tmpeap9r23u                        0x000055ba4819c0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpeap9r23u/tmpeap9r23u.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0facfa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0facc9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0facc9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0facc9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeap9r23u                        0x000055ba4819c4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b0fad194460 __libc_start_main +
    245

    6    tmpeap9r23u                        0x000055ba4819c0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpeap9r23u/tmpeap9r23u.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0facfa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0facc9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0facc9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0facc9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeap9r23u                        0x000055ba4819c4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b0fad194460 __libc_start_main +
    245

    6    tmpeap9r23u                        0x000055ba4819c0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpeap9r23u/tmpeap9r23u.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0facfa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0facc9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0facc9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0facc9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeap9r23u                        0x000055ba4819c4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b0fad194460 __libc_start_main +
    245

    6    tmpeap9r23u                        0x000055ba4819c0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    // TODO:\
    \ write your code in Swift 4.2\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"\
    ])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\", \"\
    lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmphzj5dwcz/tmphzj5dwcz.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b81ff9c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81ff6bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81ff6bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81ff6be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphzj5dwcz                        0x000055da618fa4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b81ffbb4460 __libc_start_main +
    245

    6    tmphzj5dwcz                        0x000055da618fa0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    \n    if s == \"\" {\n        return result\n    }\n    \n\
    \    for char in s.characters {\n        if char.unicodeScalars.filter({ $0.isConsonant()\
    \ }).count == n {\n            result.append(String(char))\n        }\n    }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1_0l2bm0.swift:15:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp1_0l2bm0.swift:16:44:\
    \ error: value of type 'Unicode.Scalar' has no member 'isConsonant'\n        if\
    \ char.unicodeScalars.filter({ $0.isConsonant() }).count == n {\n            \
    \                            ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    // TODO:\
    \ implement select_words\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp_qnj0hu7/tmp_qnj0hu7.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1946aa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b194679fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b194679f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b194679e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_qnj0hu7                        0x000055efd5a504c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b1946c94460 __libc_start_main +
    245

    6    tmp_qnj0hu7                        0x000055efd5a500c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    \n    if s == \"\" {\n        return result\n    }\n    \n\
    \    for char in s.characters {\n        if char.unicodeScalars.filter({ $0.isConsonant()\
    \ }).count == n {\n            result.append(String(char))\n        }\n    }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1_0l2bm0.swift:15:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp1_0l2bm0.swift:16:44:\
    \ error: value of type 'Unicode.Scalar' has no member 'isConsonant'\n        if\
    \ char.unicodeScalars.filter({ $0.isConsonant() }).count == n {\n            \
    \                            ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpeap9r23u/tmpeap9r23u.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0facfa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0facc9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0facc9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0facc9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeap9r23u                        0x000055ba4819c4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b0fad194460 __libc_start_main +
    245

    6    tmpeap9r23u                        0x000055ba4819c0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    \n    if s == \"\" {\n        return result\n    }\n    \n\
    \    for char in s.characters {\n        if char.unicodeScalars.filter({ $0.isConsonant()\
    \ }).count == n {\n            result.append(String(char))\n        }\n    }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1_0l2bm0.swift:15:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp1_0l2bm0.swift:16:44:\
    \ error: value of type 'Unicode.Scalar' has no member 'isConsonant'\n        if\
    \ char.unicodeScalars.filter({ $0.isConsonant() }).count == n {\n            \
    \                            ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpeap9r23u/tmpeap9r23u.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0facfa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0facc9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0facc9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0facc9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeap9r23u                        0x000055ba4819c4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b0fad194460 __libc_start_main +
    245

    6    tmpeap9r23u                        0x000055ba4819c0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    // TODO:\
    \ implement this\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpe_v3gpt2/tmpe_v3gpt2.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b871bc1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b871b915b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b871b915988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b871b9147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe_v3gpt2                        0x0000560b56a984c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b871be0a460 __libc_start_main +
    245

    6    tmpe_v3gpt2                        0x0000560b56a980c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    // TODO:\
    \ write your code in Swift 4.2\n    var result = [String]()\n    \n    if s ==\
    \ \"\" {\n        return result\n    }\n    \n    var i = 0\n    var j = 0\n \
    \   var k = 0\n    var l = 0\n    var m = 0\n    \n    while i < s.count {\n \
    \       if s[i] == \"a\" {\n            j = i + 1\n            while j < s.count\
    \ {\n                if s[j] != \"a\" && s[j] != \"e\" && s[j] != \"i\" && s[j]\
    \ != \"o\" && s[j] != \"u\" {\n                    k = j + 1\n               \
    \     while k < s.count {\n                        if s[k] != \"a\" && s[k] !=\
    \ \"e\" && s[k] != \"i\" && s[k] != \"o\" && s[k] != \"u\" {\n               \
    \             l = k + 1\n                            while l < s.count {\n   \
    \                             if s[l] != \"a\" && s[l] != \"e\" && s[l] != \"\
    i\" && s[l] != \"o\" && s[l] != \"u\" {\n                                    m\
    \ = l + 1\n                                    while m < s.count {\n         \
    \                               if s[m] != \"a\" && s[m] != \"e\" && s[m] != \"\
    i\" && s[m] != \"o\" && s[m] != \"u\" {\n                                    \
    \        result.append(s.substring(i, j))\n                                  \
    \          i = m\n                                            break\n        \
    \                                }\n                                        m\
    \ += 1\n                                    }\n                              \
    \      break\n                                }\n                            \
    \    l += 1\n                            }\n                            break\n\
    \                        }\n                        k += 1\n                 \
    \   }\n                    break\n                }\n                j += 1\n\
    \            }\n            break\n        }\n        i += 1\n    }\n    \n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp51k5gupg.swift:23:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s[i] ==\
    \ \"a\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmp51k5gupg.swift:26:20: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \                if s[j] != \"a\" && s[j] != \"e\" && s[j] != \"i\" && s[j] !=\
    \ \"o\" && s[j] != \"u\" {\n                   ^~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp51k5gupg.swift:26:35: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n                if s[j] != \"a\" && s[j] != \"e\" && s[j] != \"i\"\
    \ && s[j] != \"o\" && s[j] != \"u\" {\n                                  ^~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp51k5gupg.swift:26:50:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n                if s[j] != \"a\" && s[j] != \"\
    e\" && s[j] != \"i\" && s[j] != \"o\" && s[j] != \"u\" {\n                   \
    \                              ^~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp51k5gupg.swift:26:65: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \                if s[j] != \"a\" && s[j] != \"e\" && s[j] != \"i\" && s[j] !=\
    \ \"o\" && s[j] != \"u\" {\n                                                 \
    \               ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmp51k5gupg.swift:26:80: error: 's"
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    \n    if s == \"\" {\n        return result\n    }\n    \n\
    \    for letter in s.characters {\n        if letter.isConsonant() {\n       \
    \     if result.count < n {\n                result.append(String(letter))\n \
    \           }\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2nt4n6yl.swift:15:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in s.characters {\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp2nt4n6yl.swift:16:19:\
    \ error: value of type 'Character' has no member 'isConsonant'\n        if letter.isConsonant()\
    \ {\n           ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpeap9r23u/tmpeap9r23u.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0facfa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0facc9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0facc9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0facc9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeap9r23u                        0x000055ba4819c4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b0fad194460 __libc_start_main +
    245

    6    tmpeap9r23u                        0x000055ba4819c0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    \n    if s.isEmpty {\n        return result\n    }\n    \n\
    \    for char in s.characters {\n        if char.unicodeScalars.filter({ $0.isConsonant()\
    \ }).count == n {\n            result.append(String(char))\n        }\n    }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpotgfoo6s.swift:15:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpotgfoo6s.swift:16:44:\
    \ error: value of type 'Unicode.Scalar' has no member 'isConsonant'\n        if\
    \ char.unicodeScalars.filter({ $0.isConsonant() }).count == n {\n            \
    \                            ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpeap9r23u/tmpeap9r23u.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0facfa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0facc9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0facc9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0facc9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeap9r23u                        0x000055ba4819c4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b0fad194460 __libc_start_main +
    245

    6    tmpeap9r23u                        0x000055ba4819c0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpeap9r23u/tmpeap9r23u.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0facfa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0facc9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0facc9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0facc9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeap9r23u                        0x000055ba4819c4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b0fad194460 __libc_start_main +
    245

    6    tmpeap9r23u                        0x000055ba4819c0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    \n    if s == \"\" {\n        return result\n    }\n    \n\
    \    var i = 0\n    var j = 0\n    \n    for char in s {\n        if char == \"\
    a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n  \
    \          i += 1\n        }\n        if char == \"b\" || char == \"c\" || char\
    \ == \"d\" || char == \"f\" || char == \"g\" || char == \"h\" || char == \"j\"\
    \ || char == \"k\" || char == \"l\" || char == \"m\" || char == \"n\" || char\
    \ == \"p\" || char == \"q\" || char == \"r\" || char == \"s\" || char == \"t\"\
    \ || char == \"v\" || char == \"w\" || char == \"x\" || char == \"y\" || char\
    \ == \"z\" {\n            j += 1\n        }\n    }\n    \n    if i == n {\n  \
    \      result.append(\"a\")\n    }\n    if i == n {\n        result.append(\"\
    e\")\n    }\n    if i == n {\n        result.append(\"i\")\n    }\n    if i ==\
    \ n {\n        result.append(\"o\")\n    }\n    if i == n {\n        result.append(\"\
    u\")\n    }\n    if j == n {\n        result.append(\"b\")\n    }\n    if j ==\
    \ n {\n        result.append(\"c\")\n    }\n    if j == n {\n        result.append(\"\
    d\")\n    }\n    if j == n {\n        result.append(\"f\")\n    }\n    if j ==\
    \ n {\n        result.append(\"g\")\n    }\n    if j == n {\n        result.append(\"\
    h\")\n    }\n    if j == n {\n        result.append(\"j\")\n    }\n    if j ==\
    \ n {\n        result.append(\"k\")\n    }\n    if j == n {\n        result.append(\"\
    l\")\n    }\n    if j == n {\n        result.append(\"m\")\n    }\n    if j ==\
    \ n {\n        result.append(\"n\")\n    }\n    if j == n {\n        result.append(\"\
    p\")\n    }\n    if j == n {\n        result.append(\"q\")\n    }\n    if j ==\
    \ n {\n        result.append(\"r\")\n    }\n    if j == n {\n        result.append(\"\
    s\")\n    }\n    if j == n {\n        result.append(\"t\")\n    }\n    if j ==\
    \ n {\n        result.append(\"v\")\n    }\n    if j == n {\n        result.append(\"\
    w\")\n    }\n    if j == n {\n        result.append(\"x\")\n    }\n    if j ==\
    \ n {\n        result.append(\"y\")\n    }\n    if j == n {\n        result.append(\"\
    z\")\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpb6z2xvzy/tmpb6z2xvzy.swift:122: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c31f3ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c31c35b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c31c35988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c31c347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb6z2xvzy                        0x00005588425fe774 <unavailable> + 6004

    5    libc.so.6                          0x00002b0c3212a460 __libc_start_main +
    245

    6    tmpb6z2xvzy                        0x00005588425fe379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpeap9r23u/tmpeap9r23u.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0facfa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0facc9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0facc9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0facc9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeap9r23u                        0x000055ba4819c4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b0fad194460 __libc_start_main +
    245

    6    tmpeap9r23u                        0x000055ba4819c0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpeap9r23u/tmpeap9r23u.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0facfa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0facc9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0facc9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0facc9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeap9r23u                        0x000055ba4819c4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b0fad194460 __libc_start_main +
    245

    6    tmpeap9r23u                        0x000055ba4819c0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    \n    if s == \"\" {\n        return result\n    }\n    \n\
    \    for c in s {\n        if c.isConsonant() {\n            if n == 1 {\n   \
    \             result.append(c)\n            } else {\n                select_words(s.substring(n),\
    \ n - 1)\n            }\n        }\n    }\n    \n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp92glwut7.swift:16:14: error: value of type 'Character' has no member\
    \ 'isConsonant'\n        if c.isConsonant() {\n           ~ ^~~~~~~~~~~\n/tmp/tmp92glwut7.swift:18:31:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result.append(c)\n                              ^\n/tmp/tmp92glwut7.swift:20:29:\
    \ error: missing argument labels 's:n:' in call\n                select_words(s.substring(n),\
    \ n - 1)\n                            ^\n                             s:     \
    \         n: \n/tmp/tmp92glwut7.swift:20:32: error: value of type 'String' has\
    \ no member 'substring'\n                select_words(s.substring(n), n - 1)\n\
    \                             ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpeap9r23u/tmpeap9r23u.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0facfa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0facc9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0facc9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0facc9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeap9r23u                        0x000055ba4819c4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b0fad194460 __libc_start_main +
    245

    6    tmpeap9r23u                        0x000055ba4819c0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpeap9r23u/tmpeap9r23u.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0facfa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0facc9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0facc9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0facc9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeap9r23u                        0x000055ba4819c4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b0fad194460 __libc_start_main +
    245

    6    tmpeap9r23u                        0x000055ba4819c0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    \n    if s == \"\" {\n        return result\n    }\n    \n\
    \    var i = 0\n    var j = 0\n    \n    for char in s {\n        if char == \"\
    a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n  \
    \          i += 1\n        }\n        if char == \"b\" || char == \"c\" || char\
    \ == \"d\" || char == \"f\" || char == \"g\" || char == \"h\" || char == \"j\"\
    \ || char == \"k\" || char == \"l\" || char == \"m\" || char == \"n\" || char\
    \ == \"p\" || char == \"q\" || char == \"r\" || char == \"s\" || char == \"t\"\
    \ || char == \"v\" || char == \"w\" || char == \"x\" || char == \"y\" || char\
    \ == \"z\" {\n            j += 1\n        }\n    }\n    \n    if i == n {\n  \
    \      for char in s {\n            if char == \"a\" || char == \"e\" || char\
    \ == \"i\" || char == \"o\" || char == \"u\" {\n                i += 1\n     \
    \       }\n            if char == \"b\" || char == \"c\" || char == \"d\" || char\
    \ == \"f\" || char == \"g\" || char == \"h\" || char == \"j\" || char == \"k\"\
    \ || char == \"l\" || char == \"m\" || char == \"n\" || char == \"p\" || char\
    \ == \"q\" || char == \"r\" || char == \"s\" || char == \"t\" || char == \"v\"\
    \ || char == \"w\" || char == \"x\" || char == \"y\" || char == \"z\" {\n    \
    \            j += 1\n            }\n        }\n    }\n    \n    if j == n {\n\
    \        for char in s {\n            if char == \"a\" || char == \"e\" || char\
    \ == \"i\" || char == \"o\" || char == \"u\" {\n                i += 1\n     \
    \       }\n            if char == \"b\" || char == \"c\" || char == \"d\" || char\
    \ == \"f\" || char == \"g\" || char == \"h\" || char == \"j\" || char == \"k\"\
    \ || char == \"l\" || char == \"m\" || char == \"n\" || char == \"p\" || char\
    \ == \"q\" || char == \"r\" || char == \"s\" || char == \"t\" || char == \"v\"\
    \ || char == \"w\" || char == \"x\" || char == \"y\" || char == \"z\" {\n    \
    \            j += 1\n            }\n        }\n    }\n    \n    if i == n && j\
    \ == n {\n        for char in s {\n            if char == \"a\" || char == \"\
    e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n                i +=\
    \ 1\n            }\n            if char == \"b\" || char == \"c\" || char == \"\
    d\" || char == \"f\" || char == \"g\" || char == \"h\" || char == \"j\" || char\
    \ == \"k\" || char == \"l\" || char == \"m\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"\
    ])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\", \"\
    lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_n0j9qks.swift:54:159: error: unterminated string literal\n   \
    \         if char == \"b\" || char == \"c\" || char == \"d\" || char == \"f\"\
    \ || char == \"g\" || char == \"h\" || char == \"j\" || char == \"k\" || char\
    \ == \"l\" || char == \"m\n                                                  \
    \                                                                            \
    \                                ^\n/tmp/tmp_n0j9qks.swift:76:69: error: expected\
    \ '}' at end of brace statement\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])\n                                         \
    \                           ^\n/tmp/tmp_n0j9qks.swift:49:25: note: to match this\
    \ opening '{'\n    if i == n && j == n {\n                        ^\n/tmp/tmp_n0j9qks.swift:76:69:\
    \ error: expected '}' at end of brace statement\nassert(select_words(s: \"a b\
    \ c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])\n                        \
    \                                            ^\n/tmp/tmp_n0j9qks.swift:8:50: note:\
    \ to match this opening '{'\nfunc select_words(s: String, n: Int) -> [String]\
    \ {\n                                                 ^\n/tmp/tmp_n0j9qks.swift:58:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpeap9r23u/tmpeap9r23u.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0facfa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0facc9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0facc9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0facc9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeap9r23u                        0x000055ba4819c4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b0fad194460 __libc_start_main +
    245

    6    tmpeap9r23u                        0x000055ba4819c0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpeap9r23u/tmpeap9r23u.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0facfa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0facc9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0facc9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0facc9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeap9r23u                        0x000055ba4819c4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b0fad194460 __libc_start_main +
    245

    6    tmpeap9r23u                        0x000055ba4819c0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    \n    if s == \"\" {\n        return result\n    }\n    \n\
    \    for char in s.characters {\n        if char.unicodeScalars.filter({ $0.isConsonant()\
    \ }).count == n {\n            result.append(String(char))\n        }\n    }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1_0l2bm0.swift:15:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp1_0l2bm0.swift:16:44:\
    \ error: value of type 'Unicode.Scalar' has no member 'isConsonant'\n        if\
    \ char.unicodeScalars.filter({ $0.isConsonant() }).count == n {\n            \
    \                            ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpeap9r23u/tmpeap9r23u.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0facfa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0facc9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0facc9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0facc9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeap9r23u                        0x000055ba4819c4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b0fad194460 __libc_start_main +
    245

    6    tmpeap9r23u                        0x000055ba4819c0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpeap9r23u/tmpeap9r23u.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0facfa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0facc9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0facc9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0facc9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeap9r23u                        0x000055ba4819c4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b0fad194460 __libc_start_main +
    245

    6    tmpeap9r23u                        0x000055ba4819c0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    // Your\
    \ code here\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp438np9b5/tmp438np9b5.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6f64eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6f61e1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6f61e1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6f61e07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp438np9b5                        0x0000562130e534c4 <unavailable> + 5316

    5    libc.so.6                          0x00002ad6f66d6460 __libc_start_main +
    245

    6    tmp438np9b5                        0x0000562130e530c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    \n    if s == \"\" {\n        return result\n    }\n    \n\
    \    let vowels = \"aeiou\"\n    \n    for letter in s.characters {\n        if\
    \ letter in vowels {\n            if result.count < n {\n                result.append(String(letter))\n\
    \            }\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpoxxu_r5a.swift:18:19: error: expected '{' after 'if' condition\n\
    \        if letter in vowels {\n                  ^\n/tmp/tmpoxxu_r5a.swift:17:21:\
    \ error: 'characters' is unavailable: Please use String directly\n    for letter\
    \ in s.characters {\n                    ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpoxxu_r5a.swift:18:12: error: cannot convert\
    \ value of type 'Character' to expected condition type 'Bool'\n        if letter\
    \ in vowels {\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    \n    if s == \"\" {\n        return result\n    }\n    \n\
    \    var i = 0\n    var j = 0\n    \n    while i < s.count {\n        if s[i]\
    \ == \" \" {\n            i += 1\n        }\n        \n        if s[i] == \"a\"\
    \ || s[i] == \"e\" || s[i] == \"i\" || s[i] == \"o\" || s[i] == \"u\" {\n    \
    \        i += 1\n        }\n        \n        if s[i] == \"b\" || s[i] == \"c\"\
    \ || s[i] == \"d\" || s[i] == \"f\" || s[i] == \"g\" || s[i] == \"h\" || s[i]\
    \ == \"j\" || s[i] == \"k\" || s[i] == \"l\" || s[i] == \"m\" || s[i] == \"n\"\
    \ || s[i] == \"p\" || s[i] == \"q\" || s[i] == \"r\" || s[i] == \"s\" || s[i]\
    \ == \"t\" || s[i] == \"v\" || s[i] == \"w\" || s[i] == \"x\" || s[i] == \"y\"\
    \ || s[i] == \"z\" {\n            i += 1\n        }\n        \n        if s[i]\
    \ == n {\n            result.append(String(s[i..<s.endIndex]))\n            i\
    \ += 1\n        }\n        \n        if s[i] == \" \" {\n            i += 1\n\
    \        }\n        \n        if s[i] == \"a\" || s[i] == \"e\" || s[i] == \"\
    i\" || s[i] == \"o\" || s[i] == \"u\" {\n            i += 1\n        }\n     \
    \   \n        if s[i] == \"b\" || s[i] == \"c\" || s[i] == \"d\" || s[i] == \"\
    f\" || s[i] == \"g\" || s[i] == \"h\" || s[i] == \"j\" || s[i] == \"k\" || s[i]\
    \ == \"l\" || s[i] == \"m\" || s[i] == \"n\" || s[i] == \"p\" || s[i] == \"q\"\
    \ || s[i] == \"r\" || s[i] == \"s\" || s[i] == \"t\" || s[i] == \"v\" || s[i]\
    \ == \"w\" || s[i] == \"x\" || s[i] == \"y\" || s[i] == \"z\" {\n            i\
    \ += 1\n        }\n        \n        if s[i] == n {\n            result.append(String(s[i..<s.endIndex]))\n\
    \            i += 1\n        }\n        \n        if s[i] == \" \" {\n       \
    \     i += 1\n        }\n        \n        if s[i] == \"a\" || s[i] == \"e\" ||\
    \ s[i] == \"i\" || s[i] == \"o\" || s[i] == \"u\" {\n            i += 1\n    \
    \    }\n        \n        if s[i] == \"b\" || s[i] == \"c\" || s[i] == \"d\" ||\
    \ s[i] == \"f\" || s[i] == \"g\" || s[i] == \"h\" || s[i] == \"j\" || s[i] ==\
    \ \"k\" || s[i] == \"l\" || s[i] == \"m\" || s[i] == \"n\" || s[i] == \"p\" ||\
    \ s[i] == \"q\" || s[i] == \"r\" || s[i] == \"s\" || s[i] == \"t\" || s[i] ==\
    \ \"v\" || s[i] == \"w\" || s[i] == \"x\" || s[i] == \"y\" || s[i] == \"z\" {\n\
    \            i += 1\n        }\n        \n        if s[i] == n {\n           \
    \ result.append(String(s[i..<s.endIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpp7vogtql.swift:67:1: error: expected ']' in expression list\n}\n\
    ^\n/tmp/tmpp7vogtql.swift:66:35: note: to match this opening '['\n           \
    \ result.append(String(s[i..<s.endIndex\n                                  ^\n\
    /tmp/tmpp7vogtql.swift:88:69: error: expected '}' at end of brace statement\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])\n\
    \                                                                    ^\n/tmp/tmpp7vogtql.swift:18:23:\
    \ note: to match this opening '{'\n    while i < s.count {\n                 \
    \     ^\n/tmp/tmpp7vogtql.swift:88:69: error: expected '}' at end of brace statement\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])\n\
    \                                                                    ^\n/tmp/tmpp7vogtql.swift:8:50:\
    \ note: to match this opening '{'\nfunc select_words(s: String, n: Int) -> [String]\
    \ {\n                                                 ^\n/tmp/tmpp7vogtql.swift:19:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[i] == \" \" {\n           ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpp7vogtql.swift:23:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[i] == \"a\" || s[i] == \"e\" || s[i]\
    \ == \"i\" || s[i] == \"o\" || s[i] == \"u\" {\n           ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpp7vogtql.swift:23:27:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[i] == \"a\" || s[i] == \"e\" || s[i]\
    \ == \"i\" || s[i] == \"o\" || s[i] == \"u\" {\n                          ^~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpp7vogtql.swif"
  stdout: ''
  timestamp: 1660014559
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpeap9r23u/tmpeap9r23u.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0facfa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0facc9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0facc9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0facc9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeap9r23u                        0x000055ba4819c4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b0fad194460 __libc_start_main +
    245

    6    tmpeap9r23u                        0x000055ba4819c0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    // TODO:\
    \ implement this function\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpg41tte8s/tmpg41tte8s.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa44a5cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa44753b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa44753988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa447527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg41tte8s                        0x0000555a5d3574c4 <unavailable> + 5316

    5    libc.so.6                          0x00002baa44c48460 __libc_start_main +
    245

    6    tmpg41tte8s                        0x0000555a5d3570c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014559
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    \n    if s == \"\" {\n        return result\n    }\n    \n\
    \    var count = 0\n    \n    for letter in s {\n        if letter == \" \" {\n\
    \            count += 1\n        }\n        \n        if count == n {\n      \
    \      result.append(letter)\n            count = 0\n        }\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnh60qi8l.swift:23:27: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result.append(letter)\n    \
    \                      ^\n"
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    \n    if s == \"\" {\n        return result\n    }\n    \n\
    \    var i = 0\n    var j = 0\n    \n    for char in s {\n        if char == \"\
    a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n  \
    \          i += 1\n        }\n        if char == \"b\" || char == \"c\" || char\
    \ == \"d\" || char == \"f\" || char == \"g\" || char == \"h\" || char == \"j\"\
    \ || char == \"k\" || char == \"l\" || char == \"m\" || char == \"n\" || char\
    \ == \"p\" || char == \"q\" || char == \"r\" || char == \"s\" || char == \"t\"\
    \ || char == \"v\" || char == \"w\" || char == \"x\" || char == \"y\" || char\
    \ == \"z\" {\n            j += 1\n        }\n        if i == n {\n           \
    \ result.append(s.substring(i, j))\n            i = j\n            j = 0\n   \
    \     }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbg92lez3.swift:26:29: error: value of type 'String' has no member\
    \ 'substring'\n            result.append(s.substring(i, j))\n                \
    \          ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    // TODO:\
    \ implement this\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpe_v3gpt2/tmpe_v3gpt2.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b871bc1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b871b915b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b871b915988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b871b9147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe_v3gpt2                        0x0000560b56a984c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b871be0a460 __libc_start_main +
    245

    6    tmpe_v3gpt2                        0x0000560b56a980c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpeap9r23u/tmpeap9r23u.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0facfa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0facc9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0facc9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0facc9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeap9r23u                        0x000055ba4819c4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b0fad194460 __libc_start_main +
    245

    6    tmpeap9r23u                        0x000055ba4819c0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    // Your\
    \ code here\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmp4u3nddkf.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    \n    if s == \"\" {\n        return result\n    }\n    \n\
    \    var i = 0\n    var j = 0\n    \n    while i < s.count {\n        if s[i]\
    \ == \" \" {\n            i += 1\n            continue\n        }\n        \n\
    \        if s[i] == \"a\" || s[i] == \"e\" || s[i] == \"i\" || s[i] == \"o\" ||\
    \ s[i] == \"u\" {\n            i += 1\n            continue\n        }\n     \
    \   \n        if s[i] == \"b\" || s[i] == \"c\" || s[i] == \"d\" || s[i] == \"\
    f\" || s[i] == \"g\" || s[i] == \"h\" || s[i] == \"j\" || s[i] == \"k\" || s[i]\
    \ == \"l\" || s[i] == \"m\" || s[i] == \"n\" || s[i] == \"p\" || s[i] == \"q\"\
    \ || s[i] == \"r\" || s[i] == \"s\" || s[i] == \"t\" || s[i] == \"v\" || s[i]\
    \ == \"w\" || s[i] == \"x\" || s[i] == \"y\" || s[i] == \"z\" {\n            i\
    \ += 1\n            continue\n        }\n        \n        if s[i] == \"0\" {\n\
    \            i += 1\n            continue\n        }\n        \n        if s[i]\
    \ == \"1\" {\n            i += 1\n            continue\n        }\n        \n\
    \        if s[i] == \"2\" {\n            i += 1\n            continue\n      \
    \  }\n        \n        if s[i] == \"3\" {\n            i += 1\n            continue\n\
    \        }\n        \n        if s[i] == \"4\" {\n            i += 1\n       \
    \     continue\n        }\n        \n        if s[i] == \"5\" {\n            i\
    \ += 1\n            continue\n        }\n        \n        if s[i] == \"6\" {\n\
    \            i += 1\n            continue\n        }\n        \n        if s[i]\
    \ == \"7\" {\n            i += 1\n            continue\n        }\n        \n\
    \        if s[i] == \"8\" {\n            i += 1\n            continue\n      \
    \  }\n        \n        if s[i] == \"9\" {\n            i += 1\n            continue\n\
    \        }\n        \n        if s[i] == \"!\" {\n            i += 1\n       \
    \     continue\n        }\n        \n        if s[i] == \"?\" {\n            i\
    \ += 1\n            continue\n        }\n        \n        if s[i] == \".\" {\n\
    \            i += 1\n            continue\n        }\n        \n        if s[i]\
    \ == \"-\" {\n            i += 1\n            continue\n        }\n        \n\
    \        if s[i] == \"_\" {\n            i += 1\n            continue\n      \
    \  }\n        \n        if s[i] == \"*\" {\n            i += 1\n            continue\n\
    \        }\n        \n        if s[i] == \"(\" {\n            i += 1\n       \
    \     continue\n        }\n        \n        if s[i] == \")\" {\n            i\
    \ += 1\n            continue\n        }\n        \n        if s[i] == \"{\" {\n\
    \            i += 1\n            continue\n        }\n        \n        if s[i]\
    \ == \"}\" {\n            i += 1\n            continue\n        }\n        \n\
    \        if s[i] == \"[\" {\n            i += 1\n            continue\n      \
    \  }\n        \n        if \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp__1wzx1q.swift:139:11: error: expected expression, var, or let\
    \ in 'if' condition\n        if \n          ^\n/tmp/tmp__1wzx1q.swift:161:69:\
    \ error: expected '}' at end of brace statement\nassert(select_words(s: \"a b\
    \ c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])\n                        \
    \                                            ^\n/tmp/tmp__1wzx1q.swift:8:50: note:\
    \ to match this opening '{'\nfunc select_words(s: String, n: Int) -> [String]\
    \ {\n                                                 ^\n/tmp/tmp__1wzx1q.swift:19:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[i] == \" \" {\n           ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp__1wzx1q.swift:24:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[i] == \"a\" || s[i] == \"e\" || s[i]\
    \ == \"i\" || s[i] == \"o\" || s[i] == \"u\" {\n           ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp__1wzx1q.swift:24:27:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[i] == \"a\" || s[i] == \"e\" || s[i]\
    \ == \"i\" || s[i] == \"o\" || s[i] == \"u\" {\n                          ^~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp__1wzx1q.swift:24:42:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[i] == \"a\" || s[i] == \"e\" || s[i]\
    \ == \"i\" || s[i] == \"o\" || s[i] == \"u\" {\n                             \
    \            ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmp__1wzx1q.swift:24:57: error: 's"
  stdout: ''
  timestamp: 1660014559
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpeap9r23u/tmpeap9r23u.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0facfa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0facc9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0facc9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0facc9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeap9r23u                        0x000055ba4819c4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b0fad194460 __libc_start_main +
    245

    6    tmpeap9r23u                        0x000055ba4819c0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    \n    if s == \"\" {\n        return result\n    }\n    \n\
    \    for c in s.characters {\n        if c == \" \" {\n            continue\n\
    \        }\n        \n        if s.rangeOfCharacter(from: NSCharacterSet.letters.inverted)\
    \ != nil {\n            if s.rangeOfCharacter(from: NSCharacterSet.letters) !=\
    \ nil {\n                if s.rangeOfCharacter(from: NSCharacterSet.letters.inverted)\
    \ != nil {\n                    if s.rangeOfCharacter(from: NSCharacterSet.letters.inverted)\
    \ != nil {\n                        if s.rangeOfCharacter(from: NSCharacterSet.letters.inverted)\
    \ != nil {\n                            if s.rangeOfCharacter(from: NSCharacterSet.letters.inverted)\
    \ != nil {\n                                if s.rangeOfCharacter(from: NSCharacterSet.letters.inverted)\
    \ != nil {\n                                    if s.rangeOfCharacter(from: NSCharacterSet.letters.inverted)\
    \ != nil {\n                                        if s.rangeOfCharacter(from:\
    \ NSCharacterSet.letters.inverted) != nil {\n                                \
    \            if s.rangeOfCharacter(from: NSCharacterSet.letters.inverted) != nil\
    \ {\n                                                if s.rangeOfCharacter(from:\
    \ NSCharacterSet.letters.inverted) != nil {\n                                \
    \                    if s.rangeOfCharacter(from: NSCharacterSet.letters.inverted)\
    \ != nil {\n                                                        if s.rangeOfCharacter(from:\
    \ NSCharacterSet.letters.inverted) != nil {\n                                \
    \                            if s.rangeOfCharacter(from: NSCharacterSet.letters.inverted)\
    \ != nil {\n                                                                if\
    \ s.rangeOfCharacter(from: NSCharacterSet.letters.inverted) != nil {\n       \
    \                                                             if s.rangeOfCharacter(from:\
    \ NSCharacterSet.letters.inverted) != nil {\n                                \
    \                                        if s.rangeOfCharacter(from: NSCharacterSet.letters.inverted)\
    \ != nil {\n                                                                 \
    \           if s.rangeOfCharacter(from: NSCharacterSet.letters.inverted) != nil\
    \ {\n                                                                        \
    \        if s.rangeOfCharacter(from: NSCharacterSet.letters.inverted) != nil {\n\
    \                                                                            \
    \        if s.rangeOfCharacter(from: NSCharacterSet.letters.inverted) != nil {\n\
    \                                                                            \
    \            if s.rangeOfCharacter(from: NSCharacterSet.letters.inverted) != nil\
    \ {\n                                                                        \
    \                    if s.rangeOfCharacter(from: NSCharacterSet.letters.inverted)\
    \ != nil {\n                                                                 \
    \                               if s.rangeOfCharacter(from: NSCharacterSet.letters.inverted)\
    \ != nil {\n                                                                 \
    \                                   if s.rangeOfCharacter(from: NSCharacterSet.letters.inverted)\
    \ != nil {\n                                                                 \
    \                                       if s.rangeOfCharacter(from: NSCharacterSet.letters.inverted)\
    \ != nil {\n                                                                 \
    \                                           if s.range\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmptz393jv2.swift:45:119: error: expected '{' after 'if' condition\n\
    \                                                                            \
    \                                if s.range\n                                \
    \                                                                            \
    \          ^\n/tmp/tmptz393jv2.swift:67:69: error: expected '}' at end of brace\
    \ statement\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"\
    d\", \"f\"])\n                                                               \
    \     ^\n/tmp/tmptz393jv2.swift:43:169: note: to match this opening '{'\n    \
    \                                                                            \
    \                    if s.rangeOfCharacter(from: NSCharacterSet.letters.inverted)\
    \ != nil {\n                                                                 \
    \                                                                            \
    \                           ^\n/tmp/tmptz393jv2.swift:67:69: error: expected '}'\
    \ at end of brace statement\nassert(select_words(s: \"a b c d e f\", n: 1) ==\
    \ [\"b\", \"c\", \"d\", \"f\"])\n                                            \
    \                        ^\n/tmp/tmptz393jv2.swift:42:165: note: to match this\
    \ opening '{'\n                                                              \
    \                                  if s.rangeOfCharacter(from: NSCharacterSet.letters.inverted)\
    \ != nil {\n                                                                 \
    \                                                                            \
    \                       ^\n/tmp/tmptz393jv2.swift:67:69: error: expected '}' at\
    \ end of brace statement\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"\
    b\", \"c\", \"d\", \"f\"])\n                                                 \
    \                   ^\n/tmp/tmptz393jv2.swift:41:161: note: to match this opening\
    \ '{'\n                                                                      \
    \                      if s.rangeOfCharacter(from: NSCharacterSet.letters.inverted)\
    \ != nil {\n                                                                 \
    \    "
  stdout: ''
  timestamp: 1660014559
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpeap9r23u/tmpeap9r23u.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0facfa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0facc9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0facc9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0facc9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeap9r23u                        0x000055ba4819c4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b0fad194460 __libc_start_main +
    245

    6    tmpeap9r23u                        0x000055ba4819c0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpeap9r23u/tmpeap9r23u.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0facfa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0facc9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0facc9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0facc9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeap9r23u                        0x000055ba4819c4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b0fad194460 __libc_start_main +
    245

    6    tmpeap9r23u                        0x000055ba4819c0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpeap9r23u/tmpeap9r23u.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0facfa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0facc9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0facc9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0facc9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeap9r23u                        0x000055ba4819c4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b0fad194460 __libc_start_main +
    245

    6    tmpeap9r23u                        0x000055ba4819c0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    \n    if s == \"\" {\n        return result\n    }\n    \n\
    \    for char in s.characters {\n        if char.unicodeScalars.filter({ $0.isConsonant()\
    \ }).count == n {\n            result.append(String(char))\n        }\n    }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1_0l2bm0.swift:15:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp1_0l2bm0.swift:16:44:\
    \ error: value of type 'Unicode.Scalar' has no member 'isConsonant'\n        if\
    \ char.unicodeScalars.filter({ $0.isConsonant() }).count == n {\n            \
    \                            ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    \n    if s.isEmpty {\n        return result\n    }\n    \n\
    \    var i = 0\n    var j = 0\n    \n    while i < s.count {\n        if s.substringWithRange(s.startIndex..<s.startIndex.advancedBy(j)).characters.count\
    \ <= n {\n            result.append(s.substringWithRange(s.startIndex..<s.startIndex.advancedBy(j)))\n\
    \            j = s.startIndex.advancedBy(j)\n        } else {\n            j =\
    \ s.startIndex.advancedBy(j)\n        }\n        i += 1\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbq8jw58v.swift:19:14: error: value of type 'String' has no member\
    \ 'substringWithRange'\n        if s.substringWithRange(s.startIndex..<s.startIndex.advancedBy(j)).characters.count\
    \ <= n {\n           ~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpbq8jw58v.swift:19:61: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        if s.substringWithRange(s.startIndex..<s.startIndex.advancedBy(j)).characters.count\
    \ <= n {\n                                               ~~~~~~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpbq8jw58v.swift:20:29: error: value of type 'String' has no member 'substringWithRange'\n\
    \            result.append(s.substringWithRange(s.startIndex..<s.startIndex.advancedBy(j)))\n\
    \                          ~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpbq8jw58v.swift:20:76:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n           \
    \ result.append(s.substringWithRange(s.startIndex..<s.startIndex.advancedBy(j)))\n\
    \                                                              ~~~~~~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpbq8jw58v.swift:21:30: error: value of type 'String.Index' has no member\
    \ 'advancedBy'\n            j = s.startIndex.advancedBy(j)\n                ~~~~~~~~~~~~\
    \ ^~~~~~~~~~\n/tmp/tmpbq8jw58v.swift:23:30: error: value of type 'String.Index'\
    \ has no member 'advancedBy'\n            j = s.startIndex.advancedBy(j)\n   \
    \             ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpeap9r23u/tmpeap9r23u.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0facfa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0facc9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0facc9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0facc9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeap9r23u                        0x000055ba4819c4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b0fad194460 __libc_start_main +
    245

    6    tmpeap9r23u                        0x000055ba4819c0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    \n    if s.isEmpty {\n        return result\n    }\n    \n\
    \    for char in s.characters {\n        if char.hasConsonants {\n           \
    \ if n == 1 {\n                result.append(String(char))\n            } else\
    \ {\n                let subString = String(char).substringFromIndex(1)\n    \
    \            if subString.hasConsonants {\n                    result.append(subString)\n\
    \                }\n            }\n        }\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5xuut_7w.swift:15:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp5xuut_7w.swift:16:17:\
    \ error: value of type 'Character' has no member 'hasConsonants'\n        if char.hasConsonants\
    \ {\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmp5xuut_7w.swift:20:46: error: value\
    \ of type 'String' has no member 'substringFromIndex'\n                let subString\
    \ = String(char).substringFromIndex(1)\n                                ~~~~~~~~~~~~\
    \ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpeap9r23u/tmpeap9r23u.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0facfa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0facc9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0facc9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0facc9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeap9r23u                        0x000055ba4819c4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b0fad194460 __libc_start_main +
    245

    6    tmpeap9r23u                        0x000055ba4819c0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpeap9r23u/tmpeap9r23u.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0facfa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0facc9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0facc9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0facc9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeap9r23u                        0x000055ba4819c4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b0fad194460 __libc_start_main +
    245

    6    tmpeap9r23u                        0x000055ba4819c0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpeap9r23u/tmpeap9r23u.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0facfa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0facc9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0facc9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0facc9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeap9r23u                        0x000055ba4819c4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b0fad194460 __libc_start_main +
    245

    6    tmpeap9r23u                        0x000055ba4819c0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    \n    if s == \"\" {\n        return result\n    }\n    \n\
    \    let vowels = \"aeiou\"\n    \n    for char in s.characters {\n        if\
    \ vowels.contains(String(char)) {\n            if n == 1 {\n                result.append(String(char))\n\
    \            }\n            else {\n                for _ in 0..<n {\n       \
    \             result.append(String(char))\n                }\n            }\n\
    \        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"\
    ])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\", \"\
    lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxhfnz3vn.swift:17:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpeap9r23u/tmpeap9r23u.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0facfa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0facc9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0facc9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0facc9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeap9r23u                        0x000055ba4819c4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b0fad194460 __libc_start_main +
    245

    6    tmpeap9r23u                        0x000055ba4819c0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    \n    if s == \"\" {\n        return result\n    }\n    \n\
    \    var count = 0\n    var lastChar = s[0]\n    \n    for char in s {\n     \
    \   if char == lastChar {\n            count += 1\n        } else {\n        \
    \    if count == n {\n                result.append(String(lastChar))\n      \
    \          count = 0\n            }\n            lastChar = char\n           \
    \ count = 1\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvfbzg0ls.swift:16:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    \n    if s == \"\" {\n        return result\n    }\n    \n\
    \    let vowels = \"aeiou\"\n    \n    for char in s {\n        if vowels.contains(char)\
    \ {\n            if result.count < n {\n                result.append(char)\n\
    \            }\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpux6udpeq.swift:20:31: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n                result.append(char)\n  \
    \                            ^\n"
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpeap9r23u/tmpeap9r23u.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0facfa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0facc9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0facc9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0facc9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeap9r23u                        0x000055ba4819c4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b0fad194460 __libc_start_main +
    245

    6    tmpeap9r23u                        0x000055ba4819c0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpeap9r23u/tmpeap9r23u.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0facfa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0facc9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0facc9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0facc9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeap9r23u                        0x000055ba4819c4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b0fad194460 __libc_start_main +
    245

    6    tmpeap9r23u                        0x000055ba4819c0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    \n    if s == \"\" {\n        return result\n    }\n    \n\
    \    var count = 0\n    var last = 0\n    \n    for char in s.characters {\n \
    \       if char == \" \" {\n            count += 1\n        }\n        \n    \
    \    if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char\
    \ == \"u\" {\n            count += 1\n        }\n        \n        if char ==\
    \ \"y\" {\n            count += 1\n        }\n        \n        if char == \"\
    n\" {\n            count += 1\n        }\n        \n        if char == \"d\" ||\
    \ char == \"s\" || char == \"t\" || char == \"h\" || char == \"r\" || char ==\
    \ \"n\" {\n            count += 1\n        }\n        \n        if char == \"\
    p\" {\n            count += 1\n        }\n        \n        if char == \"f\" ||\
    \ char == \"v\" || char == \"x\" || char == \"z\" {\n            count += 1\n\
    \        }\n        \n        if char == \"c\" {\n            count += 1\n   \
    \     }\n        \n        if char == \"m\" {\n            count += 1\n      \
    \  }\n        \n        if char == \"b\" {\n            count += 1\n        }\n\
    \        \n        if char == \"k\" {\n            count += 1\n        }\n   \
    \     \n        if char == \"j\" {\n            count += 1\n        }\n      \
    \  \n        if char == \"q\" {\n            count += 1\n        }\n        \n\
    \        if char == \"l\" {\n            count += 1\n        }\n        \n   \
    \     if char == \"m\" {\n            count += 1\n        }\n        \n      \
    \  if char == \"p\" {\n            count += 1\n        }\n        \n        if\
    \ char == \"o\" {\n            count += 1\n        }\n        \n        if char\
    \ == \"v\" {\n            count += 1\n        }\n        \n        if char ==\
    \ \"f\" {\n            count += 1\n        }\n        \n        if char == \"\
    g\" {\n            count += 1\n        }\n        \n        if char == \"b\" {\n\
    \            count += 1\n        }\n        \n        if char == \"j\" {\n   \
    \         count += 1\n        }\n        \n        if char == \"k\" {\n      \
    \      count += 1\n        }\n        \n        if char == \"l\" {\n         \
    \   count += 1\n        }\n        \n        if char == \"q\" {\n            count\
    \ += 1\n        }\n        \n        if char == \"m\" {\n            count +=\
    \ 1\n        }\n        \n        if char == \"p\" {\n            count += 1\n\
    \        }\n        \n        if char == \"o\" {\n            count += 1\n   \
    \     }\n        \n        if char == \"v\" {\n            count += 1\n      \
    \  }\n        \n        if char == \"f\" {\n            count += 1\n        }\n\
    \        \n        if char == \"g\" {\n            count += 1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxbn4__sy.swift:162:69: error: expected '}' at end of brace statement\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])\n\
    \                                                                    ^\n/tmp/tmpxbn4__sy.swift:18:30:\
    \ note: to match this opening '{'\n    for char in s.characters {\n          \
    \                   ^\n/tmp/tmpxbn4__sy.swift:162:69: error: expected '}' at end\
    \ of brace statement\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\"\
    , \"c\", \"d\", \"f\"])\n                                                    \
    \                ^\n/tmp/tmpxbn4__sy.swift:8:50: note: to match this opening '{'\n\
    func select_words(s: String, n: Int) -> [String] {\n                         \
    \                        ^\n/tmp/tmpxbn4__sy.swift:18:19: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in s.characters {\n\
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpxbn4__sy.swift:144:6: error: operator functions can only be declared\
    \ at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n     ^\n/tmp/tmpxbn4__sy.swift:9:9: warning: variable 'result' was\
    \ never mutated; consider changing to 'let' constant\n    var result = [String]()\n\
    \    ~~~ ^\n    let\n/tmp/tmpxbn4__sy.swift:16:9: warning: initialization of variable\
    \ 'last' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    var last = 0\n    ~~~~^~~~\n    _\n"
  stdout: ''
  timestamp: 1660014559
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    \n    if s == \"\" {\n        return result\n    }\n    \n\
    \    for char in s.characters {\n        if char.unicodeScalars.filter({ $0.isConsonant()\
    \ }).count == n {\n            result.append(String(char))\n        }\n    }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1_0l2bm0.swift:15:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp1_0l2bm0.swift:16:44:\
    \ error: value of type 'Unicode.Scalar' has no member 'isConsonant'\n        if\
    \ char.unicodeScalars.filter({ $0.isConsonant() }).count == n {\n            \
    \                            ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpeap9r23u/tmpeap9r23u.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0facfa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0facc9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0facc9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0facc9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeap9r23u                        0x000055ba4819c4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b0fad194460 __libc_start_main +
    245

    6    tmpeap9r23u                        0x000055ba4819c0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    // Your\
    \ code here\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmp4u3nddkf.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    \n    if s == \"\" {\n        return result\n    }\n    \n\
    \    var count = 0\n    var lastChar = s[0]\n    \n    for char in s.characters\
    \ {\n        if char == lastChar {\n            count += 1\n        } else {\n\
    \            if count == n {\n                result.append(\"\\(lastChar)\")\
    \ // append last char\n                count = 0\n            }\n        }\n \
    \       lastChar = char\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpjw2ixysm.swift:16:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpjw2ixysm.swift:18:19: error: 'characters' is\
    \ unavailable: Please use String directly\n    for char in s.characters {\n  \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    // TODO:\
    \ implement this\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpe_v3gpt2/tmpe_v3gpt2.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b871bc1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b871b915b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b871b915988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b871b9147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe_v3gpt2                        0x0000560b56a984c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b871be0a460 __libc_start_main +
    245

    6    tmpe_v3gpt2                        0x0000560b56a980c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    if s == \"\" {\n        return result\n    }\n    var i =\
    \ 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n\
    \    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n \
    \   var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n  \
    \  var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n   \
    \ var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var\
    \ i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n\
    \ = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s =\
    \ 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n\
    \    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n \
    \   var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n  \
    \  var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n   \
    \ var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var\
    \ s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x\
    \ = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c =\
    \ 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n\
    \    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n \
    \   var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n  \
    \  var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n   \
    \ var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var\
    \ c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h\
    \ = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m =\
    \ 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n\
    \    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n \
    \   var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n  \
    \  var c = 0\n    var d = 0\n    var e\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpo_7t5njw.swift:39:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmpo_7t5njw.swift:13:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmpo_7t5njw.swift:40:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmpo_7t5njw.swift:14:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmpo_7t5njw.swift:41:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmpo_7t5njw.swift:15:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmpo_7t5njw.swift:42:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmpo_7t5njw.swift:16:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmpo_7t5njw.swift:43:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmpo_7t5njw.swift:17:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmpo_7t5njw.swift:44:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmpo_7t5njw.swift:18:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmpo_7t5njw.swift:45:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmpo_7t5njw.swift:19:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmpo_7t5njw.swift:46:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmpo_7t5njw.swift:20:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmpo_7t5njw.swift:47:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmpo_7t5njw.swift:21:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmpo_7t5njw.swift:48:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmpo_7t5njw.swift:22:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmpo_7t5njw.swift:49:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmpo_7t5njw.swift:23:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmpo_7t5njw.swift:50:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmpo_7t"
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    \n    if s == \"\" {\n        return result\n    }\n    \n\
    \    for char in s {\n        if char.unicodeScalars.filter({ $0.isConsonant()\
    \ }).count == n {\n            result.append(String(char))\n        }\n    }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4hmpwhr4.swift:16:44: error: value of type 'Unicode.Scalar' has\
    \ no member 'isConsonant'\n        if char.unicodeScalars.filter({ $0.isConsonant()\
    \ }).count == n {\n                                        ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpeap9r23u/tmpeap9r23u.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0facfa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0facc9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0facc9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0facc9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeap9r23u                        0x000055ba4819c4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b0fad194460 __libc_start_main +
    245

    6    tmpeap9r23u                        0x000055ba4819c0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    if s == \"\" {\n        return result\n    }\n    \n    var\
    \ i = 0\n    var j = 0\n    var k = 0\n    \n    while i < s.count {\n       \
    \ if s[i] == \" \" {\n            i += 1\n            continue\n        }\n  \
    \      \n        if s[i] == \"a\" || s[i] == \"e\" || s[i] == \"i\" || s[i] ==\
    \ \"o\" || s[i] == \"u\" {\n            i += 1\n            continue\n       \
    \ }\n        \n        if s[i] == \"b\" || s[i] == \"c\" || s[i] == \"d\" || s[i]\
    \ == \"f\" || s[i] == \"g\" || s[i] == \"h\" || s[i] == \"j\" || s[i] == \"k\"\
    \ || s[i] == \"l\" || s[i] == \"m\" || s[i] == \"n\" || s[i] == \"p\" || s[i]\
    \ == \"q\" || s[i] == \"r\" || s[i] == \"s\" || s[i] == \"t\" || s[i] == \"v\"\
    \ || s[i] == \"w\" || s[i] == \"x\" || s[i] == \"y\" || s[i] == \"z\" {\n    \
    \        i += 1\n            continue\n        }\n        \n        if s[i] ==\
    \ \"0\" {\n            i += 1\n            continue\n        }\n        \n   \
    \     if s[i] == \"1\" {\n            i += 1\n            continue\n        }\n\
    \        \n        if s[i] == \"2\" {\n            i += 1\n            continue\n\
    \        }\n        \n        if s[i] == \"3\" {\n            i += 1\n       \
    \     continue\n        }\n        \n        if s[i] == \"4\" {\n            i\
    \ += 1\n            continue\n        }\n        \n        if s[i] == \"5\" {\n\
    \            i += 1\n            continue\n        }\n        \n        if s[i]\
    \ == \"6\" {\n            i += 1\n            continue\n        }\n        \n\
    \        if s[i] == \"7\" {\n            i += 1\n            continue\n      \
    \  }\n        \n        if s[i] == \"8\" {\n            i += 1\n            continue\n\
    \        }\n        \n        if s[i] == \"9\" {\n            i += 1\n       \
    \     continue\n        }\n        \n        if s[i] == \"!\" {\n            i\
    \ += 1\n            continue\n        }\n        \n        if s[i] == \"?\" {\n\
    \            i += 1\n            continue\n        }\n        \n        if s[i]\
    \ == \"-\" {\n            i += 1\n            continue\n        }\n        \n\
    \        if s[i] == \"_\" {\n            i += 1\n            continue\n      \
    \  }\n        \n        if s[i] == \"/\" {\n            i += 1\n            continue\n\
    \        }\n        \n        if s[i] == \"(\" {\n            i += 1\n       \
    \     continue\n        }\n        \n        if s[i] == \")\" {\n            i\
    \ += 1\n            continue\n        }\n        \n        if s[i] == \"{\" {\n\
    \            i += 1\n            continue\n        }\n        \n        if s[i]\
    \ == \"}\" {\n            i += 1\n            continue\n        }\n        \n\
    \        if s[i] == \"[\" {\n            i += 1\n            continue\n      \
    \  }\n        \n        if s[i] == \"]\" {\n            i += 1\n            continue\n\
    \        }\n        \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpp21p70v9.swift:160:69: error: expected '}' at end of brace statement\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])\n\
    \                                                                    ^\n/tmp/tmpp21p70v9.swift:8:50:\
    \ note: to match this opening '{'\nfunc select_words(s: String, n: Int) -> [String]\
    \ {\n                                                 ^\n/tmp/tmpp21p70v9.swift:19:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[i] == \" \" {\n           ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpp21p70v9.swift:24:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[i] == \"a\" || s[i] == \"e\" || s[i]\
    \ == \"i\" || s[i] == \"o\" || s[i] == \"u\" {\n           ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpp21p70v9.swift:24:27:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[i] == \"a\" || s[i] == \"e\" || s[i]\
    \ == \"i\" || s[i] == \"o\" || s[i] == \"u\" {\n                          ^~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpp21p70v9.swift:24:42:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[i] == \"a\" || s[i] == \"e\" || s[i]\
    \ == \"i\" || s[i] == \"o\" || s[i] == \"u\" {\n                             \
    \            ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmpp21p70v9.swift:24:57: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s[i] =="
  stdout: ''
  timestamp: 1660014559
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpeap9r23u/tmpeap9r23u.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0facfa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0facc9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0facc9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0facc9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeap9r23u                        0x000055ba4819c4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b0fad194460 __libc_start_main +
    245

    6    tmpeap9r23u                        0x000055ba4819c0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    \n    if s == \"\" {\n        return result\n    }\n    \n\
    \    for char in s.characters {\n        if char == \" \" {\n            continue\n\
    \        }\n        \n        if char.unicodeScalars.filter({ $0.isConsonant()\
    \ }).count == n {\n            result.append(String(char))\n        }\n    }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdorlzyo9.swift:15:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpdorlzyo9.swift:20:44:\
    \ error: value of type 'Unicode.Scalar' has no member 'isConsonant'\n        if\
    \ char.unicodeScalars.filter({ $0.isConsonant() }).count == n {\n            \
    \                            ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014559
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpeap9r23u/tmpeap9r23u.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0facfa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0facc9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0facc9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0facc9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeap9r23u                        0x000055ba4819c4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b0fad194460 __libc_start_main +
    245

    6    tmpeap9r23u                        0x000055ba4819c0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpeap9r23u/tmpeap9r23u.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0facfa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0facc9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0facc9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0facc9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeap9r23u                        0x000055ba4819c4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b0fad194460 __libc_start_main +
    245

    6    tmpeap9r23u                        0x000055ba4819c0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpeap9r23u/tmpeap9r23u.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0facfa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0facc9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0facc9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0facc9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeap9r23u                        0x000055ba4819c4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b0fad194460 __libc_start_main +
    245

    6    tmpeap9r23u                        0x000055ba4819c0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    \n    if s == \"\" {\n        return result\n    }\n    \n\
    \    var i = 0\n    var j = 0\n    \n    while i < s.count {\n        if s[i]\
    \ == \" \" {\n            j = i\n            while j < s.count && s[j] == \" \"\
    \ {\n                j += 1\n            }\n            \n            if j ==\
    \ s.count {\n                result.append(\"\\(i)\")\n                i += 1\n\
    \            } else {\n                result.append(\"\\(i)\\(j)\")\n       \
    \         i += 1\n                j += 1\n            }\n        } else {\n  \
    \          i += 1\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2e3dx4m7.swift:19:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s[i] ==\
    \ \" \" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmp2e3dx4m7.swift:21:34: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            while j < s.count && s[j] == \" \" {\n                          \
    \       ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked\
    \ unavailable here\n    public subscript(i: Int) -> Character { get }\n      \
    \     ^\n"
  stdout: ''
  timestamp: 1660014559
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpeap9r23u/tmpeap9r23u.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0facfa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0facc9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0facc9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0facc9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeap9r23u                        0x000055ba4819c4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b0fad194460 __libc_start_main +
    245

    6    tmpeap9r23u                        0x000055ba4819c0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    \n    if s == \"\" {\n        return result\n    }\n    \n\
    \    for letter in s {\n        if letter == \" \" {\n            continue\n \
    \       }\n        \n        if s.rangeOfCharacter(from: CharacterSet.consonants)\
    \ == nil {\n            if s.rangeOfCharacter(from: CharacterSet.letters) == nil\
    \ {\n                continue\n            }\n        }\n        \n        if\
    \ s.rangeOfCharacter(from: CharacterSet.consonants) != nil {\n            if s.rangeOfCharacter(from:\
    \ CharacterSet.letters) != nil {\n                continue\n            }\n  \
    \      }\n        \n        if s.rangeOfCharacter(from: CharacterSet.consonants)\
    \ == nil && s.rangeOfCharacter(from: CharacterSet.letters) != nil {\n        \
    \    result.append(String(letter))\n        }\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpydg18z_6.swift:20:37: error: cannot find 'CharacterSet' in scope\n\
    \        if s.rangeOfCharacter(from: CharacterSet.consonants) == nil {\n     \
    \                               ^~~~~~~~~~~~\n/tmp/tmpydg18z_6.swift:20:14: error:\
    \ value of type 'String' has no member 'rangeOfCharacter'\n        if s.rangeOfCharacter(from:\
    \ CharacterSet.consonants) == nil {\n           ~ ^~~~~~~~~~~~~~~~\n/tmp/tmpydg18z_6.swift:21:41:\
    \ error: cannot find 'CharacterSet' in scope\n            if s.rangeOfCharacter(from:\
    \ CharacterSet.letters) == nil {\n                                        ^~~~~~~~~~~~\n\
    /tmp/tmpydg18z_6.swift:21:18: error: value of type 'String' has no member 'rangeOfCharacter'\n\
    \            if s.rangeOfCharacter(from: CharacterSet.letters) == nil {\n    \
    \           ~ ^~~~~~~~~~~~~~~~\n/tmp/tmpydg18z_6.swift:26:37: error: cannot find\
    \ 'CharacterSet' in scope\n        if s.rangeOfCharacter(from: CharacterSet.consonants)\
    \ != nil {\n                                    ^~~~~~~~~~~~\n/tmp/tmpydg18z_6.swift:26:14:\
    \ error: value of type 'String' has no member 'rangeOfCharacter'\n        if s.rangeOfCharacter(from:\
    \ CharacterSet.consonants) != nil {\n           ~ ^~~~~~~~~~~~~~~~\n/tmp/tmpydg18z_6.swift:27:41:\
    \ error: cannot find 'CharacterSet' in scope\n            if s.rangeOfCharacter(from:\
    \ CharacterSet.letters) != nil {\n                                        ^~~~~~~~~~~~\n\
    /tmp/tmpydg18z_6.swift:27:18: error: value of type 'String' has no member 'rangeOfCharacter'\n\
    \            if s.rangeOfCharacter(from: CharacterSet.letters) != nil {\n    \
    \           ~ ^~~~~~~~~~~~~~~~\n/tmp/tmpydg18z_6.swift:32:37: error: cannot find\
    \ 'CharacterSet' in scope\n        if s.rangeOfCharacter(from: CharacterSet.consonants)\
    \ == nil && s.rangeOfCharacter(from: CharacterSet.letters) != nil {\n        \
    \                            ^~~~~~~~~~~~\n/tmp/tmpydg18z_6.swift:32:97: error:\
    \ cannot find 'CharacterSet' in scope\n        if s.rangeOfCharacter(from: CharacterSet.consonants)\
    \ == nil && s.rangeOfCharacter(from: CharacterSet.letters) != nil {\n        \
    \                               "
  stdout: ''
  timestamp: 1660014559
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    \n    if s == \"\" {\n        return result\n    }\n    \n\
    \    var i = 0\n    var j = 0\n    \n    while i < s.count {\n        if s[i]\
    \ == \" \" {\n            i += 1\n        }\n        \n        if s[i] == \"a\"\
    \ || s[i] == \"e\" || s[i] == \"i\" || s[i] == \"o\" || s[i] == \"u\" {\n    \
    \        i += 1\n        }\n        \n        if s[i] == \"b\" || s[i] == \"c\"\
    \ || s[i] == \"d\" || s[i] == \"f\" || s[i] == \"g\" || s[i] == \"h\" || s[i]\
    \ == \"j\" || s[i] == \"k\" || s[i] == \"l\" || s[i] == \"m\" || s[i] == \"n\"\
    \ || s[i] == \"p\" || s[i] == \"q\" || s[i] == \"r\" || s[i] == \"s\" || s[i]\
    \ == \"t\" || s[i] == \"v\" || s[i] == \"w\" || s[i] == \"x\" || s[i] == \"y\"\
    \ || s[i] == \"z\" {\n            i += 1\n        }\n        \n        if s[i]\
    \ == \"A\" || s[i] == \"E\" || s[i] == \"I\" || s[i] == \"O\" || s[i] == \"U\"\
    \ {\n            i += 1\n        }\n        \n        if s[i] == \"B\" || s[i]\
    \ == \"C\" || s[i] == \"D\" || s[i] == \"F\" || s[i] == \"G\" || s[i] == \"H\"\
    \ || s[i] == \"J\" || s[i] == \"K\" || s[i] == \"L\" || s[i] == \"M\" || s[i]\
    \ == \"N\" || s[i] == \"P\" || s[i] == \"Q\" || s[i] == \"R\" || s[i] == \"S\"\
    \ || s[i] == \"T\" || s[i] == \"V\" || s[i] == \"W\" || s[i] == \"X\" || s[i]\
    \ == \"Y\" || s[i] == \"Z\" {\n            i += 1\n        }\n        \n     \
    \   if s[i] == \"0\" {\n            i += 1\n        }\n        \n        if s[i]\
    \ == \"1\" {\n            i += 1\n        }\n        \n        if s[i] == \"2\"\
    \ {\n            i += 1\n        }\n        \n        if s[i] == \"3\" {\n   \
    \         i += 1\n        }\n        \n        if s[i] == \"4\" {\n          \
    \  i += 1\n        }\n        \n        if s[i] == \"5\" {\n            i += 1\n\
    \        }\n        \n        if s[i] == \"6\" {\n            i += 1\n       \
    \ }\n        \n        if s[i] == \"7\" {\n            i += 1\n        }\n   \
    \     \n        if s[i] == \"8\" {\n            i += 1\n        }\n        \n\
    \        if s[i] == \"9\" {\n            i += 1\n        }\n        \n       \
    \ if s[i] == \"!\" {\n            i += 1\n        }\n        \n        if s[i]\
    \ == \"?\" {\n            i += 1\n        }\n        \n        if s[i] == \".\"\
    \ {\n            i += 1\n        }\n        \n        if s[i] == \"-\" {\n   \
    \         i += 1\n        }\n        \n        if s[i] == \"_\" {\n          \
    \  i += 1\n        }\n        \n        if s[i] == \"/\" {\n            \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmps08l2ar3.swift:122:69: error: expected '}' at end of brace statement\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])\n\
    \                                                                    ^\n/tmp/tmps08l2ar3.swift:18:23:\
    \ note: to match this opening '{'\n    while i < s.count {\n                 \
    \     ^\n/tmp/tmps08l2ar3.swift:122:69: error: expected '}' at end of brace statement\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])\n\
    \                                                                    ^\n/tmp/tmps08l2ar3.swift:8:50:\
    \ note: to match this opening '{'\nfunc select_words(s: String, n: Int) -> [String]\
    \ {\n                                                 ^\n/tmp/tmps08l2ar3.swift:19:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[i] == \" \" {\n           ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmps08l2ar3.swift:23:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[i] == \"a\" || s[i] == \"e\" || s[i]\
    \ == \"i\" || s[i] == \"o\" || s[i] == \"u\" {\n           ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmps08l2ar3.swift:23:27:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[i] == \"a\" || s[i] == \"e\" || s[i]\
    \ == \"i\" || s[i] == \"o\" || s[i] == \"u\" {\n                          ^~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmps08l2ar3.swift:23:42:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[i] == \"a\" || s[i] == \"e\" || s[i]\
    \ == \"i\" || s[i] == \"o\" || s[i] == \"u\" {\n                    "
  stdout: ''
  timestamp: 1660014559
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    \n    if s == \"\" {\n        return result\n    }\n    \n\
    \    for letter in s.characters {\n        if let index = s.firstIndex(of: letter)\
    \ {\n            if n == 1 {\n                result.append(s[..<index])\n   \
    \         } else {\n                result.append(s[..<index])\n             \
    \   result.append(s[index...])\n            }\n        }\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpyglgxxod.swift:15:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in s.characters {\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpyglgxxod.swift:18:32:\
    \ error: subscript 'subscript(_:)' requires the types 'String.Index' and 'Int'\
    \ be equivalent\n                result.append(s[..<index])\n                \
    \               ^\nSwift.String:5:12: note: where 'R.Bound' = 'String.Index'\n\
    \    public subscript<R>(bounds: R) -> String where R : RangeExpression, R.Bound\
    \ == Int { get }\n           ^\n/tmp/tmpyglgxxod.swift:20:32: error: subscript\
    \ 'subscript(_:)' requires the types 'String.Index' and 'Int' be equivalent\n\
    \                result.append(s[..<index])\n                               ^\n\
    Swift.String:5:12: note: where 'R.Bound' = 'String.Index'\n    public subscript<R>(bounds:\
    \ R) -> String where R : RangeExpression, R.Bound == Int { get }\n           ^\n\
    /tmp/tmpyglgxxod.swift:21:32: error: subscript 'subscript(_:)' requires the types\
    \ 'String.Index' and 'Int' be equivalent\n                result.append(s[index...])\n\
    \                               ^\nSwift.String:5:12: note: where 'R.Bound' =\
    \ 'String.Index'\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014559
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpeap9r23u/tmpeap9r23u.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0facfa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0facc9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0facc9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0facc9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeap9r23u                        0x000055ba4819c4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b0fad194460 __libc_start_main +
    245

    6    tmpeap9r23u                        0x000055ba4819c0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    if s == \"\" {\n        return result\n    }\n    \n    for\
    \ char in s.characters {\n        if char.unicodeScalars.filter({ $0.isConsonant()\
    \ }).count == n {\n            result.append(String(char))\n        }\n    }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpn4r1tzzx.swift:14:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpn4r1tzzx.swift:15:44:\
    \ error: value of type 'Unicode.Scalar' has no member 'isConsonant'\n        if\
    \ char.unicodeScalars.filter({ $0.isConsonant() }).count == n {\n            \
    \                            ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014559
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpeap9r23u/tmpeap9r23u.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0facfa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0facc9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0facc9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0facc9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeap9r23u                        0x000055ba4819c4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b0fad194460 __libc_start_main +
    245

    6    tmpeap9r23u                        0x000055ba4819c0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    \n    if s == \"\" {\n        return result\n    }\n    \n\
    \    for char in s.characters {\n        if char.unicodeScalars.filter({ $0.isConsonant()\
    \ }).count == n {\n            result.append(String(char))\n        }\n    }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1_0l2bm0.swift:15:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp1_0l2bm0.swift:16:44:\
    \ error: value of type 'Unicode.Scalar' has no member 'isConsonant'\n        if\
    \ char.unicodeScalars.filter({ $0.isConsonant() }).count == n {\n            \
    \                            ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpeap9r23u/tmpeap9r23u.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0facfa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0facc9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0facc9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0facc9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeap9r23u                        0x000055ba4819c4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b0fad194460 __libc_start_main +
    245

    6    tmpeap9r23u                        0x000055ba4819c0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    // TODO:\
    \ implement this\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpe_v3gpt2/tmpe_v3gpt2.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b871bc1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b871b915b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b871b915988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b871b9147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe_v3gpt2                        0x0000560b56a984c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b871be0a460 __libc_start_main +
    245

    6    tmpe_v3gpt2                        0x0000560b56a980c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    \n    if s == \"\" {\n        return result\n    }\n    \n\
    \    for char in s.characters {\n        if char.hasConsonants {\n           \
    \ if char.consonants.count == n {\n                result.append(char.word)\n\
    \            }\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvm7fplmd.swift:15:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpvm7fplmd.swift:16:17:\
    \ error: value of type 'Character' has no member 'hasConsonants'\n        if char.hasConsonants\
    \ {\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpvm7fplmd.swift:17:21: error: value\
    \ of type 'Character' has no member 'consonants'\n            if char.consonants.count\
    \ == n {\n               ~~~~ ^~~~~~~~~~\n/tmp/tmpvm7fplmd.swift:18:36: error:\
    \ value of type 'Character' has no member 'word'\n                result.append(char.word)\n\
    \                              ~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660014559
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    // TODO:\
    \ implement this\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpe_v3gpt2/tmpe_v3gpt2.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b871bc1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b871b915b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b871b915988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b871b9147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe_v3gpt2                        0x0000560b56a984c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b871be0a460 __libc_start_main +
    245

    6    tmpe_v3gpt2                        0x0000560b56a980c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpeap9r23u/tmpeap9r23u.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0facfa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0facc9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0facc9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0facc9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeap9r23u                        0x000055ba4819c4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b0fad194460 __libc_start_main +
    245

    6    tmpeap9r23u                        0x000055ba4819c0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpeap9r23u/tmpeap9r23u.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0facfa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0facc9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0facc9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0facc9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeap9r23u                        0x000055ba4819c4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b0fad194460 __libc_start_main +
    245

    6    tmpeap9r23u                        0x000055ba4819c0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    \n    if s == \"\" {\n        return result\n    }\n    \n\
    \    var i = 0\n    var j = 0\n    var k = 0\n    \n    while i < s.count {\n\
    \        if s[i] == \" \" {\n            j = i\n            while j < s.count\
    \ && s[j] != \" \" {\n                j += 1\n            }\n            \n  \
    \          if j == s.count {\n                result.append(\"_\")\n         \
    \   } else {\n                result.append(\"_\" + String(s[j]))\n          \
    \  }\n            \n            i = j + 1\n        } else {\n            k +=\
    \ 1\n            if k == n {\n                result.append(\"_\" + String(s[i]))\n\
    \                k = 0\n            }\n        }\n        i += 1\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbp5ru8fj.swift:20:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s[i] ==\
    \ \" \" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpbp5ru8fj.swift:22:34: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            while j < s.count && s[j] != \" \" {\n                          \
    \       ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked\
    \ unavailable here\n    public subscript(i: Int) -> Character { get }\n      \
    \     ^\n/tmp/tmpbp5ru8fj.swift:29:44: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \       result.append(\"_\" + String(s[j]))\n                                \
    \           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmpbp5ru8fj.swift:36:44: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \       result.append(\"_\" + String(s[i]))\n                                \
    \           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n"
  stdout: ''
  timestamp: 1660014559
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    // TODO:\
    \ implement this function\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpg41tte8s/tmpg41tte8s.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa44a5cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa44753b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa44753988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa447527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg41tte8s                        0x0000555a5d3574c4 <unavailable> + 5316

    5    libc.so.6                          0x00002baa44c48460 __libc_start_main +
    245

    6    tmpg41tte8s                        0x0000555a5d3570c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014559
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    if s == \"\" {\n        return result\n    }\n    \n    for\
    \ char in s.characters {\n        if char.unicodeScalars.filter({ $0.isConsonant()\
    \ }).count == n {\n            result.append(String(char))\n        }\n    }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpn4r1tzzx.swift:14:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpn4r1tzzx.swift:15:44:\
    \ error: value of type 'Unicode.Scalar' has no member 'isConsonant'\n        if\
    \ char.unicodeScalars.filter({ $0.isConsonant() }).count == n {\n            \
    \                            ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014559
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    \n    if s == \"\" {\n        return result\n    }\n    \n\
    \    var i = 0\n    var j = 0\n    \n    while i < s.count {\n        if s[i]\
    \ == \" \" {\n            i += 1\n            continue\n        }\n        \n\
    \        if s[i] == \"a\" || s[i] == \"e\" || s[i] == \"i\" || s[i] == \"o\" ||\
    \ s[i] == \"u\" {\n            i += 1\n            continue\n        }\n     \
    \   \n        if s[i] == \"b\" || s[i] == \"c\" || s[i] == \"d\" || s[i] == \"\
    f\" || s[i] == \"g\" || s[i] == \"h\" || s[i] == \"j\" || s[i] == \"k\" || s[i]\
    \ == \"l\" || s[i] == \"m\" || s[i] == \"n\" || s[i] == \"p\" || s[i] == \"q\"\
    \ || s[i] == \"r\" || s[i] == \"s\" || s[i] == \"t\" || s[i] == \"v\" || s[i]\
    \ == \"w\" || s[i] == \"x\" || s[i] == \"y\" || s[i] == \"z\" {\n            i\
    \ += 1\n            continue\n        }\n        \n        if s[i] == \"0\" {\n\
    \            i += 1\n            continue\n        }\n        \n        if s[i]\
    \ == \"1\" {\n            i += 1\n            continue\n        }\n        \n\
    \        if s[i] == \"2\" {\n            i += 1\n            continue\n      \
    \  }\n        \n        if s[i] == \"3\" {\n            i += 1\n            continue\n\
    \        }\n        \n        if s[i] == \"4\" {\n            i += 1\n       \
    \     continue\n        }\n        \n        if s[i] == \"5\" {\n            i\
    \ += 1\n            continue\n        }\n        \n        if s[i] == \"6\" {\n\
    \            i += 1\n            continue\n        }\n        \n        if s[i]\
    \ == \"7\" {\n            i += 1\n            continue\n        }\n        \n\
    \        if s[i] == \"8\" {\n            i += 1\n            continue\n      \
    \  }\n        \n        if s[i] == \"9\" {\n            i += 1\n            continue\n\
    \        }\n        \n        if s[i] == \"!\" {\n            i += 1\n       \
    \     continue\n        }\n        \n        if s[i] == \"?\" {\n            i\
    \ += 1\n            continue\n        }\n        \n        if s[i] == \".\" {\n\
    \            i += 1\n            continue\n        }\n        \n        if s[i]\
    \ == \"-\" {\n            i += 1\n            continue\n        }\n        \n\
    \        if s[i] == \"_\" {\n            i += 1\n            continue\n      \
    \  }\n        \n        if s[i] == \":\" {\n            i += 1\n            continue\n\
    \        }\n        \n        if s[i] == \"$\" {\n            i += 1\n       \
    \     continue\n        }\n        \n        if s[i] == \"%\" {\n            i\
    \ += 1\n            continue\n        }\n        \n        if s[i] == \"^\" {\n\
    \            i += 1\n            continue\n        }\n        \n        if s[i]\
    \ == \"&\" {\n            i += 1\n            continue\n        }\n        \n\
    \        if s[i] == \"*\" {\n            i += 1\n            continue\n      \
    \  }\n        \n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpjqnx3x7w.swift:161:69: error: expected '}' at end of brace statement\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])\n\
    \                                                                    ^\n/tmp/tmpjqnx3x7w.swift:8:50:\
    \ note: to match this opening '{'\nfunc select_words(s: String, n: Int) -> [String]\
    \ {\n                                                 ^\n/tmp/tmpjqnx3x7w.swift:19:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[i] == \" \" {\n           ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpjqnx3x7w.swift:24:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[i] == \"a\" || s[i] == \"e\" || s[i]\
    \ == \"i\" || s[i] == \"o\" || s[i] == \"u\" {\n           ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpjqnx3x7w.swift:24:27:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[i] == \"a\" || s[i] == \"e\" || s[i]\
    \ == \"i\" || s[i] == \"o\" || s[i] == \"u\" {\n                          ^~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpjqnx3x7w.swift:24:42:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[i] == \"a\" || s[i] == \"e\" || s[i]\
    \ == \"i\" || s[i] == \"o\" || s[i] == \"u\" {\n                             \
    \            ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmpjqnx3x7w.swift:24:57: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s[i] =="
  stdout: ''
  timestamp: 1660014559
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: '/tmp/tmpbd0n15ik.swift:10:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014558
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    var result\
    \ = [String]()\n    \n    if s == \"\" {\n        return result\n    }\n    \n\
    \    var i = 0\n    var j = 0\n    \n    for char in s {\n        if char == \"\
    \ \" {\n            i = j\n        }\n        \n        if char == \"a\" || char\
    \ == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n            i\
    \ = j\n        }\n        \n        if char == \"n\" {\n            i = j\n  \
    \      }\n        \n        if char == \"c\" || char == \"d\" || char == \"f\"\
    \ || char == \"g\" || char == \"h\" || char == \"j\" || char == \"k\" || char\
    \ == \"l\" || char == \"m\" || char == \"p\" || char == \"q\" || char == \"r\"\
    \ || char == \"s\" || char == \"t\" || char == \"v\" || char == \"w\" || char\
    \ == \"x\" || char == \"y\" || char == \"z\" {\n            j = i\n        }\n\
    \        \n        if char == \" \" {\n            i = j\n        }\n        \n\
    \        if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" ||\
    \ char == \"u\" {\n            i = j\n        }\n        \n        if char ==\
    \ \"n\" {\n            i = j\n        }\n        \n        if char == \"c\" ||\
    \ char == \"d\" || char == \"f\" || char == \"g\" || char == \"h\" || char ==\
    \ \"j\" || char == \"k\" || char == \"l\" || char == \"m\" || char == \"p\" ||\
    \ char == \"q\" || char == \"r\" || char == \"s\" || char == \"t\" || char ==\
    \ \"v\" || char == \"w\" || char == \"x\" || char == \"y\" || char == \"z\" {\n\
    \            j = i\n        }\n        \n        if char == \" \" {\n        \
    \    i = j\n        }\n        \n        if char == \"a\" || char == \"e\" ||\
    \ char == \"i\" || char == \"o\" || char == \"u\" {\n            i = j\n     \
    \   }\n        \n        if char == \"n\" {\n            i = j\n        }\n  \
    \      \n        if char == \"c\" || char == \"d\" || char == \"f\" || char ==\
    \ \"g\" || char == \"h\" || char == \"j\" || char == \"k\" || char == \"l\" ||\
    \ char == \"m\" || char == \"p\" || char == \"q\" || char == \"r\" || char ==\
    \ \"s\" || char == \"t\" || char == \"v\" || char == \"w\" || char == \"x\" ||\
    \ char == \"y\" || char == \"z\" {\n            j = i\n        }\n        \n \
    \       if char == \" \" {\n            i = j\n        }\n        \n        if\
    \ char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char ==\
    \ \"u\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbt1gh4pf.swift:71:80: error: unterminated string literal\n    \
    \    if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char\
    \ == \"u\n                                                                   \
    \            ^\n/tmp/tmpbt1gh4pf.swift:93:69: error: expected '}' at end of brace\
    \ statement\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"\
    d\", \"f\"])\n                                                               \
    \     ^\n/tmp/tmpbt1gh4pf.swift:8:50: note: to match this opening '{'\nfunc select_words(s:\
    \ String, n: Int) -> [String] {\n                                            \
    \     ^\n/tmp/tmpbt1gh4pf.swift:75:6: error: operator functions can only be declared\
    \ at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014559
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\nfunc select_words(s: String, n: Int) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(select_words(s: \"Mary had a\
    \ little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little\
    \ lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white\
    \ space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n:\
    \ 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpeap9r23u/tmpeap9r23u.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0facfa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0facc9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0facc9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0facc9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeap9r23u                        0x000055ba4819c4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b0fad194460 __libc_start_main +
    245

    6    tmpeap9r23u                        0x000055ba4819c0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014558
