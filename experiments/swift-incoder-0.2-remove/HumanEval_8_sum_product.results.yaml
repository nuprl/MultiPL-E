language: swift
name: HumanEval_8_sum_product
results:
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013900
- exit_code: -4
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\nfunc sum_product(numbers: [Int])\
    \ -> (Int, Int) {\n    var sum: Int = 0\n    var product: Int = 0\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: Exception
  stderr: 'tmpr16t9nlh/tmpr16t9nlh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019c099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019bd90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019bd90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019bd8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr16t9nlh                        0x000055d216544511 <unavailable> + 5393

    5    libc.so.6                          0x00002b019c285460 __libc_start_main +
    245

    6    tmpr16t9nlh                        0x000055d216544139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014034
