name: HumanEval_130_tri
language: swift
prompt: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
  \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
  \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) =\
  \ 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2)\
  \ + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n///\
  \ tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You\
  \ are given a non-negative integer number n, you have to a return a list of the\
  \ \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\nfunc tri(n:\
  \ Int) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n:\
  \ 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n:\
  \ 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
  assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2,\
  \ 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
  \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
  \ 1) == [1, 3])"
completions: ["    var result = [Int]()\n    if n == 0 {\n        result.append(0)\n\
    \        result.append(1)\n        return result\n    }\n    if n == 1 {\n   \
    \     result.append(0)\n        return result\n    }\n    if n == 2 {\n      \
    \  result.append(1)\n        result.append(2)\n        return result\n    }\n\
    \    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n \
    \   return result", "    var result = [Int]()\n    if n == 0 {\n        return\
    \ [0]\n    }\n    if n == 1 {\n        return [1]\n    }\n    if n == 2 {\n  \
    \      return [1, 2]\n    }\n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2))\n    }\n    return result", "    var result = [Int]()\n   \
    \ \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n \
    \   } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  }\n    return result", "    var result = [Int]()\n    \n    if n == 0 {\n \
    \       result.append(0)\n        result.append(1)\n        return result\n  \
    \  }\n    \n    if n == 1 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(0)\n\
    \        result.append(1)\n        result.append(2)\n        return result\n \
    \   }\n    \n    if n % 2 == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        result.append(2)\n        result.append(3)\n        result.append(4)\n\
    \        result.append(5)\n        result.append(6)\n        result.append(7)\n\
    \        result.append(8)\n        result.append(9)\n        result.append(10)\n\
    \        result.append(11)\n        result.append(12)\n        result.append(13)\n\
    \        result.append(14)\n        result.append(15)\n        result.append(16)\n\
    \        result.append(17)\n        result.append(18)\n        result.append(19)\n\
    \        result.append(20)\n        result.append(21)\n        result.append(22)\n\
    \        result.append(23)\n        result.append(24)\n        result.append(25)\n\
    \        result.append(26)\n        result.append(27)\n        result.append(28)\n\
    \        result.append(29)\n        result.append(30)\n        result.append(31)\n\
    \        result.append(32)\n        result.append(33)\n        result.append(34)\n\
    \        result.append(35)\n        result.append(36)\n        result.append(37)\n\
    \        result.append(38)\n        result.append(39)\n        result.append(40)\n\
    \        result.append(41)\n        result.append(42)\n        result.append(43)\n\
    \        result.append(44)\n        result.append(45)\n        result.append(46)\n\
    \        result.append(47)\n        result.append(48)\n        result.append(49)\n\
    \        result.append(50)\n        result.append(51)\n        result.append(52)\n\
    \        result.append(53)\n        result.append(54)\n        result.append(55)\n\
    \        result.append(56)\n        result.append(57)\n        result.append(58)\n\
    \        result.append(59)\n        result.append(60)\n        result.append(61)\n\
    \        result.append(62)\n        result.append(63)\n        result.append(64)\n\
    \        result.append(65)\n        result.append(66)\n        result.append(67)\n\
    \        result.append(68)\n        result.append(69)\n        result.append(70)\n\
    \        result.append(71)\n        result.append(72)\n        result.append(73)\n\
    \        result.append(74)\n        result.append(75)\n        result.append(76)\n\
    \        result.append(77)\n        result.append(78)\n        result.append(79)\n\
    \        result.append(80)\n        result.append(81)\n        result.append(82)\n\
    \        result.append(83)\n        result.append(84)\n        result.append(85)\n\
    \        result.append(86)\n        result.append(87)\n        result.append(88)\n\
    \        result.append(89)\n        result.append(90)\n        result.append(91)\n\
    \        result.append(92)\n        result.append(93)\n        result.append(94)",
  "    var result = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n   \
    \     result.append(1)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        result.append(1)\n        return result\n \
    \   }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n    }\n    else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result", "    var result = [Int]()\n    \n    if n ==\
    \ 0 {\n        result.append(0)\n        return result\n    }\n    \n    if n\
    \ == 1 {\n        result.append(1)\n        return result\n    }\n    \n    if\
    \ n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    } else {\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n  \
    \  return result", "    var result = [Int]()\n    var a = 3\n    var b = 2\n \
    \   var c = 1\n    for _ in 0..<n {\n        result.append(a)\n        if n %\
    \ 2 == 0 {\n            result.append(b)\n        }\n        if n % 2 == 1 {\n\
    \            result.append(c)\n        }\n        a = a + b + c\n        b = c\n\
    \        c = a + b\n    }\n    return result", "    var result = [Int]()\n   \
    \ if n == 1 {\n        result.append(1)\n        return result;\n    }\n    if\
    \ n == 2 {\n        result.append(3)\n        return result;\n    }\n    if n\
    \ % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n    }\n    return result", "   \
    \ var result = [Int]()\n    var first = 0\n    var second = 1\n    var third =\
    \ 1\n    for _ in 1...n {\n        result.append(first)\n        result.append(second)\n\
    \        result.append(third)\n        first++\n        second++\n        third++\n\
    \    }\n    return result", "    var result = [Int]()\n    if n == 0 {\n     \
    \   result.append(0)\n        result.append(1)\n        return result\n    }\n\
    \    if n == 1 {\n        result.append(0)\n        result.append(1)\n       \
    \ return result\n    }\n    if n == 2 {\n        result.append(0)\n        result.append(1)\n\
    \        result.append(2)\n        return result\n    }\n    if n % 2 == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        result.append(2)\n\
    \        result.append(3)\n        result.append(4)\n        result.append(5)\n\
    \        result.append(6)\n        result.append(7)\n        result.append(8)\n\
    \        result.append(9)\n        result.append(10)\n        result.append(11)\n\
    \        result.append(12)\n        result.append(13)\n        result.append(14)\n\
    \        result.append(15)\n        result.append(16)\n        result.append(17)\n\
    \        result.append(18)\n        result.append(19)\n        result.append(20)\n\
    \        result.append(21)\n        result.append(22)\n        result.append(23)\n\
    \        result.append(24)\n        result.append(25)\n        result.append(26)\n\
    \        result.append(27)\n        result.append(28)\n        result.append(29)\n\
    \        result.append(30)\n        result.append(31)\n        result.append(32)\n\
    \        result.append(33)\n        result.append(34)\n        result.append(35)\n\
    \        result.append(36)\n        result.append(37)\n        result.append(38)\n\
    \        result.append(39)\n        result.append(40)\n        result.append(41)\n\
    \        result.append(42)\n        result.append(43)\n        result.append(44)\n\
    \        result.append(45)\n        result.append(46)\n        result.append(47)\n\
    \        result.append(48)\n        result.append(49)\n        result.append(50)\n\
    \        result.append(51)\n        result.append(52)\n        result.append(53)\n\
    \        result.append(54)\n        result.append(55)\n        result.append(56)\n\
    \        result.append(57)\n        result.append(58)\n        result.append(59)\n\
    \        result.append(60)\n        result.append(61)\n        result.append(62)\n\
    \        result.append(63)\n        result.append(64)\n        result.append(65)\n\
    \        result.append(66)\n        result.append(67)\n        result.append(68)\n\
    \        result.append(69)\n        result.append(70)\n        result.append(71)\n\
    \        result.append(72)\n        result.append(73)\n        result.append(74)\n\
    \        result.append(75)\n        result.append(76)\n        result.append(77)\n\
    \        result.append(78)\n        result.append(79)\n        result.append(80)\n\
    \        result.append(81)\n        result.append(82)\n        result.append(83)\n\
    \        result.append(84)\n        result.append(85)\n        result.append(86)\n\
    \        result.append(87)\n        result.append(88)\n        result.append(89)\n\
    \        result.append(90)\n        result.append(91)\n        result.append(92)\n\
    \        result.append(93)\n        result.append(94)\n        result.append(95)\n\
    \        result.append(", "    var result = [Int]()\n    \n    if n == 1 {\n \
    \       result.append(1)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(n)\n        result.append(n + 1 )\n        return\
    \ result\n    }\n    \n    result.append(n)\n    result.append(n + 1 )\n    result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    return result", "    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    \n    return\
    \ result", "    var result = [Int]()\n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    if n == 2 {\n        result.append(3)\n   \
    \     return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n    }\n    return result", "    var result = [Int]()\n    \n\
    \    if n == 0 {\n        result.append(0)\n        return result\n    }\n   \
    \ \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1) + tri(n + 2))\n    }\n    return result", "    var result = [Int]()\n   \
    \ \n    if n == 1 {\n        result.append(3)\n        return result;\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n\
    \    \n    return result", "    var result = [Int]()\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    }\n    return result", "    var result = [Int]()\n \
    \   if n == 1 {\n        result.append(1)\n        return result\n    }\n    if\
    \ n == 2 {\n        result.append(3)\n        return result\n    }\n    if n ==\
    \ 3 {\n        result.append(3)\n        result.append(1)\n        return result\n\
    \    }\n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n  \
    \  return result", "    var result = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(2)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2))\n    }\n    return result", " \
    \   var result = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n  \
    \      return result\n    }\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1) + tri(n - 3))\n    }\n    return result", "   \
    \ var result = [Int]()\n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    if n == 1 {\n        result.append(0)\n   \
    \     result.append(1)\n        return result\n    }\n    if n == 2 {\n      \
    \  result.append(0)\n        result.append(1)\n        result.append(2)\n    \
    \    return result\n    }\n    if n % 2 == 0 {\n        result.append(0)\n   \
    \     result.append(1)\n        result.append(2)\n        result.append(3)\n \
    \       return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n    result.append(0)\n\
    \    result.append(1)\n    result.append(2)\n    result.append(3)\n    result.append(4)\n\
    \    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)", "    var result\
    \ = [Int]()\n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    if n == 2 {\n        result.append(3)\n        return result\n   \
    \ }\n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n\
    \    return result", "    var result = [Int]()\n    var a = 2\n    var b = 3\n\
    \    var c = 1\n    for _ in 0..<n {\n        result.append(c)\n        if n %\
    \ 2 == 0 {\n            c += a + b\n        } else {\n            c += b + a\n\
    \        }\n        a = b\n        b = c\n    }\n    return result", "    var\
    \ result = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n    }\n \
    \   \n    if n == 1 {\n        result.append(1)\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    if n % 2 == 1 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(3)\n        return result;\n   \
    \ }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n \
    \   }\n    \n    return result", "    var result = [Int]()\n    if n == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        return result\n \
    \   }\n    if n == 1 {\n        result.append(0)\n        result.append(1)\n \
    \       return result\n    }\n    if n == 2 {\n        result.append(0)\n    \
    \    result.append(1)\n        result.append(2)\n        return result\n    }\n\
    \    if n % 2 == 0 {\n        result.append(0)\n        result.append(1)\n   \
    \     result.append(2)\n        result.append(3)\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1)\n    }\n    result.append(0)\n    result.append(1)\n\
    \    result.append(2)\n    result.append(3)\n    result.append(4)\n    result.append(5)\n\
    \    result.append(6)\n    result.append(7)\n    result.append(8)\n    result.append(9)\n\
    \    result.append(10)\n    result.append(11)\n    result.append(12)\n    result.append(13)\n\
    \    result.append(14)\n    result.append(15)\n    result.append(16)\n    result.append(17)\n\
    \    result.append(18)\n    result.append(19)\n    result.append(20)\n    result.append(21)\n\
    \    result.append(22)\n    result.append(23)\n    result.append(24)\n    result.append(25)\n\
    \    result.append(26)\n    result.append(27)\n    result.append(28)\n    result.append(29)\n\
    \    result.append(30)\n    result.append(31)\n    result.append(32)\n    result.append(33)\n\
    \    result.append(34)\n    result.append(35)\n    result.append(36)\n    result.append(37)\n\
    \    result.append(38)\n    result.append(39)\n    result.append(40)\n    result.append(41)\n\
    \    result.append(42)\n    result.append(43)\n    result.append(44)\n    result.append(45)\n\
    \    result.append(46)\n    result.append(47)\n    result.append(48)\n    result.append(49)\n\
    \    result.append(50)\n    result.append(51)\n    result.append(52)\n    result.append(53)\n\
    \    result.append(54)\n    result.append(55)\n    result.append(56)\n    result.append(57)\n\
    \    result.append(58)\n    result.append(59)\n    result.append(60)\n    result.append(61)\n\
    \    result.append(62)\n    result.append(63)\n    result.append(64)\n    result.append(65)\n\
    \    result.append(66)\n    result.append(67)\n    result.append(68)\n    result.append(69)\n\
    \    result.append(70)\n    result.append(71)\n    result.append(72)\n    result.append(73)\n\
    \    result.append(74)\n    result.append(75)\n    result.append(76)\n    result.append(77)\n\
    \    result.append(78)\n    result.append(79)\n    result.append(80)\n    result.append(81)\n\
    \    result.append(82)\n    result.append(83)\n    result.append(84)\n    result.append(85)\n\
    \    result.append(86)\n    result.append(87)\n    result.append(88)\n    result.append(89)\n",
  "    var result = [Int]()\n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    if n == 1 {\n        result.append(0)\n   \
    \     result.append(1)\n        return result\n    }\n    if n == 2 {\n      \
    \  result.append(0)\n        result.append(1)\n        result.append(2)\n    \
    \    return result\n    }\n    if n % 2 == 0 {\n        result.append(0)\n   \
    \     result.append(1)\n        result.append(2)\n        result.append(3)\n \
    \       return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n    result.append(0)\n\
    \    result.append(1)\n    result.append(2)\n    result.append(3)\n    result.append(4)\n\
    \    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)", "    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 2) + tri(n + 1))\n    }\n    return\
    \ result", "    var result = [Int]()\n    if n == 1 {\n        result.append(1)\n\
    \        return result;\n    }\n    if n == 2 {\n        result.append(3)\n  \
    \      return result;\n    }\n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) + tri(n))\n    }\n    return result", "    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n \
    \       return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(0)\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(0)\n\
    \        result.append(1)\n        result.append(2)\n        result.append(3)\n\
    \        result.append(4)\n        result.append(5)\n        result.append(6)\n\
    \        result.append(7)\n        result.append(8)\n        result.append(9)\n\
    \        result.append(10)\n        result.append(11)\n        result.append(12)\n\
    \        result.append(13)\n        result.append(14)\n        result.append(15)\n\
    \        result.append(16)\n        result.append(17)\n        result.append(18)\n\
    \        result.append(19)\n        result.append(20)\n        result.append(21)\n\
    \        result.append(22)\n        result.append(23)\n        result.append(24)\n\
    \        result.append(25)\n        result.append(26)\n        result.append(27)\n\
    \        result.append(28)\n        result.append(29)\n        result.append(30)\n\
    \        result.append(31)\n        result.append(32)\n        result.append(33)\n\
    \        result.append(34)\n        result.append(35)\n        result.append(36)\n\
    \        result.append(37)\n        result.append(38)\n        result.append(39)\n\
    \        result.append(40)\n        result.append(41)\n        result.append(42)\n\
    \        result.append(43)\n        result.append(44)\n        result.append(45)\n\
    \        result.append(46)\n        result.append(47)\n        result.append(48)\n\
    \        result.append(49)\n        result.append(50)\n        result.append(51)\n\
    \        result.append(52)\n        result.append(53)\n        result.append(54)\n\
    \        result.append(55)\n        result.append(56)\n        result.append(57)\n\
    \        result.append(58)\n        result.append(59)\n        result.append(60)\n\
    \        result.append(61)\n        result.append(62)\n        result.append(63)\n\
    \        result.append(64)\n        result.append(65)\n        result.append(66)\n\
    \        result.append(67)\n        result.append(68)\n        result.append(69)\n\
    \        result.append(70)\n        result.append(71)\n        result.append(72)\n\
    \        result.append(73)\n        result.append(74)\n        result.append(75)\n\
    \        result.append(76)\n        result.append(77)\n        result.append(78)\n\
    \        result.append(79)\n        result.append(80)\n        result.append(81)\n\
    \        result.append(82)\n        result.append(83)\n        result.append(84)\n\
    \        result.append(85)\n        result.append(86)\n        result.append(87)\n\
    \        result.append(88)\n        result.append(89)\n        result.append(90)\n\
    \        result.append(91)\n        result.append(92)\n        result.append(93)\n\
    \        result.append(94)", "    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        return result;\n    }\n    \n    if n == 1\
    \ {\n        result.append(1)\n        return result;\n    }\n    \n    if n ==\
    \ 2 {\n        result.append(3)\n        return result;\n    }\n    \n    if n\
    \ % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n   \
    \     result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return\
    \ result", "    var result = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n        return result\n    }\n    \n    result.append(tri(n\
    \ - 1) + tri(n - 2))\n    return result", "    var result = [Int]()\n    \n  \
    \  if n == 1 {\n        result.append(3)\n    } else {\n        result.append(1)\n\
    \        result.append(n / 2)\n        if n % 2 == 1 {\n            result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n        } else {\n            result.append(tri(n\
    \ - 1) + tri(n - 2))\n        }\n    }\n    \n    return result", "    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    else {\n        result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n        result.append(tri(n - 2) + tri(n + 1))\n    }\n\
    \    \n    return result", "    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result", "    var result\
    \ = [Int]()\n    var first = 0\n    var second = 1\n    var third = 1\n    for\
    \ _ in 0..<n {\n        result.append(first)\n        result.append(second)\n\
    \        result.append(third)\n        first += second\n        second += third\n\
    \        third += second\n    }\n    return result", "    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n \
    \   } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  }\n    \n    return result", "    var result = [Int]()\n    var first = 3\n\
    \    var second = 1\n    var third = 1\n    var fourth = 1\n    if n % 2 == 0\
    \ {\n        first = 1\n        second = 2\n        third = 1\n        fourth\
    \ = 1\n    }\n    else {\n        first = 1\n        second = 1\n        third\
    \ = 2\n        fourth = 1\n    }\n    for i in 1...n {\n        result.append(first)\n\
    \        result.append(second)\n        result.append(third)\n        result.append(fourth)\n\
    \        first = second\n        second = third\n        third = fourth\n    \
    \    fourth = first + second + third + fourth\n    }\n    return result", "  \
    \  var result = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n   \
    \     result.append(1)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(2)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n        result.append(tri(n\
    \ - 2) + tri(n - 1))\n        return result\n    }\n    \n    result.append(tri(n\
    \ - 1) + tri(n - 2))\n    result.append(tri(n - 2) + tri(n - 1))\n    return result",
  "    var result = [Int]()\n    var a = 2\n    var b = 3\n    var c = a + b\n   \
    \ while c < n {\n        a = b\n        b = c\n        c = a + b\n        result.append(c)\n\
    \    }\n    return result", "    var result = [Int]()\n    \n    if n == 1 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(1)\n        result.append(2)\n        return result\n \
    \   }\n    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n        return result\n    }\n    \n    result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    return result", "    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n \
    \   } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  }\n    \n    return result", "    var result = [Int]()\n    \n    if n == 0\
    \ {\n        result.append(0)\n        return result;\n    }\n    \n    if n ==\
    \ 1 {\n        result.append(1)\n        return result;\n    }\n    \n    if n\
    \ == 2 {\n        result.append(3)\n        return result;\n    }\n    \n    if\
    \ n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n \
    \       result.append(tri(n - 1) + tri(n - 2))\n    }\n    \n    return result",
  "    var result = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n   \
    \     result.append(1)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(0)\n        result.append(1)\n        return result\n \
    \   }\n    \n    if n == 2 {\n        result.append(0)\n        result.append(1)\n\
    \        result.append(2)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(0)\n        result.append(1)\n        result.append(2)\n\
    \        result.append(3)\n        result.append(4)\n        result.append(5)\n\
    \        result.append(6)\n        result.append(7)\n        result.append(8)\n\
    \        result.append(9)\n        result.append(10)\n        result.append(11)\n\
    \        result.append(12)\n        result.append(13)\n        result.append(14)\n\
    \        result.append(15)\n        result.append(16)\n        result.append(17)\n\
    \        result.append(18)\n        result.append(19)\n        result.append(20)\n\
    \        result.append(21)\n        result.append(22)\n        result.append(23)\n\
    \        result.append(24)\n        result.append(25)\n        result.append(26)\n\
    \        result.append(27)\n        result.append(28)\n        result.append(29)\n\
    \        result.append(30)\n        result.append(31)\n        result.append(32)\n\
    \        result.append(33)\n        result.append(34)\n        result.append(35)\n\
    \        result.append(36)\n        result.append(37)\n        result.append(38)\n\
    \        result.append(39)\n        result.append(40)\n        result.append(41)\n\
    \        result.append(42)\n        result.append(43)\n        result.append(44)\n\
    \        result.append(45)\n        result.append(46)\n        result.append(47)\n\
    \        result.append(48)\n        result.append(49)\n        result.append(50)\n\
    \        result.append(51)\n        result.append(52)\n        result.append(53)\n\
    \        result.append(54)\n        result.append(55)\n        result.append(56)\n\
    \        result.append(57)\n        result.append(58)\n        result.append(59)\n\
    \        result.append(60)\n        result.append(61)\n        result.append(62)\n\
    \        result.append(63)\n        result.append(64)\n        result.append(65)\n\
    \        result.append(66)\n        result.append(67)\n        result.append(68)\n\
    \        result.append(69)\n        result.append(70)\n        result.append(71)\n\
    \        result.append(72)\n        result.append(73)\n        result.append(74)\n\
    \        result.append(75)\n        result.append(76)\n        result.append(77)\n\
    \        result.append(78)\n        result.append(79)\n        result.append(80)\n\
    \        result.append(81)\n        result.append(82)\n        result.append(83)\n\
    \        result.append(84)\n        result.append(85)\n        result.append(86)\n\
    \        result.append(87)\n        result.append(88)\n        result.append(89)\n\
    \        result.append(90)\n        result.append(91)\n        result.append(92)\n\
    \        result.append(93)\n        result.append(94)", "    var result = [Int]()\n\
    \    var first = 3\n    var second = 1\n    var third = 1\n    var fourth = 1\n\
    \    var fifth = 1\n    if n % 2 == 0 {\n        first = 3\n        second = 1\n\
    \        third = 1\n        fourth = 1\n        fifth = 1\n    } else {\n    \
    \    first = 1\n        second = 1\n        third = 1\n        fourth = 1\n  \
    \      fifth = 1\n    }\n    for _ in 1...n {\n        result.append(first)\n\
    \        third = first + second\n        fourth = first + second + third\n   \
    \     fifth = first + second + third + fourth\n        first = third\n       \
    \ second = fourth\n        third = fifth\n    }\n    return result", "    var\
    \ result = [Int]()\n    var a = 2\n    var b = 3\n    var c = a + b\n    while\
    \ c < n {\n        result.append(c)\n        a = b\n        b = c\n        c =\
    \ a + b\n    }\n    result.append(c)\n    return result", "    var result = [Int]()\n\
    \    var a = 2\n    var b = 3\n    var c = a + b\n    while c < n {\n        result.append(c)\n\
    \        a = b\n        b = c\n        c = a + b\n    }\n    result.append(c)\n\
    \    return result", "    var result = [Int]()\n    if n == 1 {\n        result.append(3)\n\
    \        return result\n    }\n    if n == 2 {\n        result.append(1)\n   \
    \     result.append(2)\n        return result\n    }\n    if n == 3 {\n      \
    \  result.append(1)\n        result.append(2)\n        result.append(3)\n    \
    \    return result\n    }\n    if n % 2 == 0 {\n        result.append(1)\n   \
    \     result.append(n)\n        result.append(n + 2)\n        return result\n\
    \    }\n    result.append(1)\n    result.append(n)\n    result.append(n + 2)\n\
    \    result.append(n + 3)\n    return result", "    var result = [Int]()\n   \
    \ \n    if n == 1 {\n        result.append(3)\n    }\n    \n    if n % 2 == 0\
    \ {\n        result.append(1 + n / 2)\n    }\n    \n    if n % 2 == 1 {\n    \
    \    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return\
    \ result", "    var result = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    if n == 0 {\n        result.append(0)\n        result.append(1)\n       \
    \ return result\n    }\n    if n == 1 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    if n == 2 {\n        result.append(0)\n   \
    \     result.append(1)\n        result.append(2)\n        return result\n    }\n\
    \    if n % 2 == 0 {\n        result.append(0)\n        result.append(1)\n   \
    \     result.append(2)\n        result.append(3)\n        result.append(4)\n \
    \       result.append(5)\n        result.append(6)\n        result.append(7)\n\
    \        result.append(8)\n        result.append(9)\n        result.append(10)\n\
    \        result.append(11)\n        result.append(12)\n        result.append(13)\n\
    \        result.append(14)\n        result.append(15)\n        result.append(16)\n\
    \        result.append(17)\n        result.append(18)\n        result.append(19)\n\
    \        result.append(20)\n        result.append(21)\n        result.append(22)\n\
    \        result.append(23)\n        result.append(24)\n        result.append(25)\n\
    \        result.append(26)\n        result.append(27)\n        result.append(28)\n\
    \        result.append(29)\n        result.append(30)\n        result.append(31)\n\
    \        result.append(32)\n        result.append(33)\n        result.append(34)\n\
    \        result.append(35)\n        result.append(36)\n        result.append(37)\n\
    \        result.append(38)\n        result.append(39)\n        result.append(40)\n\
    \        result.append(41)\n        result.append(42)\n        result.append(43)\n\
    \        result.append(44)\n        result.append(45)\n        result.append(46)\n\
    \        result.append(47)\n        result.append(48)\n        result.append(49)\n\
    \        result.append(50)\n        result.append(51)\n        result.append(52)\n\
    \        result.append(53)\n        result.append(54)\n        result.append(55)\n\
    \        result.append(56)\n        result.append(57)\n        result.append(58)\n\
    \        result.append(59)\n        result.append(60)\n        result.append(61)\n\
    \        result.append(62)\n        result.append(63)\n        result.append(64)\n\
    \        result.append(65)\n        result.append(66)\n        result.append(67)\n\
    \        result.append(68)\n        result.append(69)\n        result.append(70)\n\
    \        result.append(71)\n        result.append(72)\n        result.append(73)\n\
    \        result.append(74)\n        result.append(75)\n        result.append(76)\n\
    \        result.append(77)\n        result.append(78)\n        result.append(79)\n\
    \        result.append(80)\n        result.append(81)\n        result.append(82)\n\
    \        result.append(83)\n        result.append(84)\n        result.append(85)\n\
    \        result.append(86)\n        result.append(87)\n        result.append(88)\n\
    \        result.append(89)\n        result.append(90)\n        result.append(91)\n\
    \        result.append(92)\n        result.append(93)\n        result.append(94)\n\
    \        result.append(95)\n        result.append(", "    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n  \
    \  return result", "    var result = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n \
    \       return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(1)\n\
    \        result.append(2)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result", "    var result\
    \ = [Int]()\n    var a = 2\n    var b = 3\n    var c = a + b\n    var d = c +\
    \ a\n    var e = d + b\n    var f = e + c\n    var g = f + d\n    var h = g +\
    \ e\n    var i = h + f\n    var j = i + g\n    var k = j + h\n    var l = k +\
    \ i\n    var m = l + j\n    var n = m + k\n    result.append(n)\n    return result",
  "    var result = [Int]()\n    if n == 0 {\n        result.append(0)\n        return\
    \ result;\n    }\n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    if n == 2 {\n        result.append(3)\n        return result;\n  \
    \  }\n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n    }\n    return result", "    var result = [Int]()\n    if n == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        return result\n \
    \   }\n    if n == 1 {\n        result.append(0)\n        return result\n    }\n\
    \    if n == 2 {\n        result.append(1)\n        result.append(2)\n       \
    \ return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) +\
    \ tri(n - 2))\n    }\n    return result", "    var result = [Int]()\n    var a\
    \ = 2\n    var b = 3\n    var c = a + b\n    while c < n {\n        result.append(c)\n\
    \        a = b\n        b = c\n        c = a + b\n    }\n    result.append(c)\n\
    \    return result", "    var result = [Int]()\n    if n == 0 {\n        result.append(0)\n\
    \        return result\n    }\n    if n == 1 {\n        result.append(1)\n   \
    \     return result\n    }\n    if n == 2 {\n        result.append(3)\n      \
    \  return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    }\n    return result", "    var result = [Int]()\n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    if n == 2 {\n   \
    \     result.append(3)\n        return result\n    }\n    if n % 2 == 0 {\n  \
    \      result.append(tri(n - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result", "    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2))\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n \
    \       return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(0)\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    result.append(0)\n    result.append(1)\n\
    \    result.append(2)\n    result.append(3)\n    result.append(4)\n    result.append(5)\n\
    \    result.append(6)\n    result.append(7)\n    result.append(8)\n    result.append(9)\n\
    \    result.append(10)\n    result.append(11)\n    result.append(12)\n    result.append(13)\n\
    \    result.append(14)\n    result.append(15)\n    result.append(16)\n    result.append(17)\n\
    \    result.append(18)\n    result.append(19)\n    result.append(20)\n    result.append(21)\n\
    \    result.append(22)\n    result.append(23)\n    result.append(24)\n    result.append(25)\n\
    \    result.append(26)\n    result.append(27)\n    result.append(28)\n    result.append(29)\n\
    \    result.append(30)\n    result.append(31)\n    result.append(32)\n    result.append(33)\n\
    \    result.append(34)\n    result.append(35)\n    result.append(36)\n    result.append(37)\n\
    \    result.append(38)\n    result.append(39)\n    result.append(40)\n    result.append(41)\n\
    \    result.append(42)\n    result.append(43)\n    result.append(44)\n    result.append(45)\n\
    \    result.append(46)\n    result.append(47)\n    result.append(48)\n    result.append(49)\n\
    \    result.append(50)\n    result.append(51)\n    result.append(52)\n    result.append(53)\n\
    \    result.append(54)\n    result.append(55)\n    result.append(56)\n    result.append(57)\n\
    \    result.append(58)\n    result.append(59)\n    result.append(60)\n    result.append(61)\n\
    \    result.append(62)\n    result.append(63)\n    result.append(64)\n    result.append(65)\n\
    \    result.append(66)\n    result.append(67)\n    result.append(68)\n    result.append(69)\n\
    \    result.append(70)\n    result.append(71)\n    result.append(72)\n    result.append(73)\n\
    \    result.append(74)\n    result.append(75)\n    result.append(76)\n    result.append(77)\n\
    \    result.append(78)\n    result.append(79)\n    result.append(80)\n    result.append(81)\n\
    \    result.append(82)\n    result.append(83)\n    result.append(84)\n    result.append(85)\n\
    \    result.append(86)\n    result.append(87)\n    result.append(88)\n    result.append(89)\n\
    \    result.append(90)\n    result.append(91)\n    result.append(92)\n    result.append(93)\n\
    \    result.append(94)\n    result.append(95", "    var result = [Int]()\n   \
    \ if n == 1 {\n        result.append(1)\n        return result\n    }\n    if\
    \ n == 2 {\n        result.append(3)\n        return result\n    }\n    if n %\
    \ 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    \
    \    return result\n    }\n    result.append(tri(n - 1) + tri(n - 2))\n    return\
    \ result", "    var result = [Int]()\n    if n == 0 {\n        result.append(0)\n\
    \        result.append(1)\n        return result\n    }\n    if n == 1 {\n   \
    \     result.append(0)\n        return result\n    }\n    if n == 2 {\n      \
    \  result.append(1)\n        result.append(2)\n        return result\n    }\n\
    \    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n    }\n    else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n        result.append(tri(n - 1) + tri(n + 1) + tri(n + 2))\n    }\n\
    \    return result", "    var result = [Int]()\n    \n    if n == 0 {\n      \
    \  result.append(0)\n        return result;\n    }\n    \n    if n == 1 {\n  \
    \      result.append(1)\n        return result;\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        return result;\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    \n    return result",
  "    var result = [Int]()\n    if n == 0 {\n        result.append(0)\n        return\
    \ result\n    }\n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    if n == 2 {\n        result.append(3)\n        return result\n   \
    \ }\n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n  \
    \  return result", "    var result = [Int]()\n    if n == 0 {\n        result.append(0)\n\
    \        result.append(1)\n        return result\n    }\n    if n == 1 {\n   \
    \     result.append(0)\n        return result\n    }\n    if n == 2 {\n      \
    \  result.append(1)\n        result.append(2)\n        return result\n    }\n\
    \    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return\
    \ result", "    var result = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n    }\n    return result", "    var result = [Int]()\n    if\
    \ n == 0 {\n        result.append(0)\n        return result;\n    }\n    if n\
    \ == 1 {\n        result.append(1)\n        return result;\n    }\n    if n ==\
    \ 2 {\n        result.append(3)\n        return result;\n    }\n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 2) + tri(n + 1))\n    }\n    return result", "    var result = [Int]()\n \
    \   if n == 0 {\n        result.append(0)\n        result.append(1)\n        return\
    \ result\n    }\n    if n == 1 {\n        result.append(0)\n        return result\n\
    \    }\n    if n == 2 {\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    if n % 2 == 0 {\n        result.append(1)\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        return result\n\
    \    }\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    return result",
  "    var result = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n   \
    \     return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n        return result\n    }\n    \n    result.append(tri(n\
    \ - 1) + tri(n - 2))\n    return result", "    var result = [Int]()\n    \n  \
    \  if n == 1 {\n        result.append(1)\n        return result\n    }\n    \n\
    \    if n == 2 {\n        result.append(3)\n        return result\n    }\n   \
    \ \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\
    \ else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n\
    \    \n    return result", "    var result = [Int]()\n    if n == 0 {\n      \
    \  result.append(0)\n        result.append(1)\n        return result\n    }\n\
    \    if n == 1 {\n        result.append(0)\n        return result\n    }\n   \
    \ if n == 2 {\n        result.append(1)\n        result.append(2)\n        return\
    \ result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    }\n    return result", "    var result = [Int]()\n    if n == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        return result\n \
    \   }\n    if n == 1 {\n        result.append(0)\n        return result\n    }\n\
    \    if n == 2 {\n        result.append(1)\n        result.append(2)\n       \
    \ return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    }\n    return result", "    var result = [Int]()\n    \n    if n\
    \ == 0 {\n        result.append(0)\n        return result;\n    }\n    \n    if\
    \ n == 1 {\n        result.append(1)\n        return result;\n    }\n    \n  \
    \  if n == 2 {\n        result.append(3)\n        return result;\n    }\n    \n\
    \    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n  \
    \  return result", "    var result = [Int]()\n    if n == 0 {\n        result.append(0)\n\
    \        return result\n    }\n    if n == 1 {\n        result.append(1)\n   \
    \     return result\n    }\n    if n == 2 {\n        result.append(3)\n      \
    \  return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    }\n    return result", "    var result = [Int]()\n    if n == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        return result\n \
    \   }\n    if n == 1 {\n        result.append(0)\n        result.append(1)\n \
    \       return result\n    }\n    if n == 2 {\n        result.append(0)\n    \
    \    result.append(1)\n        result.append(2)\n        return result\n    }\n\
    \    if n % 2 == 0 {\n        result.append(0)\n        result.append(1)\n   \
    \     result.append(2)\n        result.append(3)\n        result.append(4)\n \
    \       result.append(5)\n        result.append(6)\n        result.append(7)\n\
    \        result.append(8)\n        result.append(9)\n        result.append(10)\n\
    \        result.append(11)\n        result.append(12)\n        result.append(13)\n\
    \        result.append(14)\n        result.append(15)\n        result.append(16)\n\
    \        result.append(17)\n        result.append(18)\n        result.append(19)\n\
    \        result.append(20)\n        result.append(21)\n        result.append(22)\n\
    \        result.append(23)\n        result.append(24)\n        result.append(25)\n\
    \        result.append(26)\n        result.append(27)\n        result.append(28)\n\
    \        result.append(29)\n        result.append(30)\n        result.append(31)\n\
    \        result.append(32)\n        result.append(33)\n        result.append(34)\n\
    \        result.append(35)\n        result.append(36)\n        result.append(37)\n\
    \        result.append(38)\n        result.append(39)\n        result.append(40)\n\
    \        result.append(41)\n        result.append(42)\n        result.append(43)\n\
    \        result.append(44)\n        result.append(45)\n        result.append(46)\n\
    \        result.append(47)\n        result.append(48)\n        result.append(49)\n\
    \        result.append(50)\n        result.append(51)\n        result.append(52)\n\
    \        result.append(53)\n        result.append(54)\n        result.append(55)\n\
    \        result.append(56)\n        result.append(57)\n        result.append(58)\n\
    \        result.append(59)\n        result.append(60)\n        result.append(61)\n\
    \        result.append(62)\n        result.append(63)\n        result.append(64)\n\
    \        result.append(65)\n        result.append(66)\n        result.append(67)\n\
    \        result.append(68)\n        result.append(69)\n        result.append(70)\n\
    \        result.append(71)\n        result.append(72)\n        result.append(73)\n\
    \        result.append(74)\n        result.append(75)\n        result.append(76)\n\
    \        result.append(77)\n        result.append(78)\n        result.append(79)\n\
    \        result.append(80)\n        result.append(81)\n        result.append(82)\n\
    \        result.append(83)\n        result.append(84)\n        result.append(85)\n\
    \        result.append(86)\n        result.append(87)\n        result.append(88)\n\
    \        result.append(89)\n        result.append(90)\n        result.append(91)\n\
    \        result.append(92)\n        result.append(93)\n        result.append(94)\n\
    \        result.append(95)\n        result.append(", "    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1) + tri(n - 3) + tri(n - 4))\n    }\n    return result", "    var result =\
    \ [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n - 3))\n\
    \    }\n    \n    return result", "    var result = [Int]()\n    if n == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        return result\n \
    \   }\n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    if n == 2 {\n        result.append(2)\n        result.append(3)\n       \
    \ return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n    }\n    return result", "    var result = [Int]()\n    \n  \
    \  if n == 0 {\n        result.append(0)\n        return result\n    }\n    \n\
    \    if n == 1 {\n        result.append(1)\n        return result\n    }\n   \
    \ \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n  \
    \  return result", "    var result = [Int]()\n    \n    if n == 1 {\n        result.append(3)\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(1 + n / 2)\n    }\n \
    \   \n    if n % 2 == 1 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    }\n    \n    return result", "    var result = [Int]()\n    \n  \
    \  if n == 0 {\n        result.append(0)\n    }\n    \n    if n == 1 {\n     \
    \   result.append(1)\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    \n    if n % 2 == 1 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n \
    \       return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(1)\n\
    \        result.append(2)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result", "    var result\
    \ = [Int]()\n    var a = 2\n    var b = 3\n    var c = 1\n    for _ in 0..<n {\n\
    \        result.append(c)\n        if n % 2 == 0 {\n            a += b\n     \
    \       b += c\n            c += 1\n        } else {\n            b += c\n   \
    \         c += 1\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n \
    \       return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(1)\n\
    \        result.append(2)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    }\n    return result", "    var result = [Int]()\n \
    \   \n    if n == 1 {\n        result.append(3)\n    } else {\n        result.append(1)\n\
    \        result.append(n / 2)\n        if n % 2 == 0 {\n            result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n        } else {\n            result.append(tri(n\
    \ - 1) + tri(n - 2))\n        }\n    }\n    \n    return result", "    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(1)\n\
    \        result.append(2)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result", "    var result\
    \ = [Int]()\n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    if n == 1 {\n        result.append(0)\n   \
    \     return result\n    }\n    if n == 2 {\n        result.append(1)\n      \
    \  result.append(2)\n        return result\n    }\n    if n % 2 == 0 {\n     \
    \   result.append(1)\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return\
    \ result", "    var result = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(n)\n\
    \        result.append(1 + n / 2)\n    } else {\n        result.append(n)\n  \
    \      result.append(1 + n / 2)\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n \
    \       return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(0)\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(0)\n\
    \        result.append(1)\n        result.append(2)\n        result.append(3)\n\
    \        return tri(n - 1) + tri(n - 2) + tri(n + 1) + result\n    }\n    \n \
    \   result.append(0)\n    result.append(1)\n    result.append(2)\n    result.append(3)\n\
    \    result.append(4)\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + result",
  "    var result = [Int]()\n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    if n == 1 {\n        result.append(1)\n   \
    \     return result\n    }\n    if n == 2 {\n        result.append(3)\n      \
    \  return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    }\n    return result", "    var result = [Int]()\n    var a = 2\n\
    \    var b = 3\n    var c = 1\n    for i in 1...n {\n        result.append(c)\n\
    \        if i % 2 == 0 {\n            a = b\n            b = c\n            c\
    \ = a + b\n        } else {\n            a = b\n            b = c\n          \
    \  c = a + b\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n \
    \   } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  }\n    return result", "    var result = [Int]()\n    if n == 0 {\n       \
    \ result.append(0)\n        result.append(1)\n        return result\n    }\n \
    \   if n == 1 {\n        result.append(0)\n        return result\n    }\n    if\
    \ n == 2 {\n        result.append(1)\n        result.append(2)\n        return\
    \ result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n    }\n    return result", "    var result = [Int]()\n    \n    if n ==\
    \ 1 {\n        result.append(1)\n        return result\n    }\n    \n    if n\
    \ % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    } else {\n \
    \       result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n   \
    \ return result", "    var result = [Int]()\n    \n    if n == 1 {\n        result.append(3)\n\
    \    } else {\n        result.append(1)\n        result.append(n / 2)\n      \
    \  if n % 2 == 0 {\n            result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n        }\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n \
    \       return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(1)\n\
    \        result.append(2)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result", "    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result", "    var result = [Int]()\n    \n    if n ==\
    \ 0 {\n        result.append(0)\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 1 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(0)\n\
    \        result.append(1)\n        result.append(2)\n        return result\n \
    \   }\n    \n    if n % 2 == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        result.append(2)\n        result.append(3)\n        result.append(4)\n\
    \        result.append(5)\n        result.append(6)\n        result.append(7)\n\
    \        result.append(8)\n        result.append(9)\n        result.append(10)\n\
    \        result.append(11)\n        result.append(12)\n        result.append(13)\n\
    \        result.append(14)\n        result.append(15)\n        result.append(16)\n\
    \        result.append(17)\n        result.append(18)\n        result.append(19)\n\
    \        result.append(20)\n        result.append(21)\n        result.append(22)\n\
    \        result.append(23)\n        result.append(24)\n        result.append(25)\n\
    \        result.append(26)\n        result.append(27)\n        result.append(28)\n\
    \        result.append(29)\n        result.append(30)\n        result.append(31)\n\
    \        result.append(32)\n        result.append(33)\n        result.append(34)\n\
    \        result.append(35)\n        result.append(36)\n        result.append(37)\n\
    \        result.append(38)\n        result.append(39)\n        result.append(40)\n\
    \        result.append(41)\n        result.append(42)\n        result.append(43)\n\
    \        result.append(44)\n        result.append(45)\n        result.append(46)\n\
    \        result.append(47)\n        result.append(48)\n        result.append(49)\n\
    \        result.append(50)\n        result.append(51)\n        result.append(52)\n\
    \        result.append(53)\n        result.append(54)\n        result.append(55)\n\
    \        result.append(56)\n        result.append(57)\n        result.append(58)\n\
    \        result.append(59)\n        result.append(60)\n        result.append(61)\n\
    \        result.append(62)\n        result.append(63)\n        result.append(64)\n\
    \        result.append(65)\n        result.append(66)\n        result.append(67)\n\
    \        result.append(68)\n        result.append(69)\n        result.append(70)\n\
    \        result.append(71)\n        result.append(72)\n        result.append(73)\n\
    \        result.append(74)\n        result.append(75)\n        result.append(76)\n\
    \        result.append(77)\n        result.append(78)\n        result.append(79)\n\
    \        result.append(80)\n        result.append(81)\n        result.append(82)\n\
    \        result.append(83)\n        result.append(84)\n        result.append(85)\n\
    \        result.append(86)\n        result.append(87)\n        result.append(88)\n\
    \        result.append(89)\n        result.append(90)\n        result.append(91)\n\
    \        result.append(92)\n        result.append(93)\n        result.append(94)",
  "    var result = [Int]()\n    var a = 2\n    var b = 3\n    var c = a + b\n   \
    \ while c < n {\n        a = b\n        b = c\n        c = a + b\n        result.append(c)\n\
    \    }\n    return result", "    var result = [Int]()\n    var a = 2\n    var\
    \ b = 3\n    var c = a + b\n    while c <= n {\n        result.append(c)\n   \
    \     a = b\n        b = c\n        c = a + b\n    }\n    return result", "  \
    \  var result = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n   \
    \     result.append(1)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(0)\n        result.append(1)\n        return result\n \
    \   }\n    \n    if n == 2 {\n        result.append(0)\n        result.append(1)\n\
    \        result.append(2)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(0)\n        result.append(1)\n        result.append(2)\n\
    \        result.append(3)\n        result.append(4)\n        result.append(5)\n\
    \        result.append(6)\n        result.append(7)\n        result.append(8)\n\
    \        result.append(9)\n        result.append(10)\n        result.append(11)\n\
    \        result.append(12)\n        result.append(13)\n        result.append(14)\n\
    \        result.append(15)\n        result.append(16)\n        result.append(17)\n\
    \        result.append(18)\n        result.append(19)\n        result.append(20)\n\
    \        result.append(21)\n        result.append(22)\n        result.append(23)\n\
    \        result.append(24)\n        result.append(25)\n        result.append(26)\n\
    \        result.append(27)\n        result.append(28)\n        result.append(29)\n\
    \        result.append(30)\n        result.append(31)\n        result.append(32)\n\
    \        result.append(33)\n        result.append(34)\n        result.append(35)\n\
    \        result.append(36)\n        result.append(37)\n        result.append(38)\n\
    \        result.append(39)\n        result.append(40)\n        result.append(41)\n\
    \        result.append(42)\n        result.append(43)\n        result.append(44)\n\
    \        result.append(45)\n        result.append(46)\n        result.append(47)\n\
    \        result.append(48)\n        result.append(49)\n        result.append(50)\n\
    \        result.append(51)\n        result.append(52)\n        result.append(53)\n\
    \        result.append(54)\n        result.append(55)\n        result.append(56)\n\
    \        result.append(57)\n        result.append(58)\n        result.append(59)\n\
    \        result.append(60)\n        result.append(61)\n        result.append(62)\n\
    \        result.append(63)\n        result.append(64)\n        result.append(65)\n\
    \        result.append(66)\n        result.append(67)\n        result.append(68)\n\
    \        result.append(69)\n        result.append(70)\n        result.append(71)\n\
    \        result.append(72)\n        result.append(73)\n        result.append(74)\n\
    \        result.append(75)\n        result.append(76)\n        result.append(77)\n\
    \        result.append(78)\n        result.append(79)\n        result.append(80)\n\
    \        result.append(81)\n        result.append(82)\n        result.append(83)\n\
    \        result.append(84)\n        result.append(85)\n        result.append(86)\n\
    \        result.append(87)\n        result.append(88)\n        result.append(89)\n\
    \        result.append(90)\n        result.append(91)\n        result.append(92)\n\
    \        result.append(93)\n        result.append(94)", "    var result = [Int]()\n\
    \    if n == 0 {\n        result.append(0)\n        return result\n    }\n   \
    \ if n == 1 {\n        result.append(1)\n        return result\n    }\n    if\
    \ n == 2 {\n        result.append(3)\n        return result\n    }\n    if n %\
    \ 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n\
    \    else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n\
    \ - 3) + tri(n - 4))\n    }\n    return result", "    var result = [Int]()\n \
    \   \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n  \
    \      return result\n    }\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(2)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n        return result\n    }\n    \n    result.append(tri(n\
    \ - 1) + tri(n - 2))\n    return result", "    var result = [Int]()\n    if n\
    \ == 1 {\n        result.append(1)\n        return result\n    }\n    if n ==\
    \ 2 {\n        result.append(3)\n        return result\n    }\n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    }\n    return result", "    var result = [Int]()\n \
    \   \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n \
    \   } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  }\n    \n    return result", "    var result = [Int]()\n    \n    if n == 0\
    \ {\n        result.append(0)\n        return result\n    }\n    \n    if n ==\
    \ 1 {\n        result.append(1)\n        return result\n    }\n    \n    if n\
    \ == 2 {\n        result.append(3)\n        return result\n    }\n    \n    if\
    \ n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    } else {\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n  \
    \  return result", "    var result = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n        return result\n    }\n    \n    result.append(tri(n\
    \ - 1) + tri(n - 2))\n    return result", "    var result = [Int]()\n    \n  \
    \  if n == 0 {\n        result.append(0)\n        return result;\n    }\n    \n\
    \    if n == 1 {\n        result.append(1)\n        return result;\n    }\n  \
    \  \n    if n == 2 {\n        result.append(3)\n        return result;\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n  \
    \  \n    return result", "    var result = [Int]()\n    var firstThree = [Int]()\n\
    \    var secondThree = [Int]()\n    var thirdThree = [Int]()\n    var fourthThree\
    \ = [Int]()\n    var fifthThree = [Int]()\n    var sixthThree = [Int]()\n    var\
    \ seventhThree = [Int]()\n    var eighthThree = [Int]()\n    var ninethThree =\
    \ [Int]()\n    var tenthThree = [Int]()\n    var eleventhThree = [Int]()\n   \
    \ var twelfthThree = [Int]()\n    var thirteenthThree = [Int]()\n    var fourteenthThree\
    \ = [Int]()\n    var fifteenthThree = [Int]()\n    var sixteenthThree = [Int]()\n\
    \    var seventeenthThree = [Int]()\n    var eighteenthThree = [Int]()\n    var\
    \ nineteenthThree = [Int]()\n    var twentiethThree = [Int]()\n    var thirtiethThree\
    \ = [Int]()\n    var fourtiethThree = [Int]()\n    var fiftiethThree = [Int]()\n\
    \    var sixtiethThree = [Int]()\n    var seventiethThree = [Int]()\n    var eightiethThree\
    \ = [Int]()\n    var ninetiethThree = [Int]()\n    var hundredthThree = [Int]()\n\
    \    var thousandthThree = [Int]()\n    var millionthThree = [Int]()\n    var\
    \ billionthThree = [Int]()\n    var trillionthThree = [Int]()\n    var quadrillionthThree\
    \ = [Int]()\n    var quintillionthThree = [Int]()\n    var sextillionthThree =\
    \ [Int]()\n    var septillionthThree = [Int]()\n    var octillionthThree = [Int]()\n\
    \    var nonillionthThree = [Int]()\n    var decillionthThree = [Int]()\n    var\
    \ undecillionthThree = [Int]()\n    var duodecillionthThree = [Int]()\n    var\
    \ tredecillionthThree = [Int]()\n    var quattuordecillionthThree = [Int]()\n\
    \    var quindecillionthThree = [Int]()\n    var sexdecillionthThree = [Int]()\n\
    \    var septendecillionthThree = [Int]()\n    var octodecillionthThree = [Int]()\n\
    \    var novemdecillionthThree = [Int]()\n    var vigintilli", "    var result\
    \ = [Int]()\n    var first = 3\n    var second = 1\n    var third = 1\n    for\
    \ _ in 0..<n {\n        result.append(first)\n        result.append(second)\n\
    \        result.append(third)\n        first++\n        second++\n        third++\n\
    \    }\n    return result", "    var result = [Int]()\n    \n    if n == 1 {\n\
    \        result.append(1)\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(1 + n / 2)\n    }\n \
    \   \n    if n % 2 == 1 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    }\n    \n    return result", "    var result = [Int]()\n    if n\
    \ == 1 {\n        result.append(1)\n        return result\n    }\n    if n ==\
    \ 2 {\n        result.append(3)\n        return result\n    }\n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    }\n    return result", "    var result = [Int]()\n \
    \   \n    if n == 0 {\n        result.append(0)\n        return result;\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result;\n   \
    \ }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1) + tri(n - 3))\n    }\n    \n    return result", "    var result =\
    \ [Int]()\n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    if n == 1 {\n        result.append(1)\n        return result\n   \
    \ }\n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \        result.append(tri(n - 2) + tri(n + 1))\n    }\n    return result", " \
    \   var result = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n  \
    \      result.append(1)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(0)\n        result.append(1)\n        return result\n \
    \   }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n \
    \   }\n    return result", "    var result = [Int]()\n    \n    if n == 1 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(1)\n        result.append(2)\n        return result\n \
    \   }\n    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(n)\n\
    \        result.append(1 + n / 2)\n        return result\n    }\n    \n    result.append(1)\n\
    \    result.append(n)\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    return result", "    var result = [Int]()\n    \n    if n == 0 {\n      \
    \  result.append(0)\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(1)\n        result.append(2)\n \
    \       return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    }\n    return result", "    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        return result;\n    }\n    \n    if n == 1\
    \ {\n        result.append(1)\n        return result;\n    }\n    \n    if n ==\
    \ 2 {\n        result.append(3)\n        return result;\n    }\n    \n    if n\
    \ % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n   \
    \     result.append(tri(n - 2) + tri(n + 1))\n    }\n    \n    return result",
  "    var result = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n   \
    \     result.append(1)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(0)\n        result.append(1)\n        return result\n \
    \   }\n    \n    if n == 2 {\n        result.append(0)\n        result.append(1)\n\
    \        result.append(2)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(0)\n        result.append(1)\n        result.append(2)\n\
    \        result.append(3)\n        result.append(4)\n        result.append(5)\n\
    \        result.append(6)\n        result.append(7)\n        result.append(8)\n\
    \        result.append(9)\n        result.append(10)\n        result.append(11)\n\
    \        result.append(12)\n        result.append(13)\n        result.append(14)\n\
    \        result.append(15)\n        result.append(16)\n        result.append(17)\n\
    \        result.append(18)\n        result.append(19)\n        result.append(20)\n\
    \        result.append(21)\n        result.append(22)\n        result.append(23)\n\
    \        result.append(24)\n        result.append(25)\n        result.append(26)\n\
    \        result.append(27)\n        result.append(28)\n        result.append(29)\n\
    \        result.append(30)\n        result.append(31)\n        result.append(32)\n\
    \        result.append(33)\n        result.append(34)\n        result.append(35)\n\
    \        result.append(36)\n        result.append(37)\n        result.append(38)\n\
    \        result.append(39)\n        result.append(40)\n        result.append(41)\n\
    \        result.append(42)\n        result.append(43)\n        result.append(44)\n\
    \        result.append(45)\n        result.append(46)\n        result.append(47)\n\
    \        result.append(48)\n        result.append(49)\n        result.append(50)\n\
    \        result.append(51)\n        result.append(52)\n        result.append(53)\n\
    \        result.append(54)\n        result.append(55)\n        result.append(56)\n\
    \        result.append(57)\n        result.append(58)\n        result.append(59)\n\
    \        result.append(60)\n        result.append(61)\n        result.append(62)\n\
    \        result.append(63)\n        result.append(64)\n        result.append(65)\n\
    \        result.append(66)\n        result.append(67)\n        result.append(68)\n\
    \        result.append(69)\n        result.append(70)\n        result.append(71)\n\
    \        result.append(72)\n        result.append(73)\n        result.append(74)\n\
    \        result.append(75)\n        result.append(76)\n        result.append(77)\n\
    \        result.append(78)\n        result.append(79)\n        result.append(80)\n\
    \        result.append(81)\n        result.append(82)\n        result.append(83)\n\
    \        result.append(84)\n        result.append(85)\n        result.append(86)\n\
    \        result.append(87)\n        result.append(88)\n        result.append(89)\n\
    \        result.append(90)\n        result.append(91)\n        result.append(92)\n\
    \        result.append(93)\n        result.append(94)", "    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n \
    \   } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  }\n    \n    return result", "    var result = [Int]()\n    \n    if n == 0\
    \ {\n        result.append(0)\n        return result\n    }\n    \n    if n ==\
    \ 1 {\n        result.append(1)\n        return result\n    }\n    \n    if n\
    \ == 2 {\n        result.append(3)\n        return result\n    }\n    \n    if\
    \ n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n \
    \       result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return\
    \ result", "    var result = [Int]()\n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    if n == 2 {\n        result.append(3)\n   \
    \     return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n        return result\n    }\n    result.append(tri(n\
    \ - 1) + tri(n - 2))\n    return result", "    var result = [Int]()\n    if n\
    \ == 0 {\n        result.append(0)\n        result.append(1)\n        return result\n\
    \    }\n    if n == 1 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    if n == 2 {\n        result.append(0)\n   \
    \     result.append(1)\n        result.append(2)\n        return result\n    }\n\
    \    if n % 2 == 0 {\n        result.append(0)\n        result.append(1)\n   \
    \     result.append(2)\n        result.append(3)\n        result.append(4)\n \
    \       result.append(5)\n        result.append(6)\n        result.append(7)\n\
    \        result.append(8)\n        result.append(9)\n        result.append(10)\n\
    \        result.append(11)\n        result.append(12)\n        result.append(13)\n\
    \        result.append(14)\n        result.append(15)\n        result.append(16)\n\
    \        result.append(17)\n        result.append(18)\n        result.append(19)\n\
    \        result.append(20)\n        result.append(21)\n        result.append(22)\n\
    \        result.append(23)\n        result.append(24)\n        result.append(25)\n\
    \        result.append(26)\n        result.append(27)\n        result.append(28)\n\
    \        result.append(29)\n        result.append(30)\n        result.append(31)\n\
    \        result.append(32)\n        result.append(33)\n        result.append(34)\n\
    \        result.append(35)\n        result.append(36)\n        result.append(37)\n\
    \        result.append(38)\n        result.append(39)\n        result.append(40)\n\
    \        result.append(41)\n        result.append(42)\n        result.append(43)\n\
    \        result.append(44)\n        result.append(45)\n        result.append(46)\n\
    \        result.append(47)\n        result.append(48)\n        result.append(49)\n\
    \        result.append(50)\n        result.append(51)\n        result.append(52)\n\
    \        result.append(53)\n        result.append(54)\n        result.append(55)\n\
    \        result.append(56)\n        result.append(57)\n        result.append(58)\n\
    \        result.append(59)\n        result.append(60)\n        result.append(61)\n\
    \        result.append(62)\n        result.append(63)\n        result.append(64)\n\
    \        result.append(65)\n        result.append(66)\n        result.append(67)\n\
    \        result.append(68)\n        result.append(69)\n        result.append(70)\n\
    \        result.append(71)\n        result.append(72)\n        result.append(73)\n\
    \        result.append(74)\n        result.append(75)\n        result.append(76)\n\
    \        result.append(77)\n        result.append(78)\n        result.append(79)\n\
    \        result.append(80)\n        result.append(81)\n        result.append(82)\n\
    \        result.append(83)\n        result.append(84)\n        result.append(85)\n\
    \        result.append(86)\n        result.append(87)\n        result.append(88)\n\
    \        result.append(89)\n        result.append(90)\n        result.append(91)\n\
    \        result.append(92)\n        result.append(93)\n        result.append(94)\n\
    \        result.append(95)\n        result.append(", "    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n    }\n    \n    if n == 1 {\n\
    \        result.append(1)\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    \n    if n % 2 == 1 {\n        result.append(tri(n\
    \ - 1) + tri(n + 1))\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(1 + n / 2)\n    } else {\n \
    \       result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n   \
    \ return result", "    var result = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n\
    \        return result;\n    }\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result;\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result;\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    }\n    \n    return result", "    var result = [Int]()\n    var a = 2\n \
    \   var b = 3\n    var c = a + b\n    while c < n {\n        a = b\n        b\
    \ = c\n        c = a + b\n        result.append(c)\n    }\n    return result",
  "    var result = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n   \
    \     result.append(1)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(0)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(1)\n        result.append(2)\n        return result\n \
    \   }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n \
    \   }\n    return result", "    var result = [Int]()\n    if n == 1 {\n      \
    \  result.append(3)\n        return result\n    }\n    if n == 2 {\n        result.append(1)\n\
    \        result.append(2)\n        return result\n    }\n    if n % 2 == 0 {\n\
    \        result.append(1)\n        result.append(n / 2)\n    } else {\n      \
    \  result.append(1)\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    return result", "    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n  \
    \  else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n\
    \ - 3) + tri(n - 4))\n    }\n    return result", "    var result = [Int]()\n \
    \   if n == 1 {\n        result.append(1)\n        return result\n    }\n    if\
    \ n == 2 {\n        result.append(3)\n        return result\n    }\n    if n ==\
    \ 3 {\n        result.append(2)\n        return result\n    }\n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n - 1) + tri(n - 2) + tri(n + 1))\n   \
    \ }\n    return result", "    var result = [Int]()\n    \n    if n == 0 {\n  \
    \      result.append(0)\n        result.append(1)\n        return result\n   \
    \ }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n \
    \   }\n    \n    return result", "    var result = [Int]()\n    if n == 1 {\n\
    \        result.append(3)\n        return result\n    }\n    if n == 2 {\n   \
    \     result.append(1)\n        result.append(2)\n        return result\n    }\n\
    \    if n % 2 == 0 {\n        result.append(1)\n        result.append(n)\n   \
    \     result.append(n + 2)\n        return result\n    }\n    result.append(1)\n\
    \    result.append(n)\n    result.append(n + 2)\n    result.append(n + 3)\n  \
    \  return result", "    var result = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(0)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(1)\n        result.append(2)\n        return result\n \
    \   }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n \
    \   }\n    \n    return result", "    var result = [Int]()\n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    if n == 2 {\n   \
    \     result.append(3)\n        return result\n    }\n    if n % 2 == 0 {\n  \
    \      result.append(tri(n - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result", "    var result\
    \ = [Int]()\n    var a = Int(3)\n    var b = Int(1)\n    var c = Int(2)\n    for\
    \ _ in 0..<n {\n        result.append(a)\n        a = b\n        b = c\n     \
    \   if n % 2 == 0 {\n            c = a + b\n        } else {\n            c =\
    \ b + c\n        }\n    }\n    return result", "    var result = [Int]()\n   \
    \ \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n    \
    \    return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n \
    \       result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(0)\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(0)\n\
    \        result.append(1)\n        result.append(2)\n        result.append(3)\n\
    \        result.append(4)\n        result.append(5)\n        result.append(6)\n\
    \        result.append(7)\n        result.append(8)\n        result.append(9)\n\
    \        result.append(10)\n        result.append(11)\n        result.append(12)\n\
    \        result.append(13)\n        result.append(14)\n        result.append(15)\n\
    \        result.append(16)\n        result.append(17)\n        result.append(18)\n\
    \        result.append(19)\n        result.append(20)\n        result.append(21)\n\
    \        result.append(22)\n        result.append(23)\n        result.append(24)\n\
    \        result.append(25)\n        result.append(26)\n        result.append(27)\n\
    \        result.append(28)\n        result.append(29)\n        result.append(30)\n\
    \        result.append(31)\n        result.append(32)\n        result.append(33)\n\
    \        result.append(34)\n        result.append(35)\n        result.append(36)\n\
    \        result.append(37)\n        result.append(38)\n        result.append(39)\n\
    \        result.append(40)\n        result.append(41)\n        result.append(42)\n\
    \        result.append(43)\n        result.append(44)\n        result.append(45)\n\
    \        result.append(46)\n        result.append(47)\n        result.append(48)\n\
    \        result.append(49)\n        result.append(50)\n        result.append(51)\n\
    \        result.append(52)\n        result.append(53)\n        result.append(54)\n\
    \        result.append(55)\n        result.append(56)\n        result.append(57)\n\
    \        result.append(58)\n        result.append(59)\n        result.append(60)\n\
    \        result.append(61)\n        result.append(62)\n        result.append(63)\n\
    \        result.append(64)\n        result.append(65)\n        result.append(66)\n\
    \        result.append(67)\n        result.append(68)\n        result.append(69)\n\
    \        result.append(70)\n        result.append(71)\n        result.append(72)\n\
    \        result.append(73)\n        result.append(74)\n        result.append(75)\n\
    \        result.append(76)\n        result.append(77)\n        result.append(78)\n\
    \        result.append(79)\n        result.append(80)\n        result.append(81)\n\
    \        result.append(82)\n        result.append(83)\n        result.append(84)\n\
    \        result.append(85)\n        result.append(86)\n        result.append(87)\n\
    \        result.append(88)\n        result.append(89)\n        result.append(90)\n\
    \        result.append(91)\n        result.append(92)\n        result.append(93)\n\
    \        result.append(94)", "    var result = [Int]()\n    if n == 1 {\n    \
    \    result.append(1)\n        result.append(1)\n        return result\n    }\n\
    \    if n == 2 {\n        result.append(3)\n        result.append(3)\n       \
    \ return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    }\n    return result", "    var result = [Int]()\n    \n    if n\
    \ == 1 {\n        result.append(3)\n        return result\n    }\n    \n    if\
    \ n == 2 {\n        result.append(1)\n        result.append(2)\n        return\
    \ result\n    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n       \
    \ result.append(n)\n        result.append(n + 2)\n        return result\n    }\n\
    \    \n    result.append(1)\n    result.append(n)\n    result.append(n + 2)\n\
    \    result.append(n + 3)\n    return result", "    var result = [Int]()\n   \
    \ \n    if n == 0 {\n        result.append(0)\n        return result;\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result;\n   \
    \ }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n \
    \   }\n    \n    return result", "    var result = [Int]()\n    \n    if n ==\
    \ 0 {\n        result.append(0)\n        return result\n    }\n    \n    if n\
    \ == 1 {\n        result.append(1)\n        return result\n    }\n    \n    if\
    \ n == 2 {\n        result.append(3)\n        return result\n    }\n    \n   \
    \ if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n \
    \       result.append(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n    }\n    return result", "    var result = [Int]()\n \
    \   \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n  \
    \      return result\n    }\n    \n    if n == 1 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n    }\n    return result", "    var result = [Int]()\n    \n\
    \    if n == 0 {\n        result.append(0)\n        result.append(1)\n       \
    \ return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n    \
    \    return result\n    }\n    \n    if n == 2 {\n        result.append(1)\n \
    \       result.append(2)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result", "    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    }\n    else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3))\n    }\n    \n    return result", "    var result = [Int]()\n    if n\
    \ == 0 {\n        result.append(0)\n        return result\n    }\n    if n ==\
    \ 1 {\n        result.append(1)\n        return result\n    }\n    if n == 2 {\n\
    \        result.append(3)\n        return result\n    }\n    if n % 2 == 0 {\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n \
    \       result.append(tri(n - 1) + tri(n - 2))\n    }\n    return result", " \
    \   var result = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n  \
    \      return result\n    }\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    }\n    else {\n        result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n \
    \   } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  }\n    \n    return result", "    var result = [Int]()\n    \n    if n == 1\
    \ {\n        result.append(3)\n    }\n    \n    if n % 2 == 0 {\n        result.append(1\
    \ + n / 2)\n    }\n    \n    if n % 2 == 1 {\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result", "    var result\
    \ = [Int]()\n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    if n == 1 {\n        result.append(0)\n   \
    \     return result\n    }\n    if n == 2 {\n        result.append(1)\n      \
    \  result.append(2)\n        return result\n    }\n    if n % 2 == 0 {\n     \
    \   result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n      \
    \  result.append(tri(n - 1) + tri(n - 2))\n    }\n    return result", "    var\
    \ result = [Int]()\n    var a = 2\n    var b = 3\n    var c = a + b\n    while\
    \ c < n {\n        a = b\n        b = c\n        c = a + b\n        result.append(c)\n\
    \    }\n    return result", "    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        return result\n \
    \   }\n    \n    if n == 1 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    return result", "    var result = [Int]()\n   \
    \ if n == 0 {\n        result.append(0)\n        return result\n    }\n    if\
    \ n == 1 {\n        result.append(1)\n        return result\n    }\n    if n ==\
    \ 2 {\n        result.append(3)\n        return result\n    }\n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        return\
    \ result\n    }\n    result.append(tri(n - 1) + tri(n - 2))\n    return result",
  "    var result = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n   \
    \     return result\n    }\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n    }\n    return result", "    var result = [Int]()\n    \n\
    \    if n == 0 {\n        result.append(0)\n        return result;\n    }\n  \
    \  \n    if n == 1 {\n        result.append(1)\n        return result;\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result;\n   \
    \ }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n \
    \   }\n    \n    return result", "    var result = [Int]()\n    if n == 1 {\n\
    \        result.append(3)\n    } else {\n        result.append(1)\n        result.append(n\
    \ / 2)\n        if n % 2 == 0 {\n            result.append(1 + n / 2)\n      \
    \  } else {\n            result.append(1 + n / 2)\n            result.append(1\
    \ + n / 2)\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(3)\n        return result;\n   \
    \ }\n    \n    if n % 2 == 0 {\n        result.append(1 + n / 2)\n    } else {\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n  \
    \  return result", "    var result = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1) + tri(n + 2))\n    }\n    return result", "   \
    \ var result = [Int]()\n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    if n == 1 {\n        result.append(1)\n   \
    \     return result\n    }\n    if n == 2 {\n        result.append(2)\n      \
    \  return result\n    }\n    \n    let mid = n / 2\n    result.append(tri(n -\
    \ 1) + tri(n - 2))\n    result.append(tri(mid) + tri(mid + 1))\n    return result",
  "    var result = [Int]()\n    if n == 1 {\n        result.append(1)\n        return\
    \ result\n    }\n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n\
    \    return result", "    var result = [Int]()\n    \n    if n == 1 {\n      \
    \  result.append(1)\n        return result;\n    }\n    \n    if n == 2 {\n  \
    \      result.append(3)\n        return result;\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result", "    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result", "    var result = [Int]()\n    \n    if n ==\
    \ 1 {\n        result.append(3)\n    } else {\n        var firstTribonacci = tri(n\
    \ - 1) + tri(n - 2)\n        result.append(firstTribonacci)\n        var secondTribonacci\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1)\n        result.append(secondTribonacci)\n\
    \    }\n    \n    return result", "    var result = [Int]()\n    \n    if n ==\
    \ 1 {\n        result.append(1)\n        return result\n    }\n    \n    if n\
    \ == 2 {\n        result.append(3)\n        return result\n    }\n    \n    if\
    \ n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \        return result\n    }\n    \n    result.append(tri(n - 1) + tri(n - 2))\n\
    \    return result", "    var result = [Int]()\n    \n    if n == 0 {\n      \
    \  result.append(0)\n        return result\n    }\n    \n    if n == 1 {\n   \
    \     result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result", "    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    else {\n        result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return\
    \ result", "    var result = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(0)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(1)\n        result.append(2)\n        return result\n \
    \   }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n\
    \ + 2))\n    }\n    \n    return result", "    var result = [Int]()\n    var tri1\
    \ = 1\n    var tri2 = 2\n    var tri3 = tri1 + tri2\n    if n % 2 == 0 {\n   \
    \     result.append(tri1)\n        tri1 = tri2\n        tri2 = tri3\n        tri3\
    \ = tri1 + tri2\n    }\n    for _ in 1...n {\n        result.append(tri3)\n  \
    \      tri3 = tri1 + tri2\n        tri2 = tri3\n        tri1 = tri3\n    }\n \
    \   return result", "    var result = [Int]()\n    var tri1 = 1\n    var tri2\
    \ = 2\n    var tri3 = tri1 + tri2\n    if n % 2 == 0 {\n        result.append(tri3)\n\
    \        tri1 = tri2\n        tri2 = tri3\n        tri3 = tri1 + tri2\n    }\n\
    \    for _ in 1...n {\n        result.append(tri3)\n        tri1 = tri2\n    \
    \    tri2 = tri3\n        tri3 = tri1 + tri2\n    }\n    return result", "   \
    \ var result = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n    \
    \    return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n \
    \       return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    var a = 2\n    var b = 3\n    var c = a + b\n    while c < n {\n        result.append(c)\n\
    \        a = b\n        b = c\n        c = a + b\n    }\n    result.append(c)\n\
    \    return result", "    var result = [Int]()\n    \n    if n == 0 {\n      \
    \  result.append(0)\n        return result;\n    }\n    \n    if n == 1 {\n  \
    \      result.append(1)\n        return result;\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        return result;\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result", "    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(n)\n        result.append(n\
    \ + 2)\n        return result\n    }\n    \n    result.append(n)\n    result.append(n\
    \ + 2)\n    result.append(n + 3)\n    return result", "    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result;\n   \
    \ }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result", "    var result = [Int]()\n    \n    if n ==\
    \ 0 {\n        result.append(0)\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 1 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(0)\n\
    \        result.append(1)\n        result.append(2)\n        return result\n \
    \   }\n    \n    if n % 2 == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        result.append(2)\n        result.append(3)\n        result.append(4)\n\
    \        result.append(5)\n        result.append(6)\n        result.append(7)\n\
    \        result.append(8)\n        result.append(9)\n        result.append(10)\n\
    \        result.append(11)\n        result.append(12)\n        result.append(13)\n\
    \        result.append(14)\n        result.append(15)\n        result.append(16)\n\
    \        result.append(17)\n        result.append(18)\n        result.append(19)\n\
    \        result.append(20)\n        result.append(21)\n        result.append(22)\n\
    \        result.append(23)\n        result.append(24)\n        result.append(25)\n\
    \        result.append(26)\n        result.append(27)\n        result.append(28)\n\
    \        result.append(29)\n        result.append(30)\n        result.append(31)\n\
    \        result.append(32)\n        result.append(33)\n        result.append(34)\n\
    \        result.append(35)\n        result.append(36)\n        result.append(37)\n\
    \        result.append(38)\n        result.append(39)\n        result.append(40)\n\
    \        result.append(41)\n        result.append(42)\n        result.append(43)\n\
    \        result.append(44)\n        result.append(45)\n        result.append(46)\n\
    \        result.append(47)\n        result.append(48)\n        result.append(49)\n\
    \        result.append(50)\n        result.append(51)\n        result.append(52)\n\
    \        result.append(53)\n        result.append(54)\n        result.append(55)\n\
    \        result.append(56)\n        result.append(57)\n        result.append(58)\n\
    \        result.append(59)\n        result.append(60)\n        result.append(61)\n\
    \        result.append(62)\n        result.append(63)\n        result.append(64)\n\
    \        result.append(65)\n        result.append(66)\n        result.append(67)\n\
    \        result.append(68)\n        result.append(69)\n        result.append(70)\n\
    \        result.append(71)\n        result.append(72)\n        result.append(73)\n\
    \        result.append(74)\n        result.append(75)\n        result.append(76)\n\
    \        result.append(77)\n        result.append(78)\n        result.append(79)\n\
    \        result.append(80)\n        result.append(81)\n        result.append(82)\n\
    \        result.append(83)\n        result.append(84)\n        result.append(85)\n\
    \        result.append(86)\n        result.append(87)\n        result.append(88)\n\
    \        result.append(89)\n        result.append(90)\n        result.append(91)\n\
    \        result.append(92)\n        result.append(93)\n        result.append(94)",
  "    var result = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n   \
    \     return result\n    }\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) + tri(n + 2))\n    }\n    return result", "    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n        return result\n    }\n    \n    result.append(tri(n - 1) + tri(n\
    \ - 2))\n    return result", "    var result = [Int]()\n    if n == 1 {\n    \
    \    result.append(1)\n        return result\n    }\n    if n == 2 {\n       \
    \ result.append(3)\n        return result\n    }\n    if n % 2 == 0 {\n      \
    \  result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n       \
    \ result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result", "    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(n\
    \ / 2)\n    } else {\n        result.append(1)\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result", "    var result =\
    \ [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(0)\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(0)\n\
    \        result.append(1)\n        result.append(2)\n        result.append(3)\n\
    \        result.append(4)\n        result.append(5)\n        result.append(6)\n\
    \        result.append(7)\n        result.append(8)\n        result.append(9)\n\
    \        result.append(10)\n        result.append(11)\n        result.append(12)\n\
    \        result.append(13)\n        result.append(14)\n        result.append(15)\n\
    \        result.append(16)\n        result.append(17)\n        result.append(18)\n\
    \        result.append(19)\n        result.append(20)\n        result.append(21)\n\
    \        result.append(22)\n        result.append(23)\n        result.append(24)\n\
    \        result.append(25)\n        result.append(26)\n        result.append(27)\n\
    \        result.append(28)\n        result.append(29)\n        result.append(30)\n\
    \        result.append(31)\n        result.append(32)\n        result.append(33)\n\
    \        result.append(34)\n        result.append(35)\n        result.append(36)\n\
    \        result.append(37)\n        result.append(38)\n        result.append(39)\n\
    \        result.append(40)\n        result.append(41)\n        result.append(42)\n\
    \        result.append(43)\n        result.append(44)\n        result.append(45)\n\
    \        result.append(46)\n        result.append(47)\n        result.append(48)\n\
    \        result.append(49)\n        result.append(50)\n        result.append(51)\n\
    \        result.append(52)\n        result.append(53)\n        result.append(54)\n\
    \        result.append(55)\n        result.append(56)\n        result.append(57)\n\
    \        result.append(58)\n        result.append(59)\n        result.append(60)\n\
    \        result.append(61)\n        result.append(62)\n        result.append(63)\n\
    \        result.append(64)\n        result.append(65)\n        result.append(66)\n\
    \        result.append(67)\n        result.append(68)\n        result.append(69)\n\
    \        result.append(70)\n        result.append(71)\n        result.append(72)\n\
    \        result.append(73)\n        result.append(74)\n        result.append(75)\n\
    \        result.append(76)\n        result.append(77)\n        result.append(78)\n\
    \        result.append(79)\n        result.append(80)\n        result.append(81)\n\
    \        result.append(82)\n        result.append(83)\n        result.append(84)\n\
    \        result.append(85)\n        result.append(86)\n        result.append(87)\n\
    \        result.append(88)\n        result.append(89)\n        result.append(90)\n\
    \        result.append(91)\n        result.append(92)\n        result.append(93)\n\
    \        result.append(94)", "    var result = [Int]()\n    if n == 0 {\n    \
    \    result.append(0)\n        return result\n    }\n    if n == 1 {\n       \
    \ result.append(1)\n        return result\n    }\n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    else {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1) + tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result",
  "    var result = [Int]()\n    var firstThree = [Int]()\n    var secondThree = [Int]()\n\
    \    var thirdThree = [Int]()\n    var fourthThree = [Int]()\n    var fifthThree\
    \ = [Int]()\n    var sixthThree = [Int]()\n    var seventhThree = [Int]()\n  \
    \  var eighthThree = [Int]()\n    var ninethThree = [Int]()\n    var tenthThree\
    \ = [Int]()\n    var eleventhThree = [Int]()\n    var twelfthThree = [Int]()\n\
    \    var thirteenthThree = [Int]()\n    var fourteenthThree = [Int]()\n    var\
    \ fifteenthThree = [Int]()\n    var sixteenthThree = [Int]()\n    var seventeenthThree\
    \ = [Int]()\n    var eighteenthThree = [Int]()\n    var nineteenthThree = [Int]()\n\
    \    var twentiethThree = [Int]()\n    var thirtiethThree = [Int]()\n    var fourtiethThree\
    \ = [Int]()\n    var fiftiethThree = [Int]()\n    var sixtiethThree = [Int]()\n\
    \    var seventiethThree = [Int]()\n    var eightiethThree = [Int]()\n    var\
    \ ninetiethThree = [Int]()\n    var hundredthThree = [Int]()\n    var thousandthThree\
    \ = [Int]()\n    var millionthThree = [Int]()\n    var billionthThree = [Int]()\n\
    \    var trillionthThree = [Int]()\n    var quadrillionthThree = [Int]()\n   \
    \ var quintillionthThree = [Int]()\n    var sextillionthThree = [Int]()\n    var\
    \ septillionthThree = [Int]()\n    var octillionthThree = [Int]()\n    var nonillionthThree\
    \ = [Int]()\n    var decillionthThree = [Int]()\n    var undecillionthThree =\
    \ [Int]()\n    var duodecillionthThree = [Int]()\n    var tredecillionthThree\
    \ = [Int]()\n    var quattuordecillionthThree = [Int]()\n    var quindecillionthThree\
    \ = [Int]()\n    var sexdecillionthThree = [Int]()\n    var septendecillionthThree\
    \ = [Int]()\n    var octodecillionthThree = [Int]()\n    var novemdecillionthThree\
    \ = [Int]()\n    var vigintilli", "    var result = [Int]()\n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    if n == 2 {\n   \
    \     result.append(3)\n        return result\n    }\n    if n % 2 == 0 {\n  \
    \      result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n   \
    \     result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2))\n    }\n    return result", " \
    \   var result = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n  \
    \      result.append(1)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(0)\n        result.append(1)\n        return result\n \
    \   }\n    \n    if n == 2 {\n        result.append(0)\n        result.append(1)\n\
    \        result.append(2)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(0)\n        result.append(1)\n        result.append(2)\n\
    \        result.append(3)\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \    }\n    \n    result.append(0)\n    result.append(1)\n    result.append(2)\n\
    \    result.append(3)\n    result.append(4)\n    result.append(5)\n    result.append(6)\n\
    \    result.append(7)\n    result.append(8)\n    result.append(9)\n    result.append(10)\n\
    \    result.append(11)\n    result.append(12)\n    result.append(13)\n    result.append(14)\n\
    \    result.append(15)\n    result.append(16)\n    result.append(17)\n    result.append(18)\n\
    \    result.append(19)\n    result.append(20)\n    result.append(21)\n    result.append(22)\n\
    \    result.append(23)\n    result.append(24)\n    result.append(25)\n    result.append(26)\n\
    \    result.append(27)\n    result.append(28)\n    result.append(29)\n    result.append(30)\n\
    \    result.append(31)\n    result.append(32)\n    result.append(33)\n    result.append(34)\n\
    \    result.append(35)\n    result.append(36)\n    result.append(37)\n    result.append(38)\n\
    \    result.append(39)\n    result.append(40)\n    result.append(41)\n    result.append(42)\n\
    \    result.append(43)\n    result.append(44)\n    result.append(45)\n    result.append(46)\n\
    \    result.append(47)\n    result.append(48)\n    result.append(49)\n    result.append(50)\n\
    \    result.append(51)\n    result.append(52)\n    result.append(53)\n    result.append(54)\n\
    \    result.append(55)\n    result.append(56)\n    result.append(57)\n    result.append(58)\n\
    \    result.append(59)\n    result.append(60)\n    result.append(61)\n    result.append(62)\n\
    \    result.append(63)\n    result.append(64)\n    result.append(65)\n    result.append(66)\n\
    \    result.append(67)\n    result.append(68)\n    result.append(69)\n    result.append(70)\n\
    \    result.append(71)\n    result.append(72)\n    result.append(73)\n    result.append(74)\n\
    \    result.append(75)\n    result.append(76)\n    result.append(77)\n    result.append(78)\n\
    \    result.append(79)\n    result.append(80)\n    result.append(81)\n    result.append(82)\n\
    \    result.append(83)\n    result.append(84)\n    result.append(85)\n    result.append(86)\n\
    \    result.append(87)\n", "    var result = [Int]()\n    \n    if n == 1 {\n\
    \        result.append(3)\n    } else if n == 2 {\n        result.append(1)\n\
    \        result.append(2)\n    } else {\n        let firstTri = tri(n - 1) + tri(n\
    \ - 2)\n        result.append(firstTri)\n        result.append(firstTri + tri(n\
    \ + 1))\n    }\n    \n    return result", "    var result = [Int]()\n    var a\
    \ = 1\n    var b = 2\n    var c = 3\n    for _ in 0..<n {\n        result.append(a)\n\
    \        if n % 2 == 0 {\n            result.append(b)\n        }\n        else\
    \ {\n            result.append(c)\n        }\n        a, b, c = b, c, a + b +\
    \ c\n    }\n    return result", "    var result = [Int]()\n    var a = 2\n   \
    \ var b = a + 1\n    var c = b + 1\n    while c < n {\n        result.append(c)\n\
    \        a = b\n        b = c\n        c = a + b\n    }\n    result.append(c)\n\
    \    return result", "    var result = [Int]()\n    \n    if n == 1 {\n      \
    \  result.append(3)\n    }\n    \n    if n % 2 == 0 {\n        result.append(1\
    \ + n / 2)\n    }\n    \n    if n % 2 == 1 {\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result", "    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(0)\n        result.append(1)\n        result.append(2)\n\
    \        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    }\n    \n    result.append(0)\n\
    \    result.append(1)\n    result.append(2)\n    result.append(3)\n    result.append(4)\n\
    \    result.append(5)\n    result.append(6)\n    result.append(7)\n    result.append(8)\n\
    \    result.append(9)\n    result.append(10)\n    result.append(11)\n    result.append(12)\n\
    \    result.append(13)\n    result.append(14)\n    result.append(15)\n    result.append(16)\n\
    \    result.append(17)\n    result.append(18)\n    result.append(19)\n    result.append(20)\n\
    \    result.append(21)\n    result.append(22)\n    result.append(23)\n    result.append(24)\n\
    \    result.append(25)\n    result.append(26)\n    result.append(27)\n    result.append(28)\n\
    \    result.append(29)\n    result.append(30)\n    result.append(31)\n    result.append(32)\n\
    \    result.append(33)\n    result.append(34)\n    result.append(35)\n    result.append(36)\n\
    \    result.append(37)\n    result.append(38)\n    result.append(39)\n    result.append(40)\n\
    \    result.append(41)\n    result.append(42)\n    result.append(43)\n    result.append(44)\n\
    \    result.append(45)\n    result.append(46)\n    result.append(47)\n    result.append(48)\n\
    \    result.append(49)\n    result.append(50)\n    result.append(51)\n    result.append(52)\n\
    \    result.append(53)\n    result.append(54)\n    result.append(55)\n    result.append(56)\n\
    \    result.append(57)\n    result.append(58)\n    result.append(59)\n    result.append(60)\n\
    \    result.append(61)\n    result.append(62)\n    result.append(63)\n    result.append(64)\n\
    \    result.append(65)\n    result.append(66)\n    result.append(67)\n    result.append(68)\n\
    \    result.append(69)\n    result.append(70)\n    result.append(71)\n    result.append(72)\n\
    \    result.append(73)\n    result.append(74)\n    result.append(75)\n    result.append(76)\n\
    \    result.append(77)\n    result.append(78)\n    result.append(79)\n    result.append(80)\n\
    \    result.append(81)\n    result.append(82)\n    result.append(83)\n    result.append(84)\n\
    \    result.append(85)\n    result.append(86)\n    result.append(87)\n    result.append(88)\n\
    \    result.append(89)\n    result.append(90)\n    result.append(91)\n    result.append(92)\n\
    \    result.append(", "    var result = [Int]()\n    \n    if n == 1 {\n     \
    \   result.append(3)\n        return result\n    }\n    \n    if n == 2 {\n  \
    \      result.append(1)\n        result.append(2)\n        return result\n   \
    \ }\n    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n        return result\n    }\n    \n    result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    return result", "    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result;\n   \
    \ }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result", "    var result = [Int]()\n    \n    if n ==\
    \ 0 {\n        result.append(0)\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 1 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(0)\n\
    \        result.append(1)\n        result.append(2)\n        return result\n \
    \   }\n    \n    if n % 2 == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        result.append(2)\n        result.append(3)\n        return tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n    }\n    \n    result.append(0)\n    result.append(1)\n\
    \    result.append(2)\n    result.append(3)\n    result.append(4)\n    result.append(5)\n\
    \    result.append(6)\n    result.append(7)\n    result.append(8)\n    result.append(9)\n\
    \    result.append(10)\n    result.append(11)\n    result.append(12)\n    result.append(13)\n\
    \    result.append(14)\n    result.append(15)\n    result.append(16)\n    result.append(17)\n\
    \    result.append(18)\n    result.append(19)\n    result.append(20)\n    result.append(21)\n\
    \    result.append(22)\n    result.append(23)\n    result.append(24)\n    result.append(25)\n\
    \    result.append(26)\n    result.append(27)\n    result.append(28)\n    result.append(29)\n\
    \    result.append(30)\n    result.append(31)\n    result.append(32)\n    result.append(33)\n\
    \    result.append(34)\n    result.append(35)\n    result.append(36)\n    result.append(37)\n\
    \    result.append(38)\n    result.append(39)\n    result.append(40)\n    result.append(41)\n\
    \    result.append(42)\n    result.append(43)\n    result.append(44)\n    result.append(45)\n\
    \    result.append(46)\n    result.append(47)\n    result.append(48)\n    result.append(49)\n\
    \    result.append(50)\n    result.append(51)\n    result.append(52)\n    result.append(53)\n\
    \    result.append(54)\n    result.append(55)\n    result.append(56)\n    result.append(57)\n\
    \    result.append(58)\n    result.append(59)\n    result.append(60)\n    result.append(61)\n\
    \    result.append(62)\n    result.append(63)\n    result.append(64)\n    result.append(65)\n\
    \    result.append(66)\n    result.append(67)\n    result.append(68)\n    result.append(69)\n\
    \    result.append(70)\n    result.append(71)\n    result.append(72)\n    result.append(73)\n\
    \    result.append(74)\n    result.append(75)\n    result.append(76)\n    result.append(77)\n\
    \    result.append(78)\n    result.append(79)\n    result.append(80)\n    result.append(81)\n\
    \    result.append(82)\n    result.append(83)\n    result.append(84)\n    result.append(85)\n\
    \    result.append(86)\n    result.append(87)\n", "    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n \
    \   } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  }\n    return result", "    var result = [Int]()\n    var a = tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1)\n    for _ in 0..<n {\n        result.append(a)\n  \
    \  }\n    return result", "    var result = [Int]()\n    \n    if n == 0 {\n \
    \       result.append(0)\n        result.append(1)\n        return result\n  \
    \  }\n    \n    if n == 1 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n \
    \       return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(0)\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4))\n    }\n    \n    return\
    \ result", "    var result = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    return result", "    var result = [Int]()\n   \
    \ \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(1 + n / 2)\n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    }\n    \n    result.append(tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1))\n    return result", "    var result = [Int]()\n  \
    \  var tri1 = 1\n    var tri2 = 2\n    var tri3 = 1\n    var tri4 = 1\n    for\
    \ _ in 0..<n {\n        tri3 = tri1 + tri2\n        tri4 = tri1 + tri2 + tri3\n\
    \        result.append(tri3)\n        result.append(tri4)\n        tri1 = tri2\n\
    \        tri2 = tri3\n        tri3 = tri4\n        tri4 = tri1 + tri2 + tri3\n\
    \    }\n    return result", "    var result = [Int]()\n    if n == 0 {\n     \
    \   result.append(0)\n        result.append(1)\n        return result\n    }\n\
    \    if n == 1 {\n        result.append(0)\n        result.append(1)\n       \
    \ return result\n    }\n    if n == 2 {\n        result.append(0)\n        result.append(1)\n\
    \        result.append(2)\n        return result\n    }\n    if n % 2 == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        result.append(2)\n\
    \        result.append(3)\n        result.append(4)\n        result.append(5)\n\
    \        result.append(6)\n        result.append(7)\n        result.append(8)\n\
    \        result.append(9)\n        result.append(10)\n        result.append(11)\n\
    \        result.append(12)\n        result.append(13)\n        result.append(14)\n\
    \        result.append(15)\n        result.append(16)\n        result.append(17)\n\
    \        result.append(18)\n        result.append(19)\n        result.append(20)\n\
    \        result.append(21)\n        result.append(22)\n        result.append(23)\n\
    \        result.append(24)\n        result.append(25)\n        result.append(26)\n\
    \        result.append(27)\n        result.append(28)\n        result.append(29)\n\
    \        result.append(30)\n        result.append(31)\n        result.append(32)\n\
    \        result.append(33)\n        result.append(34)\n        result.append(35)\n\
    \        result.append(36)\n        result.append(37)\n        result.append(38)\n\
    \        result.append(39)\n        result.append(40)\n        result.append(41)\n\
    \        result.append(42)\n        result.append(43)\n        result.append(44)\n\
    \        result.append(45)\n        result.append(46)\n        result.append(47)\n\
    \        result.append(48)\n        result.append(49)\n        result.append(50)\n\
    \        result.append(51)\n        result.append(52)\n        result.append(53)\n\
    \        result.append(54)\n        result.append(55)\n        result.append(56)\n\
    \        result.append(57)\n        result.append(58)\n        result.append(59)\n\
    \        result.append(60)\n        result.append(61)\n        result.append(62)\n\
    \        result.append(63)\n        result.append(64)\n        result.append(65)\n\
    \        result.append(66)\n        result.append(67)\n        result.append(68)\n\
    \        result.append(69)\n        result.append(70)\n        result.append(71)\n\
    \        result.append(72)\n        result.append(73)\n        result.append(74)\n\
    \        result.append(75)\n        result.append(76)\n        result.append(77)\n\
    \        result.append(78)\n        result.append(79)\n        result.append(80)\n\
    \        result.append(81)\n        result.append(82)\n        result.append(83)\n\
    \        result.append(84)\n        result.append(85)\n        result.append(86)\n\
    \        result.append(87)\n        result.append(88)\n        result.append(89)\n\
    \        result.append(90)\n        result.append(91)\n        result.append(92)\n\
    \        result.append(93)\n        result.append(94)\n        result.append(95)\n\
    \        result.append("]
stop_tokens:
- "\n}"
