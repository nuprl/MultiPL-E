name: HumanEval_91_is_bored
language: swift
prompt: "\n/// You'll be given a string of words, and your task is to count the number\n\
  /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n/// Sentences\
  \ are delimited by '.', '?' or '!'.\n/// For example:\nfunc is_bored(S: String)\
  \ -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
  \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
  \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
  \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\")\
  \ == 0)"
completions: ["    var boredoms = 0\n    var currentWord = \"\"\n    for c in S {\n\
    \        if c == '.' || c == '?' || c == '!' {\n            if currentWord ==\
    \ \"I\" {\n                boredoms += 1\n            }\n            currentWord\
    \ = \"\"\n        } else {\n            currentWord += String(c)\n        }\n\
    \    }\n    return boredoms", "    let boredoms = S.filter { $0.starts(with: \"\
    I\") }\n    return boredoms.count", '    return 0', '    ', "    let boredom =\
    \ S.characters.filter { $0 == \"I\" }.count\n    return boredom", "    var boredoms\
    \ = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m =\
    \ 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n\
    \    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n \
    \   var x = 0\n    var y = 0\n    var z = 0\n    var A = 0\n    var B = 0\n  \
    \  var C = 0\n    var D = 0\n    var E = 0\n    var F = 0\n    var G = 0\n   \
    \ var H = 0\n    var I = 0\n    var J = 0\n    var K = 0\n    var L = 0\n    var\
    \ M = 0\n    var N = 0\n    var O = 0\n    var P = 0\n    var Q = 0\n    var R\
    \ = 0\n    var S = 0\n    var T = 0\n    var U = 0\n    var V = 0\n    var W =\
    \ 0\n    var X = 0\n    var Y = 0\n    var Z = 0\n    var a = 0\n    var b = 0\n\
    \    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n \
    \   var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n  \
    \  var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n   \
    \ var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var\
    \ w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var A = 0\n    var B\
    \ = 0\n    var C = 0\n    var D = 0\n    var E = 0\n    var F = 0\n    var G =\
    \ 0\n    var H = 0\n    var I = 0\n    var J = 0\n    var K = 0\n    var L = 0\n\
    \    var M = 0\n    var N = 0\n    var O = 0\n    var P = 0\n    var Q = 0\n \
    \   var R = 0\n    var S = 0\n    var T = 0\n    var U = 0\n    var V = 0\n  \
    \  var W = 0\n    var X = 0\n    var Y = 0\n    var Z = 0\n    var a = 0\n   \
    \ var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var\
    \ g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l\
    \ = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q =\
    \ 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n\
    \    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var A = 0\n \
    \   var B = 0\n    var C = 0\n    var D = 0\n    var E = 0\n    var F = 0\n",
  "    let boredoms = S.filter({$0.hasPrefix(\"I\")})\n    return boredoms.count",
  "    var boredoms: Int = 0\n    for word in S.split(separator: \".?!\") {\n    \
    \    if word.starts(with: \"I\") {\n            boredoms += 1\n        }\n   \
    \ }\n    return boredoms", '    return 0', "    let boredoms = S.filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count", "    var boredoms: Int = 0\n    for word in\
    \ S.split(separator: \".?!\") {\n        if word == \"I\" {\n            boredoms\
    \ += 1\n        }\n    }\n    return boredoms", "    var boredoms = 0\n    var\
    \ i = 0\n    while i < S.count {\n        if S[i] == \"I\" {\n            boredoms\
    \ += 1\n        }\n        i += 1\n    }\n    return boredoms", "    let boredoms\
    \ = S.filter{$0.hasPrefix(\"I\")}\n    return boredoms.count", "    let boredoms\
    \ = S.split(separator: \".?!\").filter({ $0.hasPrefix(\"I\") }).count\n    return\
    \ boredoms", "    let boredoms = S.filter({$0.hasPrefix(\"I\")})\n    return boredoms.count",
  "    // TODO: Return number of boredoms in S\n    return 0", "    var boredoms:\
    \ Int = 0\n    for s in S.split(separator: \".?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            boredoms += 1\n        }\n    }\n    return boredoms",
  "    let boredoms = S.filter{$0.startsWith(\"I\")}\n    return boredoms.count",
  "    var boredoms: Int = 0\n    for word in S.split(separator: \".?!\") {\n    \
    \    if word.starts(with: \"I\") {\n            boredoms += 1\n        }\n   \
    \ }\n    return boredoms", "    var boredoms = 0\n    for s in S.split(separator:\
    \ \".?!\") {\n        if s.starts(with: \"I\") {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms", '    ', "    var boredoms = 0\n    for\
    \ word in S.split(separator: \".?!\") {\n        if word.starts(with: \"I\") {\n\
    \            boredoms += 1\n        }\n    }\n    return boredoms", "    var boredoms\
    \ = 0\n    for s in S.split(separator: \".?!\") {\n        if s.starts(with: \"\
    I\") {\n            boredoms += 1\n        }\n    }\n    return boredoms", " \
    \   var boredoms: Int = 0\n    for s in S.split(separator: \".?!\") {\n      \
    \  if s.starts(with: \"I\") {\n            boredoms += 1\n        }\n    }\n \
    \   return boredoms", "    let boredoms = S.filter{$0.startsWith(\"I\")}\n   \
    \ return boredoms.count", "    var boredoms = 0\n    for word in S.split(separator:\
    \ \".?!\") {\n        if word.starts(with: \"I\") {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms", "    let boredoms = S.filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count", "    let boredoms = S.filter({$0 == \"I\"})\n\
    \    return boredoms.count", "    let boredoms = S.filter{$0.hasPrefix(\"I\")}\n\
    \    return boredoms.count", "    let boredoms = S.filter{$0.hasPrefix(\"I\")}\n\
    \    return boredoms.count", '    ', "    var boredoms = 0\n    for s in S.split(separator:\
    \ \".?!\") {\n        if s.starts(with: \"I\") {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms", "    let boredoms = S.filter({$0.hasPrefix(\"\
    I\")})\n    return boredoms.count", '    ', "    let boredoms = S.filter({$0.hasPrefix(\"\
    I\")})\n    return boredoms.count", "    // TODO: Write a function that takes\
    \ a string and returns the number of boredoms.\n    return 0", "    let boredoms\
    \ = S.filter{$0.startsWith(\"I\")}\n    return boredoms.count", "    let boredoms\
    \ = S.filter { $0.hasPrefix(\"I\") }\n    return boredoms.count", "    let boredoms\
    \ = S.split(separator: \".?!\").filter({ $0.hasPrefix(\"I\") }).count\n    return\
    \ boredoms", "    let boredom = S.range(of: \"I\")\n    let boredoms = S.components(separatedBy:\
    \ \".\")\n    return boredoms.count - boredom.count", "    \n    // TODO: Write\
    \ a function that takes a string and returns the number of boredoms.\n    // HINT:\
    \ Use a regular expression to find all the sentences that start with the word\
    \ \"I\".\n    \n    return 0", "    // TODO: Write a function that takes a string\
    \ and returns the number of boredoms.\n    return 0", '    return 0', "    var\
    \ boredomCount = 0\n    var sentence = S.split(separator: \".\", omittingEmptySubsequences:\
    \ false)\n    for word in sentence {\n        if word.hasPrefix(\"I\") {\n   \
    \         boredomCount += 1\n        }\n    }\n    return boredomCount", '    return
    0', "    var count = 0\n    var boredoms = false\n    for s in S.split(separator:\
    \ \".?!\") {\n        if s.starts(with: \"I\") {\n            boredoms = true\n\
    \        }\n        if boredoms {\n            count += 1\n        }\n    }\n\
    \    return count", "    let boredoms = S.filter({$0 == \"I\"})\n    return boredoms.count",
  "    let boredoms = S.filter { $0.startsWith(\"I\") }\n    return boredoms.count",
  "    let boredoms = S.filter({$0 == \"I\"})\n    return boredoms.count", "    let\
    \ boredoms = S.filter{$0.hasPrefix(\"I\")}\n    return boredoms.count", "    let\
    \ boredoms = S.filter{$0.startsWith(\"I\")}\n    return boredoms.count", '    ',
  "    var boredoms: Int = 0\n    for word in S.split(separator: \".?!\") {\n    \
    \    if word.starts(with: \"I\") {\n            boredoms += 1\n        }\n   \
    \ }\n    return boredoms", "    // TODO: Write a function that takes a string\
    \ and returns the number of boredoms.\n    // HINT: Use a regular expression to\
    \ find all the sentences that start with the word \"I\".\n    // HINT: You can\
    \ use the split() method to split a string into an array of strings.\n    // HINT:\
    \ You can use a for loop to iterate through the array of strings.\n    // HINT:\
    \ You can use the contains() method to check if a string contains a specific string.\n\
    \    // HINT: You can use the len() method to get the length of a string.\n  \
    \  // HINT: You can use the lower() method to convert a string's characters to\
    \ lower case.\n    // HINT: You can use the find() method to check if a string\
    \ contains a specific string.\n    // HINT: You can use the replace() method to\
    \ replace a specific substring with another substring.\n    // HINT: You can use\
    \ the replaceAll() method to replace all substrings of a specific substring with\
    \ another substring.\n    // HINT: You can use the toInt() method to convert a\
    \ string to an integer.\n    // HINT: You can use the toInt() method to convert\
    \ a string to an integer.\n    // HINT: You can use the toInt() method to convert\
    \ a string to an integer.\n    // HINT: You can use the toInt() method to convert\
    \ a string to an integer.\n    // HINT: You can use the toInt() method to convert\
    \ a string to an integer.\n    // HINT: You can use the toInt() method to convert\
    \ a string to an integer.\n    // HINT: You can use the toInt() method to convert\
    \ a string to an integer.\n    // HINT: You can use the toInt() method to convert\
    \ a string to an integer.\n    // HINT: You can use the toInt() method to convert\
    \ a string to an integer.\n    // HINT: You can use the toInt() method to convert\
    \ a string to an integer.\n    // HINT: You can use the toInt() method to convert\
    \ a string to an integer.\n    // HINT: You can use the toInt() method to convert\
    \ a string to an integer.\n    // HINT: You can use the toInt() method to convert\
    \ a string to an integer.\n    // HINT: You can use the toInt() method to convert\
    \ a string to an integer.\n    // HINT: You can use the toInt() method to convert\
    \ a string to an integer.\n    // HINT: You can use the toInt() method to convert\
    \ a string to an integer.\n    // HINT: You can use the toInt() method to convert\
    \ a string to an integer.\n    // HINT: You can use the toInt() method to convert\
    \ a string to an integer.\n    // HINT: You can use the toInt() method to convert\
    \ a string to an integer.\n    // HINT: You can use the toInt() method to convert\
    \ a string to an integer.\n    // HINT: You can use the toInt() method to convert\
    \ a string to an integer.\n    // HINT: You can use the toInt() method to convert\
    \ a string to an integer.\n    // HINT: You can use the toInt() method to convert\
    \ a string to an integer.\n    // ", "    let boredoms = S.filter { $0.starts(with:\
    \ \"I\") }\n    return boredoms.count", "    let boredoms = S.filter{$0.startsWith(\"\
    I\")}\n    return boredoms.count", "    let boredoms = S.filter { $0.starts(with:\
    \ \"I\") }\n    return boredoms.count", "    // TODO: replace this implementation\
    \ with code that uses standard library\n    // functions to accomplish the same\
    \ thing.\n    let boredoms = S.components(separatedBy: \".?!\").filter { $0.starts(with:\
    \ \"I\") }\n    return boredoms.count", "    var boredoms: Int = 0\n    var boredom:\
    \ String = S\n    while boredom.hasPrefix(\"I\") {\n        boredoms = boredoms\
    \ + 1\n        boredom = boredom.dropFirst()\n    }\n    return boredoms", " \
    \   let boredoms = S.filter{$0.hasPrefix(\"I\")}\n    return boredoms.count",
  "    let boredoms = S.filter({$0.hasPrefix(\"I\")})\n    return boredoms.count",
  "    var boredoms = 0\n    for word in S.split(separator: \".?!\") {\n        if\
    \ word.starts(with: \"I\") {\n            boredoms += 1\n        }\n    }\n  \
    \  return boredoms", "    var boredoms = 0\n    for word in S.split(separator:\
    \ \".?!\") {\n        if word.starts(with: \"I\") {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms", "    let boredoms = S.filter{ $0.hasPrefix(\"\
    I\") }\n    return boredoms.count", "    let boredom = S.characters.filter {\n\
    \        switch $0 {\n        case \"I\":\n            return true\n        default:\n\
    \            return false\n        }\n    }.count\n    return boredom", "    //\
    \ TODO: Write a function that takes a string and returns the number of boredoms.\n\
    \    return 0", "    let boredoms = S.filter{$0.hasPrefix(\"I\")}\n    return\
    \ boredoms.count", '    return 0', "    let boredoms = S.filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count", "    var count = 0\n    for word in S.split(separator:\
    \ \".?!\") {\n        if word.starts(with: \"I\") {\n            count += 1\n\
    \        }\n    }\n    return count", "    \n    let boredoms = S.filter{ $0.hasPrefix(\"\
    I\") }\n    return boredoms.count", "    let boredoms = S.filter({$0.startsWith(\"\
    I\")})\n    return boredoms.count", "    var boredoms = 0\n    for word in S.split(separator:\
    \ \".?!\") {\n        if word.starts(with: \"I\") {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms", "    let boredoms = S.filter { $0.hasPrefix(\"\
    I\") }\n    return boredoms.count", '    return 0', "    let boredoms = S.filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count", "    let boredoms = S.filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count", '    return 0', "    \n    // TODO: Write a\
    \ function that takes a string and returns the number of boredoms.\n    // HINT:\
    \ Use a regular expression to find all sentences that start with the word \"I\"\
    .\n    // HINT: You may want to use split or split on whitespace.\n    \n    return\
    \ 0", "    let boredoms = S.filter{ $0.hasPrefix(\"I\") }\n    return boredoms.count",
  "    \n    let boredoms = S.filter({\n        \n        switch $0 {\n          \
    \  \n        case \"I\":\n            return true\n            \n        default:\n\
    \            return false\n        }\n    })\n    \n    return boredoms.count",
  "    var boredoms = 0\n    for s in S.split(separator: \".?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            boredoms += 1\n        }\n    }\n    return boredoms",
  "    var boredoms = 0\n    for word in S.split(separator: \".?!\") {\n        if\
    \ word.starts(with: \"I\") {\n            boredoms += 1\n        }\n    }\n  \
    \  return boredoms", "    let boredoms = S.filter{$0.startsWith(\"I\")}\n    return\
    \ boredoms.count", "    let boredoms = S.filter({$0.hasPrefix(\"I\")})\n    return\
    \ boredoms.count", "    let boredoms = S.filter{$0.hasPrefix(\"I\")}\n    return\
    \ boredoms.count", "    var boredoms = 0\n    for word in S.split(separator: \"\
    .?!\") {\n        if word.starts(with: \"I\") {\n            boredoms += 1\n \
    \       }\n    }\n    return boredoms", "    var boredoms: Int = 0\n    var sentence:\
    \ String = \"\"\n    var word: String = \"\"\n    var bored: Bool = false\n  \
    \  for character in S {\n        sentence = sentence + character\n        if character\
    \ == \".\" {\n            bored = true\n        }\n        if character == \"\
    ?\" {\n            bored = true\n        }\n        if character == \"!\" {\n\
    \            bored = true\n        }\n        if character == \" \" {\n      \
    \      bored = false\n        }\n        if character == \"\\n\" {\n         \
    \   bored = false\n        }\n        if character == \"\\r\" {\n            bored\
    \ = false\n        }\n        if character == \"\\t\" {\n            bored = false\n\
    \        }\n        if character == \"\\r\" {\n            bored = false\n   \
    \     }\n        if character == \"\\n\" {\n            bored = false\n      \
    \  }\n        if character == \"\\n\" {\n            bored = false\n        }\n\
    \        if character == \"\\r\" {\n            bored = false\n        }\n   \
    \     if character == \"\\n\" {\n            bored = false\n        }\n      \
    \  if character == \"\\n\" {\n            bored = false\n        }\n        if\
    \ character == \"\\r\" {\n            bored = false\n        }\n        if character\
    \ == \"\\n\" {\n            bored = false\n        }\n        if character ==\
    \ \"\\n\" {\n            bored = false\n        }\n        if character == \"\\\
    r\" {\n            bored = false\n        }\n        if character == \"\\n\" {\n\
    \            bored = false\n        }\n        if character == \"\\n\" {\n   \
    \         bored = false\n        }\n        if character == \"\\r\" {\n      \
    \      bored = false\n        }\n        if character == \"\\n\" {\n         \
    \   bored = false\n        }\n        if character == \"\\n\" {\n            bored\
    \ = false\n        }\n        if character == \"\\r\" {\n            bored = false\n\
    \        }\n        if character == \"\\n\" {\n            bored = false\n   \
    \     }\n        if character == \"\\n\" {\n            bored = false\n      \
    \  }\n        if character == \"\\r\" {\n            bored = false\n        }\n\
    \        if character == \"\\n\" {\n            bored = false\n        }\n   \
    \     if character == \"\\n\" {\n            bored = false\n        }\n      \
    \  if character == \"\\r\" {\n            bored = false\n        }\n        if\
    \ character == \"\\n\" {\n            bored = false\n        }\n        if character\
    \ == \"\\n\" {\n            bored = false\n        }\n        if character ==\
    \ \"\\r\" {\n            bored = false\n        }\n        if character == \"\\\
    n\" {\n            bored = false\n        }\n        if character == \"\\n\" {\n\
    \            bored = false\n", "    let boredoms = S.filter { $0.starts(with:\
    \ \"I\") }\n    return boredoms.count", "    let boredoms = S.filter { $0.starts(with:\
    \ \"I\") }\n    return boredoms.count", "    let boredoms = S.filter({$0.starts(with:\
    \ \"I\")})\n    return boredoms.count", "    var boredoms = 0\n    var lastWord\
    \ = \"\"\n    for word in S.split(separator: \".?!\") {\n        if word == \"\
    I\" {\n            boredoms += 1\n        } else {\n            lastWord = word\n\
    \        }\n    }\n    return boredoms", "    let boredoms = S.filter { $0.starts(with:\
    \ \"I\") }\n    return boredoms.count", "    var boredoms: Int = 0\n    for word\
    \ in S.split(separator: \".?!\") {\n        if word == \"I\" {\n            boredoms\
    \ += 1\n        }\n    }\n    return boredoms", "    let boredoms = S.filter {\
    \ $0.starts(with: \"I\") }\n    return boredoms.count", "    let boredoms = S.filter{\
    \ $0.startsWith(\"I\") }\n    return boredoms.count", '    return is_bored_helper(S,
    "")', "    let boredoms = S.filter{$0.startsWith(\"I\")}\n    return boredoms.count",
  "    let boredoms = S.filter({$0.hasPrefix(\"I\")})\n    return boredoms.count",
  "    var boredoms = 0\n    for s in S.split(separator: \".?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            boredoms += 1\n        }\n    }\n    return boredoms",
  "    var count = 0\n    for word in S.split(separator: \".?!\") {\n        if word.starts(with:\
    \ \"I\") {\n            count += 1\n        }\n    }\n    return count", "   \
    \ var boredoms: Int = 0\n    var sentence: String = S\n    var word: String =\
    \ \"\"\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l:\
    \ Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var\
    \ p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n   \
    \ var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n\
    \    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var A: Int =\
    \ 0\n    var B: Int = 0\n    var C: Int = 0\n    var D: Int = 0\n    var E: Int\
    \ = 0\n    var F: Int = 0\n    var G: Int = 0\n    var H: Int = 0\n    var I:\
    \ Int = 0\n    var J: Int = 0\n    var K: Int = 0\n    var L: Int = 0\n    var\
    \ M: Int = 0\n    var N: Int = 0\n    var O: Int = 0\n    var P: Int = 0\n   \
    \ var Q: Int = 0\n    var R: Int = 0\n    var S: Int = 0\n    var T: Int = 0\n\
    \    var U: Int = 0\n    var V: Int = 0\n    var W: Int = 0\n    var X: Int =\
    \ 0\n    var Y: Int = 0\n    var Z: Int = 0\n    var _: Int = 0\n    var _: Int\
    \ = 0\n    var _: Int = 0\n    var _: Int = 0\n    var _: Int = 0\n    var _:\
    \ Int = 0\n    var _: Int = 0\n    var _: Int = 0\n    var _: Int = 0\n    var\
    \ _: Int = 0\n    var _: Int = 0\n    var _: Int = 0\n    var _: Int = 0\n   \
    \ var _: Int = 0\n    var _: Int = 0\n    var _: Int = 0\n    var _: Int = 0\n\
    \    var _: Int = 0\n    var _: Int = 0\n    var _: Int = 0\n    var _: Int =\
    \ 0\n    var _: Int = 0\n    var _: Int = 0\n    var _: Int = 0\n    var _: Int\
    \ = 0\n    var _: Int = 0\n    var _: Int = 0\n    var _: Int = 0\n    var _:\
    \ Int = 0\n    var _: Int = 0\n    var _: Int = 0\n    var _: Int = 0\n    var\
    \ _: Int = 0\n    var _: Int = 0\n    var _: Int = 0\n    var _: Int = 0\n   \
    \ var _: Int = 0\n    var _: Int = 0\n    var _: Int = 0\n    var _: Int = 0\n\
    \    var ", '    return is_bored(S.characters)', "    let boredoms = S.filter\
    \ { $0.starts(with: \"I\") }\n    return boredoms.count", "    let boredoms =\
    \ S.filter{$0.hasPrefix(\"I\")}\n    return boredoms.count", "    let boredoms\
    \ = S.split(separator: \".?!\").filter({ $0.hasPrefix(\"I\") }).count\n    return\
    \ boredoms", "    var boredoms = 0\n    for word in S.split(separator: \".?!\"\
    ) {\n        if word.starts(with: \"I\") {\n            boredoms += 1\n      \
    \  }\n    }\n    return boredoms", "    var boredoms = 0\n    for s in S.split(separator:\
    \ \".?!\") {\n        if s.starts(with: \"I\") {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms", '    return 0', "    var boredoms: Int\
    \ = 0\n    var sentence: String = \"\"\n    var word: String = \"\"\n    var i:\
    \ Int = 0\n    for word in S.split(separator: \".?!\") {\n        sentence = sentence\
    \ + word + \" \"\n        if word == \"I\" {\n            boredoms = boredoms\
    \ + 1\n        }\n    }\n    return boredoms", '    ', "    let boredoms = S.filter({$0.hasPrefix(\"\
    I\")})\n    return boredoms.count", "    // TODO: replace this implementation\
    \ with code that uses standard library\n    // functions to accomplish the same\
    \ thing.\n    let words = S.components(separatedBy: \" \")\n    let boredoms =\
    \ words.filter({ $0.hasPrefix(\"I\") })\n    return boredoms.count", "    var\
    \ boredomCount = 0\n    for word in S.split(separator: \".?!\") {\n        if\
    \ word.starts(with: \"I\") {\n            boredomCount += 1\n        }\n    }\n\
    \    return boredomCount", '    ', '    return 0', "    let boredoms = S.filter({$0\
    \ == \"I\"})\n    return boredoms.count", "    let boredom = S.starts(with: \"\
    I\")\n    return boredom.count", "    var boredoms: Int = 0\n    var currentWord:\
    \ String = \"\"\n    var currentSentence: String = \"\"\n    var currentWordIsBored:\
    \ Bool = false\n    for character in S {\n        switch character {\n       \
    \ case \"?\", \".\", \"!\":\n            if currentSentence != \"\" {\n      \
    \          boredoms += is_bored(currentSentence)\n                currentSentence\
    \ = \"\"\n            }\n            if currentWord != \"\" {\n              \
    \  currentWordIsBored = currentWord.characters.first == \"I\"\n            }\n\
    \            if currentWordIsBored {\n                currentWord += character\n\
    \            } else {\n                currentSentence += character\n        \
    \    }\n        default:\n            if currentSentence != \"\" {\n         \
    \       boredoms += is_bored(currentSentence)\n                currentSentence\
    \ = \"\"\n            }\n            if currentWord != \"\" {\n              \
    \  currentWordIsBored = currentWord.characters.first == \"I\"\n            }\n\
    \            if currentWordIsBored {\n                currentWord += character\n\
    \            } else {\n                currentSentence += character\n        \
    \    }\n        }\n    }\n    if currentSentence != \"\" {\n        boredoms +=\
    \ is_bored(currentSentence)\n    }\n    return boredoms", '    ', "    let boredom\
    \ = S.rangeOfString(\"I\")\n    return boredom.length", "    let boredoms = S.filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count", "    let boredoms = S.filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count", '    ', "    let boredoms = S.filter({$0.hasPrefix(\"\
    I\")})\n    return boredoms.count", "    var count = 0\n    var boredoms = \"\"\
    \n    for s in S.split(separator: \".?!\") {\n        if s.starts(with: \"I\"\
    ) {\n            count += 1\n            boredoms += s\n        }\n    }\n   \
    \ return count", "    var boredoms: Int = 0\n    for word in S.split(separator:\
    \ \".?!\") {\n        if word.starts(with: \"I\") {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms", "    // TODO: Write a function that takes\
    \ a string and returns the number of boredoms.\n    return 0", "    let boredoms\
    \ = S.filter{$0.hasPrefix(\"I\")}\n    return boredoms.count", "    var boredoms\
    \ = 0\n    for word in S.split(separator: \".?!\") {\n        if word.hasPrefix(\"\
    I\") {\n            boredoms += 1\n        }\n    }\n    return boredoms", " \
    \   let boredoms = S.filter{$0.startsWith(\"I\")}\n    return boredoms.count",
  "    let boredoms = S.filter { $0.startsWith(\"I\") }\n    return boredoms.count",
  "    var count = 0\n    var boredoms = \"\"\n    for s in S.split(separator: \"\
    .?!\") {\n        if s.starts(with: \"I\") {\n            count += 1\n       \
    \ } else {\n            boredoms += s\n        }\n    }\n    return count", '    //
    Your code here', '    ', "    // TODO: Write a function that takes a string and\
    \ returns the number of boredoms.\n    // HINT: Use a regular expression to find\
    \ all sentences that start with the word \"I\".\n    // HINT: You may want to\
    \ use split or explode to split up the sentence into words.\n    // HINT: You\
    \ may want to use map to convert words to lowercase.\n    // HINT: You may want\
    \ to use reduce to iterate over all the words in the sentence and increment a\
    \ counter.\n    // HINT: You may want to use filter to remove any words that aren't\
    \ boredoms.\n    // HINT: You may want to use reduce to iterate over all the words\
    \ in the sentence and increment a counter.\n    // HINT: You may want to use reduce\
    \ to iterate over all the words in the sentence and increment a counter.\n   \
    \ // HINT: You may want to use reduce to iterate over all the words in the sentence\
    \ and increment a counter.\n    // HINT: You may want to use reduce to iterate\
    \ over all the words in the sentence and increment a counter.\n    // HINT: You\
    \ may want to use reduce to iterate over all the words in the sentence and increment\
    \ a counter.\n    // HINT: You may want to use reduce to iterate over all the\
    \ words in the sentence and increment a counter.\n    // HINT: You may want to\
    \ use reduce to iterate over all the words in the sentence and increment a counter.\n\
    \    // HINT: You may want to use reduce to iterate over all the words in the\
    \ sentence and increment a counter.\n    // HINT: You may want to use reduce to\
    \ iterate over all the words in the sentence and increment a counter.\n    //\
    \ HINT: You may want to use reduce to iterate over all the words in the sentence\
    \ and increment a counter.\n    // HINT: You may want to use reduce to iterate\
    \ over all the words in the sentence and increment a counter.\n    // HINT: You\
    \ may want to use reduce to iterate over all the words in the sentence and increment\
    \ a counter.\n    // HINT: You may want to use reduce to iterate over all the\
    \ words in the sentence and increment a counter.\n    // HINT: You may want to\
    \ use reduce to iterate over all the words in the sentence and increment a counter.\n\
    \    // HINT: You may want to use reduce to iterate over all the words in the\
    \ sentence and increment a counter.\n    // HINT: You may want to use reduce to\
    \ iterate over all the words in the sentence and increment a counter.\n    //\
    \ HINT: You may want to use reduce to iterate over all the words in the sentence\
    \ and increment a counter.\n    // HINT: You may want to use reduce to iterate\
    \ over all the words in the sentence and increment a counter.\n    // HINT: You\
    \ may want to use reduce to iterate over all the words in the sentence and increment\
    \ a counter.\n    // HINT: You may want to ", "    var count = 0\n    for word\
    \ in S.split(separator: \".?!\") {\n        if word == \"I\" {\n            count\
    \ += 1\n        }\n    }\n    return count", "    var boredoms: Int = 0\n    for\
    \ word in S.split(separator: \".?!\") {\n        if word.hasPrefix(\"I\") {\n\
    \            boredoms += 1\n        }\n    }\n    return boredoms", "    var boredoms:\
    \ Int = 0\n    var currentWord: String = \"\"\n    var currentSentence: String\
    \ = \"\"\n    var currentChar: Character = \"?\"\n\n    for char in S {\n    \
    \    currentChar = char\n        if currentChar == \".\" || currentChar == \"\
    !\" || currentChar == \"?\" {\n            currentSentence = currentSentence +\
    \ currentChar\n        }\n        else {\n            currentWord = currentWord\
    \ + currentChar\n        }\n    }\n\n    if currentWord == \"I\" {\n        boredoms\
    \ = boredoms + 1\n    }\n\n    return boredoms", "    var boredoms = 0\n    for\
    \ s in S.split(separator: \".?!\") {\n        if s.starts(with: \"I\") {\n   \
    \         boredoms += 1\n        }\n    }\n    return boredoms", "    let boredoms\
    \ = S.filter{$0.hasPrefix(\"I\")}\n    return boredoms.count", "    let boredoms\
    \ = S.filter { $0.starts(with: \"I\") }\n    return boredoms.count", "    \n \
    \   var boredoms = 0\n    \n    for word in S.split(separator: \".?!\") {\n  \
    \      if word.starts(with: \"I\") {\n            boredoms += 1\n        }\n \
    \   }\n    \n    return boredoms", "    // TODO: Write a function that takes a\
    \ string and returns the number of boredoms.\n    // HINT: Use a regular expression\
    \ to find all sentences that start with the word \"I\".\n    // HINT: You may\
    \ want to use split function to split a string into an array of strings.\n   \
    \ // HINT: You may want to use map function to apply a function to every element\
    \ of an array.\n    // HINT: You may want to use reduce function to apply a function\
    \ to every element of an array.\n    // HINT: You may want to use filter function\
    \ to find elements that satisfy a predicate.\n    // HINT: You may want to use\
    \ reduce to apply a function to every element of an array.\n    // HINT: You may\
    \ want to use map to apply a function to every element of an array.\n    // HINT:\
    \ You may want to use reduce to apply a function to every element of an array.\n\
    \    // HINT: You may want to use filter function to find elements that satisfy\
    \ a predicate.\n    // HINT: You may want to use reduce to apply a function to\
    \ every element of an array.\n    // HINT: You may want to use map to apply a\
    \ function to every element of an array.\n    // HINT: You may want to use reduce\
    \ to apply a function to every element of an array.\n    // HINT: You may want\
    \ to use filter function to find elements that satisfy a predicate.\n    // HINT:\
    \ You may want to use reduce to apply a function to every element of an array.\n\
    \    // HINT: You may want to use map to apply a function to every element of\
    \ an array.\n    // HINT: You may want to use reduce to apply a function to every\
    \ element of an array.\n    // HINT: You may want to use filter function to find\
    \ elements that satisfy a predicate.\n    // HINT: You may want to use reduce\
    \ to apply a function to every element of an array.\n    // HINT: You may want\
    \ to use map to apply a function to every element of an array.\n    // HINT: You\
    \ may want to use reduce to apply a function to every element of an array.\n \
    \   // HINT: You may want to use filter function to find elements that satisfy\
    \ a predicate.\n    // HINT: You may want to use reduce to apply a function to\
    \ every element of an array.\n    // HINT: You may want to use map to apply a\
    \ function to every element of an array.\n    // HINT: You may want to use reduce\
    \ to apply a function to every element of an array.\n    // HINT: You may want\
    \ to use filter function to find elements that satisfy a predicate.\n    // HINT:\
    \ You may want to use reduce to apply a function to every element of an array.\n\
    \    // HINT: You may want to use map to apply a function to every element of\
    \ an array.\n    // HINT: You may want to use reduce to apply a function to every\
    \ element of an array.\n    // HINT: You may want to use filter function to find\
    \ elements that satisfy a ", "    let boredoms = S.filter { $0.startsWith(\"I\"\
    ) }\n    return boredoms.count", "    let boredoms = S.filter{ $0.hasPrefix(\"\
    I\") }\n    return boredoms.count", "    let boredoms = S.filter { $0.hasPrefix(\"\
    I\") }\n    return boredoms.count", "    // Your code here\n    var boredoms =\
    \ 0\n    for word in S.split(separator: \".?!\") {\n        if word.starts(with:\
    \ \"I\") {\n            boredoms += 1\n        }\n    }\n    return boredoms",
  "    let boredoms = S.filter { $0.starts(with: \"I\") }\n    return boredoms.count",
  "    var boredoms: Int = 0\n    var boredom_word: String = \"\"\n    var boredom_sentence:\
    \ String = \"\"\n    var boredom_sentence_word: String = \"\"\n    var boredom_sentence_words:\
    \ Array<String> = []\n    var boredom_sentence_words_count: Int = 0\n    var boredom_sentence_words_count_max:\
    \ Int = 0\n    var boredom_sentence_words_count_min: Int = 0\n    var boredom_sentence_words_count_avg:\
    \ Int = 0\n    var boredom_sentence_words_count_sum: Int = 0\n    var boredom_sentence_words_count_count_max:\
    \ Int = 0\n    var boredom_sentence_words_count_count_min: Int = 0\n    var boredom_sentence_words_count_count_avg:\
    \ Int = 0\n    var boredom_sentence_words_count_count_sum: Int = 0\n    var boredom_sentence_words_count_count_count_max:\
    \ Int = 0\n    var boredom_sentence_words_count_count_count_min: Int = 0\n   \
    \ var boredom_sentence_words_count_count_count_avg: Int = 0\n    var boredom_sentence_words_count_count_count_sum:\
    \ Int = 0\n    var boredom_sentence_words_count_count_count_count_max: Int = 0\n\
    \    var boredom_sentence_words_count_count_count_count_min: Int = 0\n    var\
    \ boredom_sentence_words_count_count_count_count_avg: Int = 0\n    var boredom_sentence_words_count_count_count_count_sum:\
    \ Int = 0\n    var boredom_sentence_words_count_count_count_count_count_max: Int\
    \ = 0\n    var boredom_sentence_words_count_count_count_count_count_min: Int =\
    \ 0\n    var boredom_sentence_words_count_count_count_count_count_avg: Int = 0\n\
    \    var boredom_sentence_words_count_count_count_count_count_sum: Int = 0\n \
    \   var boredom_sentence_words_count_count_count_count_count_count_max: Int =\
    \ 0\n    var boredom_sentence_words_count_count_count_count_count_count_min: Int\
    \ = 0\n    var boredom_sentence_words_count_count_count_count_count_count_avg:\
    \ Int = 0\n    var boredom_sentence_words_count_count_count_count_count_count_sum:\
    \ Int = 0\n    var boredom_sentence_words_count_count_count_count_count_count_count_max:\
    \ Int = 0\n    var boredom_sentence_words_count_count_count_count_count_count_count_min:\
    \ Int = 0\n    var boredom_sentence_words_count_count_count_count_count_count_count_avg:\
    \ Int = 0\n    var boredom_sentence_words_count_count_count_count_count_count_count_sum:\
    \ Int = 0\n    var boredom_sentence_words_count_count_count_count_count_count_count_max:\
    \ Int = 0\n    var boredom_sentence_words_count_count_count_count_count_count_count_min:\
    \ Int = 0\n", '    return 0', "    let boredoms = S.filter{$0.hasPrefix(\"I\"\
    )}\n    return boredoms.count", "    let boredom = S.characters.filter({ $0 ==\
    \ \"I\" }).count\n    return boredom", "    \n    // Your code here\n    \n  \
    \  return 0", "    var boredoms = 0\n    for word in S.split(separator: \".?!\"\
    ) {\n        if word.starts(with: \"I\") {\n            boredoms += 1\n      \
    \  }\n    }\n    return boredoms", "    // TODO: Write a function that takes a\
    \ string and returns the number of boredoms.\n    // HINT: Use a regular expression\
    \ to find all sentences that start with the word \"I\".\n    // HINT: You can\
    \ use the split() method to split a string into an array of strings.\n    // HINT:\
    \ You can use a for loop to iterate through the array of strings.\n    // HINT:\
    \ You can use the contains() method to check if a string contains a specific string.\n\
    \    // HINT: You can use the count() method to count the number of occurrences\
    \ of a specific string.\n    // HINT: You can use the boredom_count variable to\
    \ keep track of the number of boredoms.\n    // HINT: You can use the boredom_array\
    \ variable to keep track of the boredom sentences.\n    // HINT: You can use the\
    \ boredom_string variable to keep track of the boredom words.\n    // HINT: You\
    \ can use the boredom_word variable to keep track of the boredom words.\n    //\
    \ HINT: You can use the boredom_sentence variable to keep track of the boredom\
    \ sentences.\n    // HINT: You can use the boredom_word variable to keep track\
    \ of the boredom words.\n    // HINT: You can use the boredom_sentence variable\
    \ to keep track of the boredom sentences.\n    // HINT: You can use the boredom_word\
    \ variable to keep track of the boredom words.\n    // HINT: You can use the boredom_sentence\
    \ variable to keep track of the boredom sentences.\n    // HINT: You can use the\
    \ boredom_word variable to keep track of the boredom words.\n    // HINT: You\
    \ can use the boredom_sentence variable to keep track of the boredom sentences.\n\
    \    // HINT: You can use the boredom_word variable to keep track of the boredom\
    \ words.\n    // HINT: You can use the boredom_sentence variable to keep track\
    \ of the boredom sentences.\n    // HINT: You can use the boredom_word variable\
    \ to keep track of the boredom words.\n    // HINT: You can use the boredom_sentence\
    \ variable to keep track of the boredom sentences.\n    // HINT: You can use the\
    \ boredom_word variable to keep track of the boredom words.\n    // HINT: You\
    \ can use the boredom_sentence variable to keep track of the boredom sentences.\n\
    \    // HINT: You can use the boredom_word variable to keep track of the boredom\
    \ words.\n    // HINT: You can use the boredom_sentence variable to keep track\
    \ of the boredom sentences.\n    // HINT: You can use the boredom_word variable\
    \ to keep track of the boredom words.\n    // HINT: You can use the bore", '    ',
  "    let boredom = S.rangeOfString(\"I\")\n    return boredom.length", "    var\
    \ boredoms = 0\n    for word in S.split(separator: \".?!\") {\n        if word.starts(with:\
    \ \"I\") {\n            boredoms += 1\n        }\n    }\n    return boredoms",
  "    let boredoms = S.filter{$0.hasPrefix(\"I\")}\n    return boredoms.count", " \
    \   let boredoms = S.filter { $0.hasPrefix(\"I\") }\n    return boredoms.count",
  "    let boredoms = S.filter{$0.hasPrefix(\"I\")}\n    return boredoms.count", " \
    \   var boredoms = 0\n    for s in S.split(separator: \".?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            boredoms += 1\n        }\n    }\n    return boredoms",
  "    let boredoms = S.filter { $0.starts(with: \"I\") }\n    return boredoms.count",
  "    var boredoms = 0\n    for word in S.split(separator: \".?!\") {\n        if\
    \ word == \"I\" {\n            boredoms += 1\n        }\n    }\n    return boredoms",
  "    let boredoms = S.filter { $0.startsWith(\"I\") }\n    return boredoms.count",
  "    // TODO: Write a function that takes a string and returns the number of boredoms.\n\
    \    return 0", "    let boredoms = S.filter { $0.starts(with: \"I\") }\n    return\
    \ boredoms.count", '    ', '    return 0', "    let boredoms = S.filter { $0.hasPrefix(\"\
    I\") }\n    return boredoms.count", '    return 0', "    var boredoms: Int = 0\n\
    \    var sentence: String = S\n    var word: String = \"\"\n    var i: Int = 0\n\
    \    \n    while i < S.count {\n        if S[i] == '.' || S[i] == '?' || S[i]\
    \ == '!' {\n            boredoms += 1\n            sentence = S[i..<S.count]\n\
    \            word = \"\"\n        }\n        else if S[i] == ' ' {\n         \
    \   boredoms += 1\n            sentence = S[i..<S.count]\n            word = \"\
    \"\n        }\n        else {\n            word += S[i]\n        }\n        i\
    \ += 1\n    }\n    \n    return boredoms", "    let boredoms = S.filter({$0.hasPrefix(\"\
    I\")})\n    return boredoms.count", "    let boredoms = S.filter{$0.startsWith(\"\
    I\")}\n    return boredoms.count", "    \n    let boredoms = S.filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count", "    let boredoms = S.filter { $0.starts(with:\
    \ \"I\") }\n    return boredoms.count", "    var boredoms = 0\n    var currentWord\
    \ = \"\"\n    for word in S.split(separator: \".?!\") {\n        if word.hasPrefix(\"\
    I\") {\n            boredoms += 1\n        }\n        currentWord = word\n   \
    \ }\n    return boredoms", '    ', '    return 0', "    let boredoms = S.filter\
    \ { $0.starts(with: \"I\") }\n    return boredoms.count", "    let boredoms =\
    \ S.filter{ $0.hasPrefix(\"I\") }\n    return boredoms.count", "    var boredoms:\
    \ Int = 0\n    for word in S.split(separator: \".?!\") {\n        if word.starts(with:\
    \ \"I\") {\n            boredoms += 1\n        }\n    }\n    return boredoms",
  "    let boredoms = S.filter{ $0.hasPrefix(\"I\") }\n    return boredoms.count",
  "    let boredoms = S.filter { $0.starts(with: \"I\") }\n    return boredoms.count",
  "    \n    var boredoms: Int = 0\n    \n    for s in S.split(separator: \".?!\"\
    ) {\n        if s.starts(with: \"I\") {\n            boredoms += 1\n        }\n\
    \    }\n    \n    return boredoms", "    let boredoms = S.filter { $0.startsWith(\"\
    I\") }\n    return boredoms.count", "    let boredoms = S.filter { $0.hasPrefix(\"\
    I\") }\n    return boredoms.count", '    ', "    let boredoms = S.filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count", "    let boredoms = S.filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count", "    // Your code here\n    return 0", "  \
    \  let boredoms = S.filter{ $0.hasPrefix(\"I\") }\n    return boredoms.count",
  '    ', "    let boredoms = S.filter{$0.hasPrefix(\"I\")}\n    return boredoms.count",
  "    let boredoms = S.filter{$0.startsWith(\"I\")}\n    return boredoms.count",
  "    var boredoms = 0\n    var lastWord = \"\"\n    for word in S.split(separator:\
    \ \".?!\") {\n        if word == \"I\" {\n            boredoms += 1\n        }\
    \ else {\n            if lastWord == \"I\" {\n                boredoms += 1\n\
    \            }\n        }\n        lastWord = word\n    }\n    return boredoms",
  "    let boredoms = S.filter{$0.hasPrefix(\"I\")}\n    return boredoms.count", " \
    \   let boredoms = S.filter { $0.starts(with: \"I\") }\n    return boredoms.count",
  "    let boredoms = S.filter { $0.starts(with: \"I\") }\n    return boredoms.count"]
stop_tokens:
- "\n}"
