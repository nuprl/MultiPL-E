language: swift
name: HumanEval_79_decimal_to_binary
results:
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjgvpaxv2/tmpjgvpaxv2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac12e859c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac12e550b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac12e550988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac12e54f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjgvpaxv2                        0x000055b152323492 <unavailable> + 5266

    5    libc.so.6                          0x00002ac12ea45460 __libc_start_main +
    245

    6    tmpjgvpaxv2                        0x000055b1523230f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        binaryString = String(remainder % 2) + binaryString\n       \
    \ remainder = Int(remainder / 2)\n    }\n    binaryString = binaryString + \"\
    db\"\n    return binaryString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpytk5iek8/tmpytk5iek8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae39bafec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae39b7f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae39b7f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae39b7f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpytk5iek8                        0x000055a9734205c2 <unavailable> + 5570

    5    libc.so.6                          0x00002ae39bcea460 __libc_start_main +
    245

    6    tmpytk5iek8                        0x000055a973420229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpf8g4mdz4/tmpf8g4mdz4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c33b6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c33865b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c33865988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c338647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf8g4mdz4                        0x000055a541964492 <unavailable> + 5266

    5    libc.so.6                          0x00002b2c33d5a460 __libc_start_main +
    245

    6    tmpf8g4mdz4                        0x000055a5419640f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpf8g4mdz4/tmpf8g4mdz4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c33b6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c33865b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c33865988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c338647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf8g4mdz4                        0x000055a541964492 <unavailable> + 5266

    5    libc.so.6                          0x00002b2c33d5a460 __libc_start_main +
    245

    6    tmpf8g4mdz4                        0x000055a5419640f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpf8g4mdz4/tmpf8g4mdz4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c33b6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c33865b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c33865988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c338647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf8g4mdz4                        0x000055a541964492 <unavailable> + 5266

    5    libc.so.6                          0x00002b2c33d5a460 __libc_start_main +
    245

    6    tmpf8g4mdz4                        0x000055a5419640f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpf8g4mdz4/tmpf8g4mdz4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c33b6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c33865b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c33865988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c338647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf8g4mdz4                        0x000055a541964492 <unavailable> + 5266

    5    libc.so.6                          0x00002b2c33d5a460 __libc_start_main +
    245

    6    tmpf8g4mdz4                        0x000055a5419640f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder / 2\n        binaryString = String(remainder)\
    \ + String(binaryString)\n    }\n    return binaryString\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpyegmrd_d/tmpyegmrd_d.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5728944c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b572863bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b572863b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b572863a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyegmrd_d                        0x000055ca100d55d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b5728b30460 __libc_start_main +
    245

    6    tmpyegmrd_d                        0x000055ca100d5239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder, remainder = remainder / 2, remainder % 2\n       \
    \ binaryString = String(remainder) + binaryString\n    }\n    return binaryString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp1xd09tfm.swift:12:18: error: consecutive statements on a line must\
    \ be separated by ';'\n        remainder, remainder = remainder / 2, remainder\
    \ % 2\n                 ^\n                 ;\n/tmp/tmp1xd09tfm.swift:12:18: error:\
    \ expected expression\n        remainder, remainder = remainder / 2, remainder\
    \ % 2\n                 ^\n/tmp/tmp1xd09tfm.swift:12:9: warning: variable is unused\n\
    \        remainder, remainder = remainder / 2, remainder % 2\n        ^~~~~~~~~\n\
    /tmp/tmp1xd09tfm.swift:9:9: warning: variable 'binaryString' was never mutated;\
    \ consider changing to 'let' constant\n    var binaryString = \"\"\n    ~~~ ^\n\
    \    let\n/tmp/tmp1xd09tfm.swift:10:9: warning: variable 'remainder' was never\
    \ mutated; consider changing to 'let' constant\n    var remainder = decimal\n\
    \    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpf8g4mdz4/tmpf8g4mdz4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c33b6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c33865b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c33865988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c338647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf8g4mdz4                        0x000055a541964492 <unavailable> + 5266

    5    libc.so.6                          0x00002b2c33d5a460 __libc_start_main +
    245

    6    tmpf8g4mdz4                        0x000055a5419640f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + String(binaryString)\n    }\n    return binaryString\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpxwoiduxf/tmpxwoiduxf.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b762c881c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b762c578b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b762c578988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b762c5777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxwoiduxf                        0x000055bb846525d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b762ca6d460 __libc_start_main +
    245

    6    tmpxwoiduxf                        0x000055bb84652239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    binaryString =\
    \ binaryString + \"db\"\n    return binaryString\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp0h8t8ir7/tmp0h8t8ir7.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5080b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab507da9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab507da9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab507da87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0h8t8ir7                        0x0000561143678492 <unavailable> + 5266

    5    libc.so.6                          0x00002ab50829e460 __libc_start_main +
    245

    6    tmp0h8t8ir7                        0x00005611436780f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var decimalString = String(decimal)\n    var\
    \ decimalLength = decimalString.length\n    var binaryLength = 0\n    var binaryChar\
    \ = \"\"\n    var decimalChar = \"\"\n    var binaryCharCount = 0\n    var decimalCharCount\
    \ = 0\n    var binaryCharCount2 = 0\n    var decimalCharCount2 = 0\n    var binaryCharCount3\
    \ = 0\n    var decimalCharCount3 = 0\n    var binaryCharCount4 = 0\n    var decimalCharCount4\
    \ = 0\n    var binaryCharCount5 = 0\n    var decimalCharCount5 = 0\n    var binaryCharCount6\
    \ = 0\n    var decimalCharCount6 = 0\n    var binaryCharCount7 = 0\n    var decimalCharCount7\
    \ = 0\n    var binaryCharCount8 = 0\n    var decimalCharCount8 = 0\n    var binaryCharCount9\
    \ = 0\n    var decimalCharCount9 = 0\n    var binaryCharCount10 = 0\n    var decimalCharCount10\
    \ = 0\n    var binaryCharCount11 = 0\n    var decimalCharCount11 = 0\n    var\
    \ binaryCharCount12 = 0\n    var decimalCharCount12 = 0\n    var binaryCharCount13\
    \ = 0\n    var decimalCharCount13 = 0\n    var binaryCharCount14 = 0\n    var\
    \ decimalCharCount14 = 0\n    var binaryCharCount15 = 0\n    var decimalCharCount15\
    \ = 0\n    var binaryCharCount16 = 0\n    var decimalCharCount16 = 0\n    var\
    \ binaryCharCount17 = 0\n    var decimalCharCount17 = 0\n    var binaryCharCount18\
    \ = 0\n    var decimalCharCount18 = 0\n    var binaryCharCount19 = 0\n    var\
    \ decimalCharCount19 = 0\n    var binaryCharCount20 = 0\n    var decimalCharCount20\
    \ = 0\n    var binaryCharCount21 = 0\n    var decimalCharCount21 = 0\n    var\
    \ binaryCharCount22 = 0\n    var decimalCharCount22 = 0\n    var binaryCharCount23\
    \ = 0\n    var decimalCharCount23 = 0\n    var binaryCharCount24 = 0\n    var\
    \ decimalCharCount24 = 0\n    var binaryCharCount25 = 0\n    var decimalCharCount25\
    \ = 0\n    var binaryCharCount26 = 0\n    var decimalCharCount26 = 0\n    var\
    \ binaryCharCount27 = 0\n    var decimalCharCount27 = 0\n    var binaryCharCount28\
    \ = 0\n    var decimalCharCount28 = 0\n    var binaryCharCount29 = 0\n    var\
    \ decimalCharCount29 = 0\n    var binaryCharCount30 = 0\n    var decimalCharCount30\
    \ = 0\n    var binaryCharCount31 = 0\n    var decimalCharCount31 = 0\n    var\
    \ binaryCharCount32 = 0\n    var decimalCharCount32 = 0\n    var binaryCharCount33\
    \ = 0\n    var decimalCharCount33 = 0\n    var binaryCharCount34 = 0\n    var\
    \ decimalCharCount34 = 0\n    var binaryCharCount\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: SyntaxError
  stderr: "/tmp/tmpobd8s_2e.swift:11:39: error: value of type 'String' has no member\
    \ 'length'\n    var decimalLength = decimalString.length\n                   \
    \     ~~~~~~~~~~~~~ ^~~~~~\n/tmp/tmpobd8s_2e.swift:83:9: error: type annotation\
    \ missing in pattern\n    var binaryCharCount\n        ^\n"
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjgvpaxv2/tmpjgvpaxv2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac12e859c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac12e550b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac12e550988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac12e54f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjgvpaxv2                        0x000055b152323492 <unavailable> + 5266

    5    libc.so.6                          0x00002ac12ea45460 __libc_start_main +
    245

    6    tmpjgvpaxv2                        0x000055b1523230f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjgvpaxv2/tmpjgvpaxv2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac12e859c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac12e550b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac12e550988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac12e54f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjgvpaxv2                        0x000055b152323492 <unavailable> + 5266

    5    libc.so.6                          0x00002ac12ea45460 __libc_start_main +
    245

    6    tmpjgvpaxv2                        0x000055b1523230f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjgvpaxv2/tmpjgvpaxv2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac12e859c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac12e550b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac12e550988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac12e54f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjgvpaxv2                        0x000055b152323492 <unavailable> + 5266

    5    libc.so.6                          0x00002ac12ea45460 __libc_start_main +
    245

    6    tmpjgvpaxv2                        0x000055b1523230f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var decimalString = \"\"\n    var decimalDigit\
    \ = 0\n    var binaryDigit = 0\n    var decimalDigitString = \"\"\n    var binaryDigitString\
    \ = \"\"\n    var decimalDigitStringLength = 0\n    var binaryDigitStringLength\
    \ = 0\n    var decimalDigitStringLength2 = 0\n    var binaryDigitStringLength2\
    \ = 0\n    var decimalDigitStringLength3 = 0\n    var binaryDigitStringLength3\
    \ = 0\n    var decimalDigitStringLength4 = 0\n    var binaryDigitStringLength4\
    \ = 0\n    var decimalDigitStringLength5 = 0\n    var binaryDigitStringLength5\
    \ = 0\n    var decimalDigitStringLength6 = 0\n    var binaryDigitStringLength6\
    \ = 0\n    var decimalDigitStringLength7 = 0\n    var binaryDigitStringLength7\
    \ = 0\n    var decimalDigitStringLength8 = 0\n    var binaryDigitStringLength8\
    \ = 0\n    var decimalDigitStringLength9 = 0\n    var binaryDigitStringLength9\
    \ = 0\n    var decimalDigitStringLength10 = 0\n    var binaryDigitStringLength10\
    \ = 0\n    var decimalDigitStringLength11 = 0\n    var binaryDigitStringLength11\
    \ = 0\n    var decimalDigitStringLength12 = 0\n    var binaryDigitStringLength12\
    \ = 0\n    var decimalDigitStringLength13 = 0\n    var binaryDigitStringLength13\
    \ = 0\n    var decimalDigitStringLength14 = 0\n    var binaryDigitStringLength14\
    \ = 0\n    var decimalDigitStringLength15 = 0\n    var binaryDigitStringLength15\
    \ = 0\n    var decimalDigitStringLength16 = 0\n    var binaryDigitStringLength16\
    \ = 0\n    var decimalDigitStringLength17 = 0\n    var binaryDigitStringLength17\
    \ = 0\n    var decimalDigitStringLength18 = 0\n    var binaryDigitStringLength18\
    \ = 0\n    var decimalDigitStringLength19 = 0\n    var binaryDigitStringLength19\
    \ = 0\n    var decimalDigitStringLength20 = 0\n    var binaryDigitStringLength20\
    \ = 0\n    var decimalDigitStringLength21 = 0\n    var binaryDigitStringLength21\
    \ = 0\n    var decimalDigitStringLength22 = 0\n    var binaryDigitStringLength22\
    \ = 0\n    var decimalDigitStringLength23 = 0\n    var binaryDigitStringLength23\
    \ = 0\n    var decimalDigitStringLength24 = 0\n    var binaryDigitStringLength24\
    \ = 0\n    var decimalDigitStringLength25 = 0\n    var binaryDigitStringLength25\
    \ = 0\n    var decimalDigitStringLength26 = 0\n    var binaryDigitStringLength26\
    \ = 0\n    var decimalDigitStringLength27 = 0\n    var binaryDigitStringLength27\
    \ = 0\n    var decimalDigitStringLength28 = 0\n    var binaryDigitStringLength28\
    \ = 0\n    var decimalDigitStringLength29 = 0\n    var binaryDigitStringLength29\
    \ = 0\n    var decimalDigitStringLength30 = 0\n    var binaryDigitStringLength30\
    \ = 0\n    var decimal\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: SyntaxError
  stderr: "/tmp/tmpnga6jm00.swift:75:9: error: type annotation missing in pattern\n\
    \    var decimal\n        ^\n"
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpf8g4mdz4/tmpf8g4mdz4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c33b6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c33865b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c33865988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c338647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf8g4mdz4                        0x000055a541964492 <unavailable> + 5266

    5    libc.so.6                          0x00002b2c33d5a460 __libc_start_main +
    245

    6    tmpf8g4mdz4                        0x000055a5419640f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpf8g4mdz4/tmpf8g4mdz4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c33b6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c33865b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c33865988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c338647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf8g4mdz4                        0x000055a541964492 <unavailable> + 5266

    5    libc.so.6                          0x00002b2c33d5a460 __libc_start_main +
    245

    6    tmpf8g4mdz4                        0x000055a5419640f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjgvpaxv2/tmpjgvpaxv2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac12e859c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac12e550b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac12e550988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac12e54f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjgvpaxv2                        0x000055b152323492 <unavailable> + 5266

    5    libc.so.6                          0x00002ac12ea45460 __libc_start_main +
    245

    6    tmpjgvpaxv2                        0x000055b1523230f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    binaryString =\
    \ \"db\" + binaryString\n    return binaryString\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpm_hv_cw1/tmpm_hv_cw1.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b932a23dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9329f34b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9329f34988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9329f337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm_hv_cw1                        0x000055f48f933492 <unavailable> + 5266

    5    libc.so.6                          0x00002b932a429460 __libc_start_main +
    245

    6    tmpm_hv_cw1                        0x000055f48f9330f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpf8g4mdz4/tmpf8g4mdz4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c33b6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c33865b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c33865988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c338647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf8g4mdz4                        0x000055a541964492 <unavailable> + 5266

    5    libc.so.6                          0x00002b2c33d5a460 __libc_start_main +
    245

    6    tmpf8g4mdz4                        0x000055a5419640f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        binaryString += \"0\"\n        remainder = remainder - 10\n \
    \   }\n    while remainder > 0 {\n        binaryString += \"1\"\n        remainder\
    \ = remainder - 10\n    }\n    binaryString = \"db\" + binaryString\n    return\
    \ binaryString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp3kwd3eon/tmp3kwd3eon.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad9f538c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad9f22fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad9f22f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad9f22e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3kwd3eon                        0x000055e8c1006382 <unavailable> + 4994

    5    libc.so.6                          0x00002aad9f724460 __libc_start_main +
    245

    6    tmp3kwd3eon                        0x000055e8c1005fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder / 2\n        binaryString = String(remainder)\
    \ + binaryString\n    }\n    return binaryString\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp2haro8_u/tmp2haro8_u.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8835f32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8835c29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8835c29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8835c287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2haro8_u                        0x0000561f7ca4f492 <unavailable> + 5266

    5    libc.so.6                          0x00002b883611e460 __libc_start_main +
    245

    6    tmp2haro8_u                        0x0000561f7ca4f0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder / 2\n        binaryString = String(remainder)\
    \ + binaryString\n    }\n    return binaryString\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp2haro8_u/tmp2haro8_u.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8835f32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8835c29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8835c29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8835c287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2haro8_u                        0x0000561f7ca4f492 <unavailable> + 5266

    5    libc.so.6                          0x00002b883611e460 __libc_start_main +
    245

    6    tmp2haro8_u                        0x0000561f7ca4f0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    binaryString =\
    \ binaryString + \"db\"\n    return binaryString\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp0h8t8ir7/tmp0h8t8ir7.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5080b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab507da9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab507da9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab507da87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0h8t8ir7                        0x0000561143678492 <unavailable> + 5266

    5    libc.so.6                          0x00002ab50829e460 __libc_start_main +
    245

    6    tmp0h8t8ir7                        0x00005611436780f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjgvpaxv2/tmpjgvpaxv2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac12e859c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac12e550b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac12e550988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac12e54f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjgvpaxv2                        0x000055b152323492 <unavailable> + 5266

    5    libc.so.6                          0x00002ac12ea45460 __libc_start_main +
    245

    6    tmpjgvpaxv2                        0x000055b1523230f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpf8g4mdz4/tmpf8g4mdz4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c33b6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c33865b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c33865988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c338647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf8g4mdz4                        0x000055a541964492 <unavailable> + 5266

    5    libc.so.6                          0x00002b2c33d5a460 __libc_start_main +
    245

    6    tmpf8g4mdz4                        0x000055a5419640f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpf8g4mdz4/tmpf8g4mdz4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c33b6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c33865b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c33865988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c338647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf8g4mdz4                        0x000055a541964492 <unavailable> + 5266

    5    libc.so.6                          0x00002b2c33d5a460 __libc_start_main +
    245

    6    tmpf8g4mdz4                        0x000055a5419640f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpf8g4mdz4/tmpf8g4mdz4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c33b6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c33865b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c33865988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c338647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf8g4mdz4                        0x000055a541964492 <unavailable> + 5266

    5    libc.so.6                          0x00002b2c33d5a460 __libc_start_main +
    245

    6    tmpf8g4mdz4                        0x000055a5419640f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder, remainder = remainder / 2, remainder % 2\n       \
    \ binaryString = String(remainder) + binaryString\n    }\n    return binaryString\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: SyntaxError
  stderr: "/tmp/tmplzb9k9zv.swift:12:18: error: consecutive statements on a line must\
    \ be separated by ';'\n        remainder, remainder = remainder / 2, remainder\
    \ % 2\n                 ^\n                 ;\n/tmp/tmplzb9k9zv.swift:12:18: error:\
    \ expected expression\n        remainder, remainder = remainder / 2, remainder\
    \ % 2\n                 ^\n/tmp/tmplzb9k9zv.swift:12:9: warning: variable is unused\n\
    \        remainder, remainder = remainder / 2, remainder % 2\n        ^~~~~~~~~\n\
    /tmp/tmplzb9k9zv.swift:9:9: warning: variable 'binaryString' was never mutated;\
    \ consider changing to 'let' constant\n    var binaryString = \"\"\n    ~~~ ^\n\
    \    let\n/tmp/tmplzb9k9zv.swift:10:9: warning: variable 'remainder' was never\
    \ mutated; consider changing to 'let' constant\n    var remainder = decimal\n\
    \    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660014036
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var decimalString = String(decimal)\n    var\
    \ decimalLength = decimalString.length\n    var binaryLength = 0\n\n    while\
    \ decimalLength > binaryLength {\n        binaryString = String(decimalString.substring(decimalLength\
    \ - binaryLength, decimalLength))\n        binaryLength += binaryString.count\n\
    \    }\n\n    binaryString = String(decimalString.substring(decimalLength - binaryLength,\
    \ decimalLength))\n    binaryLength += binaryString.count\n\n    binaryString\
    \ = binaryString.reverse()\n\n    return binaryString\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: SyntaxError
  stderr: "/tmp/tmpprbn2yxd.swift:11:39: error: value of type 'String' has no member\
    \ 'length'\n    var decimalLength = decimalString.length\n                   \
    \     ~~~~~~~~~~~~~ ^~~~~~\n/tmp/tmpprbn2yxd.swift:15:45: error: value of type\
    \ 'String' has no member 'substring'\n        binaryString = String(decimalString.substring(decimalLength\
    \ - binaryLength, decimalLength))\n                              ~~~~~~~~~~~~~\
    \ ^~~~~~~~~\n/tmp/tmpprbn2yxd.swift:19:41: error: value of type 'String' has no\
    \ member 'substring'\n    binaryString = String(decimalString.substring(decimalLength\
    \ - binaryLength, decimalLength))\n                          ~~~~~~~~~~~~~ ^~~~~~~~~\n\
    /tmp/tmpprbn2yxd.swift:22:33: error: value of type 'String' has no member 'reverse'\n\
    \    binaryString = binaryString.reverse()\n                   ~~~~~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014036
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder, remainder = remainder / 2, remainder % 2\n       \
    \ binaryString = String(remainder) + binaryString\n    }\n    return binaryString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp1xd09tfm.swift:12:18: error: consecutive statements on a line must\
    \ be separated by ';'\n        remainder, remainder = remainder / 2, remainder\
    \ % 2\n                 ^\n                 ;\n/tmp/tmp1xd09tfm.swift:12:18: error:\
    \ expected expression\n        remainder, remainder = remainder / 2, remainder\
    \ % 2\n                 ^\n/tmp/tmp1xd09tfm.swift:12:9: warning: variable is unused\n\
    \        remainder, remainder = remainder / 2, remainder % 2\n        ^~~~~~~~~\n\
    /tmp/tmp1xd09tfm.swift:9:9: warning: variable 'binaryString' was never mutated;\
    \ consider changing to 'let' constant\n    var binaryString = \"\"\n    ~~~ ^\n\
    \    let\n/tmp/tmp1xd09tfm.swift:10:9: warning: variable 'remainder' was never\
    \ mutated; consider changing to 'let' constant\n    var remainder = decimal\n\
    \    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    binaryString =\
    \ binaryString + \"db\"\n    return binaryString\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp0h8t8ir7/tmp0h8t8ir7.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5080b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab507da9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab507da9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab507da87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0h8t8ir7                        0x0000561143678492 <unavailable> + 5266

    5    libc.so.6                          0x00002ab50829e460 __libc_start_main +
    245

    6    tmp0h8t8ir7                        0x00005611436780f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary: String = \"\"\n    var remainder: Int = 0\n    var remainder2:\
    \ Int = 0\n    var remainder3: Int = 0\n    var remainder4: Int = 0\n    var remainder5:\
    \ Int = 0\n    var remainder6: Int = 0\n    var remainder7: Int = 0\n    var remainder8:\
    \ Int = 0\n    var remainder9: Int = 0\n    var remainder10: Int = 0\n    var\
    \ remainder11: Int = 0\n    var remainder12: Int = 0\n    var remainder13: Int\
    \ = 0\n    var remainder14: Int = 0\n    var remainder15: Int = 0\n    var remainder16:\
    \ Int = 0\n    var remainder17: Int = 0\n    var remainder18: Int = 0\n    var\
    \ remainder19: Int = 0\n    var remainder20: Int = 0\n    var remainder21: Int\
    \ = 0\n    var remainder22: Int = 0\n    var remainder23: Int = 0\n    var remainder24:\
    \ Int = 0\n    var remainder25: Int = 0\n    var remainder26: Int = 0\n    var\
    \ remainder27: Int = 0\n    var remainder28: Int = 0\n    var remainder29: Int\
    \ = 0\n    var remainder30: Int = 0\n    var remainder31: Int = 0\n    var remainder32:\
    \ Int = 0\n    var remainder33: Int = 0\n    var remainder34: Int = 0\n    var\
    \ remainder35: Int = 0\n    var remainder36: Int = 0\n    var remainder37: Int\
    \ = 0\n    var remainder38: Int = 0\n    var remainder39: Int = 0\n    var remainder40:\
    \ Int = 0\n    var remainder41: Int = 0\n    var remainder42: Int = 0\n    var\
    \ remainder43: Int = 0\n    var remainder44: Int = 0\n    var remainder45: Int\
    \ = 0\n    var remainder46: Int = 0\n    var remainder47: Int = 0\n    var remainder48:\
    \ Int = 0\n    var remainder49: Int = 0\n    var remainder50: Int = 0\n    var\
    \ remainder51: Int = 0\n    var remainder52: Int = 0\n    var remainder53: Int\
    \ = 0\n    var remainder54: Int = 0\n    var remainder55: Int = 0\n    var remainder56:\
    \ Int = 0\n    var remainder57: Int = 0\n    var remainder58: Int = 0\n    var\
    \ remainder59: Int = 0\n    var remainder60: Int = 0\n    var remainder61: Int\
    \ = 0\n    var remainder62: Int = 0\n    var remainder63: Int = 0\n    var remainder64:\
    \ Int = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: SyntaxError
  stderr: "/tmp/tmpzcpsh_m_.swift:9:9: warning: variable 'binary' was never used;\
    \ consider replacing with '_' or removing it\n    var binary: String = \"\"\n\
    \        ^~~~~~\n        _\n/tmp/tmpzcpsh_m_.swift:10:9: warning: variable 'remainder'\
    \ was never used; consider replacing with '_' or removing it\n    var remainder:\
    \ Int = 0\n        ^~~~~~~~~\n        _\n/tmp/tmpzcpsh_m_.swift:11:9: warning:\
    \ variable 'remainder2' was never used; consider replacing with '_' or removing\
    \ it\n    var remainder2: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpzcpsh_m_.swift:12:9:\
    \ warning: variable 'remainder3' was never used; consider replacing with '_' or\
    \ removing it\n    var remainder3: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpzcpsh_m_.swift:13:9:\
    \ warning: variable 'remainder4' was never used; consider replacing with '_' or\
    \ removing it\n    var remainder4: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpzcpsh_m_.swift:14:9:\
    \ warning: variable 'remainder5' was never used; consider replacing with '_' or\
    \ removing it\n    var remainder5: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpzcpsh_m_.swift:15:9:\
    \ warning: variable 'remainder6' was never used; consider replacing with '_' or\
    \ removing it\n    var remainder6: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpzcpsh_m_.swift:16:9:\
    \ warning: variable 'remainder7' was never used; consider replacing with '_' or\
    \ removing it\n    var remainder7: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpzcpsh_m_.swift:17:9:\
    \ warning: variable 'remainder8' was never used; consider replacing with '_' or\
    \ removing it\n    var remainder8: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpzcpsh_m_.swift:18:9:\
    \ warning: variable 'remainder9' was never used; consider replacing with '_' or\
    \ removing it\n    var remainder9: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpzcpsh_m_.swift:19:9:\
    \ warning: variable 'remainder10' was never used; consider replacing with '_'\
    \ or removing it\n    var remainder10: Int = 0\n        ^~~~~~~~~~~\n        _\n\
    /tmp/tmpzcpsh_m_.swift:20:9: warning: variable 'remainder11' was never used; consider\
    \ replacing with '_' or removing it\n "
  stdout: ''
  timestamp: 1660014036
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder, remainder = remainder / 2, remainder % 2\n       \
    \ binaryString = String(remainder) + binaryString\n    }\n    return binaryString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp1xd09tfm.swift:12:18: error: consecutive statements on a line must\
    \ be separated by ';'\n        remainder, remainder = remainder / 2, remainder\
    \ % 2\n                 ^\n                 ;\n/tmp/tmp1xd09tfm.swift:12:18: error:\
    \ expected expression\n        remainder, remainder = remainder / 2, remainder\
    \ % 2\n                 ^\n/tmp/tmp1xd09tfm.swift:12:9: warning: variable is unused\n\
    \        remainder, remainder = remainder / 2, remainder % 2\n        ^~~~~~~~~\n\
    /tmp/tmp1xd09tfm.swift:9:9: warning: variable 'binaryString' was never mutated;\
    \ consider changing to 'let' constant\n    var binaryString = \"\"\n    ~~~ ^\n\
    \    let\n/tmp/tmp1xd09tfm.swift:10:9: warning: variable 'remainder' was never\
    \ mutated; consider changing to 'let' constant\n    var remainder = decimal\n\
    \    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjgvpaxv2/tmpjgvpaxv2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac12e859c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac12e550b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac12e550988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac12e54f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjgvpaxv2                        0x000055b152323492 <unavailable> + 5266

    5    libc.so.6                          0x00002ac12ea45460 __libc_start_main +
    245

    6    tmpjgvpaxv2                        0x000055b1523230f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjgvpaxv2/tmpjgvpaxv2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac12e859c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac12e550b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac12e550988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac12e54f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjgvpaxv2                        0x000055b152323492 <unavailable> + 5266

    5    libc.so.6                          0x00002ac12ea45460 __libc_start_main +
    245

    6    tmpjgvpaxv2                        0x000055b1523230f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    binaryString =\
    \ binaryString + \"db\"\n    return binaryString\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp0h8t8ir7/tmp0h8t8ir7.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5080b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab507da9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab507da9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab507da87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0h8t8ir7                        0x0000561143678492 <unavailable> + 5266

    5    libc.so.6                          0x00002ab50829e460 __libc_start_main +
    245

    6    tmp0h8t8ir7                        0x00005611436780f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    var remainder2\
    \ = decimal\n    while remainder > 0 {\n        remainder2 = remainder % 2\n \
    \       remainder = remainder / 2\n        binaryString = String(remainder2) +\
    \ binaryString\n    }\n    return binaryString\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpv703yd84/tmpv703yd84.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad68faf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad68f7e7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad68f7e7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad68f7e67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv703yd84                        0x000055ed0a69a492 <unavailable> + 5266

    5    libc.so.6                          0x00002ad68fcdc460 __libc_start_main +
    245

    6    tmpv703yd84                        0x000055ed0a69a0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjgvpaxv2/tmpjgvpaxv2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac12e859c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac12e550b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac12e550988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac12e54f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjgvpaxv2                        0x000055b152323492 <unavailable> + 5266

    5    libc.so.6                          0x00002ac12ea45460 __libc_start_main +
    245

    6    tmpjgvpaxv2                        0x000055b1523230f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpf8g4mdz4/tmpf8g4mdz4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c33b6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c33865b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c33865988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c338647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf8g4mdz4                        0x000055a541964492 <unavailable> + 5266

    5    libc.so.6                          0x00002b2c33d5a460 __libc_start_main +
    245

    6    tmpf8g4mdz4                        0x000055a5419640f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var decimalString = \"\"\n    var decimalStringLength\
    \ = String(decimal).characters.count\n    var binaryStringLength = String(decimal).characters.count\n\
    \    var decimalStringIndex = 0\n    var binaryStringIndex = 0\n    var decimalStringChar\
    \ = String(decimal).characters[decimalStringIndex]\n    var binaryStringChar =\
    \ String(decimal).characters[binaryStringIndex]\n    var decimalStringCharInt\
    \ = 0\n    var binaryStringCharInt = 0\n    var decimalStringCharIntInt = 0\n\
    \    var binaryStringCharIntInt = 0\n    var decimalStringCharIntIntInt = 0\n\
    \    var binaryStringCharIntIntIntInt = 0\n    var decimalStringCharIntIntIntIntInt\
    \ = 0\n    var binaryStringCharIntIntIntIntIntInt = 0\n    var decimalStringCharIntIntIntIntIntIntInt\
    \ = 0\n    var binaryStringCharIntIntIntIntIntIntIntInt = 0\n    var decimalStringCharIntIntIntIntIntIntIntInt\
    \ = 0\n    var binaryStringCharIntIntIntIntIntIntIntIntInt = 0\n    var decimalStringCharIntIntIntIntIntIntIntIntInt\
    \ = 0\n    var binaryStringCharIntIntIntIntIntIntIntIntIntInt = 0\n    var decimalStringCharIntIntIntIntIntIntIntIntInt\
    \ = 0\n    var binaryStringCharIntIntIntIntIntIntIntIntIntInt = 0\n    var decimalStringCharIntIntIntIntIntIntIntIntIntInt\
    \ = 0\n    var binaryStringCharIntIntIntIntIntIntIntIntIntIntInt = 0\n    var\
    \ decimalStringCharIntIntIntIntIntIntIntIntIntInt = 0\n    var binaryStringCharIntIntIntIntIntIntIntIntIntInt\
    \ = 0\n    var decimalStringCharIntIntIntIntIntIntIntIntIntInt = 0\n    var binaryStringCharIntIntIntIntIntIntIntIntIntIntInt\
    \ = 0\n    var decimalStringCharIntIntIntIntIntIntIntIntIntIntInt = 0\n    var\
    \ binaryStringCharIntIntIntIntIntIntIntIntIntIntInt = 0\n    var decimalStringCharIntIntIntIntIntIntIntIntIntIntInt\
    \ = 0\n    var binaryStringCharIntIntIntIntIntIntIntIntIntIntInt = 0\n    var\
    \ decimalStringCharIntIntIntIntIntIntIntIntIntIntInt = 0\n    var binaryStringCharIntIntIntIntIntIntIntIntIntIntInt\
    \ = 0\n    var decimalStringCharIntIntIntIntIntIntIntIntIntIntInt = 0\n    var\
    \ binaryStringCharIntIntIntIntIntIntIntIntIntIntIntInt = 0\n    var decimalStringCharIntIntIntIntIntIntIntIntIntIntInt\
    \ = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: SyntaxError
  stderr: "/tmp/tmpxokula__.swift:11:47: error: 'characters' is unavailable: Please\
    \ use String directly\n    var decimalStringLength = String(decimal).characters.count\n\
    \                                              ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpxokula__.swift:12:46: error: 'characters'\
    \ is unavailable: Please use String directly\n    var binaryStringLength = String(decimal).characters.count\n\
    \                                             ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpxokula__.swift:15:29: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \    var decimalStringChar = String(decimal).characters[decimalStringIndex]\n\
    \                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpxokula__.swift:15:45:\
    \ error: 'characters' is unavailable: Please use String directly\n    var decimalStringChar\
    \ = String(decimal).characters[decimalStringIndex]\n                         \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpxokula__.swift:16:28: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var binaryStringChar\
    \ = String(decimal).characters[binaryStringIndex]\n                          \
    \ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpxokula__.swift:16:44: error: 'characters'\
    \ is unavailable: Please use String directly\n    var binaryStringChar = String(decimal).characters[binaryStri"
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpf8g4mdz4/tmpf8g4mdz4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c33b6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c33865b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c33865988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c338647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf8g4mdz4                        0x000055a541964492 <unavailable> + 5266

    5    libc.so.6                          0x00002b2c33d5a460 __libc_start_main +
    245

    6    tmpf8g4mdz4                        0x000055a5419640f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    binaryString =\
    \ binaryString + \"db\"\n    return binaryString\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp0h8t8ir7/tmp0h8t8ir7.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5080b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab507da9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab507da9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab507da87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0h8t8ir7                        0x0000561143678492 <unavailable> + 5266

    5    libc.so.6                          0x00002ab50829e460 __libc_start_main +
    245

    6    tmp0h8t8ir7                        0x00005611436780f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder, remainder = remainder / 2, remainder % 2\n       \
    \ binaryString = String(remainder) + binaryString\n    }\n    return binaryString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp1xd09tfm.swift:12:18: error: consecutive statements on a line must\
    \ be separated by ';'\n        remainder, remainder = remainder / 2, remainder\
    \ % 2\n                 ^\n                 ;\n/tmp/tmp1xd09tfm.swift:12:18: error:\
    \ expected expression\n        remainder, remainder = remainder / 2, remainder\
    \ % 2\n                 ^\n/tmp/tmp1xd09tfm.swift:12:9: warning: variable is unused\n\
    \        remainder, remainder = remainder / 2, remainder % 2\n        ^~~~~~~~~\n\
    /tmp/tmp1xd09tfm.swift:9:9: warning: variable 'binaryString' was never mutated;\
    \ consider changing to 'let' constant\n    var binaryString = \"\"\n    ~~~ ^\n\
    \    let\n/tmp/tmp1xd09tfm.swift:10:9: warning: variable 'remainder' was never\
    \ mutated; consider changing to 'let' constant\n    var remainder = decimal\n\
    \    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjgvpaxv2/tmpjgvpaxv2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac12e859c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac12e550b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac12e550988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac12e54f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjgvpaxv2                        0x000055b152323492 <unavailable> + 5266

    5    libc.so.6                          0x00002ac12ea45460 __libc_start_main +
    245

    6    tmpjgvpaxv2                        0x000055b1523230f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder, remainder = remainder / 2, remainder % 2\n       \
    \ binaryString = String(remainder) + binaryString\n    }\n    return binaryString\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: SyntaxError
  stderr: "/tmp/tmplzb9k9zv.swift:12:18: error: consecutive statements on a line must\
    \ be separated by ';'\n        remainder, remainder = remainder / 2, remainder\
    \ % 2\n                 ^\n                 ;\n/tmp/tmplzb9k9zv.swift:12:18: error:\
    \ expected expression\n        remainder, remainder = remainder / 2, remainder\
    \ % 2\n                 ^\n/tmp/tmplzb9k9zv.swift:12:9: warning: variable is unused\n\
    \        remainder, remainder = remainder / 2, remainder % 2\n        ^~~~~~~~~\n\
    /tmp/tmplzb9k9zv.swift:9:9: warning: variable 'binaryString' was never mutated;\
    \ consider changing to 'let' constant\n    var binaryString = \"\"\n    ~~~ ^\n\
    \    let\n/tmp/tmplzb9k9zv.swift:10:9: warning: variable 'remainder' was never\
    \ mutated; consider changing to 'let' constant\n    var remainder = decimal\n\
    \    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpf8g4mdz4/tmpf8g4mdz4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c33b6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c33865b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c33865988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c338647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf8g4mdz4                        0x000055a541964492 <unavailable> + 5266

    5    libc.so.6                          0x00002b2c33d5a460 __libc_start_main +
    245

    6    tmpf8g4mdz4                        0x000055a5419640f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    binaryString =\
    \ String(decimal) + binaryString\n    return binaryString\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpiihhelar/tmpiihhelar.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84294c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84291c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84291c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84291bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiihhelar                        0x000055895788b492 <unavailable> + 5266

    5    libc.so.6                          0x00002b84296b5460 __libc_start_main +
    245

    6    tmpiihhelar                        0x000055895788b0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var decimalString = \"\"\n    var remainder:\
    \ Int = 0\n    var remainderString = \"\"\n    var binaryStringIndex = 0\n   \
    \ var decimalStringIndex = 0\n    var remainderStringIndex = 0\n    var binaryStringIndex2\
    \ = 0\n    var decimalStringIndex2 = 0\n    var remainderStringIndex2 = 0\n  \
    \  while decimal > 0 {\n        remainder = decimal % 2\n        decimal = decimal\
    \ / 2\n        remainderString = String(remainder)\n        remainderStringIndex\
    \ = 0\n        while remainderString != \"0\" && remainderString != \"1\" {\n\
    \            binaryString = String(remainder)\n            binaryStringIndex =\
    \ 0\n            while binaryString != \"0\" && binaryString != \"1\" {\n    \
    \            binaryString = String(remainder)\n                binaryStringIndex\
    \ += 1\n            }\n            binaryStringIndex2 += 1\n        }\n      \
    \  decimalString = String(decimal)\n        decimalStringIndex = 0\n        while\
    \ decimalString != \"0\" && decimalString != \"1\" {\n            decimalString\
    \ = String(decimal)\n            decimalStringIndex += 1\n        }\n        remainderStringIndex\
    \ += 1\n    }\n    binaryString = String(binaryStringIndex2)\n    decimalString\
    \ = String(decimalStringIndex2)\n    remainderString = String(remainderStringIndex2)\n\
    \    binaryStringIndex = 0\n    while binaryString != \"0\" && binaryString !=\
    \ \"1\" {\n        binaryString = String(binaryStringIndex)\n        binaryStringIndex\
    \ += 1\n    }\n    decimalStringIndex = 0\n    while decimalString != \"0\" &&\
    \ decimalString != \"1\" {\n        decimalString = String(decimalStringIndex)\n\
    \        decimalStringIndex += 1\n    }\n    remainderStringIndex += 1\n    binaryString\
    \ = String(binaryStringIndex)\n    decimalString = String(decimalStringIndex)\n\
    \    remainderString = String(remainderStringIndex)\n    binaryStringIndex = 0\n\
    \    while binaryString != \"0\" && binaryString != \"1\" {\n        binaryString\
    \ = String(binaryStringIndex)\n        binaryStringIndex += 1\n    }\n    decimalStringIndex\
    \ = 0\n    while decimalString != \"0\" && decimalString != \"1\" {\n        decimalString\
    \ = String(decimalStringIndex)\n        decimalStringIndex += 1\n    }\n    remainderStringIndex\
    \ += 1\n    binaryString = String(binaryStringIndex)\n    decimalString = String(decimalStringIndex)\n\
    \    remainderString = String(remainderStringIndex)\n    binaryStringIndex = 0\n\
    \    while binaryString != \"0\" && binaryString != \"1\" {\n        binaryString\
    \ = String(binaryStringIndex)\n        binaryStringIndex += 1\n    }\n    decimalStringIndex\
    \ = 0\n    while decimalString != \"0\" && decimalString != \"1\" {\n        decimalString\
    \ = String(decimalStringIndex)\n        decimalStringIndex += 1\n    }\n\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpy1rp6myw.swift:21:9: error: cannot assign to value: 'decimal' is\
    \ a 'let' constant\n        decimal = decimal / 2\n        ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    var remainderDecimal\
    \ = decimal\n    while remainder > 0 {\n        remainderDecimal /= 2\n      \
    \  remainder = remainder % 2\n        binaryString += \"0\"\n    }\n    while\
    \ remainderDecimal > 0 {\n        binaryString += \"1\"\n        remainderDecimal\
    \ -= 1\n    }\n    binaryString += \"db\"\n    return binaryString\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpcv9_umaf/tmpcv9_umaf.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aefa8642c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aefa8339b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aefa8339988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aefa83387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcv9_umaf                        0x00005588322113c2 <unavailable> + 5058

    5    libc.so.6                          0x00002aefa882e460 __libc_start_main +
    245

    6    tmpcv9_umaf                        0x0000558832211029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    var remainder2\
    \ = decimal\n    while remainder != 0 {\n        remainder2 = remainder % 2\n\
    \        remainder = remainder / 2\n        binaryString = String(remainder2)\
    \ + binaryString\n    }\n    return binaryString\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpeosc076w/tmpeosc076w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab213ef8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab213befb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab213bef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab213bee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeosc076w                        0x000055b4b3253492 <unavailable> + 5266

    5    libc.so.6                          0x00002ab2140e4460 __libc_start_main +
    245

    6    tmpeosc076w                        0x000055b4b32530f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    var remainderAsString\
    \ = String(remainder)\n    while remainder > 0 {\n        remainder = remainder\
    \ / 2\n        binaryString = String(remainder) + binaryString\n    }\n    binaryString\
    \ = binaryString + remainderAsString\n    binaryString = \"db\" + binaryString\n\
    \    return binaryString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpnsz0b066/tmpnsz0b066.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae3719aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae3716a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae3716a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae3716a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnsz0b066                        0x0000558073c8b492 <unavailable> + 5266

    5    libc.so.6                          0x00002ae371b96460 __libc_start_main +
    245

    6    tmpnsz0b066                        0x0000558073c8b0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpf8g4mdz4/tmpf8g4mdz4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c33b6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c33865b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c33865988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c338647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf8g4mdz4                        0x000055a541964492 <unavailable> + 5266

    5    libc.so.6                          0x00002b2c33d5a460 __libc_start_main +
    245

    6    tmpf8g4mdz4                        0x000055a5419640f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var decimalString = \"\"\n    var remainder\
    \ = 0\n    var decimalRemainder = 0\n    var binaryRemainder = 0\n    var decimalStringLength\
    \ = 0\n    var binaryStringLength = 0\n    var decimalStringLength2 = 0\n    var\
    \ binaryStringLength2 = 0\n    var decimalStringLength3 = 0\n    var binaryStringLength3\
    \ = 0\n    var decimalStringLength4 = 0\n    var binaryStringLength4 = 0\n   \
    \ var decimalStringLength5 = 0\n    var binaryStringLength5 = 0\n    var decimalStringLength6\
    \ = 0\n    var binaryStringLength6 = 0\n    var decimalStringLength7 = 0\n   \
    \ var binaryStringLength7 = 0\n    var decimalStringLength8 = 0\n    var binaryStringLength8\
    \ = 0\n    var decimalStringLength9 = 0\n    var binaryStringLength9 = 0\n   \
    \ var decimalStringLength10 = 0\n    var binaryStringLength10 = 0\n    var decimalStringLength11\
    \ = 0\n    var binaryStringLength11 = 0\n    var decimalStringLength12 = 0\n \
    \   var binaryStringLength12 = 0\n    var decimalStringLength13 = 0\n    var binaryStringLength13\
    \ = 0\n    var decimalStringLength14 = 0\n    var binaryStringLength14 = 0\n \
    \   var decimalStringLength15 = 0\n    var binaryStringLength15 = 0\n    var decimalStringLength16\
    \ = 0\n    var binaryStringLength16 = 0\n    var decimalStringLength17 = 0\n \
    \   var binaryStringLength17 = 0\n    var decimalStringLength18 = 0\n    var binaryStringLength18\
    \ = 0\n    var decimalStringLength19 = 0\n    var binaryStringLength19 = 0\n \
    \   var decimalStringLength20 = 0\n    var binaryStringLength20 = 0\n    var decimalStringLength21\
    \ = 0\n    var binaryStringLength21 = 0\n    var decimalStringLength22 = 0\n \
    \   var binaryStringLength22 = 0\n    var decimalStringLength23 = 0\n    var binaryStringLength23\
    \ = 0\n    var decimalStringLength24 = 0\n    var binaryStringLength24 = 0\n \
    \   var decimalStringLength25 = 0\n    var binaryStringLength25 = 0\n    var decimalStringLength26\
    \ = 0\n    var binaryStringLength26 = 0\n    var decimalStringLength27 = 0\n \
    \   var binaryStringLength27 = 0\n    var decimalStringLength28 = 0\n    var binaryStringLength28\
    \ = 0\n    var decimalStringLength29 = 0\n    var binaryStringLength29 = 0\n \
    \   var decimalStringLength30 = 0\n    var binaryStringLength30 = 0\n    var decimalStringLength31\
    \ = 0\n    var binaryStringLength31 = 0\n    var decimalStringLength32 = 0\n \
    \   var binaryStringLength32 = 0\n    var decimalStringLength33 = 0\n    var binaryStringLength33\
    \ = 0\n    var decimalStringLength34 = 0\n    var binaryStringLength34 = 0\n \
    \   var decimalStringLength35 = 0\n    var binaryStringLength\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: SyntaxError
  stderr: "/tmp/tmp59gaxrmx.swift:83:9: error: type annotation missing in pattern\n\
    \    var binaryStringLength\n        ^\n"
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpf8g4mdz4/tmpf8g4mdz4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c33b6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c33865b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c33865988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c338647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf8g4mdz4                        0x000055a541964492 <unavailable> + 5266

    5    libc.so.6                          0x00002b2c33d5a460 __libc_start_main +
    245

    6    tmpf8g4mdz4                        0x000055a5419640f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjgvpaxv2/tmpjgvpaxv2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac12e859c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac12e550b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac12e550988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac12e54f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjgvpaxv2                        0x000055b152323492 <unavailable> + 5266

    5    libc.so.6                          0x00002ac12ea45460 __libc_start_main +
    245

    6    tmpjgvpaxv2                        0x000055b1523230f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjgvpaxv2/tmpjgvpaxv2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac12e859c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac12e550b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac12e550988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac12e54f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjgvpaxv2                        0x000055b152323492 <unavailable> + 5266

    5    libc.so.6                          0x00002ac12ea45460 __libc_start_main +
    245

    6    tmpjgvpaxv2                        0x000055b1523230f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder / 2\n        binaryString = String(remainder)\
    \ + String(binaryString)\n    }\n    return binaryString\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpyegmrd_d/tmpyegmrd_d.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5728944c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b572863bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b572863b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b572863a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyegmrd_d                        0x000055ca100d55d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b5728b30460 __libc_start_main +
    245

    6    tmpyegmrd_d                        0x000055ca100d5239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpf8g4mdz4/tmpf8g4mdz4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c33b6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c33865b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c33865988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c338647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf8g4mdz4                        0x000055a541964492 <unavailable> + 5266

    5    libc.so.6                          0x00002b2c33d5a460 __libc_start_main +
    245

    6    tmpf8g4mdz4                        0x000055a5419640f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpf8g4mdz4/tmpf8g4mdz4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c33b6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c33865b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c33865988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c338647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf8g4mdz4                        0x000055a541964492 <unavailable> + 5266

    5    libc.so.6                          0x00002b2c33d5a460 __libc_start_main +
    245

    6    tmpf8g4mdz4                        0x000055a5419640f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary: String = \"\"\n    var remainder: Int = 0\n    var remainder2:\
    \ Int = 0\n    var remainder3: Int = 0\n    var remainder4: Int = 0\n    var remainder5:\
    \ Int = 0\n    var remainder6: Int = 0\n    var remainder7: Int = 0\n    var remainder8:\
    \ Int = 0\n    var remainder9: Int = 0\n    var remainder10: Int = 0\n    var\
    \ remainder11: Int = 0\n    var remainder12: Int = 0\n    var remainder13: Int\
    \ = 0\n    var remainder14: Int = 0\n    var remainder15: Int = 0\n    var remainder16:\
    \ Int = 0\n    var remainder17: Int = 0\n    var remainder18: Int = 0\n    var\
    \ remainder19: Int = 0\n    var remainder20: Int = 0\n    var remainder21: Int\
    \ = 0\n    var remainder22: Int = 0\n    var remainder23: Int = 0\n    var remainder24:\
    \ Int = 0\n    var remainder25: Int = 0\n    var remainder26: Int = 0\n    var\
    \ remainder27: Int = 0\n    var remainder28: Int = 0\n    var remainder29: Int\
    \ = 0\n    var remainder30: Int = 0\n    var remainder31: Int = 0\n    var remainder32:\
    \ Int = 0\n    var remainder33: Int = 0\n    var remainder34: Int = 0\n    var\
    \ remainder35: Int = 0\n    var remainder36: Int = 0\n    var remainder37: Int\
    \ = 0\n    var remainder38: Int = 0\n    var remainder39: Int = 0\n    var remainder40:\
    \ Int = 0\n    var remainder41: Int = 0\n    var remainder42: Int = 0\n    var\
    \ remainder43: Int = 0\n    var remainder44: Int = 0\n    var remainder45: Int\
    \ = 0\n    var remainder46: Int = 0\n    var remainder47: Int = 0\n    var remainder48:\
    \ Int = 0\n    var remainder49: Int = 0\n    var remainder50: Int = 0\n    var\
    \ remainder51: Int = 0\n    var remainder52: Int = 0\n    var remainder53: Int\
    \ = 0\n    var remainder54: Int = 0\n    var remainder55: Int = 0\n    var remainder56:\
    \ Int = 0\n    var remainder57: Int = 0\n    var remainder58: Int = 0\n    var\
    \ remainder59: Int = 0\n    var remainder60: Int = 0\n    var remainder61: Int\
    \ = 0\n    var remainder62: Int = 0\n    var remainder63: Int = 0\n    var remainder64:\
    \ Int = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: SyntaxError
  stderr: "/tmp/tmpzcpsh_m_.swift:9:9: warning: variable 'binary' was never used;\
    \ consider replacing with '_' or removing it\n    var binary: String = \"\"\n\
    \        ^~~~~~\n        _\n/tmp/tmpzcpsh_m_.swift:10:9: warning: variable 'remainder'\
    \ was never used; consider replacing with '_' or removing it\n    var remainder:\
    \ Int = 0\n        ^~~~~~~~~\n        _\n/tmp/tmpzcpsh_m_.swift:11:9: warning:\
    \ variable 'remainder2' was never used; consider replacing with '_' or removing\
    \ it\n    var remainder2: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpzcpsh_m_.swift:12:9:\
    \ warning: variable 'remainder3' was never used; consider replacing with '_' or\
    \ removing it\n    var remainder3: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpzcpsh_m_.swift:13:9:\
    \ warning: variable 'remainder4' was never used; consider replacing with '_' or\
    \ removing it\n    var remainder4: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpzcpsh_m_.swift:14:9:\
    \ warning: variable 'remainder5' was never used; consider replacing with '_' or\
    \ removing it\n    var remainder5: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpzcpsh_m_.swift:15:9:\
    \ warning: variable 'remainder6' was never used; consider replacing with '_' or\
    \ removing it\n    var remainder6: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpzcpsh_m_.swift:16:9:\
    \ warning: variable 'remainder7' was never used; consider replacing with '_' or\
    \ removing it\n    var remainder7: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpzcpsh_m_.swift:17:9:\
    \ warning: variable 'remainder8' was never used; consider replacing with '_' or\
    \ removing it\n    var remainder8: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpzcpsh_m_.swift:18:9:\
    \ warning: variable 'remainder9' was never used; consider replacing with '_' or\
    \ removing it\n    var remainder9: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpzcpsh_m_.swift:19:9:\
    \ warning: variable 'remainder10' was never used; consider replacing with '_'\
    \ or removing it\n    var remainder10: Int = 0\n        ^~~~~~~~~~~\n        _\n\
    /tmp/tmpzcpsh_m_.swift:20:9: warning: variable 'remainder11' was never used; consider\
    \ replacing with '_' or removing it\n "
  stdout: ''
  timestamp: 1660014036
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary: String = \"\"\n    var remainder: Int = 0\n    var remainder2:\
    \ Int = 0\n    var remainder3: Int = 0\n    var remainder4: Int = 0\n    var remainder5:\
    \ Int = 0\n    var remainder6: Int = 0\n    var remainder7: Int = 0\n    var remainder8:\
    \ Int = 0\n    var remainder9: Int = 0\n    var remainder10: Int = 0\n    var\
    \ remainder11: Int = 0\n    var remainder12: Int = 0\n    var remainder13: Int\
    \ = 0\n    var remainder14: Int = 0\n    var remainder15: Int = 0\n    var remainder16:\
    \ Int = 0\n    var remainder17: Int = 0\n    var remainder18: Int = 0\n    var\
    \ remainder19: Int = 0\n    var remainder20: Int = 0\n    var remainder21: Int\
    \ = 0\n    var remainder22: Int = 0\n    var remainder23: Int = 0\n    var remainder24:\
    \ Int = 0\n    var remainder25: Int = 0\n    var remainder26: Int = 0\n    var\
    \ remainder27: Int = 0\n    var remainder28: Int = 0\n    var remainder29: Int\
    \ = 0\n    var remainder30: Int = 0\n    var remainder31: Int = 0\n    var remainder32:\
    \ Int = 0\n    var remainder33: Int = 0\n    var remainder34: Int = 0\n    var\
    \ remainder35: Int = 0\n    var remainder36: Int = 0\n    var remainder37: Int\
    \ = 0\n    var remainder38: Int = 0\n    var remainder39: Int = 0\n    var remainder40:\
    \ Int = 0\n    var remainder41: Int = 0\n    var remainder42: Int = 0\n    var\
    \ remainder43: Int = 0\n    var remainder44: Int = 0\n    var remainder45: Int\
    \ = 0\n    var remainder46: Int = 0\n    var remainder47: Int = 0\n    var remainder48:\
    \ Int = 0\n    var remainder49: Int = 0\n    var remainder50: Int = 0\n    var\
    \ remainder51: Int = 0\n    var remainder52: Int = 0\n    var remainder53: Int\
    \ = 0\n    var remainder54: Int = 0\n    var remainder55: Int = 0\n    var remainder56:\
    \ Int = 0\n    var remainder57: Int = 0\n    var remainder58: Int = 0\n    var\
    \ remainder59: Int = 0\n    var remainder60: Int = 0\n    var remainder61: Int\
    \ = 0\n    var remainder62: Int = 0\n    var remainder63: Int = 0\n    var remainder64:\
    \ Int = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: SyntaxError
  stderr: "/tmp/tmpzcpsh_m_.swift:9:9: warning: variable 'binary' was never used;\
    \ consider replacing with '_' or removing it\n    var binary: String = \"\"\n\
    \        ^~~~~~\n        _\n/tmp/tmpzcpsh_m_.swift:10:9: warning: variable 'remainder'\
    \ was never used; consider replacing with '_' or removing it\n    var remainder:\
    \ Int = 0\n        ^~~~~~~~~\n        _\n/tmp/tmpzcpsh_m_.swift:11:9: warning:\
    \ variable 'remainder2' was never used; consider replacing with '_' or removing\
    \ it\n    var remainder2: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpzcpsh_m_.swift:12:9:\
    \ warning: variable 'remainder3' was never used; consider replacing with '_' or\
    \ removing it\n    var remainder3: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpzcpsh_m_.swift:13:9:\
    \ warning: variable 'remainder4' was never used; consider replacing with '_' or\
    \ removing it\n    var remainder4: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpzcpsh_m_.swift:14:9:\
    \ warning: variable 'remainder5' was never used; consider replacing with '_' or\
    \ removing it\n    var remainder5: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpzcpsh_m_.swift:15:9:\
    \ warning: variable 'remainder6' was never used; consider replacing with '_' or\
    \ removing it\n    var remainder6: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpzcpsh_m_.swift:16:9:\
    \ warning: variable 'remainder7' was never used; consider replacing with '_' or\
    \ removing it\n    var remainder7: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpzcpsh_m_.swift:17:9:\
    \ warning: variable 'remainder8' was never used; consider replacing with '_' or\
    \ removing it\n    var remainder8: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpzcpsh_m_.swift:18:9:\
    \ warning: variable 'remainder9' was never used; consider replacing with '_' or\
    \ removing it\n    var remainder9: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpzcpsh_m_.swift:19:9:\
    \ warning: variable 'remainder10' was never used; consider replacing with '_'\
    \ or removing it\n    var remainder10: Int = 0\n        ^~~~~~~~~~~\n        _\n\
    /tmp/tmpzcpsh_m_.swift:20:9: warning: variable 'remainder11' was never used; consider\
    \ replacing with '_' or removing it\n "
  stdout: ''
  timestamp: 1660014036
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var decimalString = \"\"\n    var decimalDigit\
    \ = 0\n    var binaryDigit = 0\n    var decimalDigitString = \"\"\n    var binaryDigitString\
    \ = \"\"\n    var decimalDigitStringLength = 0\n    var binaryDigitStringLength\
    \ = 0\n    var decimalDigitStringLength2 = 0\n    var binaryDigitStringLength2\
    \ = 0\n    var decimalDigitStringLength3 = 0\n    var binaryDigitStringLength3\
    \ = 0\n    var decimalDigitStringLength4 = 0\n    var binaryDigitStringLength4\
    \ = 0\n    var decimalDigitStringLength5 = 0\n    var binaryDigitStringLength5\
    \ = 0\n    var decimalDigitStringLength6 = 0\n    var binaryDigitStringLength6\
    \ = 0\n    var decimalDigitStringLength7 = 0\n    var binaryDigitStringLength7\
    \ = 0\n    var decimalDigitStringLength8 = 0\n    var binaryDigitStringLength8\
    \ = 0\n    var decimalDigitStringLength9 = 0\n    var binaryDigitStringLength9\
    \ = 0\n    var decimalDigitStringLength10 = 0\n    var binaryDigitStringLength10\
    \ = 0\n    var decimalDigitStringLength11 = 0\n    var binaryDigitStringLength11\
    \ = 0\n    var decimalDigitStringLength12 = 0\n    var binaryDigitStringLength12\
    \ = 0\n    var decimalDigitStringLength13 = 0\n    var binaryDigitStringLength13\
    \ = 0\n    var decimalDigitStringLength14 = 0\n    var binaryDigitStringLength14\
    \ = 0\n    var decimalDigitStringLength15 = 0\n    var binaryDigitStringLength15\
    \ = 0\n    var decimalDigitStringLength16 = 0\n    var binaryDigitStringLength16\
    \ = 0\n    var decimalDigitStringLength17 = 0\n    var binaryDigitStringLength17\
    \ = 0\n    var decimalDigitStringLength18 = 0\n    var binaryDigitStringLength18\
    \ = 0\n    var decimalDigitStringLength19 = 0\n    var binaryDigitStringLength19\
    \ = 0\n    var decimalDigitStringLength20 = 0\n    var binaryDigitStringLength20\
    \ = 0\n    var decimalDigitStringLength21 = 0\n    var binaryDigitStringLength21\
    \ = 0\n    var decimalDigitStringLength22 = 0\n    var binaryDigitStringLength22\
    \ = 0\n    var decimalDigitStringLength23 = 0\n    var binaryDigitStringLength23\
    \ = 0\n    var decimalDigitStringLength24 = 0\n    var binaryDigitStringLength24\
    \ = 0\n    var decimalDigitStringLength25 = 0\n    var binaryDigitStringLength25\
    \ = 0\n    var decimalDigitStringLength26 = 0\n    var binaryDigitStringLength26\
    \ = 0\n    var decimalDigitStringLength27 = 0\n    var binaryDigitStringLength27\
    \ = 0\n    var decimalDigitStringLength28 = 0\n    var binaryDigitStringLength28\
    \ = 0\n    var decimalDigitStringLength29 = 0\n    var binaryDigitStringLength29\
    \ = 0\n    var decimalDigitStringLength30 = 0\n    var binaryDigitStringLength30\
    \ = 0\n    var decimal\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: SyntaxError
  stderr: "/tmp/tmpnga6jm00.swift:75:9: error: type annotation missing in pattern\n\
    \    var decimal\n        ^\n"
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    binaryString =\
    \ String(remainder) + binaryString\n    return binaryString\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpci7dnupc/tmpci7dnupc.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2530404c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25300fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b25300fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25300fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpci7dnupc                        0x000055c01fbb8492 <unavailable> + 5266

    5    libc.so.6                          0x00002b25305f0460 __libc_start_main +
    245

    6    tmpci7dnupc                        0x000055c01fbb80f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpf8g4mdz4/tmpf8g4mdz4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c33b6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c33865b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c33865988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c338647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf8g4mdz4                        0x000055a541964492 <unavailable> + 5266

    5    libc.so.6                          0x00002b2c33d5a460 __libc_start_main +
    245

    6    tmpf8g4mdz4                        0x000055a5419640f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    binaryString =\
    \ \"db\" + binaryString\n    return binaryString\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpm_hv_cw1/tmpm_hv_cw1.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b932a23dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9329f34b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9329f34988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9329f337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm_hv_cw1                        0x000055f48f933492 <unavailable> + 5266

    5    libc.so.6                          0x00002b932a429460 __libc_start_main +
    245

    6    tmpm_hv_cw1                        0x000055f48f9330f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpf8g4mdz4/tmpf8g4mdz4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c33b6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c33865b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c33865988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c338647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf8g4mdz4                        0x000055a541964492 <unavailable> + 5266

    5    libc.so.6                          0x00002b2c33d5a460 __libc_start_main +
    245

    6    tmpf8g4mdz4                        0x000055a5419640f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder / 2\n        binaryString = String(remainder)\
    \ + binaryString\n    }\n    binaryString = binaryString.reversed()\n    binaryString\
    \ = \"db\" + binaryString\n    return binaryString\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: SyntaxError
  stderr: "/tmp/tmpipm_k9uu.swift:15:33: error: no 'reversed' candidates produce the\
    \ expected contextual result type 'String'\n    binaryString = binaryString.reversed()\n\
    \                                ^\nSwift.Sequence:2:40: note: 'reversed()' produces\
    \ '[String.Element]' (aka 'Array<Character>'), not the expected contextual result\
    \ type 'String'\n    @inlinable public __consuming func reversed() -> [Self.Element]\n\
    \                                       ^\nSwift.BidirectionalCollection:2:40:\
    \ note: 'reversed()' produces 'ReversedCollection<String>', not the expected contextual\
    \ result type 'String'\n    @inlinable public __consuming func reversed() -> ReversedCollection<Self>\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1660014036
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder, remainder = remainder / 2, remainder % 2\n       \
    \ binaryString = String(remainder) + binaryString\n    }\n    return binaryString.reverse()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp3xitc9pd.swift:12:18: error: consecutive statements on a line must\
    \ be separated by ';'\n        remainder, remainder = remainder / 2, remainder\
    \ % 2\n                 ^\n                 ;\n/tmp/tmp3xitc9pd.swift:12:18: error:\
    \ expected expression\n        remainder, remainder = remainder / 2, remainder\
    \ % 2\n                 ^\n/tmp/tmp3xitc9pd.swift:12:9: warning: variable is unused\n\
    \        remainder, remainder = remainder / 2, remainder % 2\n        ^~~~~~~~~\n\
    /tmp/tmp3xitc9pd.swift:15:25: error: value of type 'String' has no member 'reverse'\n\
    \    return binaryString.reverse()\n           ~~~~~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014036
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary: String = \"\"\n    var remainder: Int = 0\n    while decimal\
    \ != 0 {\n        remainder = decimal % 2\n        decimal = decimal / 2\n   \
    \     binary = String(remainder) + binary\n    }\n    return binary + \"db\"\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwsjknmfj.swift:13:9: error: cannot assign to value: 'decimal' is\
    \ a 'let' constant\n        decimal = decimal / 2\n        ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjgvpaxv2/tmpjgvpaxv2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac12e859c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac12e550b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac12e550988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac12e54f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjgvpaxv2                        0x000055b152323492 <unavailable> + 5266

    5    libc.so.6                          0x00002ac12ea45460 __libc_start_main +
    245

    6    tmpjgvpaxv2                        0x000055b1523230f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjgvpaxv2/tmpjgvpaxv2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac12e859c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac12e550b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac12e550988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac12e54f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjgvpaxv2                        0x000055b152323492 <unavailable> + 5266

    5    libc.so.6                          0x00002ac12ea45460 __libc_start_main +
    245

    6    tmpjgvpaxv2                        0x000055b1523230f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjgvpaxv2/tmpjgvpaxv2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac12e859c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac12e550b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac12e550988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac12e54f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjgvpaxv2                        0x000055b152323492 <unavailable> + 5266

    5    libc.so.6                          0x00002ac12ea45460 __libc_start_main +
    245

    6    tmpjgvpaxv2                        0x000055b1523230f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjgvpaxv2/tmpjgvpaxv2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac12e859c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac12e550b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac12e550988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac12e54f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjgvpaxv2                        0x000055b152323492 <unavailable> + 5266

    5    libc.so.6                          0x00002ac12ea45460 __libc_start_main +
    245

    6    tmpjgvpaxv2                        0x000055b1523230f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjgvpaxv2/tmpjgvpaxv2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac12e859c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac12e550b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac12e550988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac12e54f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjgvpaxv2                        0x000055b152323492 <unavailable> + 5266

    5    libc.so.6                          0x00002ac12ea45460 __libc_start_main +
    245

    6    tmpjgvpaxv2                        0x000055b1523230f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    var remainderAsString\
    \ = String(remainder)\n    while remainder > 0 {\n        remainder = remainder\
    \ / 2\n        binaryString = String(remainder) + binaryString\n    }\n    return\
    \ binaryString + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpoxwa17b5/tmpoxwa17b5.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b559232fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5592026b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5592026988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55920257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoxwa17b5                        0x000055c6101b2492 <unavailable> + 5266

    5    libc.so.6                          0x00002b559251b460 __libc_start_main +
    245

    6    tmpoxwa17b5                        0x000055c6101b20f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var decimalString = String(decimal)\n    var\
    \ decimalLength = decimalString.length\n    var binaryLength = decimalLength *\
    \ 2\n    var binaryStringLength = binaryLength + 2\n    var remainder = decimalString.remainder(dividingBy:\
    \ 2)\n    var remainderString = String(remainder)\n    var remainderLength = remainderString.length\n\
    \    var binaryStringLength = binaryStringLength + remainderLength\n    var remainderStringLength\
    \ = remainderString.length\n    var binaryStringLength = binaryStringLength +\
    \ remainderStringLength\n    var remainderStringLength = remainderString.length\n\
    \    var binaryStringLength = binaryStringLength + remainderStringLength\n   \
    \ var remainderStringLength = remainderString.length\n    var binaryStringLength\
    \ = binaryStringLength + remainderStringLength\n    var remainderStringLength\
    \ = remainderString.length\n    var binaryStringLength = binaryStringLength +\
    \ remainderStringLength\n    var remainderStringLength = remainderString.length\n\
    \    var binaryStringLength = binaryStringLength + remainderStringLength\n   \
    \ var remainderStringLength = remainderString.length\n    var binaryStringLength\
    \ = binaryStringLength + remainderStringLength\n    var remainderStringLength\
    \ = remainderString.length\n    var binaryStringLength = binaryStringLength +\
    \ remainderStringLength\n    var remainderStringLength = remainderString.length\n\
    \    var binaryStringLength = binaryStringLength + remainderStringLength\n   \
    \ var remainderStringLength = remainderString.length\n    var binaryStringLength\
    \ = binaryStringLength + remainderStringLength\n    var remainderStringLength\
    \ = remainderString.length\n    var binaryStringLength = binaryStringLength +\
    \ remainderStringLength\n    var remainderStringLength = remainderString.length\n\
    \    var binaryStringLength = binaryStringLength + remainderStringLength\n   \
    \ var remainderStringLength = remainderString.length\n    var binaryStringLength\
    \ = binaryStringLength + remainderStringLength\n    var remainderStringLength\
    \ = remainderString.length\n    var binaryStringLength = binaryStringLength +\
    \ remainderStringLength\n    var remainderStringLength = remainderString.length\n\
    \    var binaryStringLength = binaryStringLength + remainderStringLength\n   \
    \ var remainderStringLength = remainderString.length\n    var binaryStringLength\
    \ = binaryStringLength + remainderStringLength\n    var remainderStringLength\
    \ = remainderString.length\n    var binaryStringLength = binaryStringLength +\
    \ remainderStringLength\n    var remainderStringLength = remainderString.length\n\
    \    var binaryStringLength = binaryStringLength + remainderStringLength\n   \
    \ var remainderStringLength = remainderString.length\n    var binaryStringLength\
    \ = binaryStringLength + remainderStringLength\n    var remainderStringLength\
    \ = remainderString.length\n    var binaryStringLength = binaryStringLength +\
    \ remain\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: SyntaxError
  stderr: "/tmp/tmpns0jhp_t.swift:11:39: error: value of type 'String' has no member\
    \ 'length'\n    var decimalLength = decimalString.length\n                   \
    \     ~~~~~~~~~~~~~ ^~~~~~\n/tmp/tmpns0jhp_t.swift:14:35: error: value of type\
    \ 'String' has no member 'remainder'\n    var remainder = decimalString.remainder(dividingBy:\
    \ 2)\n                    ~~~~~~~~~~~~~ ^~~~~~~~~\n/tmp/tmpns0jhp_t.swift:55:51:\
    \ error: cannot find 'remain' in scope\n    var binaryStringLength = binaryStringLength\
    \ + remain\n                                                  ^~~~~~\n"
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjgvpaxv2/tmpjgvpaxv2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac12e859c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac12e550b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac12e550988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac12e54f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjgvpaxv2                        0x000055b152323492 <unavailable> + 5266

    5    libc.so.6                          0x00002ac12ea45460 __libc_start_main +
    245

    6    tmpjgvpaxv2                        0x000055b1523230f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjgvpaxv2/tmpjgvpaxv2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac12e859c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac12e550b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac12e550988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac12e54f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjgvpaxv2                        0x000055b152323492 <unavailable> + 5266

    5    libc.so.6                          0x00002ac12ea45460 __libc_start_main +
    245

    6    tmpjgvpaxv2                        0x000055b1523230f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var decimalString = \"\"\n    var remainder:\
    \ Int = 0\n    var remainderString = \"\"\n    var decimalStringLength = String(decimal).characters.count\n\
    \    var remainderStringLength = String(remainder).characters.count\n    \n  \
    \  if decimalStringLength > remainderStringLength {\n        remainderString =\
    \ String(decimal).substringToIndex(decimalStringLength - remainderStringLength)\n\
    \    } else {\n        remainderString = String(decimal).substringFromIndex(decimalStringLength\
    \ - remainderStringLength)\n    }\n    \n    for _ in 0..<decimalStringLength\
    \ {\n        remainder = decimal * 2\n        remainderString = String(remainder).substringToIndex(remainderString.characters.count)\n\
    \        binaryString += remainderString\n        decimalString += remainder\n\
    \    }\n    \n    binaryString += remainderString\n    \n    return binaryString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp1mobioea.swift:13:47: error: 'characters' is unavailable: Please\
    \ use String directly\n    var decimalStringLength = String(decimal).characters.count\n\
    \                                              ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp1mobioea.swift:14:51: error: 'characters'\
    \ is unavailable: Please use String directly\n    var remainderStringLength =\
    \ String(remainder).characters.count\n                                       \
    \           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmp1mobioea.swift:17:43: error: value of type 'String' has no member 'substringToIndex'\n\
    \        remainderString = String(decimal).substringToIndex(decimalStringLength\
    \ - remainderStringLength)\n                          ~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~\n\
    /tmp/tmp1mobioea.swift:19:43: error: value of type 'String' has no member 'substringFromIndex'\n\
    \        remainderString = String(decimal).substringFromIndex(decimalStringLength\
    \ - remainderStringLength)\n                          ~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp1mobioea.swift:24:45: error: value of type 'String' has no member 'substringToIndex'\n\
    \        remainderString = String(remainder).substringToIndex(remainderString.characters.count)\n\
    \                          ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmp1mobioea.swift:26:26:\
    \ error: cannot convert value of type 'Int' to expected argument type 'String'\n\
    \        decimalString += remainder\n                         ^\n"
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    binaryString =\
    \ \"db\" + binaryString\n    return binaryString\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpm_hv_cw1/tmpm_hv_cw1.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b932a23dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9329f34b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9329f34988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9329f337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm_hv_cw1                        0x000055f48f933492 <unavailable> + 5266

    5    libc.so.6                          0x00002b932a429460 __libc_start_main +
    245

    6    tmpm_hv_cw1                        0x000055f48f9330f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    var remainderInt\
    \ = remainder\n    while remainderInt > 0 {\n        remainderInt /= 2\n     \
    \   binaryString += \"0\"\n    }\n    while remainderInt > 0 {\n        remainderInt\
    \ /= 2\n        binaryString += \"1\"\n    }\n    binaryString += \"db\"\n   \
    \ return binaryString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpenk1gaia/tmpenk1gaia.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f5092ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f50621b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f50621988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f506207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpenk1gaia                        0x0000559e9025f3c2 <unavailable> + 5058

    5    libc.so.6                          0x00002b2f50b16460 __libc_start_main +
    245

    6    tmpenk1gaia                        0x0000559e9025f029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        binaryString = String(remainder % 2) + binaryString\n       \
    \ remainder = Int(remainder / 2)\n    }\n    binaryString = String(remainder)\
    \ + binaryString\n    return binaryString\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpon860egd/tmpon860egd.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b376fe3dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b376fb34b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b376fb34988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b376fb337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpon860egd                        0x00005615d8de45c2 <unavailable> + 5570

    5    libc.so.6                          0x00002b3770029460 __libc_start_main +
    245

    6    tmpon860egd                        0x00005615d8de4229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    binaryString =\
    \ binaryString + \"db\"\n    return binaryString\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp0h8t8ir7/tmp0h8t8ir7.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5080b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab507da9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab507da9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab507da87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0h8t8ir7                        0x0000561143678492 <unavailable> + 5266

    5    libc.so.6                          0x00002ab50829e460 __libc_start_main +
    245

    6    tmp0h8t8ir7                        0x00005611436780f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    binaryString =\
    \ String(remainder) + binaryString\n    binaryString = \"db\" + binaryString\n\
    \    return binaryString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp5cqm3kct/tmp5cqm3kct.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7eb10b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7eb0dacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7eb0dac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7eb0dab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5cqm3kct                        0x0000560cedf78492 <unavailable> + 5266

    5    libc.so.6                          0x00002b7eb12a1460 __libc_start_main +
    245

    6    tmp5cqm3kct                        0x0000560cedf780f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder / 2\n        binaryString = String(remainder)\
    \ + binaryString\n    }\n    return binaryString\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp2haro8_u/tmp2haro8_u.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8835f32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8835c29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8835c29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8835c287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2haro8_u                        0x0000561f7ca4f492 <unavailable> + 5266

    5    libc.so.6                          0x00002b883611e460 __libc_start_main +
    245

    6    tmp2haro8_u                        0x0000561f7ca4f0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjgvpaxv2/tmpjgvpaxv2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac12e859c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac12e550b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac12e550988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac12e54f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjgvpaxv2                        0x000055b152323492 <unavailable> + 5266

    5    libc.so.6                          0x00002ac12ea45460 __libc_start_main +
    245

    6    tmpjgvpaxv2                        0x000055b1523230f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjgvpaxv2/tmpjgvpaxv2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac12e859c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac12e550b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac12e550988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac12e54f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjgvpaxv2                        0x000055b152323492 <unavailable> + 5266

    5    libc.so.6                          0x00002ac12ea45460 __libc_start_main +
    245

    6    tmpjgvpaxv2                        0x000055b1523230f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder, remainder = remainder / 2, remainder % 2\n       \
    \ binaryString = String(remainder) + binaryString\n    }\n    return binaryString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp1xd09tfm.swift:12:18: error: consecutive statements on a line must\
    \ be separated by ';'\n        remainder, remainder = remainder / 2, remainder\
    \ % 2\n                 ^\n                 ;\n/tmp/tmp1xd09tfm.swift:12:18: error:\
    \ expected expression\n        remainder, remainder = remainder / 2, remainder\
    \ % 2\n                 ^\n/tmp/tmp1xd09tfm.swift:12:9: warning: variable is unused\n\
    \        remainder, remainder = remainder / 2, remainder % 2\n        ^~~~~~~~~\n\
    /tmp/tmp1xd09tfm.swift:9:9: warning: variable 'binaryString' was never mutated;\
    \ consider changing to 'let' constant\n    var binaryString = \"\"\n    ~~~ ^\n\
    \    let\n/tmp/tmp1xd09tfm.swift:10:9: warning: variable 'remainder' was never\
    \ mutated; consider changing to 'let' constant\n    var remainder = decimal\n\
    \    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660014036
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder, remainder = remainder / 2, remainder % 2\n       \
    \ binaryString = String(remainder) + binaryString\n    }\n    return binaryString\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: SyntaxError
  stderr: "/tmp/tmplzb9k9zv.swift:12:18: error: consecutive statements on a line must\
    \ be separated by ';'\n        remainder, remainder = remainder / 2, remainder\
    \ % 2\n                 ^\n                 ;\n/tmp/tmplzb9k9zv.swift:12:18: error:\
    \ expected expression\n        remainder, remainder = remainder / 2, remainder\
    \ % 2\n                 ^\n/tmp/tmplzb9k9zv.swift:12:9: warning: variable is unused\n\
    \        remainder, remainder = remainder / 2, remainder % 2\n        ^~~~~~~~~\n\
    /tmp/tmplzb9k9zv.swift:9:9: warning: variable 'binaryString' was never mutated;\
    \ consider changing to 'let' constant\n    var binaryString = \"\"\n    ~~~ ^\n\
    \    let\n/tmp/tmplzb9k9zv.swift:10:9: warning: variable 'remainder' was never\
    \ mutated; consider changing to 'let' constant\n    var remainder = decimal\n\
    \    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    binaryString =\
    \ binaryString + \"db\"\n    return binaryString\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp0h8t8ir7/tmp0h8t8ir7.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5080b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab507da9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab507da9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab507da87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0h8t8ir7                        0x0000561143678492 <unavailable> + 5266

    5    libc.so.6                          0x00002ab50829e460 __libc_start_main +
    245

    6    tmp0h8t8ir7                        0x00005611436780f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    binaryString =\
    \ String(remainder) + binaryString\n    return binaryString\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpci7dnupc/tmpci7dnupc.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2530404c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25300fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b25300fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25300fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpci7dnupc                        0x000055c01fbb8492 <unavailable> + 5266

    5    libc.so.6                          0x00002b25305f0460 __libc_start_main +
    245

    6    tmpci7dnupc                        0x000055c01fbb80f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpf8g4mdz4/tmpf8g4mdz4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c33b6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c33865b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c33865988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c338647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf8g4mdz4                        0x000055a541964492 <unavailable> + 5266

    5    libc.so.6                          0x00002b2c33d5a460 __libc_start_main +
    245

    6    tmpf8g4mdz4                        0x000055a5419640f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var decimalString = \"\"\n    var remainder\
    \ = 0\n    var remainderString = \"\"\n    var decimalStringLength = 0\n    var\
    \ decimalStringLengthString = \"\"\n    var decimalStringLengthStringLength =\
    \ \"\"\n    var decimalStringLengthStringLengthString = \"\"\n    var decimalStringLengthStringLengthStringLength\
    \ = \"\"\n    var decimalStringLengthStringLengthStringLengthString = \"\"\n \
    \   var decimalStringLengthStringLengthStringLengthStringLength = \"\"\n    var\
    \ decimalStringLengthStringLengthStringLengthStringLength = \"\"\n    var decimalStringLengthStringLengthStringLengthStringLengthString\
    \ = \"\"\n    var decimalStringLengthStringLengthStringLengthStringLengthStringLength\
    \ = \"\"\n    var decimalStringLengthStringLengthStringLengthStringLengthStringLength\
    \ = \"\"\n    var decimalStringLengthStringLengthStringLengthStringLengthStringLength\
    \ = \"\"\n    var decimalStringLengthStringLengthStringLengthStringLengthStringLengthString\
    \ = \"\"\n    var decimalStringLengthStringLengthStringLengthStringLengthStringLengthString\
    \ = \"\"\n    var decimalStringLengthStringLengthStringLengthStringLengthStringLengthString\
    \ = \"\"\n    var decimalStringLengthStringLengthStringLengthStringLengthStringLengthStringLength\
    \ = \"\"\n    var decimalStringLengthStringLengthStringLengthStringLengthStringLengthStringLength\
    \ = \"\"\n    var decimalStringLengthStringLengthStringLengthStringLengthStringLengthStringLength\
    \ = \"\"\n    var decimalStringLengthStringLengthStringLengthStringLengthStringLengthStringLengthString\
    \ = \"\"\n    var decimalStringLengthStringLengthStringLengthStringLengthStringLengthStringLengthString\
    \ = \"\"\n    var decimalStringLengthStringLengthStringLengthStringLengthStringLengthStringLengthString\
    \ = \"\"\n    var decimalStringLengthStringLengthStringLengthStringLengthStringLengthStringLengthStringLength\
    \ = \"\"\n    var decimalStringLengthStringLengthStringLengthStringLengthStringLengthStringLengthStringLength\
    \ = \"\"\n    var decimalStringLengthStringLengthStringLengthStringLengthStringLengthStringLengthStringLength\
    \ = \"\"\n    var decimalStringLengthStringLengthStringLengthStringLengthStringLengthStringLengthStringLengthString\
    \ = \"\"\n    var decimalStringLengthStringLengthStringLengthStringLengthStringLengthStringLengthStringLengthString\
    \ = \"\"\n    var decimalStringLengthStringLengthStringLengthStringLengthStringLengthStringLengthStringLengthString\
    \ = \"\"\n    var decimalStringLengthStringLengthStringLengthStringLengthStringLengthStringLengthStringLengthString\
    \ = \"\"\n    var decimalStringLengthStringLengthStringLengthStringLengthStringLengthStringLengthStringLengthStringLength\
    \ = \"\"\n    var decimalStringLengthStringLengthStringLengthStringLengthStringLengthStringLengthStringLengthStringLength\
    \ = \"\"\n    var decimalStringLengthStringLengthStringLengthStringLengthStringLengthStringLengthStringLengthStringLength\
    \ = \"\"\n    var decimalStringLengthStringLengthStringLengthStringLengthStringLengthStringLengthStringLengthStringLengthString\
    \ = \"\"\n    var decimalStringLengthStringLength\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: SyntaxError
  stderr: "/tmp/tmpdwwepryt.swift:20:9: error: invalid redeclaration of 'decimalStringLengthStringLengthStringLengthStringLength'\n\
    \    var decimalStringLengthStringLengthStringLengthStringLength = \"\"\n    \
    \    ^\n/tmp/tmpdwwepryt.swift:19:9: note: 'decimalStringLengthStringLengthStringLengthStringLength'\
    \ previously declared here\n    var decimalStringLengthStringLengthStringLengthStringLength\
    \ = \"\"\n        ^\n/tmp/tmpdwwepryt.swift:23:9: error: invalid redeclaration\
    \ of 'decimalStringLengthStringLengthStringLengthStringLengthStringLength'\n \
    \   var decimalStringLengthStringLengthStringLengthStringLengthStringLength =\
    \ \"\"\n        ^\n/tmp/tmpdwwepryt.swift:22:9: note: 'decimalStringLengthStringLengthStringLengthStringLengthStringLength'\
    \ previously declared here\n    var decimalStringLengthStringLengthStringLengthStringLengthStringLength\
    \ = \"\"\n        ^\n/tmp/tmpdwwepryt.swift:24:9: error: invalid redeclaration\
    \ of 'decimalStringLengthStringLengthStringLengthStringLengthStringLength'\n \
    \   var decimalStringLengthStringLengthStringLengthStringLengthStringLength =\
    \ \"\"\n        ^\n/tmp/tmpdwwepryt.swift:22:9: note: 'decimalStringLengthStringLengthStringLengthStringLengthStringLength'\
    \ previously declared here\n    var decimalStringLengthStringLengthStringLengthStringLengthStringLength\
    \ = \"\"\n        ^\n/tmp/tmpdwwepryt.swift:26:9: error: invalid redeclaration\
    \ of 'decimalStringLengthStringLengthStringLengthStringLengthStringLengthString'\n\
    \    var decimalStringLengthStringLengthStringLengthStringLengthStringLengthString\
    \ = \"\"\n        ^\n/tmp/tmpdwwepryt.swift:25:9: note: 'decimalStringLengthStringLengthStringLengthStringLengthStringLengthString'\
    \ previously declared here\n    var decimalStringLengthStringLengthStringLengthStringLengthStringLengthString\
    \ = \"\"\n        ^\n/tmp/tmpdwwepryt.swift:27:9: error: invalid redeclaration\
    \ of 'decimalStringLengthStringLengthStringLengthStringLengthStringLengthString'\n\
    \    var decimalStringLengthStringLengthStringLengthStringLengthStringLengthString\
    \ = \"\"\n        ^\n/tmp/tmpdwwepryt.swift:25:9: note: 'decimalStringLengthStringLengt"
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    binaryString =\
    \ \"db\" + binaryString\n    return binaryString\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpm_hv_cw1/tmpm_hv_cw1.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b932a23dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9329f34b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9329f34988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9329f337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm_hv_cw1                        0x000055f48f933492 <unavailable> + 5266

    5    libc.so.6                          0x00002b932a429460 __libc_start_main +
    245

    6    tmpm_hv_cw1                        0x000055f48f9330f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder, remainder = remainder / 2, remainder % 2\n       \
    \ binaryString = String(remainder) + binaryString\n    }\n    return binaryString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp1xd09tfm.swift:12:18: error: consecutive statements on a line must\
    \ be separated by ';'\n        remainder, remainder = remainder / 2, remainder\
    \ % 2\n                 ^\n                 ;\n/tmp/tmp1xd09tfm.swift:12:18: error:\
    \ expected expression\n        remainder, remainder = remainder / 2, remainder\
    \ % 2\n                 ^\n/tmp/tmp1xd09tfm.swift:12:9: warning: variable is unused\n\
    \        remainder, remainder = remainder / 2, remainder % 2\n        ^~~~~~~~~\n\
    /tmp/tmp1xd09tfm.swift:9:9: warning: variable 'binaryString' was never mutated;\
    \ consider changing to 'let' constant\n    var binaryString = \"\"\n    ~~~ ^\n\
    \    let\n/tmp/tmp1xd09tfm.swift:10:9: warning: variable 'remainder' was never\
    \ mutated; consider changing to 'let' constant\n    var remainder = decimal\n\
    \    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpf8g4mdz4/tmpf8g4mdz4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c33b6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c33865b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c33865988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c338647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf8g4mdz4                        0x000055a541964492 <unavailable> + 5266

    5    libc.so.6                          0x00002b2c33d5a460 __libc_start_main +
    245

    6    tmpf8g4mdz4                        0x000055a5419640f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjgvpaxv2/tmpjgvpaxv2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac12e859c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac12e550b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac12e550988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac12e54f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjgvpaxv2                        0x000055b152323492 <unavailable> + 5266

    5    libc.so.6                          0x00002ac12ea45460 __libc_start_main +
    245

    6    tmpjgvpaxv2                        0x000055b1523230f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpf8g4mdz4/tmpf8g4mdz4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c33b6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c33865b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c33865988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c338647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf8g4mdz4                        0x000055a541964492 <unavailable> + 5266

    5    libc.so.6                          0x00002b2c33d5a460 __libc_start_main +
    245

    6    tmpf8g4mdz4                        0x000055a5419640f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary: String = \"\"\n    var remainder: Int = 0\n    var decimalString:\
    \ String = \"\"\n    \n    if decimal < 0 {\n        decimalString = \"-\" + String(decimal)\n\
    \        decimal = abs(decimal)\n    }\n    \n    for _ in 0..<decimal {\n   \
    \     remainder = decimal % 2\n        decimal = decimal / 2\n        binary =\
    \ String(remainder) + binary\n    }\n    \n    if decimal > 0 {\n        decimalString\
    \ = String(decimal) + decimalString\n    }\n    \n    if decimalString.characters.count\
    \ < 2 {\n        binary = \"db\" + binary\n    }\n    \n    return binary\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpvk9b9f4q.swift:15:9: error: cannot assign to value: 'decimal' is\
    \ a 'let' constant\n        decimal = abs(decimal)\n        ^~~~~~~\n/tmp/tmpvk9b9f4q.swift:20:9:\
    \ error: cannot assign to value: 'decimal' is a 'let' constant\n        decimal\
    \ = decimal / 2\n        ^~~~~~~\n/tmp/tmpvk9b9f4q.swift:28:22: error: 'characters'\
    \ is unavailable: Please use String directly\n    if decimalString.characters.count\
    \ < 2 {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpf8g4mdz4/tmpf8g4mdz4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c33b6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c33865b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c33865988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c338647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf8g4mdz4                        0x000055a541964492 <unavailable> + 5266

    5    libc.so.6                          0x00002b2c33d5a460 __libc_start_main +
    245

    6    tmpf8g4mdz4                        0x000055a5419640f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var decimalString = \"\"\n    var remainder\
    \ = 0\n    var remainderString = \"\"\n    var decimalStringLength = 0\n    var\
    \ binaryStringLength = 0\n    var binaryStringLengthString = \"\"\n    var decimalStringLengthString\
    \ = \"\"\n    var decimalStringLengthStringLength = \"\"\n    var decimalStringLengthStringLengthString\
    \ = \"\"\n    var decimalStringLengthStringLengthStringLength = \"\"\n    var\
    \ decimalStringLengthStringLengthStringLengthString = \"\"\n    var decimalStringLengthStringLengthStringLengthStringLength\
    \ = \"\"\n    var decimalStringLengthStringLengthStringLengthStringLengthString\
    \ = \"\"\n    var decimalStringLengthStringLengthStringLengthStringLengthStringLength\
    \ = \"\"\n    var decimalStringLengthStringLengthStringLengthStringLengthStringLength\
    \ = \"\"\n    var decimalStringLengthStringLengthStringLengthStringLengthStringLengthString\
    \ = \"\"\n    var decimalStringLengthStringLengthStringLengthStringLengthStringLengthString\
    \ = \"\"\n    var decimalStringLengthStringLengthStringLengthStringLengthStringLengthString\
    \ = \"\"\n    var decimalStringLengthStringLengthStringLengthStringLengthStringLengthString\
    \ = \"\"\n    var decimalStringLengthStringLengthStringLengthStringLengthStringLengthStringLength\
    \ = \"\"\n    var decimalStringLengthStringLengthStringLengthStringLengthStringLengthStringLength\
    \ = \"\"\n    var decimalStringLengthStringLengthStringLengthStringLengthStringLengthStringLength\
    \ = \"\"\n    var decimalStringLengthStringLengthStringLengthStringLengthStringLengthStringLengthString\
    \ = \"\"\n    var decimalStringLengthStringLengthStringLengthStringLengthStringLengthStringLength\
    \ = \"\"\n    var decimalStringLengthStringLengthStringLengthStringLengthStringLengthStringLengthString\
    \ = \"\"\n    var decimalStringLengthStringLengthStringLengthStringLengthStringLengthStringLengthString\
    \ = \"\"\n    var decimalStringLengthStringLengthStringLengthStringLengthStringLengthStringLengthString\
    \ = \"\"\n    var decimalStringLengthStringLengthStringLengthStringLengthStringLengthStringLengthString\
    \ = \"\"\n    var decimalStringLengthStringLengthStringLengthStringLengthStringLengthStringLengthStringLength\
    \ = \"\"\n    var decimalStringLengthStringLengthStringLengthStringLengthStringLengthStringLengthStringLength\
    \ = \"\"\n    var decimalStringLengthStringLengthStringLengthStringLengthStringLengthStringLengthStringLength\
    \ = \"\"\n    var decimalStringLengthStringLengthStringLengthStringLengthStringLengthStringLengthStringLength\
    \ = \"\"\n    var decimalStringLengthStringLengthStringLengthStringLengthStringLengthStringLengthStringLengthString\
    \ = \"\"\n    var decimalStringLengthStringLengthStringLengthStringLengthStringLengthStringLengthStringLengthString\
    \ = \"\"\n    var decimalStringLengthStringLengthStringLengthStringLengthStringLengthStringLengthStringLengthString\
    \ = \"\"\n    var decimalStringLengthStringLengthStringLengthStringLengthStringLengthStringLengthStringLengthStringLength\
    \ = \"\"\n    var decimalStringLengthStringLengthStringLengthStringLengthStringLengthStringLengthStringLength\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp29sa2ru_.swift:24:9: error: invalid redeclaration of 'decimalStringLengthStringLengthStringLengthStringLengthStringLength'\n\
    \    var decimalStringLengthStringLengthStringLengthStringLengthStringLength =\
    \ \"\"\n        ^\n/tmp/tmp29sa2ru_.swift:23:9: note: 'decimalStringLengthStringLengthStringLengthStringLengthStringLength'\
    \ previously declared here\n    var decimalStringLengthStringLengthStringLengthStringLengthStringLength\
    \ = \"\"\n        ^\n/tmp/tmp29sa2ru_.swift:26:9: error: invalid redeclaration\
    \ of 'decimalStringLengthStringLengthStringLengthStringLengthStringLengthString'\n\
    \    var decimalStringLengthStringLengthStringLengthStringLengthStringLengthString\
    \ = \"\"\n        ^\n/tmp/tmp29sa2ru_.swift:25:9: note: 'decimalStringLengthStringLengthStringLengthStringLengthStringLengthString'\
    \ previously declared here\n    var decimalStringLengthStringLengthStringLengthStringLengthStringLengthString\
    \ = \"\"\n        ^\n/tmp/tmp29sa2ru_.swift:27:9: error: invalid redeclaration\
    \ of 'decimalStringLengthStringLengthStringLengthStringLengthStringLengthString'\n\
    \    var decimalStringLengthStringLengthStringLengthStringLengthStringLengthString\
    \ = \"\"\n        ^\n/tmp/tmp29sa2ru_.swift:25:9: note: 'decimalStringLengthStringLengthStringLengthStringLengthStringLengthString'\
    \ previously declared here\n    var decimalStringLengthStringLengthStringLengthStringLengthStringLengthString\
    \ = \"\"\n        ^\n/tmp/tmp29sa2ru_.swift:28:9: error: invalid redeclaration\
    \ of 'decimalStringLengthStringLengthStringLengthStringLengthStringLengthString'\n\
    \    var decimalStringLengthStringLengthStringLengthStringLengthStringLengthString\
    \ = \"\"\n        ^\n/tmp/tmp29sa2ru_.swift:25:9: note: 'decimalStringLengthStringLengthStringLengthStringLengthStringLengthString'\
    \ previously declared here\n    var decimalStringLengthStringLengthStringLengthStringLengthStringLengthString\
    \ = \"\"\n        ^\n/tmp/tmp29sa2ru_.swift:30:9: error: invalid redeclaration\
    \ of 'decimalStringLengthStringLengthStringLengthStringLengthStringLengthStringLength'\n\
    \    var decimalStringLengthStringLengthStringLengthStringLeng"
  stdout: ''
  timestamp: 1660014036
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var decimalString = \"\"\n    var remainder\
    \ = 0\n    var decimalDigit = 0\n    var binaryDigit = 0\n    var decimalDigitString\
    \ = \"\"\n    var binaryDigitString = \"\"\n\n    for decimalDigit in 0..<decimal\
    \ {\n        remainder = decimal % 2\n        decimal = decimal / 2\n        decimalDigit\
    \ = decimal % 10\n        decimalString = String(decimalDigit)\n        decimalDigitString\
    \ = String(decimalDigit)\n        binaryDigit = remainder\n        binaryDigitString\
    \ = String(binaryDigit)\n        binaryString = String(binaryDigit) + binaryString\n\
    \    }\n\n    return binaryString + decimalString + decimalDigitString + binaryDigitString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpet_1iwkm.swift:19:9: error: cannot assign to value: 'decimal' is\
    \ a 'let' constant\n        decimal = decimal / 2\n        ^~~~~~~\n/tmp/tmpet_1iwkm.swift:20:9:\
    \ error: cannot assign to value: 'decimalDigit' is a 'let' constant\n        decimalDigit\
    \ = decimal % 10\n        ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014036
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var decimalString = \"\"\n    var decimalDigit\
    \ = 0\n    var binaryDigit = 0\n    var decimalDigitString = \"\"\n    var binaryDigitString\
    \ = \"\"\n    var decimalDigitStringLength = 0\n    var binaryDigitStringLength\
    \ = 0\n    var decimalDigitStringLength2 = 0\n    var binaryDigitStringLength2\
    \ = 0\n    var decimalDigitStringLength3 = 0\n    var binaryDigitStringLength3\
    \ = 0\n    var decimalDigitStringLength4 = 0\n    var binaryDigitStringLength4\
    \ = 0\n    var decimalDigitStringLength5 = 0\n    var binaryDigitStringLength5\
    \ = 0\n    var decimalDigitStringLength6 = 0\n    var binaryDigitStringLength6\
    \ = 0\n    var decimalDigitStringLength7 = 0\n    var binaryDigitStringLength7\
    \ = 0\n    var decimalDigitStringLength8 = 0\n    var binaryDigitStringLength8\
    \ = 0\n    var decimalDigitStringLength9 = 0\n    var binaryDigitStringLength9\
    \ = 0\n    var decimalDigitStringLength10 = 0\n    var binaryDigitStringLength10\
    \ = 0\n    var decimalDigitStringLength11 = 0\n    var binaryDigitStringLength11\
    \ = 0\n    var decimalDigitStringLength12 = 0\n    var binaryDigitStringLength12\
    \ = 0\n    var decimalDigitStringLength13 = 0\n    var binaryDigitStringLength13\
    \ = 0\n    var decimalDigitStringLength14 = 0\n    var binaryDigitStringLength14\
    \ = 0\n    var decimalDigitStringLength15 = 0\n    var binaryDigitStringLength15\
    \ = 0\n    var decimalDigitStringLength16 = 0\n    var binaryDigitStringLength16\
    \ = 0\n    var decimalDigitStringLength17 = 0\n    var binaryDigitStringLength17\
    \ = 0\n    var decimalDigitStringLength18 = 0\n    var binaryDigitStringLength18\
    \ = 0\n    var decimalDigitStringLength19 = 0\n    var binaryDigitStringLength19\
    \ = 0\n    var decimalDigitStringLength20 = 0\n    var binaryDigitStringLength20\
    \ = 0\n    var decimalDigitStringLength21 = 0\n    var binaryDigitStringLength21\
    \ = 0\n    var decimalDigitStringLength22 = 0\n    var binaryDigitStringLength22\
    \ = 0\n    var decimalDigitStringLength23 = 0\n    var binaryDigitStringLength23\
    \ = 0\n    var decimalDigitStringLength24 = 0\n    var binaryDigitStringLength24\
    \ = 0\n    var decimalDigitStringLength25 = 0\n    var binaryDigitStringLength25\
    \ = 0\n    var decimalDigitStringLength26 = 0\n    var binaryDigitStringLength26\
    \ = 0\n    var decimalDigitStringLength27 = 0\n    var binaryDigitStringLength27\
    \ = 0\n    var decimalDigitStringLength28 = 0\n    var binaryDigitStringLength28\
    \ = 0\n    var decimalDigitStringLength29 = 0\n    var binaryDigitStringLength29\
    \ = 0\n    var decimalDigitStringLength30 = 0\n    var binaryDigitStringLength30\
    \ = 0\n    var decimal\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: SyntaxError
  stderr: "/tmp/tmpnga6jm00.swift:75:9: error: type annotation missing in pattern\n\
    \    var decimal\n        ^\n"
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        binaryString = String(remainder % 2) + binaryString\n       \
    \ remainder = Int(remainder / 2)\n    }\n    binaryString = String(remainder)\
    \ + binaryString\n    return binaryString\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpon860egd/tmpon860egd.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b376fe3dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b376fb34b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b376fb34988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b376fb337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpon860egd                        0x00005615d8de45c2 <unavailable> + 5570

    5    libc.so.6                          0x00002b3770029460 __libc_start_main +
    245

    6    tmpon860egd                        0x00005615d8de4229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    binaryString =\
    \ binaryString + \"db\"\n    return binaryString\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp0h8t8ir7/tmp0h8t8ir7.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5080b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab507da9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab507da9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab507da87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0h8t8ir7                        0x0000561143678492 <unavailable> + 5266

    5    libc.so.6                          0x00002ab50829e460 __libc_start_main +
    245

    6    tmp0h8t8ir7                        0x00005611436780f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder, remainder = remainder / 2, remainder % 2\n       \
    \ binaryString = String(remainder) + binaryString\n    }\n    binaryString = binaryString\
    \ + \"db\"\n    return binaryString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: SyntaxError
  stderr: "/tmp/tmpveofazga.swift:12:18: error: consecutive statements on a line must\
    \ be separated by ';'\n        remainder, remainder = remainder / 2, remainder\
    \ % 2\n                 ^\n                 ;\n/tmp/tmpveofazga.swift:12:18: error:\
    \ expected expression\n        remainder, remainder = remainder / 2, remainder\
    \ % 2\n                 ^\n/tmp/tmpveofazga.swift:12:9: warning: variable is unused\n\
    \        remainder, remainder = remainder / 2, remainder % 2\n        ^~~~~~~~~\n\
    /tmp/tmpveofazga.swift:10:9: warning: variable 'remainder' was never mutated;\
    \ consider changing to 'let' constant\n    var remainder = decimal\n    ~~~ ^\n\
    \    let\n"
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + String(binaryString)\n        remainder = remainder / 2\n    }\n    binaryString\
    \ = \"db\" + binaryString\n    return binaryString\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpptnii5n2/tmpptnii5n2.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae14223ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae141f35b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae141f35988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae141f347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpptnii5n2                        0x000055d0ec3775d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ae14242a460 __libc_start_main +
    245

    6    tmpptnii5n2                        0x000055d0ec377239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary: String = \"\"\n    var remainder: Int = 0\n    var remainder2:\
    \ Int = 0\n    var remainder3: Int = 0\n    var remainder4: Int = 0\n    var remainder5:\
    \ Int = 0\n    var remainder6: Int = 0\n    var remainder7: Int = 0\n    var remainder8:\
    \ Int = 0\n    var remainder9: Int = 0\n    var remainder10: Int = 0\n    var\
    \ remainder11: Int = 0\n    var remainder12: Int = 0\n    var remainder13: Int\
    \ = 0\n    var remainder14: Int = 0\n    var remainder15: Int = 0\n    var remainder16:\
    \ Int = 0\n    var remainder17: Int = 0\n    var remainder18: Int = 0\n    var\
    \ remainder19: Int = 0\n    var remainder20: Int = 0\n    var remainder21: Int\
    \ = 0\n    var remainder22: Int = 0\n    var remainder23: Int = 0\n    var remainder24:\
    \ Int = 0\n    var remainder25: Int = 0\n    var remainder26: Int = 0\n    var\
    \ remainder27: Int = 0\n    var remainder28: Int = 0\n    var remainder29: Int\
    \ = 0\n    var remainder30: Int = 0\n    var remainder31: Int = 0\n    var remainder32:\
    \ Int = 0\n    var remainder33: Int = 0\n    var remainder34: Int = 0\n    var\
    \ remainder35: Int = 0\n    var remainder36: Int = 0\n    var remainder37: Int\
    \ = 0\n    var remainder38: Int = 0\n    var remainder39: Int = 0\n    var remainder40:\
    \ Int = 0\n    var remainder41: Int = 0\n    var remainder42: Int = 0\n    var\
    \ remainder43: Int = 0\n    var remainder44: Int = 0\n    var remainder45: Int\
    \ = 0\n    var remainder46: Int = 0\n    var remainder47: Int = 0\n    var remainder48:\
    \ Int = 0\n    var remainder49: Int = 0\n    var remainder50: Int = 0\n    var\
    \ remainder51: Int = 0\n    var remainder52: Int = 0\n    var remainder53: Int\
    \ = 0\n    var remainder54: Int = 0\n    var remainder55: Int = 0\n    var remainder56:\
    \ Int = 0\n    var remainder57: Int = 0\n    var remainder58: Int = 0\n    var\
    \ remainder59: Int = 0\n    var remainder60: Int = 0\n    var remainder61: Int\
    \ = 0\n    var remainder62: Int = 0\n    var remainder63: Int = 0\n    var remainder64:\
    \ Int = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: SyntaxError
  stderr: "/tmp/tmpzcpsh_m_.swift:9:9: warning: variable 'binary' was never used;\
    \ consider replacing with '_' or removing it\n    var binary: String = \"\"\n\
    \        ^~~~~~\n        _\n/tmp/tmpzcpsh_m_.swift:10:9: warning: variable 'remainder'\
    \ was never used; consider replacing with '_' or removing it\n    var remainder:\
    \ Int = 0\n        ^~~~~~~~~\n        _\n/tmp/tmpzcpsh_m_.swift:11:9: warning:\
    \ variable 'remainder2' was never used; consider replacing with '_' or removing\
    \ it\n    var remainder2: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpzcpsh_m_.swift:12:9:\
    \ warning: variable 'remainder3' was never used; consider replacing with '_' or\
    \ removing it\n    var remainder3: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpzcpsh_m_.swift:13:9:\
    \ warning: variable 'remainder4' was never used; consider replacing with '_' or\
    \ removing it\n    var remainder4: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpzcpsh_m_.swift:14:9:\
    \ warning: variable 'remainder5' was never used; consider replacing with '_' or\
    \ removing it\n    var remainder5: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpzcpsh_m_.swift:15:9:\
    \ warning: variable 'remainder6' was never used; consider replacing with '_' or\
    \ removing it\n    var remainder6: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpzcpsh_m_.swift:16:9:\
    \ warning: variable 'remainder7' was never used; consider replacing with '_' or\
    \ removing it\n    var remainder7: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpzcpsh_m_.swift:17:9:\
    \ warning: variable 'remainder8' was never used; consider replacing with '_' or\
    \ removing it\n    var remainder8: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpzcpsh_m_.swift:18:9:\
    \ warning: variable 'remainder9' was never used; consider replacing with '_' or\
    \ removing it\n    var remainder9: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpzcpsh_m_.swift:19:9:\
    \ warning: variable 'remainder10' was never used; consider replacing with '_'\
    \ or removing it\n    var remainder10: Int = 0\n        ^~~~~~~~~~~\n        _\n\
    /tmp/tmpzcpsh_m_.swift:20:9: warning: variable 'remainder11' was never used; consider\
    \ replacing with '_' or removing it\n "
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    var remainder2\
    \ = decimal\n    var remainder3 = decimal\n    while remainder > 0 {\n       \
    \ remainder2 = remainder\n        remainder3 = remainder2\n        remainder =\
    \ remainder3 / 2\n        binaryString = String(remainder) + String(remainder2)\
    \ + String(remainder3) + binaryString\n    }\n    return binaryString\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmp7ungfn0h/tmp7ungfn0h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fd60d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fd5dcdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fd5dcd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fd5dcc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ungfn0h                        0x000056539b0ae492 <unavailable> + 5266

    5    libc.so.6                          0x00002b6fd62c2460 __libc_start_main +
    245

    6    tmp7ungfn0h                        0x000056539b0ae0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    binaryString =\
    \ binaryString + \"db\"\n    return binaryString\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp0h8t8ir7/tmp0h8t8ir7.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5080b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab507da9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab507da9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab507da87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0h8t8ir7                        0x0000561143678492 <unavailable> + 5266

    5    libc.so.6                          0x00002ab50829e460 __libc_start_main +
    245

    6    tmp0h8t8ir7                        0x00005611436780f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    binaryString =\
    \ binaryString + \"db\"\n    return binaryString\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp0h8t8ir7/tmp0h8t8ir7.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5080b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab507da9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab507da9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab507da87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0h8t8ir7                        0x0000561143678492 <unavailable> + 5266

    5    libc.so.6                          0x00002ab50829e460 __libc_start_main +
    245

    6    tmp0h8t8ir7                        0x00005611436780f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjgvpaxv2/tmpjgvpaxv2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac12e859c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac12e550b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac12e550988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac12e54f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjgvpaxv2                        0x000055b152323492 <unavailable> + 5266

    5    libc.so.6                          0x00002ac12ea45460 __libc_start_main +
    245

    6    tmpjgvpaxv2                        0x000055b1523230f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpf8g4mdz4/tmpf8g4mdz4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c33b6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c33865b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c33865988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c338647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf8g4mdz4                        0x000055a541964492 <unavailable> + 5266

    5    libc.so.6                          0x00002b2c33d5a460 __libc_start_main +
    245

    6    tmpf8g4mdz4                        0x000055a5419640f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjgvpaxv2/tmpjgvpaxv2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac12e859c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac12e550b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac12e550988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac12e54f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjgvpaxv2                        0x000055b152323492 <unavailable> + 5266

    5    libc.so.6                          0x00002ac12ea45460 __libc_start_main +
    245

    6    tmpjgvpaxv2                        0x000055b1523230f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjgvpaxv2/tmpjgvpaxv2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac12e859c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac12e550b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac12e550988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac12e54f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjgvpaxv2                        0x000055b152323492 <unavailable> + 5266

    5    libc.so.6                          0x00002ac12ea45460 __libc_start_main +
    245

    6    tmpjgvpaxv2                        0x000055b1523230f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjgvpaxv2/tmpjgvpaxv2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac12e859c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac12e550b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac12e550988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac12e54f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjgvpaxv2                        0x000055b152323492 <unavailable> + 5266

    5    libc.so.6                          0x00002ac12ea45460 __libc_start_main +
    245

    6    tmpjgvpaxv2                        0x000055b1523230f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var decimalString = String(decimal)\n    var\
    \ decimalLength = decimalString.length\n    var binaryLength = 0\n    var binaryDigit\
    \ = 0\n    var binaryString = \"\"\n    var binaryStringLength = 0\n    var binaryStringDigit\
    \ = 0\n    var binaryStringDigitCount = 0\n    var binaryStringDigitCountMax =\
    \ decimalLength / 2\n    var binaryStringDigitCountMin = decimalLength - binaryStringDigitCountMax\n\
    \    var binaryStringDigitCountMinMax = decimalLength - binaryStringDigitCountMin\n\
    \    var binaryStringDigitCountMaxMin = decimalLength - binaryStringDigitCountMax\n\
    \    var binaryStringDigitCountMinMaxMin = decimalLength - binaryStringDigitCountMinMax\n\
    \    var binaryStringDigitCountMaxMinMinMin = decimalLength - binaryStringDigitCountMinMaxMin\n\
    \    var binaryStringDigitCountMaxMinMinMin = decimalLength - binaryStringDigitCountMaxMinMin\n\
    \    var binaryStringDigitCountMaxMinMinMin = decimalLength - binaryStringDigitCountMaxMinMin\n\
    \    var binaryStringDigitCountMaxMinMinMin = decimalLength - binaryStringDigitCountMaxMinMinMin\n\
    \    var binaryStringDigitCountMaxMinMinMinMin = decimalLength - binaryStringDigitCountMaxMinMinMin\n\
    \    var binaryStringDigitCountMaxMinMinMinMin = decimalLength - binaryStringDigitCountMaxMinMinMin\n\
    \    var binaryStringDigitCountMaxMinMinMinMin = decimalLength - binaryStringDigitCountMaxMinMinMin\n\
    \    var binaryStringDigitCountMaxMinMinMinMin = decimalLength - binaryStringDigitCountMaxMinMinMinMin\n\
    \    var binaryStringDigitCountMaxMinMinMinMinMin = decimalLength - binaryStringDigitCountMaxMinMinMinMin\n\
    \    var binaryStringDigitCountMaxMinMinMinMinMin = decimalLength - binaryStringDigitCountMaxMinMinMinMinMin\n\
    \    var binaryStringDigitCountMaxMinMinMinMinMin = decimalLength - binaryStringDigitCountMaxMinMinMinMinMin\n\
    \    var binaryStringDigitCountMaxMinMinMinMinMin = decimalLength - binaryStringDigitCountMaxMinMinMinMinMin\n\
    \    var binaryStringDigitCountMaxMinMinMinMinMinMin = decimalLength - binaryStringDigitCountMaxMinMinMinMinMinMin\n\
    \    var binaryStringDigitCountMaxMinMinMinMinMinMin = decimalLength - binaryStringDigitCountMaxMinMinMinMinMinMinMin\n\
    \    var binaryStringDigitCountMaxMinMinMinMinMinMinMin = decimalLength - binaryStringDigitCountMaxMinMinMinMinMinMinMin\n\
    \    var binaryStringDigitCountMaxMinMinMinMin\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: SyntaxError
  stderr: "/tmp/tmp06wh0go6.swift:11:39: error: value of type 'String' has no member\
    \ 'length'\n    var decimalLength = decimalString.length\n                   \
    \     ~~~~~~~~~~~~~ ^~~~~~\n/tmp/tmp06wh0go6.swift:14:9: error: invalid redeclaration\
    \ of 'binaryString'\n    var binaryString = \"\"\n        ^\n/tmp/tmp06wh0go6.swift:9:9:\
    \ note: 'binaryString' previously declared here\n    var binaryString = \"\"\n\
    \        ^\n/tmp/tmp06wh0go6.swift:24:62: error: cannot find 'binaryStringDigitCountMaxMinMin'\
    \ in scope\n    var binaryStringDigitCountMaxMinMinMin = decimalLength - binaryStringDigitCountMaxMinMin\n\
    \                                                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp06wh0go6.swift:25:62: error: cannot find 'binaryStringDigitCountMaxMinMin'\
    \ in scope\n    var binaryStringDigitCountMaxMinMinMin = decimalLength - binaryStringDigitCountMaxMinMin\n\
    \                                                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp06wh0go6.swift:35:71: error: use of local variable 'binaryStringDigitCountMaxMinMinMinMinMinMin'\
    \ before its declaration\n    var binaryStringDigitCountMaxMinMinMinMinMinMin\
    \ = decimalLength - binaryStringDigitCountMaxMinMinMinMinMinMin\n            \
    \                                                          ^\n/tmp/tmp06wh0go6.swift:35:9:\
    \ note: 'binaryStringDigitCountMaxMinMinMinMinMinMin' declared here\n    var binaryStringDigitCountMaxMinMinMinMinMinMin\
    \ = decimalLength - binaryStringDigitCountMaxMinMinMinMinMinMin\n        ^\n/tmp/tmp06wh0go6.swift:36:71:\
    \ error: use of local variable 'binaryStringDigitCountMaxMinMinMinMinMinMinMin'\
    \ before its declaration\n    var binaryStringDigitCountMaxMinMinMinMinMinMin\
    \ = decimalLength - binaryStringDigitCountMaxMinMinMinMinMinMinMin\n         \
    \                                                             ^\n/tmp/tmp06wh0go6.swift:37:9:\
    \ note: 'binaryStringDigitCountMaxMinMinMinMinMinMinMin' declared here\n    var\
    \ binaryStringDigitCountMaxMinMinMinMinMinMinMin = decimalLength - binaryStringDigitCountMaxMinMinMinMinMinMinMin\n\
    \        ^\n/tmp/tmp06wh0go6"
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpf8g4mdz4/tmpf8g4mdz4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c33b6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c33865b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c33865988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c338647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf8g4mdz4                        0x000055a541964492 <unavailable> + 5266

    5    libc.so.6                          0x00002b2c33d5a460 __libc_start_main +
    245

    6    tmpf8g4mdz4                        0x000055a5419640f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    var remainderAsString\
    \ = String(remainder)\n    while remainder > 0 {\n        remainder = remainder\
    \ / 2\n        binaryString = String(remainder) + binaryString\n    }\n    binaryString\
    \ = binaryString + remainderAsString\n    binaryString = \"db\" + binaryString\n\
    \    return binaryString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpnsz0b066/tmpnsz0b066.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae3719aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae3716a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae3716a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae3716a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnsz0b066                        0x0000558073c8b492 <unavailable> + 5266

    5    libc.so.6                          0x00002ae371b96460 __libc_start_main +
    245

    6    tmpnsz0b066                        0x0000558073c8b0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjgvpaxv2/tmpjgvpaxv2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac12e859c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac12e550b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac12e550988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac12e54f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjgvpaxv2                        0x000055b152323492 <unavailable> + 5266

    5    libc.so.6                          0x00002ac12ea45460 __libc_start_main +
    245

    6    tmpjgvpaxv2                        0x000055b1523230f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    var remainder2\
    \ = decimal\n    while remainder > 0 {\n        remainder2 = remainder % 2\n \
    \       remainder = remainder / 2\n        binaryString = String(remainder2) +\
    \ binaryString\n    }\n    return binaryString + \"db\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpv9edxg7a/tmpv9edxg7a.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae127eb3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae127baab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae127baa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae127ba97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv9edxg7a                        0x000055aad4e85492 <unavailable> + 5266

    5    libc.so.6                          0x00002ae12809f460 __libc_start_main +
    245

    6    tmpv9edxg7a                        0x000055aad4e850f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var decimalString = \"\"\n    var remainder\
    \ = 0\n    var power = 0\n    var digit = 0\n    var binaryDigit = 0\n    var\
    \ decimalDigit = 0\n\n    decimalString = String(decimal)\n    decimalString =\
    \ decimalString.reverse()\n\n    for digit in decimalString {\n        decimalDigit\
    \ = Int(digit)\n        remainder = decimalDigit % 2\n        power = decimalDigit\
    \ / 2\n        binaryDigit = remainder * power.pow(2)\n        binaryString =\
    \ String(binaryDigit)\n        binaryString = binaryString.reverse()\n    }\n\n\
    \    binaryString = binaryString + \"db\"\n    return binaryString\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpuo2cixsj.swift:18:35: error: value of type 'String' has no member\
    \ 'reverse'\n    decimalString = decimalString.reverse()\n                   \
    \ ~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmpuo2cixsj.swift:21:24: error: no exact matches\
    \ in call to initializer \n        decimalDigit = Int(digit)\n               \
    \        ^\nSwift.Int:7:12: note: candidate expects value of type 'Float16' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Float16)\n       \
    \    ^\nSwift.Int:10:12: note: candidate expects value of type 'Float' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float)\n           ^\nSwift.Int:12:12:\
    \ note: candidate expects value of type 'Double' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float80)\n           ^\nSwift.Int:28:12: note: candidate expects\
    \ value of type 'Builtin.Int64' for parameter #1 (got 'Character')\n    public\
    \ init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate\
    \ expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n  \
    \  public init(_ _v: Builtin.Word)\n           ^\n/tmp/tmpuo2cixsj.swift:24:41:\
    \ error: value of type 'Int' has no member 'pow'\n        binaryDigit = remainder\
    \ * power.pow(2)\n                                  ~~~~~ ^~~\n/tmp/tmpuo2cixsj.swift:26:37:\
    \ error: value of type 'String' has no member 'reverse'\n        binaryString\
    \ = binaryString.reverse()\n                       ~~~~~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014036
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder, remainder = remainder / 2, remainder % 2\n       \
    \ binaryString = String(remainder) + binaryString\n    }\n    return binaryString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp1xd09tfm.swift:12:18: error: consecutive statements on a line must\
    \ be separated by ';'\n        remainder, remainder = remainder / 2, remainder\
    \ % 2\n                 ^\n                 ;\n/tmp/tmp1xd09tfm.swift:12:18: error:\
    \ expected expression\n        remainder, remainder = remainder / 2, remainder\
    \ % 2\n                 ^\n/tmp/tmp1xd09tfm.swift:12:9: warning: variable is unused\n\
    \        remainder, remainder = remainder / 2, remainder % 2\n        ^~~~~~~~~\n\
    /tmp/tmp1xd09tfm.swift:9:9: warning: variable 'binaryString' was never mutated;\
    \ consider changing to 'let' constant\n    var binaryString = \"\"\n    ~~~ ^\n\
    \    let\n/tmp/tmp1xd09tfm.swift:10:9: warning: variable 'remainder' was never\
    \ mutated; consider changing to 'let' constant\n    var remainder = decimal\n\
    \    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    binaryString =\
    \ \"db\" + binaryString\n    return binaryString\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpm_hv_cw1/tmpm_hv_cw1.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b932a23dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9329f34b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9329f34988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9329f337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm_hv_cw1                        0x000055f48f933492 <unavailable> + 5266

    5    libc.so.6                          0x00002b932a429460 __libc_start_main +
    245

    6    tmpm_hv_cw1                        0x000055f48f9330f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    var remainder2\
    \ = decimal\n    while remainder > 0 {\n        remainder2 = remainder % 2\n \
    \       remainder = remainder / 2\n        binaryString = String(remainder2) +\
    \ binaryString\n    }\n    return binaryString\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpv703yd84/tmpv703yd84.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad68faf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad68f7e7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad68f7e7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad68f7e67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv703yd84                        0x000055ed0a69a492 <unavailable> + 5266

    5    libc.so.6                          0x00002ad68fcdc460 __libc_start_main +
    245

    6    tmpv703yd84                        0x000055ed0a69a0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder, remainder = remainder / 2, remainder % 2\n       \
    \ binaryString = String(remainder) + binaryString\n    }\n    return binaryString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp1xd09tfm.swift:12:18: error: consecutive statements on a line must\
    \ be separated by ';'\n        remainder, remainder = remainder / 2, remainder\
    \ % 2\n                 ^\n                 ;\n/tmp/tmp1xd09tfm.swift:12:18: error:\
    \ expected expression\n        remainder, remainder = remainder / 2, remainder\
    \ % 2\n                 ^\n/tmp/tmp1xd09tfm.swift:12:9: warning: variable is unused\n\
    \        remainder, remainder = remainder / 2, remainder % 2\n        ^~~~~~~~~\n\
    /tmp/tmp1xd09tfm.swift:9:9: warning: variable 'binaryString' was never mutated;\
    \ consider changing to 'let' constant\n    var binaryString = \"\"\n    ~~~ ^\n\
    \    let\n/tmp/tmp1xd09tfm.swift:10:9: warning: variable 'remainder' was never\
    \ mutated; consider changing to 'let' constant\n    var remainder = decimal\n\
    \    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    var remainderInt\
    \ = remainder\n    while remainderInt > 0 {\n        remainderInt = remainderInt\
    \ / 2\n        binaryString = String(remainderInt) + binaryString\n    }\n   \
    \ return binaryString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpouxjc__e/tmpouxjc__e.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7735539c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7735230b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7735230988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b773522f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpouxjc__e                        0x0000562d499af492 <unavailable> + 5266

    5    libc.so.6                          0x00002b7735725460 __libc_start_main +
    245

    6    tmpouxjc__e                        0x0000562d499af0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        binaryString = String(remainder % 2) + binaryString\n       \
    \ remainder = remainder / 2\n    }\n    binaryString = \"db\" + binaryString\n\
    \    return binaryString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpqqromytd/tmpqqromytd.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9add6bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9add3b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9add3b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9add3b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqqromytd                        0x00005607c75fc492 <unavailable> + 5266

    5    libc.so.6                          0x00002b9add8a7460 __libc_start_main +
    245

    6    tmpqqromytd                        0x00005607c75fc0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + String(binaryString)\n        remainder = remainder / 2\n    }\n    return\
    \ binaryString + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpho7mt0gn/tmpho7mt0gn.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af6bc347c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af6bc03eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af6bc03e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af6bc03d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpho7mt0gn                        0x000055a8cee285d2 <unavailable> + 5586

    5    libc.so.6                          0x00002af6bc533460 __libc_start_main +
    245

    6    tmpho7mt0gn                        0x000055a8cee28239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary: String = \"\"\n    var remainder: Int = 0\n    var decimalString:\
    \ String = \"\"\n    var decimalStringLength: Int = decimal.bit_length()\n   \
    \ var decimalStringLength2: Int = decimalStringLength - 1\n    var decimalStringLength3:\
    \ Int = decimalStringLength2 - 1\n    var decimalStringLength4: Int = decimalStringLength3\
    \ - 1\n    var decimalStringLength5: Int = decimalStringLength4 - 1\n    var decimalStringLength6:\
    \ Int = decimalStringLength5 - 1\n    var decimalStringLength7: Int = decimalStringLength6\
    \ - 1\n    var decimalStringLength8: Int = decimalStringLength7 - 1\n    var decimalStringLength9:\
    \ Int = decimalStringLength8 - 1\n    var decimalStringLength10: Int = decimalStringLength9\
    \ - 1\n    var decimalStringLength11: Int = decimalStringLength10 - 1\n    var\
    \ decimalStringLength12: Int = decimalStringLength11 - 1\n    var decimalStringLength13:\
    \ Int = decimalStringLength12 - 1\n    var decimalStringLength14: Int = decimalStringLength13\
    \ - 1\n    var decimalStringLength15: Int = decimalStringLength14 - 1\n    var\
    \ decimalStringLength16: Int = decimalStringLength15 - 1\n    var decimalStringLength17:\
    \ Int = decimalStringLength16 - 1\n    var decimalStringLength18: Int = decimalStringLength17\
    \ - 1\n    var decimalStringLength19: Int = decimalStringLength18 - 1\n    var\
    \ decimalStringLength20: Int = decimalStringLength19 - 1\n    var decimalStringLength21:\
    \ Int = decimalStringLength20 - 1\n    var decimalStringLength22: Int = decimalStringLength21\
    \ - 1\n    var decimalStringLength23: Int = decimalStringLength22 - 1\n    var\
    \ decimalStringLength24: Int = decimalStringLength23 - 1\n    var decimalStringLength25:\
    \ Int = decimalStringLength24 - 1\n    var decimalStringLength26: Int = decimalStringLength25\
    \ - 1\n    var decimalStringLength27: Int = decimalStringLength26 - 1\n    var\
    \ decimalStringLength28: Int = decimalStringLength27 - 1\n    var decimalStringLength29:\
    \ Int = decimalStringLength28 - 1\n    var decimalStringLength30: Int = decimalStringLength29\
    \ - 1\n    var decimalStringLength31: Int = decimalStringLength30 - 1\n    var\
    \ decimalStringLength32: Int = decimalStringLength31 - 1\n    var decimalStringLength33:\
    \ Int = decimalStringLength32 - 1\n    var decimalStringLength34: Int = decimalStringLength33\
    \ - 1\n    var decimalStringLength35: Int = decimalStringLength34 - 1\n    var\
    \ decimalStringLength36: In\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: SyntaxError
  stderr: "/tmp/tmp24r603n6.swift:12:44: error: value of type 'Int' has no member\
    \ 'bit_length'\n    var decimalStringLength: Int = decimal.bit_length()\n    \
    \                               ~~~~~~~ ^~~~~~~~~~\n/tmp/tmp24r603n6.swift:47:32:\
    \ error: cannot find type 'In' in scope\n    var decimalStringLength36: In\n \
    \                              ^~\n"
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    var remainderAsString\
    \ = String(remainder)\n    while remainder > 0 {\n        remainder = remainder\
    \ / 2\n        binaryString = String(remainder) + binaryString\n    }\n    binaryString\
    \ = binaryString + remainderAsString\n    return binaryString\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpkc18s9zh/tmpkc18s9zh.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc90d8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc90a83b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc90a83988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc90a827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkc18s9zh                        0x0000556c3ccc2492 <unavailable> + 5266

    5    libc.so.6                          0x00002adc90f78460 __libc_start_main +
    245

    6    tmpkc18s9zh                        0x0000556c3ccc20f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjgvpaxv2/tmpjgvpaxv2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac12e859c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac12e550b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac12e550988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac12e54f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjgvpaxv2                        0x000055b152323492 <unavailable> + 5266

    5    libc.so.6                          0x00002ac12ea45460 __libc_start_main +
    245

    6    tmpjgvpaxv2                        0x000055b1523230f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjgvpaxv2/tmpjgvpaxv2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac12e859c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac12e550b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac12e550988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac12e54f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjgvpaxv2                        0x000055b152323492 <unavailable> + 5266

    5    libc.so.6                          0x00002ac12ea45460 __libc_start_main +
    245

    6    tmpjgvpaxv2                        0x000055b1523230f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder, remainder = remainder / 2, remainder % 2\n       \
    \ binaryString = String(remainder) + binaryString\n    }\n    return binaryString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp1xd09tfm.swift:12:18: error: consecutive statements on a line must\
    \ be separated by ';'\n        remainder, remainder = remainder / 2, remainder\
    \ % 2\n                 ^\n                 ;\n/tmp/tmp1xd09tfm.swift:12:18: error:\
    \ expected expression\n        remainder, remainder = remainder / 2, remainder\
    \ % 2\n                 ^\n/tmp/tmp1xd09tfm.swift:12:9: warning: variable is unused\n\
    \        remainder, remainder = remainder / 2, remainder % 2\n        ^~~~~~~~~\n\
    /tmp/tmp1xd09tfm.swift:9:9: warning: variable 'binaryString' was never mutated;\
    \ consider changing to 'let' constant\n    var binaryString = \"\"\n    ~~~ ^\n\
    \    let\n/tmp/tmp1xd09tfm.swift:10:9: warning: variable 'remainder' was never\
    \ mutated; consider changing to 'let' constant\n    var remainder = decimal\n\
    \    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjgvpaxv2/tmpjgvpaxv2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac12e859c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac12e550b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac12e550988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac12e54f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjgvpaxv2                        0x000055b152323492 <unavailable> + 5266

    5    libc.so.6                          0x00002ac12ea45460 __libc_start_main +
    245

    6    tmpjgvpaxv2                        0x000055b1523230f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    binaryString =\
    \ \"db\" + binaryString\n    return binaryString\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpm_hv_cw1/tmpm_hv_cw1.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b932a23dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9329f34b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9329f34988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9329f337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm_hv_cw1                        0x000055f48f933492 <unavailable> + 5266

    5    libc.so.6                          0x00002b932a429460 __libc_start_main +
    245

    6    tmpm_hv_cw1                        0x000055f48f9330f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpf8g4mdz4/tmpf8g4mdz4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c33b6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c33865b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c33865988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c338647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf8g4mdz4                        0x000055a541964492 <unavailable> + 5266

    5    libc.so.6                          0x00002b2c33d5a460 __libc_start_main +
    245

    6    tmpf8g4mdz4                        0x000055a5419640f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var decimalString = \"\"\n    var remainder\
    \ = 0\n    var decimalChar = \"\"\n    var binaryChar = \"\"\n    var decimalCount\
    \ = 0\n    var binaryCount = 0\n    var decimalDigit = 0\n    var binaryDigit\
    \ = 0\n    var decimalDigitString = \"\"\n    var binaryDigitString = \"\"\n \
    \   var decimalDigitStringLength = 0\n    var binaryDigitStringLength = 0\n  \
    \  var decimalDigitStringLengthRemainder = 0\n    var binaryDigitStringLengthRemainder\
    \ = 0\n    var decimalDigitStringLengthRemainderRemainder = 0\n    var binaryDigitStringLengthRemainderRemainder\
    \ = 0\n    var decimalDigitStringLengthRemainderRemainderRemainder = 0\n    var\
    \ binaryDigitStringLengthRemainderRemainderRemainder = 0\n    var decimalDigitStringLengthRemainderRemainderRemainderRemainder\
    \ = 0\n    var binaryDigitStringLengthRemainderRemainderRemainderRemainder = 0\n\
    \    var decimalDigitStringLengthRemainderRemainderRemainderRemainder = 0\n  \
    \  var binaryDigitStringLengthRemainderRemainderRemainderRemainder = 0\n    var\
    \ decimalDigitStringLengthRemainderRemainderRemainderRemainder = 0\n    var binaryDigitStringLengthRemainderRemainderRemainderRemainder\
    \ = 0\n    var decimalDigitStringLengthRemainderRemainderRemainderRemainder =\
    \ 0\n    var binaryDigitStringLengthRemainderRemainderRemainderRemainder = 0\n\
    \    var decimalDigitStringLengthRemainderRemainderRemainderRemainder = 0\n  \
    \  var binaryDigitStringLengthRemainderRemainderRemainderRemainder = 0\n    var\
    \ decimalDigitStringLengthRemainderRemainderRemainderRemainder = 0\n    var binaryDigitStringLengthRemainderRemainderRemainderRemainder\
    \ = 0\n    var decimalDigitStringLengthRemainderRemainderRemainderRemainder =\
    \ 0\n    var binaryDigitStringLengthRemainderRemainderRemainderRemainder = 0\n\
    \    var decimalDigitStringLengthRemainderRemainderRemainderRemainder = 0\n  \
    \  var binaryDigitStringLengthRemainderRemainderRemainderRemainder = 0\n    var\
    \ decimalDigitStringLengthRemainderRemainderRemainderRemainder = 0\n    var binaryDigitStringLengthRemainderRemainderRemainderRemainder\
    \ = 0\n    var decimalDigitStringLengthRemainderRemainderRemainderRemainder =\
    \ 0\n    var binaryDigitStringLengthRemainderRemainderRemainderRemainder = 0\n\
    \    var decimalDigitStringLengthRemainderRemainderRemainderRemainder = 0\n  \
    \  var binaryDigitStringLengthRemainderRemainderRemainderRemainder = 0\n    var\
    \ decimalDigitStringLengthRemainderRemainderRemainderRemainder = 0\n    var binaryDigitStringLengthRemainderRemainderRemainderRemainder\
    \ = 0\n    var decimalDigitStringLengthRemainderRemainderRemainderRemainder =\
    \ 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: SyntaxError
  stderr: "/tmp/tmpvni8jyxx.swift:30:9: error: invalid redeclaration of 'decimalDigitStringLengthRemainderRemainderRemainderRemainder'\n\
    \    var decimalDigitStringLengthRemainderRemainderRemainderRemainder = 0\n  \
    \      ^\n/tmp/tmpvni8jyxx.swift:28:9: note: 'decimalDigitStringLengthRemainderRemainderRemainderRemainder'\
    \ previously declared here\n    var decimalDigitStringLengthRemainderRemainderRemainderRemainder\
    \ = 0\n        ^\n/tmp/tmpvni8jyxx.swift:31:9: error: invalid redeclaration of\
    \ 'binaryDigitStringLengthRemainderRemainderRemainderRemainder'\n    var binaryDigitStringLengthRemainderRemainderRemainderRemainder\
    \ = 0\n        ^\n/tmp/tmpvni8jyxx.swift:29:9: note: 'binaryDigitStringLengthRemainderRemainderRemainderRemainder'\
    \ previously declared here\n    var binaryDigitStringLengthRemainderRemainderRemainderRemainder\
    \ = 0\n        ^\n/tmp/tmpvni8jyxx.swift:32:9: error: invalid redeclaration of\
    \ 'decimalDigitStringLengthRemainderRemainderRemainderRemainder'\n    var decimalDigitStringLengthRemainderRemainderRemainderRemainder\
    \ = 0\n        ^\n/tmp/tmpvni8jyxx.swift:28:9: note: 'decimalDigitStringLengthRemainderRemainderRemainderRemainder'\
    \ previously declared here\n    var decimalDigitStringLengthRemainderRemainderRemainderRemainder\
    \ = 0\n        ^\n/tmp/tmpvni8jyxx.swift:33:9: error: invalid redeclaration of\
    \ 'binaryDigitStringLengthRemainderRemainderRemainderRemainder'\n    var binaryDigitStringLengthRemainderRemainderRemainderRemainder\
    \ = 0\n        ^\n/tmp/tmpvni8jyxx.swift:29:9: note: 'binaryDigitStringLengthRemainderRemainderRemainderRemainder'\
    \ previously declared here\n    var binaryDigitStringLengthRemainderRemainderRemainderRemainder\
    \ = 0\n        ^\n/tmp/tmpvni8jyxx.swift:34:9: error: invalid redeclaration of\
    \ 'decimalDigitStringLengthRemainderRemainderRemainderRemainder'\n    var decimalDigitStringLengthRemainderRemainderRemainderRemainder\
    \ = 0\n        ^\n/tmp/tmpvni8jyxx.swift:28:9: note: 'decimalDigitStringLengthRemainderRemainderRemainderRemainder'\
    \ previously declared here\n    var decimalDigitStringLengthRemainderRemainderRemainderRemainder\
    \ = 0\n "
  stdout: ''
  timestamp: 1660014036
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary: String = \"\"\n    var remainder: Int = 0\n    var decimalString:\
    \ String = \"\"\n    var decimalString2: String = \"\"\n    var decimalString3:\
    \ String = \"\"\n    var decimalString4: String = \"\"\n    var decimalString5:\
    \ String = \"\"\n    var decimalString6: String = \"\"\n    var decimalString7:\
    \ String = \"\"\n    var decimalString8: String = \"\"\n    var decimalString9:\
    \ String = \"\"\n    var decimalString10: String = \"\"\n    var decimalString11:\
    \ String = \"\"\n    var decimalString12: String = \"\"\n    var decimalString13:\
    \ String = \"\"\n    var decimalString14: String = \"\"\n    var decimalString15:\
    \ String = \"\"\n    var decimalString16: String = \"\"\n    var decimalString17:\
    \ String = \"\"\n    var decimalString18: String = \"\"\n    var decimalString19:\
    \ String = \"\"\n    var decimalString20: String = \"\"\n    var decimalString21:\
    \ String = \"\"\n    var decimalString22: String = \"\"\n    var decimalString23:\
    \ String = \"\"\n    var decimalString24: String = \"\"\n    var decimalString25:\
    \ String = \"\"\n    var decimalString26: String = \"\"\n    var decimalString27:\
    \ String = \"\"\n    var decimalString28: String = \"\"\n    var decimalString29:\
    \ String = \"\"\n    var decimalString30: String = \"\"\n    var decimalString31:\
    \ String = \"\"\n    var decimalString32: String = \"\"\n    var decimalString33:\
    \ String = \"\"\n    var decimalString34: String = \"\"\n    var decimalString35:\
    \ String = \"\"\n    var decimalString36: String = \"\"\n    var decimalString37:\
    \ String = \"\"\n    var decimalString38: String = \"\"\n    var decimalString39:\
    \ String = \"\"\n    var decimalString40: String = \"\"\n    var decimalString41:\
    \ String = \"\"\n    var decimalString42: String = \"\"\n    var decimalString43:\
    \ String = \"\"\n    var decimalString44: String = \"\"\n    var decimalString45:\
    \ String = \"\"\n    var decimalString46: String = \"\"\n    var decimalString47:\
    \ String = \"\"\n    var decimalString48: String = \"\"\n    var decimalString49:\
    \ String = \"\"\n    var decimalString50: String = \"\"\n    var decimalString51:\
    \ String = \"\"\n    var decimalString52: String = \"\"\n    var decimalString53:\
    \ String = \"\"\n    var decimalString54: String = \"\"\n    var decimalString55:\
    \ String = \"\"\n    var decimalString56: String = \"\"\n    var decimalString57:\
    \ String = \"\"\n    var decimalString58: String = \"\"\n    var decimalString59:\
    \ String = \"\"\n    var decimalString60: String = \"\"\n    var decimalString61:\
    \ String = \"\"\n    var decimalString62: String = \"\"\n    var decimalString63:\
    \ String = \"\"\n    var decimalString64: String = \"\"\n    var decimalString65:\
    \ String = \"\"\n    var decimalString66: String = \"\"\n    var decimalString67:\
    \ String = \"\"\n    var decimalString68: String = \"\"\n    var decimalString69:\
    \ String = \"\"\n    var decimalString70: String = \"\"\n    var decimalString71:\
    \ String = \"\"\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: SyntaxError
  stderr: "/tmp/tmpwvjkm_1w.swift:82:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpwvjkm_1w.swift:9:9: warning: variable 'binary' was never used; consider\
    \ replacing with '_' or removing it\n    var binary: String = \"\"\n        ^~~~~~\n\
    \        _\n/tmp/tmpwvjkm_1w.swift:10:9: warning: variable 'remainder' was never\
    \ used; consider replacing with '_' or removing it\n    var remainder: Int = 0\n\
    \        ^~~~~~~~~\n        _\n/tmp/tmpwvjkm_1w.swift:11:9: warning: variable\
    \ 'decimalString' was never used; consider replacing with '_' or removing it\n\
    \    var decimalString: String = \"\"\n        ^~~~~~~~~~~~~\n        _\n/tmp/tmpwvjkm_1w.swift:12:9:\
    \ warning: variable 'decimalString2' was never used; consider replacing with '_'\
    \ or removing it\n    var decimalString2: String = \"\"\n        ^~~~~~~~~~~~~~\n\
    \        _\n/tmp/tmpwvjkm_1w.swift:13:9: warning: variable 'decimalString3' was\
    \ never used; consider replacing with '_' or removing it\n    var decimalString3:\
    \ String = \"\"\n        ^~~~~~~~~~~~~~\n        _\n/tmp/tmpwvjkm_1w.swift:14:9:\
    \ warning: variable 'decimalString4' was never used; consider replacing with '_'\
    \ or removing it\n    var decimalString4: String = \"\"\n        ^~~~~~~~~~~~~~\n\
    \        _\n/tmp/tmpwvjkm_1w.swift:15:9: warning: variable 'decimalString5' was\
    \ never used; consider replacing with '_' or removing it\n    var decimalString5:\
    \ String = \"\"\n        ^~~~~~~~~~~~~~\n        _\n/tmp/tmpwvjkm_1w.swift:16:9:\
    \ warning: variable 'decimalString6' was never used; consider replacing with '_'\
    \ or removing it\n    var decimalString6: String = \"\"\n        ^~~~~~~~~~~~~~\n\
    \        _\n/tmp/tmpwvjkm_1w.swift:17:9: warning: variable 'decimalString7' was\
    \ never used; consider replacing with '_' or removing it\n    var decimalString7:\
    \ String = \"\"\n        ^~~~~~~~~~~~~~\n        _\n/tmp/tmpwvjkm_1w.swift:18:9:\
    \ warning: variable 'decimalString8' was never used; consider replacing with '_'\
    \ or removing it\n    var decimalString8: String = \"\"\n        ^~~~~~~~~~~~~~\n\
    \        _\n/tmp/tmpwvjkm_1w.swift:19:9: warning: variable 'decimalString9' was\
    \ never used; consider replacing with "
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjgvpaxv2/tmpjgvpaxv2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac12e859c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac12e550b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac12e550988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac12e54f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjgvpaxv2                        0x000055b152323492 <unavailable> + 5266

    5    libc.so.6                          0x00002ac12ea45460 __libc_start_main +
    245

    6    tmpjgvpaxv2                        0x000055b1523230f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpf8g4mdz4/tmpf8g4mdz4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c33b6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c33865b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c33865988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c338647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf8g4mdz4                        0x000055a541964492 <unavailable> + 5266

    5    libc.so.6                          0x00002b2c33d5a460 __libc_start_main +
    245

    6    tmpf8g4mdz4                        0x000055a5419640f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpf8g4mdz4/tmpf8g4mdz4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c33b6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c33865b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c33865988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c338647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf8g4mdz4                        0x000055a541964492 <unavailable> + 5266

    5    libc.so.6                          0x00002b2c33d5a460 __libc_start_main +
    245

    6    tmpf8g4mdz4                        0x000055a5419640f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjgvpaxv2/tmpjgvpaxv2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac12e859c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac12e550b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac12e550988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac12e54f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjgvpaxv2                        0x000055b152323492 <unavailable> + 5266

    5    libc.so.6                          0x00002ac12ea45460 __libc_start_main +
    245

    6    tmpjgvpaxv2                        0x000055b1523230f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjgvpaxv2/tmpjgvpaxv2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac12e859c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac12e550b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac12e550988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac12e54f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjgvpaxv2                        0x000055b152323492 <unavailable> + 5266

    5    libc.so.6                          0x00002ac12ea45460 __libc_start_main +
    245

    6    tmpjgvpaxv2                        0x000055b1523230f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    var remainder2\
    \ = decimal\n    while remainder > 0 {\n        remainder2 = remainder % 2\n \
    \       remainder = remainder / 2\n        binaryString = String(remainder2) +\
    \ binaryString\n    }\n    return binaryString\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpv703yd84/tmpv703yd84.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad68faf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad68f7e7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad68f7e7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad68f7e67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv703yd84                        0x000055ed0a69a492 <unavailable> + 5266

    5    libc.so.6                          0x00002ad68fcdc460 __libc_start_main +
    245

    6    tmpv703yd84                        0x000055ed0a69a0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjgvpaxv2/tmpjgvpaxv2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac12e859c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac12e550b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac12e550988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac12e54f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjgvpaxv2                        0x000055b152323492 <unavailable> + 5266

    5    libc.so.6                          0x00002ac12ea45460 __libc_start_main +
    245

    6    tmpjgvpaxv2                        0x000055b1523230f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpf8g4mdz4/tmpf8g4mdz4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c33b6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c33865b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c33865988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c338647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf8g4mdz4                        0x000055a541964492 <unavailable> + 5266

    5    libc.so.6                          0x00002b2c33d5a460 __libc_start_main +
    245

    6    tmpf8g4mdz4                        0x000055a5419640f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjgvpaxv2/tmpjgvpaxv2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac12e859c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac12e550b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac12e550988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac12e54f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjgvpaxv2                        0x000055b152323492 <unavailable> + 5266

    5    libc.so.6                          0x00002ac12ea45460 __libc_start_main +
    245

    6    tmpjgvpaxv2                        0x000055b1523230f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var decimalString = \"\"\n    var decimalDigit\
    \ = 0\n    var binaryDigit = 0\n    var decimalDigitString = \"\"\n    var binaryDigitString\
    \ = \"\"\n\n    while decimal > 0 {\n        decimalDigit = decimal % 2\n    \
    \    decimal = decimal / 2\n        decimalString = String(decimalDigit)\n   \
    \     decimalDigitString = String(decimalDigit)\n        binaryDigit = decimalDigit\
    \ * 2\n        binaryString = String(binaryDigit)\n        binaryDigitString =\
    \ String(binaryDigit)\n        binaryString = binaryString + binaryDigitString\n\
    \    }\n    binaryString = binaryString + \"db\"\n    binaryString = binaryString\
    \ + decimalString\n    return binaryString\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: SyntaxError
  stderr: "/tmp/tmp0mx18j1l.swift:18:9: error: cannot assign to value: 'decimal' is\
    \ a 'let' constant\n        decimal = decimal / 2\n        ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014036
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder, remainder = remainder / 2, remainder % 2\n       \
    \ binaryString = String(remainder) + binaryString\n    }\n    return binaryString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp1xd09tfm.swift:12:18: error: consecutive statements on a line must\
    \ be separated by ';'\n        remainder, remainder = remainder / 2, remainder\
    \ % 2\n                 ^\n                 ;\n/tmp/tmp1xd09tfm.swift:12:18: error:\
    \ expected expression\n        remainder, remainder = remainder / 2, remainder\
    \ % 2\n                 ^\n/tmp/tmp1xd09tfm.swift:12:9: warning: variable is unused\n\
    \        remainder, remainder = remainder / 2, remainder % 2\n        ^~~~~~~~~\n\
    /tmp/tmp1xd09tfm.swift:9:9: warning: variable 'binaryString' was never mutated;\
    \ consider changing to 'let' constant\n    var binaryString = \"\"\n    ~~~ ^\n\
    \    let\n/tmp/tmp1xd09tfm.swift:10:9: warning: variable 'remainder' was never\
    \ mutated; consider changing to 'let' constant\n    var remainder = decimal\n\
    \    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder / 2\n        binaryString = String(remainder)\
    \ + binaryString\n    }\n    return binaryString\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp2haro8_u/tmp2haro8_u.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8835f32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8835c29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8835c29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8835c287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2haro8_u                        0x0000561f7ca4f492 <unavailable> + 5266

    5    libc.so.6                          0x00002b883611e460 __libc_start_main +
    245

    6    tmp2haro8_u                        0x0000561f7ca4f0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpf8g4mdz4/tmpf8g4mdz4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c33b6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c33865b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c33865988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c338647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf8g4mdz4                        0x000055a541964492 <unavailable> + 5266

    5    libc.so.6                          0x00002b2c33d5a460 __libc_start_main +
    245

    6    tmpf8g4mdz4                        0x000055a5419640f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder, remainder = remainder / 2, remainder % 2\n       \
    \ binaryString += \"0\"\n    }\n    binaryString += String(decimal)\n    binaryString\
    \ += \"b\"\n    return binaryString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: SyntaxError
  stderr: "/tmp/tmpqkgxvitm.swift:12:18: error: consecutive statements on a line must\
    \ be separated by ';'\n        remainder, remainder = remainder / 2, remainder\
    \ % 2\n                 ^\n                 ;\n/tmp/tmpqkgxvitm.swift:12:18: error:\
    \ expected expression\n        remainder, remainder = remainder / 2, remainder\
    \ % 2\n                 ^\n/tmp/tmpqkgxvitm.swift:12:9: warning: variable is unused\n\
    \        remainder, remainder = remainder / 2, remainder % 2\n        ^~~~~~~~~\n\
    /tmp/tmpqkgxvitm.swift:10:9: warning: variable 'remainder' was never mutated;\
    \ consider changing to 'let' constant\n    var remainder = decimal\n    ~~~ ^\n\
    \    let\n"
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpf8g4mdz4/tmpf8g4mdz4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c33b6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c33865b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c33865988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c338647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf8g4mdz4                        0x000055a541964492 <unavailable> + 5266

    5    libc.so.6                          0x00002b2c33d5a460 __libc_start_main +
    245

    6    tmpf8g4mdz4                        0x000055a5419640f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjgvpaxv2/tmpjgvpaxv2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac12e859c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac12e550b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac12e550988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac12e54f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjgvpaxv2                        0x000055b152323492 <unavailable> + 5266

    5    libc.so.6                          0x00002ac12ea45460 __libc_start_main +
    245

    6    tmpjgvpaxv2                        0x000055b1523230f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjgvpaxv2/tmpjgvpaxv2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac12e859c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac12e550b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac12e550988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac12e54f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjgvpaxv2                        0x000055b152323492 <unavailable> + 5266

    5    libc.so.6                          0x00002ac12ea45460 __libc_start_main +
    245

    6    tmpjgvpaxv2                        0x000055b1523230f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary: String = \"\"\n    var remainder: Int = 0\n    var remainder2:\
    \ Int = 0\n    var remainder3: Int = 0\n    var remainder4: Int = 0\n    var remainder5:\
    \ Int = 0\n    var remainder6: Int = 0\n    var remainder7: Int = 0\n    var remainder8:\
    \ Int = 0\n    var remainder9: Int = 0\n    var remainder10: Int = 0\n    var\
    \ remainder11: Int = 0\n    var remainder12: Int = 0\n    var remainder13: Int\
    \ = 0\n    var remainder14: Int = 0\n    var remainder15: Int = 0\n    var remainder16:\
    \ Int = 0\n    var remainder17: Int = 0\n    var remainder18: Int = 0\n    var\
    \ remainder19: Int = 0\n    var remainder20: Int = 0\n    var remainder21: Int\
    \ = 0\n    var remainder22: Int = 0\n    var remainder23: Int = 0\n    var remainder24:\
    \ Int = 0\n    var remainder25: Int = 0\n    var remainder26: Int = 0\n    var\
    \ remainder27: Int = 0\n    var remainder28: Int = 0\n    var remainder29: Int\
    \ = 0\n    var remainder30: Int = 0\n    var remainder31: Int = 0\n    var remainder32:\
    \ Int = 0\n    var remainder33: Int = 0\n    var remainder34: Int = 0\n    var\
    \ remainder35: Int = 0\n    var remainder36: Int = 0\n    var remainder37: Int\
    \ = 0\n    var remainder38: Int = 0\n    var remainder39: Int = 0\n    var remainder40:\
    \ Int = 0\n    var remainder41: Int = 0\n    var remainder42: Int = 0\n    var\
    \ remainder43: Int = 0\n    var remainder44: Int = 0\n    var remainder45: Int\
    \ = 0\n    var remainder46: Int = 0\n    var remainder47: Int = 0\n    var remainder48:\
    \ Int = 0\n    var remainder49: Int = 0\n    var remainder50: Int = 0\n    var\
    \ remainder51: Int = 0\n    var remainder52: Int = 0\n    var remainder53: Int\
    \ = 0\n    var remainder54: Int = 0\n    var remainder55: Int = 0\n    var remainder56:\
    \ Int = 0\n    var remainder57: Int = 0\n    var remainder58: Int = 0\n    var\
    \ remainder59: Int = 0\n    var remainder60: Int = 0\n    var remainder61: Int\
    \ = 0\n    var remainder62: Int = 0\n    var remainder63: Int = 0\n    var remainder64:\
    \ Int = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: SyntaxError
  stderr: "/tmp/tmpzcpsh_m_.swift:9:9: warning: variable 'binary' was never used;\
    \ consider replacing with '_' or removing it\n    var binary: String = \"\"\n\
    \        ^~~~~~\n        _\n/tmp/tmpzcpsh_m_.swift:10:9: warning: variable 'remainder'\
    \ was never used; consider replacing with '_' or removing it\n    var remainder:\
    \ Int = 0\n        ^~~~~~~~~\n        _\n/tmp/tmpzcpsh_m_.swift:11:9: warning:\
    \ variable 'remainder2' was never used; consider replacing with '_' or removing\
    \ it\n    var remainder2: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpzcpsh_m_.swift:12:9:\
    \ warning: variable 'remainder3' was never used; consider replacing with '_' or\
    \ removing it\n    var remainder3: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpzcpsh_m_.swift:13:9:\
    \ warning: variable 'remainder4' was never used; consider replacing with '_' or\
    \ removing it\n    var remainder4: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpzcpsh_m_.swift:14:9:\
    \ warning: variable 'remainder5' was never used; consider replacing with '_' or\
    \ removing it\n    var remainder5: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpzcpsh_m_.swift:15:9:\
    \ warning: variable 'remainder6' was never used; consider replacing with '_' or\
    \ removing it\n    var remainder6: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpzcpsh_m_.swift:16:9:\
    \ warning: variable 'remainder7' was never used; consider replacing with '_' or\
    \ removing it\n    var remainder7: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpzcpsh_m_.swift:17:9:\
    \ warning: variable 'remainder8' was never used; consider replacing with '_' or\
    \ removing it\n    var remainder8: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpzcpsh_m_.swift:18:9:\
    \ warning: variable 'remainder9' was never used; consider replacing with '_' or\
    \ removing it\n    var remainder9: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpzcpsh_m_.swift:19:9:\
    \ warning: variable 'remainder10' was never used; consider replacing with '_'\
    \ or removing it\n    var remainder10: Int = 0\n        ^~~~~~~~~~~\n        _\n\
    /tmp/tmpzcpsh_m_.swift:20:9: warning: variable 'remainder11' was never used; consider\
    \ replacing with '_' or removing it\n "
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    var remainderInBinary\
    \ = 0\n    while remainder > 0 {\n        remainderInBinary = remainder % 2\n\
    \        remainder = remainder / 2\n        binaryString = String(remainderInBinary)\
    \ + binaryString\n    }\n    return binaryString\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpj603jt7n/tmpj603jt7n.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1cdf42bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1cdf122b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1cdf122988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1cdf1217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj603jt7n                        0x0000562184dbc492 <unavailable> + 5266

    5    libc.so.6                          0x00002b1cdf617460 __libc_start_main +
    245

    6    tmpj603jt7n                        0x0000562184dbc0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014037
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpf8g4mdz4/tmpf8g4mdz4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c33b6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c33865b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c33865988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c338647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf8g4mdz4                        0x000055a541964492 <unavailable> + 5266

    5    libc.so.6                          0x00002b2c33d5a460 __libc_start_main +
    245

    6    tmpf8g4mdz4                        0x000055a5419640f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder, remainder = remainder / 2, remainder % 2\n       \
    \ binaryString = String(remainder) + String(binaryString)\n    }\n    return binaryString\
    \ + String(decimal)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: SyntaxError
  stderr: "/tmp/tmp_k1pll4b.swift:12:18: error: consecutive statements on a line must\
    \ be separated by ';'\n        remainder, remainder = remainder / 2, remainder\
    \ % 2\n                 ^\n                 ;\n/tmp/tmp_k1pll4b.swift:12:18: error:\
    \ expected expression\n        remainder, remainder = remainder / 2, remainder\
    \ % 2\n                 ^\n/tmp/tmp_k1pll4b.swift:12:9: warning: variable is unused\n\
    \        remainder, remainder = remainder / 2, remainder % 2\n        ^~~~~~~~~\n\
    /tmp/tmp_k1pll4b.swift:9:9: warning: variable 'binaryString' was never mutated;\
    \ consider changing to 'let' constant\n    var binaryString = \"\"\n    ~~~ ^\n\
    \    let\n/tmp/tmp_k1pll4b.swift:10:9: warning: variable 'remainder' was never\
    \ mutated; consider changing to 'let' constant\n    var remainder = decimal\n\
    \    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + String(binaryString)\n        remainder = remainder / 2\n    }\n    return\
    \ binaryString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp470rlk2c/tmp470rlk2c.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b734c645c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b734c33cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b734c33c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b734c33b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp470rlk2c                        0x000055e90bafe5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b734c831460 __libc_start_main +
    245

    6    tmp470rlk2c                        0x000055e90bafe239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660014037
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder, remainder = remainder / 2, remainder % 2\n       \
    \ binaryString = String(remainder) + binaryString\n    }\n    return binaryString\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: SyntaxError
  stderr: "/tmp/tmplzb9k9zv.swift:12:18: error: consecutive statements on a line must\
    \ be separated by ';'\n        remainder, remainder = remainder / 2, remainder\
    \ % 2\n                 ^\n                 ;\n/tmp/tmplzb9k9zv.swift:12:18: error:\
    \ expected expression\n        remainder, remainder = remainder / 2, remainder\
    \ % 2\n                 ^\n/tmp/tmplzb9k9zv.swift:12:9: warning: variable is unused\n\
    \        remainder, remainder = remainder / 2, remainder % 2\n        ^~~~~~~~~\n\
    /tmp/tmplzb9k9zv.swift:9:9: warning: variable 'binaryString' was never mutated;\
    \ consider changing to 'let' constant\n    var binaryString = \"\"\n    ~~~ ^\n\
    \    let\n/tmp/tmplzb9k9zv.swift:10:9: warning: variable 'remainder' was never\
    \ mutated; consider changing to 'let' constant\n    var remainder = decimal\n\
    \    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjgvpaxv2/tmpjgvpaxv2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac12e859c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac12e550b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac12e550988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac12e54f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjgvpaxv2                        0x000055b152323492 <unavailable> + 5266

    5    libc.so.6                          0x00002ac12ea45460 __libc_start_main +
    245

    6    tmpjgvpaxv2                        0x000055b1523230f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpf8g4mdz4/tmpf8g4mdz4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c33b6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c33865b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c33865988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c338647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf8g4mdz4                        0x000055a541964492 <unavailable> + 5266

    5    libc.so.6                          0x00002b2c33d5a460 __libc_start_main +
    245

    6    tmpf8g4mdz4                        0x000055a5419640f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjgvpaxv2/tmpjgvpaxv2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac12e859c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac12e550b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac12e550988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac12e54f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjgvpaxv2                        0x000055b152323492 <unavailable> + 5266

    5    libc.so.6                          0x00002ac12ea45460 __libc_start_main +
    245

    6    tmpjgvpaxv2                        0x000055b1523230f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpf8g4mdz4/tmpf8g4mdz4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c33b6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c33865b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c33865988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c338647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf8g4mdz4                        0x000055a541964492 <unavailable> + 5266

    5    libc.so.6                          0x00002b2c33d5a460 __libc_start_main +
    245

    6    tmpf8g4mdz4                        0x000055a5419640f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var decimalString = \"\"\n    var decimalDigit\
    \ = 0\n    var binaryDigit = 0\n    var decimalDigitString = \"\"\n    var binaryDigitString\
    \ = \"\"\n\n    decimalDigit = decimal\n    decimalDigitString = String(decimalDigit)\n\
    \    decimalDigitString = String(decimalDigit)\n    decimalDigitString = String(decimalDigit)\n\
    \    decimalDigitString = String(decimalDigit)\n    decimalDigitString = String(decimalDigit)\n\
    \    decimalDigitString = String(decimalDigit)\n    decimalDigitString = String(decimalDigit)\n\
    \    decimalDigitString = String(decimalDigit)\n    decimalDigitString = String(decimalDigit)\n\
    \    decimalDigitString = String(decimalDigit)\n    decimalDigitString = String(decimalDigit)\n\
    \    decimalDigitString = String(decimalDigit)\n    decimalDigitString = String(decimalDigit)\n\
    \    decimalDigitString = String(decimalDigit)\n    decimalDigitString = String(decimalDigit)\n\
    \    decimalDigitString = String(decimalDigit)\n    decimalDigitString = String(decimalDigit)\n\
    \    decimalDigitString = String(decimalDigit)\n    decimalDigitString = String(decimalDigit)\n\
    \    decimalDigitString = String(decimalDigit)\n    decimalDigitString = String(decimalDigit)\n\
    \    decimalDigitString = String(decimalDigit)\n    decimalDigitString = String(decimalDigit)\n\
    \    decimalDigitString = String(decimalDigit)\n    decimalDigitString = String(decimalDigit)\n\
    \    decimalDigitString = String(decimalDigit)\n    decimalDigitString = String(decimalDigit)\n\
    \    decimalDigitString = String(decimalDigit)\n    decimalDigitString = String(decimalDigit)\n\
    \    decimalDigitString = String(decimalDigit)\n    decimalDigitString = String(decimalDigit)\n\
    \    decimalDigitString = String(decimalDigit)\n    decimalDigitString = String(decimalDigit)\n\
    \    decimalDigitString = String(decimalDigit)\n    decimalDigitString = String(decimalDigit)\n\
    \    decimalDigitString = String(decimalDigit)\n    decimalDigitString = String(decimalDigit)\n\
    \    decimalDigitString = String(decimalDigit)\n    decimalDigitString = String(decimalDigit)\n\
    \    decimalDigitString = String(decimalDigit)\n    decimalDigitString = String(decimalDigit)\n\
    \    decimalDigitString = String(decimalDigit)\n    decimalDigitString = String(decimalDigit)\n\
    \    decimalDigitString = String(decimalDigit)\n    decimalDigitString = String(decimalDigit)\n\
    \    decimalDigitString = String(decimalDigit)\n    decimalDigitString = String(decimalDigit)\n\
    \    decimalDigitString = String(decimalDigit)\n    decimalDigitString = String(decimalDigit)\n\
    \    decimalDigitString = String(decimalDigit)\n    decimalDigitString = String(decimalDigit)\n\
    \    decimalDigitString = String(decimalDigit)\n    decimalDigitString = String(decimal\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp7p093b2e.swift:70:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp7p093b2e.swift:69:32: note: to match this opening '('\n    decimalDigitString\
    \ = String(decimal\n                               ^\n/tmp/tmp7p093b2e.swift:9:9:\
    \ warning: initialization of variable 'binaryString' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var binaryString = \"\"\
    \n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp7p093b2e.swift:10:9: warning: initialization\
    \ of variable 'decimalString' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var decimalString = \"\"\n    ~~~~^~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp7p093b2e.swift:12:9: warning: initialization of variable 'binaryDigit'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var binaryDigit = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp7p093b2e.swift:13:9:\
    \ warning: variable 'decimalDigitString' was written to, but never read\n    var\
    \ decimalDigitString = \"\"\n        ^\n/tmp/tmp7p093b2e.swift:14:9: warning:\
    \ initialization of variable 'binaryDigitString' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var binaryDigitString = \"\"\n  \
    \  ~~~~^~~~~~~~~~~~~~~~~\n    _\n"
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpf8g4mdz4/tmpf8g4mdz4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c33b6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c33865b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c33865988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c338647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf8g4mdz4                        0x000055a541964492 <unavailable> + 5266

    5    libc.so.6                          0x00002b2c33d5a460 __libc_start_main +
    245

    6    tmpf8g4mdz4                        0x000055a5419640f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder, remainder = remainder / 2, remainder % 2\n       \
    \ binaryString = String(remainder) + binaryString\n    }\n    return binaryString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp1xd09tfm.swift:12:18: error: consecutive statements on a line must\
    \ be separated by ';'\n        remainder, remainder = remainder / 2, remainder\
    \ % 2\n                 ^\n                 ;\n/tmp/tmp1xd09tfm.swift:12:18: error:\
    \ expected expression\n        remainder, remainder = remainder / 2, remainder\
    \ % 2\n                 ^\n/tmp/tmp1xd09tfm.swift:12:9: warning: variable is unused\n\
    \        remainder, remainder = remainder / 2, remainder % 2\n        ^~~~~~~~~\n\
    /tmp/tmp1xd09tfm.swift:9:9: warning: variable 'binaryString' was never mutated;\
    \ consider changing to 'let' constant\n    var binaryString = \"\"\n    ~~~ ^\n\
    \    let\n/tmp/tmp1xd09tfm.swift:10:9: warning: variable 'remainder' was never\
    \ mutated; consider changing to 'let' constant\n    var remainder = decimal\n\
    \    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpf8g4mdz4/tmpf8g4mdz4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c33b6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c33865b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c33865988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c338647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf8g4mdz4                        0x000055a541964492 <unavailable> + 5266

    5    libc.so.6                          0x00002b2c33d5a460 __libc_start_main +
    245

    6    tmpf8g4mdz4                        0x000055a5419640f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpf8g4mdz4/tmpf8g4mdz4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c33b6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c33865b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c33865988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c338647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf8g4mdz4                        0x000055a541964492 <unavailable> + 5266

    5    libc.so.6                          0x00002b2c33d5a460 __libc_start_main +
    245

    6    tmpf8g4mdz4                        0x000055a5419640f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var decimalString = \"\"\n    var remainder:\
    \ Int\n\n    while decimal > 0 {\n        remainder = decimal % 2\n        decimal\
    \ = decimal / 2\n        binaryString = String(remainder) + binaryString\n   \
    \ }\n\n    if decimal > 0 {\n        remainder = decimal % 2\n        decimal\
    \ = decimal / 2\n        binaryString = String(remainder) + binaryString\n   \
    \ }\n\n    if decimal > 0 {\n        remainder = decimal % 2\n        decimal\
    \ = decimal / 2\n        binaryString = String(remainder) + binaryString\n   \
    \ }\n\n    if decimal > 0 {\n        remainder = decimal % 2\n        decimal\
    \ = decimal / 2\n        binaryString = String(remainder) + binaryString\n   \
    \ }\n\n    if decimal > 0 {\n        remainder = decimal % 2\n        decimal\
    \ = decimal / 2\n        binaryString = String(remainder) + binaryString\n   \
    \ }\n\n    if decimal > 0 {\n        remainder = decimal % 2\n        decimal\
    \ = decimal / 2\n        binaryString = String(remainder) + binaryString\n   \
    \ }\n\n    if decimal > 0 {\n        remainder = decimal % 2\n        decimal\
    \ = decimal / 2\n        binaryString = String(remainder) + binaryString\n   \
    \ }\n\n    if decimal > 0 {\n        remainder = decimal % 2\n        decimal\
    \ = decimal / 2\n        binaryString = String(remainder) + binaryString\n   \
    \ }\n\n    if decimal > 0 {\n        remainder = decimal % 2\n        decimal\
    \ = decimal / 2\n        binaryString = String(remainder) + binaryString\n   \
    \ }\n\n    if decimal > 0 {\n        remainder = decimal % 2\n        decimal\
    \ = decimal / 2\n        binaryString = String(remainder) + binaryString\n   \
    \ }\n\n    if decimal > 0 {\n        remainder = decimal % 2\n        decimal\
    \ = decimal / 2\n        binaryString = String(remainder) + binaryString\n   \
    \ }\n\n    if decimal > 0 {\n        remainder = decimal % 2\n        decimal\
    \ = decimal / 2\n        binaryString = String(remainder) + binaryString\n   \
    \ }\n\n    if decimal > 0 {\n        remainder = decimal % 2\n        decimal\
    \ = decimal / 2\n        binaryString = String(remainder) + binaryString\n   \
    \ }\n\n    if decimal > 0 {\n        remainder = decimal % 2\n        decimal\
    \ = decimal / 2\n        binaryString = String(remainder) + binaryString\n   \
    \ }\n\n    if decimal > 0 {\n        remainder = decimal % 2\n        decimal\
    \ = decimal / 2\n        binaryString = String(remainder) + binaryString\n   \
    \ }\n\n    if decimal > 0 {\n        remainder = decimal % 2\n        decimal\
    \ = decimal / 2\n        binaryString = String(remainder) + binaryString\n   \
    \ }\n\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: SyntaxError
  stderr: "/tmp/tmp9d3msqag.swift:15:9: error: cannot assign to value: 'decimal' is\
    \ a 'let' constant\n        decimal = decimal / 2\n        ^~~~~~~\n/tmp/tmp9d3msqag.swift:21:9:\
    \ error: cannot assign to value: 'decimal' is a 'let' constant\n        decimal\
    \ = decimal / 2\n        ^~~~~~~\n/tmp/tmp9d3msqag.swift:27:9: error: cannot assign\
    \ to value: 'decimal' is a 'let' constant\n        decimal = decimal / 2\n   \
    \     ^~~~~~~\n/tmp/tmp9d3msqag.swift:33:9: error: cannot assign to value: 'decimal'\
    \ is a 'let' constant\n        decimal = decimal / 2\n        ^~~~~~~\n/tmp/tmp9d3msqag.swift:39:9:\
    \ error: cannot assign to value: 'decimal' is a 'let' constant\n        decimal\
    \ = decimal / 2\n        ^~~~~~~\n/tmp/tmp9d3msqag.swift:45:9: error: cannot assign\
    \ to value: 'decimal' is a 'let' constant\n        decimal = decimal / 2\n   \
    \     ^~~~~~~\n/tmp/tmp9d3msqag.swift:51:9: error: cannot assign to value: 'decimal'\
    \ is a 'let' constant\n        decimal = decimal / 2\n        ^~~~~~~\n/tmp/tmp9d3msqag.swift:57:9:\
    \ error: cannot assign to value: 'decimal' is a 'let' constant\n        decimal\
    \ = decimal / 2\n        ^~~~~~~\n/tmp/tmp9d3msqag.swift:63:9: error: cannot assign\
    \ to value: 'decimal' is a 'let' constant\n        decimal = decimal / 2\n   \
    \     ^~~~~~~\n/tmp/tmp9d3msqag.swift:69:9: error: cannot assign to value: 'decimal'\
    \ is a 'let' constant\n        decimal = decimal / 2\n        ^~~~~~~\n/tmp/tmp9d3msqag.swift:75:9:\
    \ error: cannot assign to value: 'decimal' is a 'let' constant\n        decimal\
    \ = decimal / 2\n        ^~~~~~~\n/tmp/tmp9d3msqag.swift:81:9: error: cannot assign\
    \ to value: 'decimal' is a 'let' constant\n        decimal = decimal / 2\n   \
    \     ^~~~~~~\n/tmp/tmp9d3msqag.swift:87:9: error: cannot assign to value: 'decimal'\
    \ is a 'let' constant\n        decimal = decimal / 2\n        ^~~~~~~\n/tmp/tmp9d3msqag.swift:93:9:\
    \ error: cannot assign to value: 'decimal' is a 'let' constant\n        decimal\
    \ = decimal / 2\n        ^~~~~~~\n/tmp/tmp9d3msqag.swift:99:9: error: cannot assign\
    \ to value: 'decimal' is a 'let' constant\n        decimal = decimal / 2\n   \
    \     ^~~~~~~\n/tmp/tmp"
  stdout: ''
  timestamp: 1660014036
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder, remainder = remainder / 2, remainder % 2\n       \
    \ binaryString = String(remainder) + binaryString\n    }\n    return binaryString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp1xd09tfm.swift:12:18: error: consecutive statements on a line must\
    \ be separated by ';'\n        remainder, remainder = remainder / 2, remainder\
    \ % 2\n                 ^\n                 ;\n/tmp/tmp1xd09tfm.swift:12:18: error:\
    \ expected expression\n        remainder, remainder = remainder / 2, remainder\
    \ % 2\n                 ^\n/tmp/tmp1xd09tfm.swift:12:9: warning: variable is unused\n\
    \        remainder, remainder = remainder / 2, remainder % 2\n        ^~~~~~~~~\n\
    /tmp/tmp1xd09tfm.swift:9:9: warning: variable 'binaryString' was never mutated;\
    \ consider changing to 'let' constant\n    var binaryString = \"\"\n    ~~~ ^\n\
    \    let\n/tmp/tmp1xd09tfm.swift:10:9: warning: variable 'remainder' was never\
    \ mutated; consider changing to 'let' constant\n    var remainder = decimal\n\
    \    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660014036
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary: String = \"\"\n    var remainder: Int = 0\n    var decimalString:\
    \ String = \"\"\n    \n    for _ in 0..<decimal {\n        remainder = decimal\
    \ % 2\n        decimalString = String(remainder)\n        binary = binary + decimalString\n\
    \        decimal = decimal / 2\n    }\n    \n    return binary\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: SyntaxError
  stderr: "/tmp/tmp8_emy3w7.swift:17:9: error: cannot assign to value: 'decimal' is\
    \ a 'let' constant\n        decimal = decimal / 2\n        ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder / 2\n        binaryString = String(remainder)\
    \ + binaryString\n    }\n    return binaryString\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp2haro8_u/tmp2haro8_u.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8835f32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8835c29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8835c29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8835c287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2haro8_u                        0x0000561f7ca4f492 <unavailable> + 5266

    5    libc.so.6                          0x00002b883611e460 __libc_start_main +
    245

    6    tmp2haro8_u                        0x0000561f7ca4f0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    binaryString =\
    \ \"db\" + binaryString\n    return binaryString\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpm_hv_cw1/tmpm_hv_cw1.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b932a23dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9329f34b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9329f34988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9329f337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm_hv_cw1                        0x000055f48f933492 <unavailable> + 5266

    5    libc.so.6                          0x00002b932a429460 __libc_start_main +
    245

    6    tmpm_hv_cw1                        0x000055f48f9330f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder, remainder = remainder / 2, remainder % 2\n       \
    \ binaryString = String(remainder) + binaryString\n    }\n    return binaryString\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: SyntaxError
  stderr: "/tmp/tmplzb9k9zv.swift:12:18: error: consecutive statements on a line must\
    \ be separated by ';'\n        remainder, remainder = remainder / 2, remainder\
    \ % 2\n                 ^\n                 ;\n/tmp/tmplzb9k9zv.swift:12:18: error:\
    \ expected expression\n        remainder, remainder = remainder / 2, remainder\
    \ % 2\n                 ^\n/tmp/tmplzb9k9zv.swift:12:9: warning: variable is unused\n\
    \        remainder, remainder = remainder / 2, remainder % 2\n        ^~~~~~~~~\n\
    /tmp/tmplzb9k9zv.swift:9:9: warning: variable 'binaryString' was never mutated;\
    \ consider changing to 'let' constant\n    var binaryString = \"\"\n    ~~~ ^\n\
    \    let\n/tmp/tmplzb9k9zv.swift:10:9: warning: variable 'remainder' was never\
    \ mutated; consider changing to 'let' constant\n    var remainder = decimal\n\
    \    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        binaryString += \"0\"\n        remainder = remainder / 2\n  \
    \  }\n    while remainder > 0 {\n        binaryString += \"1\"\n        remainder\
    \ = remainder / 2\n    }\n    if remainder > 0 {\n        binaryString += \"b\"\
    \n    }\n    return binaryString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpa65poir5/tmpa65poir5.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e497bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e494b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e494b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e494b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa65poir5                        0x000055f03b4a43c2 <unavailable> + 5058

    5    libc.so.6                          0x00002b7e499ab460 __libc_start_main +
    245

    6    tmpa65poir5                        0x000055f03b4a4029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660014037
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpf8g4mdz4/tmpf8g4mdz4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c33b6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c33865b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c33865988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c338647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf8g4mdz4                        0x000055a541964492 <unavailable> + 5266

    5    libc.so.6                          0x00002b2c33d5a460 __libc_start_main +
    245

    6    tmpf8g4mdz4                        0x000055a5419640f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjgvpaxv2/tmpjgvpaxv2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac12e859c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac12e550b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac12e550988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac12e54f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjgvpaxv2                        0x000055b152323492 <unavailable> + 5266

    5    libc.so.6                          0x00002ac12ea45460 __libc_start_main +
    245

    6    tmpjgvpaxv2                        0x000055b1523230f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpf8g4mdz4/tmpf8g4mdz4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c33b6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c33865b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c33865988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c338647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf8g4mdz4                        0x000055a541964492 <unavailable> + 5266

    5    libc.so.6                          0x00002b2c33d5a460 __libc_start_main +
    245

    6    tmpf8g4mdz4                        0x000055a5419640f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder, remainder = remainder / 2, remainder % 2\n       \
    \ binaryString = String(remainder) + binaryString\n    }\n    return binaryString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp1xd09tfm.swift:12:18: error: consecutive statements on a line must\
    \ be separated by ';'\n        remainder, remainder = remainder / 2, remainder\
    \ % 2\n                 ^\n                 ;\n/tmp/tmp1xd09tfm.swift:12:18: error:\
    \ expected expression\n        remainder, remainder = remainder / 2, remainder\
    \ % 2\n                 ^\n/tmp/tmp1xd09tfm.swift:12:9: warning: variable is unused\n\
    \        remainder, remainder = remainder / 2, remainder % 2\n        ^~~~~~~~~\n\
    /tmp/tmp1xd09tfm.swift:9:9: warning: variable 'binaryString' was never mutated;\
    \ consider changing to 'let' constant\n    var binaryString = \"\"\n    ~~~ ^\n\
    \    let\n/tmp/tmp1xd09tfm.swift:10:9: warning: variable 'remainder' was never\
    \ mutated; consider changing to 'let' constant\n    var remainder = decimal\n\
    \    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    var remainderAsString\
    \ = String(remainder)\n    while remainder > 0 {\n        remainder = remainder\
    \ / 2\n        binaryString = String(remainder) + binaryString\n    }\n    binaryString\
    \ = binaryString + remainderAsString\n    return binaryString\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpkc18s9zh/tmpkc18s9zh.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc90d8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc90a83b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc90a83988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc90a827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkc18s9zh                        0x0000556c3ccc2492 <unavailable> + 5266

    5    libc.so.6                          0x00002adc90f78460 __libc_start_main +
    245

    6    tmpkc18s9zh                        0x0000556c3ccc20f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var decimalString = \"\"\n    var decimalStringLength\
    \ = String(decimal).characters.count\n    var binaryStringLength = String(decimal).characters.count\n\
    \    var decimalStringLength = String(decimal).characters.count\n    var binaryStringLength\
    \ = String(decimal).characters.count\n    var decimalStringLength = String(decimal).characters.count\n\
    \    var binaryStringLength = String(decimal).characters.count\n    var decimalStringLength\
    \ = String(decimal).characters.count\n    var binaryStringLength = String(decimal).characters.count\n\
    \    var decimalStringLength = String(decimal).characters.count\n    var binaryStringLength\
    \ = String(decimal).characters.count\n    var decimalStringLength = String(decimal).characters.count\n\
    \    var binaryStringLength = String(decimal).characters.count\n    var decimalStringLength\
    \ = String(decimal).characters.count\n    var binaryStringLength = String(decimal).characters.count\n\
    \    var decimalStringLength = String(decimal).characters.count\n    var binaryStringLength\
    \ = String(decimal).characters.count\n    var decimalStringLength = String(decimal).characters.count\n\
    \    var binaryStringLength = String(decimal).characters.count\n    var decimalStringLength\
    \ = String(decimal).characters.count\n    var binaryStringLength = String(decimal).characters.count\n\
    \    var decimalStringLength = String(decimal).characters.count\n    var binaryStringLength\
    \ = String(decimal).characters.count\n    var decimalStringLength = String(decimal).characters.count\n\
    \    var binaryStringLength = String(decimal).characters.count\n    var decimalStringLength\
    \ = String(decimal).characters.count\n    var binaryStringLength = String(decimal).characters.count\n\
    \    var decimalStringLength = String(decimal).characters.count\n    var binaryStringLength\
    \ = String(decimal).characters.count\n    var decimalStringLength = String(decimal).characters.count\n\
    \    var binaryStringLength = String(decimal).characters.count\n    var decimalStringLength\
    \ = String(decimal).characters.count\n    var binaryStringLength = String(decimal).characters.count\n\
    \    var decimalStringLength = String(decimal).characters.count\n    var binaryStringLength\
    \ = String(decimal).characters.count\n    var decimalStringLength = String(decimal).characters.count\n\
    \    var binaryStringLength = String(decimal).characters.count\n    var decimalStringLength\
    \ = String(decimal).characters.count\n    var binaryStringLength = String(decimal).characters.count\n\
    \    var decimalStringLength = String(decimal).characters.count\n    var binaryStringLength\
    \ = String(decimal).characters.count\n    var decimalStringLength = String(decimal).characters.count\n\
    \    var binaryStringLength = String(decimal).characters.count\n    var decimalStringLength\
    \ = String(decimal).characters.count\n    var binaryStringLength = String(decimal).characters.count\n\
    \    var decimalStringLength = String(decimal).characters.count\n    var binaryStringLength\
    \ = String(decimal).characters.count\n    var decimalStringLength = String(decimal).characters.count\n\
    \    var binaryStringLength = String(decimal).characters.count\n    var decimalStringLength\
    \ = String(decimal).characters.count\n    var binaryStringLength = String(decimal).characters.count\n\
    \    var decimal\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: SyntaxError
  stderr: "/tmp/tmp5hcwn07i.swift:11:47: error: 'characters' is unavailable: Please\
    \ use String directly\n    var decimalStringLength = String(decimal).characters.count\n\
    \                                              ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp5hcwn07i.swift:12:46: error: 'characters'\
    \ is unavailable: Please use String directly\n    var binaryStringLength = String(decimal).characters.count\n\
    \                                             ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp5hcwn07i.swift:13:47: error: 'characters'\
    \ is unavailable: Please use String directly\n    var decimalStringLength = String(decimal).characters.count\n\
    \                                              ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp5hcwn07i.swift:13:9: error: invalid redeclaration\
    \ of 'decimalStringLength'\n    var decimalStringLength = String(decimal).characters.count\n\
    \        ^\n/tmp/tmp5hcwn07i.swift:11:9: note: 'decimalStringLength' previously\
    \ declared here\n    var decimalStringLength = String(decimal).characters.count\n\
    \        ^\n/tmp/tmp5hcwn07i.swift:14:46: error: 'characters' is unavailable:\
    \ Please use String directly\n    var binaryStringLength = String(decimal).characters.count\n\
    \                                             ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp5hcwn07i.swift:14:9: error: invalid redeclaration\
    \ of 'binaryStringLength'\n    var binaryStringLength = String(decimal).characters.count\n\
    \        ^\n/tmp/tmp5hcwn07i.swift:12:9: note: 'binaryStringLength' previously\
    \ declared here\n    var binaryStringLength = String(decimal).characters.count\n\
    \        ^\n/tmp/tmp5hcwn07i.swift:15:47: error: 'characters' is unavailable:\
    \ Plea"
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    var remainder2\
    \ = decimal\n    while remainder > 0 {\n        remainder2 = remainder % 2\n \
    \       remainder = remainder / 2\n        binaryString = String(remainder2) +\
    \ binaryString\n    }\n    return binaryString\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpv703yd84/tmpv703yd84.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad68faf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad68f7e7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad68f7e7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad68f7e67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv703yd84                        0x000055ed0a69a492 <unavailable> + 5266

    5    libc.so.6                          0x00002ad68fcdc460 __libc_start_main +
    245

    6    tmpv703yd84                        0x000055ed0a69a0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binary: String = \"\"\n    var remainder: Int = 0\n    for _ in 0..<decimal\
    \ {\n        remainder = decimal % 2\n        decimal = decimal / 2\n        binary\
    \ = String(remainder) + String(binary)\n    }\n    return binary + \"db\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp7lwjhdsm.swift:13:9: error: cannot assign to value: 'decimal' is\
    \ a 'let' constant\n        decimal = decimal / 2\n        ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjgvpaxv2/tmpjgvpaxv2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac12e859c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac12e550b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac12e550988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac12e54f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjgvpaxv2                        0x000055b152323492 <unavailable> + 5266

    5    libc.so.6                          0x00002ac12ea45460 __libc_start_main +
    245

    6    tmpjgvpaxv2                        0x000055b1523230f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjgvpaxv2/tmpjgvpaxv2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac12e859c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac12e550b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac12e550988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac12e54f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjgvpaxv2                        0x000055b152323492 <unavailable> + 5266

    5    libc.so.6                          0x00002ac12ea45460 __libc_start_main +
    245

    6    tmpjgvpaxv2                        0x000055b1523230f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + String(binaryString)\n        remainder = remainder / 2\n    }\n    binaryString\
    \ = String(binaryString) + \"db\"\n    return binaryString\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpw4oqn3x_/tmpw4oqn3x_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba33418c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba3310fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba3310f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba3310e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw4oqn3x_                        0x00005612e0cbb5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002aba33604460 __libc_start_main +
    245

    6    tmpw4oqn3x_                        0x00005612e0cbb239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660014037
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder / 2\n        binaryString = String(remainder)\
    \ + binaryString\n    }\n    return binaryString\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp2haro8_u/tmp2haro8_u.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8835f32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8835c29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8835c29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8835c287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2haro8_u                        0x0000561f7ca4f492 <unavailable> + 5266

    5    libc.so.6                          0x00002b883611e460 __libc_start_main +
    245

    6    tmp2haro8_u                        0x0000561f7ca4f0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    var remainderInt\
    \ = remainder\n    while remainder > 0 {\n        remainderInt /= 2\n        binaryString\
    \ += \"0\"\n    }\n    while remainderInt > 0 {\n        binaryString += \"1\"\
    \n        remainderInt -= 1\n    }\n    binaryString = \"db\" + binaryString\n\
    \    return binaryString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpvgzchjh_/tmpvgzchjh_.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba9d33e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba9d30ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba9d30dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba9d30dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvgzchjh_                        0x0000559ce4b53422 <unavailable> + 5154

    5    libc.so.6                          0x00002ba9d35d2460 __libc_start_main +
    245

    6    tmpvgzchjh_                        0x0000559ce4b53089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1660014037
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder / 2\n        binaryString = String(remainder)\
    \ + binaryString\n    }\n    return binaryString\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp2haro8_u/tmp2haro8_u.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8835f32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8835c29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8835c29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8835c287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2haro8_u                        0x0000561f7ca4f492 <unavailable> + 5266

    5    libc.so.6                          0x00002b883611e460 __libc_start_main +
    245

    6    tmp2haro8_u                        0x0000561f7ca4f0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var decimalString = \"\"\n    var decimalStringLength\
    \ = String(decimal).characters.count\n    var decimalStringLength = String(decimal).characters.count\n\
    \    var decimalStringLength = String(decimal).characters.count\n    var decimalStringLength\
    \ = String(decimal).characters.count\n    var decimalStringLength = String(decimal).characters.count\n\
    \    var decimalStringLength = String(decimal).characters.count\n    var decimalStringLength\
    \ = String(decimal).characters.count\n    var decimalStringLength = String(decimal).characters.count\n\
    \    var decimalStringLength = String(decimal).characters.count\n    var decimalStringLength\
    \ = String(decimal).characters.count\n    var decimalStringLength = String(decimal).characters.count\n\
    \    var decimalStringLength = String(decimal).characters.count\n    var decimalStringLength\
    \ = String(decimal).characters.count\n    var decimalStringLength = String(decimal).characters.count\n\
    \    var decimalStringLength = String(decimal).characters.count\n    var decimalStringLength\
    \ = String(decimal).characters.count\n    var decimalStringLength = String(decimal).characters.count\n\
    \    var decimalStringLength = String(decimal).characters.count\n    var decimalStringLength\
    \ = String(decimal).characters.count\n    var decimalStringLength = String(decimal).characters.count\n\
    \    var decimalStringLength = String(decimal).characters.count\n    var decimalStringLength\
    \ = String(decimal).characters.count\n    var decimalStringLength = String(decimal).characters.count\n\
    \    var decimalStringLength = String(decimal).characters.count\n    var decimalStringLength\
    \ = String(decimal).characters.count\n    var decimalStringLength = String(decimal).characters.count\n\
    \    var decimalStringLength = String(decimal).characters.count\n    var decimalStringLength\
    \ = String(decimal).characters.count\n    var decimalStringLength = String(decimal).characters.count\n\
    \    var decimalStringLength = String(decimal).characters.count\n    var decimalStringLength\
    \ = String(decimal).characters.count\n    var decimalStringLength = String(decimal).characters.count\n\
    \    var decimalStringLength = String(decimal).characters.count\n    var decimalStringLength\
    \ = String(decimal).characters.count\n    var decimalStringLength = String(decimal).characters.count\n\
    \    var decimalStringLength = String(decimal).characters.count\n    var decimalStringLength\
    \ = String(decimal).characters.count\n    var decimalStringLength = String(decimal).characters.count\n\
    \    var decimalStringLength = String(decimal).characters.count\n    var decimalStringLength\
    \ = String(decimal).characters.count\n    var decimalStringLength = String(decimal).characters.count\n\
    \    var decimalStringLength = String(decimal).characters.count\n    var decimalStringLength\
    \ = String(decimal).characters.count\n    var decimalStringLength = String(decimal).characters.count\n\
    \    var decimalStringLength = String(decimal).characters.count\n    var decimalStringLength\
    \ = String(decimal).characters.count\n    var decimalStringLength = String(decimal).characters.count\n\
    \    var decimalStringLength = String(decimal).characters.count\n    var decimalStringLength\
    \ = String(decimal).characters.count\n    var decimalStringLength = String(decimal).characters.count\n\
    \    var decimal\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: SyntaxError
  stderr: "/tmp/tmp0z4o0lip.swift:11:47: error: 'characters' is unavailable: Please\
    \ use String directly\n    var decimalStringLength = String(decimal).characters.count\n\
    \                                              ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp0z4o0lip.swift:12:47: error: 'characters'\
    \ is unavailable: Please use String directly\n    var decimalStringLength = String(decimal).characters.count\n\
    \                                              ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp0z4o0lip.swift:12:9: error: invalid redeclaration\
    \ of 'decimalStringLength'\n    var decimalStringLength = String(decimal).characters.count\n\
    \        ^\n/tmp/tmp0z4o0lip.swift:11:9: note: 'decimalStringLength' previously\
    \ declared here\n    var decimalStringLength = String(decimal).characters.count\n\
    \        ^\n/tmp/tmp0z4o0lip.swift:13:47: error: 'characters' is unavailable:\
    \ Please use String directly\n    var decimalStringLength = String(decimal).characters.count\n\
    \                                              ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp0z4o0lip.swift:13:9: error: invalid redeclaration\
    \ of 'decimalStringLength'\n    var decimalStringLength = String(decimal).characters.count\n\
    \        ^\n/tmp/tmp0z4o0lip.swift:11:9: note: 'decimalStringLength' previously\
    \ declared here\n    var decimalStringLength = String(decimal).characters.count\n\
    \        ^\n/tmp/tmp0z4o0lip.swift:14:47: error: 'characters' is unavailable:\
    \ Please use String directly\n    var decimalStringLength = String(decimal).characters.count\n\
    \                                              ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp0z4o0lip.swift:14:9: error: invalid redeclaration\
    \ of '"
  stdout: ''
  timestamp: 1660014037
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjgvpaxv2/tmpjgvpaxv2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac12e859c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac12e550b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac12e550988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac12e54f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjgvpaxv2                        0x000055b152323492 <unavailable> + 5266

    5    libc.so.6                          0x00002ac12ea45460 __libc_start_main +
    245

    6    tmpjgvpaxv2                        0x000055b1523230f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder / 2\n        binaryString = String(remainder)\
    \ + binaryString\n    }\n    return binaryString\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp2haro8_u/tmp2haro8_u.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8835f32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8835c29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8835c29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8835c287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2haro8_u                        0x0000561f7ca4f492 <unavailable> + 5266

    5    libc.so.6                          0x00002b883611e460 __libc_start_main +
    245

    6    tmp2haro8_u                        0x0000561f7ca4f0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    binaryString =\
    \ String(decimal) + binaryString\n    return binaryString\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpiihhelar/tmpiihhelar.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84294c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84291c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84291c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84291bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiihhelar                        0x000055895788b492 <unavailable> + 5266

    5    libc.so.6                          0x00002b84296b5460 __libc_start_main +
    245

    6    tmpiihhelar                        0x000055895788b0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + binaryString\n        remainder = remainder / 2\n    }\n    return binaryString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpf8g4mdz4/tmpf8g4mdz4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c33b6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c33865b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c33865988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c338647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf8g4mdz4                        0x000055a541964492 <unavailable> + 5266

    5    libc.so.6                          0x00002b2c33d5a460 __libc_start_main +
    245

    6    tmpf8g4mdz4                        0x000055a5419640f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014036
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfunc decimal_to_binary(decimal: Int) -> String {\n\
    \    var binaryString = \"\"\n    var remainder = decimal\n    while remainder\
    \ > 0 {\n        remainder = remainder % 2\n        binaryString = String(remainder)\
    \ + String(binaryString)\n        remainder = remainder / 2\n    }\n    return\
    \ binaryString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp470rlk2c/tmp470rlk2c.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b734c645c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b734c33cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b734c33c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b734c33b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp470rlk2c                        0x000055e90bafe5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b734c831460 __libc_start_main +
    245

    6    tmp470rlk2c                        0x000055e90bafe239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660014037
