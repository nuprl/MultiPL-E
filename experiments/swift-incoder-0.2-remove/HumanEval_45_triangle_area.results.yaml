language: swift
name: HumanEval_45_triangle_area
results:
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return sqrt(a * a + h * h) /\
    \ 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h:\
    \ 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmplzw5p2_s.swift:4:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(a * a + h * h) / 2.0\n           ^~~~\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return (a * h) / Double(2.0 *\
    \ 3.14159)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpmaurvt4f.swift:4:15: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    return (a * h) / Double(2.0 * 3.14159)\n\
    \              ^\n           Double()\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(sqrt(pow(a, 2)\
    \ + pow(h / 2, 2)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpvfzxj1z1.swift:4:19: error: cannot find 'sqrt' in scope\n    return\
    \ Double(sqrt(pow(a, 2) + pow(h / 2, 2)))\n                  ^~~~\n/tmp/tmpvfzxj1z1.swift:4:24:\
    \ error: cannot find 'pow' in scope\n    return Double(sqrt(pow(a, 2) + pow(h\
    \ / 2, 2)))\n                       ^~~\n/tmp/tmpvfzxj1z1.swift:4:36: error: cannot\
    \ find 'pow' in scope\n    return Double(sqrt(pow(a, 2) + pow(h / 2, 2)))\n  \
    \                                 ^~~\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return sqrt(pow(a, 2) + pow(h\
    \ / 2, 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpxti1c3fg.swift:4:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(pow(a, 2) + pow(h / 2, 2))\n           ^~~~\n/tmp/tmpxti1c3fg.swift:4:17:\
    \ error: cannot find 'pow' in scope\n    return sqrt(pow(a, 2) + pow(h / 2, 2))\n\
    \                ^~~\n/tmp/tmpxti1c3fg.swift:4:29: error: cannot find 'pow' in\
    \ scope\n    return sqrt(pow(a, 2) + pow(h / 2, 2))\n                        \
    \    ^~~\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return sqrt(pow(a, 2) + pow(h\
    \ / 2, 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpxti1c3fg.swift:4:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(pow(a, 2) + pow(h / 2, 2))\n           ^~~~\n/tmp/tmpxti1c3fg.swift:4:17:\
    \ error: cannot find 'pow' in scope\n    return sqrt(pow(a, 2) + pow(h / 2, 2))\n\
    \                ^~~\n/tmp/tmpxti1c3fg.swift:4:29: error: cannot find 'pow' in\
    \ scope\n    return sqrt(pow(a, 2) + pow(h / 2, 2))\n                        \
    \    ^~~\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(sqrt(pow(a, 2)\
    \ + pow(h / 2, 2)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpvfzxj1z1.swift:4:19: error: cannot find 'sqrt' in scope\n    return\
    \ Double(sqrt(pow(a, 2) + pow(h / 2, 2)))\n                  ^~~~\n/tmp/tmpvfzxj1z1.swift:4:24:\
    \ error: cannot find 'pow' in scope\n    return Double(sqrt(pow(a, 2) + pow(h\
    \ / 2, 2)))\n                       ^~~\n/tmp/tmpvfzxj1z1.swift:4:36: error: cannot\
    \ find 'pow' in scope\n    return Double(sqrt(pow(a, 2) + pow(h / 2, 2)))\n  \
    \                                 ^~~\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    let area = a * h / 2\n    return\
    \ area\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h:\
    \ 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpiokeklyb.swift:5:12: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return area\n           ^~~~\n     \
    \      Double( )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    let area = a * h\n    return\
    \ area\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h:\
    \ 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp7qo82hgt.swift:5:12: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return area\n           ^~~~\n     \
    \      Double( )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return (a * h) / Double(2.0 *\
    \ 3.14159)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpmaurvt4f.swift:4:15: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    return (a * h) / Double(2.0 * 3.14159)\n\
    \              ^\n           Double()\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return (a * h) / Double(2.0 *\
    \ 3.14159)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpmaurvt4f.swift:4:15: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    return (a * h) / Double(2.0 * 3.14159)\n\
    \              ^\n           Double()\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return sqrt(pow(a, 2) + pow(h\
    \ / 2, 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpxti1c3fg.swift:4:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(pow(a, 2) + pow(h / 2, 2))\n           ^~~~\n/tmp/tmpxti1c3fg.swift:4:17:\
    \ error: cannot find 'pow' in scope\n    return sqrt(pow(a, 2) + pow(h / 2, 2))\n\
    \                ^~~\n/tmp/tmpxti1c3fg.swift:4:29: error: cannot find 'pow' in\
    \ scope\n    return sqrt(pow(a, 2) + pow(h / 2, 2))\n                        \
    \    ^~~\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return (a * h) / Double(2.0 *\
    \ 3.14159)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpmaurvt4f.swift:4:15: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    return (a * h) / Double(2.0 * 3.14159)\n\
    \              ^\n           Double()\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return sqrt(a * a + h * h) /\
    \ 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h:\
    \ 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmplzw5p2_s.swift:4:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(a * a + h * h) / 2.0\n           ^~~~\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return sqrt(pow(a, 2) + pow(h\
    \ / 2, 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpxti1c3fg.swift:4:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(pow(a, 2) + pow(h / 2, 2))\n           ^~~~\n/tmp/tmpxti1c3fg.swift:4:17:\
    \ error: cannot find 'pow' in scope\n    return sqrt(pow(a, 2) + pow(h / 2, 2))\n\
    \                ^~~\n/tmp/tmpxti1c3fg.swift:4:29: error: cannot find 'pow' in\
    \ scope\n    return sqrt(pow(a, 2) + pow(h / 2, 2))\n                        \
    \    ^~~\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    let area = a * h\n    return\
    \ area\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h:\
    \ 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp7qo82hgt.swift:5:12: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return area\n           ^~~~\n     \
    \      Double( )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return (a * h) / Double(2.0 *\
    \ 3.14159265358979323846264338327950288)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpokz44y7j.swift:4:15: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    return (a * h) / Double(2.0 * 3.14159265358979323846264338327950288)\n\
    \              ^\n           Double()\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    let area = a * h / 2\n    return\
    \ area\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h:\
    \ 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpiokeklyb.swift:5:12: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return area\n           ^~~~\n     \
    \      Double( )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return (a * h) / Double(2.0 *\
    \ 3.14159)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpmaurvt4f.swift:4:15: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    return (a * h) / Double(2.0 * 3.14159)\n\
    \              ^\n           Double()\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return sqrt(a * a + h * h)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpg4j9k_i8.swift:4:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(a * a + h * h)\n           ^~~~\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return sqrt(pow(a, 2) + pow(h\
    \ / 2, 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpxti1c3fg.swift:4:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(pow(a, 2) + pow(h / 2, 2))\n           ^~~~\n/tmp/tmpxti1c3fg.swift:4:17:\
    \ error: cannot find 'pow' in scope\n    return sqrt(pow(a, 2) + pow(h / 2, 2))\n\
    \                ^~~\n/tmp/tmpxti1c3fg.swift:4:29: error: cannot find 'pow' in\
    \ scope\n    return sqrt(pow(a, 2) + pow(h / 2, 2))\n                        \
    \    ^~~\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return sqrt(pow(a, 2.0) + pow(h\
    \ / 2.0, 2.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpy9mebvft.swift:4:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(pow(a, 2.0) + pow(h / 2.0, 2.0))\n           ^~~~\n/tmp/tmpy9mebvft.swift:4:17:\
    \ error: cannot find 'pow' in scope\n    return sqrt(pow(a, 2.0) + pow(h / 2.0,\
    \ 2.0))\n                ^~~\n/tmp/tmpy9mebvft.swift:4:31: error: cannot find\
    \ 'pow' in scope\n    return sqrt(pow(a, 2.0) + pow(h / 2.0, 2.0))\n         \
    \                     ^~~\n/tmp/tmpy9mebvft.swift:4:37: error: binary operator\
    \ '/' cannot be applied to operands of type 'Int' and 'Double'\n    return sqrt(pow(a,\
    \ 2.0) + pow(h / 2.0, 2.0))\n                                  ~ ^ ~~~\n/tmp/tmpy9mebvft.swift:4:37:\
    \ note: overloads for '/' exist with these partially matching parameter lists:\
    \ (Double, Double), (Duration, Double), (Int, Int)\n    return sqrt(pow(a, 2.0)\
    \ + pow(h / 2.0, 2.0))\n                                    ^\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(sqrt(pow(a, 2)\
    \ + pow(h / 2, 2)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpvfzxj1z1.swift:4:19: error: cannot find 'sqrt' in scope\n    return\
    \ Double(sqrt(pow(a, 2) + pow(h / 2, 2)))\n                  ^~~~\n/tmp/tmpvfzxj1z1.swift:4:24:\
    \ error: cannot find 'pow' in scope\n    return Double(sqrt(pow(a, 2) + pow(h\
    \ / 2, 2)))\n                       ^~~\n/tmp/tmpvfzxj1z1.swift:4:36: error: cannot\
    \ find 'pow' in scope\n    return Double(sqrt(pow(a, 2) + pow(h / 2, 2)))\n  \
    \                                 ^~~\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return (a * h) / Double(2.0 *\
    \ 3.141592653589793)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpd3i4amso.swift:4:15: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    return (a * h) / Double(2.0 * 3.141592653589793)\n\
    \              ^\n           Double()\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    let area = a * h / 2\n    return\
    \ area\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h:\
    \ 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpiokeklyb.swift:5:12: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return area\n           ^~~~\n     \
    \      Double( )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return sqrt(a * a + h * h) /\
    \ 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h:\
    \ 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmplzw5p2_s.swift:4:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(a * a + h * h) / 2.0\n           ^~~~\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(sqrt(Double(a *\
    \ a + h * h)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp8xffo20x.swift:4:19: error: cannot find 'sqrt' in scope\n    return\
    \ Double(sqrt(Double(a * a + h * h)))\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return sqrt(pow(a, 2) + pow(h\
    \ / 2, 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpxti1c3fg.swift:4:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(pow(a, 2) + pow(h / 2, 2))\n           ^~~~\n/tmp/tmpxti1c3fg.swift:4:17:\
    \ error: cannot find 'pow' in scope\n    return sqrt(pow(a, 2) + pow(h / 2, 2))\n\
    \                ^~~\n/tmp/tmpxti1c3fg.swift:4:29: error: cannot find 'pow' in\
    \ scope\n    return sqrt(pow(a, 2) + pow(h / 2, 2))\n                        \
    \    ^~~\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return (a * h) / Double(2.0 *\
    \ M_PI)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h:\
    \ 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpc8ksqq_3.swift:4:35: error: cannot find 'M_PI' in scope\n    return\
    \ (a * h) / Double(2.0 * M_PI)\n                                  ^~~~\n/tmp/tmpc8ksqq_3.swift:4:15:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Double'\n\
    \    return (a * h) / Double(2.0 * M_PI)\n              ^\n           Double()\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return sqrt(pow(a, 2) + pow((h\
    \ / 2), 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpq434jyma.swift:4:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(pow(a, 2) + pow((h / 2), 2))\n           ^~~~\n/tmp/tmpq434jyma.swift:4:17:\
    \ error: cannot find 'pow' in scope\n    return sqrt(pow(a, 2) + pow((h / 2),\
    \ 2))\n                ^~~\n/tmp/tmpq434jyma.swift:4:29: error: cannot find 'pow'\
    \ in scope\n    return sqrt(pow(a, 2) + pow((h / 2), 2))\n                   \
    \         ^~~\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(sqrt(pow(a, 2)\
    \ + pow(h / 2, 2)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpvfzxj1z1.swift:4:19: error: cannot find 'sqrt' in scope\n    return\
    \ Double(sqrt(pow(a, 2) + pow(h / 2, 2)))\n                  ^~~~\n/tmp/tmpvfzxj1z1.swift:4:24:\
    \ error: cannot find 'pow' in scope\n    return Double(sqrt(pow(a, 2) + pow(h\
    \ / 2, 2)))\n                       ^~~\n/tmp/tmpvfzxj1z1.swift:4:36: error: cannot\
    \ find 'pow' in scope\n    return Double(sqrt(pow(a, 2) + pow(h / 2, 2)))\n  \
    \                                 ^~~\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(sqrt(Double(a *\
    \ a + h * h)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp8xffo20x.swift:4:19: error: cannot find 'sqrt' in scope\n    return\
    \ Double(sqrt(Double(a * a + h * h)))\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return sqrt(pow(a, 2) + pow(h\
    \ / 2, 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpxti1c3fg.swift:4:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(pow(a, 2) + pow(h / 2, 2))\n           ^~~~\n/tmp/tmpxti1c3fg.swift:4:17:\
    \ error: cannot find 'pow' in scope\n    return sqrt(pow(a, 2) + pow(h / 2, 2))\n\
    \                ^~~\n/tmp/tmpxti1c3fg.swift:4:29: error: cannot find 'pow' in\
    \ scope\n    return sqrt(pow(a, 2) + pow(h / 2, 2))\n                        \
    \    ^~~\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(sqrt(pow(a, 2)\
    \ + pow(h / 2, 2)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpvfzxj1z1.swift:4:19: error: cannot find 'sqrt' in scope\n    return\
    \ Double(sqrt(pow(a, 2) + pow(h / 2, 2)))\n                  ^~~~\n/tmp/tmpvfzxj1z1.swift:4:24:\
    \ error: cannot find 'pow' in scope\n    return Double(sqrt(pow(a, 2) + pow(h\
    \ / 2, 2)))\n                       ^~~\n/tmp/tmpvfzxj1z1.swift:4:36: error: cannot\
    \ find 'pow' in scope\n    return Double(sqrt(pow(a, 2) + pow(h / 2, 2)))\n  \
    \                                 ^~~\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return (a * h) / Double(6)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp0nnlwwb0.swift:4:15: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    return (a * h) / Double(6)\n       \
    \       ^\n           Double()\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return sqrt(pow(a, 2) + pow(h\
    \ / 2, 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpxti1c3fg.swift:4:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(pow(a, 2) + pow(h / 2, 2))\n           ^~~~\n/tmp/tmpxti1c3fg.swift:4:17:\
    \ error: cannot find 'pow' in scope\n    return sqrt(pow(a, 2) + pow(h / 2, 2))\n\
    \                ^~~\n/tmp/tmpxti1c3fg.swift:4:29: error: cannot find 'pow' in\
    \ scope\n    return sqrt(pow(a, 2) + pow(h / 2, 2))\n                        \
    \    ^~~\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return sqrt(pow(a, 2) + pow(h\
    \ / 2, 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpxti1c3fg.swift:4:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(pow(a, 2) + pow(h / 2, 2))\n           ^~~~\n/tmp/tmpxti1c3fg.swift:4:17:\
    \ error: cannot find 'pow' in scope\n    return sqrt(pow(a, 2) + pow(h / 2, 2))\n\
    \                ^~~\n/tmp/tmpxti1c3fg.swift:4:29: error: cannot find 'pow' in\
    \ scope\n    return sqrt(pow(a, 2) + pow(h / 2, 2))\n                        \
    \    ^~~\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return sqrt(pow(a, 2) + pow(h\
    \ / 2, 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpxti1c3fg.swift:4:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(pow(a, 2) + pow(h / 2, 2))\n           ^~~~\n/tmp/tmpxti1c3fg.swift:4:17:\
    \ error: cannot find 'pow' in scope\n    return sqrt(pow(a, 2) + pow(h / 2, 2))\n\
    \                ^~~\n/tmp/tmpxti1c3fg.swift:4:29: error: cannot find 'pow' in\
    \ scope\n    return sqrt(pow(a, 2) + pow(h / 2, 2))\n                        \
    \    ^~~\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return (a * h) / Double(2.0 *\
    \ 3.14159)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpmaurvt4f.swift:4:15: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    return (a * h) / Double(2.0 * 3.14159)\n\
    \              ^\n           Double()\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return (a * h) / Double(2.0 *\
    \ M_PI)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h:\
    \ 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpc8ksqq_3.swift:4:35: error: cannot find 'M_PI' in scope\n    return\
    \ (a * h) / Double(2.0 * M_PI)\n                                  ^~~~\n/tmp/tmpc8ksqq_3.swift:4:15:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Double'\n\
    \    return (a * h) / Double(2.0 * M_PI)\n              ^\n           Double()\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    let area = a * h / 2\n    return\
    \ area\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h:\
    \ 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpiokeklyb.swift:5:12: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return area\n           ^~~~\n     \
    \      Double( )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return sqrt(a * a + h * h) /\
    \ 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h:\
    \ 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmplzw5p2_s.swift:4:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(a * a + h * h) / 2.0\n           ^~~~\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return (a * h) / Double(2.0 *\
    \ M_PI)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h:\
    \ 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpc8ksqq_3.swift:4:35: error: cannot find 'M_PI' in scope\n    return\
    \ (a * h) / Double(2.0 * M_PI)\n                                  ^~~~\n/tmp/tmpc8ksqq_3.swift:4:15:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Double'\n\
    \    return (a * h) / Double(2.0 * M_PI)\n              ^\n           Double()\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return (a * h) / Double(a * a\
    \ + h * h)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp5o1ipreg.swift:4:15: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    return (a * h) / Double(a * a + h *\
    \ h)\n              ^\n           Double()\n"
  stdout: ''
  timestamp: 1659979482
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(sqrt(pow(a, 2)\
    \ + pow(h / 2, 2)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpvfzxj1z1.swift:4:19: error: cannot find 'sqrt' in scope\n    return\
    \ Double(sqrt(pow(a, 2) + pow(h / 2, 2)))\n                  ^~~~\n/tmp/tmpvfzxj1z1.swift:4:24:\
    \ error: cannot find 'pow' in scope\n    return Double(sqrt(pow(a, 2) + pow(h\
    \ / 2, 2)))\n                       ^~~\n/tmp/tmpvfzxj1z1.swift:4:36: error: cannot\
    \ find 'pow' in scope\n    return Double(sqrt(pow(a, 2) + pow(h / 2, 2)))\n  \
    \                                 ^~~\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return (a * h) / Double(2.0 *\
    \ 3.14159)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpmaurvt4f.swift:4:15: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    return (a * h) / Double(2.0 * 3.14159)\n\
    \              ^\n           Double()\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    let area = a * h / 2\n    return\
    \ area\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h:\
    \ 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpiokeklyb.swift:5:12: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return area\n           ^~~~\n     \
    \      Double( )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return (a * h) / Double(2.0 *\
    \ 3.14159)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpmaurvt4f.swift:4:15: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    return (a * h) / Double(2.0 * 3.14159)\n\
    \              ^\n           Double()\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return (a * h) / Double(6)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp0nnlwwb0.swift:4:15: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    return (a * h) / Double(6)\n       \
    \       ^\n           Double()\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    let area = a * h / 2\n    return\
    \ area\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h:\
    \ 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpiokeklyb.swift:5:12: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return area\n           ^~~~\n     \
    \      Double( )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return (a * h) / Double(2.0 *\
    \ 3.14159)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpmaurvt4f.swift:4:15: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    return (a * h) / Double(2.0 * 3.14159)\n\
    \              ^\n           Double()\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return sqrt(a * a + h * h) /\
    \ 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h:\
    \ 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmplzw5p2_s.swift:4:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(a * a + h * h) / 2.0\n           ^~~~\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(sqrt(pow(a, 2)\
    \ + pow(h / 2, 2)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpvfzxj1z1.swift:4:19: error: cannot find 'sqrt' in scope\n    return\
    \ Double(sqrt(pow(a, 2) + pow(h / 2, 2)))\n                  ^~~~\n/tmp/tmpvfzxj1z1.swift:4:24:\
    \ error: cannot find 'pow' in scope\n    return Double(sqrt(pow(a, 2) + pow(h\
    \ / 2, 2)))\n                       ^~~\n/tmp/tmpvfzxj1z1.swift:4:36: error: cannot\
    \ find 'pow' in scope\n    return Double(sqrt(pow(a, 2) + pow(h / 2, 2)))\n  \
    \                                 ^~~\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    let area = a * h\n    return\
    \ area\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h:\
    \ 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp7qo82hgt.swift:5:12: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return area\n           ^~~~\n     \
    \      Double( )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    let area = a * h\n    return\
    \ area\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h:\
    \ 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp7qo82hgt.swift:5:12: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return area\n           ^~~~\n     \
    \      Double( )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(sqrt(Double(a *\
    \ a + h * h)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp8xffo20x.swift:4:19: error: cannot find 'sqrt' in scope\n    return\
    \ Double(sqrt(Double(a * a + h * h)))\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return (a * h) / Double(2.0 *\
    \ 3.14159)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpmaurvt4f.swift:4:15: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    return (a * h) / Double(2.0 * 3.14159)\n\
    \              ^\n           Double()\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(sqrt(pow(a, 2)\
    \ + pow((h / 2), 2)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpohzmc_e0.swift:4:19: error: cannot find 'sqrt' in scope\n    return\
    \ Double(sqrt(pow(a, 2) + pow((h / 2), 2)))\n                  ^~~~\n/tmp/tmpohzmc_e0.swift:4:24:\
    \ error: cannot find 'pow' in scope\n    return Double(sqrt(pow(a, 2) + pow((h\
    \ / 2), 2)))\n                       ^~~\n/tmp/tmpohzmc_e0.swift:4:36: error:\
    \ cannot find 'pow' in scope\n    return Double(sqrt(pow(a, 2) + pow((h / 2),\
    \ 2)))\n                                   ^~~\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return sqrt(pow(a, 2) + pow(h\
    \ / 2, 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpxti1c3fg.swift:4:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(pow(a, 2) + pow(h / 2, 2))\n           ^~~~\n/tmp/tmpxti1c3fg.swift:4:17:\
    \ error: cannot find 'pow' in scope\n    return sqrt(pow(a, 2) + pow(h / 2, 2))\n\
    \                ^~~\n/tmp/tmpxti1c3fg.swift:4:29: error: cannot find 'pow' in\
    \ scope\n    return sqrt(pow(a, 2) + pow(h / 2, 2))\n                        \
    \    ^~~\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: -4
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h) / Double(a\
    \ * a + h * h)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: Exception
  stderr: 'tmpe5d3dp3o/tmpe5d3dp3o.swift:20: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a0507c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a01feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a01fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a01fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe5d3dp3o                        0x000055715b3341c7 <unavailable> + 4551

    5    libc.so.6                          0x00002ba2a06f3460 __libc_start_main +
    245

    6    tmpe5d3dp3o                        0x000055715b333e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return (a * h) / Double(3.0)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp58tbjbm2.swift:4:15: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    return (a * h) / Double(3.0)\n     \
    \         ^\n           Double()\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return (a * h) / Double(3.0)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp58tbjbm2.swift:4:15: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    return (a * h) / Double(3.0)\n     \
    \         ^\n           Double()\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return sqrt(pow(a, 2) + pow(h\
    \ / 2, 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpxti1c3fg.swift:4:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(pow(a, 2) + pow(h / 2, 2))\n           ^~~~\n/tmp/tmpxti1c3fg.swift:4:17:\
    \ error: cannot find 'pow' in scope\n    return sqrt(pow(a, 2) + pow(h / 2, 2))\n\
    \                ^~~\n/tmp/tmpxti1c3fg.swift:4:29: error: cannot find 'pow' in\
    \ scope\n    return sqrt(pow(a, 2) + pow(h / 2, 2))\n                        \
    \    ^~~\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return (a * h) / Double(2.0 *\
    \ M_PI)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h:\
    \ 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpc8ksqq_3.swift:4:35: error: cannot find 'M_PI' in scope\n    return\
    \ (a * h) / Double(2.0 * M_PI)\n                                  ^~~~\n/tmp/tmpc8ksqq_3.swift:4:15:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Double'\n\
    \    return (a * h) / Double(2.0 * M_PI)\n              ^\n           Double()\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(sqrt(Double(a*a\
    \ + h*h)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp71mm9lf1.swift:4:19: error: cannot find 'sqrt' in scope\n    return\
    \ Double(sqrt(Double(a*a + h*h)))\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    let area = a * h / 2\n    return\
    \ area\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h:\
    \ 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpiokeklyb.swift:5:12: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return area\n           ^~~~\n     \
    \      Double( )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return (a * h) / Double(2.0 *\
    \ 3.14159)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpmaurvt4f.swift:4:15: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    return (a * h) / Double(2.0 * 3.14159)\n\
    \              ^\n           Double()\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    let area = a * h / 2\n    return\
    \ area\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h:\
    \ 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpiokeklyb.swift:5:12: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return area\n           ^~~~\n     \
    \      Double( )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return (a * h) / Double(2.0 *\
    \ 3.14159)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpmaurvt4f.swift:4:15: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    return (a * h) / Double(2.0 * 3.14159)\n\
    \              ^\n           Double()\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return sqrt(pow(a, 2) + pow(h\
    \ / 2, 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpxti1c3fg.swift:4:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(pow(a, 2) + pow(h / 2, 2))\n           ^~~~\n/tmp/tmpxti1c3fg.swift:4:17:\
    \ error: cannot find 'pow' in scope\n    return sqrt(pow(a, 2) + pow(h / 2, 2))\n\
    \                ^~~\n/tmp/tmpxti1c3fg.swift:4:29: error: cannot find 'pow' in\
    \ scope\n    return sqrt(pow(a, 2) + pow(h / 2, 2))\n                        \
    \    ^~~\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    let area = a * h\n    return\
    \ area\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h:\
    \ 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp7qo82hgt.swift:5:12: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return area\n           ^~~~\n     \
    \      Double( )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(sqrt(pow(a, 2)\
    \ + pow(h / 2, 2)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpvfzxj1z1.swift:4:19: error: cannot find 'sqrt' in scope\n    return\
    \ Double(sqrt(pow(a, 2) + pow(h / 2, 2)))\n                  ^~~~\n/tmp/tmpvfzxj1z1.swift:4:24:\
    \ error: cannot find 'pow' in scope\n    return Double(sqrt(pow(a, 2) + pow(h\
    \ / 2, 2)))\n                       ^~~\n/tmp/tmpvfzxj1z1.swift:4:36: error: cannot\
    \ find 'pow' in scope\n    return Double(sqrt(pow(a, 2) + pow(h / 2, 2)))\n  \
    \                                 ^~~\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    let area = a * h / 2\n    return\
    \ area\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h:\
    \ 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpiokeklyb.swift:5:12: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return area\n           ^~~~\n     \
    \      Double( )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return sqrt(pow(a, 2) + pow(h\
    \ / 2, 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpxti1c3fg.swift:4:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(pow(a, 2) + pow(h / 2, 2))\n           ^~~~\n/tmp/tmpxti1c3fg.swift:4:17:\
    \ error: cannot find 'pow' in scope\n    return sqrt(pow(a, 2) + pow(h / 2, 2))\n\
    \                ^~~\n/tmp/tmpxti1c3fg.swift:4:29: error: cannot find 'pow' in\
    \ scope\n    return sqrt(pow(a, 2) + pow(h / 2, 2))\n                        \
    \    ^~~\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return (a * h) / Double(2.0 *\
    \ 3.14159)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpmaurvt4f.swift:4:15: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    return (a * h) / Double(2.0 * 3.14159)\n\
    \              ^\n           Double()\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return sqrt(pow(a, 2) + pow(h\
    \ / 2, 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpxti1c3fg.swift:4:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(pow(a, 2) + pow(h / 2, 2))\n           ^~~~\n/tmp/tmpxti1c3fg.swift:4:17:\
    \ error: cannot find 'pow' in scope\n    return sqrt(pow(a, 2) + pow(h / 2, 2))\n\
    \                ^~~\n/tmp/tmpxti1c3fg.swift:4:29: error: cannot find 'pow' in\
    \ scope\n    return sqrt(pow(a, 2) + pow(h / 2, 2))\n                        \
    \    ^~~\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return sqrt(pow(a, 2) + pow(h\
    \ / 2, 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpxti1c3fg.swift:4:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(pow(a, 2) + pow(h / 2, 2))\n           ^~~~\n/tmp/tmpxti1c3fg.swift:4:17:\
    \ error: cannot find 'pow' in scope\n    return sqrt(pow(a, 2) + pow(h / 2, 2))\n\
    \                ^~~\n/tmp/tmpxti1c3fg.swift:4:29: error: cannot find 'pow' in\
    \ scope\n    return sqrt(pow(a, 2) + pow(h / 2, 2))\n                        \
    \    ^~~\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return (a * h) / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpz4aw47cw.swift:4:20: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return (a * h) / 2\n           ~~~~~~~~^~~\n\
    \           Double(    )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return (a * h) / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpz4aw47cw.swift:4:20: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return (a * h) / 2\n           ~~~~~~~~^~~\n\
    \           Double(    )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return (a * h) / Double(2.0 *\
    \ 3.141592653589793)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpd3i4amso.swift:4:15: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    return (a * h) / Double(2.0 * 3.141592653589793)\n\
    \              ^\n           Double()\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(sqrt(pow(a, 2)\
    \ + pow((h / 2), 2)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpohzmc_e0.swift:4:19: error: cannot find 'sqrt' in scope\n    return\
    \ Double(sqrt(pow(a, 2) + pow((h / 2), 2)))\n                  ^~~~\n/tmp/tmpohzmc_e0.swift:4:24:\
    \ error: cannot find 'pow' in scope\n    return Double(sqrt(pow(a, 2) + pow((h\
    \ / 2), 2)))\n                       ^~~\n/tmp/tmpohzmc_e0.swift:4:36: error:\
    \ cannot find 'pow' in scope\n    return Double(sqrt(pow(a, 2) + pow((h / 2),\
    \ 2)))\n                                   ^~~\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    let area = a * h / 2\n    return\
    \ area\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h:\
    \ 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpiokeklyb.swift:5:12: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return area\n           ^~~~\n     \
    \      Double( )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return (a * h) / Double(6)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp0nnlwwb0.swift:4:15: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    return (a * h) / Double(6)\n       \
    \       ^\n           Double()\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return sqrt(pow(a, 2) + pow(h\
    \ / 2, 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpxti1c3fg.swift:4:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(pow(a, 2) + pow(h / 2, 2))\n           ^~~~\n/tmp/tmpxti1c3fg.swift:4:17:\
    \ error: cannot find 'pow' in scope\n    return sqrt(pow(a, 2) + pow(h / 2, 2))\n\
    \                ^~~\n/tmp/tmpxti1c3fg.swift:4:29: error: cannot find 'pow' in\
    \ scope\n    return sqrt(pow(a, 2) + pow(h / 2, 2))\n                        \
    \    ^~~\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return (a * h) / Double(6)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp0nnlwwb0.swift:4:15: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    return (a * h) / Double(6)\n       \
    \       ^\n           Double()\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return (a * h) / Double(2.0 *\
    \ 3.14159)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpmaurvt4f.swift:4:15: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    return (a * h) / Double(2.0 * 3.14159)\n\
    \              ^\n           Double()\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return sqrt(a * a + h * h) /\
    \ 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h:\
    \ 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmplzw5p2_s.swift:4:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(a * a + h * h) / 2.0\n           ^~~~\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    let area = a * h / 2\n    return\
    \ area\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h:\
    \ 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpiokeklyb.swift:5:12: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return area\n           ^~~~\n     \
    \      Double( )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: -4
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(a * h / 2)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: Exception
  stderr: 'tmp9n_1507y/tmp9n_1507y.swift:20: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade2ddb4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade2daabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade2daab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade2daaa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9n_1507y                        0x000055c17c24a257 <unavailable> + 4695

    5    libc.so.6                          0x00002ade2dfa0460 __libc_start_main +
    245

    6    tmp9n_1507y                        0x000055c17c249ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(sqrt(pow(a, 2)\
    \ + pow(h / 2, 2)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpvfzxj1z1.swift:4:19: error: cannot find 'sqrt' in scope\n    return\
    \ Double(sqrt(pow(a, 2) + pow(h / 2, 2)))\n                  ^~~~\n/tmp/tmpvfzxj1z1.swift:4:24:\
    \ error: cannot find 'pow' in scope\n    return Double(sqrt(pow(a, 2) + pow(h\
    \ / 2, 2)))\n                       ^~~\n/tmp/tmpvfzxj1z1.swift:4:36: error: cannot\
    \ find 'pow' in scope\n    return Double(sqrt(pow(a, 2) + pow(h / 2, 2)))\n  \
    \                                 ^~~\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return (a * h) / Double(2.0 *\
    \ 3.14159)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpmaurvt4f.swift:4:15: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    return (a * h) / Double(2.0 * 3.14159)\n\
    \              ^\n           Double()\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(sqrt(Double(a*a\
    \ + h*h)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp71mm9lf1.swift:4:19: error: cannot find 'sqrt' in scope\n    return\
    \ Double(sqrt(Double(a*a + h*h)))\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    let area = a * h / 2\n    return\
    \ area\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h:\
    \ 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpiokeklyb.swift:5:12: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return area\n           ^~~~\n     \
    \      Double( )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return (a * h) / Double(2.0 *\
    \ 3.14159)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpmaurvt4f.swift:4:15: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    return (a * h) / Double(2.0 * 3.14159)\n\
    \              ^\n           Double()\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    let area = a * h / 2\n    return\
    \ area\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h:\
    \ 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpiokeklyb.swift:5:12: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return area\n           ^~~~\n     \
    \      Double( )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return sqrt(pow(a, 2) + pow((h\
    \ / 2), 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpq434jyma.swift:4:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(pow(a, 2) + pow((h / 2), 2))\n           ^~~~\n/tmp/tmpq434jyma.swift:4:17:\
    \ error: cannot find 'pow' in scope\n    return sqrt(pow(a, 2) + pow((h / 2),\
    \ 2))\n                ^~~\n/tmp/tmpq434jyma.swift:4:29: error: cannot find 'pow'\
    \ in scope\n    return sqrt(pow(a, 2) + pow((h / 2), 2))\n                   \
    \         ^~~\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return (a * h) / Double(2.0 *\
    \ M_PI)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h:\
    \ 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpc8ksqq_3.swift:4:35: error: cannot find 'M_PI' in scope\n    return\
    \ (a * h) / Double(2.0 * M_PI)\n                                  ^~~~\n/tmp/tmpc8ksqq_3.swift:4:15:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Double'\n\
    \    return (a * h) / Double(2.0 * M_PI)\n              ^\n           Double()\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return (a * h) / Double(2.0 *\
    \ 3.14159)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpmaurvt4f.swift:4:15: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    return (a * h) / Double(2.0 * 3.14159)\n\
    \              ^\n           Double()\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return (a * h) / Double(2.0 *\
    \ 3.14159)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpmaurvt4f.swift:4:15: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    return (a * h) / Double(2.0 * 3.14159)\n\
    \              ^\n           Double()\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    let area = a * h / 2\n    return\
    \ area\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h:\
    \ 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpiokeklyb.swift:5:12: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return area\n           ^~~~\n     \
    \      Double( )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    let area = a * h\n    return\
    \ area\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h:\
    \ 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp7qo82hgt.swift:5:12: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return area\n           ^~~~\n     \
    \      Double( )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return sqrt(pow(a, 2) + pow(h\
    \ / 2, 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpxti1c3fg.swift:4:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(pow(a, 2) + pow(h / 2, 2))\n           ^~~~\n/tmp/tmpxti1c3fg.swift:4:17:\
    \ error: cannot find 'pow' in scope\n    return sqrt(pow(a, 2) + pow(h / 2, 2))\n\
    \                ^~~\n/tmp/tmpxti1c3fg.swift:4:29: error: cannot find 'pow' in\
    \ scope\n    return sqrt(pow(a, 2) + pow(h / 2, 2))\n                        \
    \    ^~~\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return (a * h) / Double(2.0 *\
    \ M_PI)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h:\
    \ 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpc8ksqq_3.swift:4:35: error: cannot find 'M_PI' in scope\n    return\
    \ (a * h) / Double(2.0 * M_PI)\n                                  ^~~~\n/tmp/tmpc8ksqq_3.swift:4:15:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Double'\n\
    \    return (a * h) / Double(2.0 * M_PI)\n              ^\n           Double()\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return sqrt(pow(a, 2) + pow(h\
    \ / 2, 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpxti1c3fg.swift:4:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(pow(a, 2) + pow(h / 2, 2))\n           ^~~~\n/tmp/tmpxti1c3fg.swift:4:17:\
    \ error: cannot find 'pow' in scope\n    return sqrt(pow(a, 2) + pow(h / 2, 2))\n\
    \                ^~~\n/tmp/tmpxti1c3fg.swift:4:29: error: cannot find 'pow' in\
    \ scope\n    return sqrt(pow(a, 2) + pow(h / 2, 2))\n                        \
    \    ^~~\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(sqrt(pow(a, 2)\
    \ + pow(h / 2, 2)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpvfzxj1z1.swift:4:19: error: cannot find 'sqrt' in scope\n    return\
    \ Double(sqrt(pow(a, 2) + pow(h / 2, 2)))\n                  ^~~~\n/tmp/tmpvfzxj1z1.swift:4:24:\
    \ error: cannot find 'pow' in scope\n    return Double(sqrt(pow(a, 2) + pow(h\
    \ / 2, 2)))\n                       ^~~\n/tmp/tmpvfzxj1z1.swift:4:36: error: cannot\
    \ find 'pow' in scope\n    return Double(sqrt(pow(a, 2) + pow(h / 2, 2)))\n  \
    \                                 ^~~\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    let area = a * h / 2\n    return\
    \ area\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h:\
    \ 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpiokeklyb.swift:5:12: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return area\n           ^~~~\n     \
    \      Double( )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    let area = a * h\n    return\
    \ area\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h:\
    \ 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp7qo82hgt.swift:5:12: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return area\n           ^~~~\n     \
    \      Double( )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    let area = a * h\n    return\
    \ area\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h:\
    \ 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp7qo82hgt.swift:5:12: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return area\n           ^~~~\n     \
    \      Double( )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    let area = a * h / 2\n    return\
    \ area\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h:\
    \ 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpiokeklyb.swift:5:12: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return area\n           ^~~~\n     \
    \      Double( )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return (a * h) / Double(2.0 *\
    \ 3.14159)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpmaurvt4f.swift:4:15: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    return (a * h) / Double(2.0 * 3.14159)\n\
    \              ^\n           Double()\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return (a * h) / Double(2.0 *\
    \ M_PI);\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpht08040w.swift:4:35: error: cannot find 'M_PI' in scope\n    return\
    \ (a * h) / Double(2.0 * M_PI);\n                                  ^~~~\n/tmp/tmpht08040w.swift:4:15:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Double'\n\
    \    return (a * h) / Double(2.0 * M_PI);\n              ^\n           Double()\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(sqrt(pow(a, 2)\
    \ + pow((h / 2), 2)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpohzmc_e0.swift:4:19: error: cannot find 'sqrt' in scope\n    return\
    \ Double(sqrt(pow(a, 2) + pow((h / 2), 2)))\n                  ^~~~\n/tmp/tmpohzmc_e0.swift:4:24:\
    \ error: cannot find 'pow' in scope\n    return Double(sqrt(pow(a, 2) + pow((h\
    \ / 2), 2)))\n                       ^~~\n/tmp/tmpohzmc_e0.swift:4:36: error:\
    \ cannot find 'pow' in scope\n    return Double(sqrt(pow(a, 2) + pow((h / 2),\
    \ 2)))\n                                   ^~~\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return sqrt(pow(a, 2) + pow(h\
    \ / 2, 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpxti1c3fg.swift:4:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(pow(a, 2) + pow(h / 2, 2))\n           ^~~~\n/tmp/tmpxti1c3fg.swift:4:17:\
    \ error: cannot find 'pow' in scope\n    return sqrt(pow(a, 2) + pow(h / 2, 2))\n\
    \                ^~~\n/tmp/tmpxti1c3fg.swift:4:29: error: cannot find 'pow' in\
    \ scope\n    return sqrt(pow(a, 2) + pow(h / 2, 2))\n                        \
    \    ^~~\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return (a * h) / Double(2.0 *\
    \ 3.14159)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpmaurvt4f.swift:4:15: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    return (a * h) / Double(2.0 * 3.14159)\n\
    \              ^\n           Double()\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    let area = a * h / 2\n    return\
    \ area\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h:\
    \ 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpiokeklyb.swift:5:12: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return area\n           ^~~~\n     \
    \      Double( )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(sqrt(pow(a, 2)\
    \ + pow(h / 2, 2)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpvfzxj1z1.swift:4:19: error: cannot find 'sqrt' in scope\n    return\
    \ Double(sqrt(pow(a, 2) + pow(h / 2, 2)))\n                  ^~~~\n/tmp/tmpvfzxj1z1.swift:4:24:\
    \ error: cannot find 'pow' in scope\n    return Double(sqrt(pow(a, 2) + pow(h\
    \ / 2, 2)))\n                       ^~~\n/tmp/tmpvfzxj1z1.swift:4:36: error: cannot\
    \ find 'pow' in scope\n    return Double(sqrt(pow(a, 2) + pow(h / 2, 2)))\n  \
    \                                 ^~~\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return (a * h) / Double(2.0 *\
    \ 3.14159)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpmaurvt4f.swift:4:15: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    return (a * h) / Double(2.0 * 3.14159)\n\
    \              ^\n           Double()\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return sqrt(pow(a, 2.0) + pow(h\
    \ / 2.0, 2.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpy9mebvft.swift:4:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(pow(a, 2.0) + pow(h / 2.0, 2.0))\n           ^~~~\n/tmp/tmpy9mebvft.swift:4:17:\
    \ error: cannot find 'pow' in scope\n    return sqrt(pow(a, 2.0) + pow(h / 2.0,\
    \ 2.0))\n                ^~~\n/tmp/tmpy9mebvft.swift:4:31: error: cannot find\
    \ 'pow' in scope\n    return sqrt(pow(a, 2.0) + pow(h / 2.0, 2.0))\n         \
    \                     ^~~\n/tmp/tmpy9mebvft.swift:4:37: error: binary operator\
    \ '/' cannot be applied to operands of type 'Int' and 'Double'\n    return sqrt(pow(a,\
    \ 2.0) + pow(h / 2.0, 2.0))\n                                  ~ ^ ~~~\n/tmp/tmpy9mebvft.swift:4:37:\
    \ note: overloads for '/' exist with these partially matching parameter lists:\
    \ (Double, Double), (Duration, Double), (Int, Int)\n    return sqrt(pow(a, 2.0)\
    \ + pow(h / 2.0, 2.0))\n                                    ^\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    let area = a * h\n    return\
    \ area\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h:\
    \ 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp7qo82hgt.swift:5:12: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return area\n           ^~~~\n     \
    \      Double( )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return a * h / 2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmp07uu52ky.swift:4:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a * h / 2\n           ~~~~~~^~~\n\
    \           Double(  )\n"
  stdout: ''
  timestamp: 1659979481
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\nfunc\
    \ triangle_area(a: Int, h: Int) -> Double {\n    return Double(sqrt(pow(a, 2)\
    \ + pow((h / 2), 2)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpohzmc_e0.swift:4:19: error: cannot find 'sqrt' in scope\n    return\
    \ Double(sqrt(pow(a, 2) + pow((h / 2), 2)))\n                  ^~~~\n/tmp/tmpohzmc_e0.swift:4:24:\
    \ error: cannot find 'pow' in scope\n    return Double(sqrt(pow(a, 2) + pow((h\
    \ / 2), 2)))\n                       ^~~\n/tmp/tmpohzmc_e0.swift:4:36: error:\
    \ cannot find 'pow' in scope\n    return Double(sqrt(pow(a, 2) + pow((h / 2),\
    \ 2)))\n                                   ^~~\n"
  stdout: ''
  timestamp: 1659979481
