language: swift
name: HumanEval_95_check_dict_case
results:
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard dict.count\
    \ > 0 else { return false }\n    \n    for case in 0..<dict.count {\n        let\
    \ key = dict.keys.array[case]\n        let value = dict.values.array[case]\n \
    \       \n        if case == 0 {\n            if let str = key as? String {\n\
    \                if str.isEmpty {\n                    return false\n        \
    \        }\n            }\n            else {\n                return false\n\
    \            }\n        }\n        else if case == dict.count - 1 {\n        \
    \    if let str = value as? String {\n                if str.isEmpty {\n     \
    \               return false\n                }\n            }\n            else\
    \ {\n                return false\n            }\n        }\n        else {\n\
    \            if let str = key as? String {\n                if str.isEmpty {\n\
    \                    return false\n                }\n            }\n        \
    \    else {\n                return false\n            }\n        }\n    }\n \
    \   \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmplqizlpjv.swift:9:14: error: expected pattern\n    for case in 0..<dict.count\
    \ {\n             ^\n/tmp/tmplqizlpjv.swift:10:35: error: expected expression\
    \ in list of expressions\n        let key = dict.keys.array[case]\n          \
    \                        ^\n/tmp/tmplqizlpjv.swift:11:39: error: expected expression\
    \ in list of expressions\n        let value = dict.values.array[case]\n      \
    \                                ^\n/tmp/tmplqizlpjv.swift:13:17: error: unary\
    \ operator cannot be separated from its operand\n        if case == 0 {\n    \
    \            ^ ~\n                  \n/tmp/tmplqizlpjv.swift:13:22: error: variable\
    \ binding in a condition requires an initializer\n        if case == 0 {\n   \
    \                  ^\n/tmp/tmplqizlpjv.swift:23:22: error: unary operator cannot\
    \ be separated from its operand\n        else if case == dict.count - 1 {\n  \
    \                   ^ ~\n                       \n/tmp/tmplqizlpjv.swift:23:40:\
    \ error: variable binding in a condition requires an initializer\n        else\
    \ if case == dict.count - 1 {\n                                       ^\n/tmp/tmplqizlpjv.swift:10:29:\
    \ error: value of type 'Dictionary<String, String>.Keys' has no member 'array'\n\
    \        let key = dict.keys.array[case]\n                  ~~~~~~~~~ ^~~~~\n\
    /tmp/tmplqizlpjv.swift:11:33: error: value of type 'Dictionary<String, String>.Values'\
    \ has no member 'array'\n        let value = dict.values.array[case]\n       \
    \             ~~~~~~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660011623
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard dict.count\
    \ > 0 else { return false }\n    for (_, value) in dict {\n        if let value\
    \ = value as? String {\n            if value.lowercaseString.isEmpty {\n     \
    \           return false\n            } else if value.uppercaseString.isEmpty\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpo2er92_9.swift:9:30: warning: conditional cast from 'String' to\
    \ 'String' always succeeds\n        if let value = value as? String {\n      \
    \                       ^\n/tmp/tmpo2er92_9.swift:10:22: error: value of type\
    \ 'String' has no member 'lowercaseString'\n            if value.lowercaseString.isEmpty\
    \ {\n               ~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpo2er92_9.swift:12:29: error:\
    \ value of type 'String' has no member 'uppercaseString'\n            } else if\
    \ value.uppercaseString.isEmpty {\n                      ~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011623
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    if dict.count ==\
    \ 0 {\n        return false\n    }\n    for (_, value) in dict {\n        if let\
    \ string = value as? String {\n            if string.lowercaseString.isEmpty {\n\
    \                return false\n            }\n            if string.uppercaseString.isEmpty\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0rlvdmyz.swift:11:31: warning: conditional cast from 'String' to\
    \ 'String' always succeeds\n        if let string = value as? String {\n     \
    \                         ^\n/tmp/tmp0rlvdmyz.swift:12:23: error: value of type\
    \ 'String' has no member 'lowercaseString'\n            if string.lowercaseString.isEmpty\
    \ {\n               ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp0rlvdmyz.swift:15:23: error:\
    \ value of type 'String' has no member 'uppercaseString'\n            if string.uppercaseString.isEmpty\
    \ {\n               ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011623
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    for (_, value) in dict {\n        if let value =\
    \ value as? String {\n            if value.lowercased() == value {\n         \
    \       return true\n            } else if value.uppercased() == value {\n   \
    \             return true\n            }\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpes5s8ifh/tmpes5s8ifh.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b70a813cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b70a7e33b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b70a7e33988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70a7e327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpes5s8ifh                        0x0000557e15d099c5 <unavailable> + 6597

    5    libc.so.6                          0x00002b70a8328460 __libc_start_main +
    245

    6    tmpes5s8ifh                        0x0000557e15d093a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660011623
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    \n    for (_, value) in dict {\n        if let value\
    \ = value as? String {\n            if value.lowercased() == value {\n       \
    \         return true\n            } else if value.uppercased() == value {\n \
    \               return true\n            }\n        }\n    }\n    \n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpy3ucejos/tmpy3ucejos.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba869d45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba869a3cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba869a3c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba869a3b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy3ucejos                        0x000055ca771a49c5 <unavailable> + 6597

    5    libc.so.6                          0x00002ba869f31460 __libc_start_main +
    245

    6    tmpy3ucejos                        0x000055ca771a43a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660011623
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard dict.count\
    \ > 0 else { return false }\n    for (_, value) in dict {\n        let string\
    \ = value.lowercased()\n        if string.hasSuffix(\" \") {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"\
    ]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\"\
    , \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp6edximf9/tmp6edximf9.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af48486fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af484566b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af484566988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4845657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6edximf9                        0x0000564a68cca965 <unavailable> + 6501

    5    libc.so.6                          0x00002af484a5b460 __libc_start_main +
    245

    6    tmp6edximf9                        0x0000564a68cca349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660011623
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard dict.count\
    \ > 0 else { return false }\n    \n    for k in dict.keys {\n        guard let\
    \ _ = k.lowercased() else { return false }\n        guard let _ = k.uppercased()\
    \ else { return false }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqeuebgpt.swift:10:15: error: initializer for conditional binding\
    \ must have Optional type, not 'String'\n        guard let _ = k.lowercased()\
    \ else { return false }\n              ^       ~~~~~~~~~~~~~~\n/tmp/tmpqeuebgpt.swift:11:15:\
    \ error: initializer for conditional binding must have Optional type, not 'String'\n\
    \        guard let _ = k.uppercased() else { return false }\n              ^ \
    \      ~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011623
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    for (_, value) in dict {\n        if let value =\
    \ value as? String {\n            if value.lowercased() == value {\n         \
    \       return true\n            }\n            if value.uppercased() == value\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpodsvb3nh/tmpodsvb3nh.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9973f57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9973c4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9973c4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9973c4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpodsvb3nh                        0x00005645e42ab9c5 <unavailable> + 6597

    5    libc.so.6                          0x00002b9974143460 __libc_start_main +
    245

    6    tmpodsvb3nh                        0x00005645e42ab3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660011623
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    for key in dict.keys {\n        let value = dict[key]\n\
    \        if let string = value as? String {\n            if string.lowercaseString.isEmpty\
    \ {\n                return false\n            } else if string.uppercaseString.isEmpty\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1lptxwtg.swift:10:31: warning: conditional downcast from 'String?'\
    \ to 'String' does nothing\n        if let string = value as? String {\n     \
    \                   ~~~~~~^~~~~~~~~~\n                             \n/tmp/tmp1lptxwtg.swift:11:23:\
    \ error: value of type 'String' has no member 'lowercaseString'\n            if\
    \ string.lowercaseString.isEmpty {\n               ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp1lptxwtg.swift:13:30:\
    \ error: value of type 'String' has no member 'uppercaseString'\n            }\
    \ else if string.uppercaseString.isEmpty {\n                      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011623
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    \n    for key in dict.keys {\n        guard let value\
    \ = dict[key] else { return false }\n        \n        switch value {\n      \
    \  case let value as String:\n            if value.isLowercase {\n           \
    \     return true\n            } else {\n                return false\n      \
    \      }\n        case let value as String:\n            if value.isUppercase\
    \ {\n                return true\n            } else {\n                return\
    \ false\n            }\n        default:\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1y0nsv4_.swift:13:24: warning: 'as' test is always true\n     \
    \   case let value as String:\n                       ^\n/tmp/tmp1y0nsv4_.swift:19:24:\
    \ warning: 'as' test is always true\n        case let value as String:\n     \
    \                  ^\n/tmp/tmp1y0nsv4_.swift:14:22: error: value of type 'String'\
    \ has no member 'isLowercase'\n            if value.isLowercase {\n          \
    \     ~~~~~ ^~~~~~~~~~~\n/tmp/tmp1y0nsv4_.swift:20:22: error: value of type 'String'\
    \ has no member 'isUppercase'\n            if value.isUppercase {\n          \
    \     ~~~~~ ^~~~~~~~~~~\n/tmp/tmp1y0nsv4_.swift:19:14: warning: case is already\
    \ handled by previous patterns; consider removing it\n        case let value as\
    \ String:\n             ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011623
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    for key in dict.keys {\n        let value = dict[key]\n\
    \        let lowerCase = String(key).lowercased()\n        let upperCase = String(key).uppercased()\n\
    \        if lowerCase != upperCase {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp_jd4ztlm/tmp_jd4ztlm.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab09d98fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab09d686b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab09d686988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab09d6857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_jd4ztlm                        0x000055cb2eb0d9b3 <unavailable> + 6579

    5    libc.so.6                          0x00002ab09db7b460 __libc_start_main +
    245

    6    tmp_jd4ztlm                        0x000055cb2eb0d569 <unavailable> + 5481

    '
  stdout: ''
  timestamp: 1660011623
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    if dict == nil {\n\
    \        return false\n    }\n    for k in dict.keys {\n        let v = dict[k]\n\
    \        if k == k {\n            return false\n        }\n        if k == k.lowercaseString\
    \ {\n            return true\n        }\n        if k == k.uppercaseString {\n\
    \            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvmiewmlf.swift:7:13: warning: comparing non-optional value of type\
    \ '[String : String]' to 'nil' always returns false\n    if dict == nil {\n  \
    \     ~~~~ ^  ~~~\n/tmp/tmpvmiewmlf.swift:15:19: error: value of type 'String'\
    \ has no member 'lowercaseString'\n        if k == k.lowercaseString {\n     \
    \           ~ ^~~~~~~~~~~~~~~\n/tmp/tmpvmiewmlf.swift:18:19: error: value of type\
    \ 'String' has no member 'uppercaseString'\n        if k == k.uppercaseString\
    \ {\n                ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011623
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    for key in dict.keys {\n        guard let value =\
    \ dict[key] else { return false }\n        guard let string = value as? String\
    \ else { return false }\n        guard let lowerCase = string.lowercaseString\
    \ else { return false }\n        guard let upperCase = string.uppercaseString\
    \ else { return false }\n        if lowerCase != upperCase {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"\
    ]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\"\
    , \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvrsiorwi.swift:10:34: warning: conditional cast from 'String' to\
    \ 'String' always succeeds\n        guard let string = value as? String else {\
    \ return false }\n                                 ^\n/tmp/tmpvrsiorwi.swift:11:38:\
    \ error: value of type 'String' has no member 'lowercaseString'\n        guard\
    \ let lowerCase = string.lowercaseString else { return false }\n             \
    \                 ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpvrsiorwi.swift:12:38: error:\
    \ value of type 'String' has no member 'uppercaseString'\n        guard let upperCase\
    \ = string.uppercaseString else { return false }\n                           \
    \   ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011623
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    for (_, value) in dict {\n        guard let string\
    \ = value as? String else { return false }\n        guard let lowercaseString\
    \ = string.lowercaseString else { return false }\n        guard let uppercaseString\
    \ = string.uppercaseString else { return false }\n        if lowercaseString !=\
    \ uppercaseString {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpoqosgq73.swift:9:34: warning: conditional cast from 'String' to\
    \ 'String' always succeeds\n        guard let string = value as? String else {\
    \ return false }\n                                 ^\n/tmp/tmpoqosgq73.swift:10:44:\
    \ error: value of type 'String' has no member 'lowercaseString'\n        guard\
    \ let lowercaseString = string.lowercaseString else { return false }\n       \
    \                             ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpoqosgq73.swift:11:44:\
    \ error: value of type 'String' has no member 'uppercaseString'\n        guard\
    \ let uppercaseString = string.uppercaseString else { return false }\n       \
    \                             ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011623
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    \n    for (_, value) in dict {\n        guard let\
    \ string = value as? String else { return false }\n        \n        if string.lowercased()\
    \ == string {\n            return true\n        }\n        \n        if string.uppercased()\
    \ == string {\n            return true\n        }\n    }\n    \n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpjgpoodkh/tmpjgpoodkh.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04048d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04045ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b04045ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04045cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjgpoodkh                        0x000055cf285789c5 <unavailable> + 6597

    5    libc.so.6                          0x00002b0404ac3460 __libc_start_main +
    245

    6    tmpjgpoodkh                        0x000055cf285783a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660011623
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    for key in dict.keys {\n        guard let value =\
    \ dict[key] else { return false }\n        guard let string = value as? String\
    \ else { return false }\n        guard let lowerCase = string.lowercaseString\
    \ else { return false }\n        guard let upperCase = string.uppercaseString\
    \ else { return false }\n        if lowerCase != upperCase {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"\
    ]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\"\
    , \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvrsiorwi.swift:10:34: warning: conditional cast from 'String' to\
    \ 'String' always succeeds\n        guard let string = value as? String else {\
    \ return false }\n                                 ^\n/tmp/tmpvrsiorwi.swift:11:38:\
    \ error: value of type 'String' has no member 'lowercaseString'\n        guard\
    \ let lowerCase = string.lowercaseString else { return false }\n             \
    \                 ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpvrsiorwi.swift:12:38: error:\
    \ value of type 'String' has no member 'uppercaseString'\n        guard let upperCase\
    \ = string.uppercaseString else { return false }\n                           \
    \   ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011623
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else {\n        return false\n    }\n    \n    for key in dict.keys {\n    \
    \    let lowerCase = key.lowercased()\n        let upperCase = key.uppercased()\n\
    \        \n        if lowerCase == upperCase {\n            return false\n   \
    \     }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\"\
    \ : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpoi6sa8tl/tmpoi6sa8tl.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1695b2dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1695824b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1695824988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16958237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoi6sa8tl                        0x0000559bb8c97a25 <unavailable> + 6693

    5    libc.so.6                          0x00002b1695d19460 __libc_start_main +
    245

    6    tmpoi6sa8tl                        0x0000559bb8c97409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011623
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    for key in dict.keys {\n        guard let value =\
    \ dict[key] else { return false }\n        guard let string = value as? String\
    \ else { return false }\n        guard string.lowercaseString.isEmpty == string.uppercaseString.isEmpty\
    \ else { return false }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"\
    ]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\"\
    , \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpx1qz6sji.swift:10:34: warning: conditional cast from 'String' to\
    \ 'String' always succeeds\n        guard let string = value as? String else {\
    \ return false }\n                                 ^\n/tmp/tmpx1qz6sji.swift:11:22:\
    \ error: value of type 'String' has no member 'lowercaseString'\n        guard\
    \ string.lowercaseString.isEmpty == string.uppercaseString.isEmpty else { return\
    \ false }\n              ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpx1qz6sji.swift:11:56:\
    \ error: value of type 'String' has no member 'uppercaseString'\n        guard\
    \ string.lowercaseString.isEmpty == string.uppercaseString.isEmpty else { return\
    \ false }\n                                                ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011623
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard dict.count\
    \ > 0 else { return false }\n    \n    for (_, value) in dict {\n        guard\
    \ let value = value as? String else { return false }\n        \n        if value.lowercased()\
    \ == value {\n            return true\n        }\n        \n        if value.uppercased()\
    \ == value {\n            return true\n        }\n    }\n    \n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp0sp126b2/tmp0sp126b2.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab52ff5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab52cecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab52cec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab52ceb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0sp126b2                        0x000055e83236a9c5 <unavailable> + 6597

    5    libc.so.6                          0x00002aab531e1460 __libc_start_main +
    245

    6    tmp0sp126b2                        0x000055e83236a3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660011623
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    for key in dict.keys {\n        guard let value =\
    \ dict[key] else { return false }\n        guard let string = value as? String\
    \ else { return false }\n        if string.lowercased() == string {\n        \
    \    return true\n        } else if string.uppercased() == string {\n        \
    \    return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmppb_e6eyo/tmppb_e6eyo.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34f17bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34f14b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34f14b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34f14b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppb_e6eyo                        0x000055de2c02aa65 <unavailable> + 6757

    5    libc.so.6                          0x00002b34f19aa460 __libc_start_main +
    245

    6    tmppb_e6eyo                        0x000055de2c02a449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660011623
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard dict.count\
    \ > 0 else { return false }\n    for case in dict.keys {\n        guard case is\
    \ String else { return false }\n        guard case is String else { return false\
    \ }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp7_dt50w.swift:8:14: error: expected pattern\n    for case in dict.keys\
    \ {\n             ^\n/tmp/tmpp7_dt50w.swift:9:30: error: variable binding in a\
    \ condition requires an initializer\n        guard case is String else { return\
    \ false }\n                             ^\n/tmp/tmpp7_dt50w.swift:10:30: error:\
    \ variable binding in a condition requires an initializer\n        guard case\
    \ is String else { return false }\n                             ^\n"
  stdout: ''
  timestamp: 1660011623
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard dict.count\
    \ > 0 else { return false }\n    \n    for (_, value) in dict {\n        if let\
    \ value = value {\n            if value.lowercaseString.isEmpty {\n          \
    \      return false\n            } else if value.uppercaseString.isEmpty {\n \
    \               return false\n            }\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7kwj02pm.swift:11:22: error: value of type 'String' has no member\
    \ 'lowercaseString'\n            if value.lowercaseString.isEmpty {\n        \
    \       ~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp7kwj02pm.swift:13:29: error: value of type\
    \ 'String' has no member 'uppercaseString'\n            } else if value.uppercaseString.isEmpty\
    \ {\n                      ~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp7kwj02pm.swift:10:12:\
    \ error: initializer for conditional binding must have Optional type, not 'String'\n\
    \        if let value = value {\n           ^           ~~~~~\n"
  stdout: ''
  timestamp: 1660011623
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard dict.count\
    \ > 0 else { return false }\n    \n    for k in dict.keys {\n        guard let\
    \ v = dict[k] else { return false }\n        \n        switch v.lowercased() {\n\
    \        case k as String:\n        case k as String:\n            return true\n\
    \        default:\n            return false\n        }\n    }\n    \n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp02tgl3vo.swift:13:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case k as String:\n        ^~~~~~~~~~~~~~~~~\n\
    \                          break\n/tmp/tmp02tgl3vo.swift:13:16: warning: 'as'\
    \ test is always true\n        case k as String:\n               ^\n/tmp/tmp02tgl3vo.swift:14:16:\
    \ warning: 'as' test is always true\n        case k as String:\n             \
    \  ^\n"
  stdout: ''
  timestamp: 1660011623
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard dict.count\
    \ > 0 else { return false }\n    \n    for k in dict.keys {\n        guard let\
    \ v = dict[k] else { return false }\n        \n        if v.isEmpty {\n      \
    \      return false\n        }\n        \n        if v.hasPrefix(\"\\U\") {\n\
    \            return false\n        }\n        \n        if v.hasPrefix(\"\\L\"\
    ) {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp44w158_n.swift:16:26: error: invalid escape sequence in literal\n\
    \        if v.hasPrefix(\"\\U\") {\n                         ^\n/tmp/tmp44w158_n.swift:20:26:\
    \ error: invalid escape sequence in literal\n        if v.hasPrefix(\"\\L\") {\n\
    \                         ^\n/tmp/tmp44w158_n.swift:16:28: error: missing argument\
    \ for parameter #1 in call\n        if v.hasPrefix(\"\\U\") {\n              \
    \             ^\n                           <#String#>\nSwift.String:2:17: note:\
    \ 'hasPrefix' declared here\n    public func hasPrefix(_ prefix: String) -> Bool\n\
    \                ^\n/tmp/tmp44w158_n.swift:20:28: error: missing argument for\
    \ parameter #1 in call\n        if v.hasPrefix(\"\\L\") {\n                  \
    \         ^\n                           <#String#>\nSwift.String:2:17: note: 'hasPrefix'\
    \ declared here\n    public func hasPrefix(_ prefix: String) -> Bool\n       \
    \         ^\n"
  stdout: ''
  timestamp: 1660011623
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    \n    for case in dict.keys {\n        guard case\
    \ is String else { return false }\n        guard case is String else { return\
    \ false }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp3znb010c.swift:9:14: error: expected pattern\n    for case in dict.keys\
    \ {\n             ^\n/tmp/tmp3znb010c.swift:10:30: error: variable binding in\
    \ a condition requires an initializer\n        guard case is String else { return\
    \ false }\n                             ^\n/tmp/tmp3znb010c.swift:11:30: error:\
    \ variable binding in a condition requires an initializer\n        guard case\
    \ is String else { return false }\n                             ^\n"
  stdout: ''
  timestamp: 1660011623
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard dict.count\
    \ > 0 else { return false }\n    for case in dict.keys {\n        guard case is\
    \ String else { return false }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp16ta_96x.swift:8:14: error: expected pattern\n    for case in dict.keys\
    \ {\n             ^\n/tmp/tmp16ta_96x.swift:9:30: error: variable binding in a\
    \ condition requires an initializer\n        guard case is String else { return\
    \ false }\n                             ^\n"
  stdout: ''
  timestamp: 1660011623
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    for key in dict.keys {\n        guard let value =\
    \ dict[key] else { return false }\n        guard let stringValue = value as? String\
    \ else { return false }\n        guard stringValue.lowercaseString.isEmpty ==\
    \ false || stringValue.uppercaseString.isEmpty == false else { return false }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp05jxxuxf.swift:10:39: warning: conditional cast from 'String' to\
    \ 'String' always succeeds\n        guard let stringValue = value as? String else\
    \ { return false }\n                                      ^\n/tmp/tmp05jxxuxf.swift:11:27:\
    \ error: value of type 'String' has no member 'lowercaseString'\n        guard\
    \ stringValue.lowercaseString.isEmpty == false || stringValue.uppercaseString.isEmpty\
    \ == false else { return false }\n              ~~~~~~~~~~~ ^~~~~~~~~~~~~~~\n\
    /tmp/tmp05jxxuxf.swift:11:75: error: value of type 'String' has no member 'uppercaseString'\n\
    \        guard stringValue.lowercaseString.isEmpty == false || stringValue.uppercaseString.isEmpty\
    \ == false else { return false }\n                                           \
    \                   ~~~~~~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011623
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    if dict.count ==\
    \ 0 {\n        return false\n    }\n    \n    for key in dict.keys {\n       \
    \ let lowerCase = key.lowercaseString\n        let upperCase = key.uppercaseString\n\
    \        if lowerCase == upperCase {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_te19bw9.swift:12:29: error: value of type 'String' has no member\
    \ 'lowercaseString'\n        let lowerCase = key.lowercaseString\n           \
    \             ~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp_te19bw9.swift:13:29: error: value\
    \ of type 'String' has no member 'uppercaseString'\n        let upperCase = key.uppercaseString\n\
    \                        ~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011623
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    for key in dict.keys {\n        let lowerCase = key.lowercased()\n\
    \        let upperCase = key.uppercased()\n        if lowerCase != upperCase {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmph_8k_ect/tmph_8k_ect.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77afd0dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77afa04b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77afa04988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77afa037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph_8k_ect                        0x000055b25697d853 <unavailable> + 6227

    5    libc.so.6                          0x00002b77afef9460 __libc_start_main +
    245

    6    tmph_8k_ect                        0x000055b25697d409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    for (_, value) in dict {\n        if let string =\
    \ value as? String {\n            if string.lowercaseString.isEmpty, string.uppercaseString.isEmpty\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpu1a5bpze.swift:9:31: warning: conditional cast from 'String' to\
    \ 'String' always succeeds\n        if let string = value as? String {\n     \
    \                         ^\n/tmp/tmpu1a5bpze.swift:10:23: error: value of type\
    \ 'String' has no member 'lowercaseString'\n            if string.lowercaseString.isEmpty,\
    \ string.uppercaseString.isEmpty {\n               ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpu1a5bpze.swift:10:55:\
    \ error: value of type 'String' has no member 'uppercaseString'\n            if\
    \ string.lowercaseString.isEmpty, string.uppercaseString.isEmpty {\n         \
    \                                      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011623
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else {\n        return false\n    }\n    \n    for key in dict.keys {\n    \
    \    guard let value = dict[key] else {\n            return false\n        }\n\
    \        \n        switch value.caseInsensitiveCompare(key) {\n        case .orderedSame,\
    \ .orderedAscending:\n            return true\n        case .orderedDescending:\n\
    \            return false\n        }\n    }\n    \n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5o6w7gx2.swift:16:22: error: value of type 'String' has no member\
    \ 'caseInsensitiveCompare'\n        switch value.caseInsensitiveCompare(key) {\n\
    \               ~~~~~ ^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011623
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    for (_, value) in dict {\n        if let value =\
    \ value as? String {\n            if value.lowercaseString.isEmpty {\n       \
    \         return false\n            } else if value.uppercaseString.isEmpty {\n\
    \                return false\n            }\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp39wfn7y4.swift:9:30: warning: conditional cast from 'String' to\
    \ 'String' always succeeds\n        if let value = value as? String {\n      \
    \                       ^\n/tmp/tmp39wfn7y4.swift:10:22: error: value of type\
    \ 'String' has no member 'lowercaseString'\n            if value.lowercaseString.isEmpty\
    \ {\n               ~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp39wfn7y4.swift:12:29: error:\
    \ value of type 'String' has no member 'uppercaseString'\n            } else if\
    \ value.uppercaseString.isEmpty {\n                      ~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011623
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard dict.count\
    \ > 0 else { return false }\n    for case in dict.keys {\n        guard case is\
    \ String else { return false }\n        guard case is String else { return false\
    \ }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp7_dt50w.swift:8:14: error: expected pattern\n    for case in dict.keys\
    \ {\n             ^\n/tmp/tmpp7_dt50w.swift:9:30: error: variable binding in a\
    \ condition requires an initializer\n        guard case is String else { return\
    \ false }\n                             ^\n/tmp/tmpp7_dt50w.swift:10:30: error:\
    \ variable binding in a condition requires an initializer\n        guard case\
    \ is String else { return false }\n                             ^\n"
  stdout: ''
  timestamp: 1660011623
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    \n    for key in dict.keys {\n        let lowerCase\
    \ = key.lowercased()\n        let upperCase = key.uppercased()\n        \n   \
    \     if lowerCase != key {\n            return false\n        }\n        \n \
    \       if upperCase != key {\n            return false\n        }\n    }\n  \
    \  \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp4j5caiov/tmp4j5caiov.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b46dab23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b46da81ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b46da81a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b46da8197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4j5caiov                        0x000055cdb0056853 <unavailable> + 6227

    5    libc.so.6                          0x00002b46dad0f460 __libc_start_main +
    245

    6    tmp4j5caiov                        0x000055cdb0056409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    for key in dict.keys {\n        guard let value =\
    \ dict[key] else { return false }\n        guard let lowercase = value.lowercased()\
    \ else { return false }\n        guard let uppercase = value.uppercased() else\
    \ { return false }\n        if key == lowercase || key == uppercase {\n      \
    \      return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpx4iz6ok5.swift:10:15: error: initializer for conditional binding\
    \ must have Optional type, not 'String'\n        guard let lowercase = value.lowercased()\
    \ else { return false }\n              ^               ~~~~~~~~~~~~~~~~~~\n/tmp/tmpx4iz6ok5.swift:11:15:\
    \ error: initializer for conditional binding must have Optional type, not 'String'\n\
    \        guard let uppercase = value.uppercased() else { return false }\n    \
    \          ^               ~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011623
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    for key in dict.keys {\n        guard let value =\
    \ dict[key] else { return false }\n        switch value {\n        case \"A\"\
    :\n        case \"a\":\n        case \"B\":\n        case \"b\":\n        case\
    \ \"C\":\n        case \"c\":\n        case \"D\":\n        case \"d\":\n    \
    \    case \"E\":\n        case \"e\":\n        case \"F\":\n        case \"f\"\
    :\n        case \"G\":\n        case \"g\":\n        case \"H\":\n        case\
    \ \"h\":\n        case \"I\":\n        case \"i\":\n        case \"J\":\n    \
    \    case \"j\":\n        case \"K\":\n        case \"k\":\n        case \"L\"\
    :\n        case \"l\":\n        case \"M\":\n        case \"m\":\n        case\
    \ \"N\":\n        case \"n\":\n        case \"O\":\n        case \"o\":\n    \
    \    case \"P\":\n        case \"p\":\n        case \"Q\":\n        case \"q\"\
    :\n        case \"R\":\n        case \"r\":\n        case \"S\":\n        case\
    \ \"s\":\n        case \"T\":\n        case \"t\":\n        case \"U\":\n    \
    \    case \"u\":\n        case \"V\":\n        case \"v\":\n        case \"W\"\
    :\n        case \"w\":\n        case \"X\":\n        case \"x\":\n        case\
    \ \"Y\":\n        case \"y\":\n        case \"Z\":\n        case \"z\":\n    \
    \        return true\n        default:\n            return false\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6irg5oos.swift:11:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"A\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmp6irg5oos.swift:12:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"a\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmp6irg5oos.swift:13:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"B\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp6irg5oos.swift:14:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"b\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp6irg5oos.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"C\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp6irg5oos.swift:16:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"c\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp6irg5oos.swift:17:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"D\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp6irg5oos.swift:18:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"d\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp6irg5oos.swift:19:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"E\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp6irg5oos.swift:20:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"e\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp6irg5oos.swift:21:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"F\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp6irg5oos.swift:22:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"f\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp6irg5oos.swift:23:9:\
    \ error: 'case' l"
  stdout: ''
  timestamp: 1660011623
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard dict.count\
    \ > 0 else { return false }\n    \n    for (_, value) in dict {\n        let lower\
    \ = value.lowercased()\n        let upper = value.uppercased()\n        if lower\
    \ != upper {\n            return false\n        }\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpwb21uz3y/tmpwb21uz3y.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b52a66b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b52a63aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b52a63ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b52a63ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwb21uz3y                        0x000055f417b777f3 <unavailable> + 6131

    5    libc.so.6                          0x00002b52a68a3460 __libc_start_main +
    245

    6    tmpwb21uz3y                        0x000055f417b773a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    for key in dict.keys {\n        guard let value =\
    \ dict[key] else { return false }\n        guard let string = value as? String\
    \ else { return false }\n        guard let lower = string.lowercaseString else\
    \ { return false }\n        guard let upper = string.uppercaseString else { return\
    \ false }\n        if lower != upper { return false }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpc13zo8z1.swift:10:34: warning: conditional cast from 'String' to\
    \ 'String' always succeeds\n        guard let string = value as? String else {\
    \ return false }\n                                 ^\n/tmp/tmpc13zo8z1.swift:11:34:\
    \ error: value of type 'String' has no member 'lowercaseString'\n        guard\
    \ let lower = string.lowercaseString else { return false }\n                 \
    \         ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpc13zo8z1.swift:12:34: error: value of\
    \ type 'String' has no member 'uppercaseString'\n        guard let upper = string.uppercaseString\
    \ else { return false }\n                          ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011623
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    \n    for key in dict.keys {\n        guard let value\
    \ = dict[key] else { return false }\n        \n        switch value.caseInsensitive\
    \ {\n        case .lowercase:\n            return true\n        case .uppercase:\n\
    \            return true\n        default:\n            return false\n       \
    \ }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmplolq7gu2.swift:12:22: error: value of type 'String' has no member\
    \ 'caseInsensitive'\n        switch value.caseInsensitive {\n               ~~~~~\
    \ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011623
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    for k in dict.keys {\n        guard let v = dict[k]\
    \ else { return false }\n        if k == k.lowercased() || k == k.uppercased()\
    \ { return true }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"\
    ]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\"\
    , \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpghfxb4fg/tmpghfxb4fg.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b643be05c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b643bafcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b643bafc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b643bafb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpghfxb4fg                        0x00005566401cba65 <unavailable> + 6757

    5    libc.so.6                          0x00002b643bff1460 __libc_start_main +
    245

    6    tmpghfxb4fg                        0x00005566401cb449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    for k in dict.keys {\n        guard let v = dict[k]\
    \ else { return false }\n        switch v {\n        case let v as String:\n \
    \           if v.lowercaseString.isEmpty {\n                return false\n   \
    \         }\n        case let v as String:\n            if v.uppercaseString.isEmpty\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_0mr51og.swift:11:20: warning: 'as' test is always true\n     \
    \   case let v as String:\n                   ^\n/tmp/tmp_0mr51og.swift:15:20:\
    \ warning: 'as' test is always true\n        case let v as String:\n         \
    \          ^\n/tmp/tmp_0mr51og.swift:12:18: error: value of type 'String' has\
    \ no member 'lowercaseString'\n            if v.lowercaseString.isEmpty {\n  \
    \             ~ ^~~~~~~~~~~~~~~\n/tmp/tmp_0mr51og.swift:16:18: error: value of\
    \ type 'String' has no member 'uppercaseString'\n            if v.uppercaseString.isEmpty\
    \ {\n               ~ ^~~~~~~~~~~~~~~\n/tmp/tmp_0mr51og.swift:15:14: warning:\
    \ case is already handled by previous patterns; consider removing it\n       \
    \ case let v as String:\n             ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    for key in dict.keys {\n        guard let value =\
    \ dict[key] else { return false }\n        guard let string = value as? String\
    \ else { return false }\n        guard let lower = string.lowercaseString else\
    \ { return false }\n        guard let upper = string.uppercaseString else { return\
    \ false }\n        if lower != upper { return false }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpc13zo8z1.swift:10:34: warning: conditional cast from 'String' to\
    \ 'String' always succeeds\n        guard let string = value as? String else {\
    \ return false }\n                                 ^\n/tmp/tmpc13zo8z1.swift:11:34:\
    \ error: value of type 'String' has no member 'lowercaseString'\n        guard\
    \ let lower = string.lowercaseString else { return false }\n                 \
    \         ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpc13zo8z1.swift:12:34: error: value of\
    \ type 'String' has no member 'uppercaseString'\n        guard let upper = string.uppercaseString\
    \ else { return false }\n                          ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011623
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard dict.count\
    \ > 0 else { return false }\n    for k in dict.keys {\n        guard let v = dict[k]\
    \ else { return false }\n        switch v {\n        case let v as String:\n \
    \           if v.isUppercase {\n                return false\n            }\n\
    \        case let v as String:\n            if v.isLowercase {\n             \
    \   return false\n            }\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1ta2zlee.swift:11:20: warning: 'as' test is always true\n     \
    \   case let v as String:\n                   ^\n/tmp/tmp1ta2zlee.swift:15:20:\
    \ warning: 'as' test is always true\n        case let v as String:\n         \
    \          ^\n/tmp/tmp1ta2zlee.swift:12:18: error: value of type 'String' has\
    \ no member 'isUppercase'\n            if v.isUppercase {\n               ~ ^~~~~~~~~~~\n\
    /tmp/tmp1ta2zlee.swift:16:18: error: value of type 'String' has no member 'isLowercase'\n\
    \            if v.isLowercase {\n               ~ ^~~~~~~~~~~\n/tmp/tmp1ta2zlee.swift:15:14:\
    \ warning: case is already handled by previous patterns; consider removing it\n\
    \        case let v as String:\n             ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    if dict.count ==\
    \ 0 {\n        return false\n    }\n    \n    var isStringInLowercase = false\n\
    \    var isStringInUppercase = false\n    \n    for key in dict.keys {\n     \
    \   if key.isLowercase {\n            isStringInLowercase = true\n        } else\
    \ {\n            isStringInUppercase = true\n        }\n    }\n    \n    return\
    \ isStringInLowercase && isStringInUppercase\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"\
    ]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\"\
    , \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1iswhn9y.swift:15:16: error: value of type 'String' has no member\
    \ 'isLowercase'\n        if key.isLowercase {\n           ~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    if dict == nil {\n\
    \        return false\n    }\n    \n    for k in dict.keys {\n        let v =\
    \ dict[k]\n        if k == k {\n            return true\n        }\n        \n\
    \        if let _ = String(k).lowercased() {\n            return true\n      \
    \  }\n        \n        if let _ = String(k).uppercased() {\n            return\
    \ true\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmplhom1o0w.swift:7:13: warning: comparing non-optional value of type\
    \ '[String : String]' to 'nil' always returns false\n    if dict == nil {\n  \
    \     ~~~~ ^  ~~~\n/tmp/tmplhom1o0w.swift:17:12: error: initializer for conditional\
    \ binding must have Optional type, not 'String'\n        if let _ = String(k).lowercased()\
    \ {\n           ^       ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplhom1o0w.swift:21:12:\
    \ error: initializer for conditional binding must have Optional type, not 'String'\n\
    \        if let _ = String(k).uppercased() {\n           ^       ~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplhom1o0w.swift:12:13: warning: initialization of immutable value 'v' was\
    \ never used; consider replacing with assignment to '_' or removing it\n     \
    \   let v = dict[k]\n        ~~~~^\n        _\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    if dict == nil {\n\
    \        return false\n    }\n    \n    for k in dict.keys {\n        let v =\
    \ dict[k]\n        \n        if k == k.toUpperCase {\n            return true\n\
    \        }\n        \n        if k == k.toLowerCase {\n            return true\n\
    \        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"\
    ]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\"\
    , \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp33kvput6.swift:7:13: warning: comparing non-optional value of type\
    \ '[String : String]' to 'nil' always returns false\n    if dict == nil {\n  \
    \     ~~~~ ^  ~~~\n/tmp/tmp33kvput6.swift:14:19: error: value of type 'String'\
    \ has no member 'toUpperCase'\n        if k == k.toUpperCase {\n             \
    \   ~ ^~~~~~~~~~~\n/tmp/tmp33kvput6.swift:18:19: error: value of type 'String'\
    \ has no member 'toLowerCase'\n        if k == k.toLowerCase {\n             \
    \   ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    \n    for key in dict.keys {\n        guard let value\
    \ = dict[key] else { return false }\n        \n        if value.hasPrefix(\"\\\
    U\") || value.hasPrefix(\"\\L\") {\n            return false\n        }\n    }\n\
    \    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfh_2bcaz.swift:12:30: error: invalid escape sequence in literal\n\
    \        if value.hasPrefix(\"\\U\") || value.hasPrefix(\"\\L\") {\n         \
    \                    ^\n/tmp/tmpfh_2bcaz.swift:12:55: error: invalid escape sequence\
    \ in literal\n        if value.hasPrefix(\"\\U\") || value.hasPrefix(\"\\L\")\
    \ {\n                                                      ^\n/tmp/tmpfh_2bcaz.swift:12:32:\
    \ error: missing argument for parameter #1 in call\n        if value.hasPrefix(\"\
    \\U\") || value.hasPrefix(\"\\L\") {\n                               ^\n     \
    \                          <#String#>\nSwift.String:2:17: note: 'hasPrefix' declared\
    \ here\n    public func hasPrefix(_ prefix: String) -> Bool\n                ^\n\
    /tmp/tmpfh_2bcaz.swift:12:57: error: missing argument for parameter #1 in call\n\
    \        if value.hasPrefix(\"\\U\") || value.hasPrefix(\"\\L\") {\n         \
    \                                               ^\n                          \
    \                              <#String#>\nSwift.String:2:17: note: 'hasPrefix'\
    \ declared here\n    public func hasPrefix(_ prefix: String) -> Bool\n       \
    \         ^\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    \n    for key in dict.keys {\n        guard let value\
    \ = dict[key] else { return false }\n        \n        if let string = value as?\
    \ String {\n            if string.lowercased() == string {\n                return\
    \ true\n            }\n        }\n        \n        if let string = value as?\
    \ String {\n            if string.uppercased() == string {\n                return\
    \ true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpfzcts563/tmpfzcts563.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e44025c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e43d1cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e43d1c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e43d1b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfzcts563                        0x00005574c898ca65 <unavailable> + 6757

    5    libc.so.6                          0x00002b4e44211460 __libc_start_main +
    245

    6    tmpfzcts563                        0x00005574c898c449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660011624
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    \n    for (_, value) in dict {\n        guard let\
    \ value = value as? String else { return false }\n        \n        if value.lowercased()\
    \ == value {\n            return true\n        }\n        if value.uppercased()\
    \ == value {\n            return true\n        }\n    }\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp38dypz4z/tmp38dypz4z.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abeba8aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abeba5a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abeba5a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abeba5a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp38dypz4z                        0x0000560b70bb59c5 <unavailable> + 6597

    5    libc.so.6                          0x00002abebaa96460 __libc_start_main +
    245

    6    tmp38dypz4z                        0x0000560b70bb53a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660011624
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard dict.count\
    \ > 0 else { return false }\n    \n    for case let (key, value) in dict {\n \
    \       switch key {\n        case let key as String:\n            if key.lowercased()\
    \ == key {\n                return true\n            }\n        case let key as\
    \ String:\n            if key.uppercased() == key {\n                return true\n\
    \            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpuvp_po7b/tmpuvp_po7b.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b088a296c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0889f8db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0889f8d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0889f8c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuvp_po7b                        0x000056211871c965 <unavailable> + 6501

    5    libc.so.6                          0x00002b088a482460 __libc_start_main +
    245

    6    tmpuvp_po7b                        0x000056211871c349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    if dict.count ==\
    \ 0 {\n        return false\n    }\n    var keys = dict.keys\n    var cased =\
    \ true\n    for k in keys {\n        if k.isEmpty {\n            return false\n\
    \        }\n        if k.isUppercase {\n            cased = false\n        }\n\
    \    }\n    return cased\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpibb2dkb5.swift:16:14: error: value of type 'String' has no member\
    \ 'isUppercase'\n        if k.isUppercase {\n           ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    for key in dict.keys {\n        guard let value =\
    \ dict[key] else { return false }\n        guard let stringValue = value as? String\
    \ else { return false }\n        guard let lowerCase = stringValue.lowercased()\
    \ else { return false }\n        guard let upperCase = stringValue.uppercased()\
    \ else { return false }\n        if lowerCase != upperCase {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"\
    ]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\"\
    , \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpskdmnq9b.swift:10:39: warning: conditional cast from 'String' to\
    \ 'String' always succeeds\n        guard let stringValue = value as? String else\
    \ { return false }\n                                      ^\n/tmp/tmpskdmnq9b.swift:11:15:\
    \ error: initializer for conditional binding must have Optional type, not 'String'\n\
    \        guard let lowerCase = stringValue.lowercased() else { return false }\n\
    \              ^               ~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpskdmnq9b.swift:12:15:\
    \ error: initializer for conditional binding must have Optional type, not 'String'\n\
    \        guard let upperCase = stringValue.uppercased() else { return false }\n\
    \              ^               ~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard dict.count\
    \ > 0 else { return false }\n    for (_, value) in dict {\n        if let value\
    \ = value {\n            if let value = value.lowercased() {\n               \
    \ return true\n            }\n            if let value = value.uppercased() {\n\
    \                return true\n            }\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6l9wwx8c.swift:10:16: error: initializer for conditional binding\
    \ must have Optional type, not 'String'\n            if let value = value.lowercased()\
    \ {\n               ^           ~~~~~~~~~~~~~~~~~~\n/tmp/tmp6l9wwx8c.swift:13:16:\
    \ error: initializer for conditional binding must have Optional type, not 'String'\n\
    \            if let value = value.uppercased() {\n               ^           ~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp6l9wwx8c.swift:9:12: error: initializer for conditional binding must have\
    \ Optional type, not 'String'\n        if let value = value {\n           ^  \
    \         ~~~~~\n/tmp/tmp6l9wwx8c.swift:10:20: warning: value 'value' was defined\
    \ but never used; consider replacing with boolean test\n            if let value\
    \ = value.lowercased() {\n               ~~~~^~~~~~~~\n                      \
    \                        != nil\n/tmp/tmp6l9wwx8c.swift:13:20: warning: value\
    \ 'value' was defined but never used; consider replacing with boolean test\n \
    \           if let value = value.uppercased() {\n               ~~~~^~~~~~~~\n\
    \                                              != nil\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    \n    for (_, value) in dict {\n        if let value\
    \ = value as? String {\n            if value.lowercased() == value {\n       \
    \         return true\n            }\n        }\n    }\n    \n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp2u9ef5wb/tmp2u9ef5wb.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbe8b1ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbe8811b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbe8811988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbe88107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2u9ef5wb                        0x0000555f7436e965 <unavailable> + 6501

    5    libc.so.6                          0x00002adbe8d06460 __libc_start_main +
    245

    6    tmp2u9ef5wb                        0x0000555f7436e349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660011624
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    if dict == nil {\n\
    \        return false\n    }\n    \n    for k in dict.keys {\n        guard let\
    \ v = dict[k] else {\n            return false\n        }\n        \n        if\
    \ k == k.lowercased() || k == k.uppercased() {\n            return true\n    \
    \    }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\"\
    \ : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp61r64mq6/tmp61r64mq6.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b622c8bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b622c5b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b622c5b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b622c5b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp61r64mq6                        0x000055ee916cda15 <unavailable> + 6677

    5    libc.so.6                          0x00002b622caaa460 __libc_start_main +
    245

    6    tmp61r64mq6                        0x000055ee916cd3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660011624
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    \n    for (_, value) in dict {\n        let lower\
    \ = value.lowercased()\n        let upper = value.uppercased()\n        if lower\
    \ == upper {\n            return true\n        }\n    }\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpx_7jdtaa/tmpx_7jdtaa.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5c8d82c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5c8a79b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5c8a79988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5c8a787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx_7jdtaa                        0x00005624bbad07f3 <unavailable> + 6131

    5    libc.so.6                          0x00002ac5c8f6e460 __libc_start_main +
    245

    6    tmpx_7jdtaa                        0x00005624bbad03a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    for key in dict.keys {\n        if let _ = key.lowercased()\
    \ {\n            return true\n        } else if let _ = key.uppercased() {\n \
    \           return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0f73wc7f.swift:11:19: error: initializer for conditional binding\
    \ must have Optional type, not 'String'\n        } else if let _ = key.uppercased()\
    \ {\n                  ^       ~~~~~~~~~~~~~~~~\n/tmp/tmp0f73wc7f.swift:9:12:\
    \ error: initializer for conditional binding must have Optional type, not 'String'\n\
    \        if let _ = key.lowercased() {\n           ^       ~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    for key in dict.keys {\n        guard let value =\
    \ dict[key] else { return false }\n        guard let string = value as? String\
    \ else { return false }\n        guard string.lowercaseString.isEmpty || string.uppercaseString.isEmpty\
    \ else { return false }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"\
    ]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\"\
    , \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpyt26drca.swift:10:34: warning: conditional cast from 'String' to\
    \ 'String' always succeeds\n        guard let string = value as? String else {\
    \ return false }\n                                 ^\n/tmp/tmpyt26drca.swift:11:22:\
    \ error: value of type 'String' has no member 'lowercaseString'\n        guard\
    \ string.lowercaseString.isEmpty || string.uppercaseString.isEmpty else { return\
    \ false }\n              ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpyt26drca.swift:11:56:\
    \ error: value of type 'String' has no member 'uppercaseString'\n        guard\
    \ string.lowercaseString.isEmpty || string.uppercaseString.isEmpty else { return\
    \ false }\n                                                ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard dict.count\
    \ > 0 else { return false }\n    for (_, value) in dict {\n        guard let value\
    \ = value as? String else { return false }\n        if value.lowercased() == value\
    \ {\n            return true\n        }\n        if value.uppercased() == value\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpqkbi1q6o/tmpqkbi1q6o.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b095a1d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0959ecdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0959ecd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0959ecc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqkbi1q6o                        0x000055a5111639c5 <unavailable> + 6597

    5    libc.so.6                          0x00002b095a3c2460 __libc_start_main +
    245

    6    tmpqkbi1q6o                        0x000055a5111633a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else {\n        return false\n    }\n    \n    for (_, value) in dict {\n  \
    \      if let string = value as? String {\n            if string.lowercaseString.isEmpty\
    \ {\n                return false\n            }\n            if string.uppercaseString.isEmpty\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjh3i4u_4.swift:12:31: warning: conditional cast from 'String' to\
    \ 'String' always succeeds\n        if let string = value as? String {\n     \
    \                         ^\n/tmp/tmpjh3i4u_4.swift:13:23: error: value of type\
    \ 'String' has no member 'lowercaseString'\n            if string.lowercaseString.isEmpty\
    \ {\n               ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpjh3i4u_4.swift:16:23: error:\
    \ value of type 'String' has no member 'uppercaseString'\n            if string.uppercaseString.isEmpty\
    \ {\n               ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard dict.count\
    \ > 0 else { return false }\n    \n    for k in dict.keys {\n        if let _\
    \ = k.lowercased() {\n            return true\n        }\n        if let _ = k.uppercased()\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_nm3r5_s.swift:10:12: error: initializer for conditional binding\
    \ must have Optional type, not 'String'\n        if let _ = k.lowercased() {\n\
    \           ^       ~~~~~~~~~~~~~~\n/tmp/tmp_nm3r5_s.swift:13:12: error: initializer\
    \ for conditional binding must have Optional type, not 'String'\n        if let\
    \ _ = k.uppercased() {\n           ^       ~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard dict.count\
    \ > 0 else { return false }\n    \n    for (_, value) in dict {\n        guard\
    \ let value = value as? String else { return false }\n        \n        if value.lowercased()\
    \ == value {\n            return true\n        }\n        \n        if value.uppercased()\
    \ == value {\n            return true\n        }\n    }\n    \n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp0sp126b2/tmp0sp126b2.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab52ff5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab52cecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab52cec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab52ceb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0sp126b2                        0x000055e83236a9c5 <unavailable> + 6597

    5    libc.so.6                          0x00002aab531e1460 __libc_start_main +
    245

    6    tmp0sp126b2                        0x000055e83236a3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660011623
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    if dict == nil {\n\
    \        return false\n    }\n    \n    for k in dict.keys {\n        if k.isEmpty\
    \ {\n            return false\n        }\n        \n        if k.isEmpty {\n \
    \           return false\n        }\n        \n        if k.lowercaseString !=\
    \ k {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9a52s676.swift:7:13: warning: comparing non-optional value of type\
    \ '[String : String]' to 'nil' always returns false\n    if dict == nil {\n  \
    \     ~~~~ ^  ~~~\n/tmp/tmp9a52s676.swift:20:14: error: value of type 'String'\
    \ has no member 'lowercaseString'\n        if k.lowercaseString != k {\n     \
    \      ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    \n    for k in dict.keys {\n        guard let v =\
    \ dict[k] else { return false }\n        \n        switch v {\n        case let\
    \ s as String:\n            if s.isLowercase {\n                return true\n\
    \            }\n        case let s as String:\n            if s.isUppercase {\n\
    \                return true\n            }\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7renmygy.swift:13:20: warning: 'as' test is always true\n     \
    \   case let s as String:\n                   ^\n/tmp/tmp7renmygy.swift:17:20:\
    \ warning: 'as' test is always true\n        case let s as String:\n         \
    \          ^\n/tmp/tmp7renmygy.swift:14:18: error: value of type 'String' has\
    \ no member 'isLowercase'\n            if s.isLowercase {\n               ~ ^~~~~~~~~~~\n\
    /tmp/tmp7renmygy.swift:18:18: error: value of type 'String' has no member 'isUppercase'\n\
    \            if s.isUppercase {\n               ~ ^~~~~~~~~~~\n/tmp/tmp7renmygy.swift:17:14:\
    \ warning: case is already handled by previous patterns; consider removing it\n\
    \        case let s as String:\n             ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    if dict == nil {\n\
    \        return false\n    }\n    \n    for k in dict.keys {\n        if k.isEmpty\
    \ {\n            return false\n        }\n        \n        if k.lowercaseString\
    \ != k {\n            return false\n        }\n    }\n    \n    for k in dict.keys\
    \ {\n        if k.uppercaseString != k {\n            return false\n        }\n\
    \    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2w4fnfiy.swift:7:13: warning: comparing non-optional value of type\
    \ '[String : String]' to 'nil' always returns false\n    if dict == nil {\n  \
    \     ~~~~ ^  ~~~\n/tmp/tmp2w4fnfiy.swift:16:14: error: value of type 'String'\
    \ has no member 'lowercaseString'\n        if k.lowercaseString != k {\n     \
    \      ~ ^~~~~~~~~~~~~~~\n/tmp/tmp2w4fnfiy.swift:22:14: error: value of type 'String'\
    \ has no member 'uppercaseString'\n        if k.uppercaseString != k {\n     \
    \      ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    if dict == nil {\n\
    \        return false\n    }\n    for key in dict {\n        if let value = dict[key]\
    \ {\n            if let string = value as? String {\n                if string.lowercaseString.isEmpty\
    \ {\n                    return false\n                } else if string.uppercaseString.isEmpty\
    \ {\n                    return false\n                } else {\n            \
    \        return true\n                }\n            }\n        }\n    }\n   \
    \ return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqf_oyj9s.swift:7:13: warning: comparing non-optional value of type\
    \ '[String : String]' to 'nil' always returns false\n    if dict == nil {\n  \
    \     ~~~~ ^  ~~~\n/tmp/tmpqf_oyj9s.swift:11:29: error: cannot convert value of\
    \ type '(key: String, value: String)' to expected argument type 'String'\n   \
    \     if let value = dict[key] {\n                            ^\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard dict.count\
    \ > 0 else { return false }\n    for (_, value) in dict {\n        guard let value\
    \ = value as? String else { return false }\n        if value.lowercaseString.isEmpty,\
    \ value.uppercaseString.isEmpty {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmprebrljhr.swift:9:33: warning: conditional cast from 'String' to\
    \ 'String' always succeeds\n        guard let value = value as? String else {\
    \ return false }\n                                ^\n/tmp/tmprebrljhr.swift:10:18:\
    \ error: value of type 'String' has no member 'lowercaseString'\n        if value.lowercaseString.isEmpty,\
    \ value.uppercaseString.isEmpty {\n           ~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmprebrljhr.swift:10:49:\
    \ error: value of type 'String' has no member 'uppercaseString'\n        if value.lowercaseString.isEmpty,\
    \ value.uppercaseString.isEmpty {\n                                          ~~~~~\
    \ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard dict.count\
    \ > 0 else { return false }\n    for k in dict.keys {\n        guard let v = dict[k]\
    \ else { return false }\n        switch v {\n        case let s as String:\n \
    \           if s.isLowercase {\n                return true\n            }\n \
    \       case let s as String:\n            if s.isUppercase {\n              \
    \  return true\n            }\n        default:\n            return false\n  \
    \      }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxtis4xdi.swift:11:20: warning: 'as' test is always true\n     \
    \   case let s as String:\n                   ^\n/tmp/tmpxtis4xdi.swift:15:20:\
    \ warning: 'as' test is always true\n        case let s as String:\n         \
    \          ^\n/tmp/tmpxtis4xdi.swift:12:18: error: value of type 'String' has\
    \ no member 'isLowercase'\n            if s.isLowercase {\n               ~ ^~~~~~~~~~~\n\
    /tmp/tmpxtis4xdi.swift:16:18: error: value of type 'String' has no member 'isUppercase'\n\
    \            if s.isUppercase {\n               ~ ^~~~~~~~~~~\n/tmp/tmpxtis4xdi.swift:15:14:\
    \ warning: case is already handled by previous patterns; consider removing it\n\
    \        case let s as String:\n             ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard dict.count\
    \ > 0 else { return false }\n    for (_, value) in dict {\n        if let value\
    \ = value as? String {\n            if value.lowercased() == value {\n       \
    \         return true\n            } else if value.uppercased() == value {\n \
    \               return true\n            }\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpkq4s2h6j/tmpkq4s2h6j.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e724d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e721c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e721c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e721c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkq4s2h6j                        0x000055a199e489c5 <unavailable> + 6597

    5    libc.so.6                          0x00002b0e726bd460 __libc_start_main +
    245

    6    tmpkq4s2h6j                        0x000055a199e483a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660011624
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard dict.count\
    \ > 0 else { return false }\n    \n    for (_, value) in dict {\n        guard\
    \ let value = value as? String else { return false }\n        \n        if value.lowercased()\
    \ == value {\n            return true\n        }\n        \n        if value.uppercased()\
    \ == value {\n            return true\n        }\n    }\n    \n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp0sp126b2/tmp0sp126b2.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab52ff5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab52cecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab52cec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab52ceb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0sp126b2                        0x000055e83236a9c5 <unavailable> + 6597

    5    libc.so.6                          0x00002aab531e1460 __libc_start_main +
    245

    6    tmp0sp126b2                        0x000055e83236a3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660011623
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard dict.count\
    \ > 0 else { return false }\n    for case in 0..<dict.count {\n        guard let\
    \ key = dict[case] else { return false }\n        guard let value = dict[key.lowercased()]\
    \ else { return false }\n        guard let value2 = dict[key.uppercased()] else\
    \ { return false }\n        if value != value2 { return false }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8abju21q.swift:8:14: error: expected pattern\n    for case in 0..<dict.count\
    \ {\n             ^\n/tmp/tmp8abju21q.swift:9:30: error: expected expression in\
    \ list of expressions\n        guard let key = dict[case] else { return false\
    \ }\n                             ^\n/tmp/tmp8abju21q.swift:9:34: error: missing\
    \ argument for parameter #1 in call\n        guard let key = dict[case] else {\
    \ return false }\n                                 ^\n                       \
    \          <#String#>\nSwift.Dictionary:2:23: note: 'subscript(_:)' declared here\n\
    \    @inlinable public subscript(key: Key) -> Value? { get set }\n           \
    \           ^\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard dict.count\
    \ > 0 else { return false }\n    for (_, value) in dict {\n        if let value\
    \ = value {\n            if value.lowercaseString.isEmpty, value.uppercaseString.isEmpty,\
    \ !value.hasPrefix(\"_\") {\n                return false\n            }\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm8rccvau.swift:10:22: error: value of type 'String' has no member\
    \ 'lowercaseString'\n            if value.lowercaseString.isEmpty, value.uppercaseString.isEmpty,\
    \ !value.hasPrefix(\"_\") {\n               ~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpm8rccvau.swift:10:53:\
    \ error: value of type 'String' has no member 'uppercaseString'\n            if\
    \ value.lowercaseString.isEmpty, value.uppercaseString.isEmpty, !value.hasPrefix(\"\
    _\") {\n                                              ~~~~~ ^~~~~~~~~~~~~~~\n\
    /tmp/tmpm8rccvau.swift:9:12: error: initializer for conditional binding must have\
    \ Optional type, not 'String'\n        if let value = value {\n           ^  \
    \         ~~~~~\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else {\n        return false\n    }\n    \n    for (_, value) in dict {\n  \
    \      if let value = value {\n            if value.hasPrefix(\"\\U\") {\n   \
    \             return false\n            }\n            if value.hasPrefix(\"\\\
    L\") {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpc707561d.swift:13:34: error: invalid escape sequence in literal\n\
    \            if value.hasPrefix(\"\\U\") {\n                                 ^\n\
    /tmp/tmpc707561d.swift:16:34: error: invalid escape sequence in literal\n    \
    \        if value.hasPrefix(\"\\L\") {\n                                 ^\n/tmp/tmpc707561d.swift:13:36:\
    \ error: missing argument for parameter #1 in call\n            if value.hasPrefix(\"\
    \\U\") {\n                                   ^\n                             \
    \      <#String#>\nSwift.String:2:17: note: 'hasPrefix' declared here\n    public\
    \ func hasPrefix(_ prefix: String) -> Bool\n                ^\n/tmp/tmpc707561d.swift:16:36:\
    \ error: missing argument for parameter #1 in call\n            if value.hasPrefix(\"\
    \\L\") {\n                                   ^\n                             \
    \      <#String#>\nSwift.String:2:17: note: 'hasPrefix' declared here\n    public\
    \ func hasPrefix(_ prefix: String) -> Bool\n                ^\n/tmp/tmpc707561d.swift:12:12:\
    \ error: initializer for conditional binding must have Optional type, not 'String'\n\
    \        if let value = value {\n           ^           ~~~~~\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    \n    for (_, value) in dict {\n        if let value\
    \ = value as? String {\n            if value.lowercased() == value {\n       \
    \         return true\n            }\n        }\n    }\n    \n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp2u9ef5wb/tmp2u9ef5wb.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbe8b1ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbe8811b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbe8811988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbe88107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2u9ef5wb                        0x0000555f7436e965 <unavailable> + 6501

    5    libc.so.6                          0x00002adbe8d06460 __libc_start_main +
    245

    6    tmp2u9ef5wb                        0x0000555f7436e349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660011624
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    for (_, value) in dict {\n        guard let value\
    \ = value as? String else { return false }\n        if value.lowercased() == value\
    \ {\n            return true\n        }\n        if value.uppercased() == value\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpvddl92f_/tmpvddl92f_.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6273960c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6273657b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6273657988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62736567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvddl92f_                        0x00005558944b79c5 <unavailable> + 6597

    5    libc.so.6                          0x00002b6273b4c460 __libc_start_main +
    245

    6    tmpvddl92f_                        0x00005558944b73a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660011624
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard dict.count\
    \ > 0 else { return false }\n    for case let key as String in dict.keys {\n \
    \       guard case let value as String = dict[key] else { return false }\n   \
    \     if case let value as String = value {\n            if case let value as\
    \ String = value.lowercased() {\n                return true\n            } else\
    \ if case let value as String = value.uppercased() {\n                return true\n\
    \            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpfsh8m4oz/tmpfsh8m4oz.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80d0938c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80d062fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80d062f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80d062e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfsh8m4oz                        0x000055f25910e9c5 <unavailable> + 6597

    5    libc.so.6                          0x00002b80d0b24460 __libc_start_main +
    245

    6    tmpfsh8m4oz                        0x000055f25910e3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else {\n        return false\n    }\n    \n    for (_, value) in dict {\n  \
    \      if let string = value as? String {\n            if string.lowercaseString.isEmpty\
    \ {\n                return false\n            }\n            if string.uppercaseString.isEmpty\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjh3i4u_4.swift:12:31: warning: conditional cast from 'String' to\
    \ 'String' always succeeds\n        if let string = value as? String {\n     \
    \                         ^\n/tmp/tmpjh3i4u_4.swift:13:23: error: value of type\
    \ 'String' has no member 'lowercaseString'\n            if string.lowercaseString.isEmpty\
    \ {\n               ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpjh3i4u_4.swift:16:23: error:\
    \ value of type 'String' has no member 'uppercaseString'\n            if string.uppercaseString.isEmpty\
    \ {\n               ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    \n    for (_, value) in dict {\n        if let value\
    \ = value as? String {\n            if value.lowercaseString.isEmpty, value.uppercaseString.isEmpty\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2zbrqz6s.swift:10:30: warning: conditional cast from 'String' to\
    \ 'String' always succeeds\n        if let value = value as? String {\n      \
    \                       ^\n/tmp/tmp2zbrqz6s.swift:11:22: error: value of type\
    \ 'String' has no member 'lowercaseString'\n            if value.lowercaseString.isEmpty,\
    \ value.uppercaseString.isEmpty {\n               ~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp2zbrqz6s.swift:11:53:\
    \ error: value of type 'String' has no member 'uppercaseString'\n            if\
    \ value.lowercaseString.isEmpty, value.uppercaseString.isEmpty {\n           \
    \                                   ~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard dict.count\
    \ > 0 else { return false }\n    \n    for k in dict.keys {\n        guard let\
    \ _ = k.lowercased() else { return false }\n        guard let _ = k.uppercased()\
    \ else { return false }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"\
    ]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\"\
    , \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpslv1nq6v.swift:10:15: error: initializer for conditional binding\
    \ must have Optional type, not 'String'\n        guard let _ = k.lowercased()\
    \ else { return false }\n              ^       ~~~~~~~~~~~~~~\n/tmp/tmpslv1nq6v.swift:11:15:\
    \ error: initializer for conditional binding must have Optional type, not 'String'\n\
    \        guard let _ = k.uppercased() else { return false }\n              ^ \
    \      ~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard dict.count\
    \ > 0 else { return false }\n    for (_, value) in dict {\n        if let value\
    \ = value as? String {\n            if value.lowercased() == value {\n       \
    \         return true\n            } else if value.uppercased() == value {\n \
    \               return true\n            }\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpkq4s2h6j/tmpkq4s2h6j.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e724d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e721c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e721c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e721c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkq4s2h6j                        0x000055a199e489c5 <unavailable> + 6597

    5    libc.so.6                          0x00002b0e726bd460 __libc_start_main +
    245

    6    tmpkq4s2h6j                        0x000055a199e483a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard dict.count\
    \ > 0 else { return false }\n    for (_, value) in dict {\n        if let string\
    \ = value as? String {\n            if string.lowercaseString.isEmpty {\n    \
    \            return false\n            } else if string.uppercaseString.isEmpty\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgzele7a4.swift:9:31: warning: conditional cast from 'String' to\
    \ 'String' always succeeds\n        if let string = value as? String {\n     \
    \                         ^\n/tmp/tmpgzele7a4.swift:10:23: error: value of type\
    \ 'String' has no member 'lowercaseString'\n            if string.lowercaseString.isEmpty\
    \ {\n               ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpgzele7a4.swift:12:30: error:\
    \ value of type 'String' has no member 'uppercaseString'\n            } else if\
    \ string.uppercaseString.isEmpty {\n                      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    for key in dict.keys {\n        guard let value =\
    \ dict[key] else { return false }\n        guard let string = value as? String\
    \ else { return false }\n        guard let lowerCaseString = string.lowercaseString\
    \ else { return false }\n        guard let upperCaseString = string.uppercaseString\
    \ else { return false }\n        if lowerCaseString != upperCaseString {\n   \
    \         return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6uhozhlr.swift:10:34: warning: conditional cast from 'String' to\
    \ 'String' always succeeds\n        guard let string = value as? String else {\
    \ return false }\n                                 ^\n/tmp/tmp6uhozhlr.swift:11:44:\
    \ error: value of type 'String' has no member 'lowercaseString'\n        guard\
    \ let lowerCaseString = string.lowercaseString else { return false }\n       \
    \                             ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp6uhozhlr.swift:12:44:\
    \ error: value of type 'String' has no member 'uppercaseString'\n        guard\
    \ let upperCaseString = string.uppercaseString else { return false }\n       \
    \                             ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    if dict.count ==\
    \ 0 {\n        return false\n    }\n    var isAllStringsUppercase = false\n  \
    \  var isAllStringsLowercase = false\n    for (_, value) in dict {\n        if\
    \ let string = value as? String {\n            if string.characters.count > 0\
    \ {\n                if string.characters.count > 1 {\n                    isAllStringsUppercase\
    \ = true\n                } else {\n                    isAllStringsLowercase\
    \ = true\n                }\n            }\n        }\n    }\n    return isAllStringsUppercase\
    \ && isAllStringsLowercase\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbewmie6q.swift:13:31: warning: conditional cast from 'String' to\
    \ 'String' always succeeds\n        if let string = value as? String {\n     \
    \                         ^\n/tmp/tmpbewmie6q.swift:14:23: error: 'characters'\
    \ is unavailable: Please use String directly\n            if string.characters.count\
    \ > 0 {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpbewmie6q.swift:15:27: error: 'characters' is unavailable:\
    \ Please use String directly\n                if string.characters.count > 1 {\n\
    \                          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    \n    for case in dict.keys {\n        guard case\
    \ is String else { return false }\n        guard case is String else { return\
    \ false }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp3znb010c.swift:9:14: error: expected pattern\n    for case in dict.keys\
    \ {\n             ^\n/tmp/tmp3znb010c.swift:10:30: error: variable binding in\
    \ a condition requires an initializer\n        guard case is String else { return\
    \ false }\n                             ^\n/tmp/tmp3znb010c.swift:11:30: error:\
    \ variable binding in a condition requires an initializer\n        guard case\
    \ is String else { return false }\n                             ^\n"
  stdout: ''
  timestamp: 1660011623
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard dict.count\
    \ > 0 else { return false }\n    \n    for (_, value) in dict {\n        if let\
    \ string = value as? String {\n            if string.lowercased() == string {\n\
    \                return true\n            }\n        }\n    }\n    \n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp45gjkxos/tmp45gjkxos.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48c2fadc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48c2ca4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48c2ca4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48c2ca37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp45gjkxos                        0x000055d5316af965 <unavailable> + 6501

    5    libc.so.6                          0x00002b48c3199460 __libc_start_main +
    245

    6    tmp45gjkxos                        0x000055d5316af349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660011624
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    for key in dict.keys {\n        if let string = key\
    \ as? String {\n            if string.lowercased() == string {\n             \
    \   return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp_jgd1dfh/tmp_jgd1dfh.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab87e7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab87b72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab87b72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab87b717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_jgd1dfh                        0x0000555911c799c5 <unavailable> + 6597

    5    libc.so.6                          0x00002aab88067460 __libc_start_main +
    245

    6    tmp_jgd1dfh                        0x0000555911c793a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard dict.count\
    \ > 0 else { return false }\n    \n    for k in dict.keys {\n        guard let\
    \ v = dict[k] else { return false }\n        \n        switch v {\n        case\
    \ let s as String:\n            if s.isLowercase {\n                return true\n\
    \            }\n        case let s as String:\n            if s.isUppercase {\n\
    \                return true\n            }\n        }\n    }\n    \n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmzoz4u7l.swift:13:20: warning: 'as' test is always true\n     \
    \   case let s as String:\n                   ^\n/tmp/tmpmzoz4u7l.swift:17:20:\
    \ warning: 'as' test is always true\n        case let s as String:\n         \
    \          ^\n/tmp/tmpmzoz4u7l.swift:14:18: error: value of type 'String' has\
    \ no member 'isLowercase'\n            if s.isLowercase {\n               ~ ^~~~~~~~~~~\n\
    /tmp/tmpmzoz4u7l.swift:18:18: error: value of type 'String' has no member 'isUppercase'\n\
    \            if s.isUppercase {\n               ~ ^~~~~~~~~~~\n/tmp/tmpmzoz4u7l.swift:17:14:\
    \ warning: case is already handled by previous patterns; consider removing it\n\
    \        case let s as String:\n             ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard dict.count\
    \ > 0 else { return false }\n    \n    for k in dict.keys {\n        let lower\
    \ = k.lowercased()\n        let upper = k.uppercased()\n        \n        if lower\
    \ != upper {\n            return false\n        }\n    }\n    \n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpy64bicl4/tmpy64bicl4.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b291fa05c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b291f6fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b291f6fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b291f6fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy64bicl4                        0x000056086124d843 <unavailable> + 6211

    5    libc.so.6                          0x00002b291fbf1460 __libc_start_main +
    245

    6    tmpy64bicl4                        0x000056086124d3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660011624
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    \n    for key in dict.keys {\n        guard let value\
    \ = dict[key] else { return false }\n        \n        switch value.lowercased()\
    \ {\n        case value.uppercased():\n            return true\n        default:\n\
    \            return false\n        }\n    }\n    \n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp4x9t9ttc/tmp4x9t9ttc.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac149c26c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac14991db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac14991d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac14991c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4x9t9ttc                        0x000056031eb6a893 <unavailable> + 6291

    5    libc.so.6                          0x00002ac149e12460 __libc_start_main +
    245

    6    tmp4x9t9ttc                        0x000056031eb6a449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660011624
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard dict.count\
    \ > 0 else { return false }\n    \n    for (_, value) in dict {\n        if let\
    \ value = value as? String {\n            if value.lowercased() == value {\n \
    \               return true\n            }\n        }\n    }\n    \n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpajkk5ux9/tmpajkk5ux9.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad4d7a3ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad4d7731b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad4d7731988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad4d77307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpajkk5ux9                        0x00005571e51ba965 <unavailable> + 6501

    5    libc.so.6                          0x00002ad4d7c26460 __libc_start_main +
    245

    6    tmpajkk5ux9                        0x00005571e51ba349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    for case in dict.keys {\n        guard case is String\
    \ else { return false }\n        guard case is String else { return false }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp03cbl1oc.swift:8:14: error: expected pattern\n    for case in dict.keys\
    \ {\n             ^\n/tmp/tmp03cbl1oc.swift:9:30: error: variable binding in a\
    \ condition requires an initializer\n        guard case is String else { return\
    \ false }\n                             ^\n/tmp/tmp03cbl1oc.swift:10:30: error:\
    \ variable binding in a condition requires an initializer\n        guard case\
    \ is String else { return false }\n                             ^\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    if dict == nil {\n\
    \        return false\n    }\n    for k in dict {\n        if let v = dict[k]\
    \ {\n            if let s = String(v) {\n                if s.isLowercase {\n\
    \                    return true\n                }\n                if s.isUppercase\
    \ {\n                    return true\n                }\n            }\n     \
    \   }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpifpqaxpm.swift:7:13: warning: comparing non-optional value of type\
    \ '[String : String]' to 'nil' always returns false\n    if dict == nil {\n  \
    \     ~~~~ ^  ~~~\n/tmp/tmpifpqaxpm.swift:11:25: error: cannot convert value of\
    \ type '(key: String, value: String)' to expected argument type 'String'\n   \
    \     if let v = dict[k] {\n                        ^\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    for key in dict.keys {\n        guard let value =\
    \ dict[key] else { return false }\n        switch value.lowercased() {\n     \
    \   case value.uppercased():\n            return true\n        default:\n    \
    \        return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpidlkrhsd/tmpidlkrhsd.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9329eb7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9329baeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9329bae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9329bad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpidlkrhsd                        0x00005599d0932893 <unavailable> + 6291

    5    libc.so.6                          0x00002b932a0a3460 __libc_start_main +
    245

    6    tmpidlkrhsd                        0x00005599d0932449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    if dict == nil {\n\
    \        return false\n    }\n    \n    for k in dict.keys {\n        let lower\
    \ = k.lowercaseString\n        let upper = k.uppercaseString\n        if lower\
    \ != upper {\n            return false\n        }\n    }\n    \n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0au8jtzh.swift:7:13: warning: comparing non-optional value of type\
    \ '[String : String]' to 'nil' always returns false\n    if dict == nil {\n  \
    \     ~~~~ ^  ~~~\n/tmp/tmp0au8jtzh.swift:12:23: error: value of type 'String'\
    \ has no member 'lowercaseString'\n        let lower = k.lowercaseString\n   \
    \                 ~ ^~~~~~~~~~~~~~~\n/tmp/tmp0au8jtzh.swift:13:23: error: value\
    \ of type 'String' has no member 'uppercaseString'\n        let upper = k.uppercaseString\n\
    \                    ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard dict.count\
    \ > 0 else { return false }\n    \n    for k in dict.keys {\n        let lower\
    \ = k.lowercased()\n        let upper = k.uppercased()\n        if lower != upper\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpa6s9e8xt/tmpa6s9e8xt.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee0bbf5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee0b8ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee0b8ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee0b8eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa6s9e8xt                        0x000055b32257d843 <unavailable> + 6211

    5    libc.so.6                          0x00002aee0bde1460 __libc_start_main +
    245

    6    tmpa6s9e8xt                        0x000055b32257d3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660011624
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    \n    for key in dict.keys {\n        let value =\
    \ dict[key]\n        \n        switch key {\n        case let key as String:\n\
    \            if key.lowercased() == key {\n                return true\n     \
    \       }\n        case let key as String:\n            if key.uppercased() ==\
    \ key {\n                return true\n            }\n        }\n    }\n    \n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpob1_mazo/tmpob1_mazo.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea14226c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea13f1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea13f1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea13f1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpob1_mazo                        0x00005562c76c5a15 <unavailable> + 6677

    5    libc.so.6                          0x00002aea14412460 __libc_start_main +
    245

    6    tmpob1_mazo                        0x00005562c76c53f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660011624
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else {\n        return false\n    }\n    \n    for (_, value) in dict {\n  \
    \      if let value = value as? String {\n            if value.lowercased() ==\
    \ value {\n                return true\n            }\n        }\n    }\n    \n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp28ax13fr/tmp28ax13fr.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84fdd04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84fd9fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84fd9fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84fd9fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp28ax13fr                        0x0000555ddee31965 <unavailable> + 6501

    5    libc.so.6                          0x00002b84fdef0460 __libc_start_main +
    245

    6    tmp28ax13fr                        0x0000555ddee31349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660011624
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    \n    for key in dict.keys {\n        guard let value\
    \ = dict[key] else { return false }\n        \n        if let string = value as?\
    \ String {\n            if string.lowercased() == string {\n                return\
    \ true\n            }\n        }\n        \n        if let string = value as?\
    \ String {\n            if string.uppercased() == string {\n                return\
    \ true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpfzcts563/tmpfzcts563.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e44025c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e43d1cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e43d1c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e43d1b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfzcts563                        0x00005574c898ca65 <unavailable> + 6757

    5    libc.so.6                          0x00002b4e44211460 __libc_start_main +
    245

    6    tmpfzcts563                        0x00005574c898c449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    \n    for k in dict.keys {\n        if let _ = k.lowercased()\
    \ {\n            return true\n        }\n        if let _ = k.uppercased() {\n\
    \            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpa05n7gzo.swift:10:12: error: initializer for conditional binding\
    \ must have Optional type, not 'String'\n        if let _ = k.lowercased() {\n\
    \           ^       ~~~~~~~~~~~~~~\n/tmp/tmpa05n7gzo.swift:13:12: error: initializer\
    \ for conditional binding must have Optional type, not 'String'\n        if let\
    \ _ = k.uppercased() {\n           ^       ~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    \n    for key in dict.keys {\n        guard let value\
    \ = dict[key] else { return false }\n        \n        switch key {\n        case\
    \ let key as String:\n            guard let value = dict[key.lowercased()] else\
    \ { return false }\n            \n        case let key as String:\n          \
    \  guard let value = dict[key.uppercased()] else { return false }\n        }\n\
    \    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmph0nrq6g2/tmph0nrq6g2.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aced5144c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aced4e3bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aced4e3b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aced4e3a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph0nrq6g2                        0x0000565130d2cbc0 <unavailable> + 7104

    5    libc.so.6                          0x00002aced5330460 __libc_start_main +
    245

    6    tmph0nrq6g2                        0x0000565130d2c3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    \n    for case let (key, value) in dict {\n     \
    \   switch key {\n        case let key as String:\n            if key.isLowercase\
    \ {\n                return true\n            }\n        case let key as String:\n\
    \            if key.isUppercase {\n                return true\n            }\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\"\
    \ : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmphrppeywk.swift:11:22: warning: 'as' test is always true\n     \
    \   case let key as String:\n                     ^\n/tmp/tmphrppeywk.swift:15:22:\
    \ warning: 'as' test is always true\n        case let key as String:\n       \
    \              ^\n/tmp/tmphrppeywk.swift:12:20: error: value of type 'String'\
    \ has no member 'isLowercase'\n            if key.isLowercase {\n            \
    \   ~~~ ^~~~~~~~~~~\n/tmp/tmphrppeywk.swift:16:20: error: value of type 'String'\
    \ has no member 'isUppercase'\n            if key.isUppercase {\n            \
    \   ~~~ ^~~~~~~~~~~\n/tmp/tmphrppeywk.swift:15:14: warning: case is already handled\
    \ by previous patterns; consider removing it\n        case let key as String:\n\
    \             ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    \n    for key in dict.keys {\n        guard let value\
    \ = dict[key] else { return false }\n        \n        switch value.lowercased()\
    \ {\n        case value.uppercased():\n            return true\n        default:\n\
    \            return false\n        }\n    }\n    \n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp4x9t9ttc/tmp4x9t9ttc.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac149c26c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac14991db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac14991d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac14991c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4x9t9ttc                        0x000056031eb6a893 <unavailable> + 6291

    5    libc.so.6                          0x00002ac149e12460 __libc_start_main +
    245

    6    tmp4x9t9ttc                        0x000056031eb6a449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660011624
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard dict.count\
    \ > 0 else { return false }\n    for (_, value) in dict {\n        if let value\
    \ = value as? String {\n            if value.lowercased() == value {\n       \
    \         return true\n            } else if value.uppercased() == value {\n \
    \               return true\n            }\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpkq4s2h6j/tmpkq4s2h6j.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e724d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e721c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e721c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e721c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkq4s2h6j                        0x000055a199e489c5 <unavailable> + 6597

    5    libc.so.6                          0x00002b0e726bd460 __libc_start_main +
    245

    6    tmpkq4s2h6j                        0x000055a199e483a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    for key in dict.keys {\n        guard let value =\
    \ dict[key] else { return false }\n        guard let stringValue = value as? String\
    \ else { return false }\n        guard let lowerCase = stringValue.lowercased()\
    \ else { return false }\n        guard let upperCase = stringValue.uppercased()\
    \ else { return false }\n        if lowerCase != upperCase {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"\
    ]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\"\
    , \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpskdmnq9b.swift:10:39: warning: conditional cast from 'String' to\
    \ 'String' always succeeds\n        guard let stringValue = value as? String else\
    \ { return false }\n                                      ^\n/tmp/tmpskdmnq9b.swift:11:15:\
    \ error: initializer for conditional binding must have Optional type, not 'String'\n\
    \        guard let lowerCase = stringValue.lowercased() else { return false }\n\
    \              ^               ~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpskdmnq9b.swift:12:15:\
    \ error: initializer for conditional binding must have Optional type, not 'String'\n\
    \        guard let upperCase = stringValue.uppercased() else { return false }\n\
    \              ^               ~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard dict.count\
    \ > 0 else { return false }\n    \n    for (_, value) in dict {\n        guard\
    \ let value = value as? String else { return false }\n        \n        if value.lowercaseString.isEmpty\
    \ {\n            return false\n        }\n        \n        if value.uppercaseString.isEmpty\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpniovdl8a.swift:10:33: warning: conditional cast from 'String' to\
    \ 'String' always succeeds\n        guard let value = value as? String else {\
    \ return false }\n                                ^\n/tmp/tmpniovdl8a.swift:12:18:\
    \ error: value of type 'String' has no member 'lowercaseString'\n        if value.lowercaseString.isEmpty\
    \ {\n           ~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpniovdl8a.swift:16:18: error: value\
    \ of type 'String' has no member 'uppercaseString'\n        if value.uppercaseString.isEmpty\
    \ {\n           ~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    \n    for (_, value) in dict {\n        if let string\
    \ = value as? String {\n            if string.lowercaseString.isEmpty {\n    \
    \            return false\n            }\n            if string.uppercaseString.isEmpty\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmppo6bm3az.swift:10:31: warning: conditional cast from 'String' to\
    \ 'String' always succeeds\n        if let string = value as? String {\n     \
    \                         ^\n/tmp/tmppo6bm3az.swift:11:23: error: value of type\
    \ 'String' has no member 'lowercaseString'\n            if string.lowercaseString.isEmpty\
    \ {\n               ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmppo6bm3az.swift:14:23: error:\
    \ value of type 'String' has no member 'uppercaseString'\n            if string.uppercaseString.isEmpty\
    \ {\n               ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard dict.count\
    \ > 0 else { return false }\n    for k in dict.keys {\n        guard let v = dict[k]\
    \ else { return false }\n        if k == k.lowercased() || k == k.uppercased()\
    \ { return true }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"\
    ]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\"\
    , \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpkw09vs_r/tmpkw09vs_r.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7343a06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73436fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b73436fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73436fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkw09vs_r                        0x00005630a1267a65 <unavailable> + 6757

    5    libc.so.6                          0x00002b7343bf2460 __libc_start_main +
    245

    6    tmpkw09vs_r                        0x00005630a1267449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    for key in dict.keys {\n        guard let value =\
    \ dict[key] else { return false }\n        guard let stringValue = value as? String\
    \ else { return false }\n        guard stringValue.lowercaseString.isEmpty ==\
    \ false || stringValue.uppercaseString.isEmpty == false else { return false }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp05jxxuxf.swift:10:39: warning: conditional cast from 'String' to\
    \ 'String' always succeeds\n        guard let stringValue = value as? String else\
    \ { return false }\n                                      ^\n/tmp/tmp05jxxuxf.swift:11:27:\
    \ error: value of type 'String' has no member 'lowercaseString'\n        guard\
    \ stringValue.lowercaseString.isEmpty == false || stringValue.uppercaseString.isEmpty\
    \ == false else { return false }\n              ~~~~~~~~~~~ ^~~~~~~~~~~~~~~\n\
    /tmp/tmp05jxxuxf.swift:11:75: error: value of type 'String' has no member 'uppercaseString'\n\
    \        guard stringValue.lowercaseString.isEmpty == false || stringValue.uppercaseString.isEmpty\
    \ == false else { return false }\n                                           \
    \                   ~~~~~~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011623
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    if dict == nil {\n\
    \        return false\n    }\n    for k in dict.keys {\n        if let _ = k.lowercased()\
    \ {\n            return true\n        }\n        if let _ = k.uppercased() {\n\
    \            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8nefdbxt.swift:7:13: warning: comparing non-optional value of type\
    \ '[String : String]' to 'nil' always returns false\n    if dict == nil {\n  \
    \     ~~~~ ^  ~~~\n/tmp/tmp8nefdbxt.swift:11:12: error: initializer for conditional\
    \ binding must have Optional type, not 'String'\n        if let _ = k.lowercased()\
    \ {\n           ^       ~~~~~~~~~~~~~~\n/tmp/tmp8nefdbxt.swift:14:12: error: initializer\
    \ for conditional binding must have Optional type, not 'String'\n        if let\
    \ _ = k.uppercased() {\n           ^       ~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    \n    for key in dict.keys {\n        guard let value\
    \ = dict[key] else { return false }\n        \n        switch value.caseInsensitive\
    \ {\n        case .lowercase:\n            return true\n        case .uppercase:\n\
    \            return true\n        default:\n            return false\n       \
    \ }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmplolq7gu2.swift:12:22: error: value of type 'String' has no member\
    \ 'caseInsensitive'\n        switch value.caseInsensitive {\n               ~~~~~\
    \ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011623
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard dict.count\
    \ > 0 else { return false }\n    \n    for (_, value) in dict {\n        guard\
    \ let string = value as? String else { return false }\n        \n        if string.lowercased()\
    \ == string {\n            return true\n        }\n        \n        if string.uppercased()\
    \ == string {\n            return true\n        }\n    }\n    \n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp79d4dl4e/tmp79d4dl4e.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7443c4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7443942b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7443942988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74439417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp79d4dl4e                        0x000055eb2638a9c5 <unavailable> + 6597

    5    libc.so.6                          0x00002b7443e37460 __libc_start_main +
    245

    6    tmp79d4dl4e                        0x000055eb2638a3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    \n    for key in dict.keys {\n        guard let value\
    \ = dict[key] else { return false }\n        \n        switch value.caseInsensitiveCompare(key.lowercaseString)\
    \ {\n        case .orderedSame, .orderedAscending:\n            return true\n\
    \        case .orderedDescending:\n            return false\n        }\n    }\n\
    \    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjwszvvs0.swift:12:22: error: value of type 'String' has no member\
    \ 'caseInsensitiveCompare'\n        switch value.caseInsensitiveCompare(key.lowercaseString)\
    \ {\n               ~~~~~ ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjwszvvs0.swift:12:49:\
    \ error: value of type 'String' has no member 'lowercaseString'\n        switch\
    \ value.caseInsensitiveCompare(key.lowercaseString) {\n                      \
    \                      ~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    if dict.count ==\
    \ 0 {\n        return false\n    }\n    \n    for key in dict.keys {\n       \
    \ if let value = dict[key] {\n            if let string = value as? String {\n\
    \                if string.lowercaseString.isEmpty {\n                    return\
    \ false\n                }\n                if string.uppercaseString.isEmpty\
    \ {\n                    return false\n                }\n            }\n    \
    \    }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgj9w2t86.swift:13:35: warning: conditional cast from 'String' to\
    \ 'String' always succeeds\n            if let string = value as? String {\n \
    \                                 ^\n/tmp/tmpgj9w2t86.swift:14:27: error: value\
    \ of type 'String' has no member 'lowercaseString'\n                if string.lowercaseString.isEmpty\
    \ {\n                   ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpgj9w2t86.swift:17:27:\
    \ error: value of type 'String' has no member 'uppercaseString'\n            \
    \    if string.uppercaseString.isEmpty {\n                   ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    for key in dict.keys {\n        guard let value =\
    \ dict[key] else { return false }\n        switch value.lowercased() {\n     \
    \   case let value as String:\n            return true\n        default:\n   \
    \         return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpmq7wf841/tmpmq7wf841.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b454826ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4547f61b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4547f61988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4547f607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmq7wf841                        0x000055bc0e07d9c5 <unavailable> + 6597

    5    libc.so.6                          0x00002b4548456460 __libc_start_main +
    245

    6    tmpmq7wf841                        0x000055bc0e07d3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660011624
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    \n    for key in dict.keys {\n        let lower =\
    \ key.lowercased()\n        let upper = key.uppercased()\n        \n        if\
    \ lower != upper {\n            return false\n        }\n    }\n    \n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpnchz3h6e/tmpnchz3h6e.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98e72dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98e6fd3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98e6fd3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98e6fd27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnchz3h6e                        0x00005563710d8853 <unavailable> + 6227

    5    libc.so.6                          0x00002b98e74c8460 __libc_start_main +
    245

    6    tmpnchz3h6e                        0x00005563710d8409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    \n    for (_, value) in dict {\n        if let value\
    \ = value {\n            if let value = value.lowercased() {\n               \
    \ return true\n            } else if let value = value.uppercased() {\n      \
    \          return true\n            }\n        }\n    }\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwusb8ez4.swift:13:23: error: initializer for conditional binding\
    \ must have Optional type, not 'String'\n            } else if let value = value.uppercased()\
    \ {\n                      ^           ~~~~~~~~~~~~~~~~~~\n/tmp/tmpwusb8ez4.swift:11:16:\
    \ error: initializer for conditional binding must have Optional type, not 'String'\n\
    \            if let value = value.lowercased() {\n               ^           ~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpwusb8ez4.swift:10:12: error: initializer for conditional binding must\
    \ have Optional type, not 'String'\n        if let value = value {\n         \
    \  ^           ~~~~~\n/tmp/tmpwusb8ez4.swift:11:20: warning: value 'value' was\
    \ defined but never used; consider replacing with boolean test\n            if\
    \ let value = value.lowercased() {\n               ~~~~^~~~~~~~\n            \
    \                                  != nil\n/tmp/tmpwusb8ez4.swift:13:27: warning:\
    \ value 'value' was defined but never used; consider replacing with boolean test\n\
    \            } else if let value = value.uppercased() {\n                    \
    \  ~~~~^~~~~~~~\n                                                     != nil\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard dict.count\
    \ > 0 else { return false }\n    for (_, value) in dict {\n        guard let value\
    \ = value as? String else { return false }\n        if value.lowercased() == value\
    \ {\n            return true\n        }\n        if value.uppercased() == value\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpqkbi1q6o/tmpqkbi1q6o.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b095a1d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0959ecdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0959ecd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0959ecc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqkbi1q6o                        0x000055a5111639c5 <unavailable> + 6597

    5    libc.so.6                          0x00002b095a3c2460 __libc_start_main +
    245

    6    tmpqkbi1q6o                        0x000055a5111633a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard dict.count\
    \ > 0 else { return false }\n    \n    for case in dict.keys {\n        guard\
    \ case is String else { return false }\n        guard case is String else { return\
    \ false }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\"\
    \ : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmplrst_sei.swift:9:14: error: expected pattern\n    for case in dict.keys\
    \ {\n             ^\n/tmp/tmplrst_sei.swift:10:30: error: variable binding in\
    \ a condition requires an initializer\n        guard case is String else { return\
    \ false }\n                             ^\n/tmp/tmplrst_sei.swift:11:30: error:\
    \ variable binding in a condition requires an initializer\n        guard case\
    \ is String else { return false }\n                             ^\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    for key in dict.keys {\n        guard let value =\
    \ dict[key] else { return false }\n        switch value {\n        case let value\
    \ as String:\n            if value.lowercased() == value {\n                return\
    \ true\n            }\n        case let value as String:\n            if value.uppercased()\
    \ == value {\n                return true\n            }\n        default:\n \
    \           return false\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpg9vi1abl/tmpg9vi1abl.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18c62d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18c5fcab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b18c5fca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18c5fc97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg9vi1abl                        0x000055edeb1aaa15 <unavailable> + 6677

    5    libc.so.6                          0x00002b18c64bf460 __libc_start_main +
    245

    6    tmpg9vi1abl                        0x000055edeb1aa3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard dict.count\
    \ > 0 else { return false }\n    \n    for case in dict.keys {\n        guard\
    \ case is String else { return false }\n        guard case is String else { return\
    \ false }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4iqu5moc.swift:9:14: error: expected pattern\n    for case in dict.keys\
    \ {\n             ^\n/tmp/tmp4iqu5moc.swift:10:30: error: variable binding in\
    \ a condition requires an initializer\n        guard case is String else { return\
    \ false }\n                             ^\n/tmp/tmp4iqu5moc.swift:11:30: error:\
    \ variable binding in a condition requires an initializer\n        guard case\
    \ is String else { return false }\n                             ^\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    \n    for key in dict.keys {\n        let value =\
    \ dict[key]\n        \n        if let value = value as? String {\n           \
    \ if value.lowercased() == value {\n                return true\n            }\n\
    \        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"\
    ]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\"\
    , \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmprr883hg1/tmprr883hg1.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e958c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e955bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e955bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e955bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprr883hg1                        0x0000560530951a15 <unavailable> + 6677

    5    libc.so.6                          0x00002b1e95ab1460 __libc_start_main +
    245

    6    tmprr883hg1                        0x00005605309513f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else {\n        return false\n    }\n    \n    for key in dict.keys {\n    \
    \    if let string = dict[key] {\n            if string.lowercaseString.isEmpty\
    \ {\n                return false\n            } else if string.uppercaseString.isEmpty\
    \ {\n                return false\n            } else {\n                return\
    \ true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6fxsxm10.swift:13:23: error: value of type 'String' has no member\
    \ 'lowercaseString'\n            if string.lowercaseString.isEmpty {\n       \
    \        ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp6fxsxm10.swift:15:30: error: value of\
    \ type 'String' has no member 'uppercaseString'\n            } else if string.uppercaseString.isEmpty\
    \ {\n                      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else {\n        return false\n    }\n    \n    for (_, value) in dict {\n  \
    \      if let value = value as? String {\n            if value.lowercaseString.isEmpty\
    \ {\n                return false\n            } else if value.uppercaseString.isEmpty\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmph_rszut3.swift:12:30: warning: conditional cast from 'String' to\
    \ 'String' always succeeds\n        if let value = value as? String {\n      \
    \                       ^\n/tmp/tmph_rszut3.swift:13:22: error: value of type\
    \ 'String' has no member 'lowercaseString'\n            if value.lowercaseString.isEmpty\
    \ {\n               ~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmph_rszut3.swift:15:29: error:\
    \ value of type 'String' has no member 'uppercaseString'\n            } else if\
    \ value.uppercaseString.isEmpty {\n                      ~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    \n    for key in dict.keys {\n        guard let value\
    \ = dict[key] else { return false }\n        \n        switch value.lowercased()\
    \ {\n        case let key where key.hasPrefix(\"_\"):\n            return false\n\
    \        default:\n            return true\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpswwjpw77/tmpswwjpw77.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7d0013c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7cfd0ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7cfd0a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7cfd097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpswwjpw77                        0x000055b74c89ea15 <unavailable> + 6677

    5    libc.so.6                          0x00002ba7d01ff460 __libc_start_main +
    245

    6    tmpswwjpw77                        0x000055b74c89e3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660011624
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else {\n        return false\n    }\n    \n    for (_, value) in dict {\n  \
    \      if let value = value as? String {\n            if value.lowercased() ==\
    \ value {\n                return true\n            }\n            if value.uppercased()\
    \ == value {\n                return true\n            }\n        }\n    }\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpcl2f6uzs/tmpcl2f6uzs.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d6c0f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d6bdefb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d6bdef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d6bdee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcl2f6uzs                        0x00005558b22a29c5 <unavailable> + 6597

    5    libc.so.6                          0x00002b9d6c2e4460 __libc_start_main +
    245

    6    tmpcl2f6uzs                        0x00005558b22a23a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard dict.count\
    \ > 0 else { return false }\n    \n    for k in dict.keys {\n        guard let\
    \ v = dict[k] else { return false }\n        \n        switch v {\n        case\
    \ let s as String:\n            if s.isUppercase {\n                return false\n\
    \            }\n        case let s as String:\n            if s.isLowercase {\n\
    \                return false\n            }\n        }\n    }\n    \n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpk9aig56i.swift:13:20: warning: 'as' test is always true\n     \
    \   case let s as String:\n                   ^\n/tmp/tmpk9aig56i.swift:17:20:\
    \ warning: 'as' test is always true\n        case let s as String:\n         \
    \          ^\n/tmp/tmpk9aig56i.swift:14:18: error: value of type 'String' has\
    \ no member 'isUppercase'\n            if s.isUppercase {\n               ~ ^~~~~~~~~~~\n\
    /tmp/tmpk9aig56i.swift:18:18: error: value of type 'String' has no member 'isLowercase'\n\
    \            if s.isLowercase {\n               ~ ^~~~~~~~~~~\n/tmp/tmpk9aig56i.swift:17:14:\
    \ warning: case is already handled by previous patterns; consider removing it\n\
    \        case let s as String:\n             ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    \n    for key in dict.keys {\n        guard let value\
    \ = dict[key] else { return false }\n        \n        switch key {\n        case\
    \ let key as String:\n            if key.lowercased() == key {\n             \
    \   return true\n            }\n        case let key as String:\n            if\
    \ key.uppercased() == key {\n                return true\n            }\n    \
    \    }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpm1r1w4yy/tmpm1r1w4yy.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b000dca7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b000d99eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b000d99e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b000d99d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm1r1w4yy                        0x000055760a7a2a15 <unavailable> + 6677

    5    libc.so.6                          0x00002b000de93460 __libc_start_main +
    245

    6    tmpm1r1w4yy                        0x000055760a7a23f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    for case let (key, value) in dict {\n        if case\
    \ let .some(String(_)) = key {\n            if case let .some(String(_)) = value\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmprrietwsf.swift:9:17: warning: 'let' pattern has no effect; sub-pattern\
    \ didn't bind any variables\n        if case let .some(String(_)) = key {\n  \
    \              ^~~~~~~~~~~~~~~~~~~~\n                \n/tmp/tmprrietwsf.swift:9:34:\
    \ error: '_' can only appear in a pattern or on the left side of an assignment\n\
    \        if case let .some(String(_)) = key {\n                              \
    \   ^\n/tmp/tmprrietwsf.swift:9:40: error: type 'String' has no member 'some'\n\
    \        if case let .some(String(_)) = key {\n                    ~~~~~~~~~~~~~~~~\
    \   ^~~\n/tmp/tmprrietwsf.swift:10:21: warning: 'let' pattern has no effect; sub-pattern\
    \ didn't bind any variables\n            if case let .some(String(_)) = value\
    \ {\n                    ^~~~~~~~~~~~~~~~~~~~\n                    \n/tmp/tmprrietwsf.swift:10:38:\
    \ error: '_' can only appear in a pattern or on the left side of an assignment\n\
    \            if case let .some(String(_)) = value {\n                        \
    \             ^\n/tmp/tmprrietwsf.swift:10:44: error: type 'String' has no member\
    \ 'some'\n            if case let .some(String(_)) = value {\n               \
    \         ~~~~~~~~~~~~~~~~   ^~~~~\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    \n    for k in dict.keys {\n        guard let v =\
    \ dict[k] else { return false }\n        \n        switch v {\n        case let\
    \ s as String:\n            if s.isUppercase {\n                return false\n\
    \            }\n        case let s as String:\n            if s.isLowercase {\n\
    \                return false\n            }\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8ldgmqcw.swift:13:20: warning: 'as' test is always true\n     \
    \   case let s as String:\n                   ^\n/tmp/tmp8ldgmqcw.swift:17:20:\
    \ warning: 'as' test is always true\n        case let s as String:\n         \
    \          ^\n/tmp/tmp8ldgmqcw.swift:14:18: error: value of type 'String' has\
    \ no member 'isUppercase'\n            if s.isUppercase {\n               ~ ^~~~~~~~~~~\n\
    /tmp/tmp8ldgmqcw.swift:18:18: error: value of type 'String' has no member 'isLowercase'\n\
    \            if s.isLowercase {\n               ~ ^~~~~~~~~~~\n/tmp/tmp8ldgmqcw.swift:17:14:\
    \ warning: case is already handled by previous patterns; consider removing it\n\
    \        case let s as String:\n             ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard dict.count\
    \ > 0 else { return false }\n    \n    for k in dict.keys {\n        guard let\
    \ v = dict[k] else { return false }\n        \n        switch v {\n        case\
    \ let v as String:\n            if v.isEmpty {\n                return false\n\
    \            }\n        case let v as String:\n            if v.isEmpty {\n  \
    \              return false\n            }\n        default:\n            return\
    \ false\n        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp9_0st95u/tmp9_0st95u.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0c8197c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0c7e8eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0c7e8e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0c7e8d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9_0st95u                        0x000055aad85f29b5 <unavailable> + 6581

    5    libc.so.6                          0x00002af0c8383460 __libc_start_main +
    245

    6    tmp9_0st95u                        0x000055aad85f2399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660011624
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    \n    for (_, value) in dict {\n        if let value\
    \ = value as? String {\n            if value.lowercased() == value {\n       \
    \         return true\n            } else if value.uppercased() == value {\n \
    \               return true\n            }\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp3o3_i0zc/tmp3o3_i0zc.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4a6185c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4a5e7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4a5e7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4a5e7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3o3_i0zc                        0x000056415cec29c5 <unavailable> + 6597

    5    libc.so.6                          0x00002ae4a6371460 __libc_start_main +
    245

    6    tmp3o3_i0zc                        0x000056415cec23a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard dict.count\
    \ > 0 else { return false }\n    \n    for k in dict.keys {\n        if let _\
    \ = k.lowercased() {\n            return true\n        }\n        if let _ = k.uppercased()\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_nm3r5_s.swift:10:12: error: initializer for conditional binding\
    \ must have Optional type, not 'String'\n        if let _ = k.lowercased() {\n\
    \           ^       ~~~~~~~~~~~~~~\n/tmp/tmp_nm3r5_s.swift:13:12: error: initializer\
    \ for conditional binding must have Optional type, not 'String'\n        if let\
    \ _ = k.uppercased() {\n           ^       ~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    for k in dict.keys {\n        guard let v = dict[k]\
    \ else { return false }\n        guard let s = String(describing: v) else { return\
    \ false }\n        guard s.isLowercase || s.isUppercase else { return false }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwqacordk.swift:10:15: error: initializer for conditional binding\
    \ must have Optional type, not 'String'\n        guard let s = String(describing:\
    \ v) else { return false }\n              ^       ~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpwqacordk.swift:11:17:\
    \ error: value of type 'String' has no member 'isLowercase'\n        guard s.isLowercase\
    \ || s.isUppercase else { return false }\n              ~ ^~~~~~~~~~~\n/tmp/tmpwqacordk.swift:11:34:\
    \ error: value of type 'String' has no member 'isUppercase'\n        guard s.isLowercase\
    \ || s.isUppercase else { return false }\n                               ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    \n    for key in dict.keys {\n        guard let value\
    \ = dict[key] else { return false }\n        \n        switch value.caseInsensitiveCompare(key)\
    \  {\n        case .orderedSame, .orderedAscending:\n            return true\n\
    \        case .orderedDescending:\n            return false\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4vlny9wr.swift:12:22: error: value of type 'String' has no member\
    \ 'caseInsensitiveCompare'\n        switch value.caseInsensitiveCompare(key) \
    \ {\n               ~~~~~ ^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else {\n        return false\n    }\n    \n    for key in dict.keys {\n    \
    \    let lowerCase = key.lowercased()\n        let upperCase = key.uppercased()\n\
    \        \n        if lowerCase == upperCase {\n            return false\n   \
    \     }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\"\
    \ : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpoi6sa8tl/tmpoi6sa8tl.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1695b2dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1695824b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1695824988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16958237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoi6sa8tl                        0x0000559bb8c97a25 <unavailable> + 6693

    5    libc.so.6                          0x00002b1695d19460 __libc_start_main +
    245

    6    tmpoi6sa8tl                        0x0000559bb8c97409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011623
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    for key in dict.keys {\n        let value = dict[key]\n\
    \        if let value = value as? String {\n            if value.lowercased()\
    \ == value {\n                return true\n            } else if value.uppercased()\
    \ == value {\n                return true\n            }\n        }\n    }\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpmmjsk_37/tmpmmjsk_37.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74e8f04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74e8bfbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74e8bfb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74e8bfa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmmjsk_37                        0x00005581fdf2ea65 <unavailable> + 6757

    5    libc.so.6                          0x00002b74e90f0460 __libc_start_main +
    245

    6    tmpmmjsk_37                        0x00005581fdf2e449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    for k in dict.keys {\n        guard let v = dict[k]\
    \ else { return false }\n        guard let s = String(describing: v) else { return\
    \ false }\n        guard s.isUppercase else { return false }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpg8pdwajx.swift:10:15: error: initializer for conditional binding\
    \ must have Optional type, not 'String'\n        guard let s = String(describing:\
    \ v) else { return false }\n              ^       ~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpg8pdwajx.swift:11:17:\
    \ error: value of type 'String' has no member 'isUppercase'\n        guard s.isUppercase\
    \ else { return false }\n              ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    for case let (key, value) in dict {\n        if case\
    \ let .init(key: String) = key {\n            if case let .init(key: String) =\
    \ key {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5jipukst.swift:9:22: error: no exact matches in call to initializer\
    \ \n        if case let .init(key: String) = key {\n                     ^\nSwift.String:2:23:\
    \ note: incorrect labels for candidate (have: '(key:)', expected: '(_:)')\n  \
    \  @inlinable public init(_ c: Character)\n                      ^\nSwift.String:3:23:\
    \ note: incorrect labels for candidate (have: '(key:)', expected: '(_:)')\n  \
    \  @inlinable public init(_ scalar: Unicode.Scalar)\n                      ^\n\
    Swift.String:2:23: note: incorrect labels for candidate (have: '(key:)', expected:\
    \ '(_:)')\n    @inlinable public init(_ unicodeScalars: String.UnicodeScalarView)\n\
    \                      ^\nSwift.String:4:23: note: incorrect labels for candidate\
    \ (have: '(key:)', expected: '(_:)')\n    @inlinable public init(_ utf16: String.UTF16View)\n\
    \                      ^\nSwift.String:5:23: note: incorrect labels for candidate\
    \ (have: '(key:)', expected: '(_:)')\n    @inlinable public init(_ utf8: String.UTF8View)\n\
    \                      ^\nSwift.String:2:23: note: incorrect labels for candidate\
    \ (have: '(key:)', expected: '(_:)')\n    @inlinable public init(_ substring:\
    \ __shared Substring)\n                      ^\nSwift.String:2:12: note: incorrect\
    \ labels for candidate (have: '(key:)', expected: '(_:)')\n    public init(_ content:\
    \ Substring.UnicodeScalarView)\n           ^\nSwift.Substring:2:12: note: incorrect\
    \ labels for candidate (have: '(key:)', expected: '(_:)')\n    public init(_ content:\
    \ String)\n           ^\nSwift.Substring:3:12: note: incorrect labels for candidate\
    \ (have: '(key:)', expected: '(_:)')\n    public init(_ content: Substring.UTF8View)\n\
    \           ^\nSwift.Substring:3:12: note: incorrect labels for candidate (have:\
    \ '(key:)', expected: '(_:)')\n    public init(_ content: Substring.UTF16View)\n\
    \           ^\nSwift.Substring:3:12: note: incorrect labels for candidate (have:\
    \ '(key:)', expected: '(_:)')\n    public init(_ content: Substring.UnicodeScalarView)\n\
    \           ^\n/tmp/tmp5jipukst.swift:10:26: error: no exact matches in call to\
    \ initializer \n            if case let .i"
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard dict.count\
    \ > 0 else { return false }\n    \n    for case in 0..<dict.count {\n        guard\
    \ let key = dict[key] else { return false }\n        guard let value = dict[key.lowercased()]\
    \ else { return false }\n        guard let value2 = dict[key.uppercased()] else\
    \ { return false }\n        \n        if value != value2 { return false }\n  \
    \  }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdl7jpmia.swift:9:14: error: expected pattern\n    for case in 0..<dict.count\
    \ {\n             ^\n/tmp/tmpdl7jpmia.swift:10:30: error: cannot find 'key' in\
    \ scope\n        guard let key = dict[key] else { return false }\n           \
    \                  ^~~\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    \n    for key in dict.keys {\n        guard let value\
    \ = dict[key] else { return false }\n        \n        switch value.lowercased()\
    \ {\n        case let x where x.isUppercase():\n            return false\n   \
    \     default:\n            return true\n        }\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsmaf9nsk.swift:13:28: error: value of type 'String' has no member\
    \ 'isUppercase'\n        case let x where x.isUppercase():\n                 \
    \        ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    \n    for key in dict.keys {\n        guard let value\
    \ = dict[key] else { return false }\n        \n        switch value {\n      \
    \  case let stringValue as String:\n            if stringValue.lowercased() ==\
    \ stringValue {\n                return true\n            }\n        case let\
    \ stringValue as String:\n            if stringValue.uppercased() == stringValue\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpjjmghtud/tmpjjmghtud.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d26a30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d26727b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d26727988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d267267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjmghtud                        0x000056287b490a15 <unavailable> + 6677

    5    libc.so.6                          0x00002b8d26c1c460 __libc_start_main +
    245

    6    tmpjjmghtud                        0x000056287b4903f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660011625
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    \n    for (_, value) in dict {\n        if let value\
    \ = value as? String {\n            if value.lowercased() == value {\n       \
    \         return true\n            }\n        }\n    }\n    \n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp2u9ef5wb/tmp2u9ef5wb.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbe8b1ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbe8811b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbe8811988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbe88107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2u9ef5wb                        0x0000555f7436e965 <unavailable> + 6501

    5    libc.so.6                          0x00002adbe8d06460 __libc_start_main +
    245

    6    tmp2u9ef5wb                        0x0000555f7436e349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard dict.count\
    \ > 0 else { return false }\n    \n    for case in dict.keys {\n        switch\
    \ case {\n        case let key as String:\n            if key.lowercaseString.isEmpty\
    \ {\n                return false\n            }\n        case let key as String:\n\
    \            if key.uppercaseString.isEmpty {\n                return false\n\
    \            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvq3a11pk.swift:9:14: error: expected pattern\n    for case in dict.keys\
    \ {\n             ^\n/tmp/tmpvq3a11pk.swift:10:16: error: expected expression\
    \ in 'switch' statement\n        switch case {\n               ^\n/tmp/tmpvq3a11pk.swift:10:16:\
    \ error: 'case' label can only appear inside a 'switch' statement\n        switch\
    \ case {\n               ^\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    for key in dict.keys {\n        guard let value =\
    \ dict[key] else { return false }\n        guard let stringValue = value as? String\
    \ else { return false }\n        guard stringValue.lowercaseString.isEmpty ==\
    \ stringValue.uppercaseString.isEmpty else { return false }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptzkmszts.swift:10:39: warning: conditional cast from 'String' to\
    \ 'String' always succeeds\n        guard let stringValue = value as? String else\
    \ { return false }\n                                      ^\n/tmp/tmptzkmszts.swift:11:27:\
    \ error: value of type 'String' has no member 'lowercaseString'\n        guard\
    \ stringValue.lowercaseString.isEmpty == stringValue.uppercaseString.isEmpty else\
    \ { return false }\n              ~~~~~~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmptzkmszts.swift:11:66:\
    \ error: value of type 'String' has no member 'uppercaseString'\n        guard\
    \ stringValue.lowercaseString.isEmpty == stringValue.uppercaseString.isEmpty else\
    \ { return false }\n                                                     ~~~~~~~~~~~\
    \ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    if dict == nil {\n\
    \        return false\n    }\n    \n    for k in dict.keys {\n        if k.isEmpty\
    \ {\n            return false\n        }\n        \n        if k.lowercaseString\
    \ != k {\n            return false\n        }\n    }\n    \n    for k in dict.keys\
    \ {\n        if k.uppercaseString != k {\n            return false\n        }\n\
    \    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2w4fnfiy.swift:7:13: warning: comparing non-optional value of type\
    \ '[String : String]' to 'nil' always returns false\n    if dict == nil {\n  \
    \     ~~~~ ^  ~~~\n/tmp/tmp2w4fnfiy.swift:16:14: error: value of type 'String'\
    \ has no member 'lowercaseString'\n        if k.lowercaseString != k {\n     \
    \      ~ ^~~~~~~~~~~~~~~\n/tmp/tmp2w4fnfiy.swift:22:14: error: value of type 'String'\
    \ has no member 'uppercaseString'\n        if k.uppercaseString != k {\n     \
    \      ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    if dict == nil {\n\
    \        return false\n    }\n    \n    for k in dict.keys {\n        switch k\
    \ {\n        case k as String:\n        case k as NSString:\n        case k as\
    \ NSMutableString:\n        case k as NSData:\n        case k as NSMutableData:\n\
    \        case k as NSURL:\n        case k as NSMutableURL:\n        case k as\
    \ NSRange:\n        case k as NSMutableRange:\n        case k as NSIndexSet:\n\
    \        case k as NSMutableIndexSet:\n        case k as NSRange:\n        case\
    \ k as NSMutableRange:\n        case k as NSIndexSet:\n        case k as NSMutableIndexSet:\n\
    \        case k as NSURL:\n        case k as NSMutableURL:\n        case k as\
    \ NSData:\n        case k as NSMutableData:\n        case k as NSURL:\n      \
    \  case k as NSMutableURL:\n        case k as NSData:\n        case k as NSMutableData:\n\
    \        case k as NSURL:\n        case k as NSMutableURL:\n        case k as\
    \ NSData:\n        case k as NSMutableData:\n        case k as NSURL:\n      \
    \  case k as NSMutableURL:\n        case k as NSData:\n        case k as NSMutableData:\n\
    \        case k as NSURL:\n        case k as NSMutableURL:\n        case k as\
    \ NSData:\n        case k as NSMutableData:\n        case k as NSURL:\n      \
    \  case k as NSMutableURL:\n        case k as NSData:\n        case k as NSMutableData:\n\
    \        case k as NSURL:\n        case k as NSMutableURL:\n        case k as\
    \ NSData:\n        case k as NSMutableData:\n        case k as NSURL:\n      \
    \  case k as NSMutableURL:\n        case k as NSData:\n        case k as NSMutableData:\n\
    \        case k as NSURL:\n        case k as NSMutableURL:\n        case k as\
    \ NSData:\n        case k as NSMutableData:\n        case k as NSURL:\n      \
    \  case k as NSMutableURL:\n        case k as NSData:\n        case k as NSMutableData:\n\
    \        case k as NSURL:\n        case k as NSMutableURL:\n        case k as\
    \ NSData:\n        case k as NSMutableData:\n        case k as NSURL:\n      \
    \  case k as NSMutableURL:\n        case k as NSData:\n        case k as NSMutableData:\n\
    \        case k as NSURL:\n        case k as NSMutableURL:\n        case k as\
    \ NSData:\n        case k as NSMutableData:\n        case k as NSURL:\n      \
    \  case k as NSMutableURL\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp28mfzweo.swift:13:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case k as String:\n        ^~~~~~~~~~~~~~~~~\n\
    \                          break\n/tmp/tmp28mfzweo.swift:14:9: error: 'case' label\
    \ in a 'switch' must have at least one executable statement\n        case k as\
    \ NSString:\n        ^~~~~~~~~~~~~~~~~~~\n                            break\n\
    /tmp/tmp28mfzweo.swift:15:9: error: 'case' label in a 'switch' must have at least\
    \ one executable statement\n        case k as NSMutableString:\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \                                   break\n/tmp/tmp28mfzweo.swift:16:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case k as NSData:\n        ^~~~~~~~~~~~~~~~~\n                         \
    \ break\n/tmp/tmp28mfzweo.swift:17:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case k as NSMutableData:\n      \
    \  ^~~~~~~~~~~~~~~~~~~~~~~~\n                                 break\n/tmp/tmp28mfzweo.swift:18:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case k as NSURL:\n        ^~~~~~~~~~~~~~~~\n                        \
    \ break\n/tmp/tmp28mfzweo.swift:19:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case k as NSMutableURL:\n       \
    \ ^~~~~~~~~~~~~~~~~~~~~~~\n                                break\n/tmp/tmp28mfzweo.swift:20:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case k as NSRange:\n        ^~~~~~~~~~~~~~~~~~\n                    \
    \       break\n/tmp/tmp28mfzweo.swift:21:9: error: 'case' label in a 'switch'\
    \ must have at least one executable statement\n        case k as NSMutableRange:\n\
    \        ^~~~~~~~~~~~~~~~~~~~~~~~~\n                                  break\n\
    /tmp/tmp28mfzweo.swift:22:9: error: 'case' label in a 'switch' must have at least\
    \ one executable statement\n        case k as NSIndexSet:\n        ^~~~~~~~~~~~~~~~~~~~~\n\
    \                              break\n/tmp/tmp28mfzweo.swift:23:9: e"
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    for (_, value) in dict {\n        if let value =\
    \ value {\n            if let value = value.lowercased() {\n                return\
    \ true\n            } else if let value = value.uppercased() {\n             \
    \   return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmppd_ixohx.swift:12:23: error: initializer for conditional binding\
    \ must have Optional type, not 'String'\n            } else if let value = value.uppercased()\
    \ {\n                      ^           ~~~~~~~~~~~~~~~~~~\n/tmp/tmppd_ixohx.swift:10:16:\
    \ error: initializer for conditional binding must have Optional type, not 'String'\n\
    \            if let value = value.lowercased() {\n               ^           ~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmppd_ixohx.swift:9:12: error: initializer for conditional binding must have\
    \ Optional type, not 'String'\n        if let value = value {\n           ^  \
    \         ~~~~~\n/tmp/tmppd_ixohx.swift:10:20: warning: value 'value' was defined\
    \ but never used; consider replacing with boolean test\n            if let value\
    \ = value.lowercased() {\n               ~~~~^~~~~~~~\n                      \
    \                        != nil\n/tmp/tmppd_ixohx.swift:12:27: warning: value\
    \ 'value' was defined but never used; consider replacing with boolean test\n \
    \           } else if let value = value.uppercased() {\n                     \
    \ ~~~~^~~~~~~~\n                                                     != nil\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    for k in dict.keys {\n        guard let v = dict[k]\
    \ else { return false }\n        switch v {\n        case let v as String:\n \
    \           if v.lowercased() == v { return true }\n        case let v as String:\n\
    \            if v.uppercased() == v { return true }\n        default:\n      \
    \      return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmphdh0lfwe/tmphdh0lfwe.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1398f20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1398c17b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1398c17988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1398c167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphdh0lfwe                        0x0000556ba304ba15 <unavailable> + 6677

    5    libc.so.6                          0x00002b139910c460 __libc_start_main +
    245

    6    tmphdh0lfwe                        0x0000556ba304b3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660011625
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else {\n        return false\n    }\n    \n    for key in dict.keys {\n    \
    \    if let _ = key.lowercased() {\n            return true\n        }\n     \
    \   if let _ = key.uppercased() {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpr03t9w6_.swift:12:12: error: initializer for conditional binding\
    \ must have Optional type, not 'String'\n        if let _ = key.lowercased() {\n\
    \           ^       ~~~~~~~~~~~~~~~~\n/tmp/tmpr03t9w6_.swift:15:12: error: initializer\
    \ for conditional binding must have Optional type, not 'String'\n        if let\
    \ _ = key.uppercased() {\n           ^       ~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard dict.count\
    \ > 0 else { return false }\n    \n    for (_, value) in dict {\n        if let\
    \ value = value {\n            if let string = value as? String {\n          \
    \      if string.lowercased() == string {\n                    return true\n \
    \               }\n            }\n        }\n    }\n    \n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1brlnsmu.swift:11:35: warning: conditional cast from 'String' to\
    \ 'String' always succeeds\n            if let string = value as? String {\n \
    \                                 ^\n/tmp/tmp1brlnsmu.swift:10:12: error: initializer\
    \ for conditional binding must have Optional type, not 'String'\n        if let\
    \ value = value {\n           ^           ~~~~~\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else {\n        return false\n    }\n    \n    for key in dict.keys {\n    \
    \    guard let value = dict[key] else {\n            return false\n        }\n\
    \        \n        if let value = value as? String {\n            if value.lowercaseString.isEmpty\
    \ {\n                return false\n            }\n        }\n        \n      \
    \  if let value = value as? String {\n            if value.uppercaseString.isEmpty\
    \ {\n                return false\n            }\n        }\n    }\n    \n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcjw4flkw.swift:16:30: warning: conditional cast from 'String' to\
    \ 'String' always succeeds\n        if let value = value as? String {\n      \
    \                       ^\n/tmp/tmpcjw4flkw.swift:17:22: error: value of type\
    \ 'String' has no member 'lowercaseString'\n            if value.lowercaseString.isEmpty\
    \ {\n               ~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpcjw4flkw.swift:22:30: warning:\
    \ conditional cast from 'String' to 'String' always succeeds\n        if let value\
    \ = value as? String {\n                             ^\n/tmp/tmpcjw4flkw.swift:23:22:\
    \ error: value of type 'String' has no member 'uppercaseString'\n            if\
    \ value.uppercaseString.isEmpty {\n               ~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011625
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    for key in dict.keys {\n        guard let value =\
    \ dict[key] else { return false }\n        guard let lowerCase = value.lowercased()\
    \ else { return false }\n        guard let upperCase = value.uppercased() else\
    \ { return false }\n        if lowerCase == upperCase {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\"\
    \ : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpodrz591z.swift:10:15: error: initializer for conditional binding\
    \ must have Optional type, not 'String'\n        guard let lowerCase = value.lowercased()\
    \ else { return false }\n              ^               ~~~~~~~~~~~~~~~~~~\n/tmp/tmpodrz591z.swift:11:15:\
    \ error: initializer for conditional binding must have Optional type, not 'String'\n\
    \        guard let upperCase = value.uppercased() else { return false }\n    \
    \          ^               ~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011625
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard dict.count\
    \ > 0 else { return false }\n    \n    for (_, value) in dict {\n        if let\
    \ value = value {\n            if let value = value.lowercased() {\n         \
    \       return true\n            }\n            if let value = value.uppercased()\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdwawrs7b.swift:11:16: error: initializer for conditional binding\
    \ must have Optional type, not 'String'\n            if let value = value.lowercased()\
    \ {\n               ^           ~~~~~~~~~~~~~~~~~~\n/tmp/tmpdwawrs7b.swift:14:16:\
    \ error: initializer for conditional binding must have Optional type, not 'String'\n\
    \            if let value = value.uppercased() {\n               ^           ~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpdwawrs7b.swift:10:12: error: initializer for conditional binding must\
    \ have Optional type, not 'String'\n        if let value = value {\n         \
    \  ^           ~~~~~\n/tmp/tmpdwawrs7b.swift:11:20: warning: value 'value' was\
    \ defined but never used; consider replacing with boolean test\n            if\
    \ let value = value.lowercased() {\n               ~~~~^~~~~~~~\n            \
    \                                  != nil\n/tmp/tmpdwawrs7b.swift:14:20: warning:\
    \ value 'value' was defined but never used; consider replacing with boolean test\n\
    \            if let value = value.uppercased() {\n               ~~~~^~~~~~~~\n\
    \                                              != nil\n"
  stdout: ''
  timestamp: 1660011625
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    \n    for key in dict.keys {\n        guard let value\
    \ = dict[key] else { return false }\n        \n        switch value.caseInsensitiveCompare(key)\
    \ {\n        case .orderedSame, .orderedAscending:\n            return true\n\
    \        case .orderedDescending:\n            return false\n        }\n    }\n\
    \    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvuio_ynk.swift:12:22: error: value of type 'String' has no member\
    \ 'caseInsensitiveCompare'\n        switch value.caseInsensitiveCompare(key) {\n\
    \               ~~~~~ ^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011625
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    \n    for key in dict.keys {\n        guard let value\
    \ = dict[key] else { return false }\n        \n        switch value {\n      \
    \  case let value as String:\n            if value.lowercaseString.isEmpty {\n\
    \                return false\n            }\n        case let value as String:\n\
    \            if value.uppercaseString.isEmpty {\n                return false\n\
    \            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp67xzkapq.swift:13:24: warning: 'as' test is always true\n     \
    \   case let value as String:\n                       ^\n/tmp/tmp67xzkapq.swift:17:24:\
    \ warning: 'as' test is always true\n        case let value as String:\n     \
    \                  ^\n/tmp/tmp67xzkapq.swift:14:22: error: value of type 'String'\
    \ has no member 'lowercaseString'\n            if value.lowercaseString.isEmpty\
    \ {\n               ~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp67xzkapq.swift:18:22: error:\
    \ value of type 'String' has no member 'uppercaseString'\n            if value.uppercaseString.isEmpty\
    \ {\n               ~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp67xzkapq.swift:17:14: warning:\
    \ case is already handled by previous patterns; consider removing it\n       \
    \ case let value as String:\n             ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011625
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard dict.count\
    \ > 0 else { return false }\n    for (_, value) in dict {\n        if let value\
    \ = value as? String {\n            if value.lowercased() == value {\n       \
    \         return true\n            }\n        }\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmphmje_8b3/tmphmje_8b3.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1ab5c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af1ab2beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af1ab2be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1ab2bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphmje_8b3                        0x000055bbff795965 <unavailable> + 6501

    5    libc.so.6                          0x00002af1ab7b3460 __libc_start_main +
    245

    6    tmphmje_8b3                        0x000055bbff795349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660011625
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    for (_, value) in dict {\n        if let value =\
    \ value as? String {\n            if value.lowercaseString.isEmpty {\n       \
    \         return false\n            } else if value.uppercaseString.isEmpty {\n\
    \                return false\n            }\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp39wfn7y4.swift:9:30: warning: conditional cast from 'String' to\
    \ 'String' always succeeds\n        if let value = value as? String {\n      \
    \                       ^\n/tmp/tmp39wfn7y4.swift:10:22: error: value of type\
    \ 'String' has no member 'lowercaseString'\n            if value.lowercaseString.isEmpty\
    \ {\n               ~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp39wfn7y4.swift:12:29: error:\
    \ value of type 'String' has no member 'uppercaseString'\n            } else if\
    \ value.uppercaseString.isEmpty {\n                      ~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011623
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else {\n        return false\n    }\n    \n    for key in dict.keys {\n    \
    \    if let _ = key.lowercased() {\n            return true\n        }\n     \
    \   if let _ = key.uppercased() {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpr03t9w6_.swift:12:12: error: initializer for conditional binding\
    \ must have Optional type, not 'String'\n        if let _ = key.lowercased() {\n\
    \           ^       ~~~~~~~~~~~~~~~~\n/tmp/tmpr03t9w6_.swift:15:12: error: initializer\
    \ for conditional binding must have Optional type, not 'String'\n        if let\
    \ _ = key.uppercased() {\n           ^       ~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    \n    for k in dict.keys {\n        guard let v =\
    \ dict[k] else { return false }\n        \n        if v.isEmpty {\n          \
    \  return false\n        }\n        \n        if v.isEmpty {\n            return\
    \ false\n        }\n        \n        if v.lowercaseString.isEmpty {\n       \
    \     return false\n        }\n        \n        if v.uppercaseString.isEmpty\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpa0qrbmbo.swift:20:14: error: value of type 'String' has no member\
    \ 'lowercaseString'\n        if v.lowercaseString.isEmpty {\n           ~ ^~~~~~~~~~~~~~~\n\
    /tmp/tmpa0qrbmbo.swift:24:14: error: value of type 'String' has no member 'uppercaseString'\n\
    \        if v.uppercaseString.isEmpty {\n           ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011625
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    \n    for k in dict.keys {\n        guard let v =\
    \ dict[k] else { return false }\n        \n        if let s = String(describing:\
    \ v) {\n            if s.isUppercase {\n                return false\n       \
    \     } else {\n                return true\n            }\n        }\n    }\n\
    \    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpi98lyq7k.swift:13:18: error: value of type 'String' has no member\
    \ 'isUppercase'\n            if s.isUppercase {\n               ~ ^~~~~~~~~~~\n\
    /tmp/tmpi98lyq7k.swift:12:12: error: initializer for conditional binding must\
    \ have Optional type, not 'String'\n        if let s = String(describing: v) {\n\
    \           ^       ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011625
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    for k in dict.keys {\n        guard let v = dict[k]\
    \ else { return false }\n        switch v {\n        case let s as String:\n \
    \           if s.isLowercase {\n                return true\n            }\n \
    \       case let s as String:\n            if s.isUppercase {\n              \
    \  return true\n            }\n        default:\n            return false\n  \
    \      }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmppwwrmwv2.swift:11:20: warning: 'as' test is always true\n     \
    \   case let s as String:\n                   ^\n/tmp/tmppwwrmwv2.swift:15:20:\
    \ warning: 'as' test is always true\n        case let s as String:\n         \
    \          ^\n/tmp/tmppwwrmwv2.swift:12:18: error: value of type 'String' has\
    \ no member 'isLowercase'\n            if s.isLowercase {\n               ~ ^~~~~~~~~~~\n\
    /tmp/tmppwwrmwv2.swift:16:18: error: value of type 'String' has no member 'isUppercase'\n\
    \            if s.isUppercase {\n               ~ ^~~~~~~~~~~\n/tmp/tmppwwrmwv2.swift:15:14:\
    \ warning: case is already handled by previous patterns; consider removing it\n\
    \        case let s as String:\n             ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011625
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    for key in dict.keys {\n        guard let value =\
    \ dict[key] else { return false }\n        switch value.lowercased() {\n     \
    \   case value.uppercased():\n            return true\n        default:\n    \
    \        return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpidlkrhsd/tmpidlkrhsd.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9329eb7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9329baeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9329bae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9329bad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpidlkrhsd                        0x00005599d0932893 <unavailable> + 6291

    5    libc.so.6                          0x00002b932a0a3460 __libc_start_main +
    245

    6    tmpidlkrhsd                        0x00005599d0932449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660011624
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    for key in dict.keys {\n        let lowerCase = key.lowercased()\n\
    \        let upperCase = key.uppercased()\n        if lowerCase == upperCase {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpp7490wok/tmpp7490wok.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f17397c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f1708eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f1708e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f1708d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp7490wok                        0x00005621e50f4a25 <unavailable> + 6693

    5    libc.so.6                          0x00002b3f17583460 __libc_start_main +
    245

    6    tmpp7490wok                        0x00005621e50f4409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011625
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    for key in dict.keys {\n        guard let value =\
    \ dict[key] else { return false }\n        switch value.caseInsensitive {\n  \
    \      case .lowercase:\n            return true\n        case .uppercase:\n \
    \           return true\n        default:\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpl87zefrz.swift:10:22: error: value of type 'String' has no member\
    \ 'caseInsensitive'\n        switch value.caseInsensitive {\n               ~~~~~\
    \ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011625
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    if dict == nil {\n\
    \        return false\n    }\n    \n    for k in dict.keys {\n        if k.isEmpty\
    \ {\n            return false\n        }\n        \n        let lower = k.lowercased()\n\
    \        if let upper = k.uppercased() {\n            if lower == upper {\n  \
    \              continue\n            }\n            return false\n        }\n\
    \        \n        return false\n    }\n    \n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdje3x083.swift:7:13: warning: comparing non-optional value of type\
    \ '[String : String]' to 'nil' always returns false\n    if dict == nil {\n  \
    \     ~~~~ ^  ~~~\n/tmp/tmpdje3x083.swift:17:12: error: initializer for conditional\
    \ binding must have Optional type, not 'String'\n        if let upper = k.uppercased()\
    \ {\n           ^           ~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011625
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else {\n        return false\n    }\n    \n    for case in dict.keys {\n   \
    \     guard case is String else {\n            return false\n        }\n    }\n\
    \    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp76w6gkvf.swift:11:14: error: expected pattern\n    for case in\
    \ dict.keys {\n             ^\n/tmp/tmp76w6gkvf.swift:12:30: error: variable binding\
    \ in a condition requires an initializer\n        guard case is String else {\n\
    \                             ^\n"
  stdout: ''
  timestamp: 1660011625
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else {\n        return false\n    }\n    \n    for key in dict.keys {\n    \
    \    let lowerCase = key.lowercased()\n        let upperCase = key.uppercased()\n\
    \        \n        if lowerCase == upperCase {\n            return false\n   \
    \     }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\"\
    \ : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpoi6sa8tl/tmpoi6sa8tl.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1695b2dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1695824b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1695824988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16958237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoi6sa8tl                        0x0000559bb8c97a25 <unavailable> + 6693

    5    libc.so.6                          0x00002b1695d19460 __libc_start_main +
    245

    6    tmpoi6sa8tl                        0x0000559bb8c97409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011623
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard dict.count\
    \ > 0 else { return false }\n    for k in dict.keys {\n        guard let v = dict[k]\
    \ else { return false }\n        switch v {\n        case let s as String:\n \
    \           if s.isLowercase {\n                return true\n            } else\
    \ {\n                return false\n            }\n        case let s as String:\n\
    \            if s.isUppercase {\n                return true\n            } else\
    \ {\n                return false\n            }\n        default:\n         \
    \   return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqu0q74qk.swift:11:20: warning: 'as' test is always true\n     \
    \   case let s as String:\n                   ^\n/tmp/tmpqu0q74qk.swift:17:20:\
    \ warning: 'as' test is always true\n        case let s as String:\n         \
    \          ^\n/tmp/tmpqu0q74qk.swift:12:18: error: value of type 'String' has\
    \ no member 'isLowercase'\n            if s.isLowercase {\n               ~ ^~~~~~~~~~~\n\
    /tmp/tmpqu0q74qk.swift:18:18: error: value of type 'String' has no member 'isUppercase'\n\
    \            if s.isUppercase {\n               ~ ^~~~~~~~~~~\n/tmp/tmpqu0q74qk.swift:17:14:\
    \ warning: case is already handled by previous patterns; consider removing it\n\
    \        case let s as String:\n             ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011625
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard dict.count\
    \ > 0 else { return false }\n    \n    for (_, value) in dict {\n        if let\
    \ value = value as? String {\n            if value.lowercaseString.isEmpty {\n\
    \                return false\n            } else if value.uppercaseString.isEmpty\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpy1jfhsqb.swift:10:30: warning: conditional cast from 'String' to\
    \ 'String' always succeeds\n        if let value = value as? String {\n      \
    \                       ^\n/tmp/tmpy1jfhsqb.swift:11:22: error: value of type\
    \ 'String' has no member 'lowercaseString'\n            if value.lowercaseString.isEmpty\
    \ {\n               ~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpy1jfhsqb.swift:13:29: error:\
    \ value of type 'String' has no member 'uppercaseString'\n            } else if\
    \ value.uppercaseString.isEmpty {\n                      ~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011625
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    for (_, value) in dict {\n        if let value =\
    \ value as? String {\n            if value.lowercased() == value {\n         \
    \       return true\n            }\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpmwhskmc6/tmpmwhskmc6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a61b5fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a61856b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a61856988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a618557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmwhskmc6                        0x0000560c104de965 <unavailable> + 6501

    5    libc.so.6                          0x00002b1a61d4b460 __libc_start_main +
    245

    6    tmpmwhskmc6                        0x0000560c104de349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660011625
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    \n    for key in dict.keys {\n        if let _ =\
    \ key.lowercased() {\n            return true\n        }\n        if let _ = key.uppercased()\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkqyz0y52.swift:10:12: error: initializer for conditional binding\
    \ must have Optional type, not 'String'\n        if let _ = key.lowercased() {\n\
    \           ^       ~~~~~~~~~~~~~~~~\n/tmp/tmpkqyz0y52.swift:13:12: error: initializer\
    \ for conditional binding must have Optional type, not 'String'\n        if let\
    \ _ = key.uppercased() {\n           ^       ~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011625
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    \n    for key in dict.keys {\n        let value =\
    \ dict[key]\n        \n        if let string = value as? String {\n          \
    \  if string.lowercased() == string {\n                return true\n         \
    \   }\n        }\n        \n        if let string = value as? String {\n     \
    \       if string.uppercased() == string {\n                return true\n    \
    \        }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpydfhf1zm/tmpydfhf1zm.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade4308cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade42d83b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade42d83988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade42d827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpydfhf1zm                        0x000055bb248e6a65 <unavailable> + 6757

    5    libc.so.6                          0x00002ade43278460 __libc_start_main +
    245

    6    tmpydfhf1zm                        0x000055bb248e6449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660011625
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard dict.count\
    \ > 0 else { return false }\n    \n    for case in 0..<dict.count {\n        let\
    \ key = dict.keys.array[case]\n        let value = dict.values.array[case]\n \
    \       \n        if case == 0 {\n            if let value = value as? String\
    \ {\n                return key.isLowercase()\n            }\n        } else if\
    \ case == dict.count - 1 {\n            if let value = value as? String {\n  \
    \              return key.isUppercase()\n            }\n        } else {\n   \
    \         if let value = value as? String {\n                return key.isLowercase()\
    \ && key.isUppercase()\n            }\n        }\n    }\n    \n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp50ay00tg.swift:9:14: error: expected pattern\n    for case in 0..<dict.count\
    \ {\n             ^\n/tmp/tmp50ay00tg.swift:10:35: error: expected expression\
    \ in list of expressions\n        let key = dict.keys.array[case]\n          \
    \                        ^\n/tmp/tmp50ay00tg.swift:11:39: error: expected expression\
    \ in list of expressions\n        let value = dict.values.array[case]\n      \
    \                                ^\n/tmp/tmp50ay00tg.swift:13:17: error: unary\
    \ operator cannot be separated from its operand\n        if case == 0 {\n    \
    \            ^ ~\n                  \n/tmp/tmp50ay00tg.swift:13:22: error: variable\
    \ binding in a condition requires an initializer\n        if case == 0 {\n   \
    \                  ^\n/tmp/tmp50ay00tg.swift:17:24: error: unary operator cannot\
    \ be separated from its operand\n        } else if case == dict.count - 1 {\n\
    \                       ^ ~\n                         \n/tmp/tmp50ay00tg.swift:17:42:\
    \ error: variable binding in a condition requires an initializer\n        } else\
    \ if case == dict.count - 1 {\n                                         ^\n/tmp/tmp50ay00tg.swift:10:29:\
    \ error: value of type 'Dictionary<String, String>.Keys' has no member 'array'\n\
    \        let key = dict.keys.array[case]\n                  ~~~~~~~~~ ^~~~~\n\
    /tmp/tmp50ay00tg.swift:11:33: error: value of type 'Dictionary<String, String>.Values'\
    \ has no member 'array'\n        let value = dict.values.array[case]\n       \
    \             ~~~~~~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660011625
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    \n    for case let (key, value) in dict {\n     \
    \   switch key {\n        case let key as String:\n            if key.isUppercase\
    \ {\n                return false\n            } else {\n                return\
    \ true\n            }\n        default:\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd0lzp6np.swift:11:22: warning: 'as' test is always true\n     \
    \   case let key as String:\n                     ^\n/tmp/tmpd0lzp6np.swift:12:20:\
    \ error: value of type 'String' has no member 'isUppercase'\n            if key.isUppercase\
    \ {\n               ~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011625
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    for (_, value) in dict {\n        if let value =\
    \ value as? String {\n            if value.lowercased() == value {\n         \
    \       return true\n            } else if value.uppercased() == value {\n   \
    \             return true\n            }\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpes5s8ifh/tmpes5s8ifh.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b70a813cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b70a7e33b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b70a7e33988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70a7e327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpes5s8ifh                        0x0000557e15d099c5 <unavailable> + 6597

    5    libc.so.6                          0x00002b70a8328460 __libc_start_main +
    245

    6    tmpes5s8ifh                        0x0000557e15d093a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660011623
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    \n    for key in dict.keys {\n        let lowerCase\
    \ = key.lowercased()\n        let upperCase = key.uppercased()\n        \n   \
    \     if lowerCase == upperCase {\n            return true\n        }\n    }\n\
    \    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpapup62gv/tmpapup62gv.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b973dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b9434b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b9434988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b94337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpapup62gv                        0x000055867562f853 <unavailable> + 6227

    5    libc.so.6                          0x00002b21b9929460 __libc_start_main +
    245

    6    tmpapup62gv                        0x000055867562f409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011625
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    for (_, value) in dict {\n        guard let value\
    \ = value as? String else { return false }\n        if value.lowercased() == value\
    \ {\n            return true\n        }\n        if value.uppercased() == value\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpvddl92f_/tmpvddl92f_.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6273960c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6273657b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6273657988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62736567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvddl92f_                        0x00005558944b79c5 <unavailable> + 6597

    5    libc.so.6                          0x00002b6273b4c460 __libc_start_main +
    245

    6    tmpvddl92f_                        0x00005558944b73a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    for key in dict.keys {\n        guard let value =\
    \ dict[key] else { return false }\n        guard let stringValue = value as? String\
    \ else { return false }\n        guard let lowercaseValue = stringValue.lowercased()\
    \ else { return false }\n        guard let uppercaseValue = stringValue.uppercased()\
    \ else { return false }\n        if lowercaseValue != uppercaseValue {\n     \
    \       return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpezalp0v8.swift:10:39: warning: conditional cast from 'String' to\
    \ 'String' always succeeds\n        guard let stringValue = value as? String else\
    \ { return false }\n                                      ^\n/tmp/tmpezalp0v8.swift:11:15:\
    \ error: initializer for conditional binding must have Optional type, not 'String'\n\
    \        guard let lowercaseValue = stringValue.lowercased() else { return false\
    \ }\n              ^                    ~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpezalp0v8.swift:12:15:\
    \ error: initializer for conditional binding must have Optional type, not 'String'\n\
    \        guard let uppercaseValue = stringValue.uppercased() else { return false\
    \ }\n              ^                    ~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011625
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    for key in dict.keys {\n        let value = dict[key]\n\
    \        if let str = value as? String {\n            if str.lowercased() == str\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp0a0fk2qr/tmp0a0fk2qr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b91868b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b91865a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b91865a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b91865a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0a0fk2qr                        0x00005582f186fa15 <unavailable> + 6677

    5    libc.so.6                          0x00002b9186a9e460 __libc_start_main +
    245

    6    tmp0a0fk2qr                        0x00005582f186f3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660011625
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    \n    for key in dict.keys {\n        guard let value\
    \ = dict[key] else { return false }\n        \n        switch value {\n      \
    \  case let value as String:\n            if value.lowercased() == value {\n \
    \               return true\n            }\n        case let value as String:\n\
    \            if value.uppercased() == value {\n                return true\n \
    \           }\n        default:\n            return false\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp4xhpfijj/tmp4xhpfijj.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b940ccc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b940c9b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b940c9b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b940c9b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4xhpfijj                        0x00005562ce86da15 <unavailable> + 6677

    5    libc.so.6                          0x00002b940ceae460 __libc_start_main +
    245

    6    tmp4xhpfijj                        0x00005562ce86d3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660011625
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    for key in dict.keys {\n        guard let value =\
    \ dict[key] else { return false }\n        guard let lowerCase = value.lowercased()\
    \ else { return false }\n        guard let upperCase = value.uppercased() else\
    \ { return false }\n        if lowerCase != upperCase {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\"\
    \ : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_l7nqrnk.swift:10:15: error: initializer for conditional binding\
    \ must have Optional type, not 'String'\n        guard let lowerCase = value.lowercased()\
    \ else { return false }\n              ^               ~~~~~~~~~~~~~~~~~~\n/tmp/tmp_l7nqrnk.swift:11:15:\
    \ error: initializer for conditional binding must have Optional type, not 'String'\n\
    \        guard let upperCase = value.uppercased() else { return false }\n    \
    \          ^               ~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011625
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    \n    for k in dict.keys {\n        guard let v =\
    \ dict[k] else { return false }\n        \n        switch v {\n        case let\
    \ s as String:\n            if s.isLowercase {\n                return true\n\
    \            }\n        case let s as String:\n            if s.isUppercase {\n\
    \                return true\n            }\n        }\n    }\n    \n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp3r4ae8ht.swift:13:20: warning: 'as' test is always true\n     \
    \   case let s as String:\n                   ^\n/tmp/tmp3r4ae8ht.swift:17:20:\
    \ warning: 'as' test is always true\n        case let s as String:\n         \
    \          ^\n/tmp/tmp3r4ae8ht.swift:14:18: error: value of type 'String' has\
    \ no member 'isLowercase'\n            if s.isLowercase {\n               ~ ^~~~~~~~~~~\n\
    /tmp/tmp3r4ae8ht.swift:18:18: error: value of type 'String' has no member 'isUppercase'\n\
    \            if s.isUppercase {\n               ~ ^~~~~~~~~~~\n/tmp/tmp3r4ae8ht.swift:17:14:\
    \ warning: case is already handled by previous patterns; consider removing it\n\
    \        case let s as String:\n             ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011625
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard dict.count\
    \ > 0 else { return false }\n    \n    for case in dict.keys {\n        guard\
    \ case is String else { return false }\n        guard case is String else { return\
    \ false }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\"\
    \ : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmplrst_sei.swift:9:14: error: expected pattern\n    for case in dict.keys\
    \ {\n             ^\n/tmp/tmplrst_sei.swift:10:30: error: variable binding in\
    \ a condition requires an initializer\n        guard case is String else { return\
    \ false }\n                             ^\n/tmp/tmplrst_sei.swift:11:30: error:\
    \ variable binding in a condition requires an initializer\n        guard case\
    \ is String else { return false }\n                             ^\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    \n    for key in dict.keys {\n        let lowerCase\
    \ = key.lowercased()\n        let upperCase = key.uppercased()\n        \n   \
    \     if lowerCase != key {\n            return false\n        }\n        \n \
    \       if upperCase != key {\n            return false\n        }\n    }\n  \
    \  \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp4j5caiov/tmp4j5caiov.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b46dab23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b46da81ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b46da81a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b46da8197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4j5caiov                        0x000055cdb0056853 <unavailable> + 6227

    5    libc.so.6                          0x00002b46dad0f460 __libc_start_main +
    245

    6    tmp4j5caiov                        0x000055cdb0056409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    \n    for k in dict.keys {\n        guard let v =\
    \ dict[k] else { return false }\n        \n        switch v {\n        case let\
    \ s as String:\n            if s.isUppercase {\n                return false\n\
    \            }\n        case let s as String:\n            if s.isLowercase {\n\
    \                return false\n            }\n        }\n    }\n    \n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp73r207x0.swift:13:20: warning: 'as' test is always true\n     \
    \   case let s as String:\n                   ^\n/tmp/tmp73r207x0.swift:17:20:\
    \ warning: 'as' test is always true\n        case let s as String:\n         \
    \          ^\n/tmp/tmp73r207x0.swift:14:18: error: value of type 'String' has\
    \ no member 'isUppercase'\n            if s.isUppercase {\n               ~ ^~~~~~~~~~~\n\
    /tmp/tmp73r207x0.swift:18:18: error: value of type 'String' has no member 'isLowercase'\n\
    \            if s.isLowercase {\n               ~ ^~~~~~~~~~~\n/tmp/tmp73r207x0.swift:17:14:\
    \ warning: case is already handled by previous patterns; consider removing it\n\
    \        case let s as String:\n             ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011625
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    \n    for key in dict.keys {\n        guard let value\
    \ = dict[key] else { return false }\n        \n        switch value {\n      \
    \  case let value as String:\n            if value.lowercased() == value {\n \
    \               return true\n            }\n        case let value as String:\n\
    \            if value.uppercased() == value {\n                return true\n \
    \           }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp5t6k_v66/tmp5t6k_v66.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae158bb8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1588afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1588af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1588ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5t6k_v66                        0x0000564b8dbc3a15 <unavailable> + 6677

    5    libc.so.6                          0x00002ae158da4460 __libc_start_main +
    245

    6    tmp5t6k_v66                        0x0000564b8dbc33f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660011625
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    if dict == nil {\n\
    \        return false\n    }\n    for k in dict {\n        if let _ = k.lowercased()\
    \ {\n            return true\n        }\n        if let _ = k.uppercased() {\n\
    \            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpotrq2g_a.swift:7:13: warning: comparing non-optional value of type\
    \ '[String : String]' to 'nil' always returns false\n    if dict == nil {\n  \
    \     ~~~~ ^  ~~~\n/tmp/tmpotrq2g_a.swift:11:22: error: value of tuple type '(key:\
    \ String, value: String)' has no member 'lowercased'\n        if let _ = k.lowercased()\
    \ {\n                   ~ ^~~~~~~~~~\n/tmp/tmpotrq2g_a.swift:14:22: error: value\
    \ of tuple type '(key: String, value: String)' has no member 'uppercased'\n  \
    \      if let _ = k.uppercased() {\n                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011625
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    for k in dict.keys {\n        guard let v = dict[k]\
    \ else { return false }\n        guard let s = String(describing: v) else { return\
    \ false }\n        if s.isUppercase {\n            return false\n        }\n \
    \   }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp3dxfz5wa.swift:10:15: error: initializer for conditional binding\
    \ must have Optional type, not 'String'\n        guard let s = String(describing:\
    \ v) else { return false }\n              ^       ~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp3dxfz5wa.swift:11:14:\
    \ error: value of type 'String' has no member 'isUppercase'\n        if s.isUppercase\
    \ {\n           ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011625
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    for (_, value) in dict {\n        if let string =\
    \ value as? String {\n            if string.lowercaseString.isEmpty {\n      \
    \          return false\n            } else if string.uppercaseString.isEmpty\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2et5_yr9.swift:9:31: warning: conditional cast from 'String' to\
    \ 'String' always succeeds\n        if let string = value as? String {\n     \
    \                         ^\n/tmp/tmp2et5_yr9.swift:10:23: error: value of type\
    \ 'String' has no member 'lowercaseString'\n            if string.lowercaseString.isEmpty\
    \ {\n               ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp2et5_yr9.swift:12:30: error:\
    \ value of type 'String' has no member 'uppercaseString'\n            } else if\
    \ string.uppercaseString.isEmpty {\n                      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011625
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    \n    for k in dict.keys {\n        guard let v =\
    \ dict[k] else { return false }\n        \n        switch v {\n        case let\
    \ s as String:\n            if s.isUppercase {\n                return false\n\
    \            }\n        case let s as String:\n            if s.isLowercase {\n\
    \                return false\n            }\n        }\n    }\n    \n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp73r207x0.swift:13:20: warning: 'as' test is always true\n     \
    \   case let s as String:\n                   ^\n/tmp/tmp73r207x0.swift:17:20:\
    \ warning: 'as' test is always true\n        case let s as String:\n         \
    \          ^\n/tmp/tmp73r207x0.swift:14:18: error: value of type 'String' has\
    \ no member 'isUppercase'\n            if s.isUppercase {\n               ~ ^~~~~~~~~~~\n\
    /tmp/tmp73r207x0.swift:18:18: error: value of type 'String' has no member 'isLowercase'\n\
    \            if s.isLowercase {\n               ~ ^~~~~~~~~~~\n/tmp/tmp73r207x0.swift:17:14:\
    \ warning: case is already handled by previous patterns; consider removing it\n\
    \        case let s as String:\n             ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011625
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    \n    for key in dict.keys {\n        guard let value\
    \ = dict[key] else { return false }\n        \n        switch value {\n      \
    \  case let value as String:\n            if value.lowercased() == value {\n \
    \               return true\n            }\n        case let value as String:\n\
    \            if value.uppercased() == value {\n                return true\n \
    \           }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpqt2v8d0r/tmpqt2v8d0r.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba2ebcfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba2e8c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba2e8c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba2e8c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqt2v8d0r                        0x00005625a6fbba15 <unavailable> + 6677

    5    libc.so.6                          0x00002aba2edbb460 __libc_start_main +
    245

    6    tmpqt2v8d0r                        0x00005625a6fbb3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660011625
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    for key in dict.keys {\n        guard let value =\
    \ dict[key] else { return false }\n        if let string = value as? String {\n\
    \            if string.lowercased() == string {\n                return true\n\
    \            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp3gkuazjq/tmp3gkuazjq.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f1ed46c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f1ea3db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f1ea3d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f1ea3c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3gkuazjq                        0x0000559c1d355a15 <unavailable> + 6677

    5    libc.so.6                          0x00002b4f1ef32460 __libc_start_main +
    245

    6    tmp3gkuazjq                        0x0000559c1d3553f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660011625
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard dict.count\
    \ > 0 else { return false }\n    for (_, value) in dict {\n        if let value\
    \ = value as? String {\n            if value.lowercased() == value {\n       \
    \         return true\n            }\n            if value.uppercased() == value\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp24cmugom/tmp24cmugom.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aacce700c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aacce3f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aacce3f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aacce3f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp24cmugom                        0x000055cbee2149c5 <unavailable> + 6597

    5    libc.so.6                          0x00002aacce8ec460 __libc_start_main +
    245

    6    tmp24cmugom                        0x000055cbee2143a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660011625
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    if dict.count ==\
    \ 0 {\n        return false\n    }\n    \n    for key in dict.keys {\n       \
    \ if let _ = key.toLowercase() {\n            return false\n        }\n    }\n\
    \    \n    for key in dict.keys {\n        if let _ = key.toUppercase() {\n  \
    \          return false\n        }\n    }\n    \n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpghxjh5da.swift:12:24: error: value of type 'String' has no member\
    \ 'toLowercase'\n        if let _ = key.toLowercase() {\n                   ~~~\
    \ ^~~~~~~~~~~\n/tmp/tmpghxjh5da.swift:18:24: error: value of type 'String' has\
    \ no member 'toUppercase'\n        if let _ = key.toUppercase() {\n          \
    \         ~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011625
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    \n    for key in dict.keys {\n        guard let value\
    \ = dict[key] else { return false }\n        \n        switch value {\n      \
    \  case let string as String:\n            if string.lowercased() == string {\n\
    \                return true\n            }\n        case let string as String:\n\
    \            if string.uppercased() == string {\n                return true\n\
    \            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpt64ritoa/tmpt64ritoa.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b743ed08c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b743e9ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b743e9ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b743e9fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt64ritoa                        0x00005628452c2a15 <unavailable> + 6677

    5    libc.so.6                          0x00002b743eef4460 __libc_start_main +
    245

    6    tmpt64ritoa                        0x00005628452c23f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660011625
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard dict.count\
    \ > 0 else { return false }\n    \n    for (_, value) in dict {\n        if let\
    \ value = value as? String {\n            if value.lowercased() == value {\n \
    \               return true\n            } else if value.uppercased() == value\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp4s8ws9_f/tmp4s8ws9_f.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb420c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb41db9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb41db9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb41db87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4s8ws9_f                        0x0000561c6f7099c5 <unavailable> + 6597

    5    libc.so.6                          0x00002adb422ae460 __libc_start_main +
    245

    6    tmp4s8ws9_f                        0x0000561c6f7093a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660011625
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard dict.count\
    \ > 0 else { return false }\n    \n    for (_, value) in dict {\n        if let\
    \ value = value as? String {\n            if value.lowercaseString.isEmpty {\n\
    \                return false\n            } else if value.uppercaseString.isEmpty\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpy1jfhsqb.swift:10:30: warning: conditional cast from 'String' to\
    \ 'String' always succeeds\n        if let value = value as? String {\n      \
    \                       ^\n/tmp/tmpy1jfhsqb.swift:11:22: error: value of type\
    \ 'String' has no member 'lowercaseString'\n            if value.lowercaseString.isEmpty\
    \ {\n               ~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpy1jfhsqb.swift:13:29: error:\
    \ value of type 'String' has no member 'uppercaseString'\n            } else if\
    \ value.uppercaseString.isEmpty {\n                      ~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011625
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard dict.count\
    \ > 0 else { return false }\n    for (_, value) in dict {\n        guard let value\
    \ = value as? String else { return false }\n        if value.lowercased() != value\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp0p76w6xh/tmp0p76w6xh.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00a1b8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00a1886b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00a1886988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00a18857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0p76w6xh                        0x000055d5cb3d4965 <unavailable> + 6501

    5    libc.so.6                          0x00002b00a1d7b460 __libc_start_main +
    245

    6    tmp0p76w6xh                        0x000055d5cb3d4349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660011625
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    if dict == nil {\n\
    \        return false\n    }\n    \n    for k in dict.keys {\n        if k.isEmpty\
    \ {\n            return false\n        }\n        \n        let lower = k.lowercased()\n\
    \        let upper = k.uppercased()\n        \n        if lower != upper {\n \
    \           return false\n        }\n    }\n    \n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp9q46m2pp/tmp9q46m2pp.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac713bacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7138a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7138a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7138a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9q46m2pp                        0x00005614b041d853 <unavailable> + 6227

    5    libc.so.6                          0x00002ac713d98460 __libc_start_main +
    245

    6    tmp9q46m2pp                        0x00005614b041d409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660011625
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    func check_dict_case(dict: [String : String]) -> Bool {\n    guard !dict.isEmpty\
    \ else { return false }\n    \n    for (_, value) in dict {\n        if let string\
    \ = value as? String {\n            if string.lowercased() == string {\n     \
    \           return true\n            }\n        }\n    }\n    \n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpjc0bx4z4/tmpjc0bx4z4.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca3329bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca32f92b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca32f92988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca32f917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjc0bx4z4                        0x00005602867d4965 <unavailable> + 6501

    5    libc.so.6                          0x00002aca33487460 __libc_start_main +
    245

    6    tmpjc0bx4z4                        0x00005602867d4349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660011625
