name: HumanEval_44_change_base
language: swift
prompt: "\n/// Change numerical base of input number x to base.\n/// return string\
  \ representation after the conversion.\n/// base numbers are less than 10.\nfunc\
  \ change_base(x: Int, base: Int) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\n\
  assert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base:\
  \ 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x:\
  \ 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
  \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
  \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
  \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
completions: ["    let bases = [\"\", \"K\", \"M\", \"B\", \"T\", \"Qa\", \"Qi\",\
    \ \"Qo\", \"Qu\", \"Qd\", \"Qf\", \"Qg\", \"Qh\", \"Qm\", \"Qp\", \"Qs\", \"Qx\"\
    ]\n    let base_index = bases.index(base)!\n    let base_name = bases[base_index]\n\
    \    let base_value = Double(base_index) * Double(x)\n    let result = String(format:\
    \ \"%.1f\", base_value)\n    return String(format: \"%@\", result)", "    var\
    \ result = \"\"\n    var remainder: Int\n    var digit: Int\n    var digits: String\n\
    \    var digits_len: Int\n    var digits_str: String\n    var digits_str_len:\
    \ Int\n    var digits_str_len2: Int\n    var digits_str_len3: Int\n    var digits_str_len4:\
    \ Int\n    var digits_str_len5: Int\n    var digits_str_len6: Int\n    var digits_str_len7:\
    \ Int\n    var digits_str_len8: Int\n    var digits_str_len9: Int\n    var digits_str_len10:\
    \ Int\n    var digits_str_len11: Int\n    var digits_str_len12: Int\n    var digits_str_len13:\
    \ Int\n    var digits_str_len14: Int\n    var digits_str_len15: Int\n    var digits_str_len16:\
    \ Int\n    var digits_str_len17: Int\n    var digits_str_len18: Int\n    var digits_str_len19:\
    \ Int\n    var digits_str_len20: Int\n    var digits_str_len21: Int\n    var digits_str_len22:\
    \ Int\n    var digits_str_len23: Int\n    var digits_str_len24: Int\n    var digits_str_len25:\
    \ Int\n    var digits_str_len26: Int\n    var digits_str_len27: Int\n    var digits_str_len28:\
    \ Int\n    var digits_str_len29: Int\n    var digits_str_len30: Int\n    var digits_str_len31:\
    \ Int\n    var digits_str_len32: Int\n    var digits_str_len33: Int\n    var digits_str_len34:\
    \ Int\n    var digits_str_len35: Int\n    var digits_str_len36: Int\n    var digits_str_len37:\
    \ Int\n    var digits_str_len38: Int\n    var digits_str_len39: Int\n    var digits_str_len40:\
    \ Int\n    var digits_str_len41: Int\n    var digits_str_len42: Int\n    var digits_str_len43:\
    \ Int\n    var digits_str_len44: Int\n    var digits_str_len45: Int\n    var digits_str_len46:\
    \ Int\n    var digits_str_len47: Int\n    var digits_str_len48: Int\n    var digits_str_len49:\
    \ Int\n    var digits_str_len50: Int\n    var digits_str_len51: Int\n    var digits_str_len52:\
    \ Int\n    var digits_str_len53: Int\n    var digits_str_len54: ", "    let bases\
    \ = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n    let baseIndex\
    \ = bases.index(base)!\n    let x = String(x)\n    let result = x.characters.map\
    \ { char -> String in\n        if char == \"0\" {\n            return char\n \
    \       } else if char == \"1\" {\n            return \"0\"\n        } else if\
    \ char == \"2\" {\n            return \"00\"\n        } else if char == \"3\"\
    \ {\n            return \"000\"\n        } else if char == \"4\" {\n         \
    \   return \"0000\"\n        } else if char == \"5\" {\n            return \"\
    00000\"\n        } else if char == \"6\" {\n            return \"000000\"\n  \
    \      } else if char == \"7\" {\n            return \"0000000\"\n        } else\
    \ if char == \"8\" {\n            return \"00000000\"\n        } else if char\
    \ == \"9\" {\n            return \"000000000\"\n        }\n        return char\n\
    \    }\n    return String(result) + bases[baseIndex]", "    var result = \"\"\n\
    \    var remainder = x\n    var digits = \"\"\n    while remainder > 0 {\n   \
    \     remainder = remainder / base\n        digits = String(remainder) + digits\n\
    \    }\n    if digits != \"\" {\n        result = String(digits) + result\n  \
    \  }\n    return result", "    var s = String(x)\n    if base < 10 {\n       \
    \ s = \"0\" + String(base)\n    }\n    return s", "    let bases = [\"\", \"K\"\
    , \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n    let baseIndex = bases.index(base)!\n\
    \    let baseString = bases[baseIndex]\n    let baseInt = Int(baseString)\n  \
    \  let baseFloat = baseInt * pow(10.0, Double(baseIndex))\n    return String(format:\
    \ \"%.1f\", x / baseFloat)", "    if base < 10 {\n        return String(x)\n \
    \   }\n    var res = String(x)\n    var digits = String(x)\n    var baseDigits\
    \ = String(x)\n    var digit = String(x)\n    var baseDigit = String(x)\n    var\
    \ i = 0\n    var j = 0\n    var k = 0\n    var digitCount = 0\n    var baseDigitCount\
    \ = 0\n    var digitBaseCount = 0\n    var digitBase = 0\n    var baseDigitBase\
    \ = 0\n    var digitBaseChar = String(x)\n    var baseDigitBaseChar = String(x)\n\
    \    var digitBaseCharCount = 0\n    var baseDigitBaseCharCount = 0\n    var digitBaseCharCount\
    \ = 0\n    var baseDigitBaseCharCount = 0\n    var digitBaseCharCount = 0\n  \
    \  var digitBaseCharCount = 0\n    var digitBaseCharCount = 0\n    var digitBaseCharCount\
    \ = 0\n    var digitBaseCharCount = 0\n    var digitBaseCharCount = 0\n    var\
    \ digitBaseCharCount = 0\n    var digitBaseCharCount = 0\n    var digitBaseCharCount\
    \ = 0\n    var digitBaseCharCount = 0\n    var digitBaseCharCount = 0\n    var\
    \ digitBaseCharCount = 0\n    var digitBaseCharCount = 0\n    var digitBaseCharCount\
    \ = 0\n    var digitBaseCharCount = 0\n    var digitBaseCharCount = 0\n    var\
    \ digitBaseCharCount = 0\n    var digitBaseCharCount = 0\n    var digitBaseCharCount\
    \ = 0\n    var digitBaseCharCount = 0\n    var digitBaseCharCount = 0\n    var\
    \ digitBaseCharCount = 0\n    var digitBaseCharCount = 0\n    var digitBaseCharCount\
    \ = 0\n    var digitBaseCharCount = 0\n    var digitBaseCharCount = 0\n    var\
    \ digitBaseCharCount = 0\n    var digitBaseCharCount = 0\n    var digitBaseCharCount\
    \ = 0\n    var digitBaseCharCount = 0\n    var digitBaseCharCount = 0\n    var\
    \ digitBaseCharCount = 0\n    var digitBaseCharCount = 0\n    var digitBaseCharCount\
    \ = 0\n    var digitBaseCharCount = 0\n    var digitBaseCharCount = 0\n    var\
    \ digitBaseCharCount = 0\n    var digitBaseCharCount = 0\n    var digitBaseCharCount\
    \ = 0\n    var digitBaseCharCount = 0\n    var digitBaseCharCount = 0\n    var\
    \ digitBaseCharCount = 0\n    var digitBaseCharCount = 0\n    var digitBaseCharCount\
    \ = 0\n    var digitBaseCharCount = 0\n    var digitBaseCharCount = 0\n    var\
    \ digitBaseCharCount = 0\n    var digitBaseCharCount = 0\n    var digitBaseCharCount\
    \ = 0\n    var digitBaseCharCount = 0\n    var digitBaseCharCount = 0\n    var\
    \ digitBaseCharCount = 0\n    var digitBaseCharCount = 0\n    var digitBaseCharCount\
    \ = 0\n    var digitBaseCharCount", "    var result = \"\"\n    var remainder\
    \ = x\n    var divisor = base\n    while remainder > 0 {\n        remainder, remainder\
    \ = remainder / divisor, divisor\n        result = String(remainder) + result\n\
    \    }\n    return result", "    var result = \"\"\n    var remainder = x\n  \
    \  var quotient = base\n    while quotient > 0 {\n        remainder, remainder\
    \ = remainder / base, quotient\n        quotient = quotient / base\n    }\n  \
    \  if remainder > 0 {\n        result = String(remainder)\n    }\n    return result",
  "    let bases = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"\
    , \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"\
    , \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\"\
    , \"V\", \"W\", \"X\", \"Y\", \"Z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"\
    , \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    let basesCount\
    \ = bases.count\n    var result: String = \"\"\n    var remainder: Int = 0\n \
    \   var remainderString: String = \"\"\n    var remainderStringCount: Int = 0\n\
    \    var remainderStringCount2: Int = 0\n    var remainderStringCount3: Int =\
    \ 0\n    var remainderStringCount4: Int = 0\n    var remainderStringCount5: Int\
    \ = 0\n    var remainderStringCount6: Int = 0\n    var remainderStringCount7:\
    \ Int = 0\n    var remainderStringCount8: Int = 0\n    var remainderStringCount9:\
    \ Int = 0\n    var remainderStringCount10: Int = 0\n    var remainderStringCount11:\
    \ Int = 0\n    var remainderStringCount12: Int = 0\n    var remainderStringCount13:\
    \ Int = 0\n    var remainderStringCount14: Int = 0\n    var remainderStringCount15:\
    \ Int = 0\n    var remainderStringCount16: Int = 0\n    var remainderStringCount17:\
    \ Int = 0\n    var remainderStringCount18: Int = 0\n    var remainderStringCount19:\
    \ Int = 0\n    var remainderStringCount20: Int = 0\n    var remainderStringCount21:\
    \ Int = 0\n    var remainderStringCount22: Int = 0\n    var remainderStringCount23:\
    \ Int = 0\n    var remainderStringCount24: Int = 0\n    var remainderStringCount25:\
    \ Int = 0\n    var remainderStringCount26: Int = 0\n    var remainderStringCount27:\
    \ Int = 0\n    var remainderStringCount28: Int = 0\n    var remainderStringCount29:\
    \ Int = 0\n    var remainderStringCount30: Int = 0\n    var remainderStringCount31:\
    \ Int = 0\n    var remainderStringCount32: Int = 0\n    var remainderStringCount33:\
    \ Int = 0\n    var remainderStringCount34: Int = 0\n    var remainderStringCount35:\
    \ Int = 0\n    var remainderStringCount36: Int = 0\n    var remainderStringCount37:\
    \ Int = 0\n    var remainderStringCount38: Int = 0\n", "    var result = \"\"\n\
    \    var remainder: Int\n    var quotient: Int\n    var quotientString = \"\"\n\
    \    var remainderString = \"\"\n    var quotientString2 = \"0\"\n    var remainderString2\
    \ = \"0\"\n    var quotientString3 = \"0\"\n    var remainderString3 = \"0\"\n\
    \    var quotientString4 = \"0\"\n    var remainderString4 = \"0\"\n    var quotientString5\
    \ = \"0\"\n    var remainderString5 = \"0\"\n    var quotientString6 = \"0\"\n\
    \    var remainderString6 = \"0\"\n    var quotientString7 = \"0\"\n    var remainderString7\
    \ = \"0\"\n    var quotientString8 = \"0\"\n    var remainderString8 = \"0\"\n\
    \    var quotientString9 = \"0\"\n    var remainderString9 = \"0\"\n    var quotientString10\
    \ = \"0\"\n    var remainderString10 = \"0\"\n    var quotientString11 = \"0\"\
    \n    var remainderString11 = \"0\"\n    var quotientString12 = \"0\"\n    var\
    \ remainderString12 = \"0\"\n    var quotientString13 = \"0\"\n    var remainderString13\
    \ = \"0\"\n    var quotientString14 = \"0\"\n    var remainderString14 = \"0\"\
    \n    var quotientString15 = \"0\"\n    var remainderString15 = \"0\"\n    var\
    \ quotientString16 = \"0\"\n    var remainderString16 = \"0\"\n    var quotientString17\
    \ = \"0\"\n    var remainderString17 = \"0\"\n    var quotientString18 = \"0\"\
    \n    var remainderString18 = \"0\"\n    var quotientString19 = \"0\"\n    var\
    \ remainderString19 = \"0\"\n    var quotientString20 = \"0\"\n    var remainderString20\
    \ = \"0\"\n    var quotientString21 = \"0\"\n    var remainderString21 = \"0\"\
    \n    var quotientString22 = \"0\"\n    var remainderString22 = \"0\"\n    var\
    \ quotientString23 = \"0\"\n    var remainderString23 = \"0\"\n    var quotientString24\
    \ = \"0\"\n    var remainderString24 = \"0\"\n    var quotientString25 = \"0\"\
    \n    var remainderString25 = \"0\"\n    var quotientString26 = \"0\"\n    var\
    \ remainderString26 = \"0\"\n    var quotientString27 = \"0\"\n    var remainderString27\
    \ = \"0\"\n    var quotientString28 = \"0\"\n    var remainderString28 = \"0\"\
    \n    var quotientString29 = \"0\"\n    var remainderString29 = \"0\"\n    var\
    \ quotientString30 = \"0\"\n    var remainderString30 = \"0\"\n    var quotientString31\
    \ = \"0\"\n    var remainderString31 = \"0\"\n", "    let bases = [\"\", \"K\"\
    , \"M\", \"B\", \"T\", \"Q\", \"D\", \"H\", \"P\", \"E\", \"Z\", \"Y\"]\n    let\
    \ baseIndex = bases.firstIndex(of: base)!\n    let baseString = bases[baseIndex]\n\
    \    let result = String(format: \"%02.f\", x / Float(base))\n    return baseString\
    \ + result", "    if base < 10 {\n        return String(x)\n    }\n    var result\
    \ = \"\"\n    var remainder = x % base\n    while remainder != 0 {\n        result\
    \ = String(remainder) + result\n        remainder = x % base\n    }\n    return\
    \ result", "    if base < 10 {\n        return String(x)\n    }\n    var result\
    \ = \"\"\n    var remainder = x\n    var digits = \"\"\n    while remainder >\
    \ 0 {\n        remainder, remainder = remainder / base, 0\n        digits = String(remainder)\
    \ + digits\n    }\n    if digits != \"\" {\n        result = String(digits[0..<base])\n\
    \    }\n    return result", "    let bases = [\"\", \"K\", \"M\", \"G\", \"T\"\
    , \"P\", \"E\", \"Z\", \"Y\"]\n    let base_index = bases.index(base)!\n    let\
    \ x = x.toInt()\n    let result = x.toInt()\n    let remainder = result % base\n\
    \    let quotient = result / base\n    return String(quotient + remainder) + bases[base_index]",
  "    var result = \"\"\n    var remainder: Int\n    var digit: Int\n    var digits:\
    \ String\n    var digits_length: Int\n    var digits_length2: Int\n    var digits_length3:\
    \ Int\n    var digits_length4: Int\n    var digits_length5: Int\n    var digits_length6:\
    \ Int\n    var digits_length7: Int\n    var digits_length8: Int\n    var digits_length9:\
    \ Int\n    var digits_length10: Int\n    var digits_length11: Int\n    var digits_length12:\
    \ Int\n    var digits_length13: Int\n    var digits_length14: Int\n    var digits_length15:\
    \ Int\n    var digits_length16: Int\n    var digits_length17: Int\n    var digits_length18:\
    \ Int\n    var digits_length19: Int\n    var digits_length20: Int\n    var digits_length21:\
    \ Int\n    var digits_length22: Int\n    var digits_length23: Int\n    var digits_length24:\
    \ Int\n    var digits_length25: Int\n    var digits_length26: Int\n    var digits_length27:\
    \ Int\n    var digits_length28: Int\n    var digits_length29: Int\n    var digits_length30:\
    \ Int\n    var digits_length31: Int\n    var digits_length32: Int\n    var digits_length33:\
    \ Int\n    var digits_length34: Int\n    var digits_length35: Int\n    var digits_length36:\
    \ Int\n    var digits_length37: Int\n    var digits_length38: Int\n    var digits_length39:\
    \ Int\n    var digits_length40: Int\n    var digits_length41: Int\n    var digits_length42:\
    \ Int\n    var digits_length43: Int\n    var digits_length44: Int\n    var digits_length45:\
    \ Int\n    var digits_length46: Int\n    var digits_length47: Int\n    var digits_length48:\
    \ Int\n    var digits_length49: Int\n    var digits_length50: Int\n    var digits_length51:\
    \ Int\n    var digits_length52: Int\n    var digits_length53: Int\n    var digits_length54:\
    \ Int\n    var digits_length55: Int\n    var digits_length56: Int\n    var digits_length57:\
    \ Int\n    var digits_length58: Int\n    var digits_length59: Int\n    var digits_length60:\
    \ Int\n    var digits_length61: Int\n    var digits_length62: Int\n    var ",
  "    let bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n\
    \    let baseIndex = bases.index(base)!\n    let baseString = bases[baseIndex]\n\
    \    let baseInt = Int(baseString)!\n    let baseDouble = Double(baseInt)\n  \
    \  let baseFloat = Float(baseInt)\n    let baseInt = Int(x)\n    let baseDouble\
    \ = Double(x)\n    let baseFloat = Float(x)\n    let baseDouble = Double(x)\n\
    \    let baseFloat = Float(x)\n    let baseDouble = Double(x)\n    let baseFloat\
    \ = Float(x)\n    let baseDouble = Double(x)\n    let baseFloat = Float(x)\n \
    \   let baseDouble = Double(x)\n    let baseFloat = Float(x)\n    let baseDouble\
    \ = Double(x)\n    let baseFloat = Float(x)\n    let baseDouble = Double(x)\n\
    \    let baseFloat = Float(x)\n    let baseDouble = Double(x)\n    let baseFloat\
    \ = Float(x)\n    let baseDouble = Double(x)\n    let baseFloat = Float(x)\n \
    \   let baseDouble = Double(x)\n    let baseFloat = Float(x)\n    let baseDouble\
    \ = Double(x)\n    let baseFloat = Float(x)\n    let baseDouble = Double(x)\n\
    \    let baseFloat = Float(x)\n    let baseDouble = Double(x)\n    let baseFloat\
    \ = Float(x)\n    let baseDouble = Double(x)\n    let baseFloat = Float(x)\n \
    \   let baseDouble = Double(x)\n    let baseFloat = Float(x)\n    let baseDouble\
    \ = Double(x)\n    let baseFloat = Float(x)\n    let baseDouble = Double(x)\n\
    \    let baseFloat = Float(x)\n    let baseDouble = Double(x)\n    let baseFloat\
    \ = Float(x)\n    let baseDouble = Double(x)\n    let baseFloat = Float(x)\n \
    \   let baseDouble = Double(x)\n    let baseFloat = Float(x)\n    let baseDouble\
    \ = Double(x)\n    let baseFloat = Float(x)\n    let baseDouble = Double(x)\n\
    \    let baseFloat = Float(x)\n    let baseDouble = Double(x)\n    let baseFloat\
    \ = Float(x)\n    let baseDouble = Double(x)\n    let baseFloat = Float(x)\n \
    \   let baseDouble = Double(x)\n    let baseFloat = Float(x)\n    let baseDouble\
    \ = Double(x)\n    let baseFloat = Float(x)\n    let baseDouble = Double(x)\n\
    \    let baseFloat = Float(x)\n    let baseDouble = Double(x)\n    let baseFloat\
    \ = Float(x)\n    let baseDouble = Double(x)\n    let baseFloat = Float(x)\n \
    \   let baseDouble = Double(x)\n    let baseFloat = Float(x)\n    let baseDouble\
    \ = Double(x)\n    let baseFloat = Float(x)\n    let baseDouble = Double", " \
    \   var result = \"\"\n    var remainder: Int\n    var quotient: Int\n    var\
    \ remainder2: Int\n    var quotient2: Int\n    var remainder3: Int\n    var quotient3:\
    \ Int\n    var remainder4: Int\n    var quotient4: Int\n    var remainder5: Int\n\
    \    var quotient5: Int\n    var remainder6: Int\n    var quotient6: Int\n   \
    \ var remainder7: Int\n    var quotient7: Int\n    var remainder8: Int\n    var\
    \ quotient8: Int\n    var remainder9: Int\n    var quotient9: Int\n    var remainder10:\
    \ Int\n    var quotient10: Int\n    var remainder11: Int\n    var quotient11:\
    \ Int\n    var remainder12: Int\n    var quotient12: Int\n    var remainder13:\
    \ Int\n    var quotient13: Int\n    var remainder14: Int\n    var quotient14:\
    \ Int\n    var remainder15: Int\n    var quotient15: Int\n    var remainder16:\
    \ Int\n    var quotient16: Int\n    var remainder17: Int\n    var quotient17:\
    \ Int\n    var remainder18: Int\n    var quotient18: Int\n    var remainder19:\
    \ Int\n    var quotient19: Int\n    var remainder20: Int\n    var quotient20:\
    \ Int\n    var remainder21: Int\n    var quotient21: Int\n    var remainder22:\
    \ Int\n    var quotient22: Int\n    var remainder23: Int\n    var quotient23:\
    \ Int\n    var remainder24: Int\n    var quotient24: Int\n    var remainder25:\
    \ Int\n    var quotient25: Int\n    var remainder26: Int\n    var quotient26:\
    \ Int\n    var remainder27: Int\n    var quotient27: Int\n    var remainder28:\
    \ Int\n    var quotient28: Int\n    var remainder29: Int\n    var quotient29:\
    \ Int\n    var remainder30: Int\n    var quotient30: Int\n    var remainder31:\
    \ Int\n    var quotient31: Int\n    var remainder32: Int\n    var quotient32:\
    \ Int\n    var remainder33: Int\n    var quotient33: Int\n    var remainder34:\
    \ Int\n    var quotient34: Int\n    var remainder35: Int\n    var quotient35:\
    \ Int\n    var remainder36: Int\n    var quotient36: Int\n    var remainder37:\
    \ Int\n    var quotient37: Int\n", "    var result = \"\"\n    var remainder =\
    \ x\n    var digit = 0\n    while remainder > 0 {\n        remainder, remainder\
    \ = remainder / base, digit\n        result = String(digit) + result\n       \
    \ digit += 1\n    }\n    return result", "    var result = \"\"\n    var remainder\
    \ = x\n    var divisor = base\n    while remainder > 0 {\n        remainder, remainder\
    \ = remainder / divisor, base\n        divisor *= base\n    }\n    while divisor\
    \ > 0 {\n        result = (remainder % divisor) + result\n        remainder, remainder\
    \ = remainder / divisor, base\n        divisor *= base\n    }\n    return result",
  "    let bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n\
    \    let baseIndex = bases.index(base)!\n    let result = String(Int(x / base))\n\
    \    if result.characters.count < baseIndex {\n        return result + bases[baseIndex]\n\
    \    }\n    return result", "    let digits = x.digits\n    let baseDigits = base.digits\n\
    \    var result: String = \"\"\n    for i in 0..<digits.count {\n        let digit\
    \ = digits[i]\n        let baseDigit = baseDigits[i]\n        if digit > baseDigit\
    \ {\n            let temp = digit\n            digit = baseDigit\n           \
    \ baseDigit = temp\n        }\n        let digitString = String(digit)\n     \
    \   let baseDigitString = String(baseDigit)\n        if digitString == baseDigitString\
    \ {\n            result += digitString\n        } else {\n            result +=\
    \ digitString + baseDigitString\n        }\n    }\n    return result", "    if\
    \ base < 10 {\n        return String(x)\n    }\n    var result = \"\"\n    var\
    \ remainder = x\n    var digits = \"\"\n    while remainder > 0 {\n        remainder,\
    \ remainder = remainder / base, 0\n        digits = String(remainder) + digits\n\
    \    }\n    for _ in 0..<base {\n        result = String(base) + result\n    }\n\
    \    return digits + result", "    let bases = [\"\", \"K\", \"M\", \"G\", \"\
    T\", \"P\", \"E\", \"Z\", \"Y\"]\n    let baseIndex = bases.index(base)!\n   \
    \ let baseString = bases[baseIndex]\n    let baseInt = Int(baseString)\n    let\
    \ baseDouble = Double(baseString)\n    let baseFloat = Float(baseString)\n   \
    \ let baseInt = Int(x)\n    let baseDouble = Double(x)\n    let baseFloat = Float(x)\n\
    \    let baseDouble = Double(x)\n    let baseFloat = Float(x)\n    let baseDouble\
    \ = Double(x)\n    let baseFloat = Float(x)\n    let baseDouble = Double(x)\n\
    \    let baseFloat = Float(x)\n    let baseDouble = Double(x)\n    let baseFloat\
    \ = Float(x)\n    let baseDouble = Double(x)\n    let baseFloat = Float(x)\n \
    \   let baseDouble = Double(x)\n    let baseFloat = Float(x)\n    let baseDouble\
    \ = Double(x)\n    let baseFloat = Float(x)\n    let baseDouble = Double(x)\n\
    \    let baseFloat = Float(x)\n    let baseDouble = Double(x)\n    let baseFloat\
    \ = Float(x)\n    let baseDouble = Double(x)\n    let baseFloat = Float(x)\n \
    \   let baseDouble = Double(x)\n    let baseFloat = Float(x)\n    let baseDouble\
    \ = Double(x)\n    let baseFloat = Float(x)\n    let baseDouble = Double(x)\n\
    \    let baseFloat = Float(x)\n    let baseDouble = Double(x)\n    let baseFloat\
    \ = Float(x)\n    let baseDouble = Double(x)\n    let baseFloat = Float(x)\n \
    \   let baseDouble = Double(x)\n    let baseFloat = Float(x)\n    let baseDouble\
    \ = Double(x)\n    let baseFloat = Float(x)\n    let baseDouble = Double(x)\n\
    \    let baseFloat = Float(x)\n    let baseDouble = Double(x)\n    let baseFloat\
    \ = Float(x)\n    let baseDouble = Double(x)\n    let baseFloat = Float(x)\n \
    \   let baseDouble = Double(x)\n    let baseFloat = Float(x)\n    let baseDouble\
    \ = Double(x)\n    let baseFloat = Float(x)\n    let baseDouble = Double(x)\n\
    \    let baseFloat = Float(x)\n    let baseDouble = Double(x)\n    let baseFloat\
    \ = Float(x)\n    let baseDouble = Double(x)\n    let baseFloat = Float(x)\n \
    \   let baseDouble = Double(x)\n    let baseFloat = Float(x)\n    let baseDouble\
    \ = Double(x)\n    let baseFloat = Float(x)\n    let baseDouble = Double(x)\n\
    \    let baseFloat = Float(x)\n    let baseDouble = Double(x)\n    let baseFloat\
    \ = Float(x)\n    let baseDouble = Double(x)\n    let baseFloat = Float(x)\n \
    \   let baseDouble = Double(x)\n    let ", "    let bases = [\"\", \"K\", \"M\"\
    , \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n    let base_index = bases.index(base)!\n\
    \    let result = x.truncatingRemainder(dividingBy: pow(10.0, Double(base_index)))\n\
    \    return String(result) + bases[base_index]", "    if base < 10 {\n       \
    \ return String(x)\n    }\n    var result = \"\"\n    var remainder = x % base\n\
    \    while remainder != 0 {\n        result = String(remainder) + result\n   \
    \     remainder = x % base\n    }\n    return result", "    var result = \"\"\n\
    \    var remainder: Int\n    var quotient: Int\n    var remainder2: Int\n    var\
    \ quotient2: Int\n    var remainder3: Int\n    var quotient3: Int\n    var remainder4:\
    \ Int\n    var quotient4: Int\n    var remainder5: Int\n    var quotient5: Int\n\
    \    var remainder6: Int\n    var quotient6: Int\n    var remainder7: Int\n  \
    \  var quotient7: Int\n    var remainder8: Int\n    var quotient8: Int\n    var\
    \ remainder9: Int\n    var quotient9: Int\n    var remainder10: Int\n    var quotient10:\
    \ Int\n    var remainder11: Int\n    var quotient11: Int\n    var remainder12:\
    \ Int\n    var quotient12: Int\n    var remainder13: Int\n    var quotient13:\
    \ Int\n    var remainder14: Int\n    var quotient14: Int\n    var remainder15:\
    \ Int\n    var quotient15: Int\n    var remainder16: Int\n    var quotient16:\
    \ Int\n    var remainder17: Int\n    var quotient17: Int\n    var remainder18:\
    \ Int\n    var quotient18: Int\n    var remainder19: Int\n    var quotient19:\
    \ Int\n    var remainder20: Int\n    var quotient20: Int\n    var remainder21:\
    \ Int\n    var quotient21: Int\n    var remainder22: Int\n    var quotient22:\
    \ Int\n    var remainder23: Int\n    var quotient23: Int\n    var remainder24:\
    \ Int\n    var quotient24: Int\n    var remainder25: Int\n    var quotient25:\
    \ Int\n    var remainder26: Int\n    var quotient26: Int\n    var remainder27:\
    \ Int\n    var quotient27: Int\n    var remainder28: Int\n    var quotient28:\
    \ Int\n    var remainder29: Int\n    var quotient29: Int\n    var remainder30:\
    \ Int\n    var quotient30: Int\n    var remainder31: Int\n    var quotient31:\
    \ Int\n    var remainder32: Int\n    var quotient32: Int\n    var remainder33:\
    \ Int\n    var quotient33: Int\n    var remainder34: Int\n    var quotient34:\
    \ Int\n    var remainder35: Int\n    var quotient35: Int\n    var remainder36:\
    \ Int\n    var quotient36: Int\n    var remainder37: Int\n    var quotient37:\
    \ Int\n", "    let baseChar = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    let\
    \ baseCharLen = baseChar.count\n    let baseCharLenUpper = baseChar.uppercased().count\n\
    \    let baseCharLenLower = baseChar.lowercased().count\n    let baseCharLenUpperLower\
    \ = baseChar.uppercased().lowercased().count\n    let baseCharLenUpperUpper =\
    \ baseChar.uppercased().uppercased().count\n    let baseCharLenUpperUpperLower\
    \ = baseChar.uppercased().uppercased().lowercased().count\n    let baseCharLenUpperUpperUpper\
    \ = baseChar.uppercased().uppercased().uppercased().count\n    let baseCharLenUpperUpperUpperLower\
    \ = baseChar.uppercased().uppercased().uppercased().lowercased().count\n    let\
    \ baseCharLenUpperUpperUpperUpper = baseChar.uppercased().uppercased().uppercased().uppercased().count\n\
    \    let baseCharLenUpperUpperUpperUpperLower = baseChar.uppercased().uppercased().uppercased().uppercased().lowercased().count\n\
    \    let baseCharLenUpperUpperUpperUpperUpper = baseChar.uppercased().uppercased().uppercased().uppercased().uppercased().count\n\
    \    let baseCharLenUpperUpperUpperUpperUpperLower = baseChar.uppercased().uppercased().uppercased().uppercased().uppercased().lowercased().count\n\
    \    let baseCharLenUpperUpperUpperUpperUpperUpper = baseChar.uppercased().uppercased().uppercased().uppercased().uppercased().uppercased().uppercased().count\n\
    \    let baseCharLenUpperUpperUpperUpperUpperUpperLower = baseChar.uppercased().uppercased().uppercased().uppercased().uppercased().uppercased().lowercased().count\n\
    \    let baseCharLenUpperUpperUpperUpperUpperUpperUpper = baseChar.uppercased().uppercased().uppercased().uppercased().uppercased().uppercased().uppercased().uppercased().count\n\
    \    let baseCharLenUpperUpperUpperUpperUpperUpperLower = baseChar.uppercased().uppercased().uppercased().uppercased().uppercased().uppercased().uppercased().lowercased().count\n\
    \    let baseCharLenUpperUpperUpperUpperUpperUpperUpperUpper = baseChar.uppercased().uppercased().uppercased().uppercased().uppercased().uppercased().uppercased().uppercased().uppercased().count\n\
    \    let baseCharLenUpperUpperUpperUpperUpperUpperUpperLower = baseChar.uppercased().uppercased().uppercased().uppercase",
  "    let bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n\
    \    let baseIndex = bases.index(base)!\n    let result = String(x)\n    if x\
    \ < 0 {\n        result = \"-\" + result\n    }\n    if baseIndex < result.characters.count\
    \ {\n        result = result.characters.prefix(baseIndex) + bases[baseIndex]\n\
    \    }\n    return result", "    let base10 = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    let base16 = \"0123456789abcdefghijklmnopqrstuvwxyz\"\n    let base2 = \"\
    0123456789ABCDEF\"\n    let base8 = \"0123456789abcdef\"\n    let base16 = \"\
    0123456789abcdef\"\n    let base32 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    let base36 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz\"\
    \n    let base58 = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\
    \n    let base62 = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    let base64 = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    let base66 = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz\"\
    \n    let base9 = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz\"\
    \n    let base10 = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    let base16 =\
    \ \"0123456789abcdefghijklmnopqrstuvwxyz\"\n    let base2 = \"0123456789ABCDEF\"\
    \n    let base8 = \"0123456789abcdef\"\n    let base16 = \"0123456789abcdef\"\n\
    \    let base32 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    let base36 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz\"\
    \n    let base58 = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\
    \n    let ", "    if base < 10 {\n        return \"\"\n    }\n    var res = \"\
    \"\n    var i = 0\n    var digit = 0\n    var digits = \"\"\n    while i < len(x)\
    \ {\n        digit = Int(x[i] - 48)\n        if digit < base {\n            digits\
    \ += String(digit)\n        } else {\n            if digits != \"\" {\n      \
    \          res += String(digits)\n                digits = \"\"\n            }\n\
    \            res += String(digit - base)\n        }\n        i += 1\n    }\n \
    \   if digits != \"\" {\n        res += String(digits)\n    }\n    return res",
  "    let bases = Array(1...base)\n    let digits = x.digits\n    var result = \"\
    \"\n    for digit in digits {\n        let index = bases.indexOf(digit)\n    \
    \    if index == -1 {\n            result += digit\n        } else {\n       \
    \     result += String(digits[index])\n        }\n    }\n    return result", " \
    \   var result = \"\"\n    var remainder: Int\n    var quotient: Int\n    var\
    \ quotientString: String\n    var remainderString: String\n    var quotientStringLength:\
    \ Int\n    var remainderStringLength: Int\n    var quotientStringLength2: Int\n\
    \    var remainderStringLength2: Int\n    var quotientStringLength3: Int\n   \
    \ var remainderStringLength3: Int\n    var quotientStringLength4: Int\n    var\
    \ remainderStringLength4: Int\n    var quotientStringLength5: Int\n    var remainderStringLength5:\
    \ Int\n    var quotientStringLength6: Int\n    var remainderStringLength6: Int\n\
    \    var quotientStringLength7: Int\n    var remainderStringLength7: Int\n   \
    \ var quotientStringLength8: Int\n    var remainderStringLength8: Int\n    var\
    \ quotientStringLength9: Int\n    var remainderStringLength9: Int\n    var quotientStringLength10:\
    \ Int\n    var remainderStringLength10: Int\n    var quotientStringLength11: Int\n\
    \    var remainderStringLength11: Int\n    var quotientStringLength12: Int\n \
    \   var remainderStringLength12: Int\n    var quotientStringLength13: Int\n  \
    \  var remainderStringLength13: Int\n    var quotientStringLength14: Int\n   \
    \ var remainderStringLength14: Int\n    var quotientStringLength15: Int\n    var\
    \ remainderStringLength15: Int\n    var quotientStringLength16: Int\n    var remainderStringLength16:\
    \ Int\n    var quotientStringLength17: Int\n    var remainderStringLength17: Int\n\
    \    var quotientStringLength18: Int\n    var remainderStringLength18: Int\n \
    \   var quotientStringLength19: Int\n    var remainderStringLength19: Int\n  \
    \  var quotientStringLength20: Int\n    var remainderStringLength20: Int\n   \
    \ var quotientStringLength21: Int\n    var remainderStringLength21: Int\n    var\
    \ quotientStringLength22: Int\n    var remainderStringLength22: Int\n    var quotientStringLength23:\
    \ Int\n    var remainderStringLength23: Int\n    var quotientStringLength24: Int\n\
    \    var remainderStringLength24: Int\n    var quotientStringLength25: Int\n \
    \   var remainderStringLength25: Int\n    var quotientStringLength26: Int\n  \
    \  var remainderStringLength26: Int\n    var quotientStringLength27: Int\n   \
    \ var remainderStringLength27: Int\n    var quotientStringLength28: Int", "  \
    \  let bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n\
    \    let baseIndex = bases.index(base)!\n    let x = x.toInt()\n    let result\
    \ = String(x)\n    if x < 0 {\n        result = \"-\" + result\n    }\n    if\
    \ baseIndex < result.count {\n        result = result.prefix(baseIndex) + bases[baseIndex]\n\
    \    }\n    return result", "    var result = \"\"\n    var remainder: Int\n \
    \   var quotient: Int\n    var quotientString: String\n    var remainderString:\
    \ String\n    var quotientStringInt: Int\n    var remainderStringInt: Int\n  \
    \  var quotientStringIntString: Int\n    var remainderStringIntString: Int\n \
    \   var quotientStringIntStringString: Int\n    var remainderStringIntStringString:\
    \ Int\n    var quotientStringIntStringStringString: Int\n    var remainderStringIntStringStringString:\
    \ Int\n    var quotientStringIntStringStringStringString: Int\n    var remainderStringIntStringStringStringString:\
    \ Int\n    var quotientStringIntStringStringStringStringString: Int\n    var remainderStringIntStringStringStringStringString:\
    \ Int\n    var quotientStringIntStringStringStringStringStringString: Int\n  \
    \  var remainderStringIntStringStringStringStringStringString: Int\n    var quotientStringIntStringStringStringStringStringStringString:\
    \ Int\n    var remainderStringIntStringStringStringStringStringStringString: Int\n\
    \    var quotientStringIntStringStringStringStringStringStringStringString: Int\n\
    \    var remainderStringIntStringStringStringStringStringStringStringString: Int\n\
    \    var quotientStringIntStringStringStringStringStringStringStringStringString:\
    \ Int\n    var remainderStringIntStringStringStringStringStringStringStringStringString:\
    \ Int\n    var quotientStringIntStringStringStringStringStringStringStringStringStringString:\
    \ Int\n    var remainderStringIntStringStringStringStringStringStringStringStringStringString:\
    \ Int\n    var quotientStringIntStringStringStringStringStringStringStringStringStringStringString:\
    \ Int\n    var remainderStringIntStringStringStringStringStringStringStringStringStringStringString:\
    \ Int\n    var quotientStringIntStringStringStringStringStringStringStringStringStringStringStringStringString:\
    \ Int\n    var remainderStringIntStringStringStringStringStringStringStringStringStringStringStringString:\
    \ Int\n    var quotientStringIntStringStringStringStringStringStringStringStringStringStringStringStringStringString:\
    \ Int\n    var remainderStringIntStringStringStringStringStringStringStringStringStringStringStringStringString:\
    \ Int\n    var quotientStringIntStringStringStringStringStringStringStringStringStringStringStringStringStringString:\
    \ Int\n    var remainderStringIntStringStringStringStringStringStringStringStringStringStringStringStringStringString:\
    \ Int\n    var quotientStringIntStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringString:\
    \ Int\n    var remainderStringIntStringStringString", "    var result = \"\"\n\
    \    var remainder = 0\n    var quotient = 0\n    var quotientString = \"\"\n\
    \    var remainderString = \"\"\n    var quotientStringWithBase = \"\"\n    var\
    \ remainderStringWithBase = \"\"\n\n    if base < 2 {\n        return \"\"\n \
    \   }\n\n    if base == 2 {\n        if x == 0 {\n            result = \"0\"\n\
    \        } else {\n            result = \"1\"\n        }\n        return result\n\
    \    }\n\n    if base == 10 {\n        if x == 0 {\n            result = \"0\"\
    \n        } else {\n            result = \"1\"\n        }\n        return result\n\
    \    }\n\n    while x > 0 {\n        remainder = x % base\n        quotient =\
    \ x / base\n        remainderString = String(remainder)\n        quotientString\
    \ = String(quotient)\n        quotientStringWithBase = quotientString + quotientStringWithBase\n\
    \        remainderStringWithBase = remainderString + remainderStringWithBase\n\
    \        x = quotient\n    }\n\n    result = quotientStringWithBase + remainderStringWithBase\n\
    \    return result", "    var result = \"\"\n    var remainder = x\n    var quotient\
    \ = base\n    while quotient > 0 {\n        remainder = remainder % base\n   \
    \     result = String(quotient) + result\n        quotient = quotient / base\n\
    \    }\n    if remainder > 0 {\n        result = String(remainder) + result\n\
    \    }\n    return result", "    if base < 10 {\n        return String(x)\n  \
    \  }\n    var res = \"\"\n    var i = 0\n    while i < len(x) {\n        let c\
    \ = x[i]\n        if c >= '0' && c <= '9' {\n            if base == 10 {\n   \
    \             res += String(c) - \"0\"\n            } else {\n               \
    \ res += String(c) - String(base)\n            }\n        } else {\n         \
    \   if base == 10 {\n                res += \"0\" + String(c)\n            } else\
    \ {\n                res += String(base) + String(c)\n            }\n        }\n\
    \        i += 1\n    }\n    return res", "    var result = \"\"\n    var remainder\
    \ = x\n    var digits = base\n    while remainder > 0 {\n        remainder, remainder\
    \ = remainder / digits, remainder % digits\n        digits *= 10\n    }\n    while\
    \ digits > 0 {\n        result = String(repeating: \"0\", count: digits) + result\n\
    \        digits /= 10\n    }\n    return result", "    if base < 10 {\n      \
    \  return String(x)\n    }\n    var result = \"\"\n    var remainder = x\n   \
    \ var digit = remainder\n    while digit > 0 {\n        let remainderDigit = remainder\
    \ % base\n        remainder = remainder / base\n        result = String(digit)\
    \ + String(remainderDigit) + result\n        digit = remainder\n    }\n    return\
    \ result", "    let bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"\
    Z\", \"Y\"]\n    let base_index = bases.index(base)!\n    let x = x.toInt()\n\
    \    let result = String(x)\n    if result < 0 {\n        result = \"-\" + result\n\
    \    }\n    let index = result.index(result.startIndex, offsetBy: 0)\n    let\
    \ result = result[index...].trimmingCharacters(in: CharacterSet(charactersIn:\
    \ \"0123456789\"))\n    let result = bases[base_index] + result\n    return result",
  "    var result = \"\"\n    var remainder: Int\n    var quotient: Int\n    var remainder2:\
    \ Int\n    var quotient2: Int\n    var remainder3: Int\n    var quotient3: Int\n\
    \    var remainder4: Int\n    var quotient4: Int\n    var remainder5: Int\n  \
    \  var quotient5: Int\n    var remainder6: Int\n    var quotient6: Int\n    var\
    \ remainder7: Int\n    var quotient7: Int\n    var remainder8: Int\n    var quotient8:\
    \ Int\n    var remainder9: Int\n    var quotient9: Int\n    var remainder10: Int\n\
    \    var quotient10: Int\n    var remainder11: Int\n    var quotient11: Int\n\
    \    var remainder12: Int\n    var quotient12: Int\n    var remainder13: Int\n\
    \    var quotient13: Int\n    var remainder14: Int\n    var quotient14: Int\n\
    \    var remainder15: Int\n    var quotient15: Int\n    var remainder16: Int\n\
    \    var quotient16: Int\n    var remainder17: Int\n    var quotient17: Int\n\
    \    var remainder18: Int\n    var quotient18: Int\n    var remainder19: Int\n\
    \    var quotient19: Int\n    var remainder20: Int\n    var quotient20: Int\n\
    \    var remainder21: Int\n    var quotient21: Int\n    var remainder22: Int\n\
    \    var quotient22: Int\n    var remainder23: Int\n    var quotient23: Int\n\
    \    var remainder24: Int\n    var quotient24: Int\n    var remainder25: Int\n\
    \    var quotient25: Int\n    var remainder26: Int\n    var quotient26: Int\n\
    \    var remainder27: Int\n    var quotient27: Int\n    var remainder28: Int\n\
    \    var quotient28: Int\n    var remainder29: Int\n    var quotient29: Int\n\
    \    var remainder30: Int\n    var quotient30: Int\n    var remainder31: Int\n\
    \    var quotient31: Int\n    var remainder32: Int\n    var quotient32: Int\n\
    \    var remainder33: Int\n    var quotient33: Int\n    var remainder34: Int\n\
    \    var quotient34: Int\n    var remainder35: Int\n    var quotient35: Int\n\
    \    var remainder36: Int\n    var quotient36: Int\n    var remainder37: Int\n\
    \    var quotient37: Int\n", "    var result = \"\"\n    var remainder = x\n \
    \   var quotient = 0\n    var quotientString = \"\"\n    var remainderString =\
    \ \"\"\n    var quotientStringLen = 0\n    var remainderStringLen = 0\n    var\
    \ quotientStringLen2 = 0\n    var remainderStringLen2 = 0\n    var quotientStringLen3\
    \ = 0\n    var remainderStringLen3 = 0\n    var quotientStringLen4 = 0\n    var\
    \ remainderStringLen4 = 0\n    var quotientStringLen5 = 0\n    var remainderStringLen5\
    \ = 0\n    var quotientStringLen6 = 0\n    var remainderStringLen6 = 0\n    var\
    \ quotientStringLen7 = 0\n    var remainderStringLen7 = 0\n    var quotientStringLen8\
    \ = 0\n    var remainderStringLen8 = 0\n    var quotientStringLen9 = 0\n    var\
    \ remainderStringLen9 = 0\n    var quotientStringLen10 = 0\n    var remainderStringLen10\
    \ = 0\n    var quotientStringLen11 = 0\n    var remainderStringLen11 = 0\n   \
    \ var quotientStringLen12 = 0\n    var remainderStringLen12 = 0\n    var quotientStringLen13\
    \ = 0\n    var remainderStringLen13 = 0\n    var quotientStringLen14 = 0\n   \
    \ var remainderStringLen14 = 0\n    var quotientStringLen15 = 0\n    var remainderStringLen15\
    \ = 0\n    var quotientStringLen16 = 0\n    var remainderStringLen16 = 0\n   \
    \ var quotientStringLen17 = 0\n    var remainderStringLen17 = 0\n    var quotientStringLen18\
    \ = 0\n    var remainderStringLen18 = 0\n    var quotientStringLen19 = 0\n   \
    \ var remainderStringLen19 = 0\n    var quotientStringLen20 = 0\n    var remainderStringLen20\
    \ = 0\n    var quotientStringLen21 = 0\n    var remainderStringLen21 = 0\n   \
    \ var quotientStringLen22 = 0\n    var remainderStringLen22 = 0\n    var quotientStringLen23\
    \ = 0\n    var remainderStringLen23 = 0\n    var quotientStringLen24 = 0\n   \
    \ var remainderStringLen24 = 0\n    var quotientStringLen25 = 0\n    var remainderStringLen25\
    \ = 0\n    var quotientStringLen26 = 0\n    var remainderStringLen26 = 0\n   \
    \ var quotientStringLen27 = 0\n    var remainderStringLen27 = 0\n    var quotientStringLen28\
    \ = 0\n    var remainderStringLen28 = 0\n    var quotientStringLen29 = 0\n   \
    \ var remainderStringLen29 = 0\n    var quotientStringLen30 = 0\n    var remainderStringLen30\
    \ = 0\n    var quotientStringLen31 = 0\n", "    let digits = x.digits\n    let\
    \ digits_base = digits.base\n    let digits_base2 = digits.base2\n    let digits_base10\
    \ = digits.base10\n    let digits_base16 = digits.base16\n    let digits_base32\
    \ = digits.base32\n    let digits_base64 = digits.base64\n    let digits_base128\
    \ = digits.base128\n    let digits_base256 = digits.base256\n    let digits_base512\
    \ = digits.base512\n    let digits_base1024 = digits.base1024\n    let digits_base2048\
    \ = digits.base2048\n    let digits_base4096 = digits.base4096\n    let digits_base8192\
    \  = digits.base8192\n    let digits_base16384 = digits.base16384\n    let digits_base32768\
    \ = digits.base32768\n    let digits_base65536 = digits.base65536\n    let digits_base131072\
    \ = digits.base131072\n    let digits_base262144 = digits.base262144\n    let\
    \ digits_base524288 = digits.base524288\n    let digits_base1048576 = digits.base1048576\n\
    \    let digits_base2097152 = digits.base2097152\n    let digits_base4194304 =\
    \ digits.base4194304\n    let digits_base8388608 = digits.base8388608\n    let\
    \ digits_base16777216 = digits.base16777216\n    let digits_base33554432 = digits.base33554432\n\
    \    let digits_base67108864 = digits.base67108864\n    let digits_base134217728\
    \ = digits.base134217728\n    let digits_base268435456 = digits.base268435456\n\
    \    let digits_base536870912 = digits.base536870912\n    let digits_base1073741824\
    \ = digits.base1073741824\n    let digits_base2147483648 = digits.base2147483648\n\
    \    let digits_base4294967296 = digits.base4294967296\n    let digits_base8589934592\
    \ = digits.base8589934592\n    let digits_base17179869184 = digits.base17179869184\n\
    \    let digits_base34359738368 = digits.base34359738368\n    let digits_base68719476736\
    \ = digits.base68719476736\n    let digits_base137438953472 = digits.base137438953472\n\
    \    let digits_base274877906944 = digits.base27487790", "    var result = \"\"\
    \n    var remainder: Int\n    var quotient: Int\n    var remainder2: Int\n   \
    \ var quotient2: Int\n    var remainder3: Int\n    var quotient3: Int\n    var\
    \ remainder4: Int\n    var quotient4: Int\n    var remainder5: Int\n    var quotient5:\
    \ Int\n    var remainder6: Int\n    var quotient6: Int\n    var remainder7: Int\n\
    \    var quotient7: Int\n    var remainder8: Int\n    var quotient8: Int\n   \
    \ var remainder9: Int\n    var quotient9: Int\n    var remainder10: Int\n    var\
    \ quotient10: Int\n    var remainder11: Int\n    var quotient11: Int\n    var\
    \ remainder12: Int\n    var quotient12: Int\n    var remainder13: Int\n    var\
    \ quotient13: Int\n    var remainder14: Int\n    var quotient14: Int\n    var\
    \ remainder15: Int\n    var quotient15: Int\n    var remainder16: Int\n    var\
    \ quotient16: Int\n    var remainder17: Int\n    var quotient17: Int\n    var\
    \ remainder18: Int\n    var quotient18: Int\n    var remainder19: Int\n    var\
    \ quotient19: Int\n    var remainder20: Int\n    var quotient20: Int\n    var\
    \ remainder21: Int\n    var quotient21: Int\n    var remainder22: Int\n    var\
    \ quotient22: Int\n    var remainder23: Int\n    var quotient23: Int\n    var\
    \ remainder24: Int\n    var quotient24: Int\n    var remainder25: Int\n    var\
    \ quotient25: Int\n    var remainder26: Int\n    var quotient26: Int\n    var\
    \ remainder27: Int\n    var quotient27: Int\n    var remainder28: Int\n    var\
    \ quotient28: Int\n    var remainder29: Int\n    var quotient29: Int\n    var\
    \ remainder30: Int\n    var quotient30: Int\n    var remainder31: Int\n    var\
    \ quotient31: Int\n    var remainder32: Int\n    var quotient32: Int\n    var\
    \ remainder33: Int\n    var quotient33: Int\n    var remainder34: Int\n    var\
    \ quotient34: Int\n    var remainder35: Int\n    var quotient35: Int\n    var\
    \ remainder36: Int\n    var quotient36: Int\n    var remainder37: Int\n    var\
    \ quotient37: Int\n", "    if base < 10 {\n        return String(x)\n    }\n \
    \   var result = \"\"\n    var remainder = x\n    var divisor = base\n    while\
    \ remainder > 0 {\n        remainder, remainder = remainder / divisor, base\n\
    \        divisor *= base\n    }\n    while divisor > 0 {\n        result = String(remainder)\
    \ + result\n        divisor = divisor / base\n    }\n    return result", "   \
    \ var s = String(x)\n    var r = \"\"\n    \n    if base == 10 {\n        return\
    \ s;\n    }\n    \n    if base < 10 {\n        s = \"0\" + s;\n    }\n    \n \
    \   var i = 0;\n    while i < len(s) {\n        var c = s[i]\n        if c >=\
    \ '0' && c <= '9' {\n            var n = c - '0'\n            var r = r + String(n\
    \ * base)\n        } else {\n            var r = r + c\n        }\n        i +=\
    \ 1\n    }\n    return r", "    var result = \"\"\n    var remainder: Int\n  \
    \  var quotient: Int\n    var digit: Int\n    var baseDigit: Int\n    var baseString:\
    \ String\n\n    if base < 10 {\n        baseString = String(base)\n    } else\
    \ {\n        baseString = String(base).uppercased()\n    }\n\n    if x < 0 {\n\
    \        remainder = -1\n        quotient = Int(abs(x))\n    } else {\n      \
    \  remainder = Int(x)\n        quotient = -1\n    }\n\n    while quotient != 0\
    \ {\n        digit = quotient % base\n        remainder = quotient / base\n  \
    \      result = baseString[digit] + result\n        quotient = remainder\n   \
    \ }\n\n    if remainder != 0 {\n        result = baseString[remainder] + result\n\
    \    }\n\n    return result", "    var result = \"\"\n    var remainder: Int\n\
    \    var quotient: Int\n    var remainder2: Int\n    var quotient2: Int\n    var\
    \ remainder3: Int\n    var quotient3: Int\n    var remainder4: Int\n    var quotient4:\
    \ Int\n    var remainder5: Int\n    var quotient5: Int\n    var remainder6: Int\n\
    \    var quotient6: Int\n    var remainder7: Int\n    var quotient7: Int\n   \
    \ var remainder8: Int\n    var quotient8: Int\n    var remainder9: Int\n    var\
    \ quotient9: Int\n    var remainder10: Int\n    var quotient10: Int\n    var remainder11:\
    \ Int\n    var quotient11: Int\n    var remainder12: Int\n    var quotient12:\
    \ Int\n    var remainder13: Int\n    var quotient13: Int\n    var remainder14:\
    \ Int\n    var quotient14: Int\n    var remainder15: Int\n    var quotient15:\
    \ Int\n    var remainder16: Int\n    var quotient16: Int\n    var remainder17:\
    \ Int\n    var quotient17: Int\n    var remainder18: Int\n    var quotient18:\
    \ Int\n    var remainder19: Int\n    var quotient19: Int\n    var remainder20:\
    \ Int\n    var quotient20: Int\n    var remainder21: Int\n    var quotient21:\
    \ Int\n    var remainder22: Int\n    var quotient22: Int\n    var remainder23:\
    \ Int\n    var quotient23: Int\n    var remainder24: Int\n    var quotient24:\
    \ Int\n    var remainder25: Int\n    var quotient25: Int\n    var remainder26:\
    \ Int\n    var quotient26: Int\n    var remainder27: Int\n    var quotient27:\
    \ Int\n    var remainder28: Int\n    var quotient28: Int\n    var remainder29:\
    \ Int\n    var quotient29: Int\n    var remainder30: Int\n    var quotient30:\
    \ Int\n    var remainder31: Int\n    var quotient31: Int\n    var remainder32:\
    \ Int\n    var quotient32: Int\n    var remainder33: Int\n    var quotient33:\
    \ Int\n    var remainder34: Int\n    var quotient34: Int\n    var remainder35:\
    \ Int\n    var quotient35: Int\n    var remainder36: Int\n    var quotient36:\
    \ Int\n    var remainder37: Int\n    var quotient37: Int\n", "    var result =\
    \ \"\"\n    var remainder = x\n    var quotient = 0\n    var quotientString =\
    \ \"\"\n    var quotientStringString = \"\"\n    var quotientStringStringString\
    \ = \"\"\n    var quotientStringStringStringString = \"\"\n    var quotientStringStringStringStringString\
    \ = \"\"\n    var quotientStringStringStringStringStringString = \"\"\n    var\
    \ quotientStringStringStringStringStringStringString = \"\"\n    var quotientStringStringStringStringStringStringStringString\
    \ = \"\"\n    var quotientStringStringStringStringStringStringStringStringString\
    \ = \"\"\n    var quotientStringStringStringStringStringStringStringStringStringString\
    \ = \"\"\n    var quotientStringStringStringStringStringStringStringStringStringStringString\
    \ = \"\"\n    var quotientStringStringStringStringStringStringStringStringStringStringString\
    \ = \"\"\n    var quotientStringStringStringStringStringStringStringStringStringStringStringString\
    \ = \"\"\n    var quotientStringStringStringStringStringStringStringStringStringStringStringString\
    \ = \"\"\n    var quotientStringStringStringStringStringStringStringStringStringStringStringString\
    \ = \"\"\n    var quotientStringStringStringStringStringStringStringStringStringStringStringStringString\
    \ = \"\"\n    var quotientStringStringStringStringStringStringStringStringStringStringStringStringStringString\
    \ = \"\"\n    var quotientStringStringStringStringStringStringStringStringStringStringStringStringStringStringString\
    \ = \"\"\n    var quotientStringStringStringStringStringStringStringStringStringStringStringStringStringStringString\
    \ = \"\"\n    var quotientStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringString\
    \ = \"\"\n    var quotientStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringString\
    \ = \"\"\n    var quotientStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringString\
    \ = \"\"\n    var quotientStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringString\
    \ = \"\"\n    var quotientStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringString\
    \ = \"\"\n    var quotientStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringString\
    \ = \"\"\n    var quotientStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringString\
    \ = \"\"\n    var quotientStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringString\
    \ = \"\"\n    var quotientStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringString\
    \ = \"\"\n    var quotientStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringString",
  "    let base10 = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    let base16 = \"\
    0123456789abcdefghijklmnopqrstuvwxyz\"\n    let base16upper = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    let base16lower = \"0123456789abcdefghijklmnopqrstuvwxyz\"\n    let base16upperupper\
    \ = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    let base16lowerlower = \"0123456789abcdefghijklmnopqrstuvwxyz\"\
    \n    let base16upperlower = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    let\
    \ base16lowerupper = \"0123456789abcdefghijklmnopqrstuvwxyz\"\n    let base16upperupperupper\
    \ = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    let base16lowerlowerlower =\
    \ \"0123456789abcdefghijklmnopqrstuvwxyz\"\n    let base16upperlowerupper = \"\
    0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    let base16lowerupperlower = \"0123456789abcdefghijklmnopqrstuvwxyz\"\
    \n    let base16upperupperupper = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n \
    \   let base16lowerlowerlower = \"0123456789abcdefghijklmnopqrstuvwxyz\"\n   \
    \ let base16upperlowerupper = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    let\
    \ base16lowerupperlower = \"0123456789abcdefghijklmnopqrstuvwxyz\"\n    let base16upperupperupper\
    \ = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    let base16lowerlowerlower =\
    \ \"0123456789abcdefghijklmnopqrstuvwxyz\"\n    let base16upperlowerupper = \"\
    0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    let base16lowerupperlower = \"0123456789abcdefghijklmnopqrstuvwxyz\"\
    \n    let base16upperupperupper = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n \
    \   let base16lowerlowerlower = \"0123456789abcdefghijklmnopqrstuvwxyz\"\n   \
    \ let base16upperlowerupper = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    let\
    \ base16lowerupperlower = \"0123456789abcdefghijklmnopqrstuvwxyz", "    var result\
    \ = \"\"\n    var remainder = x\n    var quotient = 0\n    var remainderBase =\
    \ 0\n    var quotientBase = 0\n    var baseBase = 0\n    var baseBaseBase = 0\n\
    \    var baseBaseBaseBase = 0\n    var baseBaseBaseBaseBase = 0\n    var baseBaseBaseBaseBase\
    \ = 0\n    var baseBaseBaseBaseBaseBase = 0\n    var baseBaseBaseBaseBaseBase\
    \ = 0\n    var baseBaseBaseBaseBaseBaseBase = 0\n    var baseBaseBaseBaseBaseBaseBase\
    \ = 0\n    var baseBaseBaseBaseBaseBaseBase = 0\n    var baseBaseBaseBaseBaseBaseBase\
    \ = 0\n    var baseBaseBaseBaseBaseBaseBase = 0\n    var baseBaseBaseBaseBaseBaseBase\
    \ = 0\n    var baseBaseBaseBaseBaseBaseBase = 0\n    var baseBaseBaseBaseBaseBaseBase\
    \ = 0\n    var baseBaseBaseBaseBaseBaseBase = 0\n    var baseBaseBaseBaseBaseBaseBase\
    \ = 0\n    var baseBaseBaseBaseBaseBaseBase = 0\n    var baseBaseBaseBaseBaseBaseBase\
    \ = 0\n    var baseBaseBaseBaseBaseBaseBase = 0\n    var baseBaseBaseBaseBaseBaseBase\
    \ = 0\n    var baseBaseBaseBaseBaseBaseBase = 0\n    var baseBaseBaseBaseBaseBaseBase\
    \ = 0\n    var baseBaseBaseBaseBaseBaseBase = 0\n    var baseBaseBaseBaseBaseBaseBase\
    \ = 0\n    var baseBaseBaseBaseBaseBaseBase = 0\n    var baseBaseBaseBaseBaseBaseBase\
    \ = 0\n    var baseBaseBaseBaseBaseBaseBase = 0\n    var baseBaseBaseBaseBaseBaseBase\
    \ = 0\n    var baseBaseBaseBaseBaseBaseBase = 0\n    var baseBaseBaseBaseBaseBaseBase\
    \ = 0\n    var baseBaseBaseBaseBaseBaseBase = 0\n    var baseBaseBaseBaseBaseBaseBase\
    \ = 0\n    var baseBaseBaseBaseBaseBaseBase = 0\n    var baseBaseBaseBaseBaseBaseBase\
    \ = 0\n    var baseBaseBaseBaseBaseBaseBase = 0\n    var baseBaseBaseBaseBaseBaseBase\
    \ = 0\n    var baseBaseBaseBaseBaseBaseBase = 0\n    var baseBaseBaseBaseBaseBaseBase\
    \ = 0\n    var baseBaseBaseBaseBaseBaseBase = 0\n    var baseBaseBaseBaseBaseBaseBase\
    \ = 0\n    var baseBaseBaseBaseBaseBaseBase = 0\n    var baseBaseBaseBaseBaseBaseBase\
    \ = 0\n    var baseBaseBaseBaseBaseBaseBase = 0\n    var baseBaseBaseBaseBaseBaseBase\
    \ = 0\n    var baseBaseBaseBaseBaseBaseBase = 0\n    var baseBaseBaseBaseBaseBaseBase\
    \ = 0\n    var baseBaseBaseBaseBaseBaseBase = 0\n    var baseBaseBaseBaseBaseBaseBase\
    \ = 0\n    var baseBaseBaseBaseBaseBaseBase = 0\n    var baseBaseBase", "    if\
    \ base < 10 {\n        return String(x)\n    }\n    var result = \"\"\n    var\
    \ remainder = x\n    var digit = base\n    while remainder > 0 {\n        remainder,\
    \ remainder = remainder / digit, digit\n        result += String(digit)\n    }\n\
    \    return result", "    if base < 10 {\n        return String(x)\n    }\n  \
    \  var result = \"\"\n    var remainder = x\n    var divisor = base\n    while\
    \ remainder > 0 {\n        remainder, remainder = remainder / divisor, base\n\
    \        divisor *= base\n    }\n    while divisor > 0 {\n        result = String(remainder)\
    \ + result\n        divisor = divisor / base\n    }\n    return result", "   \
    \ var result = \"\"\n    var remainder: Int\n    var quotient: Int\n    var remainder2:\
    \ Int\n    var quotient2: Int\n    var quotient3: Int\n    var quotient4: Int\n\
    \    var quotient5: Int\n    var quotient6: Int\n    var quotient7: Int\n    var\
    \ quotient8: Int\n    var quotient9: Int\n    var quotient10: Int\n    var quotient11:\
    \ Int\n    var quotient12: Int\n    var quotient13: Int\n    var quotient14: Int\n\
    \    var quotient15: Int\n    var quotient16: Int\n    var quotient17: Int\n \
    \   var quotient18: Int\n    var quotient19: Int\n    var quotient20: Int\n  \
    \  var quotient21: Int\n    var quotient22: Int\n    var quotient23: Int\n   \
    \ var quotient24: Int\n    var quotient25: Int\n    var quotient26: Int\n    var\
    \ quotient27: Int\n    var quotient28: Int\n    var quotient29: Int\n    var quotient30:\
    \ Int\n    var quotient31: Int\n    var quotient32: Int\n    var quotient33: Int\n\
    \    var quotient34: Int\n    var quotient35: Int\n    var quotient36: Int\n \
    \   var quotient37: Int\n    var quotient38: Int\n    var quotient39: Int\n  \
    \  var quotient40: Int\n    var quotient41: Int\n    var quotient42: Int\n   \
    \ var quotient43: Int\n    var quotient44: Int\n    var quotient45: Int\n    var\
    \ quotient46: Int\n    var quotient47: Int\n    var quotient48: Int\n    var quotient49:\
    \ Int\n    var quotient50: Int\n    var quotient51: Int\n    var quotient52: Int\n\
    \    var quotient53: Int\n    var quotient54: Int\n    var quotient55: Int\n \
    \   var quotient56: Int\n    var quotient57: Int\n    var quotient58: Int\n  \
    \  var quotient59: Int\n    var quotient60: Int\n    var quotient61: Int\n   \
    \ var quotient62: Int\n    var quotient63: Int\n    var quotient64: Int\n    var\
    \ quotient65: Int\n    var quotient66: Int\n    var quotient67: Int\n    var quotient68:\
    \ Int\n    var quotient69: Int\n    var quotient70: Int\n    var quotient71: Int\n\
    \    var quotient72", "    var result = \"\"\n    var remainder = x\n    var digit\
    \ = 0\n    while remainder > 0 {\n        remainder, remainder = remainder / base,\
    \ digit\n        digit = digit + 1\n    }\n    while digit > 0 {\n        result\
    \ = String(digit) + result\n        digit = digit - 1\n    }\n    return result",
  "    if base < 10 {\n        return \"\"\n    }\n    var res = \"\"\n    var i =\
    \ 0\n    while i < len(x) {\n        if x[i] == 0 {\n            res = res + String(x[i+1..<len(x)])\n\
    \            i += len(x[i+1..<len(x)])\n        } else {\n            res = res\
    \ + String(x[i+1..<len(x)])\n            i += len(x[i+1..<len(x)])\n         \
    \   res = res + String(base-x[i])\n        }\n    }\n    return res", "    var\
    \ result: String = \"\"\n    var remainder: Int\n    var digit: Int\n    var base10:\
    \ Int\n    var base2: Int\n    var base3: Int\n    var base4: Int\n    var base5:\
    \ Int\n    var base6: Int\n    var base7: Int\n    var base8: Int\n    var base9:\
    \ Int\n    var base10: Int\n    var base11: Int\n    var base12: Int\n    var\
    \ base13: Int\n    var base14: Int\n    var base15: Int\n    var base16: Int\n\
    \    var base17: Int\n    var base18: Int\n    var base19: Int\n    var base20:\
    \ Int\n    var base21: Int\n    var base22: Int\n    var base23: Int\n    var\
    \ base24: Int\n    var base25: Int\n    var base26: Int\n    var base27: Int\n\
    \    var base28: Int\n    var base29: Int\n    var base30: Int\n    var base31:\
    \ Int\n    var base32: Int\n    var base33: Int\n    var base34: Int\n    var\
    \ base35: Int\n    var base36: Int\n    var base37: Int\n    var base38: Int\n\
    \    var base39: Int\n    var base40: Int\n    var base41: Int\n    var base42:\
    \ Int\n    var base43: Int\n    var base44: Int\n    var base45: Int\n    var\
    \ base46: Int\n    var base47: Int\n    var base48: Int\n    var base49: Int\n\
    \    var base50: Int\n    var base51: Int\n    var base52: Int\n    var base53:\
    \ Int\n    var base54: Int\n    var base55: Int\n    var base56: Int\n    var\
    \ base57: Int\n    var base58: Int\n    var base59: Int\n    var base60: Int\n\
    \    var base61: Int\n    var base62: Int\n    var base63: Int\n    var base64:\
    \ Int\n    var base65: Int\n    var base66: Int\n    var base67: Int\n    var\
    \ base68: Int\n    var base69: Int\n    var base70: Int\n    var base71: Int\n\
    \    var base72: Int\n    var base73: Int\n    var base74: Int\n    var base75:\
    \ Int\n    var base76: Int\n    var base77: Int\n    var base78: Int\n    var\
    \ base79: Int\n    var base80: Int\n    var base81: Int\n    var base82: Int\n\
    \    var base83: Int\n    var base", "    if base < 10 {\n        return String(x)\n\
    \    }\n    var res = \"\"\n    var i = 0\n    var digits = x.digits\n    for\
    \ digit in digits {\n        if digit > base {\n            digits -= digit\n\
    \            res += String(digit)\n        } else {\n            res += String(digit)\n\
    \        }\n    }\n    return res", "    if base < 10 {\n        return String(x)\n\
    \    }\n    var res = \"\"\n    var i = 0\n    while i < len(x) {\n        let\
    \ digit = x[i] - '0'\n        res += String(digit)\n        if base > 10 {\n \
    \           i += digit\n        } else {\n            i += digit * base\n    \
    \    }\n    }\n    return res", "    let base_to_digit: [String] = [\"0\", \"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"\
    C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"\
    N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"\
    Y\", \"Z\"]\n    let digits_to_base: [String] = [\"0\", \"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"\
    F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"\
    Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"]\n    let digits_to_base2:\
    \ [String] = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"\
    9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"\
    K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"\
    V\", \"W\", \"X\", \"Y\", \"Z\"]\n    let digits_to_base3: [String] = [\"0\",\
    \ \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\"\
    , \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\"\
    , \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\"\
    , \"Y\", \"Z\"]\n    let digits_to_base4: [String] = [\"0\", \"1\", \"2\", \"\
    3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"\
    E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"\
    P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"]\n \
    \   let digits_to_base5: [String] = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"\
    , \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\"\
    , \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"]\n    let digits_to_base6:\
    \ [String] = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"\
    9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"\
    K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"\
    V\", \"W\", \"X\", \"Y", "    if base < 10 {\n        return String(x)\n    }\n\
    \    var result = \"\"\n    var remainder = x\n    var digit = base\n    while\
    \ remainder > 0 {\n        remainder, remainder = remainder / digit, base\n  \
    \      digit--\n    }\n    while digit > 0 {\n        result = String(digit) +\
    \ result\n        digit--\n    }\n    return result", "    let bases = [\"\",\
    \ \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n    let base_index\
    \ = bases.index(base)!\n    let x = x.toInt()\n    let result = x.toInt().toString(base_index)\n\
    \    return result", "    var result = \"\"\n    var remainder: Int\n    var quotient:\
    \ Int\n    var quotientString: String\n    var remainderString: String\n    var\
    \ quotientStringLen: Int\n    var remainderStringLen: Int\n    var quotientStringLen2:\
    \ Int\n    var remainderStringLen2: Int\n    var quotientStringLen3: Int\n   \
    \ var remainderStringLen3: Int\n    var quotientStringLen4: Int\n    var remainderStringLen4:\
    \ Int\n    var quotientStringLen5: Int\n    var remainderStringLen5: Int\n   \
    \ var quotientStringLen6: Int\n    var remainderStringLen6: Int\n    var quotientStringLen7:\
    \ Int\n    var remainderStringLen7: Int\n    var quotientStringLen8: Int\n   \
    \ var remainderStringLen8: Int\n    var quotientStringLen9: Int\n    var remainderStringLen9:\
    \ Int\n    var quotientStringLen10: Int\n    var remainderStringLen10: Int\n \
    \   var quotientStringLen11: Int\n    var remainderStringLen11: Int\n    var quotientStringLen12:\
    \ Int\n    var remainderStringLen12: Int\n    var quotientStringLen13: Int\n \
    \   var remainderStringLen13: Int\n    var quotientStringLen14: Int\n    var remainderStringLen14:\
    \ Int\n    var quotientStringLen15: Int\n    var remainderStringLen15: Int\n \
    \   var quotientStringLen16: Int\n    var remainderStringLen16: Int\n    var quotientStringLen17:\
    \ Int\n    var remainderStringLen17: Int\n    var quotientStringLen18: Int\n \
    \   var remainderStringLen18: Int\n    var quotientStringLen19: Int\n    var remainderStringLen19:\
    \ Int\n    var quotientStringLen20: Int\n    var remainderStringLen20: Int\n \
    \   var quotientStringLen21: Int\n    var remainderStringLen21: Int\n    var quotientStringLen22:\
    \ Int\n    var remainderStringLen22: Int\n    var quotientStringLen23: Int\n \
    \   var remainderStringLen23: Int\n    var quotientStringLen24: Int\n    var remainderStringLen24:\
    \ Int\n    var quotientStringLen25: Int\n    var remainderStringLen25: Int\n \
    \   var quotientStringLen26: Int\n    var remainderStringLen26: Int\n    var quotientStringLen27:\
    \ Int\n    var remainderStringLen27: Int\n    var quotientStringLen28: Int", " \
    \   var result = \"\"\n    var remainder = x\n    var digit = 0\n    while remainder\
    \ > 0 {\n        digit = remainder % base\n        remainder = remainder / base\n\
    \        result = String(digit) + result\n    }\n    return result", "    var\
    \ result = \"\"\n    var remainder = x\n    var digit = 0\n    while remainder\
    \ > 0 {\n        remainder, remainder = remainder / base, digit\n        result\
    \ = String(digit) + result\n        digit++\n    }\n    return result", "    var\
    \ result = \"\"\n    var remainder: Int\n    var quotient: Int\n    var remainder2:\
    \ Int\n    var quotient2: Int\n    var remainder3: Int\n    var quotient3: Int\n\
    \    var remainder4: Int\n    var quotient4: Int\n    var remainder5: Int\n  \
    \  var quotient5: Int\n    var remainder6: Int\n    var quotient6: Int\n    var\
    \ remainder7: Int\n    var quotient7: Int\n    var remainder8: Int\n    var quotient8:\
    \ Int\n    var remainder9: Int\n    var quotient9: Int\n    var remainder10: Int\n\
    \    var quotient10: Int\n    var remainder11: Int\n    var quotient11: Int\n\
    \    var remainder12: Int\n    var quotient12: Int\n    var remainder13: Int\n\
    \    var quotient13: Int\n    var remainder14: Int\n    var quotient14: Int\n\
    \    var remainder15: Int\n    var quotient15: Int\n    var remainder16: Int\n\
    \    var quotient16: Int\n    var remainder17: Int\n    var quotient17: Int\n\
    \    var remainder18: Int\n    var quotient18: Int\n    var remainder19: Int\n\
    \    var quotient19: Int\n    var remainder20: Int\n    var quotient20: Int\n\
    \    var remainder21: Int\n    var quotient21: Int\n    var remainder22: Int\n\
    \    var quotient22: Int\n    var remainder23: Int\n    var quotient23: Int\n\
    \    var remainder24: Int\n    var quotient24: Int\n    var remainder25: Int\n\
    \    var quotient25: Int\n    var remainder26: Int\n    var quotient26: Int\n\
    \    var remainder27: Int\n    var quotient27: Int\n    var remainder28: Int\n\
    \    var quotient28: Int\n    var remainder29: Int\n    var quotient29: Int\n\
    \    var remainder30: Int\n    var quotient30: Int\n    var remainder31: Int\n\
    \    var quotient31: Int\n    var remainder32: Int\n    var quotient32: Int\n\
    \    var remainder33: Int\n    var quotient33: Int\n    var remainder34: Int\n\
    \    var quotient34: Int\n    var remainder35: Int\n    var quotient35: Int\n\
    \    var remainder36: Int\n    var quotient36: Int\n    var remainder37: Int\n\
    \    var quotient37: Int\n", "    var s = \"\"\n    var digits = \"\"\n    var\
    \ baseDigits = \"\"\n    var isNegative = false\n    var isBase10 = false\n  \
    \  var isBase16 = false\n    var isBase2 = false\n    var isBase8 = false\n  \
    \  var isBase16Upper = false\n    var isBase16Uppercase = false\n    var isBase16Lowercase\
    \ = false\n    var isBase16LowercaseUpper = false\n    var isBase16LowercaseUppercase\
    \ = false\n    var isBase16LowercaseLowercase = false\n    var isBase16LowercaseLowercaseUpper\
    \ = false\n    var isBase16LowercaseLowercaseUppercase = false\n    var isBase16LowercaseLowercaseUppercaseUpper\
    \ = false\n    var isBase16LowercaseLowercaseUppercaseUppercase = false\n    var\
    \ isBase16LowercaseLowercaseUppercaseUppercaseUpper = false\n    var isBase16LowercaseLowercaseUppercaseUppercaseUppercase\
    \ = false\n    var isBase16LowercaseLowercaseUppercaseUppercaseUppercaseUpper\
    \ = false\n    var isBase16LowercaseLowercaseUppercaseUppercaseUppercaseUpper\
    \ = false\n    var isBase16LowercaseLowercaseUppercaseUppercaseUppercaseUppercase\
    \ = false\n    var isBase16LowercaseLowercaseUppercaseUppercaseUppercaseUppercaseUpper\
    \ = false\n    var isBase16LowercaseLowercaseUppercaseUppercaseUppercaseUppercaseUpper\
    \ = false\n    var isBase16LowercaseLowercaseUppercaseUppercaseUppercaseUppercaseUpper\
    \ = false\n    var isBase16LowercaseLowercaseUppercaseUppercaseUppercaseUppercaseUpper\
    \ = false\n    var isBase16LowercaseLowercaseUppercaseUppercaseUppercaseUppercaseUpper\
    \ = false\n    var isBase16LowercaseLowercaseUppercaseUppercaseUppercaseUppercaseUpper\
    \ = false\n    var isBase16LowercaseLowercaseUppercaseUppercaseUppercaseUppercaseUpper\
    \ = false\n    var isBase16LowercaseLowercaseUppercaseUppercaseUppercaseUppercaseUpper\
    \ = false\n    var isBase16LowercaseLowercaseUppercaseUppercaseUppercaseUppercaseUpper\
    \ = false\n    var isBase16LowercaseLowercaseUppercaseUppercaseUppercaseUppercaseUpper\
    \ = false\n    var isBase16LowercaseLowercaseUppercaseUppercaseUppercaseUppercaseUpper\
    \ = false\n    var isBase16LowercaseLowercaseUppercaseUppercaseUppercaseUppercaseUppercaseUpper\
    \ = false\n    var isBase16LowercaseLowercaseUppercaseUppercaseUppercaseUppercaseUppercaseUpper\
    \ = false\n    var isBase16LowercaseLowercaseUppercaseUppercaseUppercaseUppercaseUppercaseUpper\
    \ = false\n    var isBase16LowercaseLowercaseUppercaseUpper", "    let bases =\
    \ [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n    let baseIndex\
    \ = bases.index(base)!\n    let result = String(format: \"%0*d\", baseIndex, x)\n\
    \    return result", "    let base10 = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    let base16 = \"0123456789abcdefghijklmnopqrstuvwxyz\"\n    let base16upper\
    \ = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    let base16upper16 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    let base16upper32 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    \n    let base16upper64 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    \n    let base16upper128 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    \n    let base16upper256 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    \n    let base16upper512 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRST",
  "    let bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n\
    \    let baseIndex = bases.index(base)!\n    let result = String(x)\n    if baseIndex\
    \ < 0 {\n        result = \"0\" + result\n    }\n    if baseIndex < 10 {\n   \
    \     return result\n    }\n    let index = result.index(of: \".\")!\n    let\
    \ baseString = result[index...].uppercased()\n    let baseIndex = bases.index(baseString)!\n\
    \    let remainder = result.dropLast()\n    let remainderIndex = remainder.index(of:\
    \ \".\")!\n    let remainderString = remainder[remainderIndex...].uppercased()\n\
    \    let remainderIndex = remainderString.index(of: \"K\")!\n    let remainderString\
    \ = remainderString.remove(at: remainderIndex)\n    let remainderString = remainderString.remove(at:\
    \ remainderIndex + 1)\n    let remainderString = remainderString.remove(at: remainderIndex\
    \ + 2)\n    let remainderString = remainderString.remove(at: remainderIndex +\
    \ 3)\n    let remainderString = remainderString.remove(at: remainderIndex + 4)\n\
    \    let remainderString = remainderString.remove(at: remainderIndex + 5)\n  \
    \  let remainderString = remainderString.remove(at: remainderIndex + 6)\n    let\
    \ remainderString = remainderString.remove(at: remainderIndex + 7)\n    let remainderString\
    \ = remainderString.remove(at: remainderIndex + 8)\n    let remainderString =\
    \ remainderString.remove(at: remainderIndex + 9)\n    let remainderString = remainderString.remove(at:\
    \ remainderIndex + 10)\n    let remainderString = remainderString.remove(at: remainderIndex\
    \ + 11)\n    let remainderString = remainderString.remove(at: remainderIndex +\
    \ 12)\n    let remainderString = remainderString.remove(at: remainderIndex + 13)\n\
    \    let remainderString = remainderString.remove(at: remainderIndex + 14)\n \
    \   let remainderString = remainderString.remove(at: remainderIndex + 15)\n  \
    \  let remainderString = remainderString.remove(at: remainderIndex + 16)\n   \
    \ let remainderString = remainderString.remove(at: remainderIndex + 17)\n    let\
    \ remainderString = remainderString.remove(at: remainderIndex + 18)\n    let remainderString\
    \ = remainderString.remove(at: remainderIndex + 19)\n    let remainderString =\
    \ remainderString.remove(at: remainderIndex + 20)\n    let remainderString = remainderString.remove(at:\
    \ remainderIndex + 21)\n    let remainderString = remainderString.remove(at: remainderIndex\
    \ + 22)\n    let remainderString = remainderString.remove(at", "    var result\
    \ = \"\"\n    var digits = \"\"\n    var power = 1\n    var digit = 0\n    while\
    \ x > 0 {\n        digit = x % base\n        digits = String(digit) + digits\n\
    \        x = x / base\n        power = power * base\n    }\n    if digits == \"\
    \" {\n        result = \"0\"\n    } else {\n        result = String(digits)\n\
    \    }\n    if power != 1 {\n        result = String(power) + result\n    }\n\
    \    return result", "    var result = \"\"\n    var remainder: Int\n    var quotient:\
    \ Int\n    var remainder2: Int\n    var quotient2: Int\n    var remainder3: Int\n\
    \    var quotient3: Int\n    var remainder4: Int\n    var quotient4: Int\n   \
    \ var remainder5: Int\n    var quotient5: Int\n    var remainder6: Int\n    var\
    \ quotient6: Int\n    var remainder7: Int\n    var quotient7: Int\n    var remainder8:\
    \ Int\n    var quotient8: Int\n    var remainder9: Int\n    var quotient9: Int\n\
    \    var remainder10: Int\n    var quotient10: Int\n    var remainder11: Int\n\
    \    var quotient11: Int\n    var remainder12: Int\n    var quotient12: Int\n\
    \    var remainder13: Int\n    var quotient13: Int\n    var remainder14: Int\n\
    \    var quotient14: Int\n    var remainder15: Int\n    var quotient15: Int\n\
    \    var remainder16: Int\n    var quotient16: Int\n    var remainder17: Int\n\
    \    var quotient17: Int\n    var remainder18: Int\n    var quotient18: Int\n\
    \    var remainder19: Int\n    var quotient19: Int\n    var remainder20: Int\n\
    \    var quotient20: Int\n    var remainder21: Int\n    var quotient21: Int\n\
    \    var remainder22: Int\n    var quotient22: Int\n    var remainder23: Int\n\
    \    var quotient23: Int\n    var remainder24: Int\n    var quotient24: Int\n\
    \    var remainder25: Int\n    var quotient25: Int\n    var remainder26: Int\n\
    \    var quotient26: Int\n    var remainder27: Int\n    var quotient27: Int\n\
    \    var remainder28: Int\n    var quotient28: Int\n    var remainder29: Int\n\
    \    var quotient29: Int\n    var remainder30: Int\n    var quotient30: Int\n\
    \    var remainder31: Int\n    var quotient31: Int\n    var remainder32: Int\n\
    \    var quotient32: Int\n    var remainder33: Int\n    var quotient33: Int\n\
    \    var remainder34: Int\n    var quotient34: Int\n    var remainder35: Int\n\
    \    var quotient35: Int\n    var remainder36: Int\n    var quotient36: Int\n\
    \    var remainder37: Int\n    var quotient37: Int\n", "    var result = \"\"\n\
    \    var remainder = x\n    var digit = 0\n    while remainder > 0 {\n       \
    \ remainder, remainder = remainder / base, digit\n        digit = digit + 1\n\
    \    }\n    for _ in 0..digit {\n        result = String(result) + String(digit)\n\
    \    }\n    return result", "    if base < 10 {\n        return String(x)\n  \
    \  }\n    var result = \"\"\n    var remainder = x\n    var digit = 0\n    while\
    \ remainder > 0 {\n        remainder, remainder = remainder / base, digit\n  \
    \      result = String(digit) + result\n        digit++\n    }\n    return result",
  "    let bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n\
    \    let baseIndex = bases.index(base)!\n    let result = x.toInt().toString(baseIndex).padded(baseIndex,\
    \ \"0\")\n    return String(result)", "    let bases = [\"\", \"K\", \"M\", \"\
    G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n    let baseIndex = bases.index(base)!\n\
    \    let baseString = bases[baseIndex]\n    let result = String(format: \"%02.f\"\
    , x / Float(base))\n    return baseString + result", "    if base < 10 {\n   \
    \     return String(x)\n    }\n    var result: String = String(x)\n    var baseDigit:\
    \ Int = 0\n    var baseDigitCount: Int = 0\n    var digit: Int = 0\n    var digitCount:\
    \ Int = 0\n    while baseDigit < base {\n        baseDigit = Int(String(result).characters[baseDigitCount])\n\
    \        baseDigitCount = baseDigitCount + 1\n    }\n    while digit < baseDigit\
    \ {\n        digit = Int(String(result).characters[digitCount])\n        digitCount\
    \ = digitCount + 1\n    }\n    if baseDigit == base {\n        while digit > 0\
    \ {\n            digit = Int(String(result).characters[digitCount])\n        \
    \    digitCount = digitCount + 1\n            result = String(result).substring(digitCount)\n\
    \        }\n    } else {\n        while digit < baseDigit {\n            digit\
    \ = Int(String(result).characters[digitCount])\n            digitCount = digitCount\
    \ + 1\n            result = String(result).substring(digitCount)\n        }\n\
    \    }\n    return result", "    var s = String(x)\n    var base = base\n    var\
    \ digits = \"\"\n    var i = 0\n    while i < s.count {\n        if s[i] == '.'\
    \ {\n            if base == 10 {\n                digits = digits + \"0\"\n  \
    \          } else {\n                digits = digits + \"0\"\n               \
    \ base = base * 10\n            }\n        } else {\n            if base == 10\
    \ {\n                digits = digits + String(s[i])\n            } else {\n  \
    \              digits = digits + String(s[i])\n                base = base * 10\n\
    \            }\n        }\n        i += 1\n    }\n    return digits", "    var\
    \ result = \"\"\n    var remainder: Int\n    var quotient: Int\n    var quotientString:\
    \ String\n    var remainderString: String\n    var quotientStringWithBase: String\n\
    \    var remainderStringWithBase: String\n    var quotientWithBase: String\n \
    \   var remainderWithBase: String\n    var quotientWithBaseAndRemainder: String\n\
    \    var remainderWithBaseAndRemainder: String\n    var quotientWithBaseAndRemainderWithBase:\
    \ String\n    var remainderWithBaseAndRemainderWithBase: String\n    var quotientWithBaseAndRemainderWithBaseAndRemainder:\
    \ String\n    var remainderWithBaseAndRemainderWithBaseAndRemainder: String\n\
    \    var quotientWithBaseAndRemainderWithBaseAndRemainderWithBase: String\n  \
    \  var remainderWithBaseAndRemainderWithBaseAndRemainderWithBase: String\n   \
    \ var quotientWithBaseAndRemainderWithBaseAndRemainderWithBaseAndRemainder: String\n\
    \    var remainderWithBaseAndRemainderWithBaseAndRemainderWithBaseAndRemainder:\
    \ String\n    var quotientWithBaseAndRemainderWithBaseAndRemainderWithBaseAndRemainderWithBase:\
    \ String\n    var remainderWithBaseAndRemainderWithBaseAndRemainderWithBaseAndRemainderWithBase:\
    \ String\n    var quotientWithBaseAndRemainderWithBaseAndRemainderWithBaseAndRemainderWithBaseAndRemainder:\
    \ String\n    var remainderWithBaseAndRemainderWithBaseAndRemainderWithBaseAndRemainderWithBaseAndRemainder:\
    \ String\n    var quotientWithBaseAndRemainderWithBaseAndRemainderWithBaseAndRemainderWithBaseAndRemainderWithBase:\
    \ String\n    var remainderWithBaseAndRemainderWithBaseAndRemainderWithBaseAndRemainderWithBaseAndRemainderWithBase:\
    \ String\n    var quotientWithBaseAndRemainderWithBaseAndRemainderWithBaseAndRemainderWithBaseAndRemainderWithBaseAndRemainder:\
    \ String\n    var remainderWithBaseAndRemainderWithBaseAndRemainderWithBaseAndRemainderWithBaseAndRemainderWithBaseAndRemainder:\
    \ String\n    var quotientWithBaseAndRemainderWithBaseAndRemainderWithBaseAndRemainderWithBaseAndRemainderWithBaseAndRemainderWithBase:\
    \ String\n    var remainderWithBaseAndRemainderWithBaseAndRemainderWithBaseAndRemainderWithBaseAndRemainderWithBaseAndRemainderWithBase:\
    \ String\n    var quotientWithBaseAndRemainderWithBaseAndRemainderWithBaseAndRemainderWithBaseAndRemainderWithBaseAndRemainderWithBaseAndRemainder:\
    \ String", "    let bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"\
    Z\", \"Y\"]\n    let baseIndex = bases.index(base)!\n    let x = x.toInt()\n \
    \   let result = String(x)\n    if x < 0 {\n        result = \"-\" + result\n\
    \    }\n    if baseIndex < result.count {\n        result = result.prefix(baseIndex)\
    \ + bases[baseIndex]\n    }\n    return result", "    var result = \"\"\n    var\
    \ remainder: Int\n    var quotient: Int\n    var quotientString = \"\"\n    var\
    \ remainderString = \"\"\n    var quotientString2 = \"0\"\n    var remainderString2\
    \ = \"0\"\n    var quotientString3 = \"0\"\n    var remainderString3 = \"0\"\n\
    \    var quotientString4 = \"0\"\n    var remainderString4 = \"0\"\n    var quotientString5\
    \ = \"0\"\n    var remainderString5 = \"0\"\n    var quotientString6 = \"0\"\n\
    \    var remainderString6 = \"0\"\n    var quotientString7 = \"0\"\n    var remainderString7\
    \ = \"0\"\n    var quotientString8 = \"0\"\n    var remainderString8 = \"0\"\n\
    \    var quotientString9 = \"0\"\n    var remainderString9 = \"0\"\n    var quotientString10\
    \ = \"0\"\n    var remainderString10 = \"0\"\n    var quotientString11 = \"0\"\
    \n    var remainderString11 = \"0\"\n    var quotientString12 = \"0\"\n    var\
    \ remainderString12 = \"0\"\n    var quotientString13 = \"0\"\n    var remainderString13\
    \ = \"0\"\n    var quotientString14 = \"0\"\n    var remainderString14 = \"0\"\
    \n    var quotientString15 = \"0\"\n    var remainderString15 = \"0\"\n    var\
    \ quotientString16 = \"0\"\n    var remainderString16 = \"0\"\n    var quotientString17\
    \ = \"0\"\n    var remainderString17 = \"0\"\n    var quotientString18 = \"0\"\
    \n    var remainderString18 = \"0\"\n    var quotientString19 = \"0\"\n    var\
    \ remainderString19 = \"0\"\n    var quotientString20 = \"0\"\n    var remainderString20\
    \ = \"0\"\n    var quotientString21 = \"0\"\n    var remainderString21 = \"0\"\
    \n    var quotientString22 = \"0\"\n    var remainderString22 = \"0\"\n    var\
    \ quotientString23 = \"0\"\n    var remainderString23 = \"0\"\n    var quotientString24\
    \ = \"0\"\n    var remainderString24 = \"0\"\n    var quotientString25 = \"0\"\
    \n    var remainderString25 = \"0\"\n    var quotientString26 = \"0\"\n    var\
    \ remainderString26 = \"0\"\n    var quotientString27 = \"0\"\n    var remainderString27\
    \ = \"0\"\n    var quotientString28 = \"0\"\n    var remainderString28 = \"0\"\
    \n    var quotientString29 = \"0\"\n    var remainderString29 = \"0\"\n    var\
    \ quotientString30 = \"0\"\n    var remainderString30 = \"0\"\n    var quotientString31\
    \ = \"0\"\n    var remainderString31 = \"0\"\n", "    if base < 10 {\n       \
    \ return String(x)\n    }\n    var result = \"\"\n    var remainder: Int\n   \
    \ var quotient: Int\n    var digit: Int\n    var i: Int\n    var j: Int\n    var\
    \ k: Int\n    var digits: String\n    var digits_length: Int\n    var digits_length2:\
    \ Int\n    var digits_length3: Int\n    var digits_length4: Int\n    var digits_length5:\
    \ Int\n    var digits_length6: Int\n    var digits_length7: Int\n    var digits_length8:\
    \ Int\n    var digits_length9: Int\n    var digits_length10: Int\n    var digits_length11:\
    \ Int\n    var digits_length12: Int\n    var digits_length13: Int\n    var digits_length14:\
    \ Int\n    var digits_length15: Int\n    var digits_length16: Int\n    var digits_length17:\
    \ Int\n    var digits_length18: Int\n    var digits_length19: Int\n    var digits_length20:\
    \ Int\n    var digits_length21: Int\n    var digits_length22: Int\n    var digits_length23:\
    \ Int\n    var digits_length24: Int\n    var digits_length25: Int\n    var digits_length26:\
    \ Int\n    var digits_length27: Int\n    var digits_length28: Int\n    var digits_length29:\
    \ Int\n    var digits_length30: Int\n    var digits_length31: Int\n    var digits_length32:\
    \ Int\n    var digits_length33: Int\n    var digits_length34: Int\n    var digits_length35:\
    \ Int\n    var digits_length36: Int\n    var digits_length37: Int\n    var digits_length38:\
    \ Int\n    var digits_length39: Int\n    var digits_length40: Int\n    var digits_length41:\
    \ Int\n    var digits_length42: Int\n    var digits_length43: Int\n    var digits_length44:\
    \ Int\n    var digits_length45: Int\n    var digits_length46: Int\n    var digits_length47:\
    \ Int\n    var digits_length48: Int\n    var digits_length49: Int\n    var digits_length50:\
    \ Int\n    var digits_length51: Int\n    var digits_length52: Int\n    var digits_length53:\
    \ Int\n    var digits_length54: Int\n    var digits_length55: Int\n    var digits_length56:\
    \ Int\n    var digits_length57: Int\n    var digits_length58: Int\n    var digit",
  "    var result = \"\"\n    var remainder = x\n    var digits = base\n    while\
    \ remainder > 0 {\n        remainder, remainder = remainder / base, digits\n \
    \       digits = digits * base\n    }\n    while digits > 0 {\n        result\
    \ = String(digits % base) + result\n        digits = digits / base\n    }\n  \
    \  return result", "    let base10 = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\
    \    let base16 = \"0123456789abcdefghijklmnopqrstuvwxyz\"\n    let base26 = \"\
    0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\n    let base32\
    \ = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    let\
    \ base36 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    \n    let base41 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    let base48 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    \n    let base56 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    let base61 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    \n    let base68 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdef",
  "    if base < 10 {\n        return String(x)\n    }\n    var result = \"\"\n  \
    \  var remainder = x\n    var divisor = base\n    while remainder > 0 {\n    \
    \    remainder, remainder = remainder / divisor, base\n        divisor *= base\n\
    \    }\n    while divisor > 0 {\n        result = \"\\(divisor)\" + result\n \
    \       divisor = divisor / base\n    }\n    return result", "    let bases =\
    \ Array(1...base)\n    let digits = x.toString(bases)\n    return digits", " \
    \   let bases = [\n        \"0\": \"0\",\n        \"1\": \"1\",\n        \"2\"\
    : \"10\",\n        \"3\": \"100\",\n        \"4\": \"1000\",\n        \"5\": \"\
    10000\",\n        \"6\": \"100000\",\n        \"7\": \"1000000\",\n        \"\
    8\": \"10000000\",\n        \"9\": \"100000000\",\n        \"10\": \"1000000000\"\
    ,\n        \"11\": \"10000000000\",\n        \"12\": \"100000000000\",\n     \
    \   \"13\": \"1000000000000\",\n        \"14\": \"10000000000000\",\n        \"\
    15\": \"100000000000000\",\n        \"16\": \"1000000000000000\",\n        \"\
    17\": \"10000000000000000\",\n        \"18\": \"100000000000000000\",\n      \
    \  \"19\": \"1000000000000000000\",\n        \"20\": \"10000000000000000000\"\
    ,\n        \"21\": \"100000000000000000000\",\n        \"22\": \"1000000000000000000000\"\
    ,\n        \"23\": \"10000000000000000000000\",\n        \"24\": \"100000000000000000000000\"\
    ,\n        \"25\": \"1000000000000000000000000\",\n        \"26\": \"10000000000000000000000000\"\
    ,\n        \"27\": \"100000000000000000000000000\",\n        \"28\": \"1000000000000000000000000000\"\
    ,\n        \"29\": \"10000000000000000000000000000\",\n        \"30\": \"100000000000000000000000000000\"\
    ,\n        \"31\": \"1000000000000000000000000000000\",\n        \"32\": \"10000000000000000000000000000000\"\
    ,\n        \"33\": \"100000000000000000000000000000000\",\n        \"34\": \"\
    1000000000000000000000000000000000\",\n        \"35\": \"1000000000000000000000000000000000\"\
    ,\n        \"36\": \"1000000000000000000000000000000000\",\n        \"37\": \"\
    1000000000000000000000000000000000\",\n        \"38\": \"1000000000000000000000000000000000\"\
    ,\n        \"39\": \"1000000000000000000000000000000000\",\n        \"40\": \"\
    1000000000000000000000000000000000\",\n        \"41\": \"1000000000000000000000000000000000\"\
    ,\n        \"42\": \"1000000000000000000000000000000000\",\n        \"43\": \"\
    1000000000000000000000000000000000\",\n        \"44\": \"1000000000000000000000000000000000\"\
    ,\n        \"45\": \"1000000000000000000000000000000000\",\n        \"46\": \"\
    1000000000000000000000000000000000\",\n        \"47\": \"1000000000000000000000000000000000\"\
    ,\n        \"48\": \"1000000000000000000000000000000000\",\n        \"49\": \"\
    1000000000000000000000000000000000\",\n        \"50\": \"1000000000000000000000000000000000\"\
    ,\n        \"51\": \"1000000000000000000000000000000000\",\n        \"52\": \"\
    1000000000000000000000000000000000\",\n        \"53\": \"1000000000000000000000000000000000\"\
    ,\n        \"54\": \"1000000000000000000000000000000000\",\n        \"55\": \"\
    1000000000000000000000000000000000\",\n        \"56\": \"1000000000000000000000000000000000\"\
    ,\n        \"57\": \"1000000000000000000000000000000000\",\n        \"58\": \"\
    1000000000000000000000000000000000\",\n        \"59\": \"1000000000000000000000000000000000\"\
    ,\n        \"60\": \"1000000000000000000000000000000000\",\n        \"61\": \"\
    1000000000000000000000000000000000\",\n        \"62\": \"1000000000000000000000000000000000\"\
    ,", "    if base < 10 {\n        return String(x)\n    }\n    var result = \"\"\
    \n    var remainder = x\n    var digit = 0\n    while remainder > 0 {\n      \
    \  remainder, remainder = remainder / base, digit\n        result = String(digit)\
    \ + result\n        digit++\n    }\n    return result", "    var s = String(x)\n\
    \    var base = base\n    var base10 = 10\n    var base2 = 2\n    var base8 =\
    \ 8\n    var base16 = 16\n    var base32 = 32\n    var base64 = 64\n    var base128\
    \ = 128\n    var base256 = 256\n    var base512 = 512\n    var base1024 = 1024\n\
    \    var base2048 = 2048\n    var base4096 = 4096\n    var base8192 = 32768\n\
    \    var base16384 = 65536\n    var base32768 = 131072\n    var base65536 = 262144\n\
    \    var base131072 = 1048576\n    var base262144 = 2097152\n    var base524288\
    \ = 4194304\n    var base1048576 = 8388608\n    var base2097152 = 16777216\n \
    \   var base4194304 = 33554432\n    var base8388608 = 67108864\n    var base16777216\
    \ = 134217728\n    var base33554432 = 268435456\n    var base67108864 = 67108896\n\
    \    var base134217728 = 1374389536\n    var base268435456 = 671088160\n    var\
    \ base671088160 = 268435456\n    var base1374389536 = 671088384\n    var base26843545600\
    \ = 671088640\n    var base6710886400 = 2684354560\n    var base137438953600 =\
    \ 671088832\n    var base268435456000 = 671088832\n    var base67108883200 = 26843545600\n\
    \    var base1374389536000 = 671088832000\n    var base2684354560000 = 6710888320000\n\
    \    var base6710888320000 = 268435456000\n    var base13743895360000 = 67108883200000\n\
    \    var base26843545600000 = 671088832000000\n    var base671088832000000 = 26843545600000\n\
    \    var base1374389536000000 = 6710888320000000\n    var base2684354560000000\
    \ = 67108883200000000\n    var base67108883200000000 = 26843545600000000\n   \
    \ var base137438953600000000 = 671088832000000000\n    var base268435456000000000\
    \ = 6710888320000000000\n    var base6710888320000000000 = 2684", "    var result\
    \ = \"\"\n    var remainder = x\n    var digit = 0\n    while remainder > 0 {\n\
    \        digit = remainder % base\n        remainder = remainder / base\n    \
    \    result = String(digit) + result\n    }\n    return result", "    if base\
    \ < 10 {\n        return String(x)\n    }\n    var result = \"\"\n    var remainder\
    \ = x\n    var digit = base\n    while remainder > 0 {\n        remainder, remainder\
    \ = remainder / digit, digit\n        digit--\n    }\n    while digit > 0 {\n\
    \        result = String(digit) + result\n        digit--\n    }\n    return result",
  "    if base < 10 {\n        return String(x)\n    }\n    var res = String(x)\n\
    \    var power = 1\n    var digit = 0\n    while power < base {\n        digit\
    \ = x / power\n        digit = digit.truncatingRemainder(base)\n        res =\
    \ \"\\(digit)\\(res)\\(power)\"\n        power += 1\n    }\n    return res", " \
    \   if base < 10 {\n        return String(x)\n    }\n    var result = \"\"\n \
    \   var remainder = x\n    var digits = base\n    while remainder > 0 {\n    \
    \    remainder, remainder = remainder / base, digits\n        digits = digits\
    \ * base\n    }\n    while digits > 0 {\n        result = String(digits % base)\
    \ + result\n        digits = digits / base\n    }\n    return result", "    let\
    \ bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n   \
    \ let baseIndex = bases.index(base)!\n    let result = String(Int(x) / Int(base))\n\
    \    if Int(result) == 0 {\n        return \"\"\n    }\n    return bases[baseIndex]\
    \ + result", "    let bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\"\
    , \"Z\", \"Y\"]\n    let baseIndex = bases.index(base)!\n    let result = x.truncatingRemainder(dividingBy:\
    \ pow(10.0, Double(baseIndex)))\n    return String(result) + bases[baseIndex]",
  "    var result = \"\"\n    var remainder: Int\n    var digit: Int\n    var digits:\
    \ String\n\n    if base < 2 {\n        return \"\"\n    }\n\n    if base == 10\
    \ {\n        digits = \"0123456789\"\n    } else {\n        digits = \"0123456789abcdefghijklmnopqrstuvwxyz\"\
    \n    }\n\n    while x >= base {\n        remainder = x % base\n        digit\
    \ = digits[remainder]\n        result = digit + result\n        x = x / base\n\
    \    }\n\n    if x != 0 {\n        digit = digits[x]\n        result = digit +\
    \ result\n    }\n\n    return result", "    var result = \"\"\n    var remainder\
    \ = x\n    var digit = 0\n    while remainder > 0 {\n        digit = remainder\
    \ % base\n        remainder = remainder / base\n        result = String(digit)\
    \ + result\n    }\n    return result", "    let bases = [\"\", \"K\", \"M\", \"\
    G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n    let base_index = bases.index(base)!\n\
    \    let result = String(Int(x) / Int(base))\n    if result < 0 {\n        result\
    \ = \"-\" + result\n    }\n    return result + bases[base_index]", "    let bases\
    \ = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n    let baseIndex\
    \ = bases.index(base)!\n    let baseString = bases[baseIndex]\n    let result\
    \ = String(x)\n    if baseIndex == 0 {\n        return result + baseString\n \
    \   }\n    let remainder = x % base\n    let quotient = x / base\n    return change_base(remainder,\
    \ baseIndex) + baseString + change_base(quotient, baseIndex)", "    var result\
    \ = \"\"\n    var remainder: Int\n    var quotient: Int\n    var quotientString\
    \ = \"\"\n    var remainderString = \"\"\n    var quotientString2 = \"0\"\n  \
    \  var remainderString2 = \"0\"\n    var quotientString3 = \"0\"\n    var remainderString3\
    \ = \"0\"\n    var quotientString4 = \"0\"\n    var remainderString4 = \"0\"\n\
    \    var quotientString5 = \"0\"\n    var remainderString5 = \"0\"\n    var quotientString6\
    \ = \"0\"\n    var remainderString6 = \"0\"\n    var quotientString7 = \"0\"\n\
    \    var remainderString7 = \"0\"\n    var quotientString8 = \"0\"\n    var remainderString8\
    \ = \"0\"\n    var quotientString9 = \"0\"\n    var remainderString9 = \"0\"\n\
    \    var quotientString10 = \"0\"\n    var remainderString10 = \"0\"\n    var\
    \ quotientString11 = \"0\"\n    var remainderString11 = \"0\"\n    var quotientString12\
    \ = \"0\"\n    var remainderString12 = \"0\"\n    var quotientString13 = \"0\"\
    \n    var remainderString13 = \"0\"\n    var quotientString14 = \"0\"\n    var\
    \ remainderString14 = \"0\"\n    var quotientString15 = \"0\"\n    var remainderString15\
    \ = \"0\"\n    var quotientString16 = \"0\"\n    var remainderString16 = \"0\"\
    \n    var quotientString17 = \"0\"\n    var remainderString17 = \"0\"\n    var\
    \ quotientString18 = \"0\"\n    var remainderString18 = \"0\"\n    var quotientString19\
    \ = \"0\"\n    var remainderString19 = \"0\"\n    var quotientString20 = \"0\"\
    \n    var remainderString20 = \"0\"\n    var quotientString21 = \"0\"\n    var\
    \ remainderString21 = \"0\"\n    var quotientString22 = \"0\"\n    var remainderString22\
    \ = \"0\"\n    var quotientString23 = \"0\"\n    var remainderString23 = \"0\"\
    \n    var quotientString24 = \"0\"\n    var remainderString24 = \"0\"\n    var\
    \ quotientString25 = \"0\"\n    var remainderString25 = \"0\"\n    var quotientString26\
    \ = \"0\"\n    var remainderString26 = \"0\"\n    var quotientString27 = \"0\"\
    \n    var remainderString27 = \"0\"\n    var quotientString28 = \"0\"\n    var\
    \ remainderString28 = \"0\"\n    var quotientString29 = \"0\"\n    var remainderString29\
    \ = \"0\"\n    var quotientString30 = \"0\"\n    var remainderString30 = \"0\"\
    \n    var quotientString31 = \"0\"\n    var remainderString31 = \"0\"\n", "  \
    \  let bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n\
    \    let base_index = bases.firstIndex(of: base)!\n    let result = String(Int(x)\
    \ / Int(bases[base_index]))\n    return result", "    var result = \"\"\n    var\
    \ remainder: Int\n    var quotient: Int\n    var quotientString = \"\"\n    var\
    \ remainderString = \"\"\n    var quotientStringWithBase = \"\"\n    var remainderStringWithBase\
    \ = \"\"\n    var quotientStringWithBaseWithBase = \"\"\n    var remainderStringWithBaseWithBase\
    \ = \"\"\n    var quotientStringWithBaseWithBaseWithBase = \"\"\n    var remainderStringWithBaseWithBaseWithBase\
    \ = \"\"\n    var quotientStringWithBaseWithBaseWithBaseWithBase = \"\"\n    var\
    \ remainderStringWithBaseWithBaseWithBaseWithBase = \"\"\n    var quotientStringWithBaseWithBaseWithBaseWithBaseWithBase\
    \ = \"\"\n    var remainderStringWithBaseWithBaseWithBaseWithBaseWithBase = \"\
    \"\n    var quotientStringWithBaseWithBaseWithBaseWithBaseWithBaseWithBase = \"\
    \"\n    var remainderStringWithBaseWithBaseWithBaseWithBaseWithBaseWithBase =\
    \ \"\"\n    var quotientStringWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBase\
    \ = \"\"\n    var remainderStringWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBase\
    \ = \"\"\n    var quotientStringWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBase\
    \ = \"\"\n    var remainderStringWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBase\
    \ = \"\"\n    var quotientStringWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBase\
    \ = \"\"\n    var remainderStringWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBase\
    \ = \"\"\n    var quotientStringWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBase\
    \ = \"\"\n    var remainderStringWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBase\
    \ = \"\"\n    var quotientStringWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBase\
    \ = \"\"\n    var remainderStringWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBase\
    \ = \"\"\n    var quotientStringWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBase\
    \ = \"\"\n    var remainderStringWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBase",
  "    let base10 = \"0123456789ABCDEF\"\n    let base16 = \"0123456789ABCDEF\"\n\
    \    let base16upper = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    let base16lower\
    \ = \"0123456789abcdefghijklmnopqrstuvwxyz\"\n    let base32 = \"0123456789ABCDEFGHJKMNPQRSTVWXYZ234567\"\
    \n    let base32upper = \"0123456789ABCDEFGHJKMNPQRSTVWXYZ234567\"\n    let base32lower\
    \ = \"0123456789abcdefghijkmnopqrstuvwxyz234567\"\n    let base36 = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    let base36upper = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    let base36lower\
    \ = \"0123456789abcdefghijklmnopqrstuvwxyz\"\n    let base48 = \"0123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\
    \n    let base48upper = \"0123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\
    \n    let base48lower = \"0123456789abcdefghijklmnopqrstuvwxyzabcdefghijkmnopqrstuvwxyz\"\
    \n    let base62 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    let base62upper = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    let base62lower = \"0123456789abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"\
    \n    let base64 = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"\
    \n    let base64upper = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"\
    \n    let base64lower = \"0123456789abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz0123456789\"\
    \n    let base9 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    let base9upper = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRST",
  "    if base < 10 {\n        return \"\"\n    }\n    var result = \"\"\n    var\
    \ remainder = x\n    var digit = 0\n    while remainder > 0 {\n        remainder,\
    \ remainder = remainder / base, digit\n        digit = digit * base\n    }\n \
    \   if digit > 0 {\n        result = String(digit) + result\n    }\n    return\
    \ result", "    var result = \"\"\n    var remainder: Int\n    var quotient: Int\n\
    \    var quotientString: String\n    var remainderString: String\n    var baseString:\
    \ String\n    var baseStringString: String\n    var baseStringStringString: String\n\
    \    var baseStringStringStringString: String\n    var baseStringStringStringStringString:\
    \ String\n    var baseStringStringStringStringStringString: String\n    var baseStringStringStringStringStringStringString:\
    \ String\n    var baseStringStringStringStringStringStringStringString: String\n\
    \    var baseStringStringStringStringStringStringStringStringString: String\n\
    \    var baseStringStringStringStringStringStringStringStringStringString: String\n\
    \    var baseStringStringStringStringStringStringStringStringStringStringString:\
    \ String\n    var baseStringStringStringStringStringStringStringStringStringStringString:\
    \ String\n    var baseStringStringStringStringStringStringStringStringStringStringStringString:\
    \ String\n    var baseStringStringStringStringStringStringStringStringStringStringStringString:\
    \ String\n    var baseStringStringStringStringStringStringStringStringStringStringStringString:\
    \ String\n    var baseStringStringStringStringStringStringStringStringStringStringStringStringString:\
    \ String\n    var baseStringStringStringStringStringStringStringStringStringStringStringStringString:\
    \ String\n    var baseStringStringStringStringStringStringStringStringStringStringStringStringStringString:\
    \ String\n    var baseStringStringStringStringStringStringStringStringStringStringStringStringStringStringString:\
    \ String\n    var baseStringStringStringStringStringStringStringStringStringStringStringStringStringString:\
    \ String\n    var baseStringStringStringStringStringStringStringStringStringStringStringStringStringStringString:\
    \ String\n    var baseStringStringStringStringStringStringStringStringStringStringStringStringStringStringString:\
    \ String\n    var baseStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringString:\
    \ String\n    var baseStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringString:\
    \ String\n    var baseStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringString:\
    \ String\n    var baseStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringString:\
    \ String\n    var baseStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringString:\
    \ String\n    var baseStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringString:\
    \ String\n    var baseStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringString:\
    \ String\n    var baseStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringString:\
    \ String\n    var baseStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringString:\
    \ String", "    var result = \"\"\n    var remainder: Int\n    var quotient: Int\n\
    \    var quotientString: String\n    var remainderString: String\n    var quotientStringLen:\
    \ Int\n    var remainderStringLen: Int\n    var quotientStringLen2: Int\n    var\
    \ remainderStringLen2: Int\n    var quotientStringLen3: Int\n    var remainderStringLen3:\
    \ Int\n    var quotientStringLen4: Int\n    var remainderStringLen4: Int\n   \
    \ var quotientStringLen5: Int\n    var remainderStringLen5: Int\n    var quotientStringLen6:\
    \ Int\n    var remainderStringLen6: Int\n    var quotientStringLen7: Int\n   \
    \ var remainderStringLen7: Int\n    var quotientStringLen8: Int\n    var remainderStringLen8:\
    \ Int\n    var quotientStringLen9: Int\n    var remainderStringLen9: Int\n   \
    \ var quotientStringLen10: Int\n    var remainderStringLen10: Int\n    var quotientStringLen11:\
    \ Int\n    var remainderStringLen11: Int\n    var quotientStringLen12: Int\n \
    \   var remainderStringLen12: Int\n    var quotientStringLen13: Int\n    var remainderStringLen13:\
    \ Int\n    var quotientStringLen14: Int\n    var remainderStringLen14: Int\n \
    \   var quotientStringLen15: Int\n    var remainderStringLen15: Int\n    var quotientStringLen16:\
    \ Int\n    var remainderStringLen16: Int\n    var quotientStringLen17: Int\n \
    \   var remainderStringLen17: Int\n    var quotientStringLen18: Int\n    var remainderStringLen18:\
    \ Int\n    var quotientStringLen19: Int\n    var remainderStringLen19: Int\n \
    \   var quotientStringLen20: Int\n    var remainderStringLen20: Int\n    var quotientStringLen21:\
    \ Int\n    var remainderStringLen21: Int\n    var quotientStringLen22: Int\n \
    \   var remainderStringLen22: Int\n    var quotientStringLen23: Int\n    var remainderStringLen23:\
    \ Int\n    var quotientStringLen24: Int\n    var remainderStringLen24: Int\n \
    \   var quotientStringLen25: Int\n    var remainderStringLen25: Int\n    var quotientStringLen26:\
    \ Int\n    var remainderStringLen26: Int\n    var quotientStringLen27: Int\n \
    \   var remainderStringLen27: Int\n    var quotientStringLen28: Int", "    var\
    \ result = \"\"\n    var remainder: Int\n    var quotient: Int\n    var remainder2:\
    \ Int\n    var quotient2: Int\n    var remainder3: Int\n    var quotient3: Int\n\
    \    var remainder4: Int\n    var quotient4: Int\n    var remainder5: Int\n  \
    \  var quotient5: Int\n    var remainder6: Int\n    var quotient6: Int\n    var\
    \ remainder7: Int\n    var quotient7: Int\n    var remainder8: Int\n    var quotient8:\
    \ Int\n    var remainder9: Int\n    var quotient9: Int\n    var remainder10: Int\n\
    \    var quotient10: Int\n    var remainder11: Int\n    var quotient11: Int\n\
    \    var remainder12: Int\n    var quotient12: Int\n    var remainder13: Int\n\
    \    var quotient13: Int\n    var remainder14: Int\n    var quotient14: Int\n\
    \    var remainder15: Int\n    var quotient15: Int\n    var remainder16: Int\n\
    \    var quotient16: Int\n    var remainder17: Int\n    var quotient17: Int\n\
    \    var remainder18: Int\n    var quotient18: Int\n    var remainder19: Int\n\
    \    var quotient19: Int\n    var remainder20: Int\n    var quotient20: Int\n\
    \    var remainder21: Int\n    var quotient21: Int\n    var remainder22: Int\n\
    \    var quotient22: Int\n    var remainder23: Int\n    var quotient23: Int\n\
    \    var remainder24: Int\n    var quotient24: Int\n    var remainder25: Int\n\
    \    var quotient25: Int\n    var remainder26: Int\n    var quotient26: Int\n\
    \    var remainder27: Int\n    var quotient27: Int\n    var remainder28: Int\n\
    \    var quotient28: Int\n    var remainder29: Int\n    var quotient29: Int\n\
    \    var remainder30: Int\n    var quotient30: Int\n    var remainder31: Int\n\
    \    var quotient31: Int\n    var remainder32: Int\n    var quotient32: Int\n\
    \    var remainder33: Int\n    var quotient33: Int\n    var remainder34: Int\n\
    \    var quotient34: Int\n    var remainder35: Int\n    var quotient35: Int\n\
    \    var remainder36: Int\n    var quotient36: Int\n    var remainder37: Int\n\
    \    var quotient37: Int\n", "    var result = \"\"\n    var remainder: Int\n\
    \    var quotient: Int\n    var remainder2: Int\n    var quotient2: Int\n    var\
    \ remainder3: Int\n    var quotient3: Int\n    var remainder4: Int\n    var quotient4:\
    \ Int\n    var remainder5: Int\n    var quotient5: Int\n    var remainder6: Int\n\
    \    var quotient6: Int\n    var remainder7: Int\n    var quotient7: Int\n   \
    \ var remainder8: Int\n    var quotient8: Int\n    var remainder9: Int\n    var\
    \ quotient9: Int\n    var remainder10: Int\n    var quotient10: Int\n    var remainder11:\
    \ Int\n    var quotient11: Int\n    var remainder12: Int\n    var quotient12:\
    \ Int\n    var remainder13: Int\n    var quotient13: Int\n    var remainder14:\
    \ Int\n    var quotient14: Int\n    var remainder15: Int\n    var quotient15:\
    \ Int\n    var remainder16: Int\n    var quotient16: Int\n    var remainder17:\
    \ Int\n    var quotient17: Int\n    var remainder18: Int\n    var quotient18:\
    \ Int\n    var remainder19: Int\n    var quotient19: Int\n    var remainder20:\
    \ Int\n    var quotient20: Int\n    var remainder21: Int\n    var quotient21:\
    \ Int\n    var remainder22: Int\n    var quotient22: Int\n    var remainder23:\
    \ Int\n    var quotient23: Int\n    var remainder24: Int\n    var quotient24:\
    \ Int\n    var remainder25: Int\n    var quotient25: Int\n    var remainder26:\
    \ Int\n    var quotient26: Int\n    var remainder27: Int\n    var quotient27:\
    \ Int\n    var remainder28: Int\n    var quotient28: Int\n    var remainder29:\
    \ Int\n    var quotient29: Int\n    var remainder30: Int\n    var quotient30:\
    \ Int\n    var remainder31: Int\n    var quotient31: Int\n    var remainder32:\
    \ Int\n    var quotient32: Int\n    var remainder33: Int\n    var quotient33:\
    \ Int\n    var remainder34: Int\n    var quotient34: Int\n    var remainder35:\
    \ Int\n    var quotient35: Int\n    var remainder36: Int\n    var quotient36:\
    \ Int\n    var remainder37: Int\n    var quotient37: Int\n", "    var result =\
    \ \"\"\n    var remainder = x\n    var digits = \"\"\n    var baseDigits = \"\"\
    \n    var baseDigitCount = 0\n    var digitCount = 0\n    var digitBase = 0\n\
    \    var digitBaseCount = 0\n    var digitBaseDigitCount = 0\n    var digitBaseDigit\
    \ = \"\"\n    var digitBaseDigitCount = 0\n    var digitBaseDigit = \"\"\n   \
    \ var digitBaseDigitCount = 0\n    var digitBaseDigit = \"\"\n    var digitBaseDigitCount\
    \ = 0\n    var digitBaseDigit = \"\"\n    var digitBaseDigitCount = 0\n    var\
    \ digitBaseDigit = \"\"\n    var digitBaseDigitCount = 0\n    var digitBaseDigit\
    \ = \"\"\n    var digitBaseDigitCount = 0\n    var digitBaseDigit = \"\"\n   \
    \ var digitBaseDigitCount = 0\n    var digitBaseDigit = \"\"\n    var digitBaseDigitCount\
    \ = 0\n    var digitBaseDigit = \"\"\n    var digitBaseDigitCount = 0\n    var\
    \ digitBaseDigit = \"\"\n    var digitBaseDigitCount = 0\n    var digitBaseDigit\
    \ = \"\"\n    var digitBaseDigitCount = 0\n    var digitBaseDigit = \"\"\n   \
    \ var digitBaseDigitCount = 0\n    var digitBaseDigit = \"\"\n    var digitBaseDigitCount\
    \ = 0\n    var digitBaseDigit = \"\"\n    var digitBaseDigitCount = 0\n    var\
    \ digitBaseDigit = \"\"\n    var digitBaseDigitCount = 0\n    var digitBaseDigit\
    \ = \"\"\n    var digitBaseDigitCount = 0\n    var digitBaseDigit = \"\"\n   \
    \ var digitBaseDigitCount = 0\n    var digitBaseDigit = \"\"\n    var digitBaseDigitCount\
    \ = 0\n    var digitBaseDigit = \"\"\n    var digitBaseDigitCount = 0\n    var\
    \ digitBaseDigit = \"\"\n    var digitBaseDigitCount = 0\n    var digitBaseDigit\
    \ = \"\"\n    var digitBaseDigitCount = 0\n    var digitBaseDigit = \"\"\n   \
    \ var digitBaseDigitCount = 0\n    var digitBaseDigit = \"\"\n    var digitBaseDigitCount\
    \ = 0\n    var digitBaseDigit = \"\"\n    var digitBaseDigitCount = 0\n    var\
    \ digitBaseDigit = \"\"\n    var digitBaseDigitCount = 0\n    var digitBaseDigit\
    \ = \"\"\n    var digitBaseDigitCount = 0\n    var digitBaseDigit = \"\"\n   \
    \ var digitBaseDigitCount = 0\n    var digitBaseDigit = \"\"\n    var digitBaseDigitCount\
    \ = 0\n    var digitBaseDigit = \"\"\n    var digitBaseDigitCount = 0\n    var\
    \ digitBaseDigit = \"\"\n    var digitBaseDigitCount = 0\n    var digitBaseDigit\
    \ = \"\"\n    var digitBaseDigitCount = 0\n    var digitBaseDigit = \"\"\n   \
    \ var digitBaseDigitCount = 0\n    var digitBaseDigit = \"\"\n    var digitBaseDigitCount\
    \ = 0\n    var digitBaseDigit = \"\"\n    var digitBaseDigitCount = 0\n    var\
    \ digitBaseDigit = \"\"\n    var digitBaseDigitCount = 0\n    var digitBaseDigit\
    \ = \"\"\n    var digit", "    var result = \"\"\n    var remainder: Int\n   \
    \ var quotient: Int\n    var quotientString: String\n    var remainderString:\
    \ String\n    var quotientStringDigit: String\n    var remainderStringDigit: String\n\
    \    var quotientStringDigitBase: String\n    var remainderStringDigitBase: String\n\
    \    var quotientStringDigitBaseBase: String\n    var remainderStringDigitBaseBase:\
    \ String\n    var quotientStringDigitBaseBaseBase: String\n    var remainderStringDigitBaseBaseBase:\
    \ String\n    var quotientStringDigitBaseBaseBase: String\n    var remainderStringDigitBaseBaseBase:\
    \ String\n    var quotientStringDigitBaseBaseBase: String\n    var remainderStringDigitBaseBaseBase:\
    \ String\n    var quotientStringDigitBaseBaseBase: String\n    var remainderStringDigitBaseBaseBase:\
    \ String\n    var quotientStringDigitBaseBaseBase: String\n    var remainderStringDigitBaseBaseBase:\
    \ String\n    var quotientStringDigitBaseBaseBase: String\n    var remainderStringDigitBaseBaseBase:\
    \ String\n    var quotientStringDigitBaseBaseBase: String\n    var remainderStringDigitBaseBaseBase:\
    \ String\n    var quotientStringDigitBaseBaseBase: String\n    var remainderStringDigitBaseBaseBase:\
    \ String\n    var quotientStringDigitBaseBaseBase: String\n    var remainderStringDigitBaseBaseBase:\
    \ String\n    var quotientStringDigitBaseBaseBase: String\n    var remainderStringDigitBaseBaseBase:\
    \ String\n    var quotientStringDigitBaseBaseBase: String\n    var remainderStringDigitBaseBaseBase:\
    \ String\n    var quotientStringDigitBaseBaseBase: String\n    var remainderStringDigitBaseBaseBase:\
    \ String\n    var quotientStringDigitBaseBaseBase: String\n    var remainderStringDigitBaseBaseBase:\
    \ String\n    var quotientStringDigitBaseBaseBase: String\n    var remainderStringDigitBaseBaseBase:\
    \ String\n    var quotientStringDigitBaseBaseBase: String\n    var remainderStringDigitBaseBaseBase:\
    \ String\n    var quotientStringDigitBaseBaseBase: String\n    var remainderStringDigitBaseBaseBase:\
    \ String\n    var quotientStringDigitBaseBaseBase: String\n    var remainderStringDigitBaseBaseBase:\
    \ String\n    var quotientStringDigitBaseBaseBase: String\n    var remainderStringDigitBaseBaseBase:\
    \ String\n    var quotientStringDigitBaseBaseBase: String\n    var remainderStringDigitBaseBaseBase:\
    \ String\n    var quotientStringDigitBaseBaseBase: String\n    var remainderStringDigitBaseBaseBase:\
    \ String\n    var quotientStringDigitBaseBaseBase: String\n    var remainderStringDigitBaseBaseBase:\
    \ String\n    var quotientStringDigitBaseBaseBase: String\n    var remainderStringDigitBase",
  "    let bases = String((base).digits)\n    let digits = String((x).digits)\n  \
    \  var result = \"\"\n    for index in 0..<digits.count {\n        let digit =\
    \ digits[index]\n        let baseIndex = bases.index(of: digit)\n        if baseIndex\
    \ == -1 {\n            result += digit\n        } else {\n            result +=\
    \ digits[baseIndex]\n        }\n    }\n    return result", "    let bases = [\"\
    \", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n    let baseIndex\
    \ = bases.index(base)!\n    let result = String(Int(x / bases[baseIndex]) * bases[baseIndex])\n\
    \    return result", "    let digits = x.digits\n    let baseDigits = base.digits\n\
    \    let baseDigitCount = base.digitCount\n    var result = \"\"\n    var i =\
    \ 0\n    while i < digitCount {\n        let digit = digits[i]\n        let baseDigit\
    \ = baseDigits[i]\n        if digit < baseDigit {\n            result += String(digit)\n\
    \        } else {\n            result += String(baseDigit)\n        }\n      \
    \  i += 1\n    }\n    return result", "    let bases = [\"\", \"K\", \"M\", \"\
    B\", \"T\", \"Qa\", \"Qi\", \"Qo\", \"Qu\", \"Ra\", \"Ri\", \"Ro\", \"Ru\", \"\
    Rh\", \"P\", \"E\", \"Z\", \"Y\"]\n    let baseIndex = bases.index(base)!\n  \
    \  let x = x.toInt()\n    let result = x.toInt()\n    let result = result / baseIndex\n\
    \    let result = result * baseIndex\n    let result = result + baseIndex\n  \
    \  return String(result)", "    if base < 10 {\n        return String(x)\n   \
    \ }\n    var result = \"\"\n    var remainder = x\n    var digit = 0\n    while\
    \ remainder > 0 {\n        remainder, remainder = remainder / base, digit\n  \
    \      digit = digit * base\n    }\n    if digit > 0 {\n        result = String(digit)\
    \ + result\n    }\n    return result", "    let base_to_string: [String] = [\"\
    0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"\
    B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"\
    M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"\
    X\", \"Y\", \"Z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    let base_to_int: [Int] = [10,\
    \ 2, 8, 1, 6, 3, 10, 2, 8, 1, 6, 3, 10, 2, 8, 1, 6, 3, 10, 2, 8, 1, 6, 3, 10,\
    \ 2, 8, 1, 6, 3, 10, 2, 8, 1, 6, 3, 10, 2, 8, 1, 6, 3, 10, 2, 8, 1, 6, 3, 10,\
    \ 2, 8, 1, 6, 3, 10, 2, 8, 1, 6, 3, 10, 2, 8, 1, 6, 3, 10, 2, 8, 1, 6, 3, 10,\
    \ 2, 8, 1, 6, 3, 10, 2, 8, 1, 6, 3, 10, 2, 8, 1, 6, 3, 10, 2, 8, 1, 6, 3, 10,\
    \ 2, 8, 1, 6, 3, 10, 2, 8, 1, 6, 3, 10, 2, 8, 1, 6, 3, 10, 2, 8, 1, 6, 3, 10,\
    \ 2, 8, 1, 6, 3, 10, 2, 8, 1, 6, 3, 10, 2, 8, 1, 6, 3, 10, 2, 8, 1, 6, 3, 10,\
    \ 2, 8, 1, 6, 3, 10, 2, 8, 1, 6, 3, 10, 2, 8, 1, 6, 3, 10, 2, 8, 1, 6, 3, 10,\
    \ 2, 8, 1, 6, 3, 10, 2, 8, 1, 6, 3, 10, 2, 8, 1, 6, 3, 10, 2, 8, 1, 6, 3, 10,\
    \ 2, 8, 1, 6, 3, 10, 2, 8, 1, 6, 3, 10, 2, 8, 1, 6, 3, 10, 2, 8, 1, 6, 3, 10,\
    \ 2, 8, 1, 6, 3, 10, 2, 8, 1, 6, 3, 10, 2, 8, 1, 6, 3, 10, 2, 8, 1, 6, 3, 10,\
    \ 2, 8, 1, 6, 3, 10, 2, 8, 1, 6, 3, 10, 2, 8, 1, 6, 3, 10, 2, 8, 1, 6, 3, 10,\
    \ 2, 8, 1, 6, 3, 10, 2, 8, 1, 6, 3, 10, 2, 8, 1, 6, 3, 10, 2, 8, 1, 6, 3, 10,\
    \ 2, 8, 1, 6, 3, 10, 2, 8, 1, 6, 3, 10, 2, 8, 1, 6, 3, 10, 2, 8, 1, 6, 3, 10,\
    \ 2, 8, 1, 6, 3, 10, 2, 8, 1, 6, 3, 10, 2, 8, 1, 6, 3, 10, 2, 8, 1, 6, 3, 10,\
    \ 2, 8, 1, 6, 3, 10, 2, 8, 1, 6, 3, 10, 2, 8, 1, 6, 3, 10, 2, 8, 1, 6, 3, 10,\
    \ 2, 8, 1, 6, 3, 10, 2, 8, 1, 6, 3, 10, 2, 8, 1, 6, 3, 10, 2, 8, 1, 6, 3, 10,\
    \ 2, 8, 1, 6, 3, ", "    let bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\"\
    , \"E\", \"Z\", \"Y\"]\n    let baseIndex = bases.index(base)!\n    let baseString\
    \ = bases[baseIndex]\n    let baseStringIndex = baseString.index(baseString[0])!\n\
    \    let baseStringWithoutFirstChar = baseString.substring(1)\n    let baseStringWithoutFirstCharIndex\
    \ = baseStringWithoutFirstChar.index(baseStringWithoutFirstChar[0])!\n    let\
    \ baseStringWithoutFirstCharWithoutFirstChar = baseStringWithoutFirstChar.substring(1)\n\
    \    let baseStringWithoutFirstCharWithoutFirstCharIndex = baseStringWithoutFirstCharWithoutFirstChar.index(baseStringWithoutFirstCharWithoutFirstChar[0])!\n\
    \    let baseStringWithoutFirstCharWithoutFirstCharWithoutFirstChar = baseStringWithoutFirstCharWithoutFirstChar.substring(1)\n\
    \    let baseStringWithoutFirstCharWithoutFirstCharWithoutFirstCharIndex = baseStringWithoutFirstCharWithoutFirstCharWithoutFirstChar.index(baseStringWithoutFirstCharWithoutFirstCharWithoutFirstChar[0])!\n\
    \    let baseStringWithoutFirstCharWithoutFirstCharWithoutFirstCharWithoutFirstChar\
    \ = baseStringWithoutFirstCharWithoutFirstCharWithoutFirstChar.substring(1)\n\
    \    let baseStringWithoutFirstCharWithoutFirstCharWithoutFirstCharWithoutFirstCharIndex\
    \ = baseStringWithoutFirstCharWithoutFirstCharWithoutFirstCharWithoutFirstChar.index(baseStringWithoutFirstCharWithoutFirstCharWithoutFirstCharWithoutFirstChar[0])!\n\
    \    let baseStringWithoutFirstCharWithoutFirstCharWithoutFirstCharWithoutFirstCharWithoutFirstChar\
    \ = baseStringWithoutFirstCharWithoutFirstCharWithoutFirstCharWithoutFirstChar.substring(1)\n\
    \    let baseStringWithoutFirstCharWithoutFirstCharWithoutFirstCharWithoutFirstCharWithoutFirstCharIndex\
    \ = baseStringWithoutFirstCharWithoutFirstCharWithoutFirstCharWithoutFirstCharWithoutFirstChar.index(baseStringWithoutFirstCharWithoutFirstCharWithoutFirstCharWithoutFirstCharWithoutFirstChar[0])!\n\
    \    let baseStringWithoutFirstCharWithoutFirstCharWithoutFirstCharWithoutFirstCharWithoutFirstCharWithoutFirstChar\
    \ = baseStringWithoutFirstCharWithoutFirstCharWithoutFirstCharWithoutFirstCharWithoutFirstCharWithoutFirstChar.substring(1)\n\
    \    let baseStringWithoutFirstCharWithoutFirstCharWithoutFirstCharWithoutFirstCharWithoutFirstCharWithoutFirstCharIndex\
    \ = baseStringWithoutFirstCharWithoutFirstCharWithoutFirstCharWithoutFirstCharWithoutFirstCharWithoutFirstChar.index(baseStringWithoutFirstCharWithoutFirstCharWithoutFirstCharWithoutFirstCharWithoutFirstCharWithoutFirstChar[0])!\n\
    \    let baseStringWithoutFirstCharWithoutFirstCharWithoutFirstCharWithoutFirstCharWithoutFirstCharWithoutFirstCharWithoutFirstChar\
    \ = base", "    var result = \"\"\n    var remainder = x\n    var base_remainder\
    \ = base\n    while remainder > 0 {\n        let remainder_str = String(remainder)\n\
    \        let base_remainder_str = String(base_remainder)\n        if remainder_str\
    \ < base_remainder_str {\n            result += String(remainder_str + base_remainder_str[remainder_str.index(base_remainder_str)..<base_remainder_str.index(base_remainder_str)\
    \ + 1])\n        } else {\n            result += String(base_remainder_str[base_remainder_str.index(base_remainder_str)..<base_remainder_str.index(base_remainder_str)\
    \ + 1])\n        }\n        remainder = remainder - base_remainder\n        base_remainder\
    \ = base_remainder - base\n    }\n    return result", "    let bases = [\"\",\
    \ \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n    let baseIndex =\
    \ bases.index(base)!\n    let x = x.toInt()\n    let result = String(x)\n    if\
    \ x > 0 {\n        let remainder = x % base\n        if remainder == 0 {\n   \
    \         result = bases[baseIndex]\n        } else {\n            result = bases[baseIndex]\
    \ + change_base(remainder, bases[baseIndex + 1])\n        }\n    }\n    return\
    \ result", "    let bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"\
    Z\", \"Y\"]\n    let baseIndex = bases.index(base)!\n    let baseString = bases[baseIndex]\n\
    \    let x = x.toInt()\n    let result = x.toInt().toString(baseString)\n    return\
    \ result", "    var s = String(x)\n    var base = base\n    var digits = \"\"\n\
    \    var digits_base = \"\"\n    var digits_base2 = 0\n    var digits_base3 =\
    \ 0\n    var digits_base4 = 0\n    var digits_base5 = 0\n    var digits_base6\
    \ = 0\n    var digits_base7 = 0\n    var digits_base8 = 0\n    var digits_base9\
    \ = 0\n    var digits_base10 = 0\n    var digits_base11 = 0\n    var digits_base12\
    \ = 0\n    var digits_base13 = 0\n    var digits_base14 = 0\n    var digits_base15\
    \ = 0\n    var digits_base16 = 0\n    var digits_base17 = 0\n    var digits_base18\
    \ = 0\n    var digits_base19 = 0\n    var digits_base20 = 0\n    var digits_base21\
    \ = 0\n    var digits_base22 = 0\n    var digits_base23 = 0\n    var digits_base24\
    \ = 0\n    var digits_base25 = 0\n    var digits_base26 = 0\n    var digits_base27\
    \ = 0\n    var digits_base28 = 0\n    var digits_base29 = 0\n    var digits_base30\
    \ = 0\n    var digits_base31 = 0\n    var digits_base32 = 0\n    var digits_base33\
    \ = 0\n    var digits_base34 = 0\n    var digits_base35 = 0\n    var digits_base36\
    \ = 0\n    var digits_base37 = 0\n    var digits_base38 = 0\n    var digits_base39\
    \ = 0\n    var digits_base40 = 0\n    var digits_base41 = 0\n    var digits_base42\
    \ = 0\n    var digits_base43 = 0\n    var digits_base44 = 0\n    var digits_base45\
    \ = 0\n    var digits_base46 = 0\n    var digits_base47 = 0\n    var digits_base48\
    \ = 0\n    var digits_base49 = 0\n    var digits_base50 = 0\n    var digits_base51\
    \ = 0\n    var digits_base52 = 0\n    var digits_base53 = 0\n    var digits_base54\
    \ = 0\n    var digits_base55 = 0\n    var digits_base56 = 0\n    var digits_base57\
    \ = 0\n    var digits_base58 = 0\n    var digits_base59 = 0\n    var digits_base60\
    \ = 0\n    var digits_base61 = 0\n    var digits_base62 = 0\n    var digits_base63\
    \ = 0\n    var digits_base64 = 0\n    var digits_base65 = 0\n    var digits_base66\
    \ = 0\n    var digits_base67 = 0\n    var digits_base68 = 0\n    var digits_base69\
    \ = 0\n    var digits_base70 = 0\n    var digits_base71 = 0\n    var digit", " \
    \   let bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"\
    ]\n    let baseIndex = bases.index(base)!\n    let result = x.toInt().toString(baseIndex)\n\
    \    return String(result)", "    let bases = [\"\", \"K\", \"M\", \"G\", \"T\"\
    , \"P\", \"E\", \"Z\", \"Y\"]\n    let baseIndex = bases.index(base)!\n    let\
    \ result = String(x)\n    if result.characters.count < baseIndex {\n        return\
    \ result + String(baseIndex - result.characters.count)\n    }\n    return result",
  "    var result = \"\"\n    var remainder: Int\n    var quotient: Int\n    \n  \
    \  if base < 10 {\n        return \"\"\n    }\n    \n    if base == 10 {\n   \
    \     if x == 0 {\n            result = \"0\"\n        } else {\n            result\
    \ = \"1\"\n        }\n        return result\n    }\n    \n    if x == 0 {\n  \
    \      result = \"0\"\n        return result\n    }\n    \n    remainder = x %\
    \ base\n    quotient = x / base\n    \n    if quotient == 0 {\n        result\
    \ = change_base(remainder, base)\n        return result\n    }\n    \n    result\
    \ = change_base(quotient, base) + result\n    return result", "    if base < 10\
    \ {\n        return String(x)\n    }\n    var result = \"\"\n    var remainder\
    \ = x\n    var digit = 0\n    while remainder > 0 {\n        remainder, remainder\
    \ = remainder / base, digit\n        digit = digit * base\n    }\n    result =\
    \ String(digit) + result\n    return result", "    var result = \"\"\n    var\
    \ remainder: Int\n    var quotient: Int\n    var quotientString: String\n    var\
    \ remainderString: String\n    var quotientStringWithLeadingZero: String\n   \
    \ var remainderStringWithLeadingZero: String\n    var quotientStringWithLeadingZeroWithLeadingZero:\
    \ String\n    var remainderStringWithLeadingZeroWithLeadingZero: String\n    var\
    \ quotientStringWithLeadingZeroWithLeadingZeroWithLeadingZero: String\n    var\
    \ remainderStringWithLeadingZeroWithLeadingZeroWithLeadingZero: String\n    var\
    \ quotientStringWithLeadingZeroWithLeadingZeroWithLeadingZeroWithLeadingZero:\
    \ String\n    var remainderStringWithLeadingZeroWithLeadingZeroWithLeadingZeroWithLeadingZero:\
    \ String\n    var quotientStringWithLeadingZeroWithLeadingZeroWithLeadingZeroWithLeadingZeroWithLeadingZero:\
    \ String\n    var remainderStringWithLeadingZeroWithLeadingZeroWithLeadingZeroWithLeadingZeroWithLeadingZero:\
    \ String\n    var quotientStringWithLeadingZeroWithLeadingZeroWithLeadingZeroWithLeadingZeroWithLeadingZeroWithLeadingZero:\
    \ String\n    var remainderStringWithLeadingZeroWithLeadingZeroWithLeadingZeroWithLeadingZeroWithLeadingZeroWithLeadingZero:\
    \ String\n    var quotientStringWithLeadingZeroWithLeadingZeroWithLeadingZeroWithLeadingZeroWithLeadingZeroWithLeadingZeroWithLeadingZero:\
    \ String\n    var remainderStringWithLeadingZeroWithLeadingZeroWithLeadingZeroWithLeadingZeroWithLeadingZeroWithLeadingZeroWithLeadingZero:\
    \ String\n    var quotientStringWithLeadingZeroWithLeadingZeroWithLeadingZeroWithLeadingZeroWithLeadingZeroWithLeadingZeroWithLeadingZeroWithLeadingZero:\
    \ String\n    var remainderStringWithLeadingZeroWithLeadingZeroWithLeadingZeroWithLeadingZeroWithLeadingZeroWithLeadingZeroWithLeadingZeroWithLeadingZero:\
    \ String\n    var quotientStringWithLeadingZeroWithLeadingZeroWithLeadingZeroWithLeadingZeroWithLeadingZeroWithLeadingZeroWithLeadingZeroWithLeadingZeroWithLeadingZero:\
    \ String\n    var remainderStringWithLeadingZeroWithLeadingZeroWithLeadingZeroWithLeadingZeroWithLeadingZeroWithLeadingZeroWithLeadingZeroWithLeadingZeroWithLeadingZero:\
    \ String\n    var quotientStringWithLeadingZeroWithLeadingZeroWithLeadingZero",
  "    var result = \"\"\n    var remainder = x\n    var digits = \"\"\n    while\
    \ remainder != 0 {\n        digits = String(remainder % base)\n        remainder\
    \ = Int(remainder / base)\n        result = digits + result\n    }\n    return\
    \ result", "    var result = \"\"\n    var remainder: Int\n    var quotient: Int\n\
    \    var quotientString: String\n    var remainderString: String\n    var quotientStringWithBase:\
    \ String\n    var remainderStringWithBase: String\n    var quotientStringWithBaseAndRemainder:\
    \ String\n    var remainderStringWithBaseAndRemainder: String\n    var quotientStringWithBaseAndRemainderWithBase:\
    \ String\n    var remainderStringWithBaseAndRemainderWithBase: String\n    var\
    \ quotientStringWithBaseAndRemainderWithBaseAndRemainder: String\n    var remainderStringWithBaseAndRemainderWithBaseAndRemainder:\
    \ String\n    var quotientStringWithBaseAndRemainderWithBaseAndRemainderWithBase:\
    \ String\n    var remainderStringWithBaseAndRemainderWithBaseAndRemainderWithBase:\
    \ String\n    var quotientStringWithBaseAndRemainderWithBaseAndRemainderWithBaseAndRemainder:\
    \ String\n    var remainderStringWithBaseAndRemainderWithBaseAndRemainderWithBaseAndRemainder:\
    \ String\n    var quotientStringWithBaseAndRemainderWithBaseAndRemainderWithBaseAndRemainderWithBase:\
    \ String\n    var remainderStringWithBaseAndRemainderWithBaseAndRemainderWithBaseAndRemainderWithBase:\
    \ String\n    var quotientStringWithBaseAndRemainderWithBaseAndRemainderWithBaseAndRemainderWithBaseAndRemainder:\
    \ String\n    var remainderStringWithBaseAndRemainderWithBaseAndRemainderWithBaseAndRemainderWithBaseAndRemainder:\
    \ String\n    var quotientStringWithBaseAndRemainderWithBaseAndRemainderWithBaseAndRemainderWithBaseAndRemainderWithBase:\
    \ String\n    var remainderStringWithBaseAndRemainderWithBaseAndRemainderWithBaseAndRemainderWithBaseAndRemainderWithBase:\
    \ String\n    var quotientStringWithBaseAndRemainderWithBaseAndRemainderWithBaseAndRemainderWithBaseAndRemainderWithBaseAndRemainder:\
    \ String\n    var remainderStringWithBaseAndRemainderWithBaseAndRemainderWithBaseAndRemainderWithBaseAndRemainderWithBaseAndRemainder:\
    \ String\n    var quotientStringWithBaseAndRemainderWithBaseAndRemainderWithBaseAndRemainderWithBaseAndRemainderWithBaseAndRemainderWithBase:\
    \ String\n    var remainderStringWithBaseAndRemainderWithBaseAndRemainderWithBaseAndRemainderWithBaseAndRemainderWithBaseAndRemainderWithBase:\
    \ String\n    var quotientStringWithBaseAndRemainderWithBaseAndRemainderWithBaseAndRemainderWithBaseAndRemainderWithBaseAndRemain",
  "    var result = \"\"\n    var remainder: Int\n    var quotient: Int\n    var remainder2:\
    \ Int\n    var quotient2: Int\n    var remainder3: Int\n    var quotient3: Int\n\
    \    var remainder4: Int\n    var quotient4: Int\n    var remainder5: Int\n  \
    \  var quotient5: Int\n    var remainder6: Int\n    var quotient6: Int\n    var\
    \ remainder7: Int\n    var quotient7: Int\n    var remainder8: Int\n    var quotient8:\
    \ Int\n    var remainder9: Int\n    var quotient9: Int\n    var remainder10: Int\n\
    \    var quotient10: Int\n    var remainder11: Int\n    var quotient11: Int\n\
    \    var remainder12: Int\n    var quotient12: Int\n    var remainder13: Int\n\
    \    var quotient13: Int\n    var remainder14: Int\n    var quotient14: Int\n\
    \    var remainder15: Int\n    var quotient15: Int\n    var remainder16: Int\n\
    \    var quotient16: Int\n    var remainder17: Int\n    var quotient17: Int\n\
    \    var remainder18: Int\n    var quotient18: Int\n    var remainder19: Int\n\
    \    var quotient19: Int\n    var remainder20: Int\n    var quotient20: Int\n\
    \    var remainder21: Int\n    var quotient21: Int\n    var remainder22: Int\n\
    \    var quotient22: Int\n    var remainder23: Int\n    var quotient23: Int\n\
    \    var remainder24: Int\n    var quotient24: Int\n    var remainder25: Int\n\
    \    var quotient25: Int\n    var remainder26: Int\n    var quotient26: Int\n\
    \    var remainder27: Int\n    var quotient27: Int\n    var remainder28: Int\n\
    \    var quotient28: Int\n    var remainder29: Int\n    var quotient29: Int\n\
    \    var remainder30: Int\n    var quotient30: Int\n    var remainder31: Int\n\
    \    var quotient31: Int\n    var remainder32: Int\n    var quotient32: Int\n\
    \    var remainder33: Int\n    var quotient33: Int\n    var remainder34: Int\n\
    \    var quotient34: Int\n    var remainder35: Int\n    var quotient35: Int\n\
    \    var remainder36: Int\n    var quotient36: Int\n    var remainder37: Int\n\
    \    var quotient37: Int\n", "    let digits = x.digits\n    var result = \"\"\
    \n    var i = 0\n    for digit in digits {\n        let digit = digit\n      \
    \  let digit = digit\n        let digit = digit\n        let digit = digit\n \
    \       let digit = digit\n        let digit = digit\n        let digit = digit\n\
    \        let digit = digit\n        let digit = digit\n        let digit = digit\n\
    \        let digit = digit\n        let digit = digit\n        let digit = digit\n\
    \        let digit = digit\n        let digit = digit\n        let digit = digit\n\
    \        let digit = digit\n        let digit = digit\n        let digit = digit\n\
    \        let digit = digit\n        let digit = digit\n        let digit = digit\n\
    \        let digit = digit\n        let digit = digit\n        let digit = digit\n\
    \        let digit = digit\n        let digit = digit\n        let digit = digit\n\
    \        let digit = digit\n        let digit = digit\n        let digit = digit\n\
    \        let digit = digit\n        let digit = digit\n        let digit = digit\n\
    \        let digit = digit\n        let digit = digit\n        let digit = digit\n\
    \        let digit = digit\n        let digit = digit\n        let digit = digit\n\
    \        let digit = digit\n        let digit = digit\n        let digit = digit\n\
    \        let digit = digit\n        let digit = digit\n        let digit = digit\n\
    \        let digit = digit\n        let digit = digit\n        let digit = digit\n\
    \        let digit = digit\n        let digit = digit\n        let digit = digit\n\
    \        let digit = digit\n        let digit = digit\n        let digit = digit\n\
    \        let digit = digit\n        let digit = digit\n        let digit = digit\n\
    \        let digit = digit\n        let digit = digit\n        let digit = digit\n\
    \        let digit = digit\n        let digit = digit\n        let digit = digit\n\
    \        let digit = digit\n        let digit = digit\n        let digit = digit\n\
    \        let digit = digit\n        let digit = digit\n        let digit = digit\n\
    \        let digit = digit\n        let digit = digit\n        let digit = digit\n\
    \        let digit = digit\n        let digit = digit\n        let digit = digit\n\
    \        let digit = digit\n        let digit = digit\n        let digit = digit\n\
    \        let digit = digit\n        let digit = digit\n        let digit = digit\n\
    \        let digit = digit\n        let digit = digit\n        let digit = digit\n\
    \        let digit = digit\n        let digit = digit\n        let digit = digit\n\
    \        let digit = digit\n        let digit = digit\n        let digit = digit\n\
    \        let digit = digit\n        let digit = digit\n        let digit = digit\n\
    \        let digit = digit\n        let digit = digit\n        let digit = digit\n\
    \        let digit = digit\n        let digit = ", "    let bases = [\"\", \"\
    K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n    let baseIndex = bases.firstIndex(of:\
    \ base)!\n    let baseString = bases[baseIndex]\n    let baseInt = Int(baseString)!\n\
    \    let baseDouble = Double(baseInt)\n    let baseFloat = Float(baseInt)\n  \
    \  let baseInt = Int(x)\n    let baseDouble = Double(x)\n    let baseFloat = Float(x)\n\
    \    let baseInt = Int(baseString)\n    let baseDouble = Double(baseString)\n\
    \    let baseFloat = Float(baseString)\n    let baseInt = Int(baseDouble)\n  \
    \  let baseDouble = Double(baseDouble)\n    let baseFloat = Float(baseDouble)\n\
    \    let baseInt = Int(baseFloat)\n    let baseDouble = Double(baseFloat)\n  \
    \  let baseFloat = Float(baseFloat)\n    let baseInt = Int(baseInt)\n    let baseDouble\
    \ = Double(baseInt)\n    let baseFloat = Float(baseInt)\n    let baseInt = Int(baseDouble)\n\
    \    let baseDouble = Double(baseDouble)\n    let baseFloat = Float(baseDouble)\n\
    \    let baseInt = Int(baseFloat)\n    let baseDouble = Double(baseFloat)\n  \
    \  let baseFloat = Float(baseFloat)\n    let baseInt = Int(baseInt)\n    let baseDouble\
    \ = Double(baseInt)\n    let baseFloat = Float(baseInt)\n    let baseInt = Int(baseDouble)\n\
    \    let baseDouble = Double(baseDouble)\n    let baseFloat = Float(baseDouble)\n\
    \    let baseInt = Int(baseFloat)\n    let baseDouble = Double(baseFloat)\n  \
    \  let baseFloat = Float(baseFloat)\n    let baseInt = Int(baseInt)\n    let baseDouble\
    \ = Double(baseInt)\n    let baseFloat = Float(baseInt)\n    let baseInt = Int(baseDouble)\n\
    \    let baseDouble = Double(baseDouble)\n    let baseFloat = Float(baseDouble)\n\
    \    let baseInt = Int(baseFloat)\n    let baseDouble = Double(baseFloat)\n  \
    \  let baseFloat = Float(baseFloat)\n    let baseInt = Int(baseInt)\n    let baseDouble\
    \ = Double(baseInt)\n    let baseFloat = Float(baseInt)\n    let baseInt = Int(baseDouble)\n\
    \    let baseDouble = Double(baseDouble)\n    let baseFloat = Float(baseDouble)\n\
    \    let baseInt = Int(baseFloat)\n    let baseDouble = Double(baseFloat)", " \
    \   let bases = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"\
    , \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"\
    , \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\"\
    , \"V\", \"W\", \"X\", \"Y\", \"Z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"\
    , \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    let basesCount\
    \ = bases.count\n    var result: String = \"\"\n    var remainder: Int = 0\n \
    \   var remainderBase: Int = 0\n    var remainderBaseIndex: Int = 0\n    var remainderBaseIndex2:\
    \ Int = 0\n    var remainderBaseIndex3: Int = 0\n    var remainderBaseIndex4:\
    \ Int = 0\n    var remainderBaseIndex5: Int = 0\n    var remainderBaseIndex6:\
    \ Int = 0\n    var remainderBaseIndex7: Int = 0\n    var remainderBaseIndex8:\
    \ Int = 0\n    var remainderBaseIndex9: Int = 0\n    var remainderBaseIndex10:\
    \ Int = 0\n    var remainderBaseIndex11: Int = 0\n    var remainderBaseIndex12:\
    \ Int = 0\n    var remainderBaseIndex13: Int = 0\n    var remainderBaseIndex14:\
    \ Int = 0\n    var remainderBaseIndex15: Int = 0\n    var remainderBaseIndex16:\
    \ Int = 0\n    var remainderBaseIndex17: Int = 0\n    var remainderBaseIndex18:\
    \ Int = 0\n    var remainderBaseIndex19: Int = 0\n    var remainderBaseIndex20:\
    \ Int = 0\n    var remainderBaseIndex21: Int = 0\n    var remainderBaseIndex22:\
    \ Int = 0\n    var remainderBaseIndex23: Int = 0\n    var remainderBaseIndex24:\
    \ Int = 0\n    var remainderBaseIndex25: Int = 0\n    var remainderBaseIndex26:\
    \ Int = 0\n    var remainderBaseIndex27: Int = 0\n    var remainderBaseIndex28:\
    \ Int = 0\n    var remainderBaseIndex29: Int = 0\n    var remainderBaseIndex30:\
    \ Int = 0\n    var remainderBaseIndex31: Int = 0\n    var remainderBaseIndex32:\
    \ Int = 0\n    var remainderBaseIndex33: Int = 0\n    var remainderBaseIndex34:\
    \ Int = 0\n    var remainderBaseIndex35: Int = 0\n    var remainderBaseIndex36:\
    \ Int = 0\n    var remainderBaseIndex37: Int = 0\n    var remainderBaseIndex38:\
    \ Int = 0", "    var result = \"\"\n    var remainder = x\n    var digit = 0\n\
    \    while remainder > 0 {\n        digit = remainder % base\n        remainder\
    \ = remainder / base\n        result = String(digit) + result\n    }\n    return\
    \ result", "    let bases = Array(1...base)\n    let digits = x.toString(bases)\n\
    \    return digits", "    var result = \"\"\n    var remainder = x\n    var divisor\
    \ = base\n    while remainder > 0 {\n        remainder, remainder = remainder\
    \ / divisor, divisor\n        result += String(remainder)\n    }\n    return result",
  "    let bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n\
    \    let baseIndex = bases.firstIndex(of: base)!\n    let baseString = bases[baseIndex]\n\
    \    let result = Double(x).truncatingRemainder(dividingBy: Double(base))\n  \
    \  return String(format: \"%.1f\", result) + baseString", "    if base < 10 {\n\
    \        return String(x)\n    }\n    var res = \"\"\n    var digits = String(x)\n\
    \    var baseDigits = String(base)\n    var baseLength = baseDigits.count\n  \
    \  var digitLength = digits.count\n    var i = 0\n    while i < baseLength {\n\
    \        var digit = digits[i]\n        var baseDigit = baseDigits[i]\n      \
    \  if digit == baseDigit {\n            i += 1\n            continue\n       \
    \ }\n        if digit < baseDigit {\n            var digitString = String(digit)\n\
    \            var baseDigitString = String(baseDigit)\n            var digitStringLength\
    \ = digitString.count\n            var baseDigitStringLength = baseDigitString.count\n\
    \            var j = 0\n            var carry = 0\n            var carryDigit\
    \ = 0\n            var carryBaseDigit = 0\n            var carryDigitString =\
    \ \"\"\n            var carryBaseDigitString = \"\"\n            while j < digitStringLength\
    \ {\n                var digitValue = digitString[j]\n                var baseDigitValue\
    \ = baseDigitString[j]\n                var digitValueInt = Int(digitValue)\n\
    \                var baseDigitValueInt = Int(baseDigitValue)\n               \
    \ var digitValueIntAdd = digitValueInt + carry\n                var baseDigitValueIntAdd\
    \ = baseDigitValueInt + carryBaseDigit\n                var digitValueIntAddString\
    \ = String(digitValueIntAdd)\n                var baseDigitValueIntAddString =\
    \ String(baseDigitValueIntAdd)\n                carryDigit = digitValueIntAdd\
    \ % baseDigitValueInt\n                carryBaseDigit = baseDigitValueIntAdd %\
    \ digitValueInt\n                carryDigitString += String(carryDigit)\n    \
    \            carryBaseDigitString += String(carryBaseDigit)\n                carryDigit\
    \ = digitValueIntAdd / baseDigitValueInt\n                carryBaseDigit = baseDigitValueIntAdd\
    \ / digitValueInt\n                carryDigitString += String(carryDigit)\n  \
    \              carryBaseDigitString += String(carryBaseDigit)\n              \
    \  carryDigit = digitValueIntAdd % baseDigitValueInt\n                carryBaseDigit\
    \ = baseDigitValueIntAdd % digitValueInt\n                carryDigitString +=\
    \ String(carryDigit)\n                carryBaseDigitString += String(carryBaseDigit)\n\
    \                carryDigit = digitValueIntAdd / baseDigitValueInt\n         \
    \       carryBaseDigit = baseDigitValueIntAdd / digitValueInt\n              \
    \  carryDigitString += String(carryDigit)\n                carryBaseDigitString\
    \ += String(carryBaseDigit)\n                carryDigit = digitValueIntAdd % baseDigitValueInt\n\
    \                carryBaseDigit = baseDigitValueIntAdd % digitValueInt\n     \
    \           carryDigitString += String(carry", "    let bases = [\"\", \"K\",\
    \ \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n    let base_index = bases.index(base)!\n\
    \    let x = x.toInt()\n    let result = x.toString(base_index)\n    return result",
  "    let bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n\
    \    let baseIndex = bases.index(base)!\n    let baseString = bases[baseIndex]\n\
    \    let baseInt = Int(baseString)\n    let baseFloat = Float(baseString)\n  \
    \  let baseInt = Int(x)\n    let baseFloat = Float(x)\n    let baseInt = Int(baseFloat)\n\
    \    let baseFloat = Float(baseFloat)\n    let baseInt = Int(baseFloat)\n    let\
    \ baseFloat = Float(baseFloat)\n    let baseInt = Int(baseFloat)\n    let baseFloat\
    \ = Float(baseFloat)\n    let baseInt = Int(baseFloat)\n    let baseFloat = Float(baseFloat)\n\
    \    let baseInt = Int(baseFloat)\n    let baseFloat = Float(baseFloat)\n    let\
    \ baseInt = Int(baseFloat)\n    let baseFloat = Float(baseFloat)\n    let baseInt\
    \ = Int(baseFloat)\n    let baseFloat = Float(baseFloat)\n    let baseInt = Int(baseFloat)\n\
    \    let baseFloat = Float(baseFloat)\n    let baseInt = Int(baseFloat)\n    let\
    \ baseFloat = Float(baseFloat)\n    let baseInt = Int(baseFloat)\n    let baseFloat\
    \ = Float(baseFloat)\n    let baseInt = Int(baseFloat)\n    let baseFloat = Float(baseFloat)\n\
    \    let baseInt = Int(baseFloat)\n    let baseFloat = Float(baseFloat)\n    let\
    \ baseInt = Int(baseFloat)\n    let baseFloat = Float(baseFloat)\n    let baseInt\
    \ = Int(baseFloat)\n    let baseFloat = Float(baseFloat)\n    let baseInt = Int(baseFloat)\n\
    \    let baseFloat = Float(baseFloat)\n    let baseInt = Int(baseFloat)\n    let\
    \ baseFloat = Float(baseFloat)\n    let baseInt = Int(baseFloat)\n    let baseFloat\
    \ = Float(baseFloat)\n    let baseInt = Int(baseFloat)\n    let baseFloat = Float(baseFloat)\n\
    \    let baseInt = Int(baseFloat)\n    let baseFloat = Float(baseFloat)\n    let\
    \ baseInt = Int(baseFloat)\n    let baseFloat = Float(baseFloat)\n    let baseInt\
    \ = Int(baseFloat)\n    let baseFloat = Float(baseFloat)\n    let baseInt = Int(baseFloat)\n\
    \    let baseFloat = Float(baseFloat)\n    let baseInt = Int(baseFloat)\n    let\
    \ baseFloat = Float(baseFloat)\n    let baseInt = Int(baseFloat", "    var result\
    \ = \"\"\n    var remainder: Int\n    var quotient: Int\n    var remainder2: Int\n\
    \    var quotient2: Int\n    var quotient3: Int\n    var quotient4: Int\n    var\
    \ quotient5: Int\n    var quotient6: Int\n    var quotient7: Int\n    var quotient8:\
    \ Int\n    var quotient9: Int\n    var quotient10: Int\n    var quotient11: Int\n\
    \    var quotient12: Int\n    var quotient13: Int\n    var quotient14: Int\n \
    \   var quotient15: Int\n    var quotient16: Int\n    var quotient17: Int\n  \
    \  var quotient18: Int\n    var quotient19: Int\n    var quotient20: Int\n   \
    \ var quotient21: Int\n    var quotient22: Int\n    var quotient23: Int\n    var\
    \ quotient24: Int\n    var quotient25: Int\n    var quotient26: Int\n    var quotient27:\
    \ Int\n    var quotient28: Int\n    var quotient29: Int\n    var quotient30: Int\n\
    \    var quotient31: Int\n    var quotient32: Int\n    var quotient33: Int\n \
    \   var quotient34: Int\n    var quotient35: Int\n    var quotient36: Int\n  \
    \  var quotient37: Int\n    var quotient38: Int\n    var quotient39: Int\n   \
    \ var quotient40: Int\n    var quotient41: Int\n    var quotient42: Int\n    var\
    \ quotient43: Int\n    var quotient44: Int\n    var quotient45: Int\n    var quotient46:\
    \ Int\n    var quotient47: Int\n    var quotient48: Int\n    var quotient49: Int\n\
    \    var quotient50: Int\n    var quotient51: Int\n    var quotient52: Int\n \
    \   var quotient53: Int\n    var quotient54: Int\n    var quotient55: Int\n  \
    \  var quotient56: Int\n    var quotient57: Int\n    var quotient58: Int\n   \
    \ var quotient59: Int\n    var quotient60: Int\n    var quotient61: Int\n    var\
    \ quotient62: Int\n    var quotient63: Int\n    var quotient64: Int\n    var quotient65:\
    \ Int\n    var quotient66: Int\n    var quotient67: Int\n    var quotient68: Int\n\
    \    var quotient69: Int\n    var quotient70: Int\n    var quotient71: Int\n \
    \   var quotient72", "    var result = \"\"\n    var remainder = 0\n    var quotient\
    \ = 0\n    var quotientString = \"\"\n    var remainderString = \"\"\n    var\
    \ quotientStringWithBase = \"\"\n    var remainderStringWithBase = \"\"\n    var\
    \ quotientStringWithBaseWithBase = \"\"\n    var remainderStringWithBaseWithBase\
    \ = \"\"\n    var quotientStringWithBaseWithBaseWithBase = \"\"\n    var remainderStringWithBaseWithBaseWithBase\
    \ = \"\"\n    var quotientStringWithBaseWithBaseWithBaseWithBase = \"\"\n    var\
    \ remainderStringWithBaseWithBaseWithBaseWithBase = \"\"\n    var quotientStringWithBaseWithBaseWithBaseWithBaseWithBase\
    \ = \"\"\n    var remainderStringWithBaseWithBaseWithBaseWithBaseWithBase = \"\
    \"\n    var quotientStringWithBaseWithBaseWithBaseWithBaseWithBaseWithBase = \"\
    \"\n    var remainderStringWithBaseWithBaseWithBaseWithBaseWithBaseWithBase =\
    \ \"\"\n    var quotientStringWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBase\
    \ = \"\"\n    var remainderStringWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBase\
    \ = \"\"\n    var quotientStringWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBase\
    \ = \"\"\n    var remainderStringWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBase\
    \ = \"\"\n    var quotientStringWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBase\
    \ = \"\"\n    var remainderStringWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBase\
    \ = \"\"\n    var quotientStringWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBase\
    \ = \"\"\n    var remainderStringWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBase\
    \ = \"\"\n    var quotientStringWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBase\
    \ = \"\"\n    var remainderStringWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBase\
    \ = \"\"\n    var quotientStringWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBase\
    \ = \"\"\n    var remainderStringWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBase",
  "    var result = \"\"\n    var remainder = x\n    var quotient = 0\n    var quotientString\
    \ = \"\"\n    var remainderString = \"\"\n    var quotientStringBase = \"\"\n\
    \    var remainderStringBase = \"\"\n    var quotientStringBase2 = \"\"\n    var\
    \ remainderStringBase2 = \"\"\n    var quotientStringBase3 = \"\"\n    var remainderStringBase3\
    \ = \"\"\n    var quotientStringBase4 = \"\"\n    var remainderStringBase4 = \"\
    \"\n    var quotientStringBase5 = \"\"\n    var remainderStringBase5 = \"\"\n\
    \    var quotientStringBase6 = \"\"\n    var remainderStringBase6 = \"\"\n   \
    \ var quotientStringBase7 = \"\"\n    var remainderStringBase7 = \"\"\n    var\
    \ quotientStringBase8 = \"\"\n    var remainderStringBase8 = \"\"\n    var quotientStringBase9\
    \ = \"\"\n    var remainderStringBase9 = \"\"\n    var quotientStringBase10 =\
    \ \"\"\n    var remainderStringBase10 = \"\"\n    var quotientStringBase11 = \"\
    \"\n    var remainderStringBase11 = \"\"\n    var quotientStringBase12 = \"\"\n\
    \    var remainderStringBase12 = \"\"\n    var quotientStringBase13 = \"\"\n \
    \   var remainderStringBase13 = \"\"\n    var quotientStringBase14 = \"\"\n  \
    \  var remainderStringBase14 = \"\"\n    var quotientStringBase15 = \"\"\n   \
    \ var remainderStringBase15 = \"\"\n    var quotientStringBase16 = \"\"\n    var\
    \ remainderStringBase16 = \"\"\n    var quotientStringBase17 = \"\"\n    var remainderStringBase17\
    \ = \"\"\n    var quotientStringBase18 = \"\"\n    var remainderStringBase18 =\
    \ \"\"\n    var quotientStringBase19 = \"\"\n    var remainderStringBase19 = \"\
    \"\n    var quotientStringBase20 = \"\"\n    var remainderStringBase20 = \"\"\n\
    \    var quotientStringBase21 = \"\"\n    var remainderStringBase21 = \"\"\n \
    \   var quotientStringBase22 = \"\"\n    var remainderStringBase22 = \"\"\n  \
    \  var quotientStringBase23 = \"\"\n    var remainderStringBase23 = \"\"\n   \
    \ var quotientStringBase24 = \"\"\n    var remainderStringBase24 = \"\"\n    var\
    \ quotientStringBase25 = \"\"\n    var remainderStringBase25 = \"\"\n    var quotientStringBase26\
    \ = \"\"\n    var remainderStringBase26 = \"\"\n    var quotientStringBase27 =\
    \ \"\"\n    var remainderStringBase27 = \"\"\n    var quotientStringBase28 = \"\
    \"\n    var remainderStringBase28 = \"\"\n    var quotientStringBase29 = \"\"\n\
    \    var remainderStringBase29 = \"\"\n    var quotientStringBase30 = \"\"\n \
    \   var remainderStringBase30 = \"\"\n    var quotientStringBase3", "    let bases\
    \ = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n    let base_index\
    \ = bases.index(base)!\n    let base_name = bases[base_index]\n    let x = x.toInt()\n\
    \    let y = x / base\n    let z = x % base\n    return String(y) + base_name",
  "    if base < 10 {\n        return String(x)\n    }\n    var result: String = \"\
    \"\n    var remainder: Int = 0\n    var digit: Int = 0\n    while x >= base {\n\
    \        remainder = x % base\n        digit = remainder / base\n        result\
    \ = String(digit) + result\n        x = x / base\n    }\n    if remainder > 0\
    \ {\n        result = String(digit) + result\n    }\n    return result", "   \
    \ if base < 10 {\n        return String(x)\n    }\n    var result = \"\"\n   \
    \ var remainder = x\n    var digit = 0\n    while remainder > 0 {\n        remainder,\
    \ remainder = remainder / base, digit\n        result = String(digit) + result\n\
    \        digit++\n    }\n    return result", "    let base10 = 10\n    let base16\
    \ = 16\n    let base26 = 26\n    let base36 = 36\n    let base48 = 48\n    let\
    \ base60 = 60\n    let base72 = 72\n    let base96 = 96\n    let base102 = 102\n\
    \    let base108 = 108\n    let base114 = 114\n    let base116 = 116\n    let\
    \ base122 = 122\n    let base124 = 124\n    let base130 = 130\n    let base138\
    \ = 138\n    let base144 = 144\n    let base148 = 148\n    let base154 = 154\n\
    \    let base158 = 158\n    let base160 = 160\n    let base162 = 162\n    let\
    \ base164 = 164\n    let base168 = 168\n    let base176 = 176\n    let base180\
    \ = 180\n    let base184 = 184\n    let base188 = 188\n    let base192 = 192\n\
    \    let base196 = 196\n    let base200 = 200\n    let base204 = 204\n    let\
    \ base208 = 208\n    let base212 = 212\n    let base216 = 216\n    let base220\
    \ = 220\n    let base224 = 224\n    let base228 = 228\n    let base232 = 232\n\
    \    let base236 = 236\n    let base240 = 240\n    let base244 = 244\n    let\
    \ base248 = 248\n    let base252 = 252\n    let base256 = 256\n    let base260\
    \ = 260\n    let base264 = 264\n    let base268 = 268\n    let base272 = 272\n\
    \    let base276 = 276\n    let base280 = 280\n    let base284 = 284\n    let\
    \ base288 = 288\n    let base292 = 292\n    let base296 = 296\n    let base300\
    \ = 300\n    let base304 = 304\n    let base308 = 308\n    let base312 = 312\n\
    \    let base316 = 316\n    let base320 = 320\n    let base324 = 324\n    let\
    \ base328 = 328\n    let base332 = 332\n    let base336 = 336\n    let base340\
    \ = 340\n    let base344 = 344\n    let base348 = 348\n    let base352 = 352\n\
    \    let base356 = 356\n    let base360 = 360\n    let base364 = 364\n    let\
    \ base368 = 368\n    let base372 = 372\n    let base376 = 376\n    let base380\
    \ = 380\n    let base384 = 384\n    let base388 = 388\n    let base392 = 392\n\
    \    let base396 = 396\n    let base400 = 400\n    let base404 = 404\n    let\
    \ base408 = 408\n    let base412 = 4", "    let base10: Int = 10\n    let base16:\
    \ Int = 16\n    let base26: Int = 26\n    let base36: Int = 36\n    let base46:\
    \ Int = 46\n    let base56: Int = 56\n    let base66: Int = 66\n    let base76:\
    \ Int = 76\n    let base86: Int = 86\n    let base96: Int = 96\n    let base102:\
    \ Int = 102\n    let base104: Int = 104\n    let base106: Int = 106\n    let base108:\
    \ Int = 108\n    let base110: Int = 110\n    let base112: Int = 112\n    let base114:\
    \ Int = 114\n    let base116: Int = 116\n    let base118: Int = 118\n    let base120:\
    \ Int = 120\n    let base122: Int = 122\n    let base124: Int = 124\n    let base126:\
    \ Int = 126\n    let base128: Int = 128\n    let base130: Int = 130\n    let base132:\
    \ Int = 132\n    let base134: Int = 134\n    let base136: Int = 136\n    let base138:\
    \ Int = 138\n    let base140: Int = 140\n    let base142: Int = 142\n    let base144:\
    \ Int = 144\n    let base146: Int = 146\n    let base148: Int = 148\n    let base150:\
    \ Int = 150\n    let base152: Int = 152\n    let base154: Int = 154\n    let base156:\
    \ Int = 156\n    let base158: Int = 158\n    let base160: Int = 160\n    let base162:\
    \ Int = 162\n    let base164: Int = 164\n    let base166: Int = 166\n    let base168:\
    \ Int = 168\n    let base170: Int = 170\n    let base172: Int = 172\n    let base174:\
    \ Int = 174\n    let base176: Int = 176\n    let base178: Int = 178\n    let base180:\
    \ Int = 180\n    let base182: Int = 182\n    let base184: Int = 184\n    let base186:\
    \ Int = 186\n    let base188: Int = 188\n    let base190: Int = 190\n    let base192:\
    \ Int = 192\n    let base194: Int = 194\n    let base196: Int = 196\n    let base198:\
    \ Int = 198\n    let base200: Int = 200\n    let base202: Int = 202\n    let base204:\
    \ Int = 204\n    let base206: Int = 206\n    let base208: ", "    let bases =\
    \ [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n    let base_index\
    \ = bases.index(base)!\n    let result = String(format: \"%0*d\", base_index,\
    \ x)\n    return result", "    var result = \"\"\n    var remainder: Int\n   \
    \ var quotient: Int\n    var quotientString: String\n    var remainderString:\
    \ String\n    var quotientString2: String\n    var remainderString2: String\n\
    \    var quotientString3: String\n    var remainderString3: String\n    var quotientString4:\
    \ String\n    var remainderString4: String\n    var quotientString5: String\n\
    \    var remainderString5: String\n    var quotientString6: String\n    var remainderString6:\
    \ String\n    var quotientString7: String\n    var remainderString7: String\n\
    \    var quotientString8: String\n    var remainderString8: String\n    var quotientString9:\
    \ String\n    var remainderString9: String\n    var quotientString10: String\n\
    \    var remainderString10: String\n    var quotientString11: String\n    var\
    \ remainderString11: String\n    var quotientString12: String\n    var remainderString12:\
    \ String\n    var quotientString13: String\n    var remainderString13: String\n\
    \    var quotientString14: String\n    var remainderString14: String\n    var\
    \ quotientString15: String\n    var remainderString15: String\n    var quotientString16:\
    \ String\n    var remainderString16: String\n    var quotientString17: String\n\
    \    var remainderString17: String\n    var quotientString18: String\n    var\
    \ remainderString18: String\n    var quotientString19: String\n    var remainderString19:\
    \ String\n    var quotientString20: String\n    var remainderString20: String\n\
    \    var quotientString21: String\n    var remainderString21: String\n    var\
    \ quotientString22: String\n    var remainderString22: String\n    var quotientString23:\
    \ String\n    var remainderString23: String\n    var quotientString24: String\n\
    \    var remainderString24: String\n    var quotientString25: String\n    var\
    \ remainderString25: String\n    var quotientString26: String\n    var remainderString26:\
    \ String\n    var quotientString27: String\n    var remainderString27: String\n\
    \    var quotientString28: String\n    var remainderString28: String\n    var\
    \ quotientString29: String\n    var remainderString29: String\n    var quotientString30:\
    \ String\n    var remainderString30: String\n    var quotientString31: String\n\
    \    var remainderString31: String\n    var quotientString32: String\n    var\
    \ remainderString32: String\n    var quotientString33: String\n    var remainderString33:\
    \ String\n    var quotientString34: String\n    var remainderString34: String\n\
    \    var quotientString35: String\n    var remainderString35: String\n    var\
    \ quotientString36: String\n    var ", "    let base10: Int = 10\n    let base16:\
    \ Int = 16\n    let base2: Int = 2\n    let base8: Int = 32\n    let base102:\
    \ Int = 102\n    let base162: Int = 162\n    let base1016: Int = 1016\n    let\
    \ base1616: Int = 1616\n    let base10162: Int = 10162\n    let base16162: Int\
    \ = 16162\n    let base101616: Int = 101616\n    let base161616: Int = 161616\n\
    \    let base1016162: Int = 1016162\n    let base1616162: Int = 1616162\n    let\
    \ base10161616: Int = 10161616\n    let base16161616: Int = 16161616\n    let\
    \ base101616162: Int = 101616162\n    let base161616162: Int = 161616162\n   \
    \ let base1016161616: Int = 1016161616\n    let base1616161616: Int = 1616161616\n\
    \    let base10161616162: Int = 10161616162\n    let base16161616162: Int = 16161616162\n\
    \    let base101616161616: Int = 101616161616\n    let base161616161616: Int =\
    \ 161616161616\n    let base1016161616162: Int = 1016161616162\n    let base1616161616162:\
    \ Int = 1616161616162\n    let base10161616161616: Int = 10161616161616\n    let\
    \ base16161616161616: Int = 16161616161616\n    let base101616161616162: Int =\
    \ 101616161616162\n    let base161616161616162: Int = 161616161616162\n    let\
    \ base1016161616161616: Int = 1016161616161616\n    let base1616161616161616:\
    \ Int = 1616161616161616\n    let base10161616161616162: Int = 10161616161616162\n\
    \    let base16161616161616162: Int = 16161616161616162\n    let base10", "  \
    \  var result = \"\"\n    var remainder: Int\n    var quotient: Int\n    var quotientString\
    \ = \"\"\n    var remainderString = \"\"\n    var quotientStringWithBase = \"\"\
    \n    var remainderStringWithBase = \"\"\n    var quotientStringWithBaseWithBase\
    \ = \"\"\n    var remainderStringWithBaseWithBase = \"\"\n    var quotientStringWithBaseWithBaseWithBase\
    \ = \"\"\n    var remainderStringWithBaseWithBaseWithBase = \"\"\n    var quotientStringWithBaseWithBaseWithBaseWithBase\
    \ = \"\"\n    var remainderStringWithBaseWithBaseWithBaseWithBase = \"\"\n   \
    \ var quotientStringWithBaseWithBaseWithBaseWithBaseWithBase = \"\"\n    var remainderStringWithBaseWithBaseWithBaseWithBaseWithBase\
    \ = \"\"\n    var quotientStringWithBaseWithBaseWithBaseWithBaseWithBaseWithBase\
    \ = \"\"\n    var remainderStringWithBaseWithBaseWithBaseWithBaseWithBaseWithBase\
    \ = \"\"\n    var quotientStringWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBase\
    \ = \"\"\n    var remainderStringWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBase\
    \ = \"\"\n    var quotientStringWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBase\
    \ = \"\"\n    var remainderStringWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBase\
    \ = \"\"\n    var quotientStringWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBase\
    \ = \"\"\n    var remainderStringWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBase\
    \ = \"\"\n    var quotientStringWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBase\
    \ = \"\"\n    var remainderStringWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBase\
    \ = \"\"\n    var quotientStringWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBase\
    \ = \"\"\n    var remainderStringWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBase\
    \ = \"\"\n    var quotientStringWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBase\
    \ = \"\"\n    var remainderStringWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBase",
  "    var result = \"\"\n    var remainder = x\n    var digit = 0\n    while remainder\
    \ > 0 {\n        remainder, remainder = remainder / base, digit\n        digit\
    \ = digit + 1\n    }\n    for _ in 0..digit {\n        result = String(result)\
    \ + String(base) + String(remainder)\n    }\n    return result", "    let bases\
    \ = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n    let baseIndex\
    \ = bases.index(base)!\n    let result = x.truncatingRemainder(dividingBy: base)\n\
    \    return String(result) + bases[baseIndex]", "    if base < 10 {\n        return\
    \ String(x)\n    }\n    var res = String(x)\n    var base = base\n    var digits\
    \ = String(x)\n    var i = 0\n    var j = 0\n    while i < len(digits) {\n   \
    \     if digits[i] == '0' {\n            digits[i] = '1'\n            i += 1\n\
    \        }\n        i += 1\n    }\n    while i < len(digits) {\n        if digits[i]\
    \ == '0' {\n            digits[i] = '1'\n            i += 1\n        }\n     \
    \   i += 1\n    }\n    while i < len(digits) {\n        if digits[i] == '0' {\n\
    \            digits[i] = '1'\n            i += 1\n        }\n        i += 1\n\
    \    }\n    while i < len(digits) {\n        if digits[i] == '0' {\n         \
    \   digits[i] = '1'\n            i += 1\n        }\n        i += 1\n    }\n  \
    \  while i < len(digits) {\n        if digits[i] == '0' {\n            digits[i]\
    \ = '1'\n            i += 1\n        }\n        i += 1\n    }\n    while i < len(digits)\
    \ {\n        if digits[i] == '0' {\n            digits[i] = '1'\n            i\
    \ += 1\n        }\n        i += 1\n    }\n    while i < len(digits) {\n      \
    \  if digits[i] == '0' {\n            digits[i] = '1'\n            i += 1\n  \
    \      }\n        i += 1\n    }\n    while i < len(digits) {\n        if digits[i]\
    \ == '0' {\n            digits[i] = '1'\n            i += 1\n        }\n     \
    \   i += 1\n    }\n    while i < len(digits) {\n        if digits[i] == '0' {\n\
    \            digits[i] = '1'\n            i += 1\n        }\n        i += 1\n\
    \    }\n    while i < len(digits) {\n        if digits[i] == '0' {\n         \
    \   digits[i] = '1'\n            i += 1\n        }\n        i += 1\n    }\n  \
    \  while i < len(digits) {\n        if digits[i] == '0' {\n            digits[i]\
    \ = '1'\n            i += 1\n        }\n        i += 1\n    }\n    while i < len(digits)\
    \ {\n        if digits[i] == '0' {\n            digits[i] = '1'\n            i\
    \ += 1\n        }\n        i += 1\n    }\n    while i < len(digits) {\n      \
    \  if digits[i] == '0' {\n            digits[i] = '1'\n            i += 1\n  \
    \      }\n        i += 1\n    }\n    while i < len(digits) {\n        if digits[i]\
    \ == '0' {\n            digits[i] = '1'\n            i += 1\n        }\n     \
    \   i += 1\n    }\n    while i < len(digits) {\n        if digits[i] == '0' {\n\
    \            digits[i] = '1'\n            i += 1\n        }\n        i += 1\n\
    \    }\n    while i < len(digits) {\n        if digits[i] == '0' {\n         \
    \   digits[i] = '1'\n            i += 1\n        }\n        i += 1\n    }\n  \
    \  while i < len(digits) {\n        if digits[i] == '0' {\n            ", "  \
    \  var result = \"\"\n    var remainder = x\n    var baseNum = base\n    while\
    \ remainder > 0 {\n        remainder, remainder = remainder / baseNum, baseNum\n\
    \        result = String(remainder) + result\n    }\n    return result", "   \
    \ var result = \"\"\n    var remainder = x\n    var digits = \"\"\n    var baseDigits\
    \ = \"\"\n    var baseDigitCount = 0\n    var digitCount = 0\n    var digitBase\
    \ = 0\n    var digitBaseCount = 0\n    var digitBaseDigitCount = 0\n    var digitBaseDigit\
    \ = 0\n    var digitBaseDigitCount = 0\n    var digitBaseDigit = 0\n    var digitBaseDigitCount\
    \ = 0\n    var digitBaseDigit = 0\n    var digitBaseDigitCount = 0\n    var digitBaseDigit\
    \ = 0\n    var digitBaseDigitCount = 0\n    var digitBaseDigit = 0\n    var digitBaseDigitCount\
    \ = 0\n    var digitBaseDigit = 0\n    var digitBaseDigitCount = 0\n    var digitBaseDigit\
    \ = 0\n    var digitBaseDigitCount = 0\n    var digitBaseDigit = 0\n    var digitBaseDigitCount\
    \ = 0\n    var digitBaseDigit = 0\n    var digitBaseDigitCount = 0\n    var digitBaseDigit\
    \ = 0\n    var digitBaseDigitCount = 0\n    var digitBaseDigit = 0\n    var digitBaseDigitCount\
    \ = 0\n    var digitBaseDigit = 0\n    var digitBaseDigitCount = 0\n    var digitBaseDigit\
    \ = 0\n    var digitBaseDigitCount = 0\n    var digitBaseDigit = 0\n    var digitBaseDigitCount\
    \ = 0\n    var digitBaseDigit = 0\n    var digitBaseDigitCount = 0\n    var digitBaseDigit\
    \ = 0\n    var digitBaseDigitCount = 0\n    var digitBaseDigit = 0\n    var digitBaseDigitCount\
    \ = 0\n    var digitBaseDigit = 0\n    var digitBaseDigitCount = 0\n    var digitBaseDigit\
    \ = 0\n    var digitBaseDigitCount = 0\n    var digitBaseDigit = 0\n    var digitBaseDigitCount\
    \ = 0\n    var digitBaseDigit = 0\n    var digitBaseDigitCount = 0\n    var digitBaseDigit\
    \ = 0\n    var digitBaseDigitCount = 0\n    var digitBaseDigit = 0\n    var digitBaseDigitCount\
    \ = 0\n    var digitBaseDigit = 0\n    var digitBaseDigitCount = 0\n    var digitBaseDigit\
    \ = 0\n    var digitBaseDigitCount = 0\n    var digitBaseDigit = 0\n    var digitBaseDigitCount\
    \ = 0\n    var digitBaseDigit = 0\n    var digitBaseDigitCount = 0\n    var digitBaseDigit\
    \ = 0\n    var digitBaseDigitCount = 0\n    var digitBaseDigit = 0\n    var digitBaseDigitCount\
    \ = 0\n    var digitBaseDigit = 0\n    var digitBaseDigitCount = 0\n    var digitBaseDigit\
    \ = 0\n    var digitBaseDigitCount = 0\n    var digitBaseDigit = 0\n    var digitBaseDigitCount\
    \ = 0\n    var digitBaseDigit = 0\n    var digitBaseDigitCount = 0\n    var digitBaseDigit\
    \ = 0\n    var digitBaseDigitCount = 0\n    var digitBaseDigit = 0\n    var digitBaseDigitCount\
    \ = 0\n    var digitBaseDigit = 0\n    var digit", "    let bases = [\"\", \"\
    K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n    let baseIndex = bases.index(base)!\n\
    \    let x = x.toInt()\n    let result = String(x)\n    let index = result.index(result.startIndex,\
    \ offsetBy: 0)\n    let newBase = bases[baseIndex]\n    return result.substring(from:\
    \ index)! + newBase", "    var result = \"\"\n    var remainder = x\n    var digit\
    \ = 0\n    while remainder > 0 {\n        remainder, remainder = remainder / base,\
    \ digit\n        result = String(digit) + result\n        digit += 1\n    }\n\
    \    return result", "    var result = \"\"\n    var remainder: Int\n    var quotient:\
    \ Int\n    var digit: Int\n    var baseDigit: Int\n    var baseDigitString: String\n\
    \    var baseDigitStringLength: Int\n    var baseDigitStringLength2: Int\n   \
    \ var baseDigitStringLength3: Int\n    var baseDigitStringLength4: Int\n    var\
    \ baseDigitStringLength5: Int\n    var baseDigitStringLength6: Int\n    var baseDigitStringLength7:\
    \ Int\n    var baseDigitStringLength8: Int\n    var baseDigitStringLength9: Int\n\
    \    var baseDigitStringLength10: Int\n    var baseDigitStringLength11: Int\n\
    \    var baseDigitStringLength12: Int\n    var baseDigitStringLength13: Int\n\
    \    var baseDigitStringLength14: Int\n    var baseDigitStringLength15: Int\n\
    \    var baseDigitStringLength16: Int\n    var baseDigitStringLength17: Int\n\
    \    var baseDigitStringLength18: Int\n    var baseDigitStringLength19: Int\n\
    \    var baseDigitStringLength20: Int\n    var baseDigitStringLength21: Int\n\
    \    var baseDigitStringLength22: Int\n    var baseDigitStringLength23: Int\n\
    \    var baseDigitStringLength24: Int\n    var baseDigitStringLength25: Int\n\
    \    var baseDigitStringLength26: Int\n    var baseDigitStringLength27: Int\n\
    \    var baseDigitStringLength28: Int\n    var baseDigitStringLength29: Int\n\
    \    var baseDigitStringLength30: Int\n    var baseDigitStringLength31: Int\n\
    \    var baseDigitStringLength32: Int\n    var baseDigitStringLength33: Int\n\
    \    var baseDigitStringLength34: Int\n    var baseDigitStringLength35: Int\n\
    \    var baseDigitStringLength36: Int\n    var baseDigitStringLength37: Int\n\
    \    var baseDigitStringLength38: Int\n    var baseDigitStringLength39: Int\n\
    \    var baseDigitStringLength40: Int\n    var baseDigitStringLength41: Int\n\
    \    var baseDigitStringLength42: Int\n    var baseDigitStringLength43: Int\n\
    \    var baseDigitStringLength44: Int\n    var baseDigitStringLength45: Int\n\
    \    var baseDigitStringLength46: Int\n    var baseDigitStringLength47: Int\n\
    \    var baseDigitStringLength48: Int\n    var baseDigitStringLength49: Int\n\
    \    var baseDigitStringLength50: Int\n    var baseDigitStringLength51: Int\n\
    \    var baseDigitStringLength52: Int\n    var baseDigitStringLength53: Int\n\
    \    var baseDigitStringLength54: ", "    if base < 10 {\n        return String(x)\n\
    \    }\n    var result = \"\"\n    var remainder = x % base\n    while remainder\
    \ != 0 {\n        result = String(remainder) + result\n        remainder = x %\
    \ base\n    }\n    return String(result)", "    if base < 10 {\n        return\
    \ String(x)\n    }\n    var result = \"\"\n    var remainder = x\n    var digit\
    \ = base\n    while remainder > 0 {\n        remainder, remainder = remainder\
    \ / digit, base\n        digit--\n    }\n    while digit > 0 {\n        result\
    \ = String(digit) + result\n        digit--\n    }\n    return result", "    let\
    \ bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n   \
    \ let baseIndex = bases.index(base)!\n    let result = String(Int(x) / Int(base))\n\
    \    let index = result.characters.count - 1\n    let lastChar = result.characters.last!\n\
    \    if lastChar == \"0\" {\n        return change_base(Int(result), bases[baseIndex])\n\
    \    } else {\n        return change_base(Int(result), bases[baseIndex] + String(lastChar))\n\
    \    }", "    if base < 10 {\n        return String(x)\n    }\n    var result\
    \ = \"\"\n    var remainder = x\n    var digit = base\n    while remainder > 0\
    \ {\n        remainder, remainder = remainder / digit, digit\n        digit--\n\
    \    }\n    while digit > 0 {\n        result = String(digit) + result\n     \
    \   digit--\n    }\n    return result", "    let bases = [\"\", \"K\", \"M\",\
    \ \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n    let base_index = bases.firstIndex(of:\
    \ base)!\n    let base_name = bases[base_index]\n    let base_value = Double(base_name)\
    \ ?? 0\n    let base_value = Double(x.truncatingRemainder(dividingBy: base_value))\n\
    \    return String(format: \"%.\\(base)f\", base_value)", "    var s = String(x)\n\
    \    var baseStr = String(base)\n    if baseStr == \"10\" {\n        return String(Int(x)\
    \ / Int(base))\n    }\n    if baseStr == \"11\" {\n        return String(Int(x)\
    \ / Int(base))\n    }\n    if baseStr == \"12\" {\n        return String(Int(x)\
    \ / Int(base))\n    }\n    if baseStr == \"13\" {\n        return String(Int(x)\
    \ / Int(base))\n    }\n    if baseStr == \"14\" {\n        return String(Int(x)\
    \ / Int(base))\n    }\n    if baseStr == \"15\" {\n        return String(Int(x)\
    \ / Int(base))\n    }\n    if baseStr == \"16\" {\n        return String(Int(x)\
    \ / Int(base))\n    }\n    if baseStr == \"17\" {\n        return String(Int(x)\
    \ / Int(base))\n    }\n    if baseStr == \"18\" {\n        return String(Int(x)\
    \ / Int(base))\n    }\n    if baseStr == \"19\" {\n        return String(Int(x)\
    \ / Int(base))\n    }\n    if baseStr == \"20\" {\n        return String(Int(x)\
    \ / Int(base))\n    }\n    if baseStr == \"21\" {\n        return String(Int(x)\
    \ / Int(base))\n    }\n    if baseStr == \"22\" {\n        return String(Int(x)\
    \ / Int(base))\n    }\n    if baseStr == \"23\" {\n        return String(Int(x)\
    \ / Int(base))\n    }\n    if baseStr == \"24\" {\n        return String(Int(x)\
    \ / Int(base))\n    }\n    if baseStr == \"25\" {\n        return String(Int(x)\
    \ / Int(base))\n    }\n    if baseStr == \"26\" {\n        return String(Int(x)\
    \ / Int(base))\n    }\n    if baseStr == \"27\" {\n        return String(Int(x)\
    \ / Int(base))\n    }\n    if baseStr == \"28\" {\n        return String(Int(x)\
    \ / Int(base))\n    }\n    if baseStr == \"29\" {\n        return String(Int(x)\
    \ / Int(base))\n    }\n    if baseStr == \"30\" {\n        return String(Int(x)\
    \ / Int(base))\n    }\n    if baseStr == \"31\" {\n        return String(Int(x)\
    \ / Int(base))\n    }\n    if baseStr == \"32\" {\n        return String(Int(x)\
    \ / Int(base))\n    }\n    if baseStr == \"33\" {\n        return String(Int(x)\
    \ / Int(base))\n    }\n    if baseStr == \"34\" {\n        return String(Int(x)\
    \ / Int(base))\n    }\n    if baseStr == \"35\" {\n        return String(Int(x)\
    \ / Int(base))\n    }\n    if baseStr == \"36\" {", "    let bases = [\"\", \"\
    K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n    let base_index = bases.index(base)!\n\
    \    let result = x.toInt().toString(base_index)\n    return result", "    if\
    \ base < 10 {\n        return String(x)\n    }\n    var res = \"\"\n    var digits\
    \ = String(x)\n    var baseDigits = String(base)\n    var baseLength = baseDigits.count\n\
    \    var digitLength = digits.count\n    var remainder = digits\n    var remainderLength\
    \ = remainder.count\n    while remainderLength > 0 {\n        var remainderDigits\
    \ = remainder.substringToIndex(remainderLength)\n        var remainderBaseDigits\
    \ = remainderDigits.substringToIndex(baseLength)\n        var remainderBase =\
    \ Int(remainderBaseDigits)\n        var remainderDigit = Int(remainderDigits)\n\
    \        var remainderBaseLength = remainderBase.count\n        var remainderDigitLength\
    \ = remainderDigit.count\n        var remainderRemainder = remainder.substringFromIndex(remainderLength)\n\
    \        var remainderRemainderLength = remainderRemainder.count\n        var\
    \ remainderRemainderDigits = remainderRemainder.substringToIndex(remainderRemainderLength)\n\
    \        var remainderRemainderBaseDigits = remainderRemainderDigits.substringToIndex(baseLength)\n\
    \        var remainderRemainderBase = Int(remainderRemainderBaseDigits)\n    \
    \    var remainderRemainderDigit = Int(remainderRemainderDigits)\n        var\
    \ remainderRemainderBaseLength = remainderRemainderBase.count\n        var remainderRemainderDigitLength\
    \ = remainderRemainderDigit.count\n        var remainderRemainderRemainder = remainderRemainder.substringFromIndex(remainderRemainderLength)\n\
    \        var remainderRemainderRemainderDigits = remainderRemainderRemainder.substringToIndex(remainderRemainderRemainderLength)\n\
    \        var remainderRemainderRemainderBaseDigits = remainderRemainderRemainderDigits.substringToIndex(baseLength)\n\
    \        var remainderRemainderRemainderBase = Int(remainderRemainderRemainderBaseDigits)\n\
    \        var remainderRemainderRemainderDigit = Int(remainderRemainderRemainderDigits)\n\
    \        var remainderRemainderRemainderBaseLength = remainderRemainderRemainderBase.count\n\
    \        var remainderRemainderRemainderDigitLength = remainderRemainderRemainderDigit.count\n\
    \        var remainderRemainderRemainderRemainder = remainderRemainderRemainder.substringFromIndex(remainderRemainderRemainderLength)\n\
    \        var remainderRemainderRemainderRemainderDigits = remainderRemainderRemainderRemainder.substringToIndex(remainderRemainderRemainderRemainderLength)\n\
    \        var remainderRemainderRemainderRemainderBaseDigits = remainderRemainderRemainderRemainderDigits.substringToIndex(baseLength)",
  "    var s = String(x)\n    var baseString = String(base)\n    if baseString ==\
    \ \"10\" {\n        return String(x)\n    }\n    if baseString == \"16\" {\n \
    \       return String(Int(x) / 16)\n    }\n    if baseString == \"8\" {\n    \
    \    return String(Int(x) / 8)\n    }\n    if baseString == \"2\" {\n        return\
    \ String(Int(x) / 2)\n    }\n    if baseString == \"1\" {\n        return String(Int(x))\n\
    \    }\n    if baseString == \"16\" {\n        return String(Int(x) / 16)\n  \
    \  }\n    if baseString == \"8\" {\n        return String(Int(x) / 8)\n    }\n\
    \    if baseString == \"2\" {\n        return String(Int(x) / 2)\n    }\n    if\
    \ baseString == \"1\" {\n        return String(Int(x))\n    }\n    if baseString\
    \ == \"10\" {\n        return String(Int(x) / 10)\n    }\n    if baseString ==\
    \ \"16\" {\n        return String(Int(x) / 16)\n    }\n    if baseString == \"\
    8\" {\n        return String(Int(x) / 8)\n    }\n    if baseString == \"2\" {\n\
    \        return String(Int(x) / 2)\n    }\n    if baseString == \"1\" {\n    \
    \    return String(Int(x))\n    }\n    if baseString == \"10\" {\n        return\
    \ String(Int(x) / 10)\n    }\n    if baseString == \"16\" {\n        return String(Int(x)\
    \ / 16)\n    }\n    if baseString == \"8\" {\n        return String(Int(x) / 8)\n\
    \    }\n    if baseString == \"2\" {\n        return String(Int(x) / 2)\n    }\n\
    \    if baseString == \"1\" {\n        return String(Int(x))\n    }\n    if baseString\
    \ == \"10\" {\n        return String(Int(x) / 10)\n    }\n    if baseString ==\
    \ \"16\" {\n        return String(Int(x) / 16)\n    }\n    if baseString == \"\
    8\" {\n        return String(Int(x) / 8)\n    }\n    if baseString == \"2\" {\n\
    \        return String(Int(x) / 2)\n    }\n    if baseString == \"1\" {\n    \
    \    return String(Int(x))\n    }\n    if baseString == \"10\" {\n        return\
    \ String(Int(x) / 10)\n    }\n    if baseString == \"16\" {\n        return String(Int(x)\
    \ / 16)\n    }\n    if baseString == \"8\" {\n        return String(Int(x) / 8)\n\
    \    }\n    if baseString == \"2\" {\n        return String(Int(x) / 2)\n    }\n\
    \    if baseString == \"1\" {\n        return String(Int(x))\n    }\n    if baseString\
    \ == \"10\" {\n        return String(Int(x) / 10)\n    }\n    if baseString ==\
    \ \"16\" {\n        return String(Int(x) / 16)\n    }\n    if ", "    var result\
    \ = \"\"\n    var remainder: Int\n    var quotient: Int\n    var quotientString:\
    \ String\n    var remainderString: String\n    var quotientStringInt: Int\n  \
    \  var remainderStringInt: Int\n    var quotientStringInt2: Int\n    var remainderStringInt2:\
    \ Int\n    var quotientStringInt3: Int\n    var remainderStringInt3: Int\n   \
    \ var quotientStringInt4: Int\n    var remainderStringInt4: Int\n    var quotientStringInt5:\
    \ Int\n    var remainderStringInt5: Int\n    var quotientStringInt6: Int\n   \
    \ var remainderStringInt6: Int\n    var quotientStringInt7: Int\n    var remainderStringInt7:\
    \ Int\n    var quotientStringInt8: Int\n    var remainderStringInt8: Int\n   \
    \ var quotientStringInt9: Int\n    var remainderStringInt9: Int\n    var quotientStringInt10:\
    \ Int\n    var remainderStringInt10: Int\n    var quotientStringInt11: Int\n \
    \   var remainderStringInt11: Int\n    var quotientStringInt12: Int\n    var remainderStringInt12:\
    \ Int\n    var quotientStringInt13: Int\n    var remainderStringInt13: Int\n \
    \   var quotientStringInt14: Int\n    var remainderStringInt14: Int\n    var quotientStringInt15:\
    \ Int\n    var remainderStringInt15: Int\n    var quotientStringInt16: Int\n \
    \   var remainderStringInt16: Int\n    var quotientStringInt17: Int\n    var remainderStringInt17:\
    \ Int\n    var quotientStringInt18: Int\n    var remainderStringInt18: Int\n \
    \   var quotientStringInt19: Int\n    var remainderStringInt19: Int\n    var quotientStringInt20:\
    \ Int\n    var remainderStringInt20: Int\n    var quotientStringInt21: Int\n \
    \   var remainderStringInt21: Int\n    var quotientStringInt22: Int\n    var remainderStringInt22:\
    \ Int\n    var quotientStringInt23: Int\n    var remainderStringInt23: Int\n \
    \   var quotientStringInt24: Int\n    var remainderStringInt24: Int\n    var quotientStringInt25:\
    \ Int\n    var remainderStringInt25: Int\n    var quotientStringInt26: Int\n \
    \   var remainderStringInt26: Int\n    var quotientStringInt27: Int\n    var remainderStringInt27:\
    \ Int\n    var quotientStringInt28: Int", "    if base < 10 {\n        return\
    \ String(x)\n    }\n    var result = \"\"\n    var remainder = x\n    var digit\
    \ = 0\n    while remainder > 0 {\n        remainder, remainder = remainder / base,\
    \ digit\n        digit = digit * base\n    }\n    if digit > 0 {\n        result\
    \ = String(digit) + result\n    }\n    return result", "    var result = \"\"\n\
    \    var remainder = x\n    var quotient = base\n    while quotient > 0 {\n  \
    \      remainder = remainder % base\n        result = String(quotient) + result\n\
    \        quotient = quotient / base\n    }\n    if remainder > 0 {\n        result\
    \ = String(remainder) + result\n    }\n    return result", "    var result = \"\
    \"\n    var remainder = x\n    var divisor = base\n    while remainder > 0 {\n\
    \        remainder, remainder = remainder / divisor, base\n        divisor *=\
    \ base\n    }\n    while divisor > 0 {\n        result = String(remainder) + result\n\
    \        divisor = divisor / base\n    }\n    return result", "    var s = \"\"\
    \n    var i = 0\n    var digit = base\n    var digits = String(x)\n    var digits_len\
    \ = digits.length\n    for (i; i < digits_len; i += 1) {\n        var digit =\
    \ digits[i]\n        if digit == \"0\" {\n            digit = base\n        }\n\
    \        if digit < base {\n            digit *= base\n        }\n        s +=\
    \ digit\n    }\n    return s", "    var s = String(x)\n    var base = base\n \
    \   var i = 0\n    var j = 0\n    var k = 0\n    var n = 0\n    var z = 0\n  \
    \  var c = 0\n    var ndigits = 0\n    var digits = \"\"\n    var digit = \"\"\
    \n    var digitbase = 0\n    var digitbase2 = 0\n    var digitbase3 = 0\n    var\
    \ digitbase4 = 0\n    var digitbase5 = 0\n    var digitbase6 = 0\n    var digitbase7\
    \ = 0\n    var digitbase8 = 0\n    var digitbase9 = 0\n    var digitbase10 = 0\n\
    \    var digitbase11 = 0\n    var digitbase12 = 0\n    var digitbase13 = 0\n \
    \   var digitbase14 = 0\n    var digitbase15 = 0\n    var digitbase16 = 0\n  \
    \  var digitbase17 = 0\n    var digitbase18 = 0\n    var digitbase19 = 0\n   \
    \ var digitbase20 = 0\n    var digitbase21 = 0\n    var digitbase22 = 0\n    var\
    \ digitbase23 = 0\n    var digitbase24 = 0\n    var digitbase25 = 0\n    var digitbase26\
    \ = 0\n    var digitbase27 = 0\n    var digitbase28 = 0\n    var digitbase29 =\
    \ 0\n    var digitbase30 = 0\n    var digitbase31 = 0\n    var digitbase32 = 0\n\
    \    var digitbase33 = 0\n    var digitbase34 = 0\n    var digitbase35 = 0\n \
    \   var digitbase36 = 0\n    var digitbase37 = 0\n    var digitbase38 = 0\n  \
    \  var digitbase39 = 0\n    var digitbase40 = 0\n    var digitbase41 = 0\n   \
    \ var digitbase42 = 0\n    var digitbase43 = 0\n    var digitbase44 = 0\n    var\
    \ digitbase45 = 0\n    var digitbase46 = 0\n    var digitbase47 = 0\n    var digitbase48\
    \ = 0\n    var digitbase49 = 0\n    var digitbase50 = 0\n    var digitbase51 =\
    \ 0\n    var digitbase52 = 0\n    var digitbase53 = 0\n    var digitbase54 = 0\n\
    \    var digitbase55 = 0\n    var digitbase56 = 0\n    var digitbase57 = 0\n \
    \   var digitbase58 = 0\n    var digitbase59 = 0\n    var digitbase60 = 0\n  \
    \  var digitbase61 = 0\n    var digitbase62 = 0\n    var digitbase63 = 0\n   \
    \ var digitbase64 = 0\n    var digitbase65 = 0\n    var digitbase66 = 0\n    var\
    \ digitbase67 = 0\n    var digitbase68 = 0\n    var digitbase69 = 0\n    var digitbase70\
    \ = 0\n    var digitbase71 = 0\n    var digitbase72 = 0\n    var digitbase73 =\
    \ 0\n    var digitbase74 = 0\n    var digitbase75 = 0\n    var digitbase76 = 0\n\
    \    var digitbase77 = 0\n    var digitbase78 = 0", "    var result = \"\"\n \
    \   var remainder: Int\n    var quotient: Int\n\n    if base < 2 {\n        return\
    \ \"\"\n    }\n\n    if base == 10 {\n        return x.toString(10)\n    }\n\n\
    \    remainder = x % base\n    quotient = x / base\n\n    while quotient != 0\
    \ {\n        result = String(quotient) + String(remainder) + result\n        remainder\
    \ = remainder % base\n        quotient = quotient / base\n    }\n\n    return\
    \ String(quotient) + result", "    var s = String(x)\n    var r = \"\"\n    var\
    \ i = 0\n    while i < len(s) {\n        var c = s[i]\n        if c >= \"0\" &&\
    \ c <= \"9\" {\n            c -= base\n            r += \"\\(Int(c))\"\n     \
    \   } else {\n            r += \"\\(c)\"\n        }\n        i += 1\n    }\n \
    \   return r", "    var result = \"\"\n    var remainder = x\n    var quotient\
    \ = base\n\n    while quotient > 0 {\n        if quotient % base == 0 {\n    \
    \        quotient /= base\n            result = String(quotient) + result\n  \
    \      } else {\n            quotient = quotient / base\n        }\n    }\n\n\
    \    if remainder > 0 {\n        result = String(remainder) + result\n    }\n\n\
    \    return result", "    var result = \"\"\n    var remainder = x\n    var quotient\
    \ = base\n    while remainder > 0 {\n        remainder, remainder = remainder\
    \ / base, quotient\n        quotient = quotient * base\n    }\n    while quotient\
    \ > 0 {\n        result = String(quotient) + result\n        quotient = quotient\
    \ / base\n    }\n    return result", "    var result = \"\"\n    var digits =\
    \ \"\"\n    var power = 1\n    var i = 0\n    var j = 0\n    var k = 0\n    var\
    \ n = 0\n    var digit: Int\n    var digits: String\n    var base: Int\n    var\
    \ powers: String\n    var power: Int\n    var powers: String\n    var powers:\
    \ String\n    var powers: String\n    var powers: String\n    var powers: String\n\
    \    var powers: String\n    var powers: String\n    var powers: String\n    var\
    \ powers: String\n    var powers: String\n    var powers: String\n    var powers:\
    \ String\n    var powers: String\n    var powers: String\n    var powers: String\n\
    \    var powers: String\n    var powers: String\n    var powers: String\n    var\
    \ powers: String\n    var powers: String\n    var powers: String\n    var powers:\
    \ String\n    var powers: String\n    var powers: String\n    var powers: String\n\
    \    var powers: String\n    var powers: String\n    var powers: String\n    var\
    \ powers: String\n    var powers: String\n    var powers: String\n    var powers:\
    \ String\n    var powers: String\n    var powers: String\n    var powers: String\n\
    \    var powers: String\n    var powers: String\n    var powers: String\n    var\
    \ powers: String\n    var powers: String\n    var powers: String\n    var powers:\
    \ String\n    var powers: String\n    var powers: String\n    var powers: String\n\
    \    var powers: String\n    var powers: String\n    var powers: String\n    var\
    \ powers: String\n    var powers: String\n    var powers: String\n    var powers:\
    \ String\n    var powers: String\n    var powers: String\n    var powers: String\n\
    \    var powers: String\n    var powers: String\n    var powers: String\n    var\
    \ powers: String\n    var powers: String\n    var powers: String\n    var powers:\
    \ String\n    var powers: String\n    var powers: String\n    var powers: String\n\
    \    var powers: String\n    var powers: String\n    var powers: String\n    var\
    \ powers: String\n    var powers: String\n    var powers: String\n    var powers:\
    \ String\n    var powers: String\n    var powers: String\n    var powers: String\n\
    \    var powers: String\n    var powers: String\n    var powers: String\n    var\
    \ powers: String\n    var powers: String\n    var powers: String\n    var powers:\
    \ String\n    var powers: String\n    var powers: String\n    var powers: String\n\
    \    var powers: String\n    var powers: String\n    var powers: String\n    var\
    \ powers: String\n    var powers: String\n    var powers: String\n    var powers: ",
  "    let bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n\
    \    let baseIndex = bases.firstIndex(of: base)!\n    let baseString = bases[baseIndex]\n\
    \    let baseInt = Int(baseString)\n    let baseFloat = baseInt * pow(10.0, Double(base))\n\
    \    return String(format: \"%.f\", baseFloat)", "    var result: String = \"\"\
    \n    var baseString: String = \"\"\n    if base < 10 {\n        baseString =\
    \ String(base)\n    } else {\n        baseString = String(base-1)\n    }\n   \
    \ if x < 0 {\n        result = \"-\" + change_base(-x, base)\n    } else {\n \
    \       var remainder: Int\n        if x < 0 {\n            remainder = abs(x)\n\
    \        } else {\n            remainder = abs(x)\n        }\n        var quotient:\
    \ Int\n        if remainder > 0 {\n            quotient = remainder / base\n \
    \       } else {\n            quotient = remainder / base\n        }\n       \
    \ if quotient > 0 {\n            result = String(quotient) + baseString\n    \
    \    } else {\n            result = baseString + String(quotient)\n        }\n\
    \    }\n    return result", "    var result = \"\"\n    var remainder = x\n  \
    \  var quotient = 0\n    var quotientString = \"\"\n    var remainderString =\
    \ \"\"\n    var baseString = \"\"\n    var baseStringString = \"\"\n    var baseStringStringString\
    \ = \"\"\n    var baseStringStringStringString = \"\"\n    var baseStringStringStringStringString\
    \ = \"\"\n    var baseStringStringStringStringStringString = \"\"\n    var baseStringStringStringStringStringStringString\
    \ = \"\"\n    var baseStringStringStringStringStringStringStringString = \"\"\n\
    \    var baseStringStringStringStringStringStringStringStringString = \"\"\n \
    \   var baseStringStringStringStringStringStringStringStringStringString = \"\"\
    \n    var baseStringStringStringStringStringStringStringStringStringStringString\
    \ = \"\"\n    var baseStringStringStringStringStringStringStringStringStringStringString\
    \ = \"\"\n    var baseStringStringStringStringStringStringStringStringStringStringStringString\
    \ = \"\"\n    var baseStringStringStringStringStringStringStringStringStringStringStringString\
    \ = \"\"\n    var baseStringStringStringStringStringStringStringStringStringStringStringString\
    \ = \"\"\n    var baseStringStringStringStringStringStringStringStringStringStringStringStringString\
    \ = \"\"\n    var baseStringStringStringStringStringStringStringStringStringStringStringStringString\
    \ = \"\"\n    var baseStringStringStringStringStringStringStringStringStringStringStringStringStringString\
    \ = \"\"\n    var baseStringStringStringStringStringStringStringStringStringStringStringStringStringStringString\
    \ = \"\"\n    var baseStringStringStringStringStringStringStringStringStringStringStringStringStringStringString\
    \ = \"\"\n    var baseStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringString\
    \ = \"\"\n    var baseStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringString\
    \ = \"\"\n    var baseStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringString\
    \ = \"\"\n    var baseStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringString\
    \ = \"\"\n    var baseStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringString\
    \ = \"\"\n    var baseStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringString\
    \ = \"\"\n    var baseStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringString\
    \ = \"\"\n    var baseStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringString\
    \ = \"\"\n    var baseStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringString\
    \ = \"\"\n    var baseStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringString\
    \ = \"\"\n    var base", "    var result = \"\"\n    var remainder = x\n    var\
    \ digit = 0\n    while remainder > 0 {\n        digit = remainder % base\n   \
    \     remainder = remainder / base\n        result = String(digit) + result\n\
    \    }\n    return result", "    let mut s = String::new();\n    let mut digits\
    \ = String::new();\n    let mut remainder = 0;\n    while x >= base {\n      \
    \  remainder = x % base;\n        digits.push(format!(\"{}\", remainder));\n \
    \       x = x / base;\n    }\n    digits.push(format!(\"{}\", x));\n    s += digits.clone();\n\
    \    return s;", "    let bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"\
    E\", \"Z\", \"Y\"]\n    let baseIndex = bases.index(base)!\n    let result = String(x)\n\
    \    let index = result.index(result.startIndex, offsetBy: -2)\n    if index !=\
    \ -1 {\n        let result = result[index...].trimmingCharacters(in: CharacterSet.decimalDigits.inverted)\n\
    \        let index = result.index(result.startIndex, offsetBy: -2)\n        if\
    \ index != -1 {\n            let result = result[index...].trimmingCharacters(in:\
    \ CharacterSet.decimalDigits.inverted)\n            let index = result.index(result.startIndex,\
    \ offsetBy: -2)\n            if index != -1 {\n                let result = result[index...].trimmingCharacters(in:\
    \ CharacterSet.decimalDigits.inverted)\n                let index = result.index(result.startIndex,\
    \ offsetBy: -2)\n                if index != -1 {\n                    let result\
    \ = result[index...].trimmingCharacters(in: CharacterSet.decimalDigits.inverted)\n\
    \                    let index = result.index(result.startIndex, offsetBy: -2)\n\
    \                    if index != -1 {\n                        let result = result[index...].trimmingCharacters(in:\
    \ CharacterSet.decimalDigits.inverted)\n                        let index = result.index(result.startIndex,\
    \ offsetBy: -2)\n                        if index != -1 {\n                  \
    \          let result = result[index...].trimmingCharacters(in: CharacterSet.decimalDigits.inverted)\n\
    \                            let index = result.index(result.startIndex, offsetBy:\
    \ -2)\n                            if index != -1 {\n                        \
    \        let result = result[index...].trimmingCharacters(in: CharacterSet.decimalDigits.inverted)\n\
    \                                let index = result.index(result.startIndex, offsetBy:\
    \ -2)\n                                if index != -1 {\n                    \
    \                let result = result[index...].trimmingCharacters(in: CharacterSet.decimalDigits.inverted)\n\
    \                                    let index = result.index(result.startIndex,\
    \ offsetBy: -2)\n                                    if index != -1 {\n      \
    \                                  let result = result[index...].trimmingCharacters(in:\
    \ CharacterSet.decimalDigits.inverted)\n                                     \
    \   let index = result.index(result.startIndex, offsetBy: -2)\n              \
    \                          if index != -1 {\n                                \
    \            let result = result[index...].trimmingCharacters(in: CharacterSet.decimalDigits.inverted)\n\
    \                                            let index = result.index(result.startIndex,\
    \ offsetBy: -2)\n                                            if index != -1 {\n\
    \                                                let result = result[index...].trimmingCharacters(in:\
    \ CharacterSet.decimalDigits.inverted)\n                                     \
    \           let index = result.index(result.startIndex, offsetBy: -2)\n      \
    \                                          if index != ", "    if base < 10 {\n\
    \        return String(x)\n    }\n    var result = \"\"\n    var remainder: Int\n\
    \    var quotient: Int\n    var quotientString: String\n    var remainderString:\
    \ String\n    var quotientStringLen: Int\n    var remainderStringLen: Int\n  \
    \  var quotientStringLen2: Int\n    var remainderStringLen2: Int\n    var quotientStringLen3:\
    \ Int\n    var remainderStringLen3: Int\n    var quotientStringLen4: Int\n   \
    \ var remainderStringLen4: Int\n    var quotientStringLen5: Int\n    var remainderStringLen5:\
    \ Int\n    var quotientStringLen6: Int\n    var remainderStringLen6: Int\n   \
    \ var quotientStringLen7: Int\n    var remainderStringLen7: Int\n    var quotientStringLen8:\
    \ Int\n    var remainderStringLen8: Int\n    var quotientStringLen9: Int\n   \
    \ var remainderStringLen9: Int\n    var quotientStringLen10: Int\n    var remainderStringLen10:\
    \ Int\n    var quotientStringLen11: Int\n    var remainderStringLen11: Int\n \
    \   var quotientStringLen12: Int\n    var remainderStringLen12: Int\n    var quotientStringLen13:\
    \ Int\n    var remainderStringLen13: Int\n    var quotientStringLen14: Int\n \
    \   var remainderStringLen14: Int\n    var quotientStringLen15: Int\n    var remainderStringLen15:\
    \ Int\n    var quotientStringLen16: Int\n    var remainderStringLen16: Int\n \
    \   var quotientStringLen17: Int\n    var remainderStringLen17: Int\n    var quotientStringLen18:\
    \ Int\n    var remainderStringLen18: Int\n    var quotientStringLen19: Int\n \
    \   var remainderStringLen19: Int\n    var quotientStringLen20: Int\n    var remainderStringLen20:\
    \ Int\n    var quotientStringLen21: Int\n    var remainderStringLen21: Int\n \
    \   var quotientStringLen22: Int\n    var remainderStringLen22: Int\n    var quotientStringLen23:\
    \ Int\n    var remainderStringLen23: Int\n    var quotientStringLen24: Int\n \
    \   var remainderStringLen24: Int\n    var quotientStringLen25: Int\n    var remainderStringLen25:\
    \ Int\n    var quotientStringLen26: Int\n    var remainderStringLen26: Int\n \
    \   var quotientStringLen27: Int\n    var remainderStringLen", "    if base <\
    \ 10 {\n        return \"\"\n    }\n    var res = \"\"\n    var i = 0\n    for\
    \ _ in x {\n        if i == base {\n            res += \"1\"\n        } else {\n\
    \            res += \"0\"\n        }\n        i += 1\n    }\n    return res",
  "    var result = \"\"\n    var remainder = x\n    var divisor = base\n    while\
    \ remainder > 0 {\n        remainder, remainder = remainder / divisor, base\n\
    \        divisor *= base\n    }\n    while divisor > 0 {\n        result = String(remainder)\
    \ + result\n        divisor--\n    }\n    return result", "    var result = \"\
    \"\n    var remainder = x\n    var digit = 0\n    while remainder > 0 {\n    \
    \    digit = remainder % base\n        remainder = remainder / base\n        result\
    \ = String(digit) + result\n    }\n    return result", "    let base10 = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    let base16 = \"0123456789abcdefghijklmnopqrstuvwxyz\"\n    let base32 =\
    \ \"0123456789abcdefghijklmnopqrstuvwxyz234567\"\n    let base36 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    let base48 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    \n    let base62 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"\
    \n    let base64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\
    \n    let base96 = \"\"\n    let base128 = \"\"\n    let base160 = \"\"\n    let\
    \ base256 = \"\"\n    let base324 = \"\"\n    let base409 = \"\"\n    let base512\
    \ = \"\"\n    let base644 = \"\"\n    let base819 = \"\"\n    let base1024 = \"\
    \"\n    let base1280 = \"\"\n    let base1619 = \"\"\n    let base256 = \"\"\n\
    \    let base324 = \"\"\n    let base409 = \"\"\n    let base512 = \"\"\n    let\
    \ base644 = \"\"\n    let base819 = \"\"\n    let base1024 = \"\"\n    let base1280\
    \ = \"\"\n    let base1619 = \"\"\n    let base256 = \"\"\n    let base324 = \"\
    \"\n    let base409 = \"\"\n    let base512 = \"\"\n    let base644 = \"\"\n \
    \   let base819 = \"\"\n    let base1024 = \"\"\n    let base1280 = \"\"\n   \
    \ let base1619 = \"\"\n    let base256 = \"\"\n    let base324 = \"\"\n    let\
    \ base409 = \"\"\n    let base512 = \"\"\n    let base644 = \"\"\n    let base819\
    \ = \"\"\n    let base1024 = \"\"\n    let base1280 = \"\"\n    let base1619 =\
    \ \"\"\n    let base256 = \"\"\n    let base324 = \"\"\n    let base409 = \"\"\
    \n    let base512 = \"\"\n    let base644 = \"\"\n    let base819 = \"\"\n   \
    \ let base1024 = \"\"\n    let base1280 = \"\"\n    let base1619 = \"\"\n    let\
    \ base256 = \"\"\n    let base324 = \"\"\n    let base409 = \"\"\n    let base512\
    \ = \"\"\n    let base644 = \"\"\n    let base819 = \"\"\n    let base1024 = \"\
    \"\n    let ", "    let bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\"\
    , \"Z\", \"Y\"]\n    let baseIndex = bases.index(base)!\n    let result = String(x)\n\
    \    if baseIndex < 0 {\n        return result + bases[-baseIndex]\n    }\n  \
    \  return result + bases[baseIndex]", "    var result = \"\"\n    var remainder\
    \ = x\n    var digits = base\n    while remainder > 0 {\n        remainder, remainder\
    \ = remainder / base, digits\n        digits = digits * base\n    }\n    while\
    \ digits > 0 {\n        result = String(remainder) + result\n        digits =\
    \ digits / base\n    }\n    return result", "    var result = \"\"\n    var remainder\
    \ = x\n    var quotient = base\n    while quotient != 0 {\n        remainder =\
    \ remainder % base\n        result = String(quotient) + result\n        quotient\
    \ = quotient / base\n    }\n    if remainder != 0 {\n        result = String(remainder)\
    \ + result\n    }\n    return result", "    let base10 = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    let base16 = \"0123456789abcdefghijklmnopqrstuvwxyz\"\n    let base26 =\
    \ \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\n    let\
    \ base36 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\
    \    let base52 = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\
    \n    let base62 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz\"\
    \n    let base64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\
    \n    let base7 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\
    \n    let base8 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\
    \n    let base9 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\
    \n    let base10 = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\
    \n    let base16 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\
    \n    let base26 = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\
    \n    let base36 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRST",
  "    let bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n\
    \    let baseIndex = bases.firstIndex(of: base)!\n    let baseString = bases[baseIndex]\n\
    \    let baseInt = Int(baseString)!\n    let baseFloat = Float(baseString)!\n\
    \    let baseInt = Int(x)\n    let baseFloat = Float(x)\n    let baseFloat = baseFloat\
    \ * baseFloat\n    let baseFloat = baseFloat / baseFloat\n    let baseFloat =\
    \ baseFloat / baseInt\n    let baseFloat = baseFloat / baseFloat\n    let baseFloat\
    \ = baseFloat / baseFloat\n    let baseFloat = baseFloat / baseFloat\n    let\
    \ baseFloat = baseFloat / baseFloat\n    let baseFloat = baseFloat / baseFloat\n\
    \    let baseFloat = baseFloat / baseFloat\n    let baseFloat = baseFloat / baseFloat\n\
    \    let baseFloat = baseFloat / baseFloat\n    let baseFloat = baseFloat / baseFloat\n\
    \    let baseFloat = baseFloat / baseFloat\n    let baseFloat = baseFloat / baseFloat\n\
    \    let baseFloat = baseFloat / baseFloat\n    let baseFloat = baseFloat / baseFloat\n\
    \    let baseFloat = baseFloat / baseFloat\n    let baseFloat = baseFloat / baseFloat\n\
    \    let baseFloat = baseFloat / baseFloat\n    let baseFloat = baseFloat / baseFloat\n\
    \    let baseFloat = baseFloat / baseFloat\n    let baseFloat = baseFloat / baseFloat\n\
    \    let baseFloat = baseFloat / baseFloat\n    let baseFloat = baseFloat / baseFloat\n\
    \    let baseFloat = baseFloat / baseFloat\n    let baseFloat = baseFloat / baseFloat\n\
    \    let baseFloat = baseFloat / baseFloat\n    let baseFloat = baseFloat / baseFloat\n\
    \    let baseFloat = baseFloat / baseFloat\n    let baseFloat = baseFloat / baseFloat\n\
    \    let baseFloat = baseFloat / baseFloat\n    let baseFloat = baseFloat / baseFloat\n\
    \    let baseFloat = baseFloat / baseFloat\n    let baseFloat = baseFloat / baseFloat\n\
    \    let baseFloat = baseFloat / baseFloat\n    let baseFloat = baseFloat / baseFloat\n\
    \    let baseFloat = baseFloat / baseFloat\n    let baseFloat = baseFloat / baseFloat\n\
    \    let baseFloat = baseFloat / baseFloat\n    let baseFloat = baseFloat / baseFloat",
  "    var result = \"\"\n    var remainder = x\n    var digit = 0\n    while remainder\
    \ > 0 {\n        digit = remainder % base\n        remainder = remainder / base\n\
    \        result = String(digit) + result\n    }\n    return result", "    let\
    \ bases = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"\
    , \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\"\
    , \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\"\
    , \"W\", \"X\", \"Y\", \"Z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    let basesCount\
    \ = bases.count\n    var newBase = base\n    if base > basesCount {\n        newBase\
    \ = basesCount - 1\n    }\n    var newX = x\n    if x > basesCount {\n       \
    \ newX = basesCount - 1\n    }\n    if newX > basesCount {\n        newX = newBase\n\
    \    }\n    if newX < 0 {\n        newX = 0\n    }\n    if newBase > basesCount\
    \ {\n        newBase = basesCount - 1\n    }\n    if newBase < 0 {\n        newBase\
    \ = 0\n    }\n    if newX == 0 {\n        return \"\"\n    }\n    if newBase ==\
    \ 0 {\n        return \"\"\n    }\n    if newX < newBase {\n        var temp =\
    \ newX\n        newX = newBase\n        newBase = temp\n    }\n    var newBaseString\
    \ = bases[newBase]\n    if newX == 0 {\n        return newBaseString\n    }\n\
    \    if newBase == 0 {\n        return newBaseString\n    }\n    if newX < newBase\
    \ {\n        var temp = newX\n        newX = newBase\n        newBase = temp\n\
    \    }\n    var newBaseString2 = bases[newBase]\n    if newX == 0 {\n        return\
    \ newBaseString2\n    }\n    if newBase == 0 {\n        return newBaseString2\n\
    \    }\n    if newX < newBase {\n        var temp = newX\n        newX = newBase\n\
    \        newBase = temp\n    }\n    var newBaseString3 = bases[newBase]\n    if\
    \ newX == 0 {\n        return newBaseString3\n    }\n    if newBase == 0 {\n \
    \       return newBaseString3\n    }\n    if newX < newBase {\n        var temp\
    \ = newX\n        newX = newBase\n        newBase = temp\n    }\n    var newBaseString4\
    \ = bases[newBase]\n    if newX == 0 {\n        return newBaseString4\n    }\n\
    \    if newBase == 0 {\n        return newBaseString4\n    }\n    if newX < newBase\
    \ {\n        var temp = newX\n        newX = ", "    var result = \"\"\n    var\
    \ digits = \"\"\n    var power = 1\n    var remainder = 0\n    var digit = 0\n\
    \    var baseDigit = 0\n    var isNegative = false\n    var isZero = false\n \
    \   var isBase10 = false\n    var isBase2 = false\n    var isBase8 = false\n \
    \   var isBase16 = false\n    var isBase32 = false\n    var isBase64 = false\n\
    \    var isBase128 = false\n    var isBase256 = false\n    var isBase512 = false\n\
    \    var isBase1024 = false\n    var isBase4096 = false\n    var isBase8192 =\
    \ false\n    var isBase16384 = false\n    var isBase32768 = false\n    var isBase65536\
    \ = false\n    var isBase131072 = false\n    var isBase262144 = false\n    var\
    \ isBase524288 = false\n    var isBase1048576 = false\n    var isBase2097152 =\
    \ false\n    var isBase4194304 = false\n    var isBase8388608 = false\n    var\
    \ isBase16777216 = false\n    var isBase33554432 = false\n    var isBase67108864\
    \ = false\n    var isBase134217728 = false\n    var isBase268435456 = false\n\
    \    var isBase536870912 = false\n    var isBase1073741824 = false\n    var isBase2147483648\
    \ = false\n    var isBase4294967296 = false\n    var isBase8589934592 = false\n\
    \    var isBase17179869184 = false\n    var isBase34359738368 = false\n    var\
    \ isBase68719476736 = false\n    var isBase137438953472 = false\n    var isBase274877906944\
    \ = false\n    var isBase549755813888 = false\n    var isBase1099511627776 = false\n\
    \    var isBase2199023255552 = false\n    var isBase4398046511104 = false\n  \
    \  var isBase8796093022208 = false\n    var isBase17592186044416 = false\n   \
    \ var isBase35184372088832 = false\n    var isBase6174664666848 = false\n    var\
    \ isBase134217727952 = false\n    var isBase2748779069440 = false\n    var isBase5497558138880\
    \ = false\n    var isBase10995116277760 = false\n    var isBase21990232555520\
    \ = false\n    var isBase43980465111040 = false\n    var isBase87960930222080\
    \ = false\n    var is", "    let base10: Int = Int(base)\n    let base16: Int\
    \ = Int(base10)\n    let base16Upper: Int = Int(base16) + 16\n    let base16Lower:\
    \ Int = Int(base16) - 16\n    let base16UpperString: String\n    if base16Upper\
    \ < 10 {\n        base16UpperString = \"0\" + String(base16Upper)\n    } else\
    \ {\n        base16UpperString = String(base16Upper)\n    }\n    let base16LowerString:\
    \ String\n    if base16Lower < 10 {\n        base16LowerString = \"0\" + String(base16Lower)\n\
    \    } else {\n        base16LowerString = String(base16Lower)\n    }\n    let\
    \ base16String: String\n    if base16 < 10 {\n        base16String = base16LowerString\
    \ + base16UpperString\n    } else {\n        base16String = base16UpperString\
    \ + base16LowerString\n    }\n    let base10String: String\n    if base10 < 10\
    \ {\n        base10String = \"0\" + String(base10)\n    } else {\n        base10String\
    \ = String(base10)\n    }\n    let base16StringString: String\n    if base16 <\
    \ 10 {\n        base16StringString = \"0\" + base16String\n    } else {\n    \
    \    base16StringString = base16String\n    }\n    let base10StringString: String\n\
    \    if base10 < 10 {\n        base10StringString = \"0\" + base10String\n   \
    \ } else {\n        base10StringString = base10String\n    }\n    let base16StringStringString:\
    \ String\n    if base16 < 10 {\n        base16StringStringString = \"0\" + base16StringString\n\
    \    } else {\n        base16StringStringString = base16StringString\n    }\n\
    \    let base10StringStringString: String\n    if base10 < 10 {\n        base10StringStringString\
    \ = \"0\" + base10StringString\n    } else {\n        base10StringStringString\
    \ = base10StringString\n    }\n    let base16StringStringStringString: String\n\
    \    if base16 < 10 {\n        base16StringStringStringString = \"0\" + base16StringStringString\n\
    \    } else {\n        base16StringStringStringString = base16StringStringString\n\
    \    }\n    let base10StringStringStringString: String\n    if base10 < 10 {\n\
    \        base10StringStringStringString = \"0\" + base10StringStringStringString\n\
    \    } else {\n        base10StringStringStringString = base10StringStringStringString\n\
    \    }\n    let base16StringStringStringStringString: String\n    if base16 <\
    \ 10 {\n        base16StringStringStringStringString = \"0\" + base16StringStringStringStringString\n\
    \    } else {\n        base16StringStringStringStringString = base16StringStringStringString"]
stop_tokens:
- "\n}"
