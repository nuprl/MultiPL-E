language: swift
name: HumanEval_139_special_factorial
results:
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 1...n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmppiiqkgye/tmppiiqkgye.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed635edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed632e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed632e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed632e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppiiqkgye                        0x00005564ac93d337 <unavailable> + 4919

    5    libc.so.6                          0x00002aed637d9460 __libc_start_main +
    245

    6    tmppiiqkgye                        0x00005564ac93cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 1...n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmppiiqkgye/tmppiiqkgye.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed635edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed632e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed632e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed632e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppiiqkgye                        0x00005564ac93d337 <unavailable> + 4919

    5    libc.so.6                          0x00002aed637d9460 __libc_start_main +
    245

    6    tmppiiqkgye                        0x00005564ac93cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 1...n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmppiiqkgye/tmppiiqkgye.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed635edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed632e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed632e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed632e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppiiqkgye                        0x00005564ac93d337 <unavailable> + 4919

    5    libc.so.6                          0x00002aed637d9460 __libc_start_main +
    245

    6    tmppiiqkgye                        0x00005564ac93cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 1...n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmppiiqkgye/tmppiiqkgye.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed635edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed632e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed632e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed632e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppiiqkgye                        0x00005564ac93d337 <unavailable> + 4919

    5    libc.so.6                          0x00002aed637d9460 __libc_start_main +
    245

    6    tmppiiqkgye                        0x00005564ac93cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 1...n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmppiiqkgye/tmppiiqkgye.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed635edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed632e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed632e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed632e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppiiqkgye                        0x00005564ac93d337 <unavailable> + 4919

    5    libc.so.6                          0x00002aed637d9460 __libc_start_main +
    245

    6    tmppiiqkgye                        0x00005564ac93cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 1...n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmppiiqkgye/tmppiiqkgye.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed635edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed632e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed632e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed632e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppiiqkgye                        0x00005564ac93d337 <unavailable> + 4919

    5    libc.so.6                          0x00002aed637d9460 __libc_start_main +
    245

    6    tmppiiqkgye                        0x00005564ac93cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 1...n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmppiiqkgye/tmppiiqkgye.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed635edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed632e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed632e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed632e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppiiqkgye                        0x00005564ac93d337 <unavailable> + 4919

    5    libc.so.6                          0x00002aed637d9460 __libc_start_main +
    245

    6    tmppiiqkgye                        0x00005564ac93cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 1...n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmppiiqkgye/tmppiiqkgye.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed635edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed632e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed632e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed632e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppiiqkgye                        0x00005564ac93d337 <unavailable> + 4919

    5    libc.so.6                          0x00002aed637d9460 __libc_start_main +
    245

    6    tmppiiqkgye                        0x00005564ac93cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 1...n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmppiiqkgye/tmppiiqkgye.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed635edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed632e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed632e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed632e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppiiqkgye                        0x00005564ac93d337 <unavailable> + 4919

    5    libc.so.6                          0x00002aed637d9460 __libc_start_main +
    245

    6    tmppiiqkgye                        0x00005564ac93cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 1...n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmppiiqkgye/tmppiiqkgye.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed635edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed632e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed632e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed632e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppiiqkgye                        0x00005564ac93d337 <unavailable> + 4919

    5    libc.so.6                          0x00002aed637d9460 __libc_start_main +
    245

    6    tmppiiqkgye                        0x00005564ac93cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var\
    \ factorial = 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpp1hvpetk/tmpp1hvpetk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b434529dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4344f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4344f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4344f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1hvpetk                        0x000056482990e337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4345489460 __libc_start_main +
    245

    6    tmpp1hvpetk                        0x000056482990dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979346
